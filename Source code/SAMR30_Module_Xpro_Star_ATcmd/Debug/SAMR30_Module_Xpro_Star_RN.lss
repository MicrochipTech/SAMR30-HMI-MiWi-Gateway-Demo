
SAMR30_Module_Xpro_Star_RN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012a48  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000009c  20000000  00012a48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  0003009c  2**0
                  CONTENTS
  3 .bss          0000245c  2000009c  00012ae4  0003009c  2**2
                  ALLOC
  4 .stack        00002000  200024f8  00014f40  0003009c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
  6 .comment      0000008c  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   0006138f  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000a1e0  00000000  00000000  000914df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00018081  00000000  00000000  0009b6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001040  00000000  00000000  000b3740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001c48  00000000  00000000  000b4780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00029342  00000000  00000000  000b63c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024fc3  00000000  00000000  000df70a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009d0f5  00000000  00000000  001046cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000035fc  00000000  00000000  001a17c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
       0:	f8 44 00 20 35 83 00 00 31 83 00 00 31 83 00 00     .D. 5...1...1...
	...
				    | config->prescaler;
      2c:	31 83 00 00 00 00 00 00 00 00 00 00 31 83 00 00     1...........1...
	switch (config->mode) {
      3c:	31 83 00 00 31 83 00 00 31 83 00 00 bd 68 00 00     1...1...1....h..
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
      4c:	fd 63 00 00 31 83 00 00 31 83 00 00 31 83 00 00     .c..1...1...1...
				rtc_count_set_compare(module, config->compare_values[i],
      5c:	31 83 00 00 ed 6c 00 00 fd 6c 00 00 0d 6d 00 00     1....l...l...m..
				return STATUS_ERR_INVALID_ARG;
      6c:	1d 6d 00 00 2d 6d 00 00 3d 6d 00 00 31 83 00 00     .m..-m..=m..1...
				rtc_count_set_compare(module, config->compare_values[i],
      7c:	31 83 00 00 31 83 00 00 19 7f 00 00 29 7f 00 00     1...1.......)...
	...
	return STATUS_OK;
      94:	39 7f 00 00 31 83 00 00 31 83 00 00 00 00 00 00     9...1...1.......
      a4:	31 83 00 00 00 00 00 00 00 00 00 00 00 00 00 00     1...............
	...

00002100 <__d_nv_mem_start>:
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff
    4400:	ffffffff 	.word	0xffffffff
    4404:	ffffffff 	.word	0xffffffff
    4408:	ffffffff 	.word	0xffffffff
    440c:	ffffffff 	.word	0xffffffff
    4410:	ffffffff 	.word	0xffffffff
    4414:	ffffffff 	.word	0xffffffff
    4418:	ffffffff 	.word	0xffffffff
    441c:	ffffffff 	.word	0xffffffff
    4420:	ffffffff 	.word	0xffffffff
    4424:	ffffffff 	.word	0xffffffff
    4428:	ffffffff 	.word	0xffffffff
    442c:	ffffffff 	.word	0xffffffff
    4430:	ffffffff 	.word	0xffffffff
    4434:	ffffffff 	.word	0xffffffff
    4438:	ffffffff 	.word	0xffffffff
    443c:	ffffffff 	.word	0xffffffff
    4440:	ffffffff 	.word	0xffffffff
    4444:	ffffffff 	.word	0xffffffff
    4448:	ffffffff 	.word	0xffffffff
    444c:	ffffffff 	.word	0xffffffff
    4450:	ffffffff 	.word	0xffffffff
    4454:	ffffffff 	.word	0xffffffff
    4458:	ffffffff 	.word	0xffffffff
    445c:	ffffffff 	.word	0xffffffff
    4460:	ffffffff 	.word	0xffffffff
    4464:	ffffffff 	.word	0xffffffff
    4468:	ffffffff 	.word	0xffffffff
    446c:	ffffffff 	.word	0xffffffff
    4470:	ffffffff 	.word	0xffffffff
    4474:	ffffffff 	.word	0xffffffff
    4478:	ffffffff 	.word	0xffffffff
    447c:	ffffffff 	.word	0xffffffff
    4480:	ffffffff 	.word	0xffffffff
    4484:	ffffffff 	.word	0xffffffff
    4488:	ffffffff 	.word	0xffffffff
    448c:	ffffffff 	.word	0xffffffff
    4490:	ffffffff 	.word	0xffffffff
    4494:	ffffffff 	.word	0xffffffff
    4498:	ffffffff 	.word	0xffffffff
    449c:	ffffffff 	.word	0xffffffff
    44a0:	ffffffff 	.word	0xffffffff
    44a4:	ffffffff 	.word	0xffffffff
    44a8:	ffffffff 	.word	0xffffffff
    44ac:	ffffffff 	.word	0xffffffff
    44b0:	ffffffff 	.word	0xffffffff
    44b4:	ffffffff 	.word	0xffffffff
    44b8:	ffffffff 	.word	0xffffffff
    44bc:	ffffffff 	.word	0xffffffff
    44c0:	ffffffff 	.word	0xffffffff
    44c4:	ffffffff 	.word	0xffffffff
    44c8:	ffffffff 	.word	0xffffffff
    44cc:	ffffffff 	.word	0xffffffff
    44d0:	ffffffff 	.word	0xffffffff
    44d4:	ffffffff 	.word	0xffffffff
    44d8:	ffffffff 	.word	0xffffffff
    44dc:	ffffffff 	.word	0xffffffff
    44e0:	ffffffff 	.word	0xffffffff
    44e4:	ffffffff 	.word	0xffffffff
    44e8:	ffffffff 	.word	0xffffffff
    44ec:	ffffffff 	.word	0xffffffff
    44f0:	ffffffff 	.word	0xffffffff
    44f4:	ffffffff 	.word	0xffffffff
    44f8:	ffffffff 	.word	0xffffffff
    44fc:	ffffffff 	.word	0xffffffff
    4500:	ffffffff 	.word	0xffffffff
    4504:	ffffffff 	.word	0xffffffff
    4508:	ffffffff 	.word	0xffffffff
    450c:	ffffffff 	.word	0xffffffff
    4510:	ffffffff 	.word	0xffffffff
    4514:	ffffffff 	.word	0xffffffff
    4518:	ffffffff 	.word	0xffffffff
    451c:	ffffffff 	.word	0xffffffff
    4520:	ffffffff 	.word	0xffffffff
    4524:	ffffffff 	.word	0xffffffff
    4528:	ffffffff 	.word	0xffffffff
    452c:	ffffffff 	.word	0xffffffff
    4530:	ffffffff 	.word	0xffffffff
    4534:	ffffffff 	.word	0xffffffff
    4538:	ffffffff 	.word	0xffffffff
    453c:	ffffffff 	.word	0xffffffff
    4540:	ffffffff 	.word	0xffffffff
    4544:	ffffffff 	.word	0xffffffff
    4548:	ffffffff 	.word	0xffffffff
    454c:	ffffffff 	.word	0xffffffff
    4550:	ffffffff 	.word	0xffffffff
    4554:	ffffffff 	.word	0xffffffff
    4558:	ffffffff 	.word	0xffffffff
    455c:	ffffffff 	.word	0xffffffff
    4560:	ffffffff 	.word	0xffffffff
    4564:	ffffffff 	.word	0xffffffff
    4568:	ffffffff 	.word	0xffffffff
    456c:	ffffffff 	.word	0xffffffff
    4570:	ffffffff 	.word	0xffffffff
    4574:	ffffffff 	.word	0xffffffff
    4578:	ffffffff 	.word	0xffffffff
    457c:	ffffffff 	.word	0xffffffff
    4580:	ffffffff 	.word	0xffffffff
    4584:	ffffffff 	.word	0xffffffff
    4588:	ffffffff 	.word	0xffffffff
    458c:	ffffffff 	.word	0xffffffff
    4590:	ffffffff 	.word	0xffffffff
    4594:	ffffffff 	.word	0xffffffff
    4598:	ffffffff 	.word	0xffffffff
    459c:	ffffffff 	.word	0xffffffff
    45a0:	ffffffff 	.word	0xffffffff
    45a4:	ffffffff 	.word	0xffffffff
    45a8:	ffffffff 	.word	0xffffffff
    45ac:	ffffffff 	.word	0xffffffff
    45b0:	ffffffff 	.word	0xffffffff
    45b4:	ffffffff 	.word	0xffffffff
    45b8:	ffffffff 	.word	0xffffffff
    45bc:	ffffffff 	.word	0xffffffff
    45c0:	ffffffff 	.word	0xffffffff
    45c4:	ffffffff 	.word	0xffffffff
    45c8:	ffffffff 	.word	0xffffffff
    45cc:	ffffffff 	.word	0xffffffff
    45d0:	ffffffff 	.word	0xffffffff
    45d4:	ffffffff 	.word	0xffffffff
    45d8:	ffffffff 	.word	0xffffffff
    45dc:	ffffffff 	.word	0xffffffff
    45e0:	ffffffff 	.word	0xffffffff
    45e4:	ffffffff 	.word	0xffffffff
    45e8:	ffffffff 	.word	0xffffffff
    45ec:	ffffffff 	.word	0xffffffff
    45f0:	ffffffff 	.word	0xffffffff
    45f4:	ffffffff 	.word	0xffffffff
    45f8:	ffffffff 	.word	0xffffffff
    45fc:	ffffffff 	.word	0xffffffff
    4600:	ffffffff 	.word	0xffffffff
    4604:	ffffffff 	.word	0xffffffff
    4608:	ffffffff 	.word	0xffffffff
    460c:	ffffffff 	.word	0xffffffff
    4610:	ffffffff 	.word	0xffffffff
    4614:	ffffffff 	.word	0xffffffff
    4618:	ffffffff 	.word	0xffffffff
    461c:	ffffffff 	.word	0xffffffff
    4620:	ffffffff 	.word	0xffffffff
    4624:	ffffffff 	.word	0xffffffff
    4628:	ffffffff 	.word	0xffffffff
    462c:	ffffffff 	.word	0xffffffff
    4630:	ffffffff 	.word	0xffffffff
    4634:	ffffffff 	.word	0xffffffff
    4638:	ffffffff 	.word	0xffffffff
    463c:	ffffffff 	.word	0xffffffff
    4640:	ffffffff 	.word	0xffffffff
    4644:	ffffffff 	.word	0xffffffff
    4648:	ffffffff 	.word	0xffffffff
    464c:	ffffffff 	.word	0xffffffff
    4650:	ffffffff 	.word	0xffffffff
    4654:	ffffffff 	.word	0xffffffff
    4658:	ffffffff 	.word	0xffffffff
    465c:	ffffffff 	.word	0xffffffff
    4660:	ffffffff 	.word	0xffffffff
    4664:	ffffffff 	.word	0xffffffff
    4668:	ffffffff 	.word	0xffffffff
    466c:	ffffffff 	.word	0xffffffff
    4670:	ffffffff 	.word	0xffffffff
    4674:	ffffffff 	.word	0xffffffff
    4678:	ffffffff 	.word	0xffffffff
    467c:	ffffffff 	.word	0xffffffff
    4680:	ffffffff 	.word	0xffffffff
    4684:	ffffffff 	.word	0xffffffff
    4688:	ffffffff 	.word	0xffffffff
    468c:	ffffffff 	.word	0xffffffff
    4690:	ffffffff 	.word	0xffffffff
    4694:	ffffffff 	.word	0xffffffff
    4698:	ffffffff 	.word	0xffffffff
    469c:	ffffffff 	.word	0xffffffff
    46a0:	ffffffff 	.word	0xffffffff
    46a4:	ffffffff 	.word	0xffffffff
    46a8:	ffffffff 	.word	0xffffffff
    46ac:	ffffffff 	.word	0xffffffff
    46b0:	ffffffff 	.word	0xffffffff
    46b4:	ffffffff 	.word	0xffffffff
    46b8:	ffffffff 	.word	0xffffffff
    46bc:	ffffffff 	.word	0xffffffff
    46c0:	ffffffff 	.word	0xffffffff
    46c4:	ffffffff 	.word	0xffffffff
    46c8:	ffffffff 	.word	0xffffffff
    46cc:	ffffffff 	.word	0xffffffff
    46d0:	ffffffff 	.word	0xffffffff
    46d4:	ffffffff 	.word	0xffffffff
    46d8:	ffffffff 	.word	0xffffffff
    46dc:	ffffffff 	.word	0xffffffff
    46e0:	ffffffff 	.word	0xffffffff
    46e4:	ffffffff 	.word	0xffffffff
    46e8:	ffffffff 	.word	0xffffffff
    46ec:	ffffffff 	.word	0xffffffff
    46f0:	ffffffff 	.word	0xffffffff
    46f4:	ffffffff 	.word	0xffffffff
    46f8:	ffffffff 	.word	0xffffffff
    46fc:	ffffffff 	.word	0xffffffff
    4700:	ffffffff 	.word	0xffffffff
    4704:	ffffffff 	.word	0xffffffff
    4708:	ffffffff 	.word	0xffffffff
    470c:	ffffffff 	.word	0xffffffff
    4710:	ffffffff 	.word	0xffffffff
    4714:	ffffffff 	.word	0xffffffff
    4718:	ffffffff 	.word	0xffffffff
    471c:	ffffffff 	.word	0xffffffff
    4720:	ffffffff 	.word	0xffffffff
    4724:	ffffffff 	.word	0xffffffff
    4728:	ffffffff 	.word	0xffffffff
    472c:	ffffffff 	.word	0xffffffff
    4730:	ffffffff 	.word	0xffffffff
    4734:	ffffffff 	.word	0xffffffff
    4738:	ffffffff 	.word	0xffffffff
    473c:	ffffffff 	.word	0xffffffff
    4740:	ffffffff 	.word	0xffffffff
    4744:	ffffffff 	.word	0xffffffff
    4748:	ffffffff 	.word	0xffffffff
    474c:	ffffffff 	.word	0xffffffff
    4750:	ffffffff 	.word	0xffffffff
    4754:	ffffffff 	.word	0xffffffff
    4758:	ffffffff 	.word	0xffffffff
    475c:	ffffffff 	.word	0xffffffff
    4760:	ffffffff 	.word	0xffffffff
    4764:	ffffffff 	.word	0xffffffff
    4768:	ffffffff 	.word	0xffffffff
    476c:	ffffffff 	.word	0xffffffff
    4770:	ffffffff 	.word	0xffffffff
    4774:	ffffffff 	.word	0xffffffff
    4778:	ffffffff 	.word	0xffffffff
    477c:	ffffffff 	.word	0xffffffff
    4780:	ffffffff 	.word	0xffffffff
    4784:	ffffffff 	.word	0xffffffff
    4788:	ffffffff 	.word	0xffffffff
    478c:	ffffffff 	.word	0xffffffff
    4790:	ffffffff 	.word	0xffffffff
    4794:	ffffffff 	.word	0xffffffff
    4798:	ffffffff 	.word	0xffffffff
    479c:	ffffffff 	.word	0xffffffff
    47a0:	ffffffff 	.word	0xffffffff
    47a4:	ffffffff 	.word	0xffffffff
    47a8:	ffffffff 	.word	0xffffffff
    47ac:	ffffffff 	.word	0xffffffff
    47b0:	ffffffff 	.word	0xffffffff
    47b4:	ffffffff 	.word	0xffffffff
    47b8:	ffffffff 	.word	0xffffffff
    47bc:	ffffffff 	.word	0xffffffff
    47c0:	ffffffff 	.word	0xffffffff
    47c4:	ffffffff 	.word	0xffffffff
    47c8:	ffffffff 	.word	0xffffffff
    47cc:	ffffffff 	.word	0xffffffff
    47d0:	ffffffff 	.word	0xffffffff
    47d4:	ffffffff 	.word	0xffffffff
    47d8:	ffffffff 	.word	0xffffffff
    47dc:	ffffffff 	.word	0xffffffff
    47e0:	ffffffff 	.word	0xffffffff
    47e4:	ffffffff 	.word	0xffffffff
    47e8:	ffffffff 	.word	0xffffffff
    47ec:	ffffffff 	.word	0xffffffff
    47f0:	ffffffff 	.word	0xffffffff
    47f4:	ffffffff 	.word	0xffffffff
    47f8:	ffffffff 	.word	0xffffffff
    47fc:	ffffffff 	.word	0xffffffff
    4800:	ffffffff 	.word	0xffffffff
    4804:	ffffffff 	.word	0xffffffff
    4808:	ffffffff 	.word	0xffffffff
    480c:	ffffffff 	.word	0xffffffff
    4810:	ffffffff 	.word	0xffffffff
    4814:	ffffffff 	.word	0xffffffff
    4818:	ffffffff 	.word	0xffffffff
    481c:	ffffffff 	.word	0xffffffff
    4820:	ffffffff 	.word	0xffffffff
    4824:	ffffffff 	.word	0xffffffff
    4828:	ffffffff 	.word	0xffffffff
    482c:	ffffffff 	.word	0xffffffff
    4830:	ffffffff 	.word	0xffffffff
    4834:	ffffffff 	.word	0xffffffff
    4838:	ffffffff 	.word	0xffffffff
    483c:	ffffffff 	.word	0xffffffff
    4840:	ffffffff 	.word	0xffffffff
    4844:	ffffffff 	.word	0xffffffff
    4848:	ffffffff 	.word	0xffffffff
    484c:	ffffffff 	.word	0xffffffff
    4850:	ffffffff 	.word	0xffffffff
    4854:	ffffffff 	.word	0xffffffff
    4858:	ffffffff 	.word	0xffffffff
    485c:	ffffffff 	.word	0xffffffff
    4860:	ffffffff 	.word	0xffffffff
    4864:	ffffffff 	.word	0xffffffff
    4868:	ffffffff 	.word	0xffffffff
    486c:	ffffffff 	.word	0xffffffff
    4870:	ffffffff 	.word	0xffffffff
    4874:	ffffffff 	.word	0xffffffff
    4878:	ffffffff 	.word	0xffffffff
    487c:	ffffffff 	.word	0xffffffff
    4880:	ffffffff 	.word	0xffffffff
    4884:	ffffffff 	.word	0xffffffff
    4888:	ffffffff 	.word	0xffffffff
    488c:	ffffffff 	.word	0xffffffff
    4890:	ffffffff 	.word	0xffffffff
    4894:	ffffffff 	.word	0xffffffff
    4898:	ffffffff 	.word	0xffffffff
    489c:	ffffffff 	.word	0xffffffff
    48a0:	ffffffff 	.word	0xffffffff
    48a4:	ffffffff 	.word	0xffffffff
    48a8:	ffffffff 	.word	0xffffffff
    48ac:	ffffffff 	.word	0xffffffff
    48b0:	ffffffff 	.word	0xffffffff
    48b4:	ffffffff 	.word	0xffffffff
    48b8:	ffffffff 	.word	0xffffffff
    48bc:	ffffffff 	.word	0xffffffff
    48c0:	ffffffff 	.word	0xffffffff
    48c4:	ffffffff 	.word	0xffffffff
    48c8:	ffffffff 	.word	0xffffffff
    48cc:	ffffffff 	.word	0xffffffff
    48d0:	ffffffff 	.word	0xffffffff
    48d4:	ffffffff 	.word	0xffffffff
    48d8:	ffffffff 	.word	0xffffffff
    48dc:	ffffffff 	.word	0xffffffff
    48e0:	ffffffff 	.word	0xffffffff
    48e4:	ffffffff 	.word	0xffffffff
    48e8:	ffffffff 	.word	0xffffffff
    48ec:	ffffffff 	.word	0xffffffff
    48f0:	ffffffff 	.word	0xffffffff
    48f4:	ffffffff 	.word	0xffffffff
    48f8:	ffffffff 	.word	0xffffffff
    48fc:	ffffffff 	.word	0xffffffff
    4900:	ffffffff 	.word	0xffffffff
    4904:	ffffffff 	.word	0xffffffff
    4908:	ffffffff 	.word	0xffffffff
    490c:	ffffffff 	.word	0xffffffff
    4910:	ffffffff 	.word	0xffffffff
    4914:	ffffffff 	.word	0xffffffff
    4918:	ffffffff 	.word	0xffffffff
    491c:	ffffffff 	.word	0xffffffff
    4920:	ffffffff 	.word	0xffffffff
    4924:	ffffffff 	.word	0xffffffff
    4928:	ffffffff 	.word	0xffffffff
    492c:	ffffffff 	.word	0xffffffff
    4930:	ffffffff 	.word	0xffffffff
    4934:	ffffffff 	.word	0xffffffff
    4938:	ffffffff 	.word	0xffffffff
    493c:	ffffffff 	.word	0xffffffff
    4940:	ffffffff 	.word	0xffffffff
    4944:	ffffffff 	.word	0xffffffff
    4948:	ffffffff 	.word	0xffffffff
    494c:	ffffffff 	.word	0xffffffff
    4950:	ffffffff 	.word	0xffffffff
    4954:	ffffffff 	.word	0xffffffff
    4958:	ffffffff 	.word	0xffffffff
    495c:	ffffffff 	.word	0xffffffff
    4960:	ffffffff 	.word	0xffffffff
    4964:	ffffffff 	.word	0xffffffff
    4968:	ffffffff 	.word	0xffffffff
    496c:	ffffffff 	.word	0xffffffff
    4970:	ffffffff 	.word	0xffffffff
    4974:	ffffffff 	.word	0xffffffff
    4978:	ffffffff 	.word	0xffffffff
    497c:	ffffffff 	.word	0xffffffff
    4980:	ffffffff 	.word	0xffffffff
    4984:	ffffffff 	.word	0xffffffff
    4988:	ffffffff 	.word	0xffffffff
    498c:	ffffffff 	.word	0xffffffff
    4990:	ffffffff 	.word	0xffffffff
    4994:	ffffffff 	.word	0xffffffff
    4998:	ffffffff 	.word	0xffffffff
    499c:	ffffffff 	.word	0xffffffff
    49a0:	ffffffff 	.word	0xffffffff
    49a4:	ffffffff 	.word	0xffffffff
    49a8:	ffffffff 	.word	0xffffffff
    49ac:	ffffffff 	.word	0xffffffff
    49b0:	ffffffff 	.word	0xffffffff
    49b4:	ffffffff 	.word	0xffffffff
    49b8:	ffffffff 	.word	0xffffffff
    49bc:	ffffffff 	.word	0xffffffff
    49c0:	ffffffff 	.word	0xffffffff
    49c4:	ffffffff 	.word	0xffffffff
    49c8:	ffffffff 	.word	0xffffffff
    49cc:	ffffffff 	.word	0xffffffff
    49d0:	ffffffff 	.word	0xffffffff
    49d4:	ffffffff 	.word	0xffffffff
    49d8:	ffffffff 	.word	0xffffffff
    49dc:	ffffffff 	.word	0xffffffff
    49e0:	ffffffff 	.word	0xffffffff
    49e4:	ffffffff 	.word	0xffffffff
    49e8:	ffffffff 	.word	0xffffffff
    49ec:	ffffffff 	.word	0xffffffff
    49f0:	ffffffff 	.word	0xffffffff
    49f4:	ffffffff 	.word	0xffffffff
    49f8:	ffffffff 	.word	0xffffffff
    49fc:	ffffffff 	.word	0xffffffff
    4a00:	ffffffff 	.word	0xffffffff
    4a04:	ffffffff 	.word	0xffffffff
    4a08:	ffffffff 	.word	0xffffffff
    4a0c:	ffffffff 	.word	0xffffffff
    4a10:	ffffffff 	.word	0xffffffff
    4a14:	ffffffff 	.word	0xffffffff
    4a18:	ffffffff 	.word	0xffffffff
    4a1c:	ffffffff 	.word	0xffffffff
    4a20:	ffffffff 	.word	0xffffffff
    4a24:	ffffffff 	.word	0xffffffff
    4a28:	ffffffff 	.word	0xffffffff
    4a2c:	ffffffff 	.word	0xffffffff
    4a30:	ffffffff 	.word	0xffffffff
    4a34:	ffffffff 	.word	0xffffffff
    4a38:	ffffffff 	.word	0xffffffff
    4a3c:	ffffffff 	.word	0xffffffff
    4a40:	ffffffff 	.word	0xffffffff
    4a44:	ffffffff 	.word	0xffffffff
    4a48:	ffffffff 	.word	0xffffffff
    4a4c:	ffffffff 	.word	0xffffffff
    4a50:	ffffffff 	.word	0xffffffff
    4a54:	ffffffff 	.word	0xffffffff
    4a58:	ffffffff 	.word	0xffffffff
    4a5c:	ffffffff 	.word	0xffffffff
    4a60:	ffffffff 	.word	0xffffffff
    4a64:	ffffffff 	.word	0xffffffff
    4a68:	ffffffff 	.word	0xffffffff
    4a6c:	ffffffff 	.word	0xffffffff
    4a70:	ffffffff 	.word	0xffffffff
    4a74:	ffffffff 	.word	0xffffffff
    4a78:	ffffffff 	.word	0xffffffff
    4a7c:	ffffffff 	.word	0xffffffff
    4a80:	ffffffff 	.word	0xffffffff
    4a84:	ffffffff 	.word	0xffffffff
    4a88:	ffffffff 	.word	0xffffffff
    4a8c:	ffffffff 	.word	0xffffffff
    4a90:	ffffffff 	.word	0xffffffff
    4a94:	ffffffff 	.word	0xffffffff
    4a98:	ffffffff 	.word	0xffffffff
    4a9c:	ffffffff 	.word	0xffffffff
    4aa0:	ffffffff 	.word	0xffffffff
    4aa4:	ffffffff 	.word	0xffffffff
    4aa8:	ffffffff 	.word	0xffffffff
    4aac:	ffffffff 	.word	0xffffffff
    4ab0:	ffffffff 	.word	0xffffffff
    4ab4:	ffffffff 	.word	0xffffffff
    4ab8:	ffffffff 	.word	0xffffffff
    4abc:	ffffffff 	.word	0xffffffff
    4ac0:	ffffffff 	.word	0xffffffff
    4ac4:	ffffffff 	.word	0xffffffff
    4ac8:	ffffffff 	.word	0xffffffff
    4acc:	ffffffff 	.word	0xffffffff
    4ad0:	ffffffff 	.word	0xffffffff
    4ad4:	ffffffff 	.word	0xffffffff
    4ad8:	ffffffff 	.word	0xffffffff
    4adc:	ffffffff 	.word	0xffffffff
    4ae0:	ffffffff 	.word	0xffffffff
    4ae4:	ffffffff 	.word	0xffffffff
    4ae8:	ffffffff 	.word	0xffffffff
    4aec:	ffffffff 	.word	0xffffffff
    4af0:	ffffffff 	.word	0xffffffff
    4af4:	ffffffff 	.word	0xffffffff
    4af8:	ffffffff 	.word	0xffffffff
    4afc:	ffffffff 	.word	0xffffffff
    4b00:	ffffffff 	.word	0xffffffff
    4b04:	ffffffff 	.word	0xffffffff
    4b08:	ffffffff 	.word	0xffffffff
    4b0c:	ffffffff 	.word	0xffffffff
    4b10:	ffffffff 	.word	0xffffffff
    4b14:	ffffffff 	.word	0xffffffff
    4b18:	ffffffff 	.word	0xffffffff
    4b1c:	ffffffff 	.word	0xffffffff
    4b20:	ffffffff 	.word	0xffffffff
    4b24:	ffffffff 	.word	0xffffffff
    4b28:	ffffffff 	.word	0xffffffff
    4b2c:	ffffffff 	.word	0xffffffff
    4b30:	ffffffff 	.word	0xffffffff
    4b34:	ffffffff 	.word	0xffffffff
    4b38:	ffffffff 	.word	0xffffffff
    4b3c:	ffffffff 	.word	0xffffffff
    4b40:	ffffffff 	.word	0xffffffff
    4b44:	ffffffff 	.word	0xffffffff
    4b48:	ffffffff 	.word	0xffffffff
    4b4c:	ffffffff 	.word	0xffffffff
    4b50:	ffffffff 	.word	0xffffffff
    4b54:	ffffffff 	.word	0xffffffff
    4b58:	ffffffff 	.word	0xffffffff
    4b5c:	ffffffff 	.word	0xffffffff
    4b60:	ffffffff 	.word	0xffffffff
    4b64:	ffffffff 	.word	0xffffffff
    4b68:	ffffffff 	.word	0xffffffff
    4b6c:	ffffffff 	.word	0xffffffff
    4b70:	ffffffff 	.word	0xffffffff
    4b74:	ffffffff 	.word	0xffffffff
    4b78:	ffffffff 	.word	0xffffffff
    4b7c:	ffffffff 	.word	0xffffffff
    4b80:	ffffffff 	.word	0xffffffff
    4b84:	ffffffff 	.word	0xffffffff
    4b88:	ffffffff 	.word	0xffffffff
    4b8c:	ffffffff 	.word	0xffffffff
    4b90:	ffffffff 	.word	0xffffffff
    4b94:	ffffffff 	.word	0xffffffff
    4b98:	ffffffff 	.word	0xffffffff
    4b9c:	ffffffff 	.word	0xffffffff
    4ba0:	ffffffff 	.word	0xffffffff
    4ba4:	ffffffff 	.word	0xffffffff
    4ba8:	ffffffff 	.word	0xffffffff
    4bac:	ffffffff 	.word	0xffffffff
    4bb0:	ffffffff 	.word	0xffffffff
    4bb4:	ffffffff 	.word	0xffffffff
    4bb8:	ffffffff 	.word	0xffffffff
    4bbc:	ffffffff 	.word	0xffffffff
    4bc0:	ffffffff 	.word	0xffffffff
    4bc4:	ffffffff 	.word	0xffffffff
    4bc8:	ffffffff 	.word	0xffffffff
    4bcc:	ffffffff 	.word	0xffffffff
    4bd0:	ffffffff 	.word	0xffffffff
    4bd4:	ffffffff 	.word	0xffffffff
    4bd8:	ffffffff 	.word	0xffffffff
    4bdc:	ffffffff 	.word	0xffffffff
    4be0:	ffffffff 	.word	0xffffffff
    4be4:	ffffffff 	.word	0xffffffff
    4be8:	ffffffff 	.word	0xffffffff
    4bec:	ffffffff 	.word	0xffffffff
    4bf0:	ffffffff 	.word	0xffffffff
    4bf4:	ffffffff 	.word	0xffffffff
    4bf8:	ffffffff 	.word	0xffffffff
    4bfc:	ffffffff 	.word	0xffffffff
    4c00:	ffffffff 	.word	0xffffffff
    4c04:	ffffffff 	.word	0xffffffff
    4c08:	ffffffff 	.word	0xffffffff
    4c0c:	ffffffff 	.word	0xffffffff
    4c10:	ffffffff 	.word	0xffffffff
    4c14:	ffffffff 	.word	0xffffffff
    4c18:	ffffffff 	.word	0xffffffff
    4c1c:	ffffffff 	.word	0xffffffff
    4c20:	ffffffff 	.word	0xffffffff
    4c24:	ffffffff 	.word	0xffffffff
    4c28:	ffffffff 	.word	0xffffffff
    4c2c:	ffffffff 	.word	0xffffffff
    4c30:	ffffffff 	.word	0xffffffff
    4c34:	ffffffff 	.word	0xffffffff
    4c38:	ffffffff 	.word	0xffffffff
    4c3c:	ffffffff 	.word	0xffffffff
    4c40:	ffffffff 	.word	0xffffffff
    4c44:	ffffffff 	.word	0xffffffff
    4c48:	ffffffff 	.word	0xffffffff
    4c4c:	ffffffff 	.word	0xffffffff
    4c50:	ffffffff 	.word	0xffffffff
    4c54:	ffffffff 	.word	0xffffffff
    4c58:	ffffffff 	.word	0xffffffff
    4c5c:	ffffffff 	.word	0xffffffff
    4c60:	ffffffff 	.word	0xffffffff
    4c64:	ffffffff 	.word	0xffffffff
    4c68:	ffffffff 	.word	0xffffffff
    4c6c:	ffffffff 	.word	0xffffffff
    4c70:	ffffffff 	.word	0xffffffff
    4c74:	ffffffff 	.word	0xffffffff
    4c78:	ffffffff 	.word	0xffffffff
    4c7c:	ffffffff 	.word	0xffffffff
    4c80:	ffffffff 	.word	0xffffffff
    4c84:	ffffffff 	.word	0xffffffff
    4c88:	ffffffff 	.word	0xffffffff
    4c8c:	ffffffff 	.word	0xffffffff
    4c90:	ffffffff 	.word	0xffffffff
    4c94:	ffffffff 	.word	0xffffffff
    4c98:	ffffffff 	.word	0xffffffff
    4c9c:	ffffffff 	.word	0xffffffff
    4ca0:	ffffffff 	.word	0xffffffff
    4ca4:	ffffffff 	.word	0xffffffff
    4ca8:	ffffffff 	.word	0xffffffff
    4cac:	ffffffff 	.word	0xffffffff
    4cb0:	ffffffff 	.word	0xffffffff
    4cb4:	ffffffff 	.word	0xffffffff
    4cb8:	ffffffff 	.word	0xffffffff
    4cbc:	ffffffff 	.word	0xffffffff
    4cc0:	ffffffff 	.word	0xffffffff
    4cc4:	ffffffff 	.word	0xffffffff
    4cc8:	ffffffff 	.word	0xffffffff
    4ccc:	ffffffff 	.word	0xffffffff
    4cd0:	ffffffff 	.word	0xffffffff
    4cd4:	ffffffff 	.word	0xffffffff
    4cd8:	ffffffff 	.word	0xffffffff
    4cdc:	ffffffff 	.word	0xffffffff
    4ce0:	ffffffff 	.word	0xffffffff
    4ce4:	ffffffff 	.word	0xffffffff
    4ce8:	ffffffff 	.word	0xffffffff
    4cec:	ffffffff 	.word	0xffffffff
    4cf0:	ffffffff 	.word	0xffffffff
    4cf4:	ffffffff 	.word	0xffffffff
    4cf8:	ffffffff 	.word	0xffffffff
    4cfc:	ffffffff 	.word	0xffffffff
    4d00:	ffffffff 	.word	0xffffffff
    4d04:	ffffffff 	.word	0xffffffff
    4d08:	ffffffff 	.word	0xffffffff
    4d0c:	ffffffff 	.word	0xffffffff
    4d10:	ffffffff 	.word	0xffffffff
    4d14:	ffffffff 	.word	0xffffffff
    4d18:	ffffffff 	.word	0xffffffff
    4d1c:	ffffffff 	.word	0xffffffff
    4d20:	ffffffff 	.word	0xffffffff
    4d24:	ffffffff 	.word	0xffffffff
    4d28:	ffffffff 	.word	0xffffffff
    4d2c:	ffffffff 	.word	0xffffffff
    4d30:	ffffffff 	.word	0xffffffff
    4d34:	ffffffff 	.word	0xffffffff
    4d38:	ffffffff 	.word	0xffffffff
    4d3c:	ffffffff 	.word	0xffffffff
    4d40:	ffffffff 	.word	0xffffffff
    4d44:	ffffffff 	.word	0xffffffff
    4d48:	ffffffff 	.word	0xffffffff
    4d4c:	ffffffff 	.word	0xffffffff
    4d50:	ffffffff 	.word	0xffffffff
    4d54:	ffffffff 	.word	0xffffffff
    4d58:	ffffffff 	.word	0xffffffff
    4d5c:	ffffffff 	.word	0xffffffff
    4d60:	ffffffff 	.word	0xffffffff
    4d64:	ffffffff 	.word	0xffffffff
    4d68:	ffffffff 	.word	0xffffffff
    4d6c:	ffffffff 	.word	0xffffffff
    4d70:	ffffffff 	.word	0xffffffff
    4d74:	ffffffff 	.word	0xffffffff
    4d78:	ffffffff 	.word	0xffffffff
    4d7c:	ffffffff 	.word	0xffffffff
    4d80:	ffffffff 	.word	0xffffffff
    4d84:	ffffffff 	.word	0xffffffff
    4d88:	ffffffff 	.word	0xffffffff
    4d8c:	ffffffff 	.word	0xffffffff
    4d90:	ffffffff 	.word	0xffffffff
    4d94:	ffffffff 	.word	0xffffffff
    4d98:	ffffffff 	.word	0xffffffff
    4d9c:	ffffffff 	.word	0xffffffff
    4da0:	ffffffff 	.word	0xffffffff
    4da4:	ffffffff 	.word	0xffffffff
    4da8:	ffffffff 	.word	0xffffffff
    4dac:	ffffffff 	.word	0xffffffff
    4db0:	ffffffff 	.word	0xffffffff
    4db4:	ffffffff 	.word	0xffffffff
    4db8:	ffffffff 	.word	0xffffffff
    4dbc:	ffffffff 	.word	0xffffffff
    4dc0:	ffffffff 	.word	0xffffffff
    4dc4:	ffffffff 	.word	0xffffffff
    4dc8:	ffffffff 	.word	0xffffffff
    4dcc:	ffffffff 	.word	0xffffffff
    4dd0:	ffffffff 	.word	0xffffffff
    4dd4:	ffffffff 	.word	0xffffffff
    4dd8:	ffffffff 	.word	0xffffffff
    4ddc:	ffffffff 	.word	0xffffffff
    4de0:	ffffffff 	.word	0xffffffff
    4de4:	ffffffff 	.word	0xffffffff
    4de8:	ffffffff 	.word	0xffffffff
    4dec:	ffffffff 	.word	0xffffffff
    4df0:	ffffffff 	.word	0xffffffff
    4df4:	ffffffff 	.word	0xffffffff
    4df8:	ffffffff 	.word	0xffffffff
    4dfc:	ffffffff 	.word	0xffffffff
    4e00:	ffffffff 	.word	0xffffffff
    4e04:	ffffffff 	.word	0xffffffff
    4e08:	ffffffff 	.word	0xffffffff
    4e0c:	ffffffff 	.word	0xffffffff
    4e10:	ffffffff 	.word	0xffffffff
    4e14:	ffffffff 	.word	0xffffffff
    4e18:	ffffffff 	.word	0xffffffff
    4e1c:	ffffffff 	.word	0xffffffff
    4e20:	ffffffff 	.word	0xffffffff
    4e24:	ffffffff 	.word	0xffffffff
    4e28:	ffffffff 	.word	0xffffffff
    4e2c:	ffffffff 	.word	0xffffffff
    4e30:	ffffffff 	.word	0xffffffff
    4e34:	ffffffff 	.word	0xffffffff
    4e38:	ffffffff 	.word	0xffffffff
    4e3c:	ffffffff 	.word	0xffffffff
    4e40:	ffffffff 	.word	0xffffffff
    4e44:	ffffffff 	.word	0xffffffff
    4e48:	ffffffff 	.word	0xffffffff
    4e4c:	ffffffff 	.word	0xffffffff
    4e50:	ffffffff 	.word	0xffffffff
    4e54:	ffffffff 	.word	0xffffffff
    4e58:	ffffffff 	.word	0xffffffff
    4e5c:	ffffffff 	.word	0xffffffff
    4e60:	ffffffff 	.word	0xffffffff
    4e64:	ffffffff 	.word	0xffffffff
    4e68:	ffffffff 	.word	0xffffffff
    4e6c:	ffffffff 	.word	0xffffffff
    4e70:	ffffffff 	.word	0xffffffff
    4e74:	ffffffff 	.word	0xffffffff
    4e78:	ffffffff 	.word	0xffffffff
    4e7c:	ffffffff 	.word	0xffffffff
    4e80:	ffffffff 	.word	0xffffffff
    4e84:	ffffffff 	.word	0xffffffff
    4e88:	ffffffff 	.word	0xffffffff
    4e8c:	ffffffff 	.word	0xffffffff
    4e90:	ffffffff 	.word	0xffffffff
    4e94:	ffffffff 	.word	0xffffffff
    4e98:	ffffffff 	.word	0xffffffff
    4e9c:	ffffffff 	.word	0xffffffff
    4ea0:	ffffffff 	.word	0xffffffff
    4ea4:	ffffffff 	.word	0xffffffff
    4ea8:	ffffffff 	.word	0xffffffff
    4eac:	ffffffff 	.word	0xffffffff
    4eb0:	ffffffff 	.word	0xffffffff
    4eb4:	ffffffff 	.word	0xffffffff
    4eb8:	ffffffff 	.word	0xffffffff
    4ebc:	ffffffff 	.word	0xffffffff
    4ec0:	ffffffff 	.word	0xffffffff
    4ec4:	ffffffff 	.word	0xffffffff
    4ec8:	ffffffff 	.word	0xffffffff
    4ecc:	ffffffff 	.word	0xffffffff
    4ed0:	ffffffff 	.word	0xffffffff
    4ed4:	ffffffff 	.word	0xffffffff
    4ed8:	ffffffff 	.word	0xffffffff
    4edc:	ffffffff 	.word	0xffffffff
    4ee0:	ffffffff 	.word	0xffffffff
    4ee4:	ffffffff 	.word	0xffffffff
    4ee8:	ffffffff 	.word	0xffffffff
    4eec:	ffffffff 	.word	0xffffffff
    4ef0:	ffffffff 	.word	0xffffffff
    4ef4:	ffffffff 	.word	0xffffffff
    4ef8:	ffffffff 	.word	0xffffffff
    4efc:	ffffffff 	.word	0xffffffff
    4f00:	ffffffff 	.word	0xffffffff
    4f04:	ffffffff 	.word	0xffffffff
    4f08:	ffffffff 	.word	0xffffffff
    4f0c:	ffffffff 	.word	0xffffffff
    4f10:	ffffffff 	.word	0xffffffff
    4f14:	ffffffff 	.word	0xffffffff
    4f18:	ffffffff 	.word	0xffffffff
    4f1c:	ffffffff 	.word	0xffffffff
    4f20:	ffffffff 	.word	0xffffffff
    4f24:	ffffffff 	.word	0xffffffff
    4f28:	ffffffff 	.word	0xffffffff
    4f2c:	ffffffff 	.word	0xffffffff
    4f30:	ffffffff 	.word	0xffffffff
    4f34:	ffffffff 	.word	0xffffffff
    4f38:	ffffffff 	.word	0xffffffff
    4f3c:	ffffffff 	.word	0xffffffff
    4f40:	ffffffff 	.word	0xffffffff
    4f44:	ffffffff 	.word	0xffffffff
    4f48:	ffffffff 	.word	0xffffffff
    4f4c:	ffffffff 	.word	0xffffffff
    4f50:	ffffffff 	.word	0xffffffff
    4f54:	ffffffff 	.word	0xffffffff
    4f58:	ffffffff 	.word	0xffffffff
    4f5c:	ffffffff 	.word	0xffffffff
    4f60:	ffffffff 	.word	0xffffffff
    4f64:	ffffffff 	.word	0xffffffff
    4f68:	ffffffff 	.word	0xffffffff
    4f6c:	ffffffff 	.word	0xffffffff
    4f70:	ffffffff 	.word	0xffffffff
    4f74:	ffffffff 	.word	0xffffffff
    4f78:	ffffffff 	.word	0xffffffff
    4f7c:	ffffffff 	.word	0xffffffff
    4f80:	ffffffff 	.word	0xffffffff
    4f84:	ffffffff 	.word	0xffffffff
    4f88:	ffffffff 	.word	0xffffffff
    4f8c:	ffffffff 	.word	0xffffffff
    4f90:	ffffffff 	.word	0xffffffff
    4f94:	ffffffff 	.word	0xffffffff
    4f98:	ffffffff 	.word	0xffffffff
    4f9c:	ffffffff 	.word	0xffffffff
    4fa0:	ffffffff 	.word	0xffffffff
    4fa4:	ffffffff 	.word	0xffffffff
    4fa8:	ffffffff 	.word	0xffffffff
    4fac:	ffffffff 	.word	0xffffffff
    4fb0:	ffffffff 	.word	0xffffffff
    4fb4:	ffffffff 	.word	0xffffffff
    4fb8:	ffffffff 	.word	0xffffffff
    4fbc:	ffffffff 	.word	0xffffffff
    4fc0:	ffffffff 	.word	0xffffffff
    4fc4:	ffffffff 	.word	0xffffffff
    4fc8:	ffffffff 	.word	0xffffffff
    4fcc:	ffffffff 	.word	0xffffffff
    4fd0:	ffffffff 	.word	0xffffffff
    4fd4:	ffffffff 	.word	0xffffffff
    4fd8:	ffffffff 	.word	0xffffffff
    4fdc:	ffffffff 	.word	0xffffffff
    4fe0:	ffffffff 	.word	0xffffffff
    4fe4:	ffffffff 	.word	0xffffffff
    4fe8:	ffffffff 	.word	0xffffffff
    4fec:	ffffffff 	.word	0xffffffff
    4ff0:	ffffffff 	.word	0xffffffff
    4ff4:	ffffffff 	.word	0xffffffff
    4ff8:	ffffffff 	.word	0xffffffff
    4ffc:	ffffffff 	.word	0xffffffff
    5000:	ffffffff 	.word	0xffffffff
    5004:	ffffffff 	.word	0xffffffff
    5008:	ffffffff 	.word	0xffffffff
    500c:	ffffffff 	.word	0xffffffff
    5010:	ffffffff 	.word	0xffffffff
    5014:	ffffffff 	.word	0xffffffff
    5018:	ffffffff 	.word	0xffffffff
    501c:	ffffffff 	.word	0xffffffff
    5020:	ffffffff 	.word	0xffffffff
    5024:	ffffffff 	.word	0xffffffff
    5028:	ffffffff 	.word	0xffffffff
    502c:	ffffffff 	.word	0xffffffff
    5030:	ffffffff 	.word	0xffffffff
    5034:	ffffffff 	.word	0xffffffff
    5038:	ffffffff 	.word	0xffffffff
    503c:	ffffffff 	.word	0xffffffff
    5040:	ffffffff 	.word	0xffffffff
    5044:	ffffffff 	.word	0xffffffff
    5048:	ffffffff 	.word	0xffffffff
    504c:	ffffffff 	.word	0xffffffff
    5050:	ffffffff 	.word	0xffffffff
    5054:	ffffffff 	.word	0xffffffff
    5058:	ffffffff 	.word	0xffffffff
    505c:	ffffffff 	.word	0xffffffff
    5060:	ffffffff 	.word	0xffffffff
    5064:	ffffffff 	.word	0xffffffff
    5068:	ffffffff 	.word	0xffffffff
    506c:	ffffffff 	.word	0xffffffff
    5070:	ffffffff 	.word	0xffffffff
    5074:	ffffffff 	.word	0xffffffff
    5078:	ffffffff 	.word	0xffffffff
    507c:	ffffffff 	.word	0xffffffff
    5080:	ffffffff 	.word	0xffffffff
    5084:	ffffffff 	.word	0xffffffff
    5088:	ffffffff 	.word	0xffffffff
    508c:	ffffffff 	.word	0xffffffff
    5090:	ffffffff 	.word	0xffffffff
    5094:	ffffffff 	.word	0xffffffff
    5098:	ffffffff 	.word	0xffffffff
    509c:	ffffffff 	.word	0xffffffff
    50a0:	ffffffff 	.word	0xffffffff
    50a4:	ffffffff 	.word	0xffffffff
    50a8:	ffffffff 	.word	0xffffffff
    50ac:	ffffffff 	.word	0xffffffff
    50b0:	ffffffff 	.word	0xffffffff
    50b4:	ffffffff 	.word	0xffffffff
    50b8:	ffffffff 	.word	0xffffffff
    50bc:	ffffffff 	.word	0xffffffff
    50c0:	ffffffff 	.word	0xffffffff
    50c4:	ffffffff 	.word	0xffffffff
    50c8:	ffffffff 	.word	0xffffffff
    50cc:	ffffffff 	.word	0xffffffff
    50d0:	ffffffff 	.word	0xffffffff
    50d4:	ffffffff 	.word	0xffffffff
    50d8:	ffffffff 	.word	0xffffffff
    50dc:	ffffffff 	.word	0xffffffff
    50e0:	ffffffff 	.word	0xffffffff
    50e4:	ffffffff 	.word	0xffffffff
    50e8:	ffffffff 	.word	0xffffffff
    50ec:	ffffffff 	.word	0xffffffff
    50f0:	ffffffff 	.word	0xffffffff
    50f4:	ffffffff 	.word	0xffffffff
    50f8:	ffffffff 	.word	0xffffffff
    50fc:	ffffffff 	.word	0xffffffff
    5100:	ffffffff 	.word	0xffffffff
    5104:	ffffffff 	.word	0xffffffff
    5108:	ffffffff 	.word	0xffffffff
    510c:	ffffffff 	.word	0xffffffff
    5110:	ffffffff 	.word	0xffffffff
    5114:	ffffffff 	.word	0xffffffff
    5118:	ffffffff 	.word	0xffffffff
    511c:	ffffffff 	.word	0xffffffff
    5120:	ffffffff 	.word	0xffffffff
    5124:	ffffffff 	.word	0xffffffff
    5128:	ffffffff 	.word	0xffffffff
    512c:	ffffffff 	.word	0xffffffff
    5130:	ffffffff 	.word	0xffffffff
    5134:	ffffffff 	.word	0xffffffff
    5138:	ffffffff 	.word	0xffffffff
    513c:	ffffffff 	.word	0xffffffff
    5140:	ffffffff 	.word	0xffffffff
    5144:	ffffffff 	.word	0xffffffff
    5148:	ffffffff 	.word	0xffffffff
    514c:	ffffffff 	.word	0xffffffff
    5150:	ffffffff 	.word	0xffffffff
    5154:	ffffffff 	.word	0xffffffff
    5158:	ffffffff 	.word	0xffffffff
    515c:	ffffffff 	.word	0xffffffff
    5160:	ffffffff 	.word	0xffffffff
    5164:	ffffffff 	.word	0xffffffff
    5168:	ffffffff 	.word	0xffffffff
    516c:	ffffffff 	.word	0xffffffff
    5170:	ffffffff 	.word	0xffffffff
    5174:	ffffffff 	.word	0xffffffff
    5178:	ffffffff 	.word	0xffffffff
    517c:	ffffffff 	.word	0xffffffff
    5180:	ffffffff 	.word	0xffffffff
    5184:	ffffffff 	.word	0xffffffff
    5188:	ffffffff 	.word	0xffffffff
    518c:	ffffffff 	.word	0xffffffff
    5190:	ffffffff 	.word	0xffffffff
    5194:	ffffffff 	.word	0xffffffff
    5198:	ffffffff 	.word	0xffffffff
    519c:	ffffffff 	.word	0xffffffff
    51a0:	ffffffff 	.word	0xffffffff
    51a4:	ffffffff 	.word	0xffffffff
    51a8:	ffffffff 	.word	0xffffffff
    51ac:	ffffffff 	.word	0xffffffff
    51b0:	ffffffff 	.word	0xffffffff
    51b4:	ffffffff 	.word	0xffffffff
    51b8:	ffffffff 	.word	0xffffffff
    51bc:	ffffffff 	.word	0xffffffff
    51c0:	ffffffff 	.word	0xffffffff
    51c4:	ffffffff 	.word	0xffffffff
    51c8:	ffffffff 	.word	0xffffffff
    51cc:	ffffffff 	.word	0xffffffff
    51d0:	ffffffff 	.word	0xffffffff
    51d4:	ffffffff 	.word	0xffffffff
    51d8:	ffffffff 	.word	0xffffffff
    51dc:	ffffffff 	.word	0xffffffff
    51e0:	ffffffff 	.word	0xffffffff
    51e4:	ffffffff 	.word	0xffffffff
    51e8:	ffffffff 	.word	0xffffffff
    51ec:	ffffffff 	.word	0xffffffff
    51f0:	ffffffff 	.word	0xffffffff
    51f4:	ffffffff 	.word	0xffffffff
    51f8:	ffffffff 	.word	0xffffffff
    51fc:	ffffffff 	.word	0xffffffff
    5200:	ffffffff 	.word	0xffffffff
    5204:	ffffffff 	.word	0xffffffff
    5208:	ffffffff 	.word	0xffffffff
    520c:	ffffffff 	.word	0xffffffff
    5210:	ffffffff 	.word	0xffffffff
    5214:	ffffffff 	.word	0xffffffff
    5218:	ffffffff 	.word	0xffffffff
    521c:	ffffffff 	.word	0xffffffff
    5220:	ffffffff 	.word	0xffffffff
    5224:	ffffffff 	.word	0xffffffff
    5228:	ffffffff 	.word	0xffffffff
    522c:	ffffffff 	.word	0xffffffff
    5230:	ffffffff 	.word	0xffffffff
    5234:	ffffffff 	.word	0xffffffff
    5238:	ffffffff 	.word	0xffffffff
    523c:	ffffffff 	.word	0xffffffff
    5240:	ffffffff 	.word	0xffffffff
    5244:	ffffffff 	.word	0xffffffff
    5248:	ffffffff 	.word	0xffffffff
    524c:	ffffffff 	.word	0xffffffff
    5250:	ffffffff 	.word	0xffffffff
    5254:	ffffffff 	.word	0xffffffff
    5258:	ffffffff 	.word	0xffffffff
    525c:	ffffffff 	.word	0xffffffff
    5260:	ffffffff 	.word	0xffffffff
    5264:	ffffffff 	.word	0xffffffff
    5268:	ffffffff 	.word	0xffffffff
    526c:	ffffffff 	.word	0xffffffff
    5270:	ffffffff 	.word	0xffffffff
    5274:	ffffffff 	.word	0xffffffff
    5278:	ffffffff 	.word	0xffffffff
    527c:	ffffffff 	.word	0xffffffff
    5280:	ffffffff 	.word	0xffffffff
    5284:	ffffffff 	.word	0xffffffff
    5288:	ffffffff 	.word	0xffffffff
    528c:	ffffffff 	.word	0xffffffff
    5290:	ffffffff 	.word	0xffffffff
    5294:	ffffffff 	.word	0xffffffff
    5298:	ffffffff 	.word	0xffffffff
    529c:	ffffffff 	.word	0xffffffff
    52a0:	ffffffff 	.word	0xffffffff
    52a4:	ffffffff 	.word	0xffffffff
    52a8:	ffffffff 	.word	0xffffffff
    52ac:	ffffffff 	.word	0xffffffff
    52b0:	ffffffff 	.word	0xffffffff
    52b4:	ffffffff 	.word	0xffffffff
    52b8:	ffffffff 	.word	0xffffffff
    52bc:	ffffffff 	.word	0xffffffff
    52c0:	ffffffff 	.word	0xffffffff
    52c4:	ffffffff 	.word	0xffffffff
    52c8:	ffffffff 	.word	0xffffffff
    52cc:	ffffffff 	.word	0xffffffff
    52d0:	ffffffff 	.word	0xffffffff
    52d4:	ffffffff 	.word	0xffffffff
    52d8:	ffffffff 	.word	0xffffffff
    52dc:	ffffffff 	.word	0xffffffff
    52e0:	ffffffff 	.word	0xffffffff
    52e4:	ffffffff 	.word	0xffffffff
    52e8:	ffffffff 	.word	0xffffffff
    52ec:	ffffffff 	.word	0xffffffff
    52f0:	ffffffff 	.word	0xffffffff
    52f4:	ffffffff 	.word	0xffffffff
    52f8:	ffffffff 	.word	0xffffffff
    52fc:	ffffffff 	.word	0xffffffff
    5300:	ffffffff 	.word	0xffffffff
    5304:	ffffffff 	.word	0xffffffff
    5308:	ffffffff 	.word	0xffffffff
    530c:	ffffffff 	.word	0xffffffff
    5310:	ffffffff 	.word	0xffffffff
    5314:	ffffffff 	.word	0xffffffff
    5318:	ffffffff 	.word	0xffffffff
    531c:	ffffffff 	.word	0xffffffff
    5320:	ffffffff 	.word	0xffffffff
    5324:	ffffffff 	.word	0xffffffff
    5328:	ffffffff 	.word	0xffffffff
    532c:	ffffffff 	.word	0xffffffff
    5330:	ffffffff 	.word	0xffffffff
    5334:	ffffffff 	.word	0xffffffff
    5338:	ffffffff 	.word	0xffffffff
    533c:	ffffffff 	.word	0xffffffff
    5340:	ffffffff 	.word	0xffffffff
    5344:	ffffffff 	.word	0xffffffff
    5348:	ffffffff 	.word	0xffffffff
    534c:	ffffffff 	.word	0xffffffff
    5350:	ffffffff 	.word	0xffffffff
    5354:	ffffffff 	.word	0xffffffff
    5358:	ffffffff 	.word	0xffffffff
    535c:	ffffffff 	.word	0xffffffff
    5360:	ffffffff 	.word	0xffffffff
    5364:	ffffffff 	.word	0xffffffff
    5368:	ffffffff 	.word	0xffffffff
    536c:	ffffffff 	.word	0xffffffff
    5370:	ffffffff 	.word	0xffffffff
    5374:	ffffffff 	.word	0xffffffff
    5378:	ffffffff 	.word	0xffffffff
    537c:	ffffffff 	.word	0xffffffff
    5380:	ffffffff 	.word	0xffffffff
    5384:	ffffffff 	.word	0xffffffff
    5388:	ffffffff 	.word	0xffffffff
    538c:	ffffffff 	.word	0xffffffff
    5390:	ffffffff 	.word	0xffffffff
    5394:	ffffffff 	.word	0xffffffff
    5398:	ffffffff 	.word	0xffffffff
    539c:	ffffffff 	.word	0xffffffff
    53a0:	ffffffff 	.word	0xffffffff
    53a4:	ffffffff 	.word	0xffffffff
    53a8:	ffffffff 	.word	0xffffffff
    53ac:	ffffffff 	.word	0xffffffff
    53b0:	ffffffff 	.word	0xffffffff
    53b4:	ffffffff 	.word	0xffffffff
    53b8:	ffffffff 	.word	0xffffffff
    53bc:	ffffffff 	.word	0xffffffff
    53c0:	ffffffff 	.word	0xffffffff
    53c4:	ffffffff 	.word	0xffffffff
    53c8:	ffffffff 	.word	0xffffffff
    53cc:	ffffffff 	.word	0xffffffff
    53d0:	ffffffff 	.word	0xffffffff
    53d4:	ffffffff 	.word	0xffffffff
    53d8:	ffffffff 	.word	0xffffffff
    53dc:	ffffffff 	.word	0xffffffff
    53e0:	ffffffff 	.word	0xffffffff
    53e4:	ffffffff 	.word	0xffffffff
    53e8:	ffffffff 	.word	0xffffffff
    53ec:	ffffffff 	.word	0xffffffff
    53f0:	ffffffff 	.word	0xffffffff
    53f4:	ffffffff 	.word	0xffffffff
    53f8:	ffffffff 	.word	0xffffffff
    53fc:	ffffffff 	.word	0xffffffff
    5400:	ffffffff 	.word	0xffffffff
    5404:	ffffffff 	.word	0xffffffff
    5408:	ffffffff 	.word	0xffffffff
    540c:	ffffffff 	.word	0xffffffff
    5410:	ffffffff 	.word	0xffffffff
    5414:	ffffffff 	.word	0xffffffff
    5418:	ffffffff 	.word	0xffffffff
    541c:	ffffffff 	.word	0xffffffff
    5420:	ffffffff 	.word	0xffffffff
    5424:	ffffffff 	.word	0xffffffff
    5428:	ffffffff 	.word	0xffffffff
    542c:	ffffffff 	.word	0xffffffff
    5430:	ffffffff 	.word	0xffffffff
    5434:	ffffffff 	.word	0xffffffff
    5438:	ffffffff 	.word	0xffffffff
    543c:	ffffffff 	.word	0xffffffff
    5440:	ffffffff 	.word	0xffffffff
    5444:	ffffffff 	.word	0xffffffff
    5448:	ffffffff 	.word	0xffffffff
    544c:	ffffffff 	.word	0xffffffff
    5450:	ffffffff 	.word	0xffffffff
    5454:	ffffffff 	.word	0xffffffff
    5458:	ffffffff 	.word	0xffffffff
    545c:	ffffffff 	.word	0xffffffff
    5460:	ffffffff 	.word	0xffffffff
    5464:	ffffffff 	.word	0xffffffff
    5468:	ffffffff 	.word	0xffffffff
    546c:	ffffffff 	.word	0xffffffff
    5470:	ffffffff 	.word	0xffffffff
    5474:	ffffffff 	.word	0xffffffff
    5478:	ffffffff 	.word	0xffffffff
    547c:	ffffffff 	.word	0xffffffff
    5480:	ffffffff 	.word	0xffffffff
    5484:	ffffffff 	.word	0xffffffff
    5488:	ffffffff 	.word	0xffffffff
    548c:	ffffffff 	.word	0xffffffff
    5490:	ffffffff 	.word	0xffffffff
    5494:	ffffffff 	.word	0xffffffff
    5498:	ffffffff 	.word	0xffffffff
    549c:	ffffffff 	.word	0xffffffff
    54a0:	ffffffff 	.word	0xffffffff
    54a4:	ffffffff 	.word	0xffffffff
    54a8:	ffffffff 	.word	0xffffffff
    54ac:	ffffffff 	.word	0xffffffff
    54b0:	ffffffff 	.word	0xffffffff
    54b4:	ffffffff 	.word	0xffffffff
    54b8:	ffffffff 	.word	0xffffffff
    54bc:	ffffffff 	.word	0xffffffff
    54c0:	ffffffff 	.word	0xffffffff
    54c4:	ffffffff 	.word	0xffffffff
    54c8:	ffffffff 	.word	0xffffffff
    54cc:	ffffffff 	.word	0xffffffff
    54d0:	ffffffff 	.word	0xffffffff
    54d4:	ffffffff 	.word	0xffffffff
    54d8:	ffffffff 	.word	0xffffffff
    54dc:	ffffffff 	.word	0xffffffff
    54e0:	ffffffff 	.word	0xffffffff
    54e4:	ffffffff 	.word	0xffffffff
    54e8:	ffffffff 	.word	0xffffffff
    54ec:	ffffffff 	.word	0xffffffff
    54f0:	ffffffff 	.word	0xffffffff
    54f4:	ffffffff 	.word	0xffffffff
    54f8:	ffffffff 	.word	0xffffffff
    54fc:	ffffffff 	.word	0xffffffff
    5500:	ffffffff 	.word	0xffffffff
    5504:	ffffffff 	.word	0xffffffff
    5508:	ffffffff 	.word	0xffffffff
    550c:	ffffffff 	.word	0xffffffff
    5510:	ffffffff 	.word	0xffffffff
    5514:	ffffffff 	.word	0xffffffff
    5518:	ffffffff 	.word	0xffffffff
    551c:	ffffffff 	.word	0xffffffff
    5520:	ffffffff 	.word	0xffffffff
    5524:	ffffffff 	.word	0xffffffff
    5528:	ffffffff 	.word	0xffffffff
    552c:	ffffffff 	.word	0xffffffff
    5530:	ffffffff 	.word	0xffffffff
    5534:	ffffffff 	.word	0xffffffff
    5538:	ffffffff 	.word	0xffffffff
    553c:	ffffffff 	.word	0xffffffff
    5540:	ffffffff 	.word	0xffffffff
    5544:	ffffffff 	.word	0xffffffff
    5548:	ffffffff 	.word	0xffffffff
    554c:	ffffffff 	.word	0xffffffff
    5550:	ffffffff 	.word	0xffffffff
    5554:	ffffffff 	.word	0xffffffff
    5558:	ffffffff 	.word	0xffffffff
    555c:	ffffffff 	.word	0xffffffff
    5560:	ffffffff 	.word	0xffffffff
    5564:	ffffffff 	.word	0xffffffff
    5568:	ffffffff 	.word	0xffffffff
    556c:	ffffffff 	.word	0xffffffff
    5570:	ffffffff 	.word	0xffffffff
    5574:	ffffffff 	.word	0xffffffff
    5578:	ffffffff 	.word	0xffffffff
    557c:	ffffffff 	.word	0xffffffff
    5580:	ffffffff 	.word	0xffffffff
    5584:	ffffffff 	.word	0xffffffff
    5588:	ffffffff 	.word	0xffffffff
    558c:	ffffffff 	.word	0xffffffff
    5590:	ffffffff 	.word	0xffffffff
    5594:	ffffffff 	.word	0xffffffff
    5598:	ffffffff 	.word	0xffffffff
    559c:	ffffffff 	.word	0xffffffff
    55a0:	ffffffff 	.word	0xffffffff
    55a4:	ffffffff 	.word	0xffffffff
    55a8:	ffffffff 	.word	0xffffffff
    55ac:	ffffffff 	.word	0xffffffff
    55b0:	ffffffff 	.word	0xffffffff
    55b4:	ffffffff 	.word	0xffffffff
    55b8:	ffffffff 	.word	0xffffffff
    55bc:	ffffffff 	.word	0xffffffff
    55c0:	ffffffff 	.word	0xffffffff
    55c4:	ffffffff 	.word	0xffffffff
    55c8:	ffffffff 	.word	0xffffffff
    55cc:	ffffffff 	.word	0xffffffff
    55d0:	ffffffff 	.word	0xffffffff
    55d4:	ffffffff 	.word	0xffffffff
    55d8:	ffffffff 	.word	0xffffffff
    55dc:	ffffffff 	.word	0xffffffff
    55e0:	ffffffff 	.word	0xffffffff
    55e4:	ffffffff 	.word	0xffffffff
    55e8:	ffffffff 	.word	0xffffffff
    55ec:	ffffffff 	.word	0xffffffff
    55f0:	ffffffff 	.word	0xffffffff
    55f4:	ffffffff 	.word	0xffffffff
    55f8:	ffffffff 	.word	0xffffffff
    55fc:	ffffffff 	.word	0xffffffff
    5600:	ffffffff 	.word	0xffffffff
    5604:	ffffffff 	.word	0xffffffff
    5608:	ffffffff 	.word	0xffffffff
    560c:	ffffffff 	.word	0xffffffff
    5610:	ffffffff 	.word	0xffffffff
    5614:	ffffffff 	.word	0xffffffff
    5618:	ffffffff 	.word	0xffffffff
    561c:	ffffffff 	.word	0xffffffff
    5620:	ffffffff 	.word	0xffffffff
    5624:	ffffffff 	.word	0xffffffff
    5628:	ffffffff 	.word	0xffffffff
    562c:	ffffffff 	.word	0xffffffff
    5630:	ffffffff 	.word	0xffffffff
    5634:	ffffffff 	.word	0xffffffff
    5638:	ffffffff 	.word	0xffffffff
    563c:	ffffffff 	.word	0xffffffff
    5640:	ffffffff 	.word	0xffffffff
    5644:	ffffffff 	.word	0xffffffff
    5648:	ffffffff 	.word	0xffffffff
    564c:	ffffffff 	.word	0xffffffff
    5650:	ffffffff 	.word	0xffffffff
    5654:	ffffffff 	.word	0xffffffff
    5658:	ffffffff 	.word	0xffffffff
    565c:	ffffffff 	.word	0xffffffff
    5660:	ffffffff 	.word	0xffffffff
    5664:	ffffffff 	.word	0xffffffff
    5668:	ffffffff 	.word	0xffffffff
    566c:	ffffffff 	.word	0xffffffff
    5670:	ffffffff 	.word	0xffffffff
    5674:	ffffffff 	.word	0xffffffff
    5678:	ffffffff 	.word	0xffffffff
    567c:	ffffffff 	.word	0xffffffff
    5680:	ffffffff 	.word	0xffffffff
    5684:	ffffffff 	.word	0xffffffff
    5688:	ffffffff 	.word	0xffffffff
    568c:	ffffffff 	.word	0xffffffff
    5690:	ffffffff 	.word	0xffffffff
    5694:	ffffffff 	.word	0xffffffff
    5698:	ffffffff 	.word	0xffffffff
    569c:	ffffffff 	.word	0xffffffff
    56a0:	ffffffff 	.word	0xffffffff
    56a4:	ffffffff 	.word	0xffffffff
    56a8:	ffffffff 	.word	0xffffffff
    56ac:	ffffffff 	.word	0xffffffff
    56b0:	ffffffff 	.word	0xffffffff
    56b4:	ffffffff 	.word	0xffffffff
    56b8:	ffffffff 	.word	0xffffffff
    56bc:	ffffffff 	.word	0xffffffff
    56c0:	ffffffff 	.word	0xffffffff
    56c4:	ffffffff 	.word	0xffffffff
    56c8:	ffffffff 	.word	0xffffffff
    56cc:	ffffffff 	.word	0xffffffff
    56d0:	ffffffff 	.word	0xffffffff
    56d4:	ffffffff 	.word	0xffffffff
    56d8:	ffffffff 	.word	0xffffffff
    56dc:	ffffffff 	.word	0xffffffff
    56e0:	ffffffff 	.word	0xffffffff
    56e4:	ffffffff 	.word	0xffffffff
    56e8:	ffffffff 	.word	0xffffffff
    56ec:	ffffffff 	.word	0xffffffff
    56f0:	ffffffff 	.word	0xffffffff
    56f4:	ffffffff 	.word	0xffffffff
    56f8:	ffffffff 	.word	0xffffffff
    56fc:	ffffffff 	.word	0xffffffff
    5700:	ffffffff 	.word	0xffffffff
    5704:	ffffffff 	.word	0xffffffff
    5708:	ffffffff 	.word	0xffffffff
    570c:	ffffffff 	.word	0xffffffff
    5710:	ffffffff 	.word	0xffffffff
    5714:	ffffffff 	.word	0xffffffff
    5718:	ffffffff 	.word	0xffffffff
    571c:	ffffffff 	.word	0xffffffff
    5720:	ffffffff 	.word	0xffffffff
    5724:	ffffffff 	.word	0xffffffff
    5728:	ffffffff 	.word	0xffffffff
    572c:	ffffffff 	.word	0xffffffff
    5730:	ffffffff 	.word	0xffffffff
    5734:	ffffffff 	.word	0xffffffff
    5738:	ffffffff 	.word	0xffffffff
    573c:	ffffffff 	.word	0xffffffff
    5740:	ffffffff 	.word	0xffffffff
    5744:	ffffffff 	.word	0xffffffff
    5748:	ffffffff 	.word	0xffffffff
    574c:	ffffffff 	.word	0xffffffff
    5750:	ffffffff 	.word	0xffffffff
    5754:	ffffffff 	.word	0xffffffff
    5758:	ffffffff 	.word	0xffffffff
    575c:	ffffffff 	.word	0xffffffff
    5760:	ffffffff 	.word	0xffffffff
    5764:	ffffffff 	.word	0xffffffff
    5768:	ffffffff 	.word	0xffffffff
    576c:	ffffffff 	.word	0xffffffff
    5770:	ffffffff 	.word	0xffffffff
    5774:	ffffffff 	.word	0xffffffff
    5778:	ffffffff 	.word	0xffffffff
    577c:	ffffffff 	.word	0xffffffff
    5780:	ffffffff 	.word	0xffffffff
    5784:	ffffffff 	.word	0xffffffff
    5788:	ffffffff 	.word	0xffffffff
    578c:	ffffffff 	.word	0xffffffff
    5790:	ffffffff 	.word	0xffffffff
    5794:	ffffffff 	.word	0xffffffff
    5798:	ffffffff 	.word	0xffffffff
    579c:	ffffffff 	.word	0xffffffff
    57a0:	ffffffff 	.word	0xffffffff
    57a4:	ffffffff 	.word	0xffffffff
    57a8:	ffffffff 	.word	0xffffffff
    57ac:	ffffffff 	.word	0xffffffff
    57b0:	ffffffff 	.word	0xffffffff
    57b4:	ffffffff 	.word	0xffffffff
    57b8:	ffffffff 	.word	0xffffffff
    57bc:	ffffffff 	.word	0xffffffff
    57c0:	ffffffff 	.word	0xffffffff
    57c4:	ffffffff 	.word	0xffffffff
    57c8:	ffffffff 	.word	0xffffffff
    57cc:	ffffffff 	.word	0xffffffff
    57d0:	ffffffff 	.word	0xffffffff
    57d4:	ffffffff 	.word	0xffffffff
    57d8:	ffffffff 	.word	0xffffffff
    57dc:	ffffffff 	.word	0xffffffff
    57e0:	ffffffff 	.word	0xffffffff
    57e4:	ffffffff 	.word	0xffffffff
    57e8:	ffffffff 	.word	0xffffffff
    57ec:	ffffffff 	.word	0xffffffff
    57f0:	ffffffff 	.word	0xffffffff
    57f4:	ffffffff 	.word	0xffffffff
    57f8:	ffffffff 	.word	0xffffffff
    57fc:	ffffffff 	.word	0xffffffff
    5800:	ffffffff 	.word	0xffffffff
    5804:	ffffffff 	.word	0xffffffff
    5808:	ffffffff 	.word	0xffffffff
    580c:	ffffffff 	.word	0xffffffff
    5810:	ffffffff 	.word	0xffffffff
    5814:	ffffffff 	.word	0xffffffff
    5818:	ffffffff 	.word	0xffffffff
    581c:	ffffffff 	.word	0xffffffff
    5820:	ffffffff 	.word	0xffffffff
    5824:	ffffffff 	.word	0xffffffff
    5828:	ffffffff 	.word	0xffffffff
    582c:	ffffffff 	.word	0xffffffff
    5830:	ffffffff 	.word	0xffffffff
    5834:	ffffffff 	.word	0xffffffff
    5838:	ffffffff 	.word	0xffffffff
    583c:	ffffffff 	.word	0xffffffff
    5840:	ffffffff 	.word	0xffffffff
    5844:	ffffffff 	.word	0xffffffff
    5848:	ffffffff 	.word	0xffffffff
    584c:	ffffffff 	.word	0xffffffff
    5850:	ffffffff 	.word	0xffffffff
    5854:	ffffffff 	.word	0xffffffff
    5858:	ffffffff 	.word	0xffffffff
    585c:	ffffffff 	.word	0xffffffff
    5860:	ffffffff 	.word	0xffffffff
    5864:	ffffffff 	.word	0xffffffff
    5868:	ffffffff 	.word	0xffffffff
    586c:	ffffffff 	.word	0xffffffff
    5870:	ffffffff 	.word	0xffffffff
    5874:	ffffffff 	.word	0xffffffff
    5878:	ffffffff 	.word	0xffffffff
    587c:	ffffffff 	.word	0xffffffff
    5880:	ffffffff 	.word	0xffffffff
    5884:	ffffffff 	.word	0xffffffff
    5888:	ffffffff 	.word	0xffffffff
    588c:	ffffffff 	.word	0xffffffff
    5890:	ffffffff 	.word	0xffffffff
    5894:	ffffffff 	.word	0xffffffff
    5898:	ffffffff 	.word	0xffffffff
    589c:	ffffffff 	.word	0xffffffff
    58a0:	ffffffff 	.word	0xffffffff
    58a4:	ffffffff 	.word	0xffffffff
    58a8:	ffffffff 	.word	0xffffffff
    58ac:	ffffffff 	.word	0xffffffff
    58b0:	ffffffff 	.word	0xffffffff
    58b4:	ffffffff 	.word	0xffffffff
    58b8:	ffffffff 	.word	0xffffffff
    58bc:	ffffffff 	.word	0xffffffff
    58c0:	ffffffff 	.word	0xffffffff
    58c4:	ffffffff 	.word	0xffffffff
    58c8:	ffffffff 	.word	0xffffffff
    58cc:	ffffffff 	.word	0xffffffff
    58d0:	ffffffff 	.word	0xffffffff
    58d4:	ffffffff 	.word	0xffffffff
    58d8:	ffffffff 	.word	0xffffffff
    58dc:	ffffffff 	.word	0xffffffff
    58e0:	ffffffff 	.word	0xffffffff
    58e4:	ffffffff 	.word	0xffffffff
    58e8:	ffffffff 	.word	0xffffffff
    58ec:	ffffffff 	.word	0xffffffff
    58f0:	ffffffff 	.word	0xffffffff
    58f4:	ffffffff 	.word	0xffffffff
    58f8:	ffffffff 	.word	0xffffffff
    58fc:	ffffffff 	.word	0xffffffff
    5900:	ffffffff 	.word	0xffffffff
    5904:	ffffffff 	.word	0xffffffff
    5908:	ffffffff 	.word	0xffffffff
    590c:	ffffffff 	.word	0xffffffff
    5910:	ffffffff 	.word	0xffffffff
    5914:	ffffffff 	.word	0xffffffff
    5918:	ffffffff 	.word	0xffffffff
    591c:	ffffffff 	.word	0xffffffff
    5920:	ffffffff 	.word	0xffffffff
    5924:	ffffffff 	.word	0xffffffff
    5928:	ffffffff 	.word	0xffffffff
    592c:	ffffffff 	.word	0xffffffff
    5930:	ffffffff 	.word	0xffffffff
    5934:	ffffffff 	.word	0xffffffff
    5938:	ffffffff 	.word	0xffffffff
    593c:	ffffffff 	.word	0xffffffff
    5940:	ffffffff 	.word	0xffffffff
    5944:	ffffffff 	.word	0xffffffff
    5948:	ffffffff 	.word	0xffffffff
    594c:	ffffffff 	.word	0xffffffff
    5950:	ffffffff 	.word	0xffffffff
    5954:	ffffffff 	.word	0xffffffff
    5958:	ffffffff 	.word	0xffffffff
    595c:	ffffffff 	.word	0xffffffff
    5960:	ffffffff 	.word	0xffffffff
    5964:	ffffffff 	.word	0xffffffff
    5968:	ffffffff 	.word	0xffffffff
    596c:	ffffffff 	.word	0xffffffff
    5970:	ffffffff 	.word	0xffffffff
    5974:	ffffffff 	.word	0xffffffff
    5978:	ffffffff 	.word	0xffffffff
    597c:	ffffffff 	.word	0xffffffff
    5980:	ffffffff 	.word	0xffffffff
    5984:	ffffffff 	.word	0xffffffff
    5988:	ffffffff 	.word	0xffffffff
    598c:	ffffffff 	.word	0xffffffff
    5990:	ffffffff 	.word	0xffffffff
    5994:	ffffffff 	.word	0xffffffff
    5998:	ffffffff 	.word	0xffffffff
    599c:	ffffffff 	.word	0xffffffff
    59a0:	ffffffff 	.word	0xffffffff
    59a4:	ffffffff 	.word	0xffffffff
    59a8:	ffffffff 	.word	0xffffffff
    59ac:	ffffffff 	.word	0xffffffff
    59b0:	ffffffff 	.word	0xffffffff
    59b4:	ffffffff 	.word	0xffffffff
    59b8:	ffffffff 	.word	0xffffffff
    59bc:	ffffffff 	.word	0xffffffff
    59c0:	ffffffff 	.word	0xffffffff
    59c4:	ffffffff 	.word	0xffffffff
    59c8:	ffffffff 	.word	0xffffffff
    59cc:	ffffffff 	.word	0xffffffff
    59d0:	ffffffff 	.word	0xffffffff
    59d4:	ffffffff 	.word	0xffffffff
    59d8:	ffffffff 	.word	0xffffffff
    59dc:	ffffffff 	.word	0xffffffff
    59e0:	ffffffff 	.word	0xffffffff
    59e4:	ffffffff 	.word	0xffffffff
    59e8:	ffffffff 	.word	0xffffffff
    59ec:	ffffffff 	.word	0xffffffff
    59f0:	ffffffff 	.word	0xffffffff
    59f4:	ffffffff 	.word	0xffffffff
    59f8:	ffffffff 	.word	0xffffffff
    59fc:	ffffffff 	.word	0xffffffff
    5a00:	ffffffff 	.word	0xffffffff
    5a04:	ffffffff 	.word	0xffffffff
    5a08:	ffffffff 	.word	0xffffffff
    5a0c:	ffffffff 	.word	0xffffffff
    5a10:	ffffffff 	.word	0xffffffff
    5a14:	ffffffff 	.word	0xffffffff
    5a18:	ffffffff 	.word	0xffffffff
    5a1c:	ffffffff 	.word	0xffffffff
    5a20:	ffffffff 	.word	0xffffffff
    5a24:	ffffffff 	.word	0xffffffff
    5a28:	ffffffff 	.word	0xffffffff
    5a2c:	ffffffff 	.word	0xffffffff
    5a30:	ffffffff 	.word	0xffffffff
    5a34:	ffffffff 	.word	0xffffffff
    5a38:	ffffffff 	.word	0xffffffff
    5a3c:	ffffffff 	.word	0xffffffff
    5a40:	ffffffff 	.word	0xffffffff
    5a44:	ffffffff 	.word	0xffffffff
    5a48:	ffffffff 	.word	0xffffffff
    5a4c:	ffffffff 	.word	0xffffffff
    5a50:	ffffffff 	.word	0xffffffff
    5a54:	ffffffff 	.word	0xffffffff
    5a58:	ffffffff 	.word	0xffffffff
    5a5c:	ffffffff 	.word	0xffffffff
    5a60:	ffffffff 	.word	0xffffffff
    5a64:	ffffffff 	.word	0xffffffff
    5a68:	ffffffff 	.word	0xffffffff
    5a6c:	ffffffff 	.word	0xffffffff
    5a70:	ffffffff 	.word	0xffffffff
    5a74:	ffffffff 	.word	0xffffffff
    5a78:	ffffffff 	.word	0xffffffff
    5a7c:	ffffffff 	.word	0xffffffff
    5a80:	ffffffff 	.word	0xffffffff
    5a84:	ffffffff 	.word	0xffffffff
    5a88:	ffffffff 	.word	0xffffffff
    5a8c:	ffffffff 	.word	0xffffffff
    5a90:	ffffffff 	.word	0xffffffff
    5a94:	ffffffff 	.word	0xffffffff
    5a98:	ffffffff 	.word	0xffffffff
    5a9c:	ffffffff 	.word	0xffffffff
    5aa0:	ffffffff 	.word	0xffffffff
    5aa4:	ffffffff 	.word	0xffffffff
    5aa8:	ffffffff 	.word	0xffffffff
    5aac:	ffffffff 	.word	0xffffffff
    5ab0:	ffffffff 	.word	0xffffffff
    5ab4:	ffffffff 	.word	0xffffffff
    5ab8:	ffffffff 	.word	0xffffffff
    5abc:	ffffffff 	.word	0xffffffff
    5ac0:	ffffffff 	.word	0xffffffff
    5ac4:	ffffffff 	.word	0xffffffff
    5ac8:	ffffffff 	.word	0xffffffff
    5acc:	ffffffff 	.word	0xffffffff
    5ad0:	ffffffff 	.word	0xffffffff
    5ad4:	ffffffff 	.word	0xffffffff
    5ad8:	ffffffff 	.word	0xffffffff
    5adc:	ffffffff 	.word	0xffffffff
    5ae0:	ffffffff 	.word	0xffffffff
    5ae4:	ffffffff 	.word	0xffffffff
    5ae8:	ffffffff 	.word	0xffffffff
    5aec:	ffffffff 	.word	0xffffffff
    5af0:	ffffffff 	.word	0xffffffff
    5af4:	ffffffff 	.word	0xffffffff
    5af8:	ffffffff 	.word	0xffffffff
    5afc:	ffffffff 	.word	0xffffffff
    5b00:	ffffffff 	.word	0xffffffff
    5b04:	ffffffff 	.word	0xffffffff
    5b08:	ffffffff 	.word	0xffffffff
    5b0c:	ffffffff 	.word	0xffffffff
    5b10:	ffffffff 	.word	0xffffffff
    5b14:	ffffffff 	.word	0xffffffff
    5b18:	ffffffff 	.word	0xffffffff
    5b1c:	ffffffff 	.word	0xffffffff
    5b20:	ffffffff 	.word	0xffffffff
    5b24:	ffffffff 	.word	0xffffffff
    5b28:	ffffffff 	.word	0xffffffff
    5b2c:	ffffffff 	.word	0xffffffff
    5b30:	ffffffff 	.word	0xffffffff
    5b34:	ffffffff 	.word	0xffffffff
    5b38:	ffffffff 	.word	0xffffffff
    5b3c:	ffffffff 	.word	0xffffffff
    5b40:	ffffffff 	.word	0xffffffff
    5b44:	ffffffff 	.word	0xffffffff
    5b48:	ffffffff 	.word	0xffffffff
    5b4c:	ffffffff 	.word	0xffffffff
    5b50:	ffffffff 	.word	0xffffffff
    5b54:	ffffffff 	.word	0xffffffff
    5b58:	ffffffff 	.word	0xffffffff
    5b5c:	ffffffff 	.word	0xffffffff
    5b60:	ffffffff 	.word	0xffffffff
    5b64:	ffffffff 	.word	0xffffffff
    5b68:	ffffffff 	.word	0xffffffff
    5b6c:	ffffffff 	.word	0xffffffff
    5b70:	ffffffff 	.word	0xffffffff
    5b74:	ffffffff 	.word	0xffffffff
    5b78:	ffffffff 	.word	0xffffffff
    5b7c:	ffffffff 	.word	0xffffffff
    5b80:	ffffffff 	.word	0xffffffff
    5b84:	ffffffff 	.word	0xffffffff
    5b88:	ffffffff 	.word	0xffffffff
    5b8c:	ffffffff 	.word	0xffffffff
    5b90:	ffffffff 	.word	0xffffffff
    5b94:	ffffffff 	.word	0xffffffff
    5b98:	ffffffff 	.word	0xffffffff
    5b9c:	ffffffff 	.word	0xffffffff
    5ba0:	ffffffff 	.word	0xffffffff
    5ba4:	ffffffff 	.word	0xffffffff
    5ba8:	ffffffff 	.word	0xffffffff
    5bac:	ffffffff 	.word	0xffffffff
    5bb0:	ffffffff 	.word	0xffffffff
    5bb4:	ffffffff 	.word	0xffffffff
    5bb8:	ffffffff 	.word	0xffffffff
    5bbc:	ffffffff 	.word	0xffffffff
    5bc0:	ffffffff 	.word	0xffffffff
    5bc4:	ffffffff 	.word	0xffffffff
    5bc8:	ffffffff 	.word	0xffffffff
    5bcc:	ffffffff 	.word	0xffffffff
    5bd0:	ffffffff 	.word	0xffffffff
    5bd4:	ffffffff 	.word	0xffffffff
    5bd8:	ffffffff 	.word	0xffffffff
    5bdc:	ffffffff 	.word	0xffffffff
    5be0:	ffffffff 	.word	0xffffffff
    5be4:	ffffffff 	.word	0xffffffff
    5be8:	ffffffff 	.word	0xffffffff
    5bec:	ffffffff 	.word	0xffffffff
    5bf0:	ffffffff 	.word	0xffffffff
    5bf4:	ffffffff 	.word	0xffffffff
    5bf8:	ffffffff 	.word	0xffffffff
    5bfc:	ffffffff 	.word	0xffffffff
    5c00:	ffffffff 	.word	0xffffffff
    5c04:	ffffffff 	.word	0xffffffff
    5c08:	ffffffff 	.word	0xffffffff
    5c0c:	ffffffff 	.word	0xffffffff
    5c10:	ffffffff 	.word	0xffffffff
    5c14:	ffffffff 	.word	0xffffffff
    5c18:	ffffffff 	.word	0xffffffff
    5c1c:	ffffffff 	.word	0xffffffff
    5c20:	ffffffff 	.word	0xffffffff
    5c24:	ffffffff 	.word	0xffffffff
    5c28:	ffffffff 	.word	0xffffffff
    5c2c:	ffffffff 	.word	0xffffffff
    5c30:	ffffffff 	.word	0xffffffff
    5c34:	ffffffff 	.word	0xffffffff
    5c38:	ffffffff 	.word	0xffffffff
    5c3c:	ffffffff 	.word	0xffffffff
    5c40:	ffffffff 	.word	0xffffffff
    5c44:	ffffffff 	.word	0xffffffff
    5c48:	ffffffff 	.word	0xffffffff
    5c4c:	ffffffff 	.word	0xffffffff
    5c50:	ffffffff 	.word	0xffffffff
    5c54:	ffffffff 	.word	0xffffffff
    5c58:	ffffffff 	.word	0xffffffff
    5c5c:	ffffffff 	.word	0xffffffff
    5c60:	ffffffff 	.word	0xffffffff
    5c64:	ffffffff 	.word	0xffffffff
    5c68:	ffffffff 	.word	0xffffffff
    5c6c:	ffffffff 	.word	0xffffffff
    5c70:	ffffffff 	.word	0xffffffff
    5c74:	ffffffff 	.word	0xffffffff
    5c78:	ffffffff 	.word	0xffffffff
    5c7c:	ffffffff 	.word	0xffffffff
    5c80:	ffffffff 	.word	0xffffffff
    5c84:	ffffffff 	.word	0xffffffff
    5c88:	ffffffff 	.word	0xffffffff
    5c8c:	ffffffff 	.word	0xffffffff
    5c90:	ffffffff 	.word	0xffffffff
    5c94:	ffffffff 	.word	0xffffffff
    5c98:	ffffffff 	.word	0xffffffff
    5c9c:	ffffffff 	.word	0xffffffff
    5ca0:	ffffffff 	.word	0xffffffff
    5ca4:	ffffffff 	.word	0xffffffff
    5ca8:	ffffffff 	.word	0xffffffff
    5cac:	ffffffff 	.word	0xffffffff
    5cb0:	ffffffff 	.word	0xffffffff
    5cb4:	ffffffff 	.word	0xffffffff
    5cb8:	ffffffff 	.word	0xffffffff
    5cbc:	ffffffff 	.word	0xffffffff
    5cc0:	ffffffff 	.word	0xffffffff
    5cc4:	ffffffff 	.word	0xffffffff
    5cc8:	ffffffff 	.word	0xffffffff
    5ccc:	ffffffff 	.word	0xffffffff
    5cd0:	ffffffff 	.word	0xffffffff
    5cd4:	ffffffff 	.word	0xffffffff
    5cd8:	ffffffff 	.word	0xffffffff
    5cdc:	ffffffff 	.word	0xffffffff
    5ce0:	ffffffff 	.word	0xffffffff
    5ce4:	ffffffff 	.word	0xffffffff
    5ce8:	ffffffff 	.word	0xffffffff
    5cec:	ffffffff 	.word	0xffffffff
    5cf0:	ffffffff 	.word	0xffffffff
    5cf4:	ffffffff 	.word	0xffffffff
    5cf8:	ffffffff 	.word	0xffffffff
    5cfc:	ffffffff 	.word	0xffffffff
    5d00:	ffffffff 	.word	0xffffffff
    5d04:	ffffffff 	.word	0xffffffff
    5d08:	ffffffff 	.word	0xffffffff
    5d0c:	ffffffff 	.word	0xffffffff
    5d10:	ffffffff 	.word	0xffffffff
    5d14:	ffffffff 	.word	0xffffffff
    5d18:	ffffffff 	.word	0xffffffff
    5d1c:	ffffffff 	.word	0xffffffff
    5d20:	ffffffff 	.word	0xffffffff
    5d24:	ffffffff 	.word	0xffffffff
    5d28:	ffffffff 	.word	0xffffffff
    5d2c:	ffffffff 	.word	0xffffffff
    5d30:	ffffffff 	.word	0xffffffff
    5d34:	ffffffff 	.word	0xffffffff
    5d38:	ffffffff 	.word	0xffffffff
    5d3c:	ffffffff 	.word	0xffffffff
    5d40:	ffffffff 	.word	0xffffffff
    5d44:	ffffffff 	.word	0xffffffff
    5d48:	ffffffff 	.word	0xffffffff
    5d4c:	ffffffff 	.word	0xffffffff
    5d50:	ffffffff 	.word	0xffffffff
    5d54:	ffffffff 	.word	0xffffffff
    5d58:	ffffffff 	.word	0xffffffff
    5d5c:	ffffffff 	.word	0xffffffff
    5d60:	ffffffff 	.word	0xffffffff
    5d64:	ffffffff 	.word	0xffffffff
    5d68:	ffffffff 	.word	0xffffffff
    5d6c:	ffffffff 	.word	0xffffffff
    5d70:	ffffffff 	.word	0xffffffff
    5d74:	ffffffff 	.word	0xffffffff
    5d78:	ffffffff 	.word	0xffffffff
    5d7c:	ffffffff 	.word	0xffffffff
    5d80:	ffffffff 	.word	0xffffffff
    5d84:	ffffffff 	.word	0xffffffff
    5d88:	ffffffff 	.word	0xffffffff
    5d8c:	ffffffff 	.word	0xffffffff
    5d90:	ffffffff 	.word	0xffffffff
    5d94:	ffffffff 	.word	0xffffffff
    5d98:	ffffffff 	.word	0xffffffff
    5d9c:	ffffffff 	.word	0xffffffff
    5da0:	ffffffff 	.word	0xffffffff
    5da4:	ffffffff 	.word	0xffffffff
    5da8:	ffffffff 	.word	0xffffffff
    5dac:	ffffffff 	.word	0xffffffff
    5db0:	ffffffff 	.word	0xffffffff
    5db4:	ffffffff 	.word	0xffffffff
    5db8:	ffffffff 	.word	0xffffffff
    5dbc:	ffffffff 	.word	0xffffffff
    5dc0:	ffffffff 	.word	0xffffffff
    5dc4:	ffffffff 	.word	0xffffffff
    5dc8:	ffffffff 	.word	0xffffffff
    5dcc:	ffffffff 	.word	0xffffffff
    5dd0:	ffffffff 	.word	0xffffffff
    5dd4:	ffffffff 	.word	0xffffffff
    5dd8:	ffffffff 	.word	0xffffffff
    5ddc:	ffffffff 	.word	0xffffffff
    5de0:	ffffffff 	.word	0xffffffff
    5de4:	ffffffff 	.word	0xffffffff
    5de8:	ffffffff 	.word	0xffffffff
    5dec:	ffffffff 	.word	0xffffffff
    5df0:	ffffffff 	.word	0xffffffff
    5df4:	ffffffff 	.word	0xffffffff
    5df8:	ffffffff 	.word	0xffffffff
    5dfc:	ffffffff 	.word	0xffffffff
    5e00:	ffffffff 	.word	0xffffffff
    5e04:	ffffffff 	.word	0xffffffff
    5e08:	ffffffff 	.word	0xffffffff
    5e0c:	ffffffff 	.word	0xffffffff
    5e10:	ffffffff 	.word	0xffffffff
    5e14:	ffffffff 	.word	0xffffffff
    5e18:	ffffffff 	.word	0xffffffff
    5e1c:	ffffffff 	.word	0xffffffff
    5e20:	ffffffff 	.word	0xffffffff
    5e24:	ffffffff 	.word	0xffffffff
    5e28:	ffffffff 	.word	0xffffffff
    5e2c:	ffffffff 	.word	0xffffffff
    5e30:	ffffffff 	.word	0xffffffff
    5e34:	ffffffff 	.word	0xffffffff
    5e38:	ffffffff 	.word	0xffffffff
    5e3c:	ffffffff 	.word	0xffffffff
    5e40:	ffffffff 	.word	0xffffffff
    5e44:	ffffffff 	.word	0xffffffff
    5e48:	ffffffff 	.word	0xffffffff
    5e4c:	ffffffff 	.word	0xffffffff
    5e50:	ffffffff 	.word	0xffffffff
    5e54:	ffffffff 	.word	0xffffffff
    5e58:	ffffffff 	.word	0xffffffff
    5e5c:	ffffffff 	.word	0xffffffff
    5e60:	ffffffff 	.word	0xffffffff
    5e64:	ffffffff 	.word	0xffffffff
    5e68:	ffffffff 	.word	0xffffffff
    5e6c:	ffffffff 	.word	0xffffffff
    5e70:	ffffffff 	.word	0xffffffff
    5e74:	ffffffff 	.word	0xffffffff
    5e78:	ffffffff 	.word	0xffffffff
    5e7c:	ffffffff 	.word	0xffffffff
    5e80:	ffffffff 	.word	0xffffffff
    5e84:	ffffffff 	.word	0xffffffff
    5e88:	ffffffff 	.word	0xffffffff
    5e8c:	ffffffff 	.word	0xffffffff
    5e90:	ffffffff 	.word	0xffffffff
    5e94:	ffffffff 	.word	0xffffffff
    5e98:	ffffffff 	.word	0xffffffff
    5e9c:	ffffffff 	.word	0xffffffff
    5ea0:	ffffffff 	.word	0xffffffff
    5ea4:	ffffffff 	.word	0xffffffff
    5ea8:	ffffffff 	.word	0xffffffff
    5eac:	ffffffff 	.word	0xffffffff
    5eb0:	ffffffff 	.word	0xffffffff
    5eb4:	ffffffff 	.word	0xffffffff
    5eb8:	ffffffff 	.word	0xffffffff
    5ebc:	ffffffff 	.word	0xffffffff
    5ec0:	ffffffff 	.word	0xffffffff
    5ec4:	ffffffff 	.word	0xffffffff
    5ec8:	ffffffff 	.word	0xffffffff
    5ecc:	ffffffff 	.word	0xffffffff
    5ed0:	ffffffff 	.word	0xffffffff
    5ed4:	ffffffff 	.word	0xffffffff
    5ed8:	ffffffff 	.word	0xffffffff
    5edc:	ffffffff 	.word	0xffffffff
    5ee0:	ffffffff 	.word	0xffffffff
    5ee4:	ffffffff 	.word	0xffffffff
    5ee8:	ffffffff 	.word	0xffffffff
    5eec:	ffffffff 	.word	0xffffffff
    5ef0:	ffffffff 	.word	0xffffffff
    5ef4:	ffffffff 	.word	0xffffffff
    5ef8:	ffffffff 	.word	0xffffffff
    5efc:	ffffffff 	.word	0xffffffff
    5f00:	ffffffff 	.word	0xffffffff
    5f04:	ffffffff 	.word	0xffffffff
    5f08:	ffffffff 	.word	0xffffffff
    5f0c:	ffffffff 	.word	0xffffffff
    5f10:	ffffffff 	.word	0xffffffff
    5f14:	ffffffff 	.word	0xffffffff
    5f18:	ffffffff 	.word	0xffffffff
    5f1c:	ffffffff 	.word	0xffffffff
    5f20:	ffffffff 	.word	0xffffffff
    5f24:	ffffffff 	.word	0xffffffff
    5f28:	ffffffff 	.word	0xffffffff
    5f2c:	ffffffff 	.word	0xffffffff
    5f30:	ffffffff 	.word	0xffffffff
    5f34:	ffffffff 	.word	0xffffffff
    5f38:	ffffffff 	.word	0xffffffff
    5f3c:	ffffffff 	.word	0xffffffff
    5f40:	ffffffff 	.word	0xffffffff
    5f44:	ffffffff 	.word	0xffffffff
    5f48:	ffffffff 	.word	0xffffffff
    5f4c:	ffffffff 	.word	0xffffffff
    5f50:	ffffffff 	.word	0xffffffff
    5f54:	ffffffff 	.word	0xffffffff
    5f58:	ffffffff 	.word	0xffffffff
    5f5c:	ffffffff 	.word	0xffffffff
    5f60:	ffffffff 	.word	0xffffffff
    5f64:	ffffffff 	.word	0xffffffff
    5f68:	ffffffff 	.word	0xffffffff
    5f6c:	ffffffff 	.word	0xffffffff
    5f70:	ffffffff 	.word	0xffffffff
    5f74:	ffffffff 	.word	0xffffffff
    5f78:	ffffffff 	.word	0xffffffff
    5f7c:	ffffffff 	.word	0xffffffff
    5f80:	ffffffff 	.word	0xffffffff
    5f84:	ffffffff 	.word	0xffffffff
    5f88:	ffffffff 	.word	0xffffffff
    5f8c:	ffffffff 	.word	0xffffffff
    5f90:	ffffffff 	.word	0xffffffff
    5f94:	ffffffff 	.word	0xffffffff
    5f98:	ffffffff 	.word	0xffffffff
    5f9c:	ffffffff 	.word	0xffffffff
    5fa0:	ffffffff 	.word	0xffffffff
    5fa4:	ffffffff 	.word	0xffffffff
    5fa8:	ffffffff 	.word	0xffffffff
    5fac:	ffffffff 	.word	0xffffffff
    5fb0:	ffffffff 	.word	0xffffffff
    5fb4:	ffffffff 	.word	0xffffffff
    5fb8:	ffffffff 	.word	0xffffffff
    5fbc:	ffffffff 	.word	0xffffffff
    5fc0:	ffffffff 	.word	0xffffffff
    5fc4:	ffffffff 	.word	0xffffffff
    5fc8:	ffffffff 	.word	0xffffffff
    5fcc:	ffffffff 	.word	0xffffffff
    5fd0:	ffffffff 	.word	0xffffffff
    5fd4:	ffffffff 	.word	0xffffffff
    5fd8:	ffffffff 	.word	0xffffffff
    5fdc:	ffffffff 	.word	0xffffffff
    5fe0:	ffffffff 	.word	0xffffffff
    5fe4:	ffffffff 	.word	0xffffffff
    5fe8:	ffffffff 	.word	0xffffffff
    5fec:	ffffffff 	.word	0xffffffff
    5ff0:	ffffffff 	.word	0xffffffff
    5ff4:	ffffffff 	.word	0xffffffff
    5ff8:	ffffffff 	.word	0xffffffff
    5ffc:	ffffffff 	.word	0xffffffff
    6000:	ffffffff 	.word	0xffffffff
    6004:	ffffffff 	.word	0xffffffff
    6008:	ffffffff 	.word	0xffffffff
    600c:	ffffffff 	.word	0xffffffff
    6010:	ffffffff 	.word	0xffffffff
    6014:	ffffffff 	.word	0xffffffff
    6018:	ffffffff 	.word	0xffffffff
    601c:	ffffffff 	.word	0xffffffff
    6020:	ffffffff 	.word	0xffffffff
    6024:	ffffffff 	.word	0xffffffff
    6028:	ffffffff 	.word	0xffffffff
    602c:	ffffffff 	.word	0xffffffff
    6030:	ffffffff 	.word	0xffffffff
    6034:	ffffffff 	.word	0xffffffff
    6038:	ffffffff 	.word	0xffffffff
    603c:	ffffffff 	.word	0xffffffff
    6040:	ffffffff 	.word	0xffffffff
    6044:	ffffffff 	.word	0xffffffff
    6048:	ffffffff 	.word	0xffffffff
    604c:	ffffffff 	.word	0xffffffff
    6050:	ffffffff 	.word	0xffffffff
    6054:	ffffffff 	.word	0xffffffff
    6058:	ffffffff 	.word	0xffffffff
    605c:	ffffffff 	.word	0xffffffff
    6060:	ffffffff 	.word	0xffffffff
    6064:	ffffffff 	.word	0xffffffff
    6068:	ffffffff 	.word	0xffffffff
    606c:	ffffffff 	.word	0xffffffff
    6070:	ffffffff 	.word	0xffffffff
    6074:	ffffffff 	.word	0xffffffff
    6078:	ffffffff 	.word	0xffffffff
    607c:	ffffffff 	.word	0xffffffff
    6080:	ffffffff 	.word	0xffffffff
    6084:	ffffffff 	.word	0xffffffff
    6088:	ffffffff 	.word	0xffffffff
    608c:	ffffffff 	.word	0xffffffff
    6090:	ffffffff 	.word	0xffffffff
    6094:	ffffffff 	.word	0xffffffff
    6098:	ffffffff 	.word	0xffffffff
    609c:	ffffffff 	.word	0xffffffff
    60a0:	ffffffff 	.word	0xffffffff
    60a4:	ffffffff 	.word	0xffffffff
    60a8:	ffffffff 	.word	0xffffffff
    60ac:	ffffffff 	.word	0xffffffff
    60b0:	ffffffff 	.word	0xffffffff
    60b4:	ffffffff 	.word	0xffffffff
    60b8:	ffffffff 	.word	0xffffffff
    60bc:	ffffffff 	.word	0xffffffff
    60c0:	ffffffff 	.word	0xffffffff
    60c4:	ffffffff 	.word	0xffffffff
    60c8:	ffffffff 	.word	0xffffffff
    60cc:	ffffffff 	.word	0xffffffff
    60d0:	ffffffff 	.word	0xffffffff
    60d4:	ffffffff 	.word	0xffffffff
    60d8:	ffffffff 	.word	0xffffffff
    60dc:	ffffffff 	.word	0xffffffff
    60e0:	ffffffff 	.word	0xffffffff
    60e4:	ffffffff 	.word	0xffffffff
    60e8:	ffffffff 	.word	0xffffffff
    60ec:	ffffffff 	.word	0xffffffff
    60f0:	ffffffff 	.word	0xffffffff
    60f4:	ffffffff 	.word	0xffffffff
    60f8:	ffffffff 	.word	0xffffffff
    60fc:	ffffffff 	.word	0xffffffff

00006100 <pds_ff_PDS_MYINDEX_ID>:
    6100:	00010009 20002078 00000000 00000000     ....x . ........

00006110 <pds_ff_PDS_ROLE_ID>:
    6110:	00010008 20002160 00000000 00000000     ....`!. ........

00006120 <pds_ff_PDS_EDC_ID>:
    6120:	00010007 200003f6 00000000 00000000     ....... ........

00006130 <pds_ff_PDS_CONNECTION_TABLE_ID>:
    6130:	01400006 200023b0 00000000 00000000     ..@..#. ........

00006140 <pds_ff_PDS_CONNECTION_MODE_ID>:
    6140:	00010005 2000000b 00000000 00000000     ....... ........

00006150 <pds_ff_PDS_CURRENT_CHANNEL_ID>:
    6150:	00010004 2000000d 00000000 00000000     ....... ........

00006160 <pds_ff_PDS_LONGADDR_ID>:
    6160:	00080003 20000010 00000000 00000000     ....... ........

00006170 <pds_ff_PDS_PANID_ID>:
    6170:	00020002 20002080 00000000 00000000     ..... . ........

00006180 <pds_ff_PDS_OUTGOING_FRAME_COUNTER_ID>:
    6180:	00040001 20001e34 00000000 00000000     ....4.. ........

00006190 <MiWiFullParamsDirDescr>:
    6190:	000124bc 40010009                       .$.....@

00006198 <__do_global_dtors_aux>:
    6198:	b510      	push	{r4, lr}
    619a:	4c06      	ldr	r4, [pc, #24]	; (61b4 <__do_global_dtors_aux+0x1c>)
    619c:	7823      	ldrb	r3, [r4, #0]
    619e:	2b00      	cmp	r3, #0
    61a0:	d107      	bne.n	61b2 <__do_global_dtors_aux+0x1a>
    61a2:	4b05      	ldr	r3, [pc, #20]	; (61b8 <__do_global_dtors_aux+0x20>)
    61a4:	2b00      	cmp	r3, #0
    61a6:	d002      	beq.n	61ae <__do_global_dtors_aux+0x16>
    61a8:	4804      	ldr	r0, [pc, #16]	; (61bc <__do_global_dtors_aux+0x24>)
    61aa:	e000      	b.n	61ae <__do_global_dtors_aux+0x16>
    61ac:	bf00      	nop
    61ae:	2301      	movs	r3, #1
    61b0:	7023      	strb	r3, [r4, #0]
    61b2:	bd10      	pop	{r4, pc}
    61b4:	2000009c 	.word	0x2000009c
    61b8:	00000000 	.word	0x00000000
    61bc:	00012a48 	.word	0x00012a48

000061c0 <frame_dummy>:
    61c0:	4b08      	ldr	r3, [pc, #32]	; (61e4 <frame_dummy+0x24>)
    61c2:	b510      	push	{r4, lr}
    61c4:	2b00      	cmp	r3, #0
    61c6:	d003      	beq.n	61d0 <frame_dummy+0x10>
    61c8:	4907      	ldr	r1, [pc, #28]	; (61e8 <frame_dummy+0x28>)
    61ca:	4808      	ldr	r0, [pc, #32]	; (61ec <frame_dummy+0x2c>)
    61cc:	e000      	b.n	61d0 <frame_dummy+0x10>
    61ce:	bf00      	nop
    61d0:	4807      	ldr	r0, [pc, #28]	; (61f0 <frame_dummy+0x30>)
    61d2:	6803      	ldr	r3, [r0, #0]
    61d4:	2b00      	cmp	r3, #0
    61d6:	d100      	bne.n	61da <frame_dummy+0x1a>
    61d8:	bd10      	pop	{r4, pc}
    61da:	4b06      	ldr	r3, [pc, #24]	; (61f4 <frame_dummy+0x34>)
    61dc:	2b00      	cmp	r3, #0
    61de:	d0fb      	beq.n	61d8 <frame_dummy+0x18>
    61e0:	4798      	blx	r3
    61e2:	e7f9      	b.n	61d8 <frame_dummy+0x18>
    61e4:	00000000 	.word	0x00000000
    61e8:	200000a0 	.word	0x200000a0
    61ec:	00012a48 	.word	0x00012a48
    61f0:	00012a48 	.word	0x00012a48
    61f4:	00000000 	.word	0x00000000

000061f8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    61f8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    61fa:	2000      	movs	r0, #0
    61fc:	4b08      	ldr	r3, [pc, #32]	; (6220 <delay_init+0x28>)
    61fe:	4798      	blx	r3
    6200:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    6202:	4c08      	ldr	r4, [pc, #32]	; (6224 <delay_init+0x2c>)
    6204:	21fa      	movs	r1, #250	; 0xfa
    6206:	0089      	lsls	r1, r1, #2
    6208:	47a0      	blx	r4
    620a:	4b07      	ldr	r3, [pc, #28]	; (6228 <delay_init+0x30>)
    620c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    620e:	4907      	ldr	r1, [pc, #28]	; (622c <delay_init+0x34>)
    6210:	0028      	movs	r0, r5
    6212:	47a0      	blx	r4
    6214:	4b06      	ldr	r3, [pc, #24]	; (6230 <delay_init+0x38>)
    6216:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    6218:	2205      	movs	r2, #5
    621a:	4b06      	ldr	r3, [pc, #24]	; (6234 <delay_init+0x3c>)
    621c:	601a      	str	r2, [r3, #0]
}
    621e:	bd70      	pop	{r4, r5, r6, pc}
    6220:	00007c49 	.word	0x00007c49
    6224:	0000faad 	.word	0x0000faad
    6228:	20000000 	.word	0x20000000
    622c:	000f4240 	.word	0x000f4240
    6230:	20000004 	.word	0x20000004
    6234:	e000e010 	.word	0xe000e010

00006238 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    6238:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    623a:	4b08      	ldr	r3, [pc, #32]	; (625c <delay_cycles_us+0x24>)
    623c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    623e:	4a08      	ldr	r2, [pc, #32]	; (6260 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    6240:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6242:	2180      	movs	r1, #128	; 0x80
    6244:	0249      	lsls	r1, r1, #9
	while (n--) {
    6246:	3801      	subs	r0, #1
    6248:	d307      	bcc.n	625a <delay_cycles_us+0x22>
	if (n > 0) {
    624a:	2c00      	cmp	r4, #0
    624c:	d0fb      	beq.n	6246 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    624e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    6250:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6252:	6813      	ldr	r3, [r2, #0]
    6254:	420b      	tst	r3, r1
    6256:	d0fc      	beq.n	6252 <delay_cycles_us+0x1a>
    6258:	e7f5      	b.n	6246 <delay_cycles_us+0xe>
	}
}
    625a:	bd30      	pop	{r4, r5, pc}
    625c:	20000004 	.word	0x20000004
    6260:	e000e010 	.word	0xe000e010

00006264 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    6264:	4b0c      	ldr	r3, [pc, #48]	; (6298 <cpu_irq_enter_critical+0x34>)
    6266:	681b      	ldr	r3, [r3, #0]
    6268:	2b00      	cmp	r3, #0
    626a:	d106      	bne.n	627a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    626c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    6270:	2b00      	cmp	r3, #0
    6272:	d007      	beq.n	6284 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6274:	2200      	movs	r2, #0
    6276:	4b09      	ldr	r3, [pc, #36]	; (629c <cpu_irq_enter_critical+0x38>)
    6278:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    627a:	4a07      	ldr	r2, [pc, #28]	; (6298 <cpu_irq_enter_critical+0x34>)
    627c:	6813      	ldr	r3, [r2, #0]
    627e:	3301      	adds	r3, #1
    6280:	6013      	str	r3, [r2, #0]
}
    6282:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6284:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6286:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    628a:	2200      	movs	r2, #0
    628c:	4b04      	ldr	r3, [pc, #16]	; (62a0 <cpu_irq_enter_critical+0x3c>)
    628e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6290:	3201      	adds	r2, #1
    6292:	4b02      	ldr	r3, [pc, #8]	; (629c <cpu_irq_enter_critical+0x38>)
    6294:	701a      	strb	r2, [r3, #0]
    6296:	e7f0      	b.n	627a <cpu_irq_enter_critical+0x16>
    6298:	200000b8 	.word	0x200000b8
    629c:	200000bc 	.word	0x200000bc
    62a0:	20000008 	.word	0x20000008

000062a4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    62a4:	4b08      	ldr	r3, [pc, #32]	; (62c8 <cpu_irq_leave_critical+0x24>)
    62a6:	681a      	ldr	r2, [r3, #0]
    62a8:	3a01      	subs	r2, #1
    62aa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    62ac:	681b      	ldr	r3, [r3, #0]
    62ae:	2b00      	cmp	r3, #0
    62b0:	d109      	bne.n	62c6 <cpu_irq_leave_critical+0x22>
    62b2:	4b06      	ldr	r3, [pc, #24]	; (62cc <cpu_irq_leave_critical+0x28>)
    62b4:	781b      	ldrb	r3, [r3, #0]
    62b6:	2b00      	cmp	r3, #0
    62b8:	d005      	beq.n	62c6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    62ba:	2201      	movs	r2, #1
    62bc:	4b04      	ldr	r3, [pc, #16]	; (62d0 <cpu_irq_leave_critical+0x2c>)
    62be:	701a      	strb	r2, [r3, #0]
    62c0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    62c4:	b662      	cpsie	i
	}
}
    62c6:	4770      	bx	lr
    62c8:	200000b8 	.word	0x200000b8
    62cc:	200000bc 	.word	0x200000bc
    62d0:	20000008 	.word	0x20000008

000062d4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    62d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62d6:	46ce      	mov	lr, r9
    62d8:	4647      	mov	r7, r8
    62da:	b580      	push	{r7, lr}
    62dc:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    62de:	ac01      	add	r4, sp, #4
    62e0:	2601      	movs	r6, #1
    62e2:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    62e4:	2700      	movs	r7, #0
    62e6:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    62e8:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    62ea:	0021      	movs	r1, r4
    62ec:	200e      	movs	r0, #14
    62ee:	4d23      	ldr	r5, [pc, #140]	; (637c <system_board_init+0xa8>)
    62f0:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    62f2:	4b23      	ldr	r3, [pc, #140]	; (6380 <system_board_init+0xac>)
    62f4:	4698      	mov	r8, r3
    62f6:	2380      	movs	r3, #128	; 0x80
    62f8:	01db      	lsls	r3, r3, #7
    62fa:	4642      	mov	r2, r8
    62fc:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    62fe:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    6300:	0021      	movs	r1, r4
    6302:	2012      	movs	r0, #18
    6304:	47a8      	blx	r5
    6306:	2380      	movs	r3, #128	; 0x80
    6308:	02db      	lsls	r3, r3, #11
    630a:	4699      	mov	r9, r3
    630c:	4643      	mov	r3, r8
    630e:	464a      	mov	r2, r9
    6310:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6312:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6314:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    6316:	0021      	movs	r1, r4
    6318:	2007      	movs	r0, #7
    631a:	47a8      	blx	r5
	config->input_pull = PORT_PIN_PULL_UP;
    631c:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    631e:	70a7      	strb	r7, [r4, #2]
	
#ifdef CONF_BOARD_AT86RFX
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6320:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    6322:	0021      	movs	r1, r4
    6324:	2052      	movs	r0, #82	; 0x52
    6326:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    6328:	0021      	movs	r1, r4
    632a:	203e      	movs	r0, #62	; 0x3e
    632c:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    632e:	0021      	movs	r1, r4
    6330:	203f      	movs	r0, #63	; 0x3f
    6332:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    6334:	0021      	movs	r1, r4
    6336:	202f      	movs	r0, #47	; 0x2f
    6338:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    633a:	0021      	movs	r1, r4
    633c:	2014      	movs	r0, #20
    633e:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    6340:	4b10      	ldr	r3, [pc, #64]	; (6384 <system_board_init+0xb0>)
    6342:	464a      	mov	r2, r9
    6344:	619a      	str	r2, [r3, #24]
    6346:	4b10      	ldr	r3, [pc, #64]	; (6388 <system_board_init+0xb4>)
    6348:	2280      	movs	r2, #128	; 0x80
    634a:	05d2      	lsls	r2, r2, #23
    634c:	619a      	str	r2, [r3, #24]
    634e:	2280      	movs	r2, #128	; 0x80
    6350:	0612      	lsls	r2, r2, #24
    6352:	619a      	str	r2, [r3, #24]
    6354:	2680      	movs	r6, #128	; 0x80
    6356:	0236      	lsls	r6, r6, #8
    6358:	619e      	str	r6, [r3, #24]
    635a:	2380      	movs	r3, #128	; 0x80
    635c:	035b      	lsls	r3, r3, #13
    635e:	4642      	mov	r2, r8
    6360:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_SCK, true);
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6362:	7027      	strb	r7, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    6364:	0021      	movs	r1, r4
    6366:	2053      	movs	r0, #83	; 0x53
    6368:	47a8      	blx	r5
	
	/* SAMR30 Antenna Diversity Configuration */

	MCLK->APBCMASK.reg |= (1<<MCLK_APBCMASK_RFCTRL_Pos);
    636a:	4b08      	ldr	r3, [pc, #32]	; (638c <system_board_init+0xb8>)
    636c:	69da      	ldr	r2, [r3, #28]
    636e:	4316      	orrs	r6, r2
    6370:	61de      	str	r6, [r3, #28]
// 	
// 	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
// 	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
// 	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
 #endif	
}
    6372:	b003      	add	sp, #12
    6374:	bc0c      	pop	{r2, r3}
    6376:	4690      	mov	r8, r2
    6378:	4699      	mov	r9, r3
    637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    637c:	00006899 	.word	0x00006899
    6380:	40002800 	.word	0x40002800
    6384:	40002900 	.word	0x40002900
    6388:	40002880 	.word	0x40002880
    638c:	40000400 	.word	0x40000400

00006390 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6390:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    6392:	2a00      	cmp	r2, #0
    6394:	d001      	beq.n	639a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    6396:	0018      	movs	r0, r3
    6398:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    639a:	008b      	lsls	r3, r1, #2
    639c:	4a06      	ldr	r2, [pc, #24]	; (63b8 <extint_register_callback+0x28>)
    639e:	589b      	ldr	r3, [r3, r2]
    63a0:	2b00      	cmp	r3, #0
    63a2:	d003      	beq.n	63ac <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    63a4:	4283      	cmp	r3, r0
    63a6:	d005      	beq.n	63b4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    63a8:	231d      	movs	r3, #29
    63aa:	e7f4      	b.n	6396 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    63ac:	0089      	lsls	r1, r1, #2
    63ae:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    63b0:	2300      	movs	r3, #0
    63b2:	e7f0      	b.n	6396 <extint_register_callback+0x6>
		return STATUS_OK;
    63b4:	2300      	movs	r3, #0
    63b6:	e7ee      	b.n	6396 <extint_register_callback+0x6>
    63b8:	20001cf8 	.word	0x20001cf8

000063bc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    63bc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    63be:	2900      	cmp	r1, #0
    63c0:	d001      	beq.n	63c6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    63c2:	0018      	movs	r0, r3
    63c4:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    63c6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    63c8:	281f      	cmp	r0, #31
    63ca:	d800      	bhi.n	63ce <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    63cc:	4a02      	ldr	r2, [pc, #8]	; (63d8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    63ce:	2301      	movs	r3, #1
    63d0:	4083      	lsls	r3, r0
    63d2:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    63d4:	2300      	movs	r3, #0
    63d6:	e7f4      	b.n	63c2 <extint_chan_enable_callback+0x6>
    63d8:	40002400 	.word	0x40002400

000063dc <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    63dc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    63de:	2900      	cmp	r1, #0
    63e0:	d001      	beq.n	63e6 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    63e2:	0018      	movs	r0, r3
    63e4:	4770      	bx	lr
		return NULL;
    63e6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    63e8:	281f      	cmp	r0, #31
    63ea:	d800      	bhi.n	63ee <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    63ec:	4a02      	ldr	r2, [pc, #8]	; (63f8 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    63ee:	2301      	movs	r3, #1
    63f0:	4083      	lsls	r3, r0
    63f2:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    63f4:	2300      	movs	r3, #0
    63f6:	e7f4      	b.n	63e2 <extint_chan_disable_callback+0x6>
    63f8:	40002400 	.word	0x40002400

000063fc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    63fc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    63fe:	2200      	movs	r2, #0
    6400:	4b10      	ldr	r3, [pc, #64]	; (6444 <EIC_Handler+0x48>)
    6402:	701a      	strb	r2, [r3, #0]
    6404:	2300      	movs	r3, #0
    6406:	4910      	ldr	r1, [pc, #64]	; (6448 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    6408:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    640a:	4e10      	ldr	r6, [pc, #64]	; (644c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    640c:	4c0d      	ldr	r4, [pc, #52]	; (6444 <EIC_Handler+0x48>)
    640e:	e00a      	b.n	6426 <EIC_Handler+0x2a>
		return eics[eic_index];
    6410:	490d      	ldr	r1, [pc, #52]	; (6448 <EIC_Handler+0x4c>)
    6412:	e008      	b.n	6426 <EIC_Handler+0x2a>
    6414:	7823      	ldrb	r3, [r4, #0]
    6416:	3301      	adds	r3, #1
    6418:	b2db      	uxtb	r3, r3
    641a:	7023      	strb	r3, [r4, #0]
    641c:	2b0f      	cmp	r3, #15
    641e:	d810      	bhi.n	6442 <EIC_Handler+0x46>
		return NULL;
    6420:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    6422:	2b1f      	cmp	r3, #31
    6424:	d9f4      	bls.n	6410 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    6426:	0028      	movs	r0, r5
    6428:	4018      	ands	r0, r3
    642a:	2201      	movs	r2, #1
    642c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    642e:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    6430:	4210      	tst	r0, r2
    6432:	d0ef      	beq.n	6414 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    6434:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6436:	009b      	lsls	r3, r3, #2
    6438:	599b      	ldr	r3, [r3, r6]
    643a:	2b00      	cmp	r3, #0
    643c:	d0ea      	beq.n	6414 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    643e:	4798      	blx	r3
    6440:	e7e8      	b.n	6414 <EIC_Handler+0x18>
			}
		}
	}
}
    6442:	bd70      	pop	{r4, r5, r6, pc}
    6444:	20001cf4 	.word	0x20001cf4
    6448:	40002400 	.word	0x40002400
    644c:	20001cf8 	.word	0x20001cf8

00006450 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    6450:	4a06      	ldr	r2, [pc, #24]	; (646c <_extint_enable+0x1c>)
    6452:	7813      	ldrb	r3, [r2, #0]
    6454:	2102      	movs	r1, #2
    6456:	430b      	orrs	r3, r1
    6458:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    645a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    645c:	6853      	ldr	r3, [r2, #4]
    645e:	4219      	tst	r1, r3
    6460:	d1fc      	bne.n	645c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    6462:	6853      	ldr	r3, [r2, #4]
    6464:	4218      	tst	r0, r3
    6466:	d1f9      	bne.n	645c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6468:	4770      	bx	lr
    646a:	46c0      	nop			; (mov r8, r8)
    646c:	40002400 	.word	0x40002400

00006470 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6470:	4a06      	ldr	r2, [pc, #24]	; (648c <_extint_disable+0x1c>)
    6472:	7813      	ldrb	r3, [r2, #0]
    6474:	2102      	movs	r1, #2
    6476:	438b      	bics	r3, r1
    6478:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    647a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    647c:	6853      	ldr	r3, [r2, #4]
    647e:	4219      	tst	r1, r3
    6480:	d1fc      	bne.n	647c <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    6482:	6853      	ldr	r3, [r2, #4]
    6484:	4218      	tst	r0, r3
    6486:	d1f9      	bne.n	647c <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6488:	4770      	bx	lr
    648a:	46c0      	nop			; (mov r8, r8)
    648c:	40002400 	.word	0x40002400

00006490 <_system_extint_init>:
{
    6490:	b500      	push	{lr}
    6492:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    6494:	4a17      	ldr	r2, [pc, #92]	; (64f4 <_system_extint_init+0x64>)
    6496:	6951      	ldr	r1, [r2, #20]
    6498:	2380      	movs	r3, #128	; 0x80
    649a:	009b      	lsls	r3, r3, #2
    649c:	430b      	orrs	r3, r1
    649e:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    64a0:	a901      	add	r1, sp, #4
    64a2:	2300      	movs	r3, #0
    64a4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    64a6:	2003      	movs	r0, #3
    64a8:	4b13      	ldr	r3, [pc, #76]	; (64f8 <_system_extint_init+0x68>)
    64aa:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    64ac:	2003      	movs	r0, #3
    64ae:	4b13      	ldr	r3, [pc, #76]	; (64fc <_system_extint_init+0x6c>)
    64b0:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    64b2:	4a13      	ldr	r2, [pc, #76]	; (6500 <_system_extint_init+0x70>)
    64b4:	7813      	ldrb	r3, [r2, #0]
    64b6:	2101      	movs	r1, #1
    64b8:	430b      	orrs	r3, r1
    64ba:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    64bc:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    64be:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    64c0:	6853      	ldr	r3, [r2, #4]
    64c2:	4219      	tst	r1, r3
    64c4:	d1fc      	bne.n	64c0 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    64c6:	6853      	ldr	r3, [r2, #4]
    64c8:	4218      	tst	r0, r3
    64ca:	d1f9      	bne.n	64c0 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    64cc:	4a0c      	ldr	r2, [pc, #48]	; (6500 <_system_extint_init+0x70>)
    64ce:	7813      	ldrb	r3, [r2, #0]
    64d0:	2110      	movs	r1, #16
    64d2:	438b      	bics	r3, r1
    64d4:	7013      	strb	r3, [r2, #0]
    64d6:	4b0b      	ldr	r3, [pc, #44]	; (6504 <_system_extint_init+0x74>)
    64d8:	0019      	movs	r1, r3
    64da:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    64dc:	2200      	movs	r2, #0
    64de:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    64e0:	428b      	cmp	r3, r1
    64e2:	d1fc      	bne.n	64de <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    64e4:	2208      	movs	r2, #8
    64e6:	4b08      	ldr	r3, [pc, #32]	; (6508 <_system_extint_init+0x78>)
    64e8:	601a      	str	r2, [r3, #0]
	_extint_enable();
    64ea:	4b08      	ldr	r3, [pc, #32]	; (650c <_system_extint_init+0x7c>)
    64ec:	4798      	blx	r3
}
    64ee:	b003      	add	sp, #12
    64f0:	bd00      	pop	{pc}
    64f2:	46c0      	nop			; (mov r8, r8)
    64f4:	40000400 	.word	0x40000400
    64f8:	00007d25 	.word	0x00007d25
    64fc:	00007cb5 	.word	0x00007cb5
    6500:	40002400 	.word	0x40002400
    6504:	20001cf8 	.word	0x20001cf8
    6508:	e000e100 	.word	0xe000e100
    650c:	00006451 	.word	0x00006451

00006510 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    6510:	2300      	movs	r3, #0
    6512:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    6514:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6516:	2201      	movs	r2, #1
    6518:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    651a:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    651c:	3201      	adds	r2, #1
    651e:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    6520:	7243      	strb	r3, [r0, #9]
}
    6522:	4770      	bx	lr

00006524 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    6524:	b5f0      	push	{r4, r5, r6, r7, lr}
    6526:	b083      	sub	sp, #12
    6528:	0005      	movs	r5, r0
    652a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    652c:	4b1c      	ldr	r3, [pc, #112]	; (65a0 <extint_chan_set_config+0x7c>)
    652e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6530:	a901      	add	r1, sp, #4
    6532:	2300      	movs	r3, #0
    6534:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    6536:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    6538:	7923      	ldrb	r3, [r4, #4]
    653a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    653c:	7a23      	ldrb	r3, [r4, #8]
    653e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    6540:	7820      	ldrb	r0, [r4, #0]
    6542:	4b18      	ldr	r3, [pc, #96]	; (65a4 <extint_chan_set_config+0x80>)
    6544:	4798      	blx	r3
		return NULL;
    6546:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    6548:	2d1f      	cmp	r5, #31
    654a:	d800      	bhi.n	654e <extint_chan_set_config+0x2a>
		return eics[eic_index];
    654c:	4916      	ldr	r1, [pc, #88]	; (65a8 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    654e:	2207      	movs	r2, #7
    6550:	402a      	ands	r2, r5
    6552:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6554:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6556:	7aa3      	ldrb	r3, [r4, #10]
    6558:	2b00      	cmp	r3, #0
    655a:	d001      	beq.n	6560 <extint_chan_set_config+0x3c>
    655c:	2308      	movs	r3, #8
    655e:	431f      	orrs	r7, r3
    6560:	08eb      	lsrs	r3, r5, #3
    6562:	009b      	lsls	r3, r3, #2
    6564:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    6566:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6568:	260f      	movs	r6, #15
    656a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    656c:	43b0      	bics	r0, r6
			(new_config << config_pos);
    656e:	4097      	lsls	r7, r2
    6570:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6572:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    6574:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    6576:	7a63      	ldrb	r3, [r4, #9]
    6578:	2b00      	cmp	r3, #0
    657a:	d10b      	bne.n	6594 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    657c:	698a      	ldr	r2, [r1, #24]
    657e:	2301      	movs	r3, #1
    6580:	40ab      	lsls	r3, r5
    6582:	43db      	mvns	r3, r3
    6584:	041b      	lsls	r3, r3, #16
    6586:	0c1b      	lsrs	r3, r3, #16
    6588:	4013      	ands	r3, r2
    658a:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    658c:	4b07      	ldr	r3, [pc, #28]	; (65ac <extint_chan_set_config+0x88>)
    658e:	4798      	blx	r3
}
    6590:	b003      	add	sp, #12
    6592:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    6594:	698a      	ldr	r2, [r1, #24]
    6596:	2301      	movs	r3, #1
    6598:	40ab      	lsls	r3, r5
    659a:	4313      	orrs	r3, r2
    659c:	618b      	str	r3, [r1, #24]
    659e:	e7f5      	b.n	658c <extint_chan_set_config+0x68>
    65a0:	00006471 	.word	0x00006471
    65a4:	00007e21 	.word	0x00007e21
    65a8:	40002400 	.word	0x40002400
    65ac:	00006451 	.word	0x00006451

000065b0 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    65b0:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    65b2:	4a1e      	ldr	r2, [pc, #120]	; (662c <nvm_set_config+0x7c>)
    65b4:	6993      	ldr	r3, [r2, #24]
    65b6:	2104      	movs	r1, #4
    65b8:	430b      	orrs	r3, r1
    65ba:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    65bc:	4b1c      	ldr	r3, [pc, #112]	; (6630 <nvm_set_config+0x80>)
    65be:	2220      	movs	r2, #32
    65c0:	32ff      	adds	r2, #255	; 0xff
    65c2:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    65c4:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    65c6:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    65c8:	07d2      	lsls	r2, r2, #31
    65ca:	d401      	bmi.n	65d0 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    65cc:	0018      	movs	r0, r3
    65ce:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    65d0:	7803      	ldrb	r3, [r0, #0]
    65d2:	021b      	lsls	r3, r3, #8
    65d4:	22c0      	movs	r2, #192	; 0xc0
    65d6:	0092      	lsls	r2, r2, #2
    65d8:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    65da:	7841      	ldrb	r1, [r0, #1]
    65dc:	01c9      	lsls	r1, r1, #7
    65de:	22ff      	movs	r2, #255	; 0xff
    65e0:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    65e2:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    65e4:	7881      	ldrb	r1, [r0, #2]
    65e6:	0049      	lsls	r1, r1, #1
    65e8:	221e      	movs	r2, #30
    65ea:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    65ec:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    65ee:	78c2      	ldrb	r2, [r0, #3]
    65f0:	0492      	lsls	r2, r2, #18
    65f2:	2180      	movs	r1, #128	; 0x80
    65f4:	02c9      	lsls	r1, r1, #11
    65f6:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    65f8:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    65fa:	7902      	ldrb	r2, [r0, #4]
    65fc:	0412      	lsls	r2, r2, #16
    65fe:	21c0      	movs	r1, #192	; 0xc0
    6600:	0289      	lsls	r1, r1, #10
    6602:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    6604:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    6606:	4a0a      	ldr	r2, [pc, #40]	; (6630 <nvm_set_config+0x80>)
    6608:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    660a:	6893      	ldr	r3, [r2, #8]
    660c:	035b      	lsls	r3, r3, #13
    660e:	0f5b      	lsrs	r3, r3, #29
    6610:	4908      	ldr	r1, [pc, #32]	; (6634 <nvm_set_config+0x84>)
    6612:	2408      	movs	r4, #8
    6614:	409c      	lsls	r4, r3
    6616:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    6618:	6893      	ldr	r3, [r2, #8]
    661a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    661c:	7843      	ldrb	r3, [r0, #1]
    661e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    6620:	8b13      	ldrh	r3, [r2, #24]
    6622:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    6624:	0fdb      	lsrs	r3, r3, #31
    6626:	011b      	lsls	r3, r3, #4
    6628:	e7d0      	b.n	65cc <nvm_set_config+0x1c>
    662a:	46c0      	nop			; (mov r8, r8)
    662c:	40000400 	.word	0x40000400
    6630:	41004000 	.word	0x41004000
    6634:	200000c0 	.word	0x200000c0

00006638 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    6638:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    663a:	4a30      	ldr	r2, [pc, #192]	; (66fc <nvm_execute_command+0xc4>)
    663c:	8814      	ldrh	r4, [r2, #0]
    663e:	8853      	ldrh	r3, [r2, #2]
    6640:	4363      	muls	r3, r4
    6642:	428b      	cmp	r3, r1
    6644:	d20b      	bcs.n	665e <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    6646:	2280      	movs	r2, #128	; 0x80
    6648:	0192      	lsls	r2, r2, #6
    664a:	4b2d      	ldr	r3, [pc, #180]	; (6700 <nvm_execute_command+0xc8>)
    664c:	18cb      	adds	r3, r1, r3
    664e:	4293      	cmp	r3, r2
    6650:	d905      	bls.n	665e <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6652:	4c2c      	ldr	r4, [pc, #176]	; (6704 <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    6654:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6656:	4a2c      	ldr	r2, [pc, #176]	; (6708 <nvm_execute_command+0xd0>)
    6658:	188a      	adds	r2, r1, r2
    665a:	42a2      	cmp	r2, r4
    665c:	d80e      	bhi.n	667c <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    665e:	4b2b      	ldr	r3, [pc, #172]	; (670c <nvm_execute_command+0xd4>)
    6660:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    6662:	2280      	movs	r2, #128	; 0x80
    6664:	02d2      	lsls	r2, r2, #11
    6666:	4322      	orrs	r2, r4
    6668:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    666a:	2220      	movs	r2, #32
    666c:	32ff      	adds	r2, #255	; 0xff
    666e:	831a      	strh	r2, [r3, #24]
    6670:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    6672:	07db      	lsls	r3, r3, #31
    6674:	d404      	bmi.n	6680 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    6676:	4b25      	ldr	r3, [pc, #148]	; (670c <nvm_execute_command+0xd4>)
    6678:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
    667a:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    667c:	0018      	movs	r0, r3
    667e:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    6680:	2845      	cmp	r0, #69	; 0x45
    6682:	d829      	bhi.n	66d8 <nvm_execute_command+0xa0>
    6684:	0083      	lsls	r3, r0, #2
    6686:	4a22      	ldr	r2, [pc, #136]	; (6710 <nvm_execute_command+0xd8>)
    6688:	58d3      	ldr	r3, [r2, r3]
    668a:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    668c:	4b1f      	ldr	r3, [pc, #124]	; (670c <nvm_execute_command+0xd4>)
    668e:	8b1b      	ldrh	r3, [r3, #24]
    6690:	05db      	lsls	r3, r3, #23
    6692:	d503      	bpl.n	669c <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    6694:	4b1d      	ldr	r3, [pc, #116]	; (670c <nvm_execute_command+0xd4>)
    6696:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
    6698:	2310      	movs	r3, #16
    669a:	e7ef      	b.n	667c <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    669c:	0889      	lsrs	r1, r1, #2
    669e:	0049      	lsls	r1, r1, #1
    66a0:	4b1a      	ldr	r3, [pc, #104]	; (670c <nvm_execute_command+0xd4>)
    66a2:	61d9      	str	r1, [r3, #28]
			break;
    66a4:	e003      	b.n	66ae <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    66a6:	0889      	lsrs	r1, r1, #2
    66a8:	0049      	lsls	r1, r1, #1
    66aa:	4b18      	ldr	r3, [pc, #96]	; (670c <nvm_execute_command+0xd4>)
    66ac:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    66ae:	23fd      	movs	r3, #253	; 0xfd
    66b0:	0005      	movs	r5, r0
    66b2:	3d1a      	subs	r5, #26
    66b4:	401d      	ands	r5, r3
    66b6:	d013      	beq.n	66e0 <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    66b8:	23a5      	movs	r3, #165	; 0xa5
    66ba:	021b      	lsls	r3, r3, #8
    66bc:	4318      	orrs	r0, r3
    66be:	4b13      	ldr	r3, [pc, #76]	; (670c <nvm_execute_command+0xd4>)
    66c0:	8018      	strh	r0, [r3, #0]
    66c2:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    66c4:	2201      	movs	r2, #1
    66c6:	7d0b      	ldrb	r3, [r1, #20]
    66c8:	4213      	tst	r3, r2
    66ca:	d0fc      	beq.n	66c6 <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    66cc:	2d00      	cmp	r5, #0
    66ce:	d00f      	beq.n	66f0 <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
    66d0:	4b0e      	ldr	r3, [pc, #56]	; (670c <nvm_execute_command+0xd4>)
    66d2:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
    66d4:	2300      	movs	r3, #0
    66d6:	e7d1      	b.n	667c <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
    66d8:	4b0c      	ldr	r3, [pc, #48]	; (670c <nvm_execute_command+0xd4>)
    66da:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    66dc:	2317      	movs	r3, #23
    66de:	e7cd      	b.n	667c <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    66e0:	4b0a      	ldr	r3, [pc, #40]	; (670c <nvm_execute_command+0xd4>)
    66e2:	6859      	ldr	r1, [r3, #4]
    66e4:	2280      	movs	r2, #128	; 0x80
    66e6:	02d2      	lsls	r2, r2, #11
    66e8:	430a      	orrs	r2, r1
    66ea:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    66ec:	685b      	ldr	r3, [r3, #4]
    66ee:	e7e3      	b.n	66b8 <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    66f0:	4a06      	ldr	r2, [pc, #24]	; (670c <nvm_execute_command+0xd4>)
    66f2:	6853      	ldr	r3, [r2, #4]
    66f4:	4907      	ldr	r1, [pc, #28]	; (6714 <nvm_execute_command+0xdc>)
    66f6:	400b      	ands	r3, r1
    66f8:	6053      	str	r3, [r2, #4]
    66fa:	e7e9      	b.n	66d0 <nvm_execute_command+0x98>
    66fc:	200000c0 	.word	0x200000c0
    6700:	ff7fc000 	.word	0xff7fc000
    6704:	00001fff 	.word	0x00001fff
    6708:	ffc00000 	.word	0xffc00000
    670c:	41004000 	.word	0x41004000
    6710:	00011c04 	.word	0x00011c04
    6714:	fffbffff 	.word	0xfffbffff

00006718 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    6718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    671a:	4b2f      	ldr	r3, [pc, #188]	; (67d8 <nvm_write_buffer+0xc0>)
    671c:	881c      	ldrh	r4, [r3, #0]
    671e:	885b      	ldrh	r3, [r3, #2]
    6720:	4363      	muls	r3, r4
	if (destination_address >
    6722:	4283      	cmp	r3, r0
    6724:	d207      	bcs.n	6736 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6726:	4e2d      	ldr	r6, [pc, #180]	; (67dc <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    6728:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    672a:	4b2d      	ldr	r3, [pc, #180]	; (67e0 <nvm_write_buffer+0xc8>)
    672c:	18c3      	adds	r3, r0, r3
    672e:	42b3      	cmp	r3, r6
    6730:	d806      	bhi.n	6740 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    6732:	2601      	movs	r6, #1
    6734:	e000      	b.n	6738 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    6736:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    6738:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    673a:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    673c:	4218      	tst	r0, r3
    673e:	d001      	beq.n	6744 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    6740:	0028      	movs	r0, r5
    6742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    6744:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    6746:	4294      	cmp	r4, r2
    6748:	d3fa      	bcc.n	6740 <nvm_write_buffer+0x28>
    674a:	4b26      	ldr	r3, [pc, #152]	; (67e4 <nvm_write_buffer+0xcc>)
    674c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    674e:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    6750:	07db      	lsls	r3, r3, #31
    6752:	d5f5      	bpl.n	6740 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    6754:	4c24      	ldr	r4, [pc, #144]	; (67e8 <nvm_write_buffer+0xd0>)
    6756:	4b23      	ldr	r3, [pc, #140]	; (67e4 <nvm_write_buffer+0xcc>)
    6758:	801c      	strh	r4, [r3, #0]
    675a:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    675c:	2401      	movs	r4, #1
    675e:	7d2b      	ldrb	r3, [r5, #20]
    6760:	4223      	tst	r3, r4
    6762:	d0fc      	beq.n	675e <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6764:	2420      	movs	r4, #32
    6766:	34ff      	adds	r4, #255	; 0xff
    6768:	4b1e      	ldr	r3, [pc, #120]	; (67e4 <nvm_write_buffer+0xcc>)
    676a:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    676c:	2a00      	cmp	r2, #0
    676e:	d02c      	beq.n	67ca <nvm_write_buffer+0xb2>
    6770:	2301      	movs	r3, #1
    6772:	0005      	movs	r5, r0
    6774:	439d      	bics	r5, r3
    6776:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    6778:	1e54      	subs	r4, r2, #1
    677a:	46a4      	mov	ip, r4
    677c:	e009      	b.n	6792 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    677e:	18cf      	adds	r7, r1, r3
    6780:	787f      	ldrb	r7, [r7, #1]
    6782:	023f      	lsls	r7, r7, #8
    6784:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    6786:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    6788:	3302      	adds	r3, #2
    678a:	b29b      	uxth	r3, r3
    678c:	3502      	adds	r5, #2
    678e:	429a      	cmp	r2, r3
    6790:	d904      	bls.n	679c <nvm_write_buffer+0x84>
		data = buffer[i];
    6792:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    6794:	4563      	cmp	r3, ip
    6796:	dbf2      	blt.n	677e <nvm_write_buffer+0x66>
		data = buffer[i];
    6798:	b2a4      	uxth	r4, r4
    679a:	e7f4      	b.n	6786 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    679c:	4b0e      	ldr	r3, [pc, #56]	; (67d8 <nvm_write_buffer+0xc0>)
    679e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    67a0:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    67a2:	2b00      	cmp	r3, #0
    67a4:	d1cc      	bne.n	6740 <nvm_write_buffer+0x28>
    67a6:	2a3f      	cmp	r2, #63	; 0x3f
    67a8:	d8ca      	bhi.n	6740 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    67aa:	2e00      	cmp	r6, #0
    67ac:	d106      	bne.n	67bc <nvm_write_buffer+0xa4>
    67ae:	2200      	movs	r2, #0
    67b0:	0001      	movs	r1, r0
    67b2:	2004      	movs	r0, #4
    67b4:	4b0d      	ldr	r3, [pc, #52]	; (67ec <nvm_write_buffer+0xd4>)
    67b6:	4798      	blx	r3
    67b8:	0005      	movs	r5, r0
    67ba:	e7c1      	b.n	6740 <nvm_write_buffer+0x28>
    67bc:	2200      	movs	r2, #0
    67be:	0001      	movs	r1, r0
    67c0:	201c      	movs	r0, #28
    67c2:	4b0a      	ldr	r3, [pc, #40]	; (67ec <nvm_write_buffer+0xd4>)
    67c4:	4798      	blx	r3
    67c6:	0005      	movs	r5, r0
    67c8:	e7ba      	b.n	6740 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    67ca:	4b03      	ldr	r3, [pc, #12]	; (67d8 <nvm_write_buffer+0xc0>)
    67cc:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    67ce:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    67d0:	2b00      	cmp	r3, #0
    67d2:	d0ea      	beq.n	67aa <nvm_write_buffer+0x92>
    67d4:	e7b4      	b.n	6740 <nvm_write_buffer+0x28>
    67d6:	46c0      	nop			; (mov r8, r8)
    67d8:	200000c0 	.word	0x200000c0
    67dc:	00001fff 	.word	0x00001fff
    67e0:	ffc00000 	.word	0xffc00000
    67e4:	41004000 	.word	0x41004000
    67e8:	ffffa544 	.word	0xffffa544
    67ec:	00006639 	.word	0x00006639

000067f0 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    67f0:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    67f2:	4a22      	ldr	r2, [pc, #136]	; (687c <nvm_erase_row+0x8c>)
    67f4:	8813      	ldrh	r3, [r2, #0]
    67f6:	8852      	ldrh	r2, [r2, #2]
    67f8:	435a      	muls	r2, r3
	if (row_address >
    67fa:	4282      	cmp	r2, r0
    67fc:	d207      	bcs.n	680e <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    67fe:	4c20      	ldr	r4, [pc, #128]	; (6880 <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    6800:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6802:	4920      	ldr	r1, [pc, #128]	; (6884 <nvm_erase_row+0x94>)
    6804:	1841      	adds	r1, r0, r1
    6806:	42a1      	cmp	r1, r4
    6808:	d807      	bhi.n	681a <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    680a:	2401      	movs	r4, #1
    680c:	e000      	b.n	6810 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    680e:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    6810:	009b      	lsls	r3, r3, #2
    6812:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    6814:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    6816:	4218      	tst	r0, r3
    6818:	d001      	beq.n	681e <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    681a:	0010      	movs	r0, r2
    681c:	bd10      	pop	{r4, pc}
    681e:	4b1a      	ldr	r3, [pc, #104]	; (6888 <nvm_erase_row+0x98>)
    6820:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    6822:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    6824:	07db      	lsls	r3, r3, #31
    6826:	d5f8      	bpl.n	681a <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6828:	4b17      	ldr	r3, [pc, #92]	; (6888 <nvm_erase_row+0x98>)
    682a:	2220      	movs	r2, #32
    682c:	32ff      	adds	r2, #255	; 0xff
    682e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    6830:	0880      	lsrs	r0, r0, #2
    6832:	0040      	lsls	r0, r0, #1
    6834:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
    6836:	2c00      	cmp	r4, #0
    6838:	d01b      	beq.n	6872 <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    683a:	6859      	ldr	r1, [r3, #4]
    683c:	2280      	movs	r2, #128	; 0x80
    683e:	02d2      	lsls	r2, r2, #11
    6840:	430a      	orrs	r2, r1
    6842:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    6844:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    6846:	4a11      	ldr	r2, [pc, #68]	; (688c <nvm_erase_row+0x9c>)
    6848:	801a      	strh	r2, [r3, #0]
    684a:	490f      	ldr	r1, [pc, #60]	; (6888 <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
    684c:	2201      	movs	r2, #1
    684e:	7d0b      	ldrb	r3, [r1, #20]
    6850:	4213      	tst	r3, r2
    6852:	d0fc      	beq.n	684e <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
    6854:	2c00      	cmp	r4, #0
    6856:	d004      	beq.n	6862 <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    6858:	4a0b      	ldr	r2, [pc, #44]	; (6888 <nvm_erase_row+0x98>)
    685a:	6853      	ldr	r3, [r2, #4]
    685c:	490c      	ldr	r1, [pc, #48]	; (6890 <nvm_erase_row+0xa0>)
    685e:	400b      	ands	r3, r1
    6860:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    6862:	4b09      	ldr	r3, [pc, #36]	; (6888 <nvm_erase_row+0x98>)
    6864:	8b1a      	ldrh	r2, [r3, #24]
    6866:	201c      	movs	r0, #28
    6868:	4002      	ands	r2, r0
	return STATUS_OK;
    686a:	1e50      	subs	r0, r2, #1
    686c:	4182      	sbcs	r2, r0
    686e:	0092      	lsls	r2, r2, #2
    6870:	e7d3      	b.n	681a <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    6872:	4a08      	ldr	r2, [pc, #32]	; (6894 <nvm_erase_row+0xa4>)
    6874:	4b04      	ldr	r3, [pc, #16]	; (6888 <nvm_erase_row+0x98>)
    6876:	801a      	strh	r2, [r3, #0]
    6878:	e7e7      	b.n	684a <nvm_erase_row+0x5a>
    687a:	46c0      	nop			; (mov r8, r8)
    687c:	200000c0 	.word	0x200000c0
    6880:	00001fff 	.word	0x00001fff
    6884:	ffc00000 	.word	0xffc00000
    6888:	41004000 	.word	0x41004000
    688c:	ffffa51a 	.word	0xffffa51a
    6890:	fffbffff 	.word	0xfffbffff
    6894:	ffffa502 	.word	0xffffa502

00006898 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6898:	b500      	push	{lr}
    689a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    689c:	ab01      	add	r3, sp, #4
    689e:	2280      	movs	r2, #128	; 0x80
    68a0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    68a2:	780a      	ldrb	r2, [r1, #0]
    68a4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    68a6:	784a      	ldrb	r2, [r1, #1]
    68a8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    68aa:	788a      	ldrb	r2, [r1, #2]
    68ac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    68ae:	0019      	movs	r1, r3
    68b0:	4b01      	ldr	r3, [pc, #4]	; (68b8 <port_pin_set_config+0x20>)
    68b2:	4798      	blx	r3
}
    68b4:	b003      	add	sp, #12
    68b6:	bd00      	pop	{pc}
    68b8:	00007e21 	.word	0x00007e21

000068bc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    68bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68be:	46de      	mov	lr, fp
    68c0:	4657      	mov	r7, sl
    68c2:	464e      	mov	r6, r9
    68c4:	4645      	mov	r5, r8
    68c6:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    68c8:	4b2b      	ldr	r3, [pc, #172]	; (6978 <RTC_Handler+0xbc>)
    68ca:	681b      	ldr	r3, [r3, #0]
    68cc:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    68ce:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    68d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    68d2:	4652      	mov	r2, sl
    68d4:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    68d6:	401a      	ands	r2, r3
    68d8:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    68da:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    68dc:	8973      	ldrh	r3, [r6, #10]
    68de:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    68e0:	b21a      	sxth	r2, r3
    68e2:	2a00      	cmp	r2, #0
    68e4:	db08      	blt.n	68f8 <RTC_Handler+0x3c>
    68e6:	27ff      	movs	r7, #255	; 0xff
    68e8:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    68ea:	d02a      	beq.n	6942 <RTC_Handler+0x86>
    68ec:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    68ee:	2301      	movs	r3, #1
    68f0:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    68f2:	33fe      	adds	r3, #254	; 0xfe
    68f4:	469b      	mov	fp, r3
    68f6:	e014      	b.n	6922 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    68f8:	4643      	mov	r3, r8
    68fa:	055b      	lsls	r3, r3, #21
    68fc:	d407      	bmi.n	690e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    68fe:	4b1f      	ldr	r3, [pc, #124]	; (697c <RTC_Handler+0xc0>)
    6900:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    6902:	bc3c      	pop	{r2, r3, r4, r5}
    6904:	4690      	mov	r8, r2
    6906:	4699      	mov	r9, r3
    6908:	46a2      	mov	sl, r4
    690a:	46ab      	mov	fp, r5
    690c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    690e:	4653      	mov	r3, sl
    6910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6912:	4798      	blx	r3
    6914:	e7f3      	b.n	68fe <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    6916:	465b      	mov	r3, fp
    6918:	401d      	ands	r5, r3
    691a:	81b5      	strh	r5, [r6, #12]
    691c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    691e:	2c08      	cmp	r4, #8
    6920:	d0ef      	beq.n	6902 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    6922:	0023      	movs	r3, r4
    6924:	464d      	mov	r5, r9
    6926:	40a5      	lsls	r5, r4
    6928:	422f      	tst	r7, r5
    692a:	d0f4      	beq.n	6916 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    692c:	4642      	mov	r2, r8
    692e:	4122      	asrs	r2, r4
    6930:	4649      	mov	r1, r9
    6932:	4211      	tst	r1, r2
    6934:	d0ef      	beq.n	6916 <RTC_Handler+0x5a>
				module->callbacks[i]();
    6936:	3302      	adds	r3, #2
    6938:	009b      	lsls	r3, r3, #2
    693a:	4652      	mov	r2, sl
    693c:	589b      	ldr	r3, [r3, r2]
    693e:	4798      	blx	r3
    6940:	e7e9      	b.n	6916 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    6942:	05da      	lsls	r2, r3, #23
    6944:	d50a      	bpl.n	695c <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    6946:	4643      	mov	r3, r8
    6948:	05db      	lsls	r3, r3, #23
    694a:	d403      	bmi.n	6954 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    694c:	2380      	movs	r3, #128	; 0x80
    694e:	005b      	lsls	r3, r3, #1
    6950:	81b3      	strh	r3, [r6, #12]
    6952:	e7d6      	b.n	6902 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    6954:	4653      	mov	r3, sl
    6956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6958:	4798      	blx	r3
    695a:	e7f7      	b.n	694c <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    695c:	059b      	lsls	r3, r3, #22
    695e:	d5d0      	bpl.n	6902 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    6960:	4643      	mov	r3, r8
    6962:	059b      	lsls	r3, r3, #22
    6964:	d403      	bmi.n	696e <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    6966:	2380      	movs	r3, #128	; 0x80
    6968:	009b      	lsls	r3, r3, #2
    696a:	81b3      	strh	r3, [r6, #12]
}
    696c:	e7c9      	b.n	6902 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    696e:	4653      	mov	r3, sl
    6970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6972:	4798      	blx	r3
    6974:	e7f7      	b.n	6966 <RTC_Handler+0xaa>
    6976:	46c0      	nop			; (mov r8, r8)
    6978:	20001d38 	.word	0x20001d38
    697c:	ffff8000 	.word	0xffff8000

00006980 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    6980:	b5f0      	push	{r4, r5, r6, r7, lr}
    6982:	46de      	mov	lr, fp
    6984:	4657      	mov	r7, sl
    6986:	464e      	mov	r6, r9
    6988:	4645      	mov	r5, r8
    698a:	b5e0      	push	{r5, r6, r7, lr}
    698c:	b087      	sub	sp, #28
    698e:	4680      	mov	r8, r0
    6990:	9104      	str	r1, [sp, #16]
    6992:	0016      	movs	r6, r2
    6994:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    6996:	2200      	movs	r2, #0
    6998:	2300      	movs	r3, #0
    699a:	2100      	movs	r1, #0
    699c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    699e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    69a0:	2001      	movs	r0, #1
    69a2:	0021      	movs	r1, r4
    69a4:	9600      	str	r6, [sp, #0]
    69a6:	9701      	str	r7, [sp, #4]
    69a8:	465c      	mov	r4, fp
    69aa:	9403      	str	r4, [sp, #12]
    69ac:	4644      	mov	r4, r8
    69ae:	9405      	str	r4, [sp, #20]
    69b0:	e013      	b.n	69da <long_division+0x5a>
    69b2:	2420      	movs	r4, #32
    69b4:	1a64      	subs	r4, r4, r1
    69b6:	0005      	movs	r5, r0
    69b8:	40e5      	lsrs	r5, r4
    69ba:	46a8      	mov	r8, r5
    69bc:	e014      	b.n	69e8 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    69be:	9c00      	ldr	r4, [sp, #0]
    69c0:	9d01      	ldr	r5, [sp, #4]
    69c2:	1b12      	subs	r2, r2, r4
    69c4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    69c6:	465c      	mov	r4, fp
    69c8:	464d      	mov	r5, r9
    69ca:	432c      	orrs	r4, r5
    69cc:	46a3      	mov	fp, r4
    69ce:	9c03      	ldr	r4, [sp, #12]
    69d0:	4645      	mov	r5, r8
    69d2:	432c      	orrs	r4, r5
    69d4:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    69d6:	3901      	subs	r1, #1
    69d8:	d325      	bcc.n	6a26 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    69da:	2420      	movs	r4, #32
    69dc:	4264      	negs	r4, r4
    69de:	190c      	adds	r4, r1, r4
    69e0:	d4e7      	bmi.n	69b2 <long_division+0x32>
    69e2:	0005      	movs	r5, r0
    69e4:	40a5      	lsls	r5, r4
    69e6:	46a8      	mov	r8, r5
    69e8:	0004      	movs	r4, r0
    69ea:	408c      	lsls	r4, r1
    69ec:	46a1      	mov	r9, r4
		r = r << 1;
    69ee:	1892      	adds	r2, r2, r2
    69f0:	415b      	adcs	r3, r3
    69f2:	0014      	movs	r4, r2
    69f4:	001d      	movs	r5, r3
		if (n & bit_shift) {
    69f6:	9e05      	ldr	r6, [sp, #20]
    69f8:	464f      	mov	r7, r9
    69fa:	403e      	ands	r6, r7
    69fc:	46b4      	mov	ip, r6
    69fe:	9e04      	ldr	r6, [sp, #16]
    6a00:	4647      	mov	r7, r8
    6a02:	403e      	ands	r6, r7
    6a04:	46b2      	mov	sl, r6
    6a06:	4666      	mov	r6, ip
    6a08:	4657      	mov	r7, sl
    6a0a:	433e      	orrs	r6, r7
    6a0c:	d003      	beq.n	6a16 <long_division+0x96>
			r |= 0x01;
    6a0e:	0006      	movs	r6, r0
    6a10:	4326      	orrs	r6, r4
    6a12:	0032      	movs	r2, r6
    6a14:	002b      	movs	r3, r5
		if (r >= d) {
    6a16:	9c00      	ldr	r4, [sp, #0]
    6a18:	9d01      	ldr	r5, [sp, #4]
    6a1a:	429d      	cmp	r5, r3
    6a1c:	d8db      	bhi.n	69d6 <long_division+0x56>
    6a1e:	d1ce      	bne.n	69be <long_division+0x3e>
    6a20:	4294      	cmp	r4, r2
    6a22:	d8d8      	bhi.n	69d6 <long_division+0x56>
    6a24:	e7cb      	b.n	69be <long_division+0x3e>
    6a26:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    6a28:	4658      	mov	r0, fp
    6a2a:	0019      	movs	r1, r3
    6a2c:	b007      	add	sp, #28
    6a2e:	bc3c      	pop	{r2, r3, r4, r5}
    6a30:	4690      	mov	r8, r2
    6a32:	4699      	mov	r9, r3
    6a34:	46a2      	mov	sl, r4
    6a36:	46ab      	mov	fp, r5
    6a38:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006a3a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6a3a:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6a3c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6a3e:	2340      	movs	r3, #64	; 0x40
    6a40:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    6a42:	4281      	cmp	r1, r0
    6a44:	d202      	bcs.n	6a4c <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    6a46:	0018      	movs	r0, r3
    6a48:	bd10      	pop	{r4, pc}
		baud_calculated++;
    6a4a:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    6a4c:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    6a4e:	1c63      	adds	r3, r4, #1
    6a50:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    6a52:	4288      	cmp	r0, r1
    6a54:	d9f9      	bls.n	6a4a <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6a56:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    6a58:	2cff      	cmp	r4, #255	; 0xff
    6a5a:	d8f4      	bhi.n	6a46 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    6a5c:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    6a5e:	2300      	movs	r3, #0
    6a60:	e7f1      	b.n	6a46 <_sercom_get_sync_baud_val+0xc>
    6a62:	Address 0x00006a62 is out of bounds.


00006a64 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    6a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a66:	b083      	sub	sp, #12
    6a68:	000f      	movs	r7, r1
    6a6a:	0016      	movs	r6, r2
    6a6c:	aa08      	add	r2, sp, #32
    6a6e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    6a70:	0004      	movs	r4, r0
    6a72:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6a74:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    6a76:	42bc      	cmp	r4, r7
    6a78:	d902      	bls.n	6a80 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    6a7a:	0010      	movs	r0, r2
    6a7c:	b003      	add	sp, #12
    6a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6a80:	2b00      	cmp	r3, #0
    6a82:	d114      	bne.n	6aae <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6a84:	0002      	movs	r2, r0
    6a86:	0008      	movs	r0, r1
    6a88:	2100      	movs	r1, #0
    6a8a:	4c19      	ldr	r4, [pc, #100]	; (6af0 <_sercom_get_async_baud_val+0x8c>)
    6a8c:	47a0      	blx	r4
    6a8e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    6a90:	003a      	movs	r2, r7
    6a92:	2300      	movs	r3, #0
    6a94:	2000      	movs	r0, #0
    6a96:	4c17      	ldr	r4, [pc, #92]	; (6af4 <_sercom_get_async_baud_val+0x90>)
    6a98:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    6a9a:	2200      	movs	r2, #0
    6a9c:	2301      	movs	r3, #1
    6a9e:	1a12      	subs	r2, r2, r0
    6aa0:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    6aa2:	0c12      	lsrs	r2, r2, #16
    6aa4:	041b      	lsls	r3, r3, #16
    6aa6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    6aa8:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    6aaa:	2200      	movs	r2, #0
    6aac:	e7e5      	b.n	6a7a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    6aae:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    6ab0:	2b01      	cmp	r3, #1
    6ab2:	d1f9      	bne.n	6aa8 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    6ab4:	000a      	movs	r2, r1
    6ab6:	2300      	movs	r3, #0
    6ab8:	2100      	movs	r1, #0
    6aba:	4c0d      	ldr	r4, [pc, #52]	; (6af0 <_sercom_get_async_baud_val+0x8c>)
    6abc:	47a0      	blx	r4
    6abe:	0002      	movs	r2, r0
    6ac0:	000b      	movs	r3, r1
    6ac2:	9200      	str	r2, [sp, #0]
    6ac4:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    6ac6:	0038      	movs	r0, r7
    6ac8:	2100      	movs	r1, #0
    6aca:	4c0a      	ldr	r4, [pc, #40]	; (6af4 <_sercom_get_async_baud_val+0x90>)
    6acc:	47a0      	blx	r4
    6ace:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    6ad0:	2380      	movs	r3, #128	; 0x80
    6ad2:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6ad4:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    6ad6:	4298      	cmp	r0, r3
    6ad8:	d8cf      	bhi.n	6a7a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    6ada:	0f79      	lsrs	r1, r7, #29
    6adc:	00f8      	lsls	r0, r7, #3
    6ade:	9a00      	ldr	r2, [sp, #0]
    6ae0:	9b01      	ldr	r3, [sp, #4]
    6ae2:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    6ae4:	00ea      	lsls	r2, r5, #3
    6ae6:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    6ae8:	b2d2      	uxtb	r2, r2
    6aea:	0352      	lsls	r2, r2, #13
    6aec:	432a      	orrs	r2, r5
    6aee:	e7db      	b.n	6aa8 <_sercom_get_async_baud_val+0x44>
    6af0:	0000fe0d 	.word	0x0000fe0d
    6af4:	00006981 	.word	0x00006981

00006af8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6af8:	b510      	push	{r4, lr}
    6afa:	b082      	sub	sp, #8
    6afc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6afe:	4b0e      	ldr	r3, [pc, #56]	; (6b38 <sercom_set_gclk_generator+0x40>)
    6b00:	781b      	ldrb	r3, [r3, #0]
    6b02:	2b00      	cmp	r3, #0
    6b04:	d007      	beq.n	6b16 <sercom_set_gclk_generator+0x1e>
    6b06:	2900      	cmp	r1, #0
    6b08:	d105      	bne.n	6b16 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    6b0a:	4b0b      	ldr	r3, [pc, #44]	; (6b38 <sercom_set_gclk_generator+0x40>)
    6b0c:	785b      	ldrb	r3, [r3, #1]
    6b0e:	4283      	cmp	r3, r0
    6b10:	d010      	beq.n	6b34 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    6b12:	201d      	movs	r0, #29
    6b14:	e00c      	b.n	6b30 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    6b16:	a901      	add	r1, sp, #4
    6b18:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6b1a:	2011      	movs	r0, #17
    6b1c:	4b07      	ldr	r3, [pc, #28]	; (6b3c <sercom_set_gclk_generator+0x44>)
    6b1e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6b20:	2011      	movs	r0, #17
    6b22:	4b07      	ldr	r3, [pc, #28]	; (6b40 <sercom_set_gclk_generator+0x48>)
    6b24:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    6b26:	4b04      	ldr	r3, [pc, #16]	; (6b38 <sercom_set_gclk_generator+0x40>)
    6b28:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    6b2a:	2201      	movs	r2, #1
    6b2c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    6b2e:	2000      	movs	r0, #0
}
    6b30:	b002      	add	sp, #8
    6b32:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    6b34:	2000      	movs	r0, #0
    6b36:	e7fb      	b.n	6b30 <sercom_set_gclk_generator+0x38>
    6b38:	200000c8 	.word	0x200000c8
    6b3c:	00007d25 	.word	0x00007d25
    6b40:	00007cb5 	.word	0x00007cb5

00006b44 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    6b44:	4b2c      	ldr	r3, [pc, #176]	; (6bf8 <_sercom_get_default_pad+0xb4>)
    6b46:	4298      	cmp	r0, r3
    6b48:	d026      	beq.n	6b98 <_sercom_get_default_pad+0x54>
    6b4a:	d90a      	bls.n	6b62 <_sercom_get_default_pad+0x1e>
    6b4c:	4b2b      	ldr	r3, [pc, #172]	; (6bfc <_sercom_get_default_pad+0xb8>)
    6b4e:	4298      	cmp	r0, r3
    6b50:	d03a      	beq.n	6bc8 <_sercom_get_default_pad+0x84>
    6b52:	4b2b      	ldr	r3, [pc, #172]	; (6c00 <_sercom_get_default_pad+0xbc>)
    6b54:	4298      	cmp	r0, r3
    6b56:	d041      	beq.n	6bdc <_sercom_get_default_pad+0x98>
    6b58:	4b2a      	ldr	r3, [pc, #168]	; (6c04 <_sercom_get_default_pad+0xc0>)
    6b5a:	4298      	cmp	r0, r3
    6b5c:	d024      	beq.n	6ba8 <_sercom_get_default_pad+0x64>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    6b5e:	2000      	movs	r0, #0
}
    6b60:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    6b62:	2384      	movs	r3, #132	; 0x84
    6b64:	05db      	lsls	r3, r3, #23
    6b66:	4298      	cmp	r0, r3
    6b68:	d008      	beq.n	6b7c <_sercom_get_default_pad+0x38>
    6b6a:	4b27      	ldr	r3, [pc, #156]	; (6c08 <_sercom_get_default_pad+0xc4>)
    6b6c:	4298      	cmp	r0, r3
    6b6e:	d1f6      	bne.n	6b5e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6b70:	2902      	cmp	r1, #2
    6b72:	d00d      	beq.n	6b90 <_sercom_get_default_pad+0x4c>
    6b74:	2903      	cmp	r1, #3
    6b76:	d00d      	beq.n	6b94 <_sercom_get_default_pad+0x50>
    6b78:	2000      	movs	r0, #0
    6b7a:	e7f1      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6b7c:	2902      	cmp	r1, #2
    6b7e:	d003      	beq.n	6b88 <_sercom_get_default_pad+0x44>
    6b80:	2903      	cmp	r1, #3
    6b82:	d003      	beq.n	6b8c <_sercom_get_default_pad+0x48>
    6b84:	2000      	movs	r0, #0
    6b86:	e7eb      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6b88:	4820      	ldr	r0, [pc, #128]	; (6c0c <_sercom_get_default_pad+0xc8>)
    6b8a:	e7e9      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6b8c:	4820      	ldr	r0, [pc, #128]	; (6c10 <_sercom_get_default_pad+0xcc>)
    6b8e:	e7e7      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6b90:	4820      	ldr	r0, [pc, #128]	; (6c14 <_sercom_get_default_pad+0xd0>)
    6b92:	e7e5      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6b94:	4820      	ldr	r0, [pc, #128]	; (6c18 <_sercom_get_default_pad+0xd4>)
    6b96:	e7e3      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6b98:	2901      	cmp	r1, #1
    6b9a:	d003      	beq.n	6ba4 <_sercom_get_default_pad+0x60>
    6b9c:	2900      	cmp	r1, #0
    6b9e:	d027      	beq.n	6bf0 <_sercom_get_default_pad+0xac>
    6ba0:	2000      	movs	r0, #0
    6ba2:	e7dd      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6ba4:	481d      	ldr	r0, [pc, #116]	; (6c1c <_sercom_get_default_pad+0xd8>)
    6ba6:	e7db      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6ba8:	2901      	cmp	r1, #1
    6baa:	d007      	beq.n	6bbc <_sercom_get_default_pad+0x78>
    6bac:	2900      	cmp	r1, #0
    6bae:	d021      	beq.n	6bf4 <_sercom_get_default_pad+0xb0>
    6bb0:	2902      	cmp	r1, #2
    6bb2:	d005      	beq.n	6bc0 <_sercom_get_default_pad+0x7c>
    6bb4:	2903      	cmp	r1, #3
    6bb6:	d005      	beq.n	6bc4 <_sercom_get_default_pad+0x80>
	return 0;
    6bb8:	2000      	movs	r0, #0
    6bba:	e7d1      	b.n	6b60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6bbc:	4818      	ldr	r0, [pc, #96]	; (6c20 <_sercom_get_default_pad+0xdc>)
    6bbe:	e7cf      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6bc0:	4818      	ldr	r0, [pc, #96]	; (6c24 <_sercom_get_default_pad+0xe0>)
    6bc2:	e7cd      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6bc4:	4818      	ldr	r0, [pc, #96]	; (6c28 <_sercom_get_default_pad+0xe4>)
    6bc6:	e7cb      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6bc8:	2902      	cmp	r1, #2
    6bca:	d003      	beq.n	6bd4 <_sercom_get_default_pad+0x90>
    6bcc:	2903      	cmp	r1, #3
    6bce:	d003      	beq.n	6bd8 <_sercom_get_default_pad+0x94>
    6bd0:	2000      	movs	r0, #0
    6bd2:	e7c5      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6bd4:	4815      	ldr	r0, [pc, #84]	; (6c2c <_sercom_get_default_pad+0xe8>)
    6bd6:	e7c3      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6bd8:	4815      	ldr	r0, [pc, #84]	; (6c30 <_sercom_get_default_pad+0xec>)
    6bda:	e7c1      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6bdc:	2902      	cmp	r1, #2
    6bde:	d003      	beq.n	6be8 <_sercom_get_default_pad+0xa4>
    6be0:	2903      	cmp	r1, #3
    6be2:	d003      	beq.n	6bec <_sercom_get_default_pad+0xa8>
    6be4:	2000      	movs	r0, #0
    6be6:	e7bb      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6be8:	4812      	ldr	r0, [pc, #72]	; (6c34 <_sercom_get_default_pad+0xf0>)
    6bea:	e7b9      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6bec:	4812      	ldr	r0, [pc, #72]	; (6c38 <_sercom_get_default_pad+0xf4>)
    6bee:	e7b7      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6bf0:	4812      	ldr	r0, [pc, #72]	; (6c3c <_sercom_get_default_pad+0xf8>)
    6bf2:	e7b5      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6bf4:	4812      	ldr	r0, [pc, #72]	; (6c40 <_sercom_get_default_pad+0xfc>)
    6bf6:	e7b3      	b.n	6b60 <_sercom_get_default_pad+0x1c>
    6bf8:	42000800 	.word	0x42000800
    6bfc:	42001000 	.word	0x42001000
    6c00:	43000400 	.word	0x43000400
    6c04:	42000c00 	.word	0x42000c00
    6c08:	42000400 	.word	0x42000400
    6c0c:	00060003 	.word	0x00060003
    6c10:	00070003 	.word	0x00070003
    6c14:	001e0003 	.word	0x001e0003
    6c18:	001f0003 	.word	0x001f0003
    6c1c:	00090003 	.word	0x00090003
    6c20:	00110003 	.word	0x00110003
    6c24:	00120003 	.word	0x00120003
    6c28:	00130003 	.word	0x00130003
    6c2c:	000e0003 	.word	0x000e0003
    6c30:	000f0003 	.word	0x000f0003
    6c34:	00180003 	.word	0x00180003
    6c38:	00190003 	.word	0x00190003
    6c3c:	00080003 	.word	0x00080003
    6c40:	00100003 	.word	0x00100003

00006c44 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6c44:	b530      	push	{r4, r5, lr}
    6c46:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6c48:	4b0b      	ldr	r3, [pc, #44]	; (6c78 <_sercom_get_sercom_inst_index+0x34>)
    6c4a:	466a      	mov	r2, sp
    6c4c:	cb32      	ldmia	r3!, {r1, r4, r5}
    6c4e:	c232      	stmia	r2!, {r1, r4, r5}
    6c50:	cb32      	ldmia	r3!, {r1, r4, r5}
    6c52:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    6c54:	9b00      	ldr	r3, [sp, #0]
    6c56:	4283      	cmp	r3, r0
    6c58:	d00b      	beq.n	6c72 <_sercom_get_sercom_inst_index+0x2e>
    6c5a:	2301      	movs	r3, #1
    6c5c:	009a      	lsls	r2, r3, #2
    6c5e:	4669      	mov	r1, sp
    6c60:	5852      	ldr	r2, [r2, r1]
    6c62:	4282      	cmp	r2, r0
    6c64:	d006      	beq.n	6c74 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c66:	3301      	adds	r3, #1
    6c68:	2b06      	cmp	r3, #6
    6c6a:	d1f7      	bne.n	6c5c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    6c6c:	2000      	movs	r0, #0
}
    6c6e:	b007      	add	sp, #28
    6c70:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c72:	2300      	movs	r3, #0
			return i;
    6c74:	b2d8      	uxtb	r0, r3
    6c76:	e7fa      	b.n	6c6e <_sercom_get_sercom_inst_index+0x2a>
    6c78:	00011d1c 	.word	0x00011d1c

00006c7c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    6c7c:	4770      	bx	lr
    6c7e:	Address 0x00006c7e is out of bounds.


00006c80 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6c80:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6c82:	4b0a      	ldr	r3, [pc, #40]	; (6cac <_sercom_set_handler+0x2c>)
    6c84:	781b      	ldrb	r3, [r3, #0]
    6c86:	2b00      	cmp	r3, #0
    6c88:	d10c      	bne.n	6ca4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6c8a:	4f09      	ldr	r7, [pc, #36]	; (6cb0 <_sercom_set_handler+0x30>)
    6c8c:	4e09      	ldr	r6, [pc, #36]	; (6cb4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    6c8e:	4d0a      	ldr	r5, [pc, #40]	; (6cb8 <_sercom_set_handler+0x38>)
    6c90:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6c92:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    6c94:	195a      	adds	r2, r3, r5
    6c96:	6014      	str	r4, [r2, #0]
    6c98:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6c9a:	2b18      	cmp	r3, #24
    6c9c:	d1f9      	bne.n	6c92 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    6c9e:	2201      	movs	r2, #1
    6ca0:	4b02      	ldr	r3, [pc, #8]	; (6cac <_sercom_set_handler+0x2c>)
    6ca2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    6ca4:	0080      	lsls	r0, r0, #2
    6ca6:	4b02      	ldr	r3, [pc, #8]	; (6cb0 <_sercom_set_handler+0x30>)
    6ca8:	50c1      	str	r1, [r0, r3]
}
    6caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cac:	200000ca 	.word	0x200000ca
    6cb0:	200000cc 	.word	0x200000cc
    6cb4:	00006c7d 	.word	0x00006c7d
    6cb8:	20001d3c 	.word	0x20001d3c

00006cbc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    6cbc:	b500      	push	{lr}
    6cbe:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    6cc0:	2308      	movs	r3, #8
    6cc2:	466a      	mov	r2, sp
    6cc4:	7013      	strb	r3, [r2, #0]
    6cc6:	3301      	adds	r3, #1
    6cc8:	7053      	strb	r3, [r2, #1]
    6cca:	3301      	adds	r3, #1
    6ccc:	7093      	strb	r3, [r2, #2]
    6cce:	3301      	adds	r3, #1
    6cd0:	70d3      	strb	r3, [r2, #3]
    6cd2:	3301      	adds	r3, #1
    6cd4:	7113      	strb	r3, [r2, #4]
    6cd6:	3301      	adds	r3, #1
    6cd8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    6cda:	4b03      	ldr	r3, [pc, #12]	; (6ce8 <_sercom_get_interrupt_vector+0x2c>)
    6cdc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    6cde:	466b      	mov	r3, sp
    6ce0:	5618      	ldrsb	r0, [r3, r0]
}
    6ce2:	b003      	add	sp, #12
    6ce4:	bd00      	pop	{pc}
    6ce6:	46c0      	nop			; (mov r8, r8)
    6ce8:	00006c45 	.word	0x00006c45

00006cec <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    6cec:	b510      	push	{r4, lr}
    6cee:	4b02      	ldr	r3, [pc, #8]	; (6cf8 <SERCOM0_Handler+0xc>)
    6cf0:	681b      	ldr	r3, [r3, #0]
    6cf2:	2000      	movs	r0, #0
    6cf4:	4798      	blx	r3
    6cf6:	bd10      	pop	{r4, pc}
    6cf8:	200000cc 	.word	0x200000cc

00006cfc <SERCOM1_Handler>:
    6cfc:	b510      	push	{r4, lr}
    6cfe:	4b02      	ldr	r3, [pc, #8]	; (6d08 <SERCOM1_Handler+0xc>)
    6d00:	685b      	ldr	r3, [r3, #4]
    6d02:	2001      	movs	r0, #1
    6d04:	4798      	blx	r3
    6d06:	bd10      	pop	{r4, pc}
    6d08:	200000cc 	.word	0x200000cc

00006d0c <SERCOM2_Handler>:
    6d0c:	b510      	push	{r4, lr}
    6d0e:	4b02      	ldr	r3, [pc, #8]	; (6d18 <SERCOM2_Handler+0xc>)
    6d10:	689b      	ldr	r3, [r3, #8]
    6d12:	2002      	movs	r0, #2
    6d14:	4798      	blx	r3
    6d16:	bd10      	pop	{r4, pc}
    6d18:	200000cc 	.word	0x200000cc

00006d1c <SERCOM3_Handler>:
    6d1c:	b510      	push	{r4, lr}
    6d1e:	4b02      	ldr	r3, [pc, #8]	; (6d28 <SERCOM3_Handler+0xc>)
    6d20:	68db      	ldr	r3, [r3, #12]
    6d22:	2003      	movs	r0, #3
    6d24:	4798      	blx	r3
    6d26:	bd10      	pop	{r4, pc}
    6d28:	200000cc 	.word	0x200000cc

00006d2c <SERCOM4_Handler>:
    6d2c:	b510      	push	{r4, lr}
    6d2e:	4b02      	ldr	r3, [pc, #8]	; (6d38 <SERCOM4_Handler+0xc>)
    6d30:	691b      	ldr	r3, [r3, #16]
    6d32:	2004      	movs	r0, #4
    6d34:	4798      	blx	r3
    6d36:	bd10      	pop	{r4, pc}
    6d38:	200000cc 	.word	0x200000cc

00006d3c <SERCOM5_Handler>:
    6d3c:	b510      	push	{r4, lr}
    6d3e:	4b02      	ldr	r3, [pc, #8]	; (6d48 <SERCOM5_Handler+0xc>)
    6d40:	695b      	ldr	r3, [r3, #20]
    6d42:	2005      	movs	r0, #5
    6d44:	4798      	blx	r3
    6d46:	bd10      	pop	{r4, pc}
    6d48:	200000cc 	.word	0x200000cc

00006d4c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d4e:	46d6      	mov	lr, sl
    6d50:	464f      	mov	r7, r9
    6d52:	4646      	mov	r6, r8
    6d54:	b5c0      	push	{r6, r7, lr}
    6d56:	b08a      	sub	sp, #40	; 0x28
    6d58:	0006      	movs	r6, r0
    6d5a:	000f      	movs	r7, r1
    6d5c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6d5e:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    6d60:	680b      	ldr	r3, [r1, #0]
    6d62:	079b      	lsls	r3, r3, #30
    6d64:	d40a      	bmi.n	6d7c <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6d66:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    6d68:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6d6a:	07db      	lsls	r3, r3, #31
    6d6c:	d400      	bmi.n	6d70 <spi_init+0x24>
    6d6e:	e097      	b.n	6ea0 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    6d70:	b00a      	add	sp, #40	; 0x28
    6d72:	bc1c      	pop	{r2, r3, r4}
    6d74:	4690      	mov	r8, r2
    6d76:	4699      	mov	r9, r3
    6d78:	46a2      	mov	sl, r4
    6d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    6d7c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6d7e:	9305      	str	r3, [sp, #20]
    6d80:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6d82:	9306      	str	r3, [sp, #24]
    6d84:	6b13      	ldr	r3, [r2, #48]	; 0x30
    6d86:	9307      	str	r3, [sp, #28]
    6d88:	6b53      	ldr	r3, [r2, #52]	; 0x34
    6d8a:	9308      	str	r3, [sp, #32]
    6d8c:	2500      	movs	r5, #0
    6d8e:	e00a      	b.n	6da6 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6d90:	0038      	movs	r0, r7
    6d92:	4b9a      	ldr	r3, [pc, #616]	; (6ffc <spi_init+0x2b0>)
    6d94:	4798      	blx	r3
    6d96:	e00e      	b.n	6db6 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    6d98:	230f      	movs	r3, #15
    6d9a:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    6d9c:	4581      	cmp	r9, r0
    6d9e:	d130      	bne.n	6e02 <spi_init+0xb6>
    6da0:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6da2:	2d04      	cmp	r5, #4
    6da4:	d031      	beq.n	6e0a <spi_init+0xbe>
    6da6:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6da8:	00ab      	lsls	r3, r5, #2
    6daa:	aa02      	add	r2, sp, #8
    6dac:	200c      	movs	r0, #12
    6dae:	1812      	adds	r2, r2, r0
    6db0:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    6db2:	2800      	cmp	r0, #0
    6db4:	d0ec      	beq.n	6d90 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    6db6:	1c43      	adds	r3, r0, #1
    6db8:	d0f2      	beq.n	6da0 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    6dba:	0401      	lsls	r1, r0, #16
    6dbc:	0c0b      	lsrs	r3, r1, #16
    6dbe:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    6dc0:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    6dc2:	b2c3      	uxtb	r3, r0
    6dc4:	469c      	mov	ip, r3
		return NULL;
    6dc6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6dc8:	0602      	lsls	r2, r0, #24
    6dca:	d405      	bmi.n	6dd8 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    6dcc:	4663      	mov	r3, ip
    6dce:	095b      	lsrs	r3, r3, #5
    6dd0:	01db      	lsls	r3, r3, #7
    6dd2:	4a8b      	ldr	r2, [pc, #556]	; (7000 <spi_init+0x2b4>)
    6dd4:	4690      	mov	r8, r2
    6dd6:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    6dd8:	221f      	movs	r2, #31
    6dda:	4660      	mov	r0, ip
    6ddc:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    6dde:	1898      	adds	r0, r3, r2
    6de0:	3040      	adds	r0, #64	; 0x40
    6de2:	7800      	ldrb	r0, [r0, #0]
    6de4:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    6de6:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    6de8:	4651      	mov	r1, sl
    6dea:	07c9      	lsls	r1, r1, #31
    6dec:	d5d6      	bpl.n	6d9c <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    6dee:	0852      	lsrs	r2, r2, #1
    6df0:	189b      	adds	r3, r3, r2
    6df2:	3330      	adds	r3, #48	; 0x30
    6df4:	7818      	ldrb	r0, [r3, #0]
    6df6:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    6df8:	4663      	mov	r3, ip
    6dfa:	07db      	lsls	r3, r3, #31
    6dfc:	d5cc      	bpl.n	6d98 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    6dfe:	0900      	lsrs	r0, r0, #4
    6e00:	e7cc      	b.n	6d9c <spi_init+0x50>
			module->hw = NULL;
    6e02:	2300      	movs	r3, #0
    6e04:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    6e06:	201c      	movs	r0, #28
    6e08:	e7b2      	b.n	6d70 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    6e0a:	2011      	movs	r0, #17
    6e0c:	4b7d      	ldr	r3, [pc, #500]	; (7004 <spi_init+0x2b8>)
    6e0e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    6e10:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    6e12:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    6e14:	2a01      	cmp	r2, #1
    6e16:	d026      	beq.n	6e66 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    6e18:	6863      	ldr	r3, [r4, #4]
    6e1a:	68a2      	ldr	r2, [r4, #8]
    6e1c:	4313      	orrs	r3, r2
    6e1e:	68e2      	ldr	r2, [r4, #12]
    6e20:	4313      	orrs	r3, r2
    6e22:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    6e24:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    6e26:	7c61      	ldrb	r1, [r4, #17]
    6e28:	2900      	cmp	r1, #0
    6e2a:	d001      	beq.n	6e30 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6e2c:	2180      	movs	r1, #128	; 0x80
    6e2e:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    6e30:	7ca1      	ldrb	r1, [r4, #18]
    6e32:	2900      	cmp	r1, #0
    6e34:	d002      	beq.n	6e3c <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6e36:	2180      	movs	r1, #128	; 0x80
    6e38:	0289      	lsls	r1, r1, #10
    6e3a:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    6e3c:	7ce1      	ldrb	r1, [r4, #19]
    6e3e:	2900      	cmp	r1, #0
    6e40:	d002      	beq.n	6e48 <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6e42:	2180      	movs	r1, #128	; 0x80
    6e44:	0089      	lsls	r1, r1, #2
    6e46:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    6e48:	7d21      	ldrb	r1, [r4, #20]
    6e4a:	2900      	cmp	r1, #0
    6e4c:	d002      	beq.n	6e54 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    6e4e:	2180      	movs	r1, #128	; 0x80
    6e50:	0189      	lsls	r1, r1, #6
    6e52:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    6e54:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    6e56:	2002      	movs	r0, #2
    6e58:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    6e5a:	428b      	cmp	r3, r1
    6e5c:	d017      	beq.n	6e8e <spi_init+0x142>
	module->hw = NULL;
    6e5e:	2300      	movs	r3, #0
    6e60:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    6e62:	201c      	movs	r0, #28
    6e64:	e784      	b.n	6d70 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    6e66:	aa04      	add	r2, sp, #16
    6e68:	0001      	movs	r1, r0
    6e6a:	69a0      	ldr	r0, [r4, #24]
    6e6c:	4b66      	ldr	r3, [pc, #408]	; (7008 <spi_init+0x2bc>)
    6e6e:	4798      	blx	r3
    6e70:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    6e72:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    6e74:	2b00      	cmp	r3, #0
    6e76:	d000      	beq.n	6e7a <spi_init+0x12e>
    6e78:	e77a      	b.n	6d70 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    6e7a:	7b3b      	ldrb	r3, [r7, #12]
    6e7c:	b2db      	uxtb	r3, r3
    6e7e:	aa04      	add	r2, sp, #16
    6e80:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    6e82:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    6e84:	429a      	cmp	r2, r3
    6e86:	d000      	beq.n	6e8a <spi_init+0x13e>
    6e88:	e772      	b.n	6d70 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    6e8a:	350c      	adds	r5, #12
    6e8c:	e7c4      	b.n	6e18 <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    6e8e:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    6e90:	4293      	cmp	r3, r2
    6e92:	d1e4      	bne.n	6e5e <spi_init+0x112>
		module->mode           = config->mode;
    6e94:	7823      	ldrb	r3, [r4, #0]
    6e96:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    6e98:	7c23      	ldrb	r3, [r4, #16]
    6e9a:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    6e9c:	2000      	movs	r0, #0
    6e9e:	e767      	b.n	6d70 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6ea0:	0008      	movs	r0, r1
    6ea2:	4b5a      	ldr	r3, [pc, #360]	; (700c <spi_init+0x2c0>)
    6ea4:	4798      	blx	r3
	if (sercom_index == 5) {
    6ea6:	2805      	cmp	r0, #5
    6ea8:	d100      	bne.n	6eac <spi_init+0x160>
    6eaa:	e09f      	b.n	6fec <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6eac:	0003      	movs	r3, r0
    6eae:	3312      	adds	r3, #18
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    6eb0:	4957      	ldr	r1, [pc, #348]	; (7010 <spi_init+0x2c4>)
    6eb2:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6eb4:	2201      	movs	r2, #1
    6eb6:	4082      	lsls	r2, r0
    6eb8:	432a      	orrs	r2, r5
    6eba:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    6ebc:	a909      	add	r1, sp, #36	; 0x24
    6ebe:	2524      	movs	r5, #36	; 0x24
    6ec0:	5d62      	ldrb	r2, [r4, r5]
    6ec2:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6ec4:	b2db      	uxtb	r3, r3
    6ec6:	9301      	str	r3, [sp, #4]
    6ec8:	0018      	movs	r0, r3
    6eca:	4b52      	ldr	r3, [pc, #328]	; (7014 <spi_init+0x2c8>)
    6ecc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6ece:	9801      	ldr	r0, [sp, #4]
    6ed0:	4b51      	ldr	r3, [pc, #324]	; (7018 <spi_init+0x2cc>)
    6ed2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6ed4:	5d60      	ldrb	r0, [r4, r5]
    6ed6:	2100      	movs	r1, #0
    6ed8:	4b50      	ldr	r3, [pc, #320]	; (701c <spi_init+0x2d0>)
    6eda:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    6edc:	7823      	ldrb	r3, [r4, #0]
    6ede:	2b01      	cmp	r3, #1
    6ee0:	d019      	beq.n	6f16 <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    6ee2:	6833      	ldr	r3, [r6, #0]
    6ee4:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6ee6:	ab04      	add	r3, sp, #16
    6ee8:	2280      	movs	r2, #128	; 0x80
    6eea:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6eec:	2200      	movs	r2, #0
    6eee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6ef0:	2101      	movs	r1, #1
    6ef2:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    6ef4:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    6ef6:	7823      	ldrb	r3, [r4, #0]
    6ef8:	2b00      	cmp	r3, #0
    6efa:	d101      	bne.n	6f00 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6efc:	ab04      	add	r3, sp, #16
    6efe:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6f00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6f02:	9305      	str	r3, [sp, #20]
    6f04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6f06:	9306      	str	r3, [sp, #24]
    6f08:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6f0a:	9307      	str	r3, [sp, #28]
    6f0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6f0e:	9308      	str	r3, [sp, #32]
    6f10:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6f12:	ad05      	add	r5, sp, #20
    6f14:	e011      	b.n	6f3a <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    6f16:	683b      	ldr	r3, [r7, #0]
    6f18:	220c      	movs	r2, #12
    6f1a:	4313      	orrs	r3, r2
    6f1c:	603b      	str	r3, [r7, #0]
    6f1e:	e7e0      	b.n	6ee2 <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    6f20:	4640      	mov	r0, r8
    6f22:	4b36      	ldr	r3, [pc, #216]	; (6ffc <spi_init+0x2b0>)
    6f24:	4798      	blx	r3
    6f26:	e00d      	b.n	6f44 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6f28:	a904      	add	r1, sp, #16
    6f2a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6f2c:	0c00      	lsrs	r0, r0, #16
    6f2e:	b2c0      	uxtb	r0, r0
    6f30:	4b3b      	ldr	r3, [pc, #236]	; (7020 <spi_init+0x2d4>)
    6f32:	4798      	blx	r3
    6f34:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6f36:	2f04      	cmp	r7, #4
    6f38:	d007      	beq.n	6f4a <spi_init+0x1fe>
    6f3a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6f3c:	00bb      	lsls	r3, r7, #2
    6f3e:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    6f40:	2800      	cmp	r0, #0
    6f42:	d0ed      	beq.n	6f20 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    6f44:	1c43      	adds	r3, r0, #1
    6f46:	d1ef      	bne.n	6f28 <spi_init+0x1dc>
    6f48:	e7f4      	b.n	6f34 <spi_init+0x1e8>
	module->mode             = config->mode;
    6f4a:	7823      	ldrb	r3, [r4, #0]
    6f4c:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    6f4e:	7c23      	ldrb	r3, [r4, #16]
    6f50:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    6f52:	7ca3      	ldrb	r3, [r4, #18]
    6f54:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    6f56:	7d23      	ldrb	r3, [r4, #20]
    6f58:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    6f5a:	2200      	movs	r2, #0
    6f5c:	ab02      	add	r3, sp, #8
    6f5e:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    6f60:	7823      	ldrb	r3, [r4, #0]
    6f62:	2b01      	cmp	r3, #1
    6f64:	d02a      	beq.n	6fbc <spi_init+0x270>
	ctrla |= config->transfer_mode;
    6f66:	6863      	ldr	r3, [r4, #4]
    6f68:	68a2      	ldr	r2, [r4, #8]
    6f6a:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    6f6c:	68e2      	ldr	r2, [r4, #12]
    6f6e:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    6f70:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    6f72:	7c62      	ldrb	r2, [r4, #17]
    6f74:	2a00      	cmp	r2, #0
    6f76:	d103      	bne.n	6f80 <spi_init+0x234>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6f78:	4a2a      	ldr	r2, [pc, #168]	; (7024 <spi_init+0x2d8>)
    6f7a:	7892      	ldrb	r2, [r2, #2]
    6f7c:	0792      	lsls	r2, r2, #30
    6f7e:	d501      	bpl.n	6f84 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6f80:	2280      	movs	r2, #128	; 0x80
    6f82:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    6f84:	7ca2      	ldrb	r2, [r4, #18]
    6f86:	2a00      	cmp	r2, #0
    6f88:	d002      	beq.n	6f90 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6f8a:	2280      	movs	r2, #128	; 0x80
    6f8c:	0292      	lsls	r2, r2, #10
    6f8e:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    6f90:	7ce2      	ldrb	r2, [r4, #19]
    6f92:	2a00      	cmp	r2, #0
    6f94:	d002      	beq.n	6f9c <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6f96:	2280      	movs	r2, #128	; 0x80
    6f98:	0092      	lsls	r2, r2, #2
    6f9a:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    6f9c:	7d22      	ldrb	r2, [r4, #20]
    6f9e:	2a00      	cmp	r2, #0
    6fa0:	d002      	beq.n	6fa8 <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    6fa2:	2280      	movs	r2, #128	; 0x80
    6fa4:	0192      	lsls	r2, r2, #6
    6fa6:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    6fa8:	4642      	mov	r2, r8
    6faa:	6812      	ldr	r2, [r2, #0]
    6fac:	4313      	orrs	r3, r2
    6fae:	4642      	mov	r2, r8
    6fb0:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    6fb2:	6853      	ldr	r3, [r2, #4]
    6fb4:	430b      	orrs	r3, r1
    6fb6:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    6fb8:	2000      	movs	r0, #0
    6fba:	e6d9      	b.n	6d70 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6fbc:	6830      	ldr	r0, [r6, #0]
    6fbe:	4b13      	ldr	r3, [pc, #76]	; (700c <spi_init+0x2c0>)
    6fc0:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6fc2:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    6fc4:	b2c0      	uxtb	r0, r0
    6fc6:	4b0f      	ldr	r3, [pc, #60]	; (7004 <spi_init+0x2b8>)
    6fc8:	4798      	blx	r3
    6fca:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    6fcc:	ab02      	add	r3, sp, #8
    6fce:	1d9a      	adds	r2, r3, #6
    6fd0:	69a0      	ldr	r0, [r4, #24]
    6fd2:	4b0d      	ldr	r3, [pc, #52]	; (7008 <spi_init+0x2bc>)
    6fd4:	4798      	blx	r3
    6fd6:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    6fd8:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    6fda:	2b00      	cmp	r3, #0
    6fdc:	d000      	beq.n	6fe0 <spi_init+0x294>
    6fde:	e6c7      	b.n	6d70 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    6fe0:	ab02      	add	r3, sp, #8
    6fe2:	3306      	adds	r3, #6
    6fe4:	781b      	ldrb	r3, [r3, #0]
    6fe6:	4642      	mov	r2, r8
    6fe8:	7313      	strb	r3, [r2, #12]
    6fea:	e7bc      	b.n	6f66 <spi_init+0x21a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    6fec:	4a08      	ldr	r2, [pc, #32]	; (7010 <spi_init+0x2c4>)
    6fee:	6a13      	ldr	r3, [r2, #32]
    6ff0:	2102      	movs	r1, #2
    6ff2:	430b      	orrs	r3, r1
    6ff4:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    6ff6:	2318      	movs	r3, #24
    6ff8:	e760      	b.n	6ebc <spi_init+0x170>
    6ffa:	46c0      	nop			; (mov r8, r8)
    6ffc:	00006b45 	.word	0x00006b45
    7000:	40002800 	.word	0x40002800
    7004:	00007d49 	.word	0x00007d49
    7008:	00006a3b 	.word	0x00006a3b
    700c:	00006c45 	.word	0x00006c45
    7010:	40000400 	.word	0x40000400
    7014:	00007d25 	.word	0x00007d25
    7018:	00007cb5 	.word	0x00007cb5
    701c:	00006af9 	.word	0x00006af9
    7020:	00007e21 	.word	0x00007e21
    7024:	41002000 	.word	0x41002000

00007028 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    7028:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    702a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    702c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    702e:	2c01      	cmp	r4, #1
    7030:	d001      	beq.n	7036 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    7032:	0018      	movs	r0, r3
    7034:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    7036:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    7038:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    703a:	2c00      	cmp	r4, #0
    703c:	d1f9      	bne.n	7032 <spi_select_slave+0xa>
		if (select) {
    703e:	2a00      	cmp	r2, #0
    7040:	d058      	beq.n	70f4 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    7042:	784b      	ldrb	r3, [r1, #1]
    7044:	2b00      	cmp	r3, #0
    7046:	d044      	beq.n	70d2 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7048:	6803      	ldr	r3, [r0, #0]
    704a:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    704c:	07db      	lsls	r3, r3, #31
    704e:	d410      	bmi.n	7072 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    7050:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7052:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7054:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7056:	2900      	cmp	r1, #0
    7058:	d104      	bne.n	7064 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    705a:	0953      	lsrs	r3, r2, #5
    705c:	01db      	lsls	r3, r3, #7
    705e:	492e      	ldr	r1, [pc, #184]	; (7118 <spi_select_slave+0xf0>)
    7060:	468c      	mov	ip, r1
    7062:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7064:	211f      	movs	r1, #31
    7066:	4011      	ands	r1, r2
    7068:	2201      	movs	r2, #1
    706a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    706c:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    706e:	2305      	movs	r3, #5
    7070:	e7df      	b.n	7032 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7072:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7074:	09d4      	lsrs	r4, r2, #7
		return NULL;
    7076:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7078:	2c00      	cmp	r4, #0
    707a:	d104      	bne.n	7086 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    707c:	0953      	lsrs	r3, r2, #5
    707e:	01db      	lsls	r3, r3, #7
    7080:	4c25      	ldr	r4, [pc, #148]	; (7118 <spi_select_slave+0xf0>)
    7082:	46a4      	mov	ip, r4
    7084:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7086:	241f      	movs	r4, #31
    7088:	4014      	ands	r4, r2
    708a:	2201      	movs	r2, #1
    708c:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    708e:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7090:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7092:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    7094:	07d2      	lsls	r2, r2, #31
    7096:	d501      	bpl.n	709c <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7098:	788a      	ldrb	r2, [r1, #2]
    709a:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    709c:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    709e:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    70a0:	2a00      	cmp	r2, #0
    70a2:	d1c6      	bne.n	7032 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    70a4:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    70a6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    70a8:	7e13      	ldrb	r3, [r2, #24]
    70aa:	420b      	tst	r3, r1
    70ac:	d0fc      	beq.n	70a8 <spi_select_slave+0x80>
    70ae:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    70b0:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    70b2:	0749      	lsls	r1, r1, #29
    70b4:	d5bd      	bpl.n	7032 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    70b6:	8b53      	ldrh	r3, [r2, #26]
    70b8:	075b      	lsls	r3, r3, #29
    70ba:	d501      	bpl.n	70c0 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    70bc:	2304      	movs	r3, #4
    70be:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    70c0:	7983      	ldrb	r3, [r0, #6]
    70c2:	2b01      	cmp	r3, #1
    70c4:	d002      	beq.n	70cc <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    70c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    70c8:	2300      	movs	r3, #0
    70ca:	e7b2      	b.n	7032 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    70cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    70ce:	2300      	movs	r3, #0
    70d0:	e7af      	b.n	7032 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    70d2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    70d4:	09d1      	lsrs	r1, r2, #7
		return NULL;
    70d6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    70d8:	2900      	cmp	r1, #0
    70da:	d104      	bne.n	70e6 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    70dc:	0953      	lsrs	r3, r2, #5
    70de:	01db      	lsls	r3, r3, #7
    70e0:	490d      	ldr	r1, [pc, #52]	; (7118 <spi_select_slave+0xf0>)
    70e2:	468c      	mov	ip, r1
    70e4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    70e6:	211f      	movs	r1, #31
    70e8:	4011      	ands	r1, r2
    70ea:	2201      	movs	r2, #1
    70ec:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    70ee:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    70f0:	2300      	movs	r3, #0
    70f2:	e79e      	b.n	7032 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    70f4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    70f6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    70f8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    70fa:	2900      	cmp	r1, #0
    70fc:	d104      	bne.n	7108 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    70fe:	0953      	lsrs	r3, r2, #5
    7100:	01db      	lsls	r3, r3, #7
    7102:	4905      	ldr	r1, [pc, #20]	; (7118 <spi_select_slave+0xf0>)
    7104:	468c      	mov	ip, r1
    7106:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7108:	211f      	movs	r1, #31
    710a:	4011      	ands	r1, r2
    710c:	2201      	movs	r2, #1
    710e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7110:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7112:	2300      	movs	r3, #0
    7114:	e78d      	b.n	7032 <spi_select_slave+0xa>
    7116:	46c0      	nop			; (mov r8, r8)
    7118:	40002800 	.word	0x40002800

0000711c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    711c:	b5f0      	push	{r4, r5, r6, r7, lr}
    711e:	46de      	mov	lr, fp
    7120:	4657      	mov	r7, sl
    7122:	464e      	mov	r6, r9
    7124:	4645      	mov	r5, r8
    7126:	b5e0      	push	{r5, r6, r7, lr}
    7128:	b091      	sub	sp, #68	; 0x44
    712a:	0005      	movs	r5, r0
    712c:	000c      	movs	r4, r1
    712e:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    7130:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7132:	0008      	movs	r0, r1
    7134:	4bc4      	ldr	r3, [pc, #784]	; (7448 <usart_init+0x32c>)
    7136:	4798      	blx	r3
    7138:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    713a:	2805      	cmp	r0, #5
    713c:	d00d      	beq.n	715a <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    713e:	0007      	movs	r7, r0
    7140:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    7142:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7144:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    7146:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7148:	07c9      	lsls	r1, r1, #31
    714a:	d509      	bpl.n	7160 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    714c:	b011      	add	sp, #68	; 0x44
    714e:	bc3c      	pop	{r2, r3, r4, r5}
    7150:	4690      	mov	r8, r2
    7152:	4699      	mov	r9, r3
    7154:	46a2      	mov	sl, r4
    7156:	46ab      	mov	fp, r5
    7158:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    715a:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    715c:	2301      	movs	r3, #1
    715e:	e7f1      	b.n	7144 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7160:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    7162:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7164:	0789      	lsls	r1, r1, #30
    7166:	d4f1      	bmi.n	714c <usart_init+0x30>
	if (sercom_index == 5) {
    7168:	2a05      	cmp	r2, #5
    716a:	d049      	beq.n	7200 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    716c:	49b7      	ldr	r1, [pc, #732]	; (744c <usart_init+0x330>)
    716e:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    7170:	2201      	movs	r2, #1
    7172:	409a      	lsls	r2, r3
    7174:	0013      	movs	r3, r2
    7176:	4303      	orrs	r3, r0
    7178:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    717a:	a90f      	add	r1, sp, #60	; 0x3c
    717c:	232d      	movs	r3, #45	; 0x2d
    717e:	4698      	mov	r8, r3
    7180:	5cf3      	ldrb	r3, [r6, r3]
    7182:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7184:	b2ff      	uxtb	r7, r7
    7186:	0038      	movs	r0, r7
    7188:	4bb1      	ldr	r3, [pc, #708]	; (7450 <usart_init+0x334>)
    718a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    718c:	0038      	movs	r0, r7
    718e:	4bb1      	ldr	r3, [pc, #708]	; (7454 <usart_init+0x338>)
    7190:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7192:	4643      	mov	r3, r8
    7194:	5cf0      	ldrb	r0, [r6, r3]
    7196:	2100      	movs	r1, #0
    7198:	4baf      	ldr	r3, [pc, #700]	; (7458 <usart_init+0x33c>)
    719a:	4798      	blx	r3
	module->character_size = config->character_size;
    719c:	7af3      	ldrb	r3, [r6, #11]
    719e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    71a0:	2324      	movs	r3, #36	; 0x24
    71a2:	5cf3      	ldrb	r3, [r6, r3]
    71a4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    71a6:	2325      	movs	r3, #37	; 0x25
    71a8:	5cf3      	ldrb	r3, [r6, r3]
    71aa:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    71ac:	7ef3      	ldrb	r3, [r6, #27]
    71ae:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    71b0:	7f33      	ldrb	r3, [r6, #28]
    71b2:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    71b4:	682b      	ldr	r3, [r5, #0]
    71b6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    71b8:	0018      	movs	r0, r3
    71ba:	4ba3      	ldr	r3, [pc, #652]	; (7448 <usart_init+0x32c>)
    71bc:	4798      	blx	r3
	if (sercom_index == 5) {
    71be:	2805      	cmp	r0, #5
    71c0:	d026      	beq.n	7210 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    71c2:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    71c4:	2200      	movs	r2, #0
    71c6:	230e      	movs	r3, #14
    71c8:	a906      	add	r1, sp, #24
    71ca:	468c      	mov	ip, r1
    71cc:	4463      	add	r3, ip
    71ce:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    71d0:	8a32      	ldrh	r2, [r6, #16]
    71d2:	9202      	str	r2, [sp, #8]
    71d4:	2380      	movs	r3, #128	; 0x80
    71d6:	01db      	lsls	r3, r3, #7
    71d8:	429a      	cmp	r2, r3
    71da:	d100      	bne.n	71de <usart_init+0xc2>
    71dc:	e0a7      	b.n	732e <usart_init+0x212>
    71de:	d919      	bls.n	7214 <usart_init+0xf8>
    71e0:	23c0      	movs	r3, #192	; 0xc0
    71e2:	01db      	lsls	r3, r3, #7
    71e4:	9a02      	ldr	r2, [sp, #8]
    71e6:	429a      	cmp	r2, r3
    71e8:	d100      	bne.n	71ec <usart_init+0xd0>
    71ea:	e09b      	b.n	7324 <usart_init+0x208>
    71ec:	2380      	movs	r3, #128	; 0x80
    71ee:	021b      	lsls	r3, r3, #8
    71f0:	429a      	cmp	r2, r3
    71f2:	d000      	beq.n	71f6 <usart_init+0xda>
    71f4:	e123      	b.n	743e <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    71f6:	2303      	movs	r3, #3
    71f8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    71fa:	2300      	movs	r3, #0
    71fc:	9307      	str	r3, [sp, #28]
    71fe:	e012      	b.n	7226 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    7200:	4992      	ldr	r1, [pc, #584]	; (744c <usart_init+0x330>)
    7202:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    7204:	3a04      	subs	r2, #4
    7206:	409a      	lsls	r2, r3
    7208:	0013      	movs	r3, r2
    720a:	4303      	orrs	r3, r0
    720c:	620b      	str	r3, [r1, #32]
    720e:	e7b4      	b.n	717a <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    7210:	2018      	movs	r0, #24
    7212:	e7d7      	b.n	71c4 <usart_init+0xa8>
	switch (config->sample_rate) {
    7214:	2380      	movs	r3, #128	; 0x80
    7216:	019b      	lsls	r3, r3, #6
    7218:	429a      	cmp	r2, r3
    721a:	d000      	beq.n	721e <usart_init+0x102>
    721c:	e10f      	b.n	743e <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    721e:	2310      	movs	r3, #16
    7220:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7222:	3b0f      	subs	r3, #15
    7224:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    7226:	6833      	ldr	r3, [r6, #0]
    7228:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    722a:	68f3      	ldr	r3, [r6, #12]
    722c:	469b      	mov	fp, r3
		config->sample_adjustment |
    722e:	6973      	ldr	r3, [r6, #20]
    7230:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7232:	7e33      	ldrb	r3, [r6, #24]
    7234:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7236:	2326      	movs	r3, #38	; 0x26
    7238:	5cf3      	ldrb	r3, [r6, r3]
    723a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    723c:	6873      	ldr	r3, [r6, #4]
    723e:	4699      	mov	r9, r3
	switch (transfer_mode)
    7240:	2b00      	cmp	r3, #0
    7242:	d100      	bne.n	7246 <usart_init+0x12a>
    7244:	e09b      	b.n	737e <usart_init+0x262>
    7246:	2380      	movs	r3, #128	; 0x80
    7248:	055b      	lsls	r3, r3, #21
    724a:	4599      	cmp	r9, r3
    724c:	d104      	bne.n	7258 <usart_init+0x13c>
			if (!config->use_external_clock) {
    724e:	2327      	movs	r3, #39	; 0x27
    7250:	5cf3      	ldrb	r3, [r6, r3]
    7252:	2b00      	cmp	r3, #0
    7254:	d100      	bne.n	7258 <usart_init+0x13c>
    7256:	e080      	b.n	735a <usart_init+0x23e>
	if(config->encoding_format_enable) {
    7258:	7e73      	ldrb	r3, [r6, #25]
    725a:	2b00      	cmp	r3, #0
    725c:	d002      	beq.n	7264 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    725e:	7eb3      	ldrb	r3, [r6, #26]
    7260:	4642      	mov	r2, r8
    7262:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    7264:	230e      	movs	r3, #14
    7266:	aa06      	add	r2, sp, #24
    7268:	4694      	mov	ip, r2
    726a:	4463      	add	r3, ip
    726c:	881b      	ldrh	r3, [r3, #0]
    726e:	4642      	mov	r2, r8
    7270:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    7272:	9b05      	ldr	r3, [sp, #20]
    7274:	465a      	mov	r2, fp
    7276:	4313      	orrs	r3, r2
    7278:	9a03      	ldr	r2, [sp, #12]
    727a:	4313      	orrs	r3, r2
    727c:	464a      	mov	r2, r9
    727e:	4313      	orrs	r3, r2
    7280:	9f02      	ldr	r7, [sp, #8]
    7282:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7284:	9b04      	ldr	r3, [sp, #16]
    7286:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    7288:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    728a:	4653      	mov	r3, sl
    728c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    728e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    7290:	2327      	movs	r3, #39	; 0x27
    7292:	5cf3      	ldrb	r3, [r6, r3]
    7294:	2b00      	cmp	r3, #0
    7296:	d101      	bne.n	729c <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    7298:	3304      	adds	r3, #4
    729a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    729c:	7e73      	ldrb	r3, [r6, #25]
    729e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    72a0:	7f32      	ldrb	r2, [r6, #28]
    72a2:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    72a4:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    72a6:	7f72      	ldrb	r2, [r6, #29]
    72a8:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    72aa:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    72ac:	2224      	movs	r2, #36	; 0x24
    72ae:	5cb2      	ldrb	r2, [r6, r2]
    72b0:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    72b2:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    72b4:	2225      	movs	r2, #37	; 0x25
    72b6:	5cb2      	ldrb	r2, [r6, r2]
    72b8:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    72ba:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    72bc:	7ab1      	ldrb	r1, [r6, #10]
    72be:	7af2      	ldrb	r2, [r6, #11]
    72c0:	4311      	orrs	r1, r2
    72c2:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    72c4:	8933      	ldrh	r3, [r6, #8]
    72c6:	2bff      	cmp	r3, #255	; 0xff
    72c8:	d07d      	beq.n	73c6 <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    72ca:	2280      	movs	r2, #128	; 0x80
    72cc:	0452      	lsls	r2, r2, #17
    72ce:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    72d0:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    72d2:	232c      	movs	r3, #44	; 0x2c
    72d4:	5cf3      	ldrb	r3, [r6, r3]
    72d6:	2b00      	cmp	r3, #0
    72d8:	d103      	bne.n	72e2 <usart_init+0x1c6>
    72da:	4b60      	ldr	r3, [pc, #384]	; (745c <usart_init+0x340>)
    72dc:	789b      	ldrb	r3, [r3, #2]
    72de:	079b      	lsls	r3, r3, #30
    72e0:	d501      	bpl.n	72e6 <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    72e2:	2380      	movs	r3, #128	; 0x80
    72e4:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    72e6:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    72e8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    72ea:	2b00      	cmp	r3, #0
    72ec:	d1fc      	bne.n	72e8 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    72ee:	4643      	mov	r3, r8
    72f0:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    72f2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    72f4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    72f6:	2b00      	cmp	r3, #0
    72f8:	d1fc      	bne.n	72f4 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    72fa:	4643      	mov	r3, r8
    72fc:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    72fe:	ab0e      	add	r3, sp, #56	; 0x38
    7300:	2280      	movs	r2, #128	; 0x80
    7302:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7304:	2200      	movs	r2, #0
    7306:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    7308:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    730a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    730c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    730e:	930a      	str	r3, [sp, #40]	; 0x28
    7310:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7312:	930b      	str	r3, [sp, #44]	; 0x2c
    7314:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7316:	930c      	str	r3, [sp, #48]	; 0x30
    7318:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    731a:	9302      	str	r3, [sp, #8]
    731c:	930d      	str	r3, [sp, #52]	; 0x34
    731e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7320:	ae0a      	add	r6, sp, #40	; 0x28
    7322:	e05e      	b.n	73e2 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7324:	2308      	movs	r3, #8
    7326:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7328:	3b07      	subs	r3, #7
    732a:	9307      	str	r3, [sp, #28]
    732c:	e77b      	b.n	7226 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    732e:	6833      	ldr	r3, [r6, #0]
    7330:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    7332:	68f3      	ldr	r3, [r6, #12]
    7334:	469b      	mov	fp, r3
		config->sample_adjustment |
    7336:	6973      	ldr	r3, [r6, #20]
    7338:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    733a:	7e33      	ldrb	r3, [r6, #24]
    733c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    733e:	2326      	movs	r3, #38	; 0x26
    7340:	5cf3      	ldrb	r3, [r6, r3]
    7342:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7344:	6873      	ldr	r3, [r6, #4]
    7346:	4699      	mov	r9, r3
	switch (transfer_mode)
    7348:	2b00      	cmp	r3, #0
    734a:	d014      	beq.n	7376 <usart_init+0x25a>
    734c:	2380      	movs	r3, #128	; 0x80
    734e:	055b      	lsls	r3, r3, #21
    7350:	4599      	cmp	r9, r3
    7352:	d100      	bne.n	7356 <usart_init+0x23a>
    7354:	e77b      	b.n	724e <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    7356:	2000      	movs	r0, #0
    7358:	e020      	b.n	739c <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    735a:	6a33      	ldr	r3, [r6, #32]
    735c:	001f      	movs	r7, r3
    735e:	b2c0      	uxtb	r0, r0
    7360:	4b3f      	ldr	r3, [pc, #252]	; (7460 <usart_init+0x344>)
    7362:	4798      	blx	r3
    7364:	0001      	movs	r1, r0
    7366:	220e      	movs	r2, #14
    7368:	ab06      	add	r3, sp, #24
    736a:	469c      	mov	ip, r3
    736c:	4462      	add	r2, ip
    736e:	0038      	movs	r0, r7
    7370:	4b3c      	ldr	r3, [pc, #240]	; (7464 <usart_init+0x348>)
    7372:	4798      	blx	r3
    7374:	e012      	b.n	739c <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7376:	2308      	movs	r3, #8
    7378:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    737a:	2300      	movs	r3, #0
    737c:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    737e:	2327      	movs	r3, #39	; 0x27
    7380:	5cf3      	ldrb	r3, [r6, r3]
    7382:	2b00      	cmp	r3, #0
    7384:	d00e      	beq.n	73a4 <usart_init+0x288>
				status_code =
    7386:	9b06      	ldr	r3, [sp, #24]
    7388:	9300      	str	r3, [sp, #0]
    738a:	9b07      	ldr	r3, [sp, #28]
    738c:	220e      	movs	r2, #14
    738e:	a906      	add	r1, sp, #24
    7390:	468c      	mov	ip, r1
    7392:	4462      	add	r2, ip
    7394:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    7396:	6a30      	ldr	r0, [r6, #32]
    7398:	4f33      	ldr	r7, [pc, #204]	; (7468 <usart_init+0x34c>)
    739a:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    739c:	2800      	cmp	r0, #0
    739e:	d000      	beq.n	73a2 <usart_init+0x286>
    73a0:	e6d4      	b.n	714c <usart_init+0x30>
    73a2:	e759      	b.n	7258 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    73a4:	6a33      	ldr	r3, [r6, #32]
    73a6:	001f      	movs	r7, r3
    73a8:	b2c0      	uxtb	r0, r0
    73aa:	4b2d      	ldr	r3, [pc, #180]	; (7460 <usart_init+0x344>)
    73ac:	4798      	blx	r3
    73ae:	0001      	movs	r1, r0
				status_code =
    73b0:	9b06      	ldr	r3, [sp, #24]
    73b2:	9300      	str	r3, [sp, #0]
    73b4:	9b07      	ldr	r3, [sp, #28]
    73b6:	220e      	movs	r2, #14
    73b8:	a806      	add	r0, sp, #24
    73ba:	4684      	mov	ip, r0
    73bc:	4462      	add	r2, ip
    73be:	0038      	movs	r0, r7
    73c0:	4f29      	ldr	r7, [pc, #164]	; (7468 <usart_init+0x34c>)
    73c2:	47b8      	blx	r7
    73c4:	e7ea      	b.n	739c <usart_init+0x280>
		if(config->lin_slave_enable) {
    73c6:	7ef3      	ldrb	r3, [r6, #27]
    73c8:	2b00      	cmp	r3, #0
    73ca:	d082      	beq.n	72d2 <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    73cc:	2380      	movs	r3, #128	; 0x80
    73ce:	04db      	lsls	r3, r3, #19
    73d0:	431f      	orrs	r7, r3
    73d2:	e77e      	b.n	72d2 <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    73d4:	0020      	movs	r0, r4
    73d6:	4b25      	ldr	r3, [pc, #148]	; (746c <usart_init+0x350>)
    73d8:	4798      	blx	r3
    73da:	e007      	b.n	73ec <usart_init+0x2d0>
    73dc:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    73de:	2f04      	cmp	r7, #4
    73e0:	d00d      	beq.n	73fe <usart_init+0x2e2>
    73e2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    73e4:	00bb      	lsls	r3, r7, #2
    73e6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    73e8:	2800      	cmp	r0, #0
    73ea:	d0f3      	beq.n	73d4 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    73ec:	1c43      	adds	r3, r0, #1
    73ee:	d0f5      	beq.n	73dc <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    73f0:	a90e      	add	r1, sp, #56	; 0x38
    73f2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    73f4:	0c00      	lsrs	r0, r0, #16
    73f6:	b2c0      	uxtb	r0, r0
    73f8:	4b1d      	ldr	r3, [pc, #116]	; (7470 <usart_init+0x354>)
    73fa:	4798      	blx	r3
    73fc:	e7ee      	b.n	73dc <usart_init+0x2c0>
		module->callback[i]            = NULL;
    73fe:	2300      	movs	r3, #0
    7400:	60eb      	str	r3, [r5, #12]
    7402:	612b      	str	r3, [r5, #16]
    7404:	616b      	str	r3, [r5, #20]
    7406:	61ab      	str	r3, [r5, #24]
    7408:	61eb      	str	r3, [r5, #28]
    740a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    740c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    740e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    7410:	2200      	movs	r2, #0
    7412:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    7414:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    7416:	3330      	adds	r3, #48	; 0x30
    7418:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    741a:	3301      	adds	r3, #1
    741c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    741e:	3301      	adds	r3, #1
    7420:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    7422:	3301      	adds	r3, #1
    7424:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    7426:	6828      	ldr	r0, [r5, #0]
    7428:	4b07      	ldr	r3, [pc, #28]	; (7448 <usart_init+0x32c>)
    742a:	4798      	blx	r3
    742c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    742e:	4911      	ldr	r1, [pc, #68]	; (7474 <usart_init+0x358>)
    7430:	4b11      	ldr	r3, [pc, #68]	; (7478 <usart_init+0x35c>)
    7432:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7434:	00a4      	lsls	r4, r4, #2
    7436:	4b11      	ldr	r3, [pc, #68]	; (747c <usart_init+0x360>)
    7438:	50e5      	str	r5, [r4, r3]
	return status_code;
    743a:	2000      	movs	r0, #0
    743c:	e686      	b.n	714c <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    743e:	2310      	movs	r3, #16
    7440:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7442:	2300      	movs	r3, #0
    7444:	9307      	str	r3, [sp, #28]
    7446:	e6ee      	b.n	7226 <usart_init+0x10a>
    7448:	00006c45 	.word	0x00006c45
    744c:	40000400 	.word	0x40000400
    7450:	00007d25 	.word	0x00007d25
    7454:	00007cb5 	.word	0x00007cb5
    7458:	00006af9 	.word	0x00006af9
    745c:	41002000 	.word	0x41002000
    7460:	00007d49 	.word	0x00007d49
    7464:	00006a3b 	.word	0x00006a3b
    7468:	00006a65 	.word	0x00006a65
    746c:	00006b45 	.word	0x00006b45
    7470:	00007e21 	.word	0x00007e21
    7474:	00007665 	.word	0x00007665
    7478:	00006c81 	.word	0x00006c81
    747c:	20001d3c 	.word	0x20001d3c

00007480 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    7480:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    7482:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    7484:	2a00      	cmp	r2, #0
    7486:	d101      	bne.n	748c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    7488:	0018      	movs	r0, r3
    748a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    748c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    748e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    7490:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    7492:	2a00      	cmp	r2, #0
    7494:	d1f8      	bne.n	7488 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7496:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    7498:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    749a:	2102      	movs	r1, #2
    749c:	7e13      	ldrb	r3, [r2, #24]
    749e:	420b      	tst	r3, r1
    74a0:	d0fc      	beq.n	749c <usart_write_wait+0x1c>
	return STATUS_OK;
    74a2:	2300      	movs	r3, #0
    74a4:	e7f0      	b.n	7488 <usart_write_wait+0x8>

000074a6 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    74a6:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    74a8:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    74aa:	2a00      	cmp	r2, #0
    74ac:	d101      	bne.n	74b2 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    74ae:	0018      	movs	r0, r3
    74b0:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    74b2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    74b4:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    74b6:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    74b8:	2a00      	cmp	r2, #0
    74ba:	d1f8      	bne.n	74ae <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    74bc:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    74be:	7e10      	ldrb	r0, [r2, #24]
    74c0:	0740      	lsls	r0, r0, #29
    74c2:	d5f4      	bpl.n	74ae <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    74c4:	8b53      	ldrh	r3, [r2, #26]
    74c6:	b2db      	uxtb	r3, r3
	if (error_code) {
    74c8:	0698      	lsls	r0, r3, #26
    74ca:	d01d      	beq.n	7508 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    74cc:	0798      	lsls	r0, r3, #30
    74ce:	d503      	bpl.n	74d8 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    74d0:	2302      	movs	r3, #2
    74d2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    74d4:	3318      	adds	r3, #24
    74d6:	e7ea      	b.n	74ae <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    74d8:	0758      	lsls	r0, r3, #29
    74da:	d503      	bpl.n	74e4 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    74dc:	2304      	movs	r3, #4
    74de:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    74e0:	331a      	adds	r3, #26
    74e2:	e7e4      	b.n	74ae <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    74e4:	07d8      	lsls	r0, r3, #31
    74e6:	d503      	bpl.n	74f0 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    74e8:	2301      	movs	r3, #1
    74ea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    74ec:	3312      	adds	r3, #18
    74ee:	e7de      	b.n	74ae <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    74f0:	06d8      	lsls	r0, r3, #27
    74f2:	d503      	bpl.n	74fc <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    74f4:	2310      	movs	r3, #16
    74f6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    74f8:	3332      	adds	r3, #50	; 0x32
    74fa:	e7d8      	b.n	74ae <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    74fc:	069b      	lsls	r3, r3, #26
    74fe:	d503      	bpl.n	7508 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7500:	2320      	movs	r3, #32
    7502:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    7504:	3321      	adds	r3, #33	; 0x21
    7506:	e7d2      	b.n	74ae <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    7508:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    750a:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    750c:	2300      	movs	r3, #0
    750e:	e7ce      	b.n	74ae <usart_read_wait+0x8>

00007510 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    7510:	b5f0      	push	{r4, r5, r6, r7, lr}
    7512:	46ce      	mov	lr, r9
    7514:	4647      	mov	r7, r8
    7516:	b580      	push	{r7, lr}
    7518:	b083      	sub	sp, #12
    751a:	0005      	movs	r5, r0
    751c:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    751e:	2017      	movs	r0, #23
	if (length == 0) {
    7520:	2a00      	cmp	r2, #0
    7522:	d104      	bne.n	752e <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    7524:	b003      	add	sp, #12
    7526:	bc0c      	pop	{r2, r3}
    7528:	4690      	mov	r8, r2
    752a:	4699      	mov	r9, r3
    752c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    752e:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    7530:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    7532:	2b00      	cmp	r3, #0
    7534:	d0f6      	beq.n	7524 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7536:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    7538:	3a01      	subs	r2, #1
    753a:	b293      	uxth	r3, r2
    753c:	4699      	mov	r9, r3
    753e:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    7540:	2701      	movs	r7, #1
	while (length--) {
    7542:	4b20      	ldr	r3, [pc, #128]	; (75c4 <usart_write_buffer_wait+0xb4>)
    7544:	4698      	mov	r8, r3
    7546:	e011      	b.n	756c <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    7548:	1c73      	adds	r3, r6, #1
    754a:	b29b      	uxth	r3, r3
    754c:	9a01      	ldr	r2, [sp, #4]
    754e:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7550:	796a      	ldrb	r2, [r5, #5]
    7552:	2a01      	cmp	r2, #1
    7554:	d017      	beq.n	7586 <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    7556:	b289      	uxth	r1, r1
    7558:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    755a:	0028      	movs	r0, r5
    755c:	4b1a      	ldr	r3, [pc, #104]	; (75c8 <usart_write_buffer_wait+0xb8>)
    755e:	4798      	blx	r3
	while (length--) {
    7560:	464b      	mov	r3, r9
    7562:	3b01      	subs	r3, #1
    7564:	b29b      	uxth	r3, r3
    7566:	4699      	mov	r9, r3
    7568:	4543      	cmp	r3, r8
    756a:	d013      	beq.n	7594 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    756c:	7e23      	ldrb	r3, [r4, #24]
    756e:	423b      	tst	r3, r7
    7570:	d1ea      	bne.n	7548 <usart_write_buffer_wait+0x38>
    7572:	4b14      	ldr	r3, [pc, #80]	; (75c4 <usart_write_buffer_wait+0xb4>)
    7574:	7e22      	ldrb	r2, [r4, #24]
    7576:	423a      	tst	r2, r7
    7578:	d1e6      	bne.n	7548 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    757a:	2b01      	cmp	r3, #1
    757c:	d019      	beq.n	75b2 <usart_write_buffer_wait+0xa2>
    757e:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7580:	2b00      	cmp	r3, #0
    7582:	d1f7      	bne.n	7574 <usart_write_buffer_wait+0x64>
    7584:	e7e0      	b.n	7548 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    7586:	3602      	adds	r6, #2
    7588:	b2b6      	uxth	r6, r6
    758a:	9a01      	ldr	r2, [sp, #4]
    758c:	5cd3      	ldrb	r3, [r2, r3]
    758e:	021b      	lsls	r3, r3, #8
    7590:	4319      	orrs	r1, r3
    7592:	e7e2      	b.n	755a <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    7594:	7e23      	ldrb	r3, [r4, #24]
    7596:	079b      	lsls	r3, r3, #30
    7598:	d40d      	bmi.n	75b6 <usart_write_buffer_wait+0xa6>
    759a:	4b0a      	ldr	r3, [pc, #40]	; (75c4 <usart_write_buffer_wait+0xb4>)
    759c:	2102      	movs	r1, #2
    759e:	7e22      	ldrb	r2, [r4, #24]
    75a0:	420a      	tst	r2, r1
    75a2:	d10a      	bne.n	75ba <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    75a4:	2b01      	cmp	r3, #1
    75a6:	d00a      	beq.n	75be <usart_write_buffer_wait+0xae>
    75a8:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    75aa:	2b00      	cmp	r3, #0
    75ac:	d1f7      	bne.n	759e <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    75ae:	2000      	movs	r0, #0
    75b0:	e7b8      	b.n	7524 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    75b2:	2012      	movs	r0, #18
    75b4:	e7b6      	b.n	7524 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    75b6:	2000      	movs	r0, #0
    75b8:	e7b4      	b.n	7524 <usart_write_buffer_wait+0x14>
    75ba:	2000      	movs	r0, #0
    75bc:	e7b2      	b.n	7524 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    75be:	2012      	movs	r0, #18
    75c0:	e7b0      	b.n	7524 <usart_write_buffer_wait+0x14>
    75c2:	46c0      	nop			; (mov r8, r8)
    75c4:	0000ffff 	.word	0x0000ffff
    75c8:	00007481 	.word	0x00007481

000075cc <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    75cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    75ce:	46d6      	mov	lr, sl
    75d0:	b500      	push	{lr}
    75d2:	b084      	sub	sp, #16
    75d4:	0004      	movs	r4, r0
    75d6:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    75d8:	2017      	movs	r0, #23
	if (length == 0) {
    75da:	2a00      	cmp	r2, #0
    75dc:	d103      	bne.n	75e6 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    75de:	b004      	add	sp, #16
    75e0:	bc04      	pop	{r2}
    75e2:	4692      	mov	sl, r2
    75e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    75e6:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    75e8:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    75ea:	2b00      	cmp	r3, #0
    75ec:	d0f7      	beq.n	75de <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    75ee:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    75f0:	3a01      	subs	r2, #1
    75f2:	b293      	uxth	r3, r2
    75f4:	469a      	mov	sl, r3
    75f6:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    75f8:	2704      	movs	r7, #4
    75fa:	e019      	b.n	7630 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    75fc:	2300      	movs	r3, #0
    75fe:	aa02      	add	r2, sp, #8
    7600:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    7602:	1d91      	adds	r1, r2, #6
    7604:	0020      	movs	r0, r4
    7606:	4b15      	ldr	r3, [pc, #84]	; (765c <usart_read_buffer_wait+0x90>)
    7608:	4798      	blx	r3
		if (retval != STATUS_OK) {
    760a:	2800      	cmp	r0, #0
    760c:	d1e7      	bne.n	75de <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    760e:	1c69      	adds	r1, r5, #1
    7610:	b289      	uxth	r1, r1
    7612:	ab02      	add	r3, sp, #8
    7614:	88db      	ldrh	r3, [r3, #6]
    7616:	9a01      	ldr	r2, [sp, #4]
    7618:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    761a:	7962      	ldrb	r2, [r4, #5]
    761c:	2a01      	cmp	r2, #1
    761e:	d014      	beq.n	764a <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    7620:	000d      	movs	r5, r1
	while (length--) {
    7622:	4653      	mov	r3, sl
    7624:	3b01      	subs	r3, #1
    7626:	b29b      	uxth	r3, r3
    7628:	469a      	mov	sl, r3
    762a:	4b0d      	ldr	r3, [pc, #52]	; (7660 <usart_read_buffer_wait+0x94>)
    762c:	459a      	cmp	sl, r3
    762e:	d0d6      	beq.n	75de <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    7630:	7e33      	ldrb	r3, [r6, #24]
    7632:	423b      	tst	r3, r7
    7634:	d1e2      	bne.n	75fc <usart_read_buffer_wait+0x30>
    7636:	4b0a      	ldr	r3, [pc, #40]	; (7660 <usart_read_buffer_wait+0x94>)
    7638:	7e32      	ldrb	r2, [r6, #24]
    763a:	423a      	tst	r2, r7
    763c:	d1de      	bne.n	75fc <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    763e:	2b01      	cmp	r3, #1
    7640:	d009      	beq.n	7656 <usart_read_buffer_wait+0x8a>
    7642:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7644:	2b00      	cmp	r3, #0
    7646:	d1f7      	bne.n	7638 <usart_read_buffer_wait+0x6c>
    7648:	e7d8      	b.n	75fc <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    764a:	3502      	adds	r5, #2
    764c:	b2ad      	uxth	r5, r5
    764e:	0a1b      	lsrs	r3, r3, #8
    7650:	9a01      	ldr	r2, [sp, #4]
    7652:	5453      	strb	r3, [r2, r1]
    7654:	e7e5      	b.n	7622 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    7656:	2012      	movs	r0, #18
    7658:	e7c1      	b.n	75de <usart_read_buffer_wait+0x12>
    765a:	46c0      	nop			; (mov r8, r8)
    765c:	000074a7 	.word	0x000074a7
    7660:	0000ffff 	.word	0x0000ffff

00007664 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    7666:	0080      	lsls	r0, r0, #2
    7668:	4b62      	ldr	r3, [pc, #392]	; (77f4 <_usart_interrupt_handler+0x190>)
    766a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    766c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    766e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    7670:	2b00      	cmp	r3, #0
    7672:	d1fc      	bne.n	766e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7674:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    7676:	7da6      	ldrb	r6, [r4, #22]
    7678:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    767a:	2330      	movs	r3, #48	; 0x30
    767c:	5ceb      	ldrb	r3, [r5, r3]
    767e:	2231      	movs	r2, #49	; 0x31
    7680:	5caf      	ldrb	r7, [r5, r2]
    7682:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    7684:	07f3      	lsls	r3, r6, #31
    7686:	d522      	bpl.n	76ce <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    7688:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    768a:	b29b      	uxth	r3, r3
    768c:	2b00      	cmp	r3, #0
    768e:	d01c      	beq.n	76ca <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7690:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7692:	7813      	ldrb	r3, [r2, #0]
    7694:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7696:	1c51      	adds	r1, r2, #1
    7698:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    769a:	7969      	ldrb	r1, [r5, #5]
    769c:	2901      	cmp	r1, #1
    769e:	d00e      	beq.n	76be <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    76a0:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    76a2:	05db      	lsls	r3, r3, #23
    76a4:	0ddb      	lsrs	r3, r3, #23
    76a6:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    76a8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    76aa:	3b01      	subs	r3, #1
    76ac:	b29b      	uxth	r3, r3
    76ae:	85eb      	strh	r3, [r5, #46]	; 0x2e
    76b0:	2b00      	cmp	r3, #0
    76b2:	d10c      	bne.n	76ce <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    76b4:	3301      	adds	r3, #1
    76b6:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    76b8:	3301      	adds	r3, #1
    76ba:	75a3      	strb	r3, [r4, #22]
    76bc:	e007      	b.n	76ce <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    76be:	7851      	ldrb	r1, [r2, #1]
    76c0:	0209      	lsls	r1, r1, #8
    76c2:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    76c4:	3202      	adds	r2, #2
    76c6:	62aa      	str	r2, [r5, #40]	; 0x28
    76c8:	e7eb      	b.n	76a2 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    76ca:	2301      	movs	r3, #1
    76cc:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    76ce:	07b3      	lsls	r3, r6, #30
    76d0:	d506      	bpl.n	76e0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    76d2:	2302      	movs	r3, #2
    76d4:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    76d6:	2200      	movs	r2, #0
    76d8:	3331      	adds	r3, #49	; 0x31
    76da:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    76dc:	07fb      	lsls	r3, r7, #31
    76de:	d41a      	bmi.n	7716 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    76e0:	0773      	lsls	r3, r6, #29
    76e2:	d565      	bpl.n	77b0 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    76e4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    76e6:	b29b      	uxth	r3, r3
    76e8:	2b00      	cmp	r3, #0
    76ea:	d05f      	beq.n	77ac <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    76ec:	8b63      	ldrh	r3, [r4, #26]
    76ee:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    76f0:	071a      	lsls	r2, r3, #28
    76f2:	d414      	bmi.n	771e <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    76f4:	223f      	movs	r2, #63	; 0x3f
    76f6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    76f8:	2b00      	cmp	r3, #0
    76fa:	d034      	beq.n	7766 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    76fc:	079a      	lsls	r2, r3, #30
    76fe:	d511      	bpl.n	7724 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    7700:	221a      	movs	r2, #26
    7702:	2332      	movs	r3, #50	; 0x32
    7704:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7706:	3b30      	subs	r3, #48	; 0x30
    7708:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    770a:	077b      	lsls	r3, r7, #29
    770c:	d550      	bpl.n	77b0 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    770e:	0028      	movs	r0, r5
    7710:	696b      	ldr	r3, [r5, #20]
    7712:	4798      	blx	r3
    7714:	e04c      	b.n	77b0 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7716:	0028      	movs	r0, r5
    7718:	68eb      	ldr	r3, [r5, #12]
    771a:	4798      	blx	r3
    771c:	e7e0      	b.n	76e0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    771e:	2237      	movs	r2, #55	; 0x37
    7720:	4013      	ands	r3, r2
    7722:	e7e9      	b.n	76f8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7724:	075a      	lsls	r2, r3, #29
    7726:	d505      	bpl.n	7734 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    7728:	221e      	movs	r2, #30
    772a:	2332      	movs	r3, #50	; 0x32
    772c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    772e:	3b2e      	subs	r3, #46	; 0x2e
    7730:	8363      	strh	r3, [r4, #26]
    7732:	e7ea      	b.n	770a <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7734:	07da      	lsls	r2, r3, #31
    7736:	d505      	bpl.n	7744 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    7738:	2213      	movs	r2, #19
    773a:	2332      	movs	r3, #50	; 0x32
    773c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    773e:	3b31      	subs	r3, #49	; 0x31
    7740:	8363      	strh	r3, [r4, #26]
    7742:	e7e2      	b.n	770a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    7744:	06da      	lsls	r2, r3, #27
    7746:	d505      	bpl.n	7754 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    7748:	2242      	movs	r2, #66	; 0x42
    774a:	2332      	movs	r3, #50	; 0x32
    774c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    774e:	3b22      	subs	r3, #34	; 0x22
    7750:	8363      	strh	r3, [r4, #26]
    7752:	e7da      	b.n	770a <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    7754:	2220      	movs	r2, #32
    7756:	421a      	tst	r2, r3
    7758:	d0d7      	beq.n	770a <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    775a:	3221      	adds	r2, #33	; 0x21
    775c:	2332      	movs	r3, #50	; 0x32
    775e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7760:	3b12      	subs	r3, #18
    7762:	8363      	strh	r3, [r4, #26]
    7764:	e7d1      	b.n	770a <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7766:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7768:	05db      	lsls	r3, r3, #23
    776a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    776c:	b2da      	uxtb	r2, r3
    776e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7770:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    7772:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7774:	1c51      	adds	r1, r2, #1
    7776:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7778:	7969      	ldrb	r1, [r5, #5]
    777a:	2901      	cmp	r1, #1
    777c:	d010      	beq.n	77a0 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    777e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7780:	3b01      	subs	r3, #1
    7782:	b29b      	uxth	r3, r3
    7784:	85ab      	strh	r3, [r5, #44]	; 0x2c
    7786:	2b00      	cmp	r3, #0
    7788:	d112      	bne.n	77b0 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    778a:	3304      	adds	r3, #4
    778c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    778e:	2200      	movs	r2, #0
    7790:	332e      	adds	r3, #46	; 0x2e
    7792:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    7794:	07bb      	lsls	r3, r7, #30
    7796:	d50b      	bpl.n	77b0 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    7798:	0028      	movs	r0, r5
    779a:	692b      	ldr	r3, [r5, #16]
    779c:	4798      	blx	r3
    779e:	e007      	b.n	77b0 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    77a0:	0a1b      	lsrs	r3, r3, #8
    77a2:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    77a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    77a6:	3301      	adds	r3, #1
    77a8:	626b      	str	r3, [r5, #36]	; 0x24
    77aa:	e7e8      	b.n	777e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    77ac:	2304      	movs	r3, #4
    77ae:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    77b0:	06f3      	lsls	r3, r6, #27
    77b2:	d504      	bpl.n	77be <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    77b4:	2310      	movs	r3, #16
    77b6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    77b8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    77ba:	06fb      	lsls	r3, r7, #27
    77bc:	d40e      	bmi.n	77dc <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    77be:	06b3      	lsls	r3, r6, #26
    77c0:	d504      	bpl.n	77cc <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    77c2:	2320      	movs	r3, #32
    77c4:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    77c6:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    77c8:	073b      	lsls	r3, r7, #28
    77ca:	d40b      	bmi.n	77e4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    77cc:	0733      	lsls	r3, r6, #28
    77ce:	d504      	bpl.n	77da <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    77d0:	2308      	movs	r3, #8
    77d2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    77d4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    77d6:	06bb      	lsls	r3, r7, #26
    77d8:	d408      	bmi.n	77ec <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    77da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    77dc:	0028      	movs	r0, r5
    77de:	69eb      	ldr	r3, [r5, #28]
    77e0:	4798      	blx	r3
    77e2:	e7ec      	b.n	77be <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    77e4:	0028      	movs	r0, r5
    77e6:	69ab      	ldr	r3, [r5, #24]
    77e8:	4798      	blx	r3
    77ea:	e7ef      	b.n	77cc <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    77ec:	6a2b      	ldr	r3, [r5, #32]
    77ee:	0028      	movs	r0, r5
    77f0:	4798      	blx	r3
}
    77f2:	e7f2      	b.n	77da <_usart_interrupt_handler+0x176>
    77f4:	20001d3c 	.word	0x20001d3c

000077f8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    77f8:	b510      	push	{r4, lr}
	switch (clock_source) {
    77fa:	2808      	cmp	r0, #8
    77fc:	d803      	bhi.n	7806 <system_clock_source_get_hz+0xe>
    77fe:	0080      	lsls	r0, r0, #2
    7800:	4b1d      	ldr	r3, [pc, #116]	; (7878 <system_clock_source_get_hz+0x80>)
    7802:	581b      	ldr	r3, [r3, r0]
    7804:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    7806:	2000      	movs	r0, #0
    7808:	e034      	b.n	7874 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
    780a:	4b1c      	ldr	r3, [pc, #112]	; (787c <system_clock_source_get_hz+0x84>)
    780c:	6918      	ldr	r0, [r3, #16]
    780e:	e031      	b.n	7874 <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    7810:	4b1b      	ldr	r3, [pc, #108]	; (7880 <system_clock_source_get_hz+0x88>)
    7812:	7d18      	ldrb	r0, [r3, #20]
    7814:	0700      	lsls	r0, r0, #28
    7816:	0f80      	lsrs	r0, r0, #30
    7818:	1c43      	adds	r3, r0, #1
    781a:	481a      	ldr	r0, [pc, #104]	; (7884 <system_clock_source_get_hz+0x8c>)
    781c:	4358      	muls	r0, r3
    781e:	e029      	b.n	7874 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
    7820:	4b16      	ldr	r3, [pc, #88]	; (787c <system_clock_source_get_hz+0x84>)
    7822:	6958      	ldr	r0, [r3, #20]
    7824:	e026      	b.n	7874 <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    7826:	4b15      	ldr	r3, [pc, #84]	; (787c <system_clock_source_get_hz+0x84>)
    7828:	681b      	ldr	r3, [r3, #0]
			return 0;
    782a:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    782c:	079b      	lsls	r3, r3, #30
    782e:	d521      	bpl.n	7874 <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    7830:	4913      	ldr	r1, [pc, #76]	; (7880 <system_clock_source_get_hz+0x88>)
    7832:	2280      	movs	r2, #128	; 0x80
    7834:	0052      	lsls	r2, r2, #1
    7836:	68cb      	ldr	r3, [r1, #12]
    7838:	4213      	tst	r3, r2
    783a:	d0fc      	beq.n	7836 <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    783c:	4b0f      	ldr	r3, [pc, #60]	; (787c <system_clock_source_get_hz+0x84>)
    783e:	681a      	ldr	r2, [r3, #0]
    7840:	2324      	movs	r3, #36	; 0x24
    7842:	4013      	ands	r3, r2
    7844:	2b04      	cmp	r3, #4
    7846:	d001      	beq.n	784c <system_clock_source_get_hz+0x54>
			return 48000000UL;
    7848:	480f      	ldr	r0, [pc, #60]	; (7888 <system_clock_source_get_hz+0x90>)
    784a:	e013      	b.n	7874 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    784c:	2000      	movs	r0, #0
    784e:	4b0f      	ldr	r3, [pc, #60]	; (788c <system_clock_source_get_hz+0x94>)
    7850:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    7852:	4b0a      	ldr	r3, [pc, #40]	; (787c <system_clock_source_get_hz+0x84>)
    7854:	689b      	ldr	r3, [r3, #8]
    7856:	041b      	lsls	r3, r3, #16
    7858:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    785a:	4358      	muls	r0, r3
    785c:	e00a      	b.n	7874 <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    785e:	2328      	movs	r3, #40	; 0x28
    7860:	4a07      	ldr	r2, [pc, #28]	; (7880 <system_clock_source_get_hz+0x88>)
    7862:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    7864:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    7866:	079b      	lsls	r3, r3, #30
    7868:	d504      	bpl.n	7874 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
    786a:	4b04      	ldr	r3, [pc, #16]	; (787c <system_clock_source_get_hz+0x84>)
    786c:	68d8      	ldr	r0, [r3, #12]
    786e:	e001      	b.n	7874 <system_clock_source_get_hz+0x7c>
		return 32768UL;
    7870:	2080      	movs	r0, #128	; 0x80
    7872:	0200      	lsls	r0, r0, #8
	}
}
    7874:	bd10      	pop	{r4, pc}
    7876:	46c0      	nop			; (mov r8, r8)
    7878:	00011d34 	.word	0x00011d34
    787c:	200000e4 	.word	0x200000e4
    7880:	40000c00 	.word	0x40000c00
    7884:	003d0900 	.word	0x003d0900
    7888:	02dc6c00 	.word	0x02dc6c00
    788c:	00007d49 	.word	0x00007d49

00007890 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    7890:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    7892:	4c0b      	ldr	r4, [pc, #44]	; (78c0 <system_clock_source_osc16m_set_config+0x30>)
    7894:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    7896:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    7898:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    789a:	7802      	ldrb	r2, [r0, #0]
    789c:	2103      	movs	r1, #3
    789e:	4011      	ands	r1, r2
    78a0:	0089      	lsls	r1, r1, #2
    78a2:	220c      	movs	r2, #12
    78a4:	4393      	bics	r3, r2
    78a6:	430b      	orrs	r3, r1
    78a8:	3a0b      	subs	r2, #11
    78aa:	4032      	ands	r2, r6
    78ac:	0192      	lsls	r2, r2, #6
    78ae:	2140      	movs	r1, #64	; 0x40
    78b0:	438b      	bics	r3, r1
    78b2:	4313      	orrs	r3, r2
    78b4:	01ed      	lsls	r5, r5, #7
    78b6:	227f      	movs	r2, #127	; 0x7f
    78b8:	4013      	ands	r3, r2
    78ba:	432b      	orrs	r3, r5
    78bc:	7523      	strb	r3, [r4, #20]
}
    78be:	bd70      	pop	{r4, r5, r6, pc}
    78c0:	40000c00 	.word	0x40000c00

000078c4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    78c4:	2808      	cmp	r0, #8
    78c6:	d803      	bhi.n	78d0 <system_clock_source_enable+0xc>
    78c8:	0080      	lsls	r0, r0, #2
    78ca:	4b29      	ldr	r3, [pc, #164]	; (7970 <system_clock_source_enable+0xac>)
    78cc:	581b      	ldr	r3, [r3, r0]
    78ce:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    78d0:	2017      	movs	r0, #23
    78d2:	e04b      	b.n	796c <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    78d4:	4a27      	ldr	r2, [pc, #156]	; (7974 <system_clock_source_enable+0xb0>)
    78d6:	7d13      	ldrb	r3, [r2, #20]
    78d8:	2102      	movs	r1, #2
    78da:	430b      	orrs	r3, r1
    78dc:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    78de:	2000      	movs	r0, #0
    78e0:	e044      	b.n	796c <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    78e2:	4a25      	ldr	r2, [pc, #148]	; (7978 <system_clock_source_enable+0xb4>)
    78e4:	6993      	ldr	r3, [r2, #24]
    78e6:	2102      	movs	r1, #2
    78e8:	430b      	orrs	r3, r1
    78ea:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    78ec:	2000      	movs	r0, #0
		break;
    78ee:	e03d      	b.n	796c <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    78f0:	4a20      	ldr	r2, [pc, #128]	; (7974 <system_clock_source_enable+0xb0>)
    78f2:	8a13      	ldrh	r3, [r2, #16]
    78f4:	2102      	movs	r1, #2
    78f6:	430b      	orrs	r3, r1
    78f8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    78fa:	2000      	movs	r0, #0
		break;
    78fc:	e036      	b.n	796c <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    78fe:	4a1e      	ldr	r2, [pc, #120]	; (7978 <system_clock_source_enable+0xb4>)
    7900:	6953      	ldr	r3, [r2, #20]
    7902:	2102      	movs	r1, #2
    7904:	430b      	orrs	r3, r1
    7906:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    7908:	2000      	movs	r0, #0
		break;
    790a:	e02f      	b.n	796c <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    790c:	491b      	ldr	r1, [pc, #108]	; (797c <system_clock_source_enable+0xb8>)
    790e:	680b      	ldr	r3, [r1, #0]
    7910:	2202      	movs	r2, #2
    7912:	4313      	orrs	r3, r2
    7914:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    7916:	4b17      	ldr	r3, [pc, #92]	; (7974 <system_clock_source_enable+0xb0>)
    7918:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    791a:	0019      	movs	r1, r3
    791c:	32fe      	adds	r2, #254	; 0xfe
    791e:	68cb      	ldr	r3, [r1, #12]
    7920:	4213      	tst	r3, r2
    7922:	d0fc      	beq.n	791e <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    7924:	4a15      	ldr	r2, [pc, #84]	; (797c <system_clock_source_enable+0xb8>)
    7926:	6891      	ldr	r1, [r2, #8]
    7928:	4b12      	ldr	r3, [pc, #72]	; (7974 <system_clock_source_enable+0xb0>)
    792a:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    792c:	6852      	ldr	r2, [r2, #4]
    792e:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    7930:	2200      	movs	r2, #0
    7932:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    7934:	0019      	movs	r1, r3
    7936:	3201      	adds	r2, #1
    7938:	32ff      	adds	r2, #255	; 0xff
    793a:	68cb      	ldr	r3, [r1, #12]
    793c:	4213      	tst	r3, r2
    793e:	d0fc      	beq.n	793a <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    7940:	4b0e      	ldr	r3, [pc, #56]	; (797c <system_clock_source_enable+0xb8>)
    7942:	681b      	ldr	r3, [r3, #0]
    7944:	b29b      	uxth	r3, r3
    7946:	4a0b      	ldr	r2, [pc, #44]	; (7974 <system_clock_source_enable+0xb0>)
    7948:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    794a:	2000      	movs	r0, #0
    794c:	e00e      	b.n	796c <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    794e:	4909      	ldr	r1, [pc, #36]	; (7974 <system_clock_source_enable+0xb0>)
    7950:	2228      	movs	r2, #40	; 0x28
    7952:	5c8b      	ldrb	r3, [r1, r2]
    7954:	2002      	movs	r0, #2
    7956:	4303      	orrs	r3, r0
    7958:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    795a:	0008      	movs	r0, r1
    795c:	2138      	movs	r1, #56	; 0x38
    795e:	3a26      	subs	r2, #38	; 0x26
    7960:	5c43      	ldrb	r3, [r0, r1]
    7962:	4213      	tst	r3, r2
    7964:	d1fc      	bne.n	7960 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    7966:	2000      	movs	r0, #0
    7968:	e000      	b.n	796c <system_clock_source_enable+0xa8>
		return STATUS_OK;
    796a:	2000      	movs	r0, #0
}
    796c:	4770      	bx	lr
    796e:	46c0      	nop			; (mov r8, r8)
    7970:	00011d58 	.word	0x00011d58
    7974:	40000c00 	.word	0x40000c00
    7978:	40001000 	.word	0x40001000
    797c:	200000e4 	.word	0x200000e4

00007980 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    7980:	2808      	cmp	r0, #8
    7982:	d832      	bhi.n	79ea <system_clock_source_disable+0x6a>
    7984:	0080      	lsls	r0, r0, #2
    7986:	4b1a      	ldr	r3, [pc, #104]	; (79f0 <system_clock_source_disable+0x70>)
    7988:	581b      	ldr	r3, [r3, r0]
    798a:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    798c:	4a19      	ldr	r2, [pc, #100]	; (79f4 <system_clock_source_disable+0x74>)
    798e:	7d13      	ldrb	r3, [r2, #20]
    7990:	2102      	movs	r1, #2
    7992:	438b      	bics	r3, r1
    7994:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    7996:	2000      	movs	r0, #0
}
    7998:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    799a:	4a17      	ldr	r2, [pc, #92]	; (79f8 <system_clock_source_disable+0x78>)
    799c:	6993      	ldr	r3, [r2, #24]
    799e:	2102      	movs	r1, #2
    79a0:	438b      	bics	r3, r1
    79a2:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    79a4:	2000      	movs	r0, #0
		break;
    79a6:	e7f7      	b.n	7998 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    79a8:	4a12      	ldr	r2, [pc, #72]	; (79f4 <system_clock_source_disable+0x74>)
    79aa:	8a13      	ldrh	r3, [r2, #16]
    79ac:	2102      	movs	r1, #2
    79ae:	438b      	bics	r3, r1
    79b0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    79b2:	2000      	movs	r0, #0
		break;
    79b4:	e7f0      	b.n	7998 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    79b6:	4a10      	ldr	r2, [pc, #64]	; (79f8 <system_clock_source_disable+0x78>)
    79b8:	6953      	ldr	r3, [r2, #20]
    79ba:	2102      	movs	r1, #2
    79bc:	438b      	bics	r3, r1
    79be:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    79c0:	2000      	movs	r0, #0
		break;
    79c2:	e7e9      	b.n	7998 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    79c4:	4b0d      	ldr	r3, [pc, #52]	; (79fc <system_clock_source_disable+0x7c>)
    79c6:	681a      	ldr	r2, [r3, #0]
    79c8:	2102      	movs	r1, #2
    79ca:	438a      	bics	r2, r1
    79cc:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    79ce:	681b      	ldr	r3, [r3, #0]
    79d0:	b29b      	uxth	r3, r3
    79d2:	4a08      	ldr	r2, [pc, #32]	; (79f4 <system_clock_source_disable+0x74>)
    79d4:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    79d6:	2000      	movs	r0, #0
		break;
    79d8:	e7de      	b.n	7998 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    79da:	4906      	ldr	r1, [pc, #24]	; (79f4 <system_clock_source_disable+0x74>)
    79dc:	2228      	movs	r2, #40	; 0x28
    79de:	5c8b      	ldrb	r3, [r1, r2]
    79e0:	2002      	movs	r0, #2
    79e2:	4383      	bics	r3, r0
    79e4:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    79e6:	2000      	movs	r0, #0
		break;
    79e8:	e7d6      	b.n	7998 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    79ea:	2017      	movs	r0, #23
    79ec:	e7d4      	b.n	7998 <system_clock_source_disable+0x18>
    79ee:	46c0      	nop			; (mov r8, r8)
    79f0:	00011d7c 	.word	0x00011d7c
    79f4:	40000c00 	.word	0x40000c00
    79f8:	40001000 	.word	0x40001000
    79fc:	200000e4 	.word	0x200000e4

00007a00 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    7a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a02:	46ce      	mov	lr, r9
    7a04:	4647      	mov	r7, r8
    7a06:	b580      	push	{r7, lr}
    7a08:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    7a0a:	2280      	movs	r2, #128	; 0x80
    7a0c:	0052      	lsls	r2, r2, #1
    7a0e:	4b3d      	ldr	r3, [pc, #244]	; (7b04 <system_clock_init+0x104>)
    7a10:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    7a12:	3afd      	subs	r2, #253	; 0xfd
    7a14:	4b3c      	ldr	r3, [pc, #240]	; (7b08 <system_clock_init+0x108>)
    7a16:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    7a18:	4a3c      	ldr	r2, [pc, #240]	; (7b0c <system_clock_init+0x10c>)
    7a1a:	6853      	ldr	r3, [r2, #4]
    7a1c:	211e      	movs	r1, #30
    7a1e:	438b      	bics	r3, r1
    7a20:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    7a22:	2380      	movs	r3, #128	; 0x80
    7a24:	05db      	lsls	r3, r3, #23
    7a26:	789b      	ldrb	r3, [r3, #2]
    7a28:	2b02      	cmp	r3, #2
    7a2a:	d009      	beq.n	7a40 <system_clock_init+0x40>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    7a2c:	2380      	movs	r3, #128	; 0x80
    7a2e:	05db      	lsls	r3, r3, #23
    7a30:	2201      	movs	r2, #1
    7a32:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    7a34:	3201      	adds	r2, #1
    7a36:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    7a38:	001a      	movs	r2, r3
    7a3a:	7993      	ldrb	r3, [r2, #6]
    7a3c:	2b00      	cmp	r3, #0
    7a3e:	d0fc      	beq.n	7a3a <system_clock_init+0x3a>
	config->division_factor    = 1;
    7a40:	a901      	add	r1, sp, #4
    7a42:	2501      	movs	r5, #1
    7a44:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    7a46:	2400      	movs	r4, #0
    7a48:	704c      	strb	r4, [r1, #1]
	config->run_in_standby     = false;
    7a4a:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    7a4c:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    7a4e:	2303      	movs	r3, #3
    7a50:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    7a52:	2000      	movs	r0, #0
    7a54:	4b2e      	ldr	r3, [pc, #184]	; (7b10 <system_clock_init+0x110>)
    7a56:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    7a58:	2006      	movs	r0, #6
    7a5a:	4b2e      	ldr	r3, [pc, #184]	; (7b14 <system_clock_init+0x114>)
    7a5c:	4798      	blx	r3
	config->run_in_standby  = false;
    7a5e:	466b      	mov	r3, sp
    7a60:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    7a62:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    7a64:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    7a66:	4668      	mov	r0, sp
    7a68:	4b2b      	ldr	r3, [pc, #172]	; (7b18 <system_clock_init+0x118>)
    7a6a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    7a6c:	2006      	movs	r0, #6
    7a6e:	4b2b      	ldr	r3, [pc, #172]	; (7b1c <system_clock_init+0x11c>)
    7a70:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    7a72:	4924      	ldr	r1, [pc, #144]	; (7b04 <system_clock_init+0x104>)
    7a74:	2210      	movs	r2, #16
    7a76:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    7a78:	421a      	tst	r2, r3
    7a7a:	d0fc      	beq.n	7a76 <system_clock_init+0x76>
	config->division_factor    = 1;
    7a7c:	ac01      	add	r4, sp, #4
    7a7e:	2601      	movs	r6, #1
    7a80:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    7a82:	2500      	movs	r5, #0
    7a84:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    7a86:	2306      	movs	r3, #6
    7a88:	4699      	mov	r9, r3
    7a8a:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    7a8c:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    7a8e:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    7a90:	0021      	movs	r1, r4
    7a92:	2000      	movs	r0, #0
    7a94:	4b1e      	ldr	r3, [pc, #120]	; (7b10 <system_clock_init+0x110>)
    7a96:	4698      	mov	r8, r3
    7a98:	4798      	blx	r3
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    7a9a:	4a1a      	ldr	r2, [pc, #104]	; (7b04 <system_clock_init+0x104>)
    7a9c:	7d13      	ldrb	r3, [r2, #20]
    7a9e:	2180      	movs	r1, #128	; 0x80
    7aa0:	430b      	orrs	r3, r1
    7aa2:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    7aa4:	4b1e      	ldr	r3, [pc, #120]	; (7b20 <system_clock_init+0x120>)
    7aa6:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    7aa8:	4f1e      	ldr	r7, [pc, #120]	; (7b24 <system_clock_init+0x124>)
    7aaa:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    7aac:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    7aae:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    7ab0:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    7ab2:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    7ab4:	464b      	mov	r3, r9
    7ab6:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    7ab8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    7aba:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    7abc:	0021      	movs	r1, r4
    7abe:	2000      	movs	r0, #0
    7ac0:	47c0      	blx	r8
    7ac2:	2000      	movs	r0, #0
    7ac4:	4b18      	ldr	r3, [pc, #96]	; (7b28 <system_clock_init+0x128>)
    7ac6:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    7ac8:	2000      	movs	r0, #0
    7aca:	4b18      	ldr	r3, [pc, #96]	; (7b2c <system_clock_init+0x12c>)
    7acc:	4798      	blx	r3
    7ace:	7939      	ldrb	r1, [r7, #4]
    7ad0:	b2c9      	uxtb	r1, r1
    7ad2:	4b17      	ldr	r3, [pc, #92]	; (7b30 <system_clock_init+0x130>)
    7ad4:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    7ad6:	4b17      	ldr	r3, [pc, #92]	; (7b34 <system_clock_init+0x134>)
    7ad8:	4298      	cmp	r0, r3
    7ada:	d80e      	bhi.n	7afa <system_clock_init+0xfa>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    7adc:	2380      	movs	r3, #128	; 0x80
    7ade:	05db      	lsls	r3, r3, #23
    7ae0:	789b      	ldrb	r3, [r3, #2]
    7ae2:	2b00      	cmp	r3, #0
    7ae4:	d009      	beq.n	7afa <system_clock_init+0xfa>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    7ae6:	2380      	movs	r3, #128	; 0x80
    7ae8:	05db      	lsls	r3, r3, #23
    7aea:	2201      	movs	r2, #1
    7aec:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    7aee:	2200      	movs	r2, #0
    7af0:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    7af2:	001a      	movs	r2, r3
    7af4:	7993      	ldrb	r3, [r2, #6]
    7af6:	2b00      	cmp	r3, #0
    7af8:	d0fc      	beq.n	7af4 <system_clock_init+0xf4>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    7afa:	b005      	add	sp, #20
    7afc:	bc0c      	pop	{r2, r3}
    7afe:	4690      	mov	r8, r2
    7b00:	4699      	mov	r9, r3
    7b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b04:	40000c00 	.word	0x40000c00
    7b08:	40001400 	.word	0x40001400
    7b0c:	41004000 	.word	0x41004000
    7b10:	00007b5d 	.word	0x00007b5d
    7b14:	00007981 	.word	0x00007981
    7b18:	00007891 	.word	0x00007891
    7b1c:	000078c5 	.word	0x000078c5
    7b20:	00007b39 	.word	0x00007b39
    7b24:	40000400 	.word	0x40000400
    7b28:	00007c09 	.word	0x00007c09
    7b2c:	00007c49 	.word	0x00007c49
    7b30:	0000faad 	.word	0x0000faad
    7b34:	00b71b00 	.word	0x00b71b00

00007b38 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    7b38:	4a06      	ldr	r2, [pc, #24]	; (7b54 <system_gclk_init+0x1c>)
    7b3a:	6953      	ldr	r3, [r2, #20]
    7b3c:	2140      	movs	r1, #64	; 0x40
    7b3e:	430b      	orrs	r3, r1
    7b40:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    7b42:	2201      	movs	r2, #1
    7b44:	4b04      	ldr	r3, [pc, #16]	; (7b58 <system_gclk_init+0x20>)
    7b46:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    7b48:	0019      	movs	r1, r3
    7b4a:	780b      	ldrb	r3, [r1, #0]
    7b4c:	4213      	tst	r3, r2
    7b4e:	d1fc      	bne.n	7b4a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    7b50:	4770      	bx	lr
    7b52:	46c0      	nop			; (mov r8, r8)
    7b54:	40000400 	.word	0x40000400
    7b58:	40001800 	.word	0x40001800

00007b5c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    7b5c:	b570      	push	{r4, r5, r6, lr}
    7b5e:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    7b60:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    7b62:	784b      	ldrb	r3, [r1, #1]
    7b64:	2b00      	cmp	r3, #0
    7b66:	d002      	beq.n	7b6e <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    7b68:	2380      	movs	r3, #128	; 0x80
    7b6a:	00db      	lsls	r3, r3, #3
    7b6c:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    7b6e:	7a4b      	ldrb	r3, [r1, #9]
    7b70:	2b00      	cmp	r3, #0
    7b72:	d002      	beq.n	7b7a <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    7b74:	2380      	movs	r3, #128	; 0x80
    7b76:	011b      	lsls	r3, r3, #4
    7b78:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7b7a:	6848      	ldr	r0, [r1, #4]
    7b7c:	2801      	cmp	r0, #1
    7b7e:	d90f      	bls.n	7ba0 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    7b80:	1e43      	subs	r3, r0, #1
    7b82:	4218      	tst	r0, r3
    7b84:	d131      	bne.n	7bea <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    7b86:	2802      	cmp	r0, #2
    7b88:	d92d      	bls.n	7be6 <system_gclk_gen_set_config+0x8a>
    7b8a:	2302      	movs	r3, #2
    7b8c:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    7b8e:	3201      	adds	r2, #1
						mask <<= 1) {
    7b90:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    7b92:	4298      	cmp	r0, r3
    7b94:	d8fb      	bhi.n	7b8e <system_gclk_gen_set_config+0x32>
    7b96:	2380      	movs	r3, #128	; 0x80
    7b98:	015b      	lsls	r3, r3, #5
    7b9a:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    7b9c:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    7b9e:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    7ba0:	7a0b      	ldrb	r3, [r1, #8]
    7ba2:	2b00      	cmp	r3, #0
    7ba4:	d002      	beq.n	7bac <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    7ba6:	2380      	movs	r3, #128	; 0x80
    7ba8:	019b      	lsls	r3, r3, #6
    7baa:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7bac:	2604      	movs	r6, #4
    7bae:	40a6      	lsls	r6, r4
    7bb0:	4911      	ldr	r1, [pc, #68]	; (7bf8 <system_gclk_gen_set_config+0x9c>)
    7bb2:	4a12      	ldr	r2, [pc, #72]	; (7bfc <system_gclk_gen_set_config+0xa0>)
    7bb4:	684b      	ldr	r3, [r1, #4]
    7bb6:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    7bb8:	421e      	tst	r6, r3
    7bba:	d1fb      	bne.n	7bb4 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    7bbc:	4b10      	ldr	r3, [pc, #64]	; (7c00 <system_gclk_gen_set_config+0xa4>)
    7bbe:	4798      	blx	r3
    7bc0:	00a4      	lsls	r4, r4, #2
    7bc2:	4b0d      	ldr	r3, [pc, #52]	; (7bf8 <system_gclk_gen_set_config+0x9c>)
    7bc4:	469c      	mov	ip, r3
    7bc6:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    7bc8:	6a22      	ldr	r2, [r4, #32]
    7bca:	2380      	movs	r3, #128	; 0x80
    7bcc:	005b      	lsls	r3, r3, #1
    7bce:	401a      	ands	r2, r3
    7bd0:	432a      	orrs	r2, r5
    7bd2:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7bd4:	4661      	mov	r1, ip
    7bd6:	4a09      	ldr	r2, [pc, #36]	; (7bfc <system_gclk_gen_set_config+0xa0>)
    7bd8:	684b      	ldr	r3, [r1, #4]
    7bda:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    7bdc:	421e      	tst	r6, r3
    7bde:	d1fb      	bne.n	7bd8 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    7be0:	4b08      	ldr	r3, [pc, #32]	; (7c04 <system_gclk_gen_set_config+0xa8>)
    7be2:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    7be4:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    7be6:	2200      	movs	r2, #0
    7be8:	e7d5      	b.n	7b96 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    7bea:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7bec:	2380      	movs	r3, #128	; 0x80
    7bee:	009b      	lsls	r3, r3, #2
    7bf0:	4318      	orrs	r0, r3
    7bf2:	4305      	orrs	r5, r0
    7bf4:	e7d4      	b.n	7ba0 <system_gclk_gen_set_config+0x44>
    7bf6:	46c0      	nop			; (mov r8, r8)
    7bf8:	40001800 	.word	0x40001800
    7bfc:	000007fc 	.word	0x000007fc
    7c00:	00006265 	.word	0x00006265
    7c04:	000062a5 	.word	0x000062a5

00007c08 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    7c08:	b510      	push	{r4, lr}
    7c0a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7c0c:	2204      	movs	r2, #4
    7c0e:	4082      	lsls	r2, r0
    7c10:	4809      	ldr	r0, [pc, #36]	; (7c38 <system_gclk_gen_enable+0x30>)
    7c12:	490a      	ldr	r1, [pc, #40]	; (7c3c <system_gclk_gen_enable+0x34>)
    7c14:	6843      	ldr	r3, [r0, #4]
    7c16:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    7c18:	421a      	tst	r2, r3
    7c1a:	d1fb      	bne.n	7c14 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    7c1c:	4b08      	ldr	r3, [pc, #32]	; (7c40 <system_gclk_gen_enable+0x38>)
    7c1e:	4798      	blx	r3
    7c20:	00a4      	lsls	r4, r4, #2
    7c22:	4b05      	ldr	r3, [pc, #20]	; (7c38 <system_gclk_gen_enable+0x30>)
    7c24:	469c      	mov	ip, r3
    7c26:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    7c28:	6a22      	ldr	r2, [r4, #32]
    7c2a:	2380      	movs	r3, #128	; 0x80
    7c2c:	005b      	lsls	r3, r3, #1
    7c2e:	4313      	orrs	r3, r2
    7c30:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    7c32:	4b04      	ldr	r3, [pc, #16]	; (7c44 <system_gclk_gen_enable+0x3c>)
    7c34:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    7c36:	bd10      	pop	{r4, pc}
    7c38:	40001800 	.word	0x40001800
    7c3c:	000007fc 	.word	0x000007fc
    7c40:	00006265 	.word	0x00006265
    7c44:	000062a5 	.word	0x000062a5

00007c48 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c4a:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7c4c:	2204      	movs	r2, #4
    7c4e:	4082      	lsls	r2, r0
    7c50:	4812      	ldr	r0, [pc, #72]	; (7c9c <system_gclk_gen_get_hz+0x54>)
    7c52:	4913      	ldr	r1, [pc, #76]	; (7ca0 <system_gclk_gen_get_hz+0x58>)
    7c54:	6843      	ldr	r3, [r0, #4]
    7c56:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    7c58:	421a      	tst	r2, r3
    7c5a:	d1fb      	bne.n	7c54 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    7c5c:	4b11      	ldr	r3, [pc, #68]	; (7ca4 <system_gclk_gen_get_hz+0x5c>)
    7c5e:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    7c60:	4f0e      	ldr	r7, [pc, #56]	; (7c9c <system_gclk_gen_get_hz+0x54>)
    7c62:	3408      	adds	r4, #8
    7c64:	00a4      	lsls	r4, r4, #2
    7c66:	59e0      	ldr	r0, [r4, r7]
    7c68:	0700      	lsls	r0, r0, #28
    7c6a:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7c6c:	4b0e      	ldr	r3, [pc, #56]	; (7ca8 <system_gclk_gen_get_hz+0x60>)
    7c6e:	4798      	blx	r3
    7c70:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    7c72:	59e5      	ldr	r5, [r4, r7]
    7c74:	04ed      	lsls	r5, r5, #19
    7c76:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    7c78:	59e4      	ldr	r4, [r4, r7]
    7c7a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    7c7c:	4b0b      	ldr	r3, [pc, #44]	; (7cac <system_gclk_gen_get_hz+0x64>)
    7c7e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7c80:	2d00      	cmp	r5, #0
    7c82:	d107      	bne.n	7c94 <system_gclk_gen_get_hz+0x4c>
    7c84:	2c01      	cmp	r4, #1
    7c86:	d907      	bls.n	7c98 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    7c88:	0021      	movs	r1, r4
    7c8a:	0030      	movs	r0, r6
    7c8c:	4b08      	ldr	r3, [pc, #32]	; (7cb0 <system_gclk_gen_get_hz+0x68>)
    7c8e:	4798      	blx	r3
    7c90:	0006      	movs	r6, r0
    7c92:	e001      	b.n	7c98 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    7c94:	3401      	adds	r4, #1
    7c96:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    7c98:	0030      	movs	r0, r6
    7c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c9c:	40001800 	.word	0x40001800
    7ca0:	000007fc 	.word	0x000007fc
    7ca4:	00006265 	.word	0x00006265
    7ca8:	000077f9 	.word	0x000077f9
    7cac:	000062a5 	.word	0x000062a5
    7cb0:	0000faad 	.word	0x0000faad

00007cb4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    7cb4:	b510      	push	{r4, lr}
    7cb6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7cb8:	4b09      	ldr	r3, [pc, #36]	; (7ce0 <system_gclk_chan_enable+0x2c>)
    7cba:	4798      	blx	r3
    7cbc:	00a0      	lsls	r0, r4, #2
    7cbe:	4b09      	ldr	r3, [pc, #36]	; (7ce4 <system_gclk_chan_enable+0x30>)
    7cc0:	469c      	mov	ip, r3
    7cc2:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    7cc4:	2280      	movs	r2, #128	; 0x80
    7cc6:	5883      	ldr	r3, [r0, r2]
    7cc8:	2140      	movs	r1, #64	; 0x40
    7cca:	430b      	orrs	r3, r1
    7ccc:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    7cce:	3140      	adds	r1, #64	; 0x40
    7cd0:	3a40      	subs	r2, #64	; 0x40
    7cd2:	5843      	ldr	r3, [r0, r1]
    7cd4:	421a      	tst	r2, r3
    7cd6:	d0fc      	beq.n	7cd2 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    7cd8:	4b03      	ldr	r3, [pc, #12]	; (7ce8 <system_gclk_chan_enable+0x34>)
    7cda:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7cdc:	bd10      	pop	{r4, pc}
    7cde:	46c0      	nop			; (mov r8, r8)
    7ce0:	00006265 	.word	0x00006265
    7ce4:	40001800 	.word	0x40001800
    7ce8:	000062a5 	.word	0x000062a5

00007cec <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7cec:	b510      	push	{r4, lr}
    7cee:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7cf0:	4b09      	ldr	r3, [pc, #36]	; (7d18 <system_gclk_chan_disable+0x2c>)
    7cf2:	4798      	blx	r3
    7cf4:	00a0      	lsls	r0, r4, #2
    7cf6:	4b09      	ldr	r3, [pc, #36]	; (7d1c <system_gclk_chan_disable+0x30>)
    7cf8:	469c      	mov	ip, r3
    7cfa:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    7cfc:	2280      	movs	r2, #128	; 0x80
    7cfe:	5883      	ldr	r3, [r0, r2]
    7d00:	2140      	movs	r1, #64	; 0x40
    7d02:	438b      	bics	r3, r1
    7d04:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    7d06:	3140      	adds	r1, #64	; 0x40
    7d08:	3a40      	subs	r2, #64	; 0x40
    7d0a:	5843      	ldr	r3, [r0, r1]
    7d0c:	421a      	tst	r2, r3
    7d0e:	d1fc      	bne.n	7d0a <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    7d10:	4b03      	ldr	r3, [pc, #12]	; (7d20 <system_gclk_chan_disable+0x34>)
    7d12:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    7d14:	bd10      	pop	{r4, pc}
    7d16:	46c0      	nop			; (mov r8, r8)
    7d18:	00006265 	.word	0x00006265
    7d1c:	40001800 	.word	0x40001800
    7d20:	000062a5 	.word	0x000062a5

00007d24 <system_gclk_chan_set_config>:
{
    7d24:	b570      	push	{r4, r5, r6, lr}
    7d26:	0004      	movs	r4, r0
    7d28:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    7d2a:	4b05      	ldr	r3, [pc, #20]	; (7d40 <system_gclk_chan_set_config+0x1c>)
    7d2c:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    7d2e:	782a      	ldrb	r2, [r5, #0]
    7d30:	230f      	movs	r3, #15
    7d32:	4013      	ands	r3, r2
    7d34:	3420      	adds	r4, #32
    7d36:	00a4      	lsls	r4, r4, #2
    7d38:	4a02      	ldr	r2, [pc, #8]	; (7d44 <system_gclk_chan_set_config+0x20>)
    7d3a:	50a3      	str	r3, [r4, r2]
}
    7d3c:	bd70      	pop	{r4, r5, r6, pc}
    7d3e:	46c0      	nop			; (mov r8, r8)
    7d40:	00007ced 	.word	0x00007ced
    7d44:	40001800 	.word	0x40001800

00007d48 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7d48:	b510      	push	{r4, lr}
    7d4a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7d4c:	4b06      	ldr	r3, [pc, #24]	; (7d68 <system_gclk_chan_get_hz+0x20>)
    7d4e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    7d50:	3420      	adds	r4, #32
    7d52:	00a4      	lsls	r4, r4, #2
    7d54:	4b05      	ldr	r3, [pc, #20]	; (7d6c <system_gclk_chan_get_hz+0x24>)
    7d56:	58e4      	ldr	r4, [r4, r3]
    7d58:	0724      	lsls	r4, r4, #28
    7d5a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    7d5c:	4b04      	ldr	r3, [pc, #16]	; (7d70 <system_gclk_chan_get_hz+0x28>)
    7d5e:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7d60:	0020      	movs	r0, r4
    7d62:	4b04      	ldr	r3, [pc, #16]	; (7d74 <system_gclk_chan_get_hz+0x2c>)
    7d64:	4798      	blx	r3
}
    7d66:	bd10      	pop	{r4, pc}
    7d68:	00006265 	.word	0x00006265
    7d6c:	40001800 	.word	0x40001800
    7d70:	000062a5 	.word	0x000062a5
    7d74:	00007c49 	.word	0x00007c49

00007d78 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    7d78:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    7d7a:	78d3      	ldrb	r3, [r2, #3]
    7d7c:	2b00      	cmp	r3, #0
    7d7e:	d135      	bne.n	7dec <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    7d80:	7813      	ldrb	r3, [r2, #0]
    7d82:	2b80      	cmp	r3, #128	; 0x80
    7d84:	d029      	beq.n	7dda <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    7d86:	061b      	lsls	r3, r3, #24
    7d88:	2480      	movs	r4, #128	; 0x80
    7d8a:	0264      	lsls	r4, r4, #9
    7d8c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    7d8e:	7854      	ldrb	r4, [r2, #1]
    7d90:	2502      	movs	r5, #2
    7d92:	43ac      	bics	r4, r5
    7d94:	d106      	bne.n	7da4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    7d96:	7894      	ldrb	r4, [r2, #2]
    7d98:	2c00      	cmp	r4, #0
    7d9a:	d120      	bne.n	7dde <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    7d9c:	2480      	movs	r4, #128	; 0x80
    7d9e:	02a4      	lsls	r4, r4, #10
    7da0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    7da2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7da4:	7854      	ldrb	r4, [r2, #1]
    7da6:	3c01      	subs	r4, #1
    7da8:	2c01      	cmp	r4, #1
    7daa:	d91c      	bls.n	7de6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7dac:	040d      	lsls	r5, r1, #16
    7dae:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7db0:	24a0      	movs	r4, #160	; 0xa0
    7db2:	05e4      	lsls	r4, r4, #23
    7db4:	432c      	orrs	r4, r5
    7db6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7db8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7dba:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7dbc:	24d0      	movs	r4, #208	; 0xd0
    7dbe:	0624      	lsls	r4, r4, #24
    7dc0:	432c      	orrs	r4, r5
    7dc2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7dc4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    7dc6:	78d4      	ldrb	r4, [r2, #3]
    7dc8:	2c00      	cmp	r4, #0
    7dca:	d122      	bne.n	7e12 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7dcc:	035b      	lsls	r3, r3, #13
    7dce:	d51c      	bpl.n	7e0a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7dd0:	7893      	ldrb	r3, [r2, #2]
    7dd2:	2b01      	cmp	r3, #1
    7dd4:	d01e      	beq.n	7e14 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    7dd6:	6141      	str	r1, [r0, #20]
    7dd8:	e017      	b.n	7e0a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    7dda:	2300      	movs	r3, #0
    7ddc:	e7d7      	b.n	7d8e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7dde:	24c0      	movs	r4, #192	; 0xc0
    7de0:	02e4      	lsls	r4, r4, #11
    7de2:	4323      	orrs	r3, r4
    7de4:	e7dd      	b.n	7da2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    7de6:	4c0d      	ldr	r4, [pc, #52]	; (7e1c <_system_pinmux_config+0xa4>)
    7de8:	4023      	ands	r3, r4
    7dea:	e7df      	b.n	7dac <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    7dec:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7dee:	040c      	lsls	r4, r1, #16
    7df0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    7df2:	23a0      	movs	r3, #160	; 0xa0
    7df4:	05db      	lsls	r3, r3, #23
    7df6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7df8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7dfa:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7dfc:	23d0      	movs	r3, #208	; 0xd0
    7dfe:	061b      	lsls	r3, r3, #24
    7e00:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7e02:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    7e04:	78d3      	ldrb	r3, [r2, #3]
    7e06:	2b00      	cmp	r3, #0
    7e08:	d103      	bne.n	7e12 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7e0a:	7853      	ldrb	r3, [r2, #1]
    7e0c:	3b01      	subs	r3, #1
    7e0e:	2b01      	cmp	r3, #1
    7e10:	d902      	bls.n	7e18 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    7e12:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    7e14:	6181      	str	r1, [r0, #24]
    7e16:	e7f8      	b.n	7e0a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    7e18:	6081      	str	r1, [r0, #8]
}
    7e1a:	e7fa      	b.n	7e12 <_system_pinmux_config+0x9a>
    7e1c:	fffbffff 	.word	0xfffbffff

00007e20 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7e20:	b510      	push	{r4, lr}
    7e22:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    7e24:	09c1      	lsrs	r1, r0, #7
		return NULL;
    7e26:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7e28:	2900      	cmp	r1, #0
    7e2a:	d104      	bne.n	7e36 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    7e2c:	0943      	lsrs	r3, r0, #5
    7e2e:	01db      	lsls	r3, r3, #7
    7e30:	4905      	ldr	r1, [pc, #20]	; (7e48 <system_pinmux_pin_set_config+0x28>)
    7e32:	468c      	mov	ip, r1
    7e34:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    7e36:	241f      	movs	r4, #31
    7e38:	4020      	ands	r0, r4
    7e3a:	2101      	movs	r1, #1
    7e3c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    7e3e:	0018      	movs	r0, r3
    7e40:	4b02      	ldr	r3, [pc, #8]	; (7e4c <system_pinmux_pin_set_config+0x2c>)
    7e42:	4798      	blx	r3
}
    7e44:	bd10      	pop	{r4, pc}
    7e46:	46c0      	nop			; (mov r8, r8)
    7e48:	40002800 	.word	0x40002800
    7e4c:	00007d79 	.word	0x00007d79

00007e50 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    7e50:	4770      	bx	lr
    7e52:	Address 0x00007e52 is out of bounds.


00007e54 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    7e54:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    7e56:	4b05      	ldr	r3, [pc, #20]	; (7e6c <system_init+0x18>)
    7e58:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    7e5a:	4b05      	ldr	r3, [pc, #20]	; (7e70 <system_init+0x1c>)
    7e5c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    7e5e:	4b05      	ldr	r3, [pc, #20]	; (7e74 <system_init+0x20>)
    7e60:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    7e62:	4b05      	ldr	r3, [pc, #20]	; (7e78 <system_init+0x24>)
    7e64:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    7e66:	4b05      	ldr	r3, [pc, #20]	; (7e7c <system_init+0x28>)
    7e68:	4798      	blx	r3
}
    7e6a:	bd10      	pop	{r4, pc}
    7e6c:	00007a01 	.word	0x00007a01
    7e70:	000062d5 	.word	0x000062d5
    7e74:	00007e51 	.word	0x00007e51
    7e78:	00006491 	.word	0x00006491
    7e7c:	00007e51 	.word	0x00007e51

00007e80 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    7e80:	1c93      	adds	r3, r2, #2
    7e82:	009b      	lsls	r3, r3, #2
    7e84:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    7e86:	2a02      	cmp	r2, #2
    7e88:	d009      	beq.n	7e9e <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    7e8a:	2a03      	cmp	r2, #3
    7e8c:	d00c      	beq.n	7ea8 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    7e8e:	2301      	movs	r3, #1
    7e90:	4093      	lsls	r3, r2
    7e92:	001a      	movs	r2, r3
    7e94:	7e03      	ldrb	r3, [r0, #24]
    7e96:	4313      	orrs	r3, r2
    7e98:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    7e9a:	2000      	movs	r0, #0
    7e9c:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    7e9e:	7e03      	ldrb	r3, [r0, #24]
    7ea0:	2210      	movs	r2, #16
    7ea2:	4313      	orrs	r3, r2
    7ea4:	7603      	strb	r3, [r0, #24]
    7ea6:	e7f8      	b.n	7e9a <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    7ea8:	7e03      	ldrb	r3, [r0, #24]
    7eaa:	2220      	movs	r2, #32
    7eac:	4313      	orrs	r3, r2
    7eae:	7603      	strb	r3, [r0, #24]
    7eb0:	e7f3      	b.n	7e9a <tc_register_callback+0x1a>
    7eb2:	Address 0x00007eb2 is out of bounds.


00007eb4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    7eb4:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    7eb6:	0080      	lsls	r0, r0, #2
    7eb8:	4b16      	ldr	r3, [pc, #88]	; (7f14 <_tc_interrupt_handler+0x60>)
    7eba:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    7ebc:	6823      	ldr	r3, [r4, #0]
    7ebe:	7a9d      	ldrb	r5, [r3, #10]
    7ec0:	7e22      	ldrb	r2, [r4, #24]
    7ec2:	7e63      	ldrb	r3, [r4, #25]
    7ec4:	4013      	ands	r3, r2
    7ec6:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    7ec8:	07eb      	lsls	r3, r5, #31
    7eca:	d406      	bmi.n	7eda <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    7ecc:	07ab      	lsls	r3, r5, #30
    7ece:	d40b      	bmi.n	7ee8 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    7ed0:	06eb      	lsls	r3, r5, #27
    7ed2:	d410      	bmi.n	7ef6 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    7ed4:	06ab      	lsls	r3, r5, #26
    7ed6:	d415      	bmi.n	7f04 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    7ed8:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    7eda:	0020      	movs	r0, r4
    7edc:	68a3      	ldr	r3, [r4, #8]
    7ede:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    7ee0:	2301      	movs	r3, #1
    7ee2:	6822      	ldr	r2, [r4, #0]
    7ee4:	7293      	strb	r3, [r2, #10]
    7ee6:	e7f1      	b.n	7ecc <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    7ee8:	0020      	movs	r0, r4
    7eea:	68e3      	ldr	r3, [r4, #12]
    7eec:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    7eee:	2302      	movs	r3, #2
    7ef0:	6822      	ldr	r2, [r4, #0]
    7ef2:	7293      	strb	r3, [r2, #10]
    7ef4:	e7ec      	b.n	7ed0 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    7ef6:	0020      	movs	r0, r4
    7ef8:	6923      	ldr	r3, [r4, #16]
    7efa:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    7efc:	2310      	movs	r3, #16
    7efe:	6822      	ldr	r2, [r4, #0]
    7f00:	7293      	strb	r3, [r2, #10]
    7f02:	e7e7      	b.n	7ed4 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    7f04:	0020      	movs	r0, r4
    7f06:	6963      	ldr	r3, [r4, #20]
    7f08:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    7f0a:	6823      	ldr	r3, [r4, #0]
    7f0c:	2220      	movs	r2, #32
    7f0e:	729a      	strb	r2, [r3, #10]
}
    7f10:	e7e2      	b.n	7ed8 <_tc_interrupt_handler+0x24>
    7f12:	46c0      	nop			; (mov r8, r8)
    7f14:	20001d54 	.word	0x20001d54

00007f18 <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    7f18:	b510      	push	{r4, lr}
    7f1a:	2000      	movs	r0, #0
    7f1c:	4b01      	ldr	r3, [pc, #4]	; (7f24 <TC0_Handler+0xc>)
    7f1e:	4798      	blx	r3
    7f20:	bd10      	pop	{r4, pc}
    7f22:	46c0      	nop			; (mov r8, r8)
    7f24:	00007eb5 	.word	0x00007eb5

00007f28 <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    7f28:	b510      	push	{r4, lr}
    7f2a:	2001      	movs	r0, #1
    7f2c:	4b01      	ldr	r3, [pc, #4]	; (7f34 <TC1_Handler+0xc>)
    7f2e:	4798      	blx	r3
    7f30:	bd10      	pop	{r4, pc}
    7f32:	46c0      	nop			; (mov r8, r8)
    7f34:	00007eb5 	.word	0x00007eb5

00007f38 <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    7f38:	b510      	push	{r4, lr}
    7f3a:	2002      	movs	r0, #2
    7f3c:	4b01      	ldr	r3, [pc, #4]	; (7f44 <TC4_Handler+0xc>)
    7f3e:	4798      	blx	r3
    7f40:	bd10      	pop	{r4, pc}
    7f42:	46c0      	nop			; (mov r8, r8)
    7f44:	00007eb5 	.word	0x00007eb5

00007f48 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    7f48:	b530      	push	{r4, r5, lr}
    7f4a:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    7f4c:	aa01      	add	r2, sp, #4
    7f4e:	4b0b      	ldr	r3, [pc, #44]	; (7f7c <_tc_get_inst_index+0x34>)
    7f50:	cb32      	ldmia	r3!, {r1, r4, r5}
    7f52:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    7f54:	9b01      	ldr	r3, [sp, #4]
    7f56:	4298      	cmp	r0, r3
    7f58:	d00d      	beq.n	7f76 <_tc_get_inst_index+0x2e>
    7f5a:	9b02      	ldr	r3, [sp, #8]
    7f5c:	4298      	cmp	r0, r3
    7f5e:	d008      	beq.n	7f72 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    7f60:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    7f62:	9a03      	ldr	r2, [sp, #12]
    7f64:	4282      	cmp	r2, r0
    7f66:	d002      	beq.n	7f6e <_tc_get_inst_index+0x26>
}
    7f68:	0018      	movs	r0, r3
    7f6a:	b005      	add	sp, #20
    7f6c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    7f6e:	3302      	adds	r3, #2
    7f70:	e002      	b.n	7f78 <_tc_get_inst_index+0x30>
    7f72:	2301      	movs	r3, #1
    7f74:	e000      	b.n	7f78 <_tc_get_inst_index+0x30>
    7f76:	2300      	movs	r3, #0
			return i;
    7f78:	b2db      	uxtb	r3, r3
    7f7a:	e7f5      	b.n	7f68 <_tc_get_inst_index+0x20>
    7f7c:	00011dc8 	.word	0x00011dc8

00007f80 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    7f80:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f82:	46c6      	mov	lr, r8
    7f84:	b500      	push	{lr}
    7f86:	b08a      	sub	sp, #40	; 0x28
    7f88:	0004      	movs	r4, r0
    7f8a:	000d      	movs	r5, r1
    7f8c:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    7f8e:	0008      	movs	r0, r1
    7f90:	4baa      	ldr	r3, [pc, #680]	; (823c <tc_init+0x2bc>)
    7f92:	4798      	blx	r3
    7f94:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    7f96:	ab09      	add	r3, sp, #36	; 0x24
    7f98:	221b      	movs	r2, #27
    7f9a:	701a      	strb	r2, [r3, #0]
    7f9c:	705a      	strb	r2, [r3, #1]
    7f9e:	3202      	adds	r2, #2
    7fa0:	709a      	strb	r2, [r3, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    7fa2:	a903      	add	r1, sp, #12
    7fa4:	4ba6      	ldr	r3, [pc, #664]	; (8240 <tc_init+0x2c0>)
    7fa6:	330c      	adds	r3, #12
    7fa8:	000a      	movs	r2, r1
    7faa:	cb83      	ldmia	r3!, {r0, r1, r7}
    7fac:	c283      	stmia	r2!, {r0, r1, r7}
    7fae:	cb83      	ldmia	r3!, {r0, r1, r7}
    7fb0:	c283      	stmia	r2!, {r0, r1, r7}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    7fb2:	2300      	movs	r3, #0
    7fb4:	60a3      	str	r3, [r4, #8]
    7fb6:	60e3      	str	r3, [r4, #12]
    7fb8:	6123      	str	r3, [r4, #16]
    7fba:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    7fbc:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    7fbe:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    7fc0:	4643      	mov	r3, r8
    7fc2:	009a      	lsls	r2, r3, #2
    7fc4:	4b9f      	ldr	r3, [pc, #636]	; (8244 <tc_init+0x2c4>)
    7fc6:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    7fc8:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    7fca:	2334      	movs	r3, #52	; 0x34
    7fcc:	5cf3      	ldrb	r3, [r6, r3]
    7fce:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    7fd0:	78f3      	ldrb	r3, [r6, #3]
    7fd2:	2b08      	cmp	r3, #8
    7fd4:	d008      	beq.n	7fe8 <tc_init+0x68>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    7fd6:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    7fd8:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    7fda:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    7fdc:	07db      	lsls	r3, r3, #31
    7fde:	d508      	bpl.n	7ff2 <tc_init+0x72>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    7fe0:	b00a      	add	sp, #40	; 0x28
    7fe2:	bc04      	pop	{r2}
    7fe4:	4690      	mov	r8, r2
    7fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    7fe8:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    7fea:	4642      	mov	r2, r8
    7fec:	07d2      	lsls	r2, r2, #31
    7fee:	d4f7      	bmi.n	7fe0 <tc_init+0x60>
    7ff0:	e7f1      	b.n	7fd6 <tc_init+0x56>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    7ff2:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    7ff4:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    7ff6:	079b      	lsls	r3, r3, #30
    7ff8:	d4f2      	bmi.n	7fe0 <tc_init+0x60>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    7ffa:	682b      	ldr	r3, [r5, #0]
    7ffc:	079b      	lsls	r3, r3, #30
    7ffe:	d4ef      	bmi.n	7fe0 <tc_init+0x60>
	if (config->pwm_channel[0].enabled) {
    8000:	7c33      	ldrb	r3, [r6, #16]
    8002:	2b00      	cmp	r3, #0
    8004:	d112      	bne.n	802c <tc_init+0xac>
	if (config->pwm_channel[1].enabled) {
    8006:	7f33      	ldrb	r3, [r6, #28]
    8008:	2b00      	cmp	r3, #0
    800a:	d11b      	bne.n	8044 <tc_init+0xc4>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    800c:	4643      	mov	r3, r8
    800e:	005a      	lsls	r2, r3, #1
    8010:	a903      	add	r1, sp, #12
    8012:	1c53      	adds	r3, r2, #1
    8014:	009b      	lsls	r3, r3, #2
    8016:	5858      	ldr	r0, [r3, r1]
    8018:	4643      	mov	r3, r8
    801a:	00db      	lsls	r3, r3, #3
    801c:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    801e:	b2d9      	uxtb	r1, r3
    8020:	2904      	cmp	r1, #4
    8022:	d823      	bhi.n	806c <tc_init+0xec>
    8024:	008b      	lsls	r3, r1, #2
    8026:	4988      	ldr	r1, [pc, #544]	; (8248 <tc_init+0x2c8>)
    8028:	58cb      	ldr	r3, [r1, r3]
    802a:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    802c:	a902      	add	r1, sp, #8
    802e:	2301      	movs	r3, #1
    8030:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    8032:	2200      	movs	r2, #0
    8034:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    8036:	7e32      	ldrb	r2, [r6, #24]
    8038:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    803a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    803c:	7d30      	ldrb	r0, [r6, #20]
    803e:	4b83      	ldr	r3, [pc, #524]	; (824c <tc_init+0x2cc>)
    8040:	4798      	blx	r3
    8042:	e7e0      	b.n	8006 <tc_init+0x86>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8044:	a902      	add	r1, sp, #8
    8046:	2301      	movs	r3, #1
    8048:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    804a:	2200      	movs	r2, #0
    804c:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    804e:	3224      	adds	r2, #36	; 0x24
    8050:	18b2      	adds	r2, r6, r2
    8052:	7812      	ldrb	r2, [r2, #0]
    8054:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    8056:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    8058:	331f      	adds	r3, #31
    805a:	18f3      	adds	r3, r6, r3
    805c:	7818      	ldrb	r0, [r3, #0]
    805e:	4b7b      	ldr	r3, [pc, #492]	; (824c <tc_init+0x2cc>)
    8060:	4798      	blx	r3
    8062:	e7d3      	b.n	800c <tc_init+0x8c>
			MCLK->APBAMASK.reg |= mask;
    8064:	497a      	ldr	r1, [pc, #488]	; (8250 <tc_init+0x2d0>)
    8066:	694b      	ldr	r3, [r1, #20]
    8068:	4318      	orrs	r0, r3
    806a:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    806c:	78f3      	ldrb	r3, [r6, #3]
    806e:	2b08      	cmp	r3, #8
    8070:	d100      	bne.n	8074 <tc_init+0xf4>
    8072:	e085      	b.n	8180 <tc_init+0x200>
	gclk_chan_config.source_generator = config->clock_source;
    8074:	a901      	add	r1, sp, #4
    8076:	7833      	ldrb	r3, [r6, #0]
    8078:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    807a:	ab09      	add	r3, sp, #36	; 0x24
    807c:	4642      	mov	r2, r8
    807e:	5c9f      	ldrb	r7, [r3, r2]
    8080:	0038      	movs	r0, r7
    8082:	4b74      	ldr	r3, [pc, #464]	; (8254 <tc_init+0x2d4>)
    8084:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    8086:	0038      	movs	r0, r7
    8088:	4b73      	ldr	r3, [pc, #460]	; (8258 <tc_init+0x2d8>)
    808a:	4798      	blx	r3
			(uint32_t)config->counter_size |
    808c:	78f3      	ldrb	r3, [r6, #3]
    808e:	79f2      	ldrb	r2, [r6, #7]
    8090:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    8092:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    8094:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    8096:	7a72      	ldrb	r2, [r6, #9]
    8098:	2a00      	cmp	r2, #0
    809a:	d002      	beq.n	80a2 <tc_init+0x122>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    809c:	2280      	movs	r2, #128	; 0x80
    809e:	0252      	lsls	r2, r2, #9
    80a0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    80a2:	7ab2      	ldrb	r2, [r6, #10]
    80a4:	2a00      	cmp	r2, #0
    80a6:	d002      	beq.n	80ae <tc_init+0x12e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    80a8:	2280      	movs	r2, #128	; 0x80
    80aa:	0292      	lsls	r2, r2, #10
    80ac:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    80ae:	7af2      	ldrb	r2, [r6, #11]
    80b0:	2a00      	cmp	r2, #0
    80b2:	d002      	beq.n	80ba <tc_init+0x13a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    80b4:	2280      	movs	r2, #128	; 0x80
    80b6:	0352      	lsls	r2, r2, #13
    80b8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    80ba:	7b32      	ldrb	r2, [r6, #12]
    80bc:	2a00      	cmp	r2, #0
    80be:	d002      	beq.n	80c6 <tc_init+0x146>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    80c0:	2280      	movs	r2, #128	; 0x80
    80c2:	0392      	lsls	r2, r2, #14
    80c4:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    80c6:	7871      	ldrb	r1, [r6, #1]
    80c8:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    80ca:	78b2      	ldrb	r2, [r6, #2]
    80cc:	01d2      	lsls	r2, r2, #7
    80ce:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    80d0:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    80d2:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    80d4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    80d6:	2b00      	cmp	r3, #0
    80d8:	d1fc      	bne.n	80d4 <tc_init+0x154>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    80da:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    80dc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    80de:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    80e0:	2b00      	cmp	r3, #0
    80e2:	d1fc      	bne.n	80de <tc_init+0x15e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    80e4:	79b3      	ldrb	r3, [r6, #6]
    80e6:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    80e8:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    80ea:	1e4b      	subs	r3, r1, #1
    80ec:	4199      	sbcs	r1, r3
    80ee:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    80f0:	7bb3      	ldrb	r3, [r6, #14]
    80f2:	2b00      	cmp	r3, #0
    80f4:	d001      	beq.n	80fa <tc_init+0x17a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    80f6:	2301      	movs	r3, #1
    80f8:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    80fa:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    80fc:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    80fe:	2b00      	cmp	r3, #0
    8100:	d1fc      	bne.n	80fc <tc_init+0x17c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    8102:	33ff      	adds	r3, #255	; 0xff
    8104:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    8106:	2900      	cmp	r1, #0
    8108:	d004      	beq.n	8114 <tc_init+0x194>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    810a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    810c:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    810e:	2b00      	cmp	r3, #0
    8110:	d1fc      	bne.n	810c <tc_init+0x18c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    8112:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    8114:	7a33      	ldrb	r3, [r6, #8]
    8116:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8118:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    811a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    811c:	2b00      	cmp	r3, #0
    811e:	d1fc      	bne.n	811a <tc_init+0x19a>
	switch (module_inst->counter_size) {
    8120:	7923      	ldrb	r3, [r4, #4]
    8122:	2b04      	cmp	r3, #4
    8124:	d059      	beq.n	81da <tc_init+0x25a>
    8126:	2b08      	cmp	r3, #8
    8128:	d074      	beq.n	8214 <tc_init+0x294>
	return STATUS_ERR_INVALID_ARG;
    812a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    812c:	2b00      	cmp	r3, #0
    812e:	d000      	beq.n	8132 <tc_init+0x1b2>
    8130:	e756      	b.n	7fe0 <tc_init+0x60>
    8132:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8134:	2b00      	cmp	r3, #0
    8136:	d1fc      	bne.n	8132 <tc_init+0x1b2>
				= config->counter_16_bit.value;
    8138:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    813a:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    813c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    813e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8140:	2b00      	cmp	r3, #0
    8142:	d1fc      	bne.n	813e <tc_init+0x1be>
					config->counter_16_bit.compare_capture_channel[0];
    8144:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    8146:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8148:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    814a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    814c:	2b00      	cmp	r3, #0
    814e:	d1fc      	bne.n	814a <tc_init+0x1ca>
					config->counter_16_bit.compare_capture_channel[1];
    8150:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    8152:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    8154:	2000      	movs	r0, #0
    8156:	e743      	b.n	7fe0 <tc_init+0x60>
			MCLK->APBBMASK.reg |= mask;
    8158:	493d      	ldr	r1, [pc, #244]	; (8250 <tc_init+0x2d0>)
    815a:	698b      	ldr	r3, [r1, #24]
    815c:	4318      	orrs	r0, r3
    815e:	6188      	str	r0, [r1, #24]
    8160:	e784      	b.n	806c <tc_init+0xec>
			MCLK->APBCMASK.reg |= mask;
    8162:	493b      	ldr	r1, [pc, #236]	; (8250 <tc_init+0x2d0>)
    8164:	69cb      	ldr	r3, [r1, #28]
    8166:	4318      	orrs	r0, r3
    8168:	61c8      	str	r0, [r1, #28]
    816a:	e77f      	b.n	806c <tc_init+0xec>
			MCLK->APBDMASK.reg |= mask;
    816c:	4938      	ldr	r1, [pc, #224]	; (8250 <tc_init+0x2d0>)
    816e:	6a0b      	ldr	r3, [r1, #32]
    8170:	4318      	orrs	r0, r3
    8172:	6208      	str	r0, [r1, #32]
    8174:	e77a      	b.n	806c <tc_init+0xec>
			MCLK->APBEMASK.reg |= mask;
    8176:	4b36      	ldr	r3, [pc, #216]	; (8250 <tc_init+0x2d0>)
    8178:	6a59      	ldr	r1, [r3, #36]	; 0x24
    817a:	4308      	orrs	r0, r1
    817c:	6258      	str	r0, [r3, #36]	; 0x24
    817e:	e775      	b.n	806c <tc_init+0xec>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    8180:	4643      	mov	r3, r8
    8182:	3301      	adds	r3, #1
    8184:	2b02      	cmp	r3, #2
    8186:	dd00      	ble.n	818a <tc_init+0x20a>
    8188:	e774      	b.n	8074 <tc_init+0xf4>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    818a:	ab03      	add	r3, sp, #12
    818c:	1cd1      	adds	r1, r2, #3
    818e:	0089      	lsls	r1, r1, #2
    8190:	58c9      	ldr	r1, [r1, r3]
    8192:	3202      	adds	r2, #2
    8194:	0092      	lsls	r2, r2, #2
    8196:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    8198:	b2da      	uxtb	r2, r3
    819a:	2a04      	cmp	r2, #4
    819c:	d900      	bls.n	81a0 <tc_init+0x220>
    819e:	e769      	b.n	8074 <tc_init+0xf4>
    81a0:	0093      	lsls	r3, r2, #2
    81a2:	4a2e      	ldr	r2, [pc, #184]	; (825c <tc_init+0x2dc>)
    81a4:	58d3      	ldr	r3, [r2, r3]
    81a6:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    81a8:	4a29      	ldr	r2, [pc, #164]	; (8250 <tc_init+0x2d0>)
    81aa:	6953      	ldr	r3, [r2, #20]
    81ac:	4319      	orrs	r1, r3
    81ae:	6151      	str	r1, [r2, #20]
    81b0:	e760      	b.n	8074 <tc_init+0xf4>
			MCLK->APBBMASK.reg |= mask;
    81b2:	4a27      	ldr	r2, [pc, #156]	; (8250 <tc_init+0x2d0>)
    81b4:	6993      	ldr	r3, [r2, #24]
    81b6:	4319      	orrs	r1, r3
    81b8:	6191      	str	r1, [r2, #24]
    81ba:	e75b      	b.n	8074 <tc_init+0xf4>
			MCLK->APBCMASK.reg |= mask;
    81bc:	4a24      	ldr	r2, [pc, #144]	; (8250 <tc_init+0x2d0>)
    81be:	69d3      	ldr	r3, [r2, #28]
    81c0:	4319      	orrs	r1, r3
    81c2:	61d1      	str	r1, [r2, #28]
    81c4:	e756      	b.n	8074 <tc_init+0xf4>
			MCLK->APBDMASK.reg |= mask;
    81c6:	4a22      	ldr	r2, [pc, #136]	; (8250 <tc_init+0x2d0>)
    81c8:	6a13      	ldr	r3, [r2, #32]
    81ca:	4319      	orrs	r1, r3
    81cc:	6211      	str	r1, [r2, #32]
    81ce:	e751      	b.n	8074 <tc_init+0xf4>
			MCLK->APBEMASK.reg |= mask;
    81d0:	4b1f      	ldr	r3, [pc, #124]	; (8250 <tc_init+0x2d0>)
    81d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    81d4:	4311      	orrs	r1, r2
    81d6:	6259      	str	r1, [r3, #36]	; 0x24
    81d8:	e74c      	b.n	8074 <tc_init+0xf4>
    81da:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    81dc:	2b00      	cmp	r3, #0
    81de:	d1fc      	bne.n	81da <tc_init+0x25a>
					config->counter_8_bit.value;
    81e0:	3328      	adds	r3, #40	; 0x28
    81e2:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    81e4:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    81e6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    81e8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    81ea:	2b00      	cmp	r3, #0
    81ec:	d1fc      	bne.n	81e8 <tc_init+0x268>
					config->counter_8_bit.period;
    81ee:	3329      	adds	r3, #41	; 0x29
    81f0:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    81f2:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    81f4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    81f6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    81f8:	2b00      	cmp	r3, #0
    81fa:	d1fc      	bne.n	81f6 <tc_init+0x276>
					config->counter_8_bit.compare_capture_channel[0];
    81fc:	332a      	adds	r3, #42	; 0x2a
    81fe:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    8200:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8202:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8204:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8206:	2b00      	cmp	r3, #0
    8208:	d1fc      	bne.n	8204 <tc_init+0x284>
					config->counter_8_bit.compare_capture_channel[1];
    820a:	332b      	adds	r3, #43	; 0x2b
    820c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    820e:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    8210:	2000      	movs	r0, #0
    8212:	e6e5      	b.n	7fe0 <tc_init+0x60>
    8214:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8216:	2b00      	cmp	r3, #0
    8218:	d1fc      	bne.n	8214 <tc_init+0x294>
				= config->counter_32_bit.value;
    821a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    821c:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    821e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8220:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8222:	2b00      	cmp	r3, #0
    8224:	d1fc      	bne.n	8220 <tc_init+0x2a0>
			hw->COUNT32.CC[0].reg =
    8226:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8228:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    822a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    822c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    822e:	2b00      	cmp	r3, #0
    8230:	d1fc      	bne.n	822c <tc_init+0x2ac>
					config->counter_32_bit.compare_capture_channel[1];
    8232:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    8234:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    8236:	2000      	movs	r0, #0
    8238:	e6d2      	b.n	7fe0 <tc_init+0x60>
    823a:	46c0      	nop			; (mov r8, r8)
    823c:	00007f49 	.word	0x00007f49
    8240:	00011dc8 	.word	0x00011dc8
    8244:	20001d54 	.word	0x20001d54
    8248:	00011da0 	.word	0x00011da0
    824c:	00007e21 	.word	0x00007e21
    8250:	40000400 	.word	0x40000400
    8254:	00007d25 	.word	0x00007d25
    8258:	00007cb5 	.word	0x00007cb5
    825c:	00011db4 	.word	0x00011db4

00008260 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8260:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    8262:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    8264:	2b00      	cmp	r3, #0
    8266:	d1fc      	bne.n	8262 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    8268:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    826a:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    826c:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    826e:	2b00      	cmp	r3, #0
    8270:	d1fc      	bne.n	826c <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    8272:	3380      	adds	r3, #128	; 0x80
    8274:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    8276:	7953      	ldrb	r3, [r2, #5]
    8278:	b25b      	sxtb	r3, r3
    827a:	2b00      	cmp	r3, #0
    827c:	dbfb      	blt.n	8276 <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    827e:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    8280:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    8282:	2b00      	cmp	r3, #0
    8284:	d1fc      	bne.n	8280 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    8286:	7903      	ldrb	r3, [r0, #4]
    8288:	2b04      	cmp	r3, #4
    828a:	d005      	beq.n	8298 <tc_get_count_value+0x38>
    828c:	2b08      	cmp	r3, #8
    828e:	d009      	beq.n	82a4 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    8290:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    8292:	2b00      	cmp	r3, #0
    8294:	d003      	beq.n	829e <tc_get_count_value+0x3e>
}
    8296:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    8298:	7d10      	ldrb	r0, [r2, #20]
    829a:	b2c0      	uxtb	r0, r0
    829c:	e7fb      	b.n	8296 <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    829e:	8a90      	ldrh	r0, [r2, #20]
    82a0:	b280      	uxth	r0, r0
    82a2:	e7f8      	b.n	8296 <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    82a4:	6950      	ldr	r0, [r2, #20]
    82a6:	e7f6      	b.n	8296 <tc_get_count_value+0x36>

000082a8 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    82a8:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    82aa:	6804      	ldr	r4, [r0, #0]
    82ac:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    82ae:	2b00      	cmp	r3, #0
    82b0:	d1fc      	bne.n	82ac <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    82b2:	7903      	ldrb	r3, [r0, #4]
    82b4:	2b04      	cmp	r3, #4
    82b6:	d006      	beq.n	82c6 <tc_set_compare_value+0x1e>
    82b8:	2b08      	cmp	r3, #8
    82ba:	d028      	beq.n	830e <tc_set_compare_value+0x66>
    82bc:	2b00      	cmp	r3, #0
    82be:	d013      	beq.n	82e8 <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    82c0:	2317      	movs	r3, #23
}
    82c2:	0018      	movs	r0, r3
    82c4:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    82c6:	2317      	movs	r3, #23
			if (channel_index <
    82c8:	2901      	cmp	r1, #1
    82ca:	d8fa      	bhi.n	82c2 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    82cc:	7e83      	ldrb	r3, [r0, #26]
    82ce:	2b00      	cmp	r3, #0
    82d0:	d005      	beq.n	82de <tc_set_compare_value+0x36>
							(uint8_t)compare;
    82d2:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    82d4:	1861      	adds	r1, r4, r1
    82d6:	3130      	adds	r1, #48	; 0x30
    82d8:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    82da:	2300      	movs	r3, #0
    82dc:	e7f1      	b.n	82c2 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    82de:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    82e0:	1864      	adds	r4, r4, r1
    82e2:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    82e4:	2300      	movs	r3, #0
    82e6:	e7ec      	b.n	82c2 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    82e8:	2317      	movs	r3, #23
			if (channel_index <
    82ea:	2901      	cmp	r1, #1
    82ec:	d8e9      	bhi.n	82c2 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    82ee:	7e83      	ldrb	r3, [r0, #26]
    82f0:	2b00      	cmp	r3, #0
    82f2:	d005      	beq.n	8300 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    82f4:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    82f6:	3118      	adds	r1, #24
    82f8:	0049      	lsls	r1, r1, #1
    82fa:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    82fc:	2300      	movs	r3, #0
    82fe:	e7e0      	b.n	82c2 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    8300:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    8302:	310c      	adds	r1, #12
    8304:	0049      	lsls	r1, r1, #1
    8306:	1864      	adds	r4, r4, r1
    8308:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    830a:	2300      	movs	r3, #0
    830c:	e7d9      	b.n	82c2 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    830e:	2317      	movs	r3, #23
			if (channel_index <
    8310:	2901      	cmp	r1, #1
    8312:	d8d6      	bhi.n	82c2 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    8314:	7e83      	ldrb	r3, [r0, #26]
    8316:	2b00      	cmp	r3, #0
    8318:	d105      	bne.n	8326 <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    831a:	3106      	adds	r1, #6
    831c:	0089      	lsls	r1, r1, #2
    831e:	1864      	adds	r4, r4, r1
    8320:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    8322:	2300      	movs	r3, #0
    8324:	e7cd      	b.n	82c2 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    8326:	310c      	adds	r1, #12
    8328:	0089      	lsls	r1, r1, #2
    832a:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    832c:	2300      	movs	r3, #0
    832e:	e7c8      	b.n	82c2 <tc_set_compare_value+0x1a>

00008330 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8330:	e7fe      	b.n	8330 <Dummy_Handler>
    8332:	Address 0x00008332 is out of bounds.


00008334 <Reset_Handler>:
{
    8334:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    8336:	4a1a      	ldr	r2, [pc, #104]	; (83a0 <Reset_Handler+0x6c>)
    8338:	4b1a      	ldr	r3, [pc, #104]	; (83a4 <Reset_Handler+0x70>)
    833a:	429a      	cmp	r2, r3
    833c:	d011      	beq.n	8362 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    833e:	001a      	movs	r2, r3
    8340:	4b19      	ldr	r3, [pc, #100]	; (83a8 <Reset_Handler+0x74>)
    8342:	429a      	cmp	r2, r3
    8344:	d20d      	bcs.n	8362 <Reset_Handler+0x2e>
    8346:	4a19      	ldr	r2, [pc, #100]	; (83ac <Reset_Handler+0x78>)
    8348:	3303      	adds	r3, #3
    834a:	1a9b      	subs	r3, r3, r2
    834c:	089b      	lsrs	r3, r3, #2
    834e:	3301      	adds	r3, #1
    8350:	009b      	lsls	r3, r3, #2
    8352:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8354:	4813      	ldr	r0, [pc, #76]	; (83a4 <Reset_Handler+0x70>)
    8356:	4912      	ldr	r1, [pc, #72]	; (83a0 <Reset_Handler+0x6c>)
    8358:	588c      	ldr	r4, [r1, r2]
    835a:	5084      	str	r4, [r0, r2]
    835c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    835e:	429a      	cmp	r2, r3
    8360:	d1fa      	bne.n	8358 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8362:	4a13      	ldr	r2, [pc, #76]	; (83b0 <Reset_Handler+0x7c>)
    8364:	4b13      	ldr	r3, [pc, #76]	; (83b4 <Reset_Handler+0x80>)
    8366:	429a      	cmp	r2, r3
    8368:	d20a      	bcs.n	8380 <Reset_Handler+0x4c>
    836a:	43d3      	mvns	r3, r2
    836c:	4911      	ldr	r1, [pc, #68]	; (83b4 <Reset_Handler+0x80>)
    836e:	185b      	adds	r3, r3, r1
    8370:	2103      	movs	r1, #3
    8372:	438b      	bics	r3, r1
    8374:	3304      	adds	r3, #4
    8376:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8378:	2100      	movs	r1, #0
    837a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    837c:	4293      	cmp	r3, r2
    837e:	d1fc      	bne.n	837a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8380:	4a0d      	ldr	r2, [pc, #52]	; (83b8 <Reset_Handler+0x84>)
    8382:	21ff      	movs	r1, #255	; 0xff
    8384:	4b0d      	ldr	r3, [pc, #52]	; (83bc <Reset_Handler+0x88>)
    8386:	438b      	bics	r3, r1
    8388:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    838a:	4a0d      	ldr	r2, [pc, #52]	; (83c0 <Reset_Handler+0x8c>)
    838c:	6853      	ldr	r3, [r2, #4]
    838e:	397f      	subs	r1, #127	; 0x7f
    8390:	430b      	orrs	r3, r1
    8392:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <Reset_Handler+0x90>)
    8396:	4798      	blx	r3
        main();
    8398:	4b0b      	ldr	r3, [pc, #44]	; (83c8 <Reset_Handler+0x94>)
    839a:	4798      	blx	r3
    839c:	e7fe      	b.n	839c <Reset_Handler+0x68>
    839e:	46c0      	nop			; (mov r8, r8)
    83a0:	00012a48 	.word	0x00012a48
    83a4:	20000000 	.word	0x20000000
    83a8:	2000009c 	.word	0x2000009c
    83ac:	20000004 	.word	0x20000004
    83b0:	2000009c 	.word	0x2000009c
    83b4:	200024f8 	.word	0x200024f8
    83b8:	e000ed00 	.word	0xe000ed00
    83bc:	00000000 	.word	0x00000000
    83c0:	41004000 	.word	0x41004000
    83c4:	00010a31 	.word	0x00010a31
    83c8:	0000e145 	.word	0x0000e145

000083cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    83cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    83ce:	46c6      	mov	lr, r8
    83d0:	b500      	push	{lr}
    83d2:	000c      	movs	r4, r1
    83d4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    83d6:	2800      	cmp	r0, #0
    83d8:	d10f      	bne.n	83fa <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    83da:	2a00      	cmp	r2, #0
    83dc:	dd11      	ble.n	8402 <_read+0x36>
    83de:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    83e0:	4e09      	ldr	r6, [pc, #36]	; (8408 <_read+0x3c>)
    83e2:	4d0a      	ldr	r5, [pc, #40]	; (840c <_read+0x40>)
    83e4:	6830      	ldr	r0, [r6, #0]
    83e6:	0021      	movs	r1, r4
    83e8:	682b      	ldr	r3, [r5, #0]
    83ea:	4798      	blx	r3
		ptr++;
    83ec:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    83ee:	42bc      	cmp	r4, r7
    83f0:	d1f8      	bne.n	83e4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    83f2:	4640      	mov	r0, r8
    83f4:	bc04      	pop	{r2}
    83f6:	4690      	mov	r8, r2
    83f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    83fa:	2301      	movs	r3, #1
    83fc:	425b      	negs	r3, r3
    83fe:	4698      	mov	r8, r3
    8400:	e7f7      	b.n	83f2 <_read+0x26>
	for (; len > 0; --len) {
    8402:	4680      	mov	r8, r0
    8404:	e7f5      	b.n	83f2 <_read+0x26>
    8406:	46c0      	nop			; (mov r8, r8)
    8408:	20001d68 	.word	0x20001d68
    840c:	20001d60 	.word	0x20001d60

00008410 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    8410:	b5f0      	push	{r4, r5, r6, r7, lr}
    8412:	46c6      	mov	lr, r8
    8414:	b500      	push	{lr}
    8416:	000e      	movs	r6, r1
    8418:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    841a:	3801      	subs	r0, #1
    841c:	2802      	cmp	r0, #2
    841e:	d810      	bhi.n	8442 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    8420:	2a00      	cmp	r2, #0
    8422:	d011      	beq.n	8448 <_write+0x38>
    8424:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    8426:	4b0c      	ldr	r3, [pc, #48]	; (8458 <_write+0x48>)
    8428:	4698      	mov	r8, r3
    842a:	4f0c      	ldr	r7, [pc, #48]	; (845c <_write+0x4c>)
    842c:	4643      	mov	r3, r8
    842e:	6818      	ldr	r0, [r3, #0]
    8430:	5d31      	ldrb	r1, [r6, r4]
    8432:	683b      	ldr	r3, [r7, #0]
    8434:	4798      	blx	r3
    8436:	2800      	cmp	r0, #0
    8438:	db08      	blt.n	844c <_write+0x3c>
			return -1;
		}
		++nChars;
    843a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    843c:	42a5      	cmp	r5, r4
    843e:	d1f5      	bne.n	842c <_write+0x1c>
    8440:	e006      	b.n	8450 <_write+0x40>
		return -1;
    8442:	2401      	movs	r4, #1
    8444:	4264      	negs	r4, r4
    8446:	e003      	b.n	8450 <_write+0x40>
	for (; len != 0; --len) {
    8448:	0014      	movs	r4, r2
    844a:	e001      	b.n	8450 <_write+0x40>
			return -1;
    844c:	2401      	movs	r4, #1
    844e:	4264      	negs	r4, r4
	}
	return nChars;
}
    8450:	0020      	movs	r0, r4
    8452:	bc04      	pop	{r2}
    8454:	4690      	mov	r8, r2
    8456:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8458:	20001d68 	.word	0x20001d68
    845c:	20001d64 	.word	0x20001d64

00008460 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8460:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8462:	4a06      	ldr	r2, [pc, #24]	; (847c <_sbrk+0x1c>)
    8464:	6812      	ldr	r2, [r2, #0]
    8466:	2a00      	cmp	r2, #0
    8468:	d004      	beq.n	8474 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    846a:	4a04      	ldr	r2, [pc, #16]	; (847c <_sbrk+0x1c>)
    846c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    846e:	18c3      	adds	r3, r0, r3
    8470:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8472:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8474:	4902      	ldr	r1, [pc, #8]	; (8480 <_sbrk+0x20>)
    8476:	4a01      	ldr	r2, [pc, #4]	; (847c <_sbrk+0x1c>)
    8478:	6011      	str	r1, [r2, #0]
    847a:	e7f6      	b.n	846a <_sbrk+0xa>
    847c:	200000fc 	.word	0x200000fc
    8480:	200044f8 	.word	0x200044f8

00008484 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8484:	2001      	movs	r0, #1
    8486:	4240      	negs	r0, r0
    8488:	4770      	bx	lr

0000848a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    848a:	2380      	movs	r3, #128	; 0x80
    848c:	019b      	lsls	r3, r3, #6
    848e:	604b      	str	r3, [r1, #4]

	return 0;
}
    8490:	2000      	movs	r0, #0
    8492:	4770      	bx	lr

00008494 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8494:	2001      	movs	r0, #1
    8496:	4770      	bx	lr

00008498 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8498:	2000      	movs	r0, #0
    849a:	4770      	bx	lr

0000849c <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    849c:	be00      	bkpt	0x0000
    849e:	e7fe      	b.n	849e <_exit+0x2>

000084a0 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    84a0:	4770      	bx	lr

000084a2 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    84a2:	2001      	movs	r0, #1
    84a4:	4240      	negs	r0, r0
    84a6:	4770      	bx	lr

000084a8 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    84a8:	b570      	push	{r4, r5, r6, lr}
    84aa:	b082      	sub	sp, #8
    84ac:	0005      	movs	r5, r0
    84ae:	000e      	movs	r6, r1
	uint16_t temp = 0;
    84b0:	2200      	movs	r2, #0
    84b2:	466b      	mov	r3, sp
    84b4:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    84b6:	4c06      	ldr	r4, [pc, #24]	; (84d0 <usart_serial_getchar+0x28>)
    84b8:	466b      	mov	r3, sp
    84ba:	1d99      	adds	r1, r3, #6
    84bc:	0028      	movs	r0, r5
    84be:	47a0      	blx	r4
    84c0:	2800      	cmp	r0, #0
    84c2:	d1f9      	bne.n	84b8 <usart_serial_getchar+0x10>

	*c = temp;
    84c4:	466b      	mov	r3, sp
    84c6:	3306      	adds	r3, #6
    84c8:	881b      	ldrh	r3, [r3, #0]
    84ca:	7033      	strb	r3, [r6, #0]
}
    84cc:	b002      	add	sp, #8
    84ce:	bd70      	pop	{r4, r5, r6, pc}
    84d0:	000074a7 	.word	0x000074a7

000084d4 <usart_serial_putchar>:
{
    84d4:	b570      	push	{r4, r5, r6, lr}
    84d6:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    84d8:	b28c      	uxth	r4, r1
    84da:	4e03      	ldr	r6, [pc, #12]	; (84e8 <usart_serial_putchar+0x14>)
    84dc:	0021      	movs	r1, r4
    84de:	0028      	movs	r0, r5
    84e0:	47b0      	blx	r6
    84e2:	2800      	cmp	r0, #0
    84e4:	d1fa      	bne.n	84dc <usart_serial_putchar+0x8>
}
    84e6:	bd70      	pop	{r4, r5, r6, pc}
    84e8:	00007481 	.word	0x00007481

000084ec <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    84ec:	b510      	push	{r4, lr}
    84ee:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    84f0:	466b      	mov	r3, sp
    84f2:	1ddc      	adds	r4, r3, #7
    84f4:	2201      	movs	r2, #1
    84f6:	0021      	movs	r1, r4
    84f8:	480f      	ldr	r0, [pc, #60]	; (8538 <USART_HOST_ISR_VECT+0x4c>)
    84fa:	4b10      	ldr	r3, [pc, #64]	; (853c <USART_HOST_ISR_VECT+0x50>)
    84fc:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    84fe:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8500:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    8504:	2200      	movs	r2, #0
    8506:	4b0e      	ldr	r3, [pc, #56]	; (8540 <USART_HOST_ISR_VECT+0x54>)
    8508:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    850a:	4b0e      	ldr	r3, [pc, #56]	; (8544 <USART_HOST_ISR_VECT+0x58>)
    850c:	781b      	ldrb	r3, [r3, #0]
    850e:	7821      	ldrb	r1, [r4, #0]
    8510:	4a0d      	ldr	r2, [pc, #52]	; (8548 <USART_HOST_ISR_VECT+0x5c>)
    8512:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    8514:	2b9b      	cmp	r3, #155	; 0x9b
    8516:	d00a      	beq.n	852e <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    8518:	3301      	adds	r3, #1
    851a:	4a0a      	ldr	r2, [pc, #40]	; (8544 <USART_HOST_ISR_VECT+0x58>)
    851c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    851e:	2201      	movs	r2, #1
    8520:	4b07      	ldr	r3, [pc, #28]	; (8540 <USART_HOST_ISR_VECT+0x54>)
    8522:	701a      	strb	r2, [r3, #0]
    8524:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8528:	b662      	cpsie	i
}
    852a:	b002      	add	sp, #8
    852c:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    852e:	2200      	movs	r2, #0
    8530:	4b04      	ldr	r3, [pc, #16]	; (8544 <USART_HOST_ISR_VECT+0x58>)
    8532:	701a      	strb	r2, [r3, #0]
    8534:	e7f3      	b.n	851e <USART_HOST_ISR_VECT+0x32>
    8536:	46c0      	nop			; (mov r8, r8)
    8538:	20000100 	.word	0x20000100
    853c:	000075cd 	.word	0x000075cd
    8540:	20000008 	.word	0x20000008
    8544:	200001d1 	.word	0x200001d1
    8548:	20000134 	.word	0x20000134

0000854c <sio2host_init>:
{
    854c:	b5f0      	push	{r4, r5, r6, r7, lr}
    854e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    8550:	2380      	movs	r3, #128	; 0x80
    8552:	05db      	lsls	r3, r3, #23
    8554:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    8556:	2300      	movs	r3, #0
    8558:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    855a:	22ff      	movs	r2, #255	; 0xff
    855c:	4669      	mov	r1, sp
    855e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    8560:	2200      	movs	r2, #0
    8562:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    8564:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    8566:	2401      	movs	r4, #1
    8568:	2124      	movs	r1, #36	; 0x24
    856a:	4668      	mov	r0, sp
    856c:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    856e:	3101      	adds	r1, #1
    8570:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    8572:	3101      	adds	r1, #1
    8574:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    8576:	3101      	adds	r1, #1
    8578:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    857a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    857c:	3105      	adds	r1, #5
    857e:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    8580:	3101      	adds	r1, #1
    8582:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    8584:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    8586:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    8588:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    858a:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    858c:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    858e:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    8590:	2313      	movs	r3, #19
    8592:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    8594:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    8596:	23c4      	movs	r3, #196	; 0xc4
    8598:	039b      	lsls	r3, r3, #14
    859a:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    859c:	2301      	movs	r3, #1
    859e:	425b      	negs	r3, r3
    85a0:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    85a2:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    85a4:	4b2d      	ldr	r3, [pc, #180]	; (865c <sio2host_init+0x110>)
    85a6:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    85a8:	4b2d      	ldr	r3, [pc, #180]	; (8660 <sio2host_init+0x114>)
    85aa:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    85ac:	23e1      	movs	r3, #225	; 0xe1
    85ae:	025b      	lsls	r3, r3, #9
    85b0:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    85b2:	4d2c      	ldr	r5, [pc, #176]	; (8664 <sio2host_init+0x118>)
    85b4:	4b2c      	ldr	r3, [pc, #176]	; (8668 <sio2host_init+0x11c>)
    85b6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    85b8:	4a2c      	ldr	r2, [pc, #176]	; (866c <sio2host_init+0x120>)
    85ba:	4b2d      	ldr	r3, [pc, #180]	; (8670 <sio2host_init+0x124>)
    85bc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    85be:	4a2d      	ldr	r2, [pc, #180]	; (8674 <sio2host_init+0x128>)
    85c0:	4b2d      	ldr	r3, [pc, #180]	; (8678 <sio2host_init+0x12c>)
    85c2:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    85c4:	466a      	mov	r2, sp
    85c6:	492d      	ldr	r1, [pc, #180]	; (867c <sio2host_init+0x130>)
    85c8:	0028      	movs	r0, r5
    85ca:	4b2d      	ldr	r3, [pc, #180]	; (8680 <sio2host_init+0x134>)
    85cc:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    85ce:	4f2d      	ldr	r7, [pc, #180]	; (8684 <sio2host_init+0x138>)
    85d0:	683b      	ldr	r3, [r7, #0]
    85d2:	6898      	ldr	r0, [r3, #8]
    85d4:	2100      	movs	r1, #0
    85d6:	4e2c      	ldr	r6, [pc, #176]	; (8688 <sio2host_init+0x13c>)
    85d8:	47b0      	blx	r6
	setbuf(stdin, NULL);
    85da:	683b      	ldr	r3, [r7, #0]
    85dc:	6858      	ldr	r0, [r3, #4]
    85de:	2100      	movs	r1, #0
    85e0:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    85e2:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    85e4:	0030      	movs	r0, r6
    85e6:	4b29      	ldr	r3, [pc, #164]	; (868c <sio2host_init+0x140>)
    85e8:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    85ea:	231f      	movs	r3, #31
    85ec:	4018      	ands	r0, r3
    85ee:	4084      	lsls	r4, r0
    85f0:	4b27      	ldr	r3, [pc, #156]	; (8690 <sio2host_init+0x144>)
    85f2:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    85f4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    85f6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    85f8:	2b00      	cmp	r3, #0
    85fa:	d1fc      	bne.n	85f6 <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    85fc:	6833      	ldr	r3, [r6, #0]
    85fe:	2202      	movs	r2, #2
    8600:	4313      	orrs	r3, r2
    8602:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8604:	4b17      	ldr	r3, [pc, #92]	; (8664 <sio2host_init+0x118>)
    8606:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    8608:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    860a:	2a00      	cmp	r2, #0
    860c:	d1fc      	bne.n	8608 <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    860e:	6859      	ldr	r1, [r3, #4]
    8610:	2280      	movs	r2, #128	; 0x80
    8612:	0252      	lsls	r2, r2, #9
    8614:	430a      	orrs	r2, r1
    8616:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    8618:	2101      	movs	r1, #1
    861a:	4a12      	ldr	r2, [pc, #72]	; (8664 <sio2host_init+0x118>)
    861c:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    861e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8620:	2a00      	cmp	r2, #0
    8622:	d1fc      	bne.n	861e <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    8624:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8626:	2a00      	cmp	r2, #0
    8628:	d1fc      	bne.n	8624 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    862a:	6859      	ldr	r1, [r3, #4]
    862c:	2280      	movs	r2, #128	; 0x80
    862e:	0292      	lsls	r2, r2, #10
    8630:	430a      	orrs	r2, r1
    8632:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    8634:	2101      	movs	r1, #1
    8636:	4a0b      	ldr	r2, [pc, #44]	; (8664 <sio2host_init+0x118>)
    8638:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    863a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    863c:	2a00      	cmp	r2, #0
    863e:	d1fc      	bne.n	863a <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    8640:	4914      	ldr	r1, [pc, #80]	; (8694 <sio2host_init+0x148>)
    8642:	2002      	movs	r0, #2
    8644:	4b14      	ldr	r3, [pc, #80]	; (8698 <sio2host_init+0x14c>)
    8646:	4798      	blx	r3
    8648:	2204      	movs	r2, #4
    864a:	4b0c      	ldr	r3, [pc, #48]	; (867c <sio2host_init+0x130>)
    864c:	759a      	strb	r2, [r3, #22]
    864e:	2280      	movs	r2, #128	; 0x80
    8650:	00d2      	lsls	r2, r2, #3
    8652:	4b0f      	ldr	r3, [pc, #60]	; (8690 <sio2host_init+0x144>)
    8654:	601a      	str	r2, [r3, #0]
}
    8656:	b011      	add	sp, #68	; 0x44
    8658:	bdf0      	pop	{r4, r5, r6, r7, pc}
    865a:	46c0      	nop			; (mov r8, r8)
    865c:	000e0002 	.word	0x000e0002
    8660:	000f0002 	.word	0x000f0002
    8664:	20000100 	.word	0x20000100
    8668:	20001d68 	.word	0x20001d68
    866c:	000084d5 	.word	0x000084d5
    8670:	20001d64 	.word	0x20001d64
    8674:	000084a9 	.word	0x000084a9
    8678:	20001d60 	.word	0x20001d60
    867c:	42000800 	.word	0x42000800
    8680:	0000711d 	.word	0x0000711d
    8684:	20000038 	.word	0x20000038
    8688:	00011125 	.word	0x00011125
    868c:	00006cbd 	.word	0x00006cbd
    8690:	e000e100 	.word	0xe000e100
    8694:	000084ed 	.word	0x000084ed
    8698:	00006c81 	.word	0x00006c81

0000869c <sio2host_tx>:
{
    869c:	b5f0      	push	{r4, r5, r6, r7, lr}
    869e:	b083      	sub	sp, #12
    86a0:	0006      	movs	r6, r0
    86a2:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    86a4:	466b      	mov	r3, sp
    86a6:	889d      	ldrh	r5, [r3, #4]
    86a8:	4c05      	ldr	r4, [pc, #20]	; (86c0 <sio2host_tx+0x24>)
    86aa:	4f06      	ldr	r7, [pc, #24]	; (86c4 <sio2host_tx+0x28>)
    86ac:	002a      	movs	r2, r5
    86ae:	0031      	movs	r1, r6
    86b0:	0020      	movs	r0, r4
    86b2:	47b8      	blx	r7
	} while (status != STATUS_OK);
    86b4:	2800      	cmp	r0, #0
    86b6:	d1f9      	bne.n	86ac <sio2host_tx+0x10>
}
    86b8:	9801      	ldr	r0, [sp, #4]
    86ba:	b003      	add	sp, #12
    86bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86be:	46c0      	nop			; (mov r8, r8)
    86c0:	20000100 	.word	0x20000100
    86c4:	00007511 	.word	0x00007511

000086c8 <sio2host_rx>:
{
    86c8:	b570      	push	{r4, r5, r6, lr}
    86ca:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    86cc:	4b1f      	ldr	r3, [pc, #124]	; (874c <sio2host_rx+0x84>)
    86ce:	781c      	ldrb	r4, [r3, #0]
    86d0:	4b1f      	ldr	r3, [pc, #124]	; (8750 <sio2host_rx+0x88>)
    86d2:	781b      	ldrb	r3, [r3, #0]
    86d4:	429c      	cmp	r4, r3
    86d6:	d31e      	bcc.n	8716 <sio2host_rx+0x4e>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    86d8:	1ae3      	subs	r3, r4, r3
    86da:	481e      	ldr	r0, [pc, #120]	; (8754 <sio2host_rx+0x8c>)
    86dc:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    86de:	4b1d      	ldr	r3, [pc, #116]	; (8754 <sio2host_rx+0x8c>)
    86e0:	7818      	ldrb	r0, [r3, #0]
    86e2:	2800      	cmp	r0, #0
    86e4:	d030      	beq.n	8748 <sio2host_rx+0x80>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    86e6:	289b      	cmp	r0, #155	; 0x9b
    86e8:	d91b      	bls.n	8722 <sio2host_rx+0x5a>
		serial_rx_buf_head = serial_rx_buf_tail;
    86ea:	4b19      	ldr	r3, [pc, #100]	; (8750 <sio2host_rx+0x88>)
    86ec:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    86ee:	209c      	movs	r0, #156	; 0x9c
    86f0:	4b18      	ldr	r3, [pc, #96]	; (8754 <sio2host_rx+0x8c>)
    86f2:	7018      	strb	r0, [r3, #0]
    86f4:	1c08      	adds	r0, r1, #0
    86f6:	299c      	cmp	r1, #156	; 0x9c
    86f8:	d901      	bls.n	86fe <sio2host_rx+0x36>
    86fa:	4b17      	ldr	r3, [pc, #92]	; (8758 <sio2host_rx+0x90>)
    86fc:	7818      	ldrb	r0, [r3, #0]
    86fe:	b2c0      	uxtb	r0, r0
	while (max_length > 0) {
    8700:	2800      	cmp	r0, #0
    8702:	d021      	beq.n	8748 <sio2host_rx+0x80>
    8704:	4b12      	ldr	r3, [pc, #72]	; (8750 <sio2host_rx+0x88>)
    8706:	781b      	ldrb	r3, [r3, #0]
    8708:	1e44      	subs	r4, r0, #1
    870a:	b2e4      	uxtb	r4, r4
    870c:	3401      	adds	r4, #1
    870e:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    8710:	4d12      	ldr	r5, [pc, #72]	; (875c <sio2host_rx+0x94>)
			serial_rx_buf_head = 0;
    8712:	2600      	movs	r6, #0
    8714:	e00e      	b.n	8734 <sio2host_rx+0x6c>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    8716:	0020      	movs	r0, r4
    8718:	3864      	subs	r0, #100	; 0x64
    871a:	1ac3      	subs	r3, r0, r3
    871c:	480d      	ldr	r0, [pc, #52]	; (8754 <sio2host_rx+0x8c>)
    871e:	7003      	strb	r3, [r0, #0]
    8720:	e7dd      	b.n	86de <sio2host_rx+0x16>
    8722:	1c03      	adds	r3, r0, #0
    8724:	4288      	cmp	r0, r1
    8726:	d900      	bls.n	872a <sio2host_rx+0x62>
    8728:	1c0b      	adds	r3, r1, #0
    872a:	b2d8      	uxtb	r0, r3
    872c:	e7e8      	b.n	8700 <sio2host_rx+0x38>
			serial_rx_buf_head = 0;
    872e:	0033      	movs	r3, r6
	while (max_length > 0) {
    8730:	4294      	cmp	r4, r2
    8732:	d007      	beq.n	8744 <sio2host_rx+0x7c>
		*data = serial_rx_buf[serial_rx_buf_head];
    8734:	5ce9      	ldrb	r1, [r5, r3]
    8736:	7011      	strb	r1, [r2, #0]
		data++;
    8738:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    873a:	2b9b      	cmp	r3, #155	; 0x9b
    873c:	d0f7      	beq.n	872e <sio2host_rx+0x66>
			serial_rx_buf_head++;
    873e:	3301      	adds	r3, #1
    8740:	b2db      	uxtb	r3, r3
    8742:	e7f5      	b.n	8730 <sio2host_rx+0x68>
    8744:	4a02      	ldr	r2, [pc, #8]	; (8750 <sio2host_rx+0x88>)
    8746:	7013      	strb	r3, [r2, #0]
}
    8748:	bd70      	pop	{r4, r5, r6, pc}
    874a:	46c0      	nop			; (mov r8, r8)
    874c:	200001d1 	.word	0x200001d1
    8750:	200001d0 	.word	0x200001d0
    8754:	200001d2 	.word	0x200001d2
    8758:	00011dec 	.word	0x00011dec
    875c:	20000134 	.word	0x20000134

00008760 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8760:	b5f0      	push	{r4, r5, r6, r7, lr}
    8762:	46c6      	mov	lr, r8
    8764:	b500      	push	{lr}
    8766:	b084      	sub	sp, #16
    8768:	0014      	movs	r4, r2
    876a:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    876c:	4b29      	ldr	r3, [pc, #164]	; (8814 <CompareData+0xb4>)
    876e:	18cb      	adds	r3, r1, r3
    8770:	0340      	lsls	r0, r0, #13
    8772:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    8774:	2f00      	cmp	r7, #0
    8776:	d01a      	beq.n	87ae <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    8778:	4b27      	ldr	r3, [pc, #156]	; (8818 <CompareData+0xb8>)
    877a:	1e5a      	subs	r2, r3, #1
    877c:	4295      	cmp	r5, r2
    877e:	d81c      	bhi.n	87ba <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8780:	197a      	adds	r2, r7, r5
    8782:	4293      	cmp	r3, r2
    8784:	d31f      	bcc.n	87c6 <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8786:	19c9      	adds	r1, r1, r7
    8788:	2380      	movs	r3, #128	; 0x80
    878a:	019b      	lsls	r3, r3, #6
    878c:	4299      	cmp	r1, r3
    878e:	d820      	bhi.n	87d2 <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8790:	4b22      	ldr	r3, [pc, #136]	; (881c <CompareData+0xbc>)
    8792:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    8794:	1c3e      	adds	r6, r7, #0
    8796:	2f10      	cmp	r7, #16
    8798:	d900      	bls.n	879c <CompareData+0x3c>
    879a:	2610      	movs	r6, #16
    879c:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    879e:	0032      	movs	r2, r6
    87a0:	0029      	movs	r1, r5
    87a2:	4668      	mov	r0, sp
    87a4:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    87a6:	2e00      	cmp	r6, #0
    87a8:	d028      	beq.n	87fc <CompareData+0x9c>
    87aa:	2300      	movs	r3, #0
    87ac:	e01f      	b.n	87ee <CompareData+0x8e>
  assert(numberOfBytes);
    87ae:	4b1c      	ldr	r3, [pc, #112]	; (8820 <CompareData+0xc0>)
    87b0:	4a1c      	ldr	r2, [pc, #112]	; (8824 <CompareData+0xc4>)
    87b2:	21d9      	movs	r1, #217	; 0xd9
    87b4:	481c      	ldr	r0, [pc, #112]	; (8828 <CompareData+0xc8>)
    87b6:	4c1d      	ldr	r4, [pc, #116]	; (882c <CompareData+0xcc>)
    87b8:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    87ba:	4b1d      	ldr	r3, [pc, #116]	; (8830 <CompareData+0xd0>)
    87bc:	4a19      	ldr	r2, [pc, #100]	; (8824 <CompareData+0xc4>)
    87be:	21da      	movs	r1, #218	; 0xda
    87c0:	4819      	ldr	r0, [pc, #100]	; (8828 <CompareData+0xc8>)
    87c2:	4c1a      	ldr	r4, [pc, #104]	; (882c <CompareData+0xcc>)
    87c4:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    87c6:	4b1b      	ldr	r3, [pc, #108]	; (8834 <CompareData+0xd4>)
    87c8:	4a16      	ldr	r2, [pc, #88]	; (8824 <CompareData+0xc4>)
    87ca:	21db      	movs	r1, #219	; 0xdb
    87cc:	4816      	ldr	r0, [pc, #88]	; (8828 <CompareData+0xc8>)
    87ce:	4c17      	ldr	r4, [pc, #92]	; (882c <CompareData+0xcc>)
    87d0:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    87d2:	4b19      	ldr	r3, [pc, #100]	; (8838 <CompareData+0xd8>)
    87d4:	4a13      	ldr	r2, [pc, #76]	; (8824 <CompareData+0xc4>)
    87d6:	21dc      	movs	r1, #220	; 0xdc
    87d8:	4813      	ldr	r0, [pc, #76]	; (8828 <CompareData+0xc8>)
    87da:	4c14      	ldr	r4, [pc, #80]	; (882c <CompareData+0xcc>)
    87dc:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    87de:	21ff      	movs	r1, #255	; 0xff
    87e0:	4291      	cmp	r1, r2
    87e2:	d112      	bne.n	880a <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    87e4:	3301      	adds	r3, #1
    87e6:	b2db      	uxtb	r3, r3
    87e8:	b29a      	uxth	r2, r3
    87ea:	4296      	cmp	r6, r2
    87ec:	d906      	bls.n	87fc <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    87ee:	466a      	mov	r2, sp
    87f0:	5cd2      	ldrb	r2, [r2, r3]
    87f2:	2c00      	cmp	r4, #0
    87f4:	d0f3      	beq.n	87de <CompareData+0x7e>
    87f6:	7821      	ldrb	r1, [r4, #0]
    87f8:	3401      	adds	r4, #1
    87fa:	e7f1      	b.n	87e0 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    87fc:	1bbf      	subs	r7, r7, r6
    87fe:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    8800:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    8802:	2f00      	cmp	r7, #0
    8804:	d1c6      	bne.n	8794 <CompareData+0x34>
  }

  return true;
    8806:	2001      	movs	r0, #1
    8808:	e000      	b.n	880c <CompareData+0xac>
        return false;
    880a:	2000      	movs	r0, #0
}
    880c:	b004      	add	sp, #16
    880e:	bc04      	pop	{r2}
    8810:	4690      	mov	r8, r2
    8812:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8814:	00002100 	.word	0x00002100
    8818:	00006100 	.word	0x00006100
    881c:	00010a97 	.word	0x00010a97
    8820:	00011df0 	.word	0x00011df0
    8824:	00011f74 	.word	0x00011f74
    8828:	00011e00 	.word	0x00011e00
    882c:	000109d5 	.word	0x000109d5
    8830:	00011e40 	.word	0x00011e40
    8834:	00011e5c 	.word	0x00011e5c
    8838:	00011e90 	.word	0x00011e90

0000883c <D_Nv_Init>:
{
    883c:	b510      	push	{r4, lr}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    883e:	4a0b      	ldr	r2, [pc, #44]	; (886c <D_Nv_Init+0x30>)
    8840:	23ff      	movs	r3, #255	; 0xff
    8842:	421a      	tst	r2, r3
    8844:	d106      	bne.n	8854 <D_Nv_Init+0x18>
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    8846:	4b0a      	ldr	r3, [pc, #40]	; (8870 <D_Nv_Init+0x34>)
    8848:	490a      	ldr	r1, [pc, #40]	; (8874 <D_Nv_Init+0x38>)
    884a:	468c      	mov	ip, r1
    884c:	4463      	add	r3, ip
    884e:	4293      	cmp	r3, r2
    8850:	d106      	bne.n	8860 <D_Nv_Init+0x24>
}
    8852:	bd10      	pop	{r4, pc}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    8854:	4b08      	ldr	r3, [pc, #32]	; (8878 <D_Nv_Init+0x3c>)
    8856:	4a09      	ldr	r2, [pc, #36]	; (887c <D_Nv_Init+0x40>)
    8858:	2159      	movs	r1, #89	; 0x59
    885a:	4809      	ldr	r0, [pc, #36]	; (8880 <D_Nv_Init+0x44>)
    885c:	4c09      	ldr	r4, [pc, #36]	; (8884 <D_Nv_Init+0x48>)
    885e:	47a0      	blx	r4
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    8860:	4b09      	ldr	r3, [pc, #36]	; (8888 <D_Nv_Init+0x4c>)
    8862:	4a06      	ldr	r2, [pc, #24]	; (887c <D_Nv_Init+0x40>)
    8864:	215d      	movs	r1, #93	; 0x5d
    8866:	4806      	ldr	r0, [pc, #24]	; (8880 <D_Nv_Init+0x44>)
    8868:	4c06      	ldr	r4, [pc, #24]	; (8884 <D_Nv_Init+0x48>)
    886a:	47a0      	blx	r4
    886c:	00002100 	.word	0x00002100
    8870:	00006100 	.word	0x00006100
    8874:	ffffc000 	.word	0xffffc000
    8878:	00011ec0 	.word	0x00011ec0
    887c:	00011f30 	.word	0x00011f30
    8880:	00011e00 	.word	0x00011e00
    8884:	000109d5 	.word	0x000109d5
    8888:	00011ef0 	.word	0x00011ef0

0000888c <D_Nv_Read_Impl>:
{
    888c:	b570      	push	{r4, r5, r6, lr}
    888e:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8890:	0344      	lsls	r4, r0, #13
    8892:	4813      	ldr	r0, [pc, #76]	; (88e0 <D_Nv_Read_Impl+0x54>)
    8894:	1808      	adds	r0, r1, r0
    8896:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    8898:	4a12      	ldr	r2, [pc, #72]	; (88e4 <D_Nv_Read_Impl+0x58>)
    889a:	1e50      	subs	r0, r2, #1
    889c:	4284      	cmp	r4, r0
    889e:	d80d      	bhi.n	88bc <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    88a0:	18e0      	adds	r0, r4, r3
    88a2:	4282      	cmp	r2, r0
    88a4:	d310      	bcc.n	88c8 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    88a6:	18c9      	adds	r1, r1, r3
    88a8:	2280      	movs	r2, #128	; 0x80
    88aa:	0192      	lsls	r2, r2, #6
    88ac:	4291      	cmp	r1, r2
    88ae:	d811      	bhi.n	88d4 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    88b0:	001a      	movs	r2, r3
    88b2:	0021      	movs	r1, r4
    88b4:	0028      	movs	r0, r5
    88b6:	4b0c      	ldr	r3, [pc, #48]	; (88e8 <D_Nv_Read_Impl+0x5c>)
    88b8:	4798      	blx	r3
}
    88ba:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    88bc:	4b0b      	ldr	r3, [pc, #44]	; (88ec <D_Nv_Read_Impl+0x60>)
    88be:	4a0c      	ldr	r2, [pc, #48]	; (88f0 <D_Nv_Read_Impl+0x64>)
    88c0:	2172      	movs	r1, #114	; 0x72
    88c2:	480c      	ldr	r0, [pc, #48]	; (88f4 <D_Nv_Read_Impl+0x68>)
    88c4:	4c0c      	ldr	r4, [pc, #48]	; (88f8 <D_Nv_Read_Impl+0x6c>)
    88c6:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    88c8:	4b0c      	ldr	r3, [pc, #48]	; (88fc <D_Nv_Read_Impl+0x70>)
    88ca:	4a09      	ldr	r2, [pc, #36]	; (88f0 <D_Nv_Read_Impl+0x64>)
    88cc:	2173      	movs	r1, #115	; 0x73
    88ce:	4809      	ldr	r0, [pc, #36]	; (88f4 <D_Nv_Read_Impl+0x68>)
    88d0:	4c09      	ldr	r4, [pc, #36]	; (88f8 <D_Nv_Read_Impl+0x6c>)
    88d2:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    88d4:	4b0a      	ldr	r3, [pc, #40]	; (8900 <D_Nv_Read_Impl+0x74>)
    88d6:	4a06      	ldr	r2, [pc, #24]	; (88f0 <D_Nv_Read_Impl+0x64>)
    88d8:	2174      	movs	r1, #116	; 0x74
    88da:	4806      	ldr	r0, [pc, #24]	; (88f4 <D_Nv_Read_Impl+0x68>)
    88dc:	4c06      	ldr	r4, [pc, #24]	; (88f8 <D_Nv_Read_Impl+0x6c>)
    88de:	47a0      	blx	r4
    88e0:	00002100 	.word	0x00002100
    88e4:	00006100 	.word	0x00006100
    88e8:	00010a97 	.word	0x00010a97
    88ec:	00011e40 	.word	0x00011e40
    88f0:	00011f3c 	.word	0x00011f3c
    88f4:	00011e00 	.word	0x00011e00
    88f8:	000109d5 	.word	0x000109d5
    88fc:	00011e5c 	.word	0x00011e5c
    8900:	00011e90 	.word	0x00011e90

00008904 <D_Nv_Write_Impl>:
{
    8904:	b5f0      	push	{r4, r5, r6, r7, lr}
    8906:	46de      	mov	lr, fp
    8908:	4657      	mov	r7, sl
    890a:	464e      	mov	r6, r9
    890c:	4645      	mov	r5, r8
    890e:	b5e0      	push	{r5, r6, r7, lr}
    8910:	b093      	sub	sp, #76	; 0x4c
    8912:	9201      	str	r2, [sp, #4]
    8914:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8916:	4c46      	ldr	r4, [pc, #280]	; (8a30 <D_Nv_Write_Impl+0x12c>)
    8918:	190c      	adds	r4, r1, r4
    891a:	0340      	lsls	r0, r0, #13
    891c:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    891e:	2b00      	cmp	r3, #0
    8920:	d047      	beq.n	89b2 <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    8922:	4b44      	ldr	r3, [pc, #272]	; (8a34 <D_Nv_Write_Impl+0x130>)
    8924:	1e5a      	subs	r2, r3, #1
    8926:	4295      	cmp	r5, r2
    8928:	d849      	bhi.n	89be <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    892a:	4652      	mov	r2, sl
    892c:	1952      	adds	r2, r2, r5
    892e:	4293      	cmp	r3, r2
    8930:	d34b      	bcc.n	89ca <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8932:	46d3      	mov	fp, sl
    8934:	4451      	add	r1, sl
    8936:	2380      	movs	r3, #128	; 0x80
    8938:	019b      	lsls	r3, r3, #6
    893a:	4299      	cmp	r1, r3
    893c:	d84b      	bhi.n	89d6 <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    893e:	4b3e      	ldr	r3, [pc, #248]	; (8a38 <D_Nv_Write_Impl+0x134>)
    8940:	681b      	ldr	r3, [r3, #0]
    8942:	2b00      	cmp	r3, #0
    8944:	d000      	beq.n	8948 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    8946:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    8948:	273f      	movs	r7, #63	; 0x3f
    894a:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    894c:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    894e:	2640      	movs	r6, #64	; 0x40
    8950:	1bf6      	subs	r6, r6, r7
    8952:	455e      	cmp	r6, fp
    8954:	dd00      	ble.n	8958 <D_Nv_Write_Impl+0x54>
    8956:	4656      	mov	r6, sl
    8958:	b2b3      	uxth	r3, r6
    895a:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    895c:	2240      	movs	r2, #64	; 0x40
    895e:	21ff      	movs	r1, #255	; 0xff
    8960:	a802      	add	r0, sp, #8
    8962:	4b36      	ldr	r3, [pc, #216]	; (8a3c <D_Nv_Write_Impl+0x138>)
    8964:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    8966:	003b      	movs	r3, r7
    8968:	aa02      	add	r2, sp, #8
    896a:	4694      	mov	ip, r2
    896c:	4463      	add	r3, ip
    896e:	9300      	str	r3, [sp, #0]
    8970:	0436      	lsls	r6, r6, #16
    8972:	0c37      	lsrs	r7, r6, #16
    8974:	003a      	movs	r2, r7
    8976:	9901      	ldr	r1, [sp, #4]
    8978:	0018      	movs	r0, r3
    897a:	4b31      	ldr	r3, [pc, #196]	; (8a40 <D_Nv_Write_Impl+0x13c>)
    897c:	4798      	blx	r3
	cpu_irq_enter_critical();
    897e:	4b31      	ldr	r3, [pc, #196]	; (8a44 <D_Nv_Write_Impl+0x140>)
    8980:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    8982:	4e31      	ldr	r6, [pc, #196]	; (8a48 <D_Nv_Write_Impl+0x144>)
    8984:	2240      	movs	r2, #64	; 0x40
    8986:	a902      	add	r1, sp, #8
    8988:	0020      	movs	r0, r4
    898a:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    898c:	2805      	cmp	r0, #5
    898e:	d0f9      	beq.n	8984 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    8990:	4b2e      	ldr	r3, [pc, #184]	; (8a4c <D_Nv_Write_Impl+0x148>)
    8992:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    8994:	4653      	mov	r3, sl
    8996:	465a      	mov	r2, fp
    8998:	1a9e      	subs	r6, r3, r2
    899a:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    899c:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    899e:	9b01      	ldr	r3, [sp, #4]
    89a0:	4699      	mov	r9, r3
    89a2:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    89a4:	2e00      	cmp	r6, #0
    89a6:	d03b      	beq.n	8a20 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    89a8:	4b24      	ldr	r3, [pc, #144]	; (8a3c <D_Nv_Write_Impl+0x138>)
    89aa:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    89ac:	4b24      	ldr	r3, [pc, #144]	; (8a40 <D_Nv_Write_Impl+0x13c>)
    89ae:	4698      	mov	r8, r3
    89b0:	e031      	b.n	8a16 <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    89b2:	4b27      	ldr	r3, [pc, #156]	; (8a50 <D_Nv_Write_Impl+0x14c>)
    89b4:	4a27      	ldr	r2, [pc, #156]	; (8a54 <D_Nv_Write_Impl+0x150>)
    89b6:	218a      	movs	r1, #138	; 0x8a
    89b8:	4827      	ldr	r0, [pc, #156]	; (8a58 <D_Nv_Write_Impl+0x154>)
    89ba:	4c28      	ldr	r4, [pc, #160]	; (8a5c <D_Nv_Write_Impl+0x158>)
    89bc:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    89be:	4b28      	ldr	r3, [pc, #160]	; (8a60 <D_Nv_Write_Impl+0x15c>)
    89c0:	4a24      	ldr	r2, [pc, #144]	; (8a54 <D_Nv_Write_Impl+0x150>)
    89c2:	218b      	movs	r1, #139	; 0x8b
    89c4:	4824      	ldr	r0, [pc, #144]	; (8a58 <D_Nv_Write_Impl+0x154>)
    89c6:	4c25      	ldr	r4, [pc, #148]	; (8a5c <D_Nv_Write_Impl+0x158>)
    89c8:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    89ca:	4b26      	ldr	r3, [pc, #152]	; (8a64 <D_Nv_Write_Impl+0x160>)
    89cc:	4a21      	ldr	r2, [pc, #132]	; (8a54 <D_Nv_Write_Impl+0x150>)
    89ce:	218c      	movs	r1, #140	; 0x8c
    89d0:	4821      	ldr	r0, [pc, #132]	; (8a58 <D_Nv_Write_Impl+0x154>)
    89d2:	4c22      	ldr	r4, [pc, #136]	; (8a5c <D_Nv_Write_Impl+0x158>)
    89d4:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    89d6:	4b24      	ldr	r3, [pc, #144]	; (8a68 <D_Nv_Write_Impl+0x164>)
    89d8:	4a1e      	ldr	r2, [pc, #120]	; (8a54 <D_Nv_Write_Impl+0x150>)
    89da:	218d      	movs	r1, #141	; 0x8d
    89dc:	481e      	ldr	r0, [pc, #120]	; (8a58 <D_Nv_Write_Impl+0x154>)
    89de:	4c1f      	ldr	r4, [pc, #124]	; (8a5c <D_Nv_Write_Impl+0x158>)
    89e0:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    89e2:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    89e4:	2240      	movs	r2, #64	; 0x40
    89e6:	21ff      	movs	r1, #255	; 0xff
    89e8:	a802      	add	r0, sp, #8
    89ea:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    89ec:	003a      	movs	r2, r7
    89ee:	4649      	mov	r1, r9
    89f0:	9800      	ldr	r0, [sp, #0]
    89f2:	47c0      	blx	r8
	cpu_irq_enter_critical();
    89f4:	4b13      	ldr	r3, [pc, #76]	; (8a44 <D_Nv_Write_Impl+0x140>)
    89f6:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    89f8:	4d13      	ldr	r5, [pc, #76]	; (8a48 <D_Nv_Write_Impl+0x144>)
    89fa:	2240      	movs	r2, #64	; 0x40
    89fc:	a902      	add	r1, sp, #8
    89fe:	0020      	movs	r0, r4
    8a00:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    8a02:	2805      	cmp	r0, #5
    8a04:	d0f9      	beq.n	89fa <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    8a06:	4b11      	ldr	r3, [pc, #68]	; (8a4c <D_Nv_Write_Impl+0x148>)
    8a08:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    8a0a:	1bf6      	subs	r6, r6, r7
    8a0c:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    8a0e:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    8a10:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    8a12:	2e00      	cmp	r6, #0
    8a14:	d004      	beq.n	8a20 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    8a16:	1c33      	adds	r3, r6, #0
    8a18:	2e40      	cmp	r6, #64	; 0x40
    8a1a:	d9e2      	bls.n	89e2 <D_Nv_Write_Impl+0xde>
    8a1c:	2340      	movs	r3, #64	; 0x40
    8a1e:	e7e0      	b.n	89e2 <D_Nv_Write_Impl+0xde>
}
    8a20:	b013      	add	sp, #76	; 0x4c
    8a22:	bc3c      	pop	{r2, r3, r4, r5}
    8a24:	4690      	mov	r8, r2
    8a26:	4699      	mov	r9, r3
    8a28:	46a2      	mov	sl, r4
    8a2a:	46ab      	mov	fp, r5
    8a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a2e:	46c0      	nop			; (mov r8, r8)
    8a30:	00002100 	.word	0x00002100
    8a34:	00006100 	.word	0x00006100
    8a38:	200001d4 	.word	0x200001d4
    8a3c:	00010aa9 	.word	0x00010aa9
    8a40:	00010a97 	.word	0x00010a97
    8a44:	00006265 	.word	0x00006265
    8a48:	00006719 	.word	0x00006719
    8a4c:	000062a5 	.word	0x000062a5
    8a50:	00011df0 	.word	0x00011df0
    8a54:	00011f4c 	.word	0x00011f4c
    8a58:	00011e00 	.word	0x00011e00
    8a5c:	000109d5 	.word	0x000109d5
    8a60:	00011e40 	.word	0x00011e40
    8a64:	00011e5c 	.word	0x00011e5c
    8a68:	00011e90 	.word	0x00011e90

00008a6c <D_Nv_EraseSector_Impl>:
{
    8a6c:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    8a6e:	0344      	lsls	r4, r0, #13
    8a70:	480c      	ldr	r0, [pc, #48]	; (8aa4 <D_Nv_EraseSector_Impl+0x38>)
    8a72:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    8a74:	23ff      	movs	r3, #255	; 0xff
    8a76:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    8a78:	4b0b      	ldr	r3, [pc, #44]	; (8aa8 <D_Nv_EraseSector_Impl+0x3c>)
    8a7a:	3b01      	subs	r3, #1
    8a7c:	2280      	movs	r2, #128	; 0x80
    8a7e:	0192      	lsls	r2, r2, #6
    8a80:	18a6      	adds	r6, r4, r2
    8a82:	429c      	cmp	r4, r3
    8a84:	d807      	bhi.n	8a96 <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    8a86:	4d09      	ldr	r5, [pc, #36]	; (8aac <D_Nv_EraseSector_Impl+0x40>)
    8a88:	0020      	movs	r0, r4
    8a8a:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    8a8c:	3401      	adds	r4, #1
    8a8e:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    8a90:	42b4      	cmp	r4, r6
    8a92:	d1f9      	bne.n	8a88 <D_Nv_EraseSector_Impl+0x1c>
}
    8a94:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    8a96:	4b06      	ldr	r3, [pc, #24]	; (8ab0 <D_Nv_EraseSector_Impl+0x44>)
    8a98:	4a06      	ldr	r2, [pc, #24]	; (8ab4 <D_Nv_EraseSector_Impl+0x48>)
    8a9a:	21c2      	movs	r1, #194	; 0xc2
    8a9c:	4806      	ldr	r0, [pc, #24]	; (8ab8 <D_Nv_EraseSector_Impl+0x4c>)
    8a9e:	4c07      	ldr	r4, [pc, #28]	; (8abc <D_Nv_EraseSector_Impl+0x50>)
    8aa0:	47a0      	blx	r4
    8aa2:	46c0      	nop			; (mov r8, r8)
    8aa4:	00002100 	.word	0x00002100
    8aa8:	00006100 	.word	0x00006100
    8aac:	000067f1 	.word	0x000067f1
    8ab0:	00011e40 	.word	0x00011e40
    8ab4:	00011f5c 	.word	0x00011f5c
    8ab8:	00011e00 	.word	0x00011e00
    8abc:	000109d5 	.word	0x000109d5

00008ac0 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    8ac0:	b510      	push	{r4, lr}
    8ac2:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    8ac4:	2200      	movs	r2, #0
    8ac6:	4c01      	ldr	r4, [pc, #4]	; (8acc <D_Nv_IsEmpty_Impl+0xc>)
    8ac8:	47a0      	blx	r4
}
    8aca:	bd10      	pop	{r4, pc}
    8acc:	00008761 	.word	0x00008761

00008ad0 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8ad0:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    8ad2:	4c01      	ldr	r4, [pc, #4]	; (8ad8 <D_Nv_IsEqual_Impl+0x8>)
    8ad4:	47a0      	blx	r4
}
    8ad6:	bd10      	pop	{r4, pc}
    8ad8:	00008761 	.word	0x00008761

00008adc <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    8adc:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    8ade:	4b05      	ldr	r3, [pc, #20]	; (8af4 <PowerSupplyTooLow+0x18>)
    8ae0:	681b      	ldr	r3, [r3, #0]
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d004      	beq.n	8af0 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    8ae6:	4798      	blx	r3
    8ae8:	2301      	movs	r3, #1
    8aea:	4058      	eors	r0, r3
    8aec:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    8aee:	bd10      	pop	{r4, pc}
    bool result = false;
    8af0:	2000      	movs	r0, #0
    8af2:	e7fc      	b.n	8aee <PowerSupplyTooLow+0x12>
    8af4:	20000350 	.word	0x20000350

00008af8 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    8af8:	2901      	cmp	r1, #1
    8afa:	d009      	beq.n	8b10 <UpdateSectorHead+0x18>
    8afc:	2900      	cmp	r1, #0
    8afe:	d002      	beq.n	8b06 <UpdateSectorHead+0xe>
    8b00:	2902      	cmp	r1, #2
    8b02:	d00d      	beq.n	8b20 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    8b04:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    8b06:	4b0a      	ldr	r3, [pc, #40]	; (8b30 <UpdateSectorHead+0x38>)
    8b08:	881a      	ldrh	r2, [r3, #0]
    8b0a:	1880      	adds	r0, r0, r2
    8b0c:	8018      	strh	r0, [r3, #0]
           break;
    8b0e:	e7f9      	b.n	8b04 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    8b10:	4a07      	ldr	r2, [pc, #28]	; (8b30 <UpdateSectorHead+0x38>)
    8b12:	8813      	ldrh	r3, [r2, #0]
    8b14:	330f      	adds	r3, #15
    8b16:	18c0      	adds	r0, r0, r3
    8b18:	230f      	movs	r3, #15
    8b1a:	4398      	bics	r0, r3
    8b1c:	8010      	strh	r0, [r2, #0]
           break;
    8b1e:	e7f1      	b.n	8b04 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    8b20:	4a03      	ldr	r2, [pc, #12]	; (8b30 <UpdateSectorHead+0x38>)
    8b22:	8813      	ldrh	r3, [r2, #0]
    8b24:	333f      	adds	r3, #63	; 0x3f
    8b26:	18c0      	adds	r0, r0, r3
    8b28:	233f      	movs	r3, #63	; 0x3f
    8b2a:	4398      	bics	r0, r3
    8b2c:	8010      	strh	r0, [r2, #0]
}
    8b2e:	e7e9      	b.n	8b04 <UpdateSectorHead+0xc>
    8b30:	20000356 	.word	0x20000356

00008b34 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    8b34:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    8b36:	2900      	cmp	r1, #0
    8b38:	d019      	beq.n	8b6e <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    8b3a:	24ff      	movs	r4, #255	; 0xff
    8b3c:	e013      	b.n	8b66 <ComputeCrc+0x32>
    8b3e:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    8b40:	0a15      	lsrs	r5, r2, #8
    8b42:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    8b44:	091d      	lsrs	r5, r3, #4
    8b46:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    8b48:	0212      	lsls	r2, r2, #8
    8b4a:	405a      	eors	r2, r3
    8b4c:	031d      	lsls	r5, r3, #12
    8b4e:	406a      	eors	r2, r5
    8b50:	015b      	lsls	r3, r3, #5
    8b52:	405a      	eors	r2, r3
    8b54:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    8b56:	0003      	movs	r3, r0
    8b58:	1e5d      	subs	r5, r3, #1
    8b5a:	41ab      	sbcs	r3, r5
    8b5c:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    8b5e:	3901      	subs	r1, #1
    8b60:	b289      	uxth	r1, r1
    8b62:	2900      	cmp	r1, #0
    8b64:	d003      	beq.n	8b6e <ComputeCrc+0x3a>
        if (pData == NULL)
    8b66:	2800      	cmp	r0, #0
    8b68:	d0e9      	beq.n	8b3e <ComputeCrc+0xa>
            data = *pData;
    8b6a:	7803      	ldrb	r3, [r0, #0]
    8b6c:	e7e8      	b.n	8b40 <ComputeCrc+0xc>
    }

    return crc;
}
    8b6e:	0010      	movs	r0, r2
    8b70:	bd30      	pop	{r4, r5, pc}
    8b72:	Address 0x00008b72 is out of bounds.


00008b74 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    8b74:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b76:	46de      	mov	lr, fp
    8b78:	4657      	mov	r7, sl
    8b7a:	b580      	push	{r7, lr}
    8b7c:	b089      	sub	sp, #36	; 0x24
    8b7e:	9001      	str	r0, [sp, #4]
    8b80:	9102      	str	r1, [sp, #8]
    8b82:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    8b84:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8b86:	2a00      	cmp	r2, #0
    8b88:	d00d      	beq.n	8ba6 <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    8b8a:	4692      	mov	sl, r2
    8b8c:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    8b8e:	445b      	add	r3, fp
    8b90:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    8b92:	465e      	mov	r6, fp
    8b94:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    8b96:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    8b98:	45ab      	cmp	fp, r5
    8b9a:	d03e      	beq.n	8c1a <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8b9c:	4f22      	ldr	r7, [pc, #136]	; (8c28 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    8b9e:	2c00      	cmp	r4, #0
    8ba0:	d108      	bne.n	8bb4 <GatherData+0x40>
                return false;
    8ba2:	2000      	movs	r0, #0
    8ba4:	e039      	b.n	8c1a <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    8ba6:	2200      	movs	r2, #0
    8ba8:	4692      	mov	sl, r2
    8baa:	e7f0      	b.n	8b8e <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    8bac:	ab04      	add	r3, sp, #16
    8bae:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    8bb0:	2c00      	cmp	r4, #0
    8bb2:	d031      	beq.n	8c18 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    8bb4:	2310      	movs	r3, #16
    8bb6:	aa04      	add	r2, sp, #16
    8bb8:	0021      	movs	r1, r4
    8bba:	9801      	ldr	r0, [sp, #4]
    8bbc:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    8bbe:	ab04      	add	r3, sp, #16
    8bc0:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    8bc2:	42aa      	cmp	r2, r5
    8bc4:	d2f2      	bcs.n	8bac <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    8bc6:	88db      	ldrh	r3, [r3, #6]
    8bc8:	18d3      	adds	r3, r2, r3
    8bca:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    8bcc:	42b3      	cmp	r3, r6
    8bce:	d9ed      	bls.n	8bac <GatherData+0x38>
            else if ( readEnd > blockEnd )
    8bd0:	42ab      	cmp	r3, r5
    8bd2:	d201      	bcs.n	8bd8 <GatherData+0x64>
                readStart = blockEnd;
    8bd4:	001e      	movs	r6, r3
    8bd6:	e7e9      	b.n	8bac <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    8bd8:	1aa9      	subs	r1, r5, r2
    8bda:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    8bdc:	42b2      	cmp	r2, r6
    8bde:	d915      	bls.n	8c0c <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    8be0:	ab04      	add	r3, sp, #16
    8be2:	895b      	ldrh	r3, [r3, #10]
    8be4:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    8be6:	000b      	movs	r3, r1
        readEnd -= count;
    8be8:	1aed      	subs	r5, r5, r3
    8bea:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    8bec:	4652      	mov	r2, sl
    8bee:	2a00      	cmp	r2, #0
    8bf0:	d008      	beq.n	8c04 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    8bf2:	3410      	adds	r4, #16
    8bf4:	1909      	adds	r1, r1, r4
            pDestination -= count;
    8bf6:	1ad2      	subs	r2, r2, r3
    8bf8:	4692      	mov	sl, r2
            sourcePointer -= count;
    8bfa:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    8bfc:	b289      	uxth	r1, r1
    8bfe:	9801      	ldr	r0, [sp, #4]
    8c00:	4c09      	ldr	r4, [pc, #36]	; (8c28 <GatherData+0xb4>)
    8c02:	47a0      	blx	r4
    while ( readStart != readEnd )
    8c04:	42ae      	cmp	r6, r5
    8c06:	d00d      	beq.n	8c24 <GatherData+0xb0>
    8c08:	9c03      	ldr	r4, [sp, #12]
    8c0a:	e7c8      	b.n	8b9e <GatherData+0x2a>
            count = readEnd - readStart;
    8c0c:	1bab      	subs	r3, r5, r6
    8c0e:	b29b      	uxth	r3, r3
            readStart = offset;
    8c10:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    8c12:	9a02      	ldr	r2, [sp, #8]
    8c14:	9203      	str	r2, [sp, #12]
    8c16:	e7e7      	b.n	8be8 <GatherData+0x74>
                return false;
    8c18:	2000      	movs	r0, #0
}
    8c1a:	b009      	add	sp, #36	; 0x24
    8c1c:	bc0c      	pop	{r2, r3}
    8c1e:	4692      	mov	sl, r2
    8c20:	469b      	mov	fp, r3
    8c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    8c24:	2001      	movs	r0, #1
    8c26:	e7f8      	b.n	8c1a <GatherData+0xa6>
    8c28:	0000888d 	.word	0x0000888d

00008c2c <ComputeDataCrc>:
{
    8c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c2e:	46de      	mov	lr, fp
    8c30:	4647      	mov	r7, r8
    8c32:	b580      	push	{r7, lr}
    8c34:	b087      	sub	sp, #28
    8c36:	9004      	str	r0, [sp, #16]
    8c38:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    8c3a:	7995      	ldrb	r5, [r2, #6]
    8c3c:	79d3      	ldrb	r3, [r2, #7]
    8c3e:	021b      	lsls	r3, r3, #8
    8c40:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    8c42:	7917      	ldrb	r7, [r2, #4]
    8c44:	7953      	ldrb	r3, [r2, #5]
    8c46:	021b      	lsls	r3, r3, #8
    8c48:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8c4a:	0a2c      	lsrs	r4, r5, #8
    8c4c:	b264      	sxtb	r4, r4
    8c4e:	2c00      	cmp	r4, #0
    8c50:	db2f      	blt.n	8cb2 <ComputeDataCrc+0x86>
    8c52:	4b1c      	ldr	r3, [pc, #112]	; (8cc4 <ComputeDataCrc+0x98>)
    8c54:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8c56:	4b1c      	ldr	r3, [pc, #112]	; (8cc8 <ComputeDataCrc+0x9c>)
    8c58:	4698      	mov	r8, r3
    8c5a:	e011      	b.n	8c80 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    8c5c:	2d00      	cmp	r5, #0
    8c5e:	d02a      	beq.n	8cb6 <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8c60:	4b1a      	ldr	r3, [pc, #104]	; (8ccc <ComputeDataCrc+0xa0>)
    8c62:	9300      	str	r3, [sp, #0]
    8c64:	002b      	movs	r3, r5
    8c66:	003a      	movs	r2, r7
    8c68:	9905      	ldr	r1, [sp, #20]
    8c6a:	9804      	ldr	r0, [sp, #16]
    8c6c:	4e18      	ldr	r6, [pc, #96]	; (8cd0 <ComputeDataCrc+0xa4>)
    8c6e:	47b0      	blx	r6
    8c70:	2800      	cmp	r0, #0
    8c72:	d020      	beq.n	8cb6 <ComputeDataCrc+0x8a>
    8c74:	0029      	movs	r1, r5
    8c76:	e015      	b.n	8ca4 <ComputeDataCrc+0x78>
    8c78:	3c01      	subs	r4, #1
    8c7a:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    8c7c:	1c63      	adds	r3, r4, #1
    8c7e:	d01a      	beq.n	8cb6 <ComputeDataCrc+0x8a>
        if (i)
    8c80:	2c00      	cmp	r4, #0
    8c82:	d0eb      	beq.n	8c5c <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    8c84:	3d01      	subs	r5, #1
    8c86:	3dff      	subs	r5, #255	; 0xff
    8c88:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    8c8a:	4b10      	ldr	r3, [pc, #64]	; (8ccc <ComputeDataCrc+0xa0>)
    8c8c:	9300      	str	r3, [sp, #0]
    8c8e:	2380      	movs	r3, #128	; 0x80
    8c90:	005b      	lsls	r3, r3, #1
    8c92:	003a      	movs	r2, r7
    8c94:	9905      	ldr	r1, [sp, #20]
    8c96:	9804      	ldr	r0, [sp, #16]
    8c98:	4e0d      	ldr	r6, [pc, #52]	; (8cd0 <ComputeDataCrc+0xa4>)
    8c9a:	47b0      	blx	r6
    8c9c:	2800      	cmp	r0, #0
    8c9e:	d0eb      	beq.n	8c78 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    8ca0:	2180      	movs	r1, #128	; 0x80
    8ca2:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    8ca4:	187f      	adds	r7, r7, r1
    8ca6:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    8ca8:	9a03      	ldr	r2, [sp, #12]
    8caa:	4808      	ldr	r0, [pc, #32]	; (8ccc <ComputeDataCrc+0xa0>)
    8cac:	47c0      	blx	r8
    8cae:	9003      	str	r0, [sp, #12]
    8cb0:	e7e2      	b.n	8c78 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    8cb2:	4b04      	ldr	r3, [pc, #16]	; (8cc4 <ComputeDataCrc+0x98>)
    8cb4:	9303      	str	r3, [sp, #12]
}
    8cb6:	9803      	ldr	r0, [sp, #12]
    8cb8:	b007      	add	sp, #28
    8cba:	bc0c      	pop	{r2, r3}
    8cbc:	4690      	mov	r8, r2
    8cbe:	469b      	mov	fp, r3
    8cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8cc2:	46c0      	nop			; (mov r8, r8)
    8cc4:	0000ffff 	.word	0x0000ffff
    8cc8:	00008b35 	.word	0x00008b35
    8ccc:	20000208 	.word	0x20000208
    8cd0:	00008b75 	.word	0x00008b75

00008cd4 <FindItemCache>:
{
    8cd4:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    8cd6:	4b16      	ldr	r3, [pc, #88]	; (8d30 <FindItemCache+0x5c>)
    8cd8:	781c      	ldrb	r4, [r3, #0]
    8cda:	2c00      	cmp	r4, #0
    8cdc:	d026      	beq.n	8d2c <FindItemCache+0x58>
        if ( cache->id == id )
    8cde:	4b15      	ldr	r3, [pc, #84]	; (8d34 <FindItemCache+0x60>)
    8ce0:	881b      	ldrh	r3, [r3, #0]
    8ce2:	4283      	cmp	r3, r0
    8ce4:	d016      	beq.n	8d14 <FindItemCache+0x40>
    8ce6:	2301      	movs	r3, #1
    8ce8:	4e12      	ldr	r6, [pc, #72]	; (8d34 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    8cea:	b2da      	uxtb	r2, r3
    8cec:	4294      	cmp	r4, r2
    8cee:	d91b      	bls.n	8d28 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    8cf0:	001d      	movs	r5, r3
        if ( cache->id == id )
    8cf2:	1c59      	adds	r1, r3, #1
    8cf4:	009a      	lsls	r2, r3, #2
    8cf6:	5ab2      	ldrh	r2, [r6, r2]
    8cf8:	4282      	cmp	r2, r0
    8cfa:	d001      	beq.n	8d00 <FindItemCache+0x2c>
    8cfc:	000b      	movs	r3, r1
    8cfe:	e7f4      	b.n	8cea <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    8d00:	009b      	lsls	r3, r3, #2
    8d02:	480c      	ldr	r0, [pc, #48]	; (8d34 <FindItemCache+0x60>)
    8d04:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    8d06:	00ad      	lsls	r5, r5, #2
    8d08:	4b0a      	ldr	r3, [pc, #40]	; (8d34 <FindItemCache+0x60>)
    8d0a:	195d      	adds	r5, r3, r5
    8d0c:	886b      	ldrh	r3, [r5, #2]
    8d0e:	2b00      	cmp	r3, #0
    8d10:	d003      	beq.n	8d1a <FindItemCache+0x46>
}
    8d12:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    8d14:	4807      	ldr	r0, [pc, #28]	; (8d34 <FindItemCache+0x60>)
    8d16:	2500      	movs	r5, #0
    8d18:	e7f5      	b.n	8d06 <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    8d1a:	4b07      	ldr	r3, [pc, #28]	; (8d38 <FindItemCache+0x64>)
    8d1c:	4a07      	ldr	r2, [pc, #28]	; (8d3c <FindItemCache+0x68>)
    8d1e:	218c      	movs	r1, #140	; 0x8c
    8d20:	31ff      	adds	r1, #255	; 0xff
    8d22:	4807      	ldr	r0, [pc, #28]	; (8d40 <FindItemCache+0x6c>)
    8d24:	4c07      	ldr	r4, [pc, #28]	; (8d44 <FindItemCache+0x70>)
    8d26:	47a0      	blx	r4
    return NULL;
    8d28:	2000      	movs	r0, #0
    8d2a:	e7f2      	b.n	8d12 <FindItemCache+0x3e>
    8d2c:	2000      	movs	r0, #0
    8d2e:	e7f0      	b.n	8d12 <FindItemCache+0x3e>
    8d30:	2000034c 	.word	0x2000034c
    8d34:	20000324 	.word	0x20000324
    8d38:	00011ff0 	.word	0x00011ff0
    8d3c:	000120d8 	.word	0x000120d8
    8d40:	0001200c 	.word	0x0001200c
    8d44:	000109d5 	.word	0x000109d5

00008d48 <FindItem>:
{
    8d48:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    8d4a:	4b05      	ldr	r3, [pc, #20]	; (8d60 <FindItem+0x18>)
    8d4c:	4798      	blx	r3
    if (cache)
    8d4e:	2800      	cmp	r0, #0
    8d50:	d004      	beq.n	8d5c <FindItem+0x14>
        return cache->lastBlock;
    8d52:	7883      	ldrb	r3, [r0, #2]
    8d54:	78c0      	ldrb	r0, [r0, #3]
    8d56:	0200      	lsls	r0, r0, #8
    8d58:	4318      	orrs	r0, r3
}
    8d5a:	bd10      	pop	{r4, pc}
    return 0x0000u;
    8d5c:	2000      	movs	r0, #0
    8d5e:	e7fc      	b.n	8d5a <FindItem+0x12>
    8d60:	00008cd5 	.word	0x00008cd5

00008d64 <CreateItemCache>:
{
    8d64:	b510      	push	{r4, lr}
    8d66:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    8d68:	4b0e      	ldr	r3, [pc, #56]	; (8da4 <CreateItemCache+0x40>)
    8d6a:	4798      	blx	r3
    8d6c:	2800      	cmp	r0, #0
    8d6e:	d10b      	bne.n	8d88 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    8d70:	4b0d      	ldr	r3, [pc, #52]	; (8da8 <CreateItemCache+0x44>)
    8d72:	781b      	ldrb	r3, [r3, #0]
    8d74:	2b09      	cmp	r3, #9
    8d76:	d80e      	bhi.n	8d96 <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    8d78:	1c59      	adds	r1, r3, #1
    8d7a:	4a0b      	ldr	r2, [pc, #44]	; (8da8 <CreateItemCache+0x44>)
    8d7c:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    8d7e:	480b      	ldr	r0, [pc, #44]	; (8dac <CreateItemCache+0x48>)
    8d80:	009b      	lsls	r3, r3, #2
    8d82:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    8d84:	18c0      	adds	r0, r0, r3
}
    8d86:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    8d88:	4b09      	ldr	r3, [pc, #36]	; (8db0 <CreateItemCache+0x4c>)
    8d8a:	4a0a      	ldr	r2, [pc, #40]	; (8db4 <CreateItemCache+0x50>)
    8d8c:	21cc      	movs	r1, #204	; 0xcc
    8d8e:	0049      	lsls	r1, r1, #1
    8d90:	4809      	ldr	r0, [pc, #36]	; (8db8 <CreateItemCache+0x54>)
    8d92:	4c0a      	ldr	r4, [pc, #40]	; (8dbc <CreateItemCache+0x58>)
    8d94:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    8d96:	4b0a      	ldr	r3, [pc, #40]	; (8dc0 <CreateItemCache+0x5c>)
    8d98:	4a06      	ldr	r2, [pc, #24]	; (8db4 <CreateItemCache+0x50>)
    8d9a:	219a      	movs	r1, #154	; 0x9a
    8d9c:	31ff      	adds	r1, #255	; 0xff
    8d9e:	4806      	ldr	r0, [pc, #24]	; (8db8 <CreateItemCache+0x54>)
    8da0:	4c06      	ldr	r4, [pc, #24]	; (8dbc <CreateItemCache+0x58>)
    8da2:	47a0      	blx	r4
    8da4:	00008cd5 	.word	0x00008cd5
    8da8:	2000034c 	.word	0x2000034c
    8dac:	20000324 	.word	0x20000324
    8db0:	00011f98 	.word	0x00011f98
    8db4:	000120e8 	.word	0x000120e8
    8db8:	0001200c 	.word	0x0001200c
    8dbc:	000109d5 	.word	0x000109d5
    8dc0:	00011fb4 	.word	0x00011fb4

00008dc4 <DeleteItemCache>:
{
    8dc4:	b510      	push	{r4, lr}
    assert(FindItemCache(id) != NULL);
    8dc6:	4b0b      	ldr	r3, [pc, #44]	; (8df4 <DeleteItemCache+0x30>)
    8dc8:	4798      	blx	r3
    8dca:	2800      	cmp	r0, #0
    8dcc:	d00b      	beq.n	8de6 <DeleteItemCache+0x22>
    *cache = s_itemCache[--s_itemCount];
    8dce:	4b0a      	ldr	r3, [pc, #40]	; (8df8 <DeleteItemCache+0x34>)
    8dd0:	7819      	ldrb	r1, [r3, #0]
    8dd2:	3901      	subs	r1, #1
    8dd4:	b2c9      	uxtb	r1, r1
    8dd6:	7019      	strb	r1, [r3, #0]
    8dd8:	0089      	lsls	r1, r1, #2
    8dda:	4b08      	ldr	r3, [pc, #32]	; (8dfc <DeleteItemCache+0x38>)
    8ddc:	1859      	adds	r1, r3, r1
    8dde:	2204      	movs	r2, #4
    8de0:	4b07      	ldr	r3, [pc, #28]	; (8e00 <DeleteItemCache+0x3c>)
    8de2:	4798      	blx	r3
}
    8de4:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) != NULL);
    8de6:	4b07      	ldr	r3, [pc, #28]	; (8e04 <DeleteItemCache+0x40>)
    8de8:	4a07      	ldr	r2, [pc, #28]	; (8e08 <DeleteItemCache+0x44>)
    8dea:	21d3      	movs	r1, #211	; 0xd3
    8dec:	0049      	lsls	r1, r1, #1
    8dee:	4807      	ldr	r0, [pc, #28]	; (8e0c <DeleteItemCache+0x48>)
    8df0:	4c07      	ldr	r4, [pc, #28]	; (8e10 <DeleteItemCache+0x4c>)
    8df2:	47a0      	blx	r4
    8df4:	00008cd5 	.word	0x00008cd5
    8df8:	2000034c 	.word	0x2000034c
    8dfc:	20000324 	.word	0x20000324
    8e00:	00010a97 	.word	0x00010a97
    8e04:	00011fd4 	.word	0x00011fd4
    8e08:	000120f8 	.word	0x000120f8
    8e0c:	0001200c 	.word	0x0001200c
    8e10:	000109d5 	.word	0x000109d5

00008e14 <eraseSectorTimerFired>:
{
    8e14:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow())
    8e16:	4b05      	ldr	r3, [pc, #20]	; (8e2c <eraseSectorTimerFired+0x18>)
    8e18:	4798      	blx	r3
    8e1a:	2800      	cmp	r0, #0
    8e1c:	d000      	beq.n	8e20 <eraseSectorTimerFired+0xc>
}
    8e1e:	bd10      	pop	{r4, pc}
        D_Nv_EraseSector(s_sectorToErase);
    8e20:	4b03      	ldr	r3, [pc, #12]	; (8e30 <eraseSectorTimerFired+0x1c>)
    8e22:	7818      	ldrb	r0, [r3, #0]
    8e24:	4b03      	ldr	r3, [pc, #12]	; (8e34 <eraseSectorTimerFired+0x20>)
    8e26:	4798      	blx	r3
}
    8e28:	e7f9      	b.n	8e1e <eraseSectorTimerFired+0xa>
    8e2a:	46c0      	nop			; (mov r8, r8)
    8e2c:	00008add 	.word	0x00008add
    8e30:	20000009 	.word	0x20000009
    8e34:	00008a6d 	.word	0x00008a6d

00008e38 <EraseSector>:

static bool EraseSector(void)
{
    8e38:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    8e3a:	4c08      	ldr	r4, [pc, #32]	; (8e5c <EraseSector+0x24>)
    8e3c:	7820      	ldrb	r0, [r4, #0]
    8e3e:	4b08      	ldr	r3, [pc, #32]	; (8e60 <EraseSector+0x28>)
    8e40:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    8e42:	7820      	ldrb	r0, [r4, #0]
    8e44:	2280      	movs	r2, #128	; 0x80
    8e46:	0192      	lsls	r2, r2, #6
    8e48:	2100      	movs	r1, #0
    8e4a:	4b06      	ldr	r3, [pc, #24]	; (8e64 <EraseSector+0x2c>)
    8e4c:	4798      	blx	r3
    8e4e:	2800      	cmp	r0, #0
    8e50:	d003      	beq.n	8e5a <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    8e52:	2280      	movs	r2, #128	; 0x80
    8e54:	0052      	lsls	r2, r2, #1
    8e56:	4b04      	ldr	r3, [pc, #16]	; (8e68 <EraseSector+0x30>)
    8e58:	801a      	strh	r2, [r3, #0]

    return true;
}
    8e5a:	bd10      	pop	{r4, pc}
    8e5c:	20000354 	.word	0x20000354
    8e60:	00008a6d 	.word	0x00008a6d
    8e64:	00008ac1 	.word	0x00008ac1
    8e68:	20000356 	.word	0x20000356

00008e6c <WriteAndCheck>:
{
    8e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e6e:	b083      	sub	sp, #12
    8e70:	9001      	str	r0, [sp, #4]
    8e72:	000d      	movs	r5, r1
    8e74:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    8e76:	4f07      	ldr	r7, [pc, #28]	; (8e94 <WriteAndCheck+0x28>)
    8e78:	7838      	ldrb	r0, [r7, #0]
    8e7a:	0013      	movs	r3, r2
    8e7c:	000a      	movs	r2, r1
    8e7e:	9901      	ldr	r1, [sp, #4]
    8e80:	4c05      	ldr	r4, [pc, #20]	; (8e98 <WriteAndCheck+0x2c>)
    8e82:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    8e84:	7838      	ldrb	r0, [r7, #0]
    8e86:	0033      	movs	r3, r6
    8e88:	002a      	movs	r2, r5
    8e8a:	9901      	ldr	r1, [sp, #4]
    8e8c:	4c03      	ldr	r4, [pc, #12]	; (8e9c <WriteAndCheck+0x30>)
    8e8e:	47a0      	blx	r4
}
    8e90:	b003      	add	sp, #12
    8e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e94:	20000354 	.word	0x20000354
    8e98:	00008905 	.word	0x00008905
    8e9c:	00008ad1 	.word	0x00008ad1

00008ea0 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    8ea0:	b510      	push	{r4, lr}
    8ea2:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    8ea4:	ac01      	add	r4, sp, #4
    8ea6:	2341      	movs	r3, #65	; 0x41
    8ea8:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    8eaa:	3313      	adds	r3, #19
    8eac:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    8eae:	3b01      	subs	r3, #1
    8eb0:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    8eb2:	3b05      	subs	r3, #5
    8eb4:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    8eb6:	3328      	adds	r3, #40	; 0x28
    8eb8:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    8eba:	3b44      	subs	r3, #68	; 0x44
    8ebc:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    8ebe:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    8ec0:	43c0      	mvns	r0, r0
    8ec2:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    8ec4:	4b08      	ldr	r3, [pc, #32]	; (8ee8 <WriteSectorHeader+0x48>)
    8ec6:	881b      	ldrh	r3, [r3, #0]
    8ec8:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    8eca:	4a08      	ldr	r2, [pc, #32]	; (8eec <WriteSectorHeader+0x4c>)
    8ecc:	2110      	movs	r1, #16
    8ece:	466b      	mov	r3, sp
    8ed0:	1d98      	adds	r0, r3, #6
    8ed2:	4b07      	ldr	r3, [pc, #28]	; (8ef0 <WriteSectorHeader+0x50>)
    8ed4:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    8ed6:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    8ed8:	2212      	movs	r2, #18
    8eda:	0021      	movs	r1, r4
    8edc:	2000      	movs	r0, #0
    8ede:	4b05      	ldr	r3, [pc, #20]	; (8ef4 <WriteSectorHeader+0x54>)
    8ee0:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    8ee2:	b006      	add	sp, #24
    8ee4:	bd10      	pop	{r4, pc}
    8ee6:	46c0      	nop			; (mov r8, r8)
    8ee8:	2000034e 	.word	0x2000034e
    8eec:	0000ffff 	.word	0x0000ffff
    8ef0:	00008b35 	.word	0x00008b35
    8ef4:	00008e6d 	.word	0x00008e6d

00008ef8 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    8ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8efa:	0004      	movs	r4, r0
    8efc:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    8efe:	4a21      	ldr	r2, [pc, #132]	; (8f84 <SmartCompacting+0x8c>)
    8f00:	8813      	ldrh	r3, [r2, #0]
    8f02:	18cb      	adds	r3, r1, r3
    8f04:	b29b      	uxth	r3, r3
    8f06:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    8f08:	2bff      	cmp	r3, #255	; 0xff
    8f0a:	d92e      	bls.n	8f6a <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    8f0c:	4b1e      	ldr	r3, [pc, #120]	; (8f88 <SmartCompacting+0x90>)
    8f0e:	881a      	ldrh	r2, [r3, #0]
    8f10:	1880      	adds	r0, r0, r2
    8f12:	2580      	movs	r5, #128	; 0x80
    8f14:	006d      	lsls	r5, r5, #1
    8f16:	1aaa      	subs	r2, r5, r2
    8f18:	491c      	ldr	r1, [pc, #112]	; (8f8c <SmartCompacting+0x94>)
    8f1a:	4b1d      	ldr	r3, [pc, #116]	; (8f90 <SmartCompacting+0x98>)
    8f1c:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    8f1e:	4b1d      	ldr	r3, [pc, #116]	; (8f94 <SmartCompacting+0x9c>)
    8f20:	8818      	ldrh	r0, [r3, #0]
    8f22:	002a      	movs	r2, r5
    8f24:	0021      	movs	r1, r4
    8f26:	4b1c      	ldr	r3, [pc, #112]	; (8f98 <SmartCompacting+0xa0>)
    8f28:	4798      	blx	r3
    8f2a:	1e05      	subs	r5, r0, #0
    8f2c:	d027      	beq.n	8f7e <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    8f2e:	2100      	movs	r1, #0
    8f30:	2080      	movs	r0, #128	; 0x80
    8f32:	0040      	lsls	r0, r0, #1
    8f34:	4b19      	ldr	r3, [pc, #100]	; (8f9c <SmartCompacting+0xa4>)
    8f36:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8f38:	4b13      	ldr	r3, [pc, #76]	; (8f88 <SmartCompacting+0x90>)
    8f3a:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    8f3c:	2200      	movs	r2, #0
    8f3e:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    8f40:	4b10      	ldr	r3, [pc, #64]	; (8f84 <SmartCompacting+0x8c>)
    8f42:	881e      	ldrh	r6, [r3, #0]
    8f44:	3e01      	subs	r6, #1
    8f46:	3eff      	subs	r6, #255	; 0xff
    8f48:	b2b6      	uxth	r6, r6
    8f4a:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    8f4c:	2e00      	cmp	r6, #0
    8f4e:	d016      	beq.n	8f7e <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    8f50:	2180      	movs	r1, #128	; 0x80
    8f52:	0049      	lsls	r1, r1, #1
    8f54:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    8f56:	b289      	uxth	r1, r1
    8f58:	4b0c      	ldr	r3, [pc, #48]	; (8f8c <SmartCompacting+0x94>)
    8f5a:	1859      	adds	r1, r3, r1
    8f5c:	0032      	movs	r2, r6
    8f5e:	0020      	movs	r0, r4
    8f60:	4b0b      	ldr	r3, [pc, #44]	; (8f90 <SmartCompacting+0x98>)
    8f62:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    8f64:	4b08      	ldr	r3, [pc, #32]	; (8f88 <SmartCompacting+0x90>)
    8f66:	801e      	strh	r6, [r3, #0]
    8f68:	e009      	b.n	8f7e <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    8f6a:	4e07      	ldr	r6, [pc, #28]	; (8f88 <SmartCompacting+0x90>)
    8f6c:	8837      	ldrh	r7, [r6, #0]
    8f6e:	19c0      	adds	r0, r0, r7
    8f70:	000a      	movs	r2, r1
    8f72:	4906      	ldr	r1, [pc, #24]	; (8f8c <SmartCompacting+0x94>)
    8f74:	4b06      	ldr	r3, [pc, #24]	; (8f90 <SmartCompacting+0x98>)
    8f76:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    8f78:	19ed      	adds	r5, r5, r7
    8f7a:	8035      	strh	r5, [r6, #0]
        return true;
    8f7c:	2501      	movs	r5, #1
        }
    }

    return true;

}
    8f7e:	0028      	movs	r0, r5
    8f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f82:	46c0      	nop			; (mov r8, r8)
    8f84:	20000204 	.word	0x20000204
    8f88:	200001d8 	.word	0x200001d8
    8f8c:	20000208 	.word	0x20000208
    8f90:	00010a97 	.word	0x00010a97
    8f94:	20000356 	.word	0x20000356
    8f98:	00008e6d 	.word	0x00008e6d
    8f9c:	00008af9 	.word	0x00008af9

00008fa0 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    8fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8fa2:	46de      	mov	lr, fp
    8fa4:	4657      	mov	r7, sl
    8fa6:	464e      	mov	r6, r9
    8fa8:	4645      	mov	r5, r8
    8faa:	b5e0      	push	{r5, r6, r7, lr}
    8fac:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    8fae:	487b      	ldr	r0, [pc, #492]	; (919c <CompactSector+0x1fc>)
    8fb0:	4b7b      	ldr	r3, [pc, #492]	; (91a0 <CompactSector+0x200>)
    8fb2:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    8fb4:	2300      	movs	r3, #0
    8fb6:	4a7b      	ldr	r2, [pc, #492]	; (91a4 <CompactSector+0x204>)
    8fb8:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    8fba:	4a7b      	ldr	r2, [pc, #492]	; (91a8 <CompactSector+0x208>)
    8fbc:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    8fbe:	4a7b      	ldr	r2, [pc, #492]	; (91ac <CompactSector+0x20c>)
    8fc0:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    8fc2:	4a7b      	ldr	r2, [pc, #492]	; (91b0 <CompactSector+0x210>)
    8fc4:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    8fc6:	4b7b      	ldr	r3, [pc, #492]	; (91b4 <CompactSector+0x214>)
    8fc8:	781b      	ldrb	r3, [r3, #0]
    8fca:	001f      	movs	r7, r3
    8fcc:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    8fce:	2312      	movs	r3, #18
    8fd0:	aa0f      	add	r2, sp, #60	; 0x3c
    8fd2:	2100      	movs	r1, #0
    8fd4:	0038      	movs	r0, r7
    8fd6:	4c78      	ldr	r4, [pc, #480]	; (91b8 <CompactSector+0x218>)
    8fd8:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    8fda:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8fdc:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    8fde:	4c75      	ldr	r4, [pc, #468]	; (91b4 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    8fe0:	0025      	movs	r5, r4
        s_sector++;
    8fe2:	0026      	movs	r6, r4
    8fe4:	e008      	b.n	8ff8 <CompactSector+0x58>
    8fe6:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    8fe8:	4b72      	ldr	r3, [pc, #456]	; (91b4 <CompactSector+0x214>)
    8fea:	781b      	ldrb	r3, [r3, #0]
    8fec:	42bb      	cmp	r3, r7
    8fee:	d00b      	beq.n	9008 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    8ff0:	4b72      	ldr	r3, [pc, #456]	; (91bc <CompactSector+0x21c>)
    8ff2:	4798      	blx	r3
    8ff4:	2800      	cmp	r0, #0
    8ff6:	d10d      	bne.n	9014 <CompactSector+0x74>
        s_sector++;
    8ff8:	7823      	ldrb	r3, [r4, #0]
    8ffa:	3301      	adds	r3, #1
    8ffc:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    8ffe:	2b01      	cmp	r3, #1
    9000:	d9f1      	bls.n	8fe6 <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    9002:	2300      	movs	r3, #0
    9004:	702b      	strb	r3, [r5, #0]
    9006:	e7ef      	b.n	8fe8 <CompactSector+0x48>
            assert(false);
    9008:	4b6d      	ldr	r3, [pc, #436]	; (91c0 <CompactSector+0x220>)
    900a:	4a6e      	ldr	r2, [pc, #440]	; (91c4 <CompactSector+0x224>)
    900c:	496e      	ldr	r1, [pc, #440]	; (91c8 <CompactSector+0x228>)
    900e:	486f      	ldr	r0, [pc, #444]	; (91cc <CompactSector+0x22c>)
    9010:	4c6f      	ldr	r4, [pc, #444]	; (91d0 <CompactSector+0x230>)
    9012:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    9014:	4b6f      	ldr	r3, [pc, #444]	; (91d4 <CompactSector+0x234>)
    9016:	781b      	ldrb	r3, [r3, #0]
    9018:	2b00      	cmp	r3, #0
    901a:	d06a      	beq.n	90f2 <CompactSector+0x152>
    901c:	2300      	movs	r3, #0
    901e:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    9020:	3301      	adds	r3, #1
    9022:	33ff      	adds	r3, #255	; 0xff
    9024:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    9026:	466a      	mov	r2, sp
    9028:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    902a:	4b6b      	ldr	r3, [pc, #428]	; (91d8 <CompactSector+0x238>)
    902c:	3310      	adds	r3, #16
    902e:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    9030:	9b06      	ldr	r3, [sp, #24]
    9032:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    9034:	009f      	lsls	r7, r3, #2
    9036:	4b69      	ldr	r3, [pc, #420]	; (91dc <CompactSector+0x23c>)
    9038:	469c      	mov	ip, r3
    903a:	4467      	add	r7, ip
    903c:	887b      	ldrh	r3, [r7, #2]
    903e:	001d      	movs	r5, r3
    9040:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9042:	2310      	movs	r3, #16
    9044:	aa0b      	add	r2, sp, #44	; 0x2c
    9046:	0029      	movs	r1, r5
    9048:	9803      	ldr	r0, [sp, #12]
    904a:	4680      	mov	r8, r0
    904c:	4c5a      	ldr	r4, [pc, #360]	; (91b8 <CompactSector+0x218>)
    904e:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    9050:	ae0b      	add	r6, sp, #44	; 0x2c
    9052:	2300      	movs	r3, #0
    9054:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    9056:	8934      	ldrh	r4, [r6, #8]
    9058:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    905a:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    905c:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    905e:	3410      	adds	r4, #16
    9060:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    9062:	0032      	movs	r2, r6
    9064:	0029      	movs	r1, r5
    9066:	4640      	mov	r0, r8
    9068:	4b5d      	ldr	r3, [pc, #372]	; (91e0 <CompactSector+0x240>)
    906a:	4798      	blx	r3
    906c:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    906e:	4a5d      	ldr	r2, [pc, #372]	; (91e4 <CompactSector+0x244>)
    9070:	210e      	movs	r1, #14
    9072:	a80b      	add	r0, sp, #44	; 0x2c
    9074:	4b5c      	ldr	r3, [pc, #368]	; (91e8 <CompactSector+0x248>)
    9076:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    9078:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    907a:	4d57      	ldr	r5, [pc, #348]	; (91d8 <CompactSector+0x238>)
    907c:	464a      	mov	r2, r9
    907e:	21ff      	movs	r1, #255	; 0xff
    9080:	0028      	movs	r0, r5
    9082:	4b5a      	ldr	r3, [pc, #360]	; (91ec <CompactSector+0x24c>)
    9084:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9086:	002b      	movs	r3, r5
    9088:	ce07      	ldmia	r6!, {r0, r1, r2}
    908a:	c307      	stmia	r3!, {r0, r1, r2}
    908c:	6832      	ldr	r2, [r6, #0]
    908e:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    9090:	4b57      	ldr	r3, [pc, #348]	; (91f0 <CompactSector+0x250>)
    9092:	881b      	ldrh	r3, [r3, #0]
    9094:	4a45      	ldr	r2, [pc, #276]	; (91ac <CompactSector+0x20c>)
    9096:	8812      	ldrh	r2, [r2, #0]
    9098:	189b      	adds	r3, r3, r2
    909a:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    909c:	454c      	cmp	r4, r9
    909e:	d904      	bls.n	90aa <CompactSector+0x10a>
    90a0:	2600      	movs	r6, #0
    90a2:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    90a4:	4a4c      	ldr	r2, [pc, #304]	; (91d8 <CompactSector+0x238>)
    90a6:	4690      	mov	r8, r2
    90a8:	e068      	b.n	917c <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    90aa:	ab0b      	add	r3, sp, #44	; 0x2c
    90ac:	891b      	ldrh	r3, [r3, #8]
    90ae:	9a08      	ldr	r2, [sp, #32]
    90b0:	9200      	str	r2, [sp, #0]
    90b2:	2200      	movs	r2, #0
    90b4:	9904      	ldr	r1, [sp, #16]
    90b6:	9803      	ldr	r0, [sp, #12]
    90b8:	4e4e      	ldr	r6, [pc, #312]	; (91f4 <CompactSector+0x254>)
    90ba:	47b0      	blx	r6
    90bc:	2800      	cmp	r0, #0
    90be:	d063      	beq.n	9188 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    90c0:	9b07      	ldr	r3, [sp, #28]
    90c2:	009d      	lsls	r5, r3, #2
    90c4:	4b45      	ldr	r3, [pc, #276]	; (91dc <CompactSector+0x23c>)
    90c6:	195d      	adds	r5, r3, r5
    90c8:	4b49      	ldr	r3, [pc, #292]	; (91f0 <CompactSector+0x250>)
    90ca:	881b      	ldrh	r3, [r3, #0]
    90cc:	4a37      	ldr	r2, [pc, #220]	; (91ac <CompactSector+0x20c>)
    90ce:	8812      	ldrh	r2, [r2, #0]
    90d0:	189b      	adds	r3, r3, r2
    90d2:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    90d4:	0021      	movs	r1, r4
    90d6:	a814      	add	r0, sp, #80	; 0x50
    90d8:	4b47      	ldr	r3, [pc, #284]	; (91f8 <CompactSector+0x258>)
    90da:	4798      	blx	r3
    90dc:	2800      	cmp	r0, #0
    90de:	d053      	beq.n	9188 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    90e0:	9b06      	ldr	r3, [sp, #24]
    90e2:	3301      	adds	r3, #1
    90e4:	b2db      	uxtb	r3, r3
    90e6:	001a      	movs	r2, r3
    90e8:	9306      	str	r3, [sp, #24]
    90ea:	4b3a      	ldr	r3, [pc, #232]	; (91d4 <CompactSector+0x234>)
    90ec:	781b      	ldrb	r3, [r3, #0]
    90ee:	4293      	cmp	r3, r2
    90f0:	d89e      	bhi.n	9030 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    90f2:	4b2f      	ldr	r3, [pc, #188]	; (91b0 <CompactSector+0x210>)
    90f4:	881a      	ldrh	r2, [r3, #0]
    90f6:	2a00      	cmp	r2, #0
    90f8:	d006      	beq.n	9108 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    90fa:	4b3d      	ldr	r3, [pc, #244]	; (91f0 <CompactSector+0x250>)
    90fc:	8818      	ldrh	r0, [r3, #0]
    90fe:	a914      	add	r1, sp, #80	; 0x50
    9100:	4b3e      	ldr	r3, [pc, #248]	; (91fc <CompactSector+0x25c>)
    9102:	4798      	blx	r3
    9104:	1e04      	subs	r4, r0, #0
    9106:	d040      	beq.n	918a <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    9108:	4b29      	ldr	r3, [pc, #164]	; (91b0 <CompactSector+0x210>)
    910a:	8818      	ldrh	r0, [r3, #0]
    910c:	2100      	movs	r1, #0
    910e:	4b3c      	ldr	r3, [pc, #240]	; (9200 <CompactSector+0x260>)
    9110:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    9112:	4b37      	ldr	r3, [pc, #220]	; (91f0 <CompactSector+0x250>)
    9114:	881a      	ldrh	r2, [r3, #0]
    9116:	4b3b      	ldr	r3, [pc, #236]	; (9204 <CompactSector+0x264>)
    9118:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    911a:	9809      	ldr	r0, [sp, #36]	; 0x24
    911c:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    911e:	4b3a      	ldr	r3, [pc, #232]	; (9208 <CompactSector+0x268>)
    9120:	4798      	blx	r3
    9122:	1e04      	subs	r4, r0, #0
    9124:	d031      	beq.n	918a <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    9126:	2102      	movs	r1, #2
    9128:	2000      	movs	r0, #0
    912a:	4b35      	ldr	r3, [pc, #212]	; (9200 <CompactSector+0x260>)
    912c:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    912e:	4b37      	ldr	r3, [pc, #220]	; (920c <CompactSector+0x26c>)
    9130:	466a      	mov	r2, sp
    9132:	7b12      	ldrb	r2, [r2, #12]
    9134:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    9136:	4d36      	ldr	r5, [pc, #216]	; (9210 <CompactSector+0x270>)
    9138:	0028      	movs	r0, r5
    913a:	4b19      	ldr	r3, [pc, #100]	; (91a0 <CompactSector+0x200>)
    913c:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    913e:	0028      	movs	r0, r5
    9140:	4b34      	ldr	r3, [pc, #208]	; (9214 <CompactSector+0x274>)
    9142:	4798      	blx	r3

    return true;
    9144:	e021      	b.n	918a <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    9146:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    9148:	1aef      	subs	r7, r5, r3
    914a:	b2ba      	uxth	r2, r7
    914c:	4693      	mov	fp, r2
    914e:	4443      	add	r3, r8
    9150:	9300      	str	r3, [sp, #0]
    9152:	0013      	movs	r3, r2
    9154:	0032      	movs	r2, r6
    9156:	9904      	ldr	r1, [sp, #16]
    9158:	9803      	ldr	r0, [sp, #12]
    915a:	4f26      	ldr	r7, [pc, #152]	; (91f4 <CompactSector+0x254>)
    915c:	47b8      	blx	r7
    915e:	2800      	cmp	r0, #0
    9160:	d012      	beq.n	9188 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    9162:	0029      	movs	r1, r5
    9164:	a814      	add	r0, sp, #80	; 0x50
    9166:	4b24      	ldr	r3, [pc, #144]	; (91f8 <CompactSector+0x258>)
    9168:	4798      	blx	r3
    916a:	2800      	cmp	r0, #0
    916c:	d00c      	beq.n	9188 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    916e:	1b64      	subs	r4, r4, r5
    9170:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    9172:	445e      	add	r6, fp
    9174:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    9176:	2300      	movs	r3, #0
            } while(currLength > 0);
    9178:	2c00      	cmp	r4, #0
    917a:	d0b1      	beq.n	90e0 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    917c:	1c25      	adds	r5, r4, #0
    917e:	454c      	cmp	r4, r9
    9180:	d9e1      	bls.n	9146 <CompactSector+0x1a6>
    9182:	466a      	mov	r2, sp
    9184:	8ad5      	ldrh	r5, [r2, #22]
    9186:	e7de      	b.n	9146 <CompactSector+0x1a6>
                return false;
    9188:	2400      	movs	r4, #0
}
    918a:	0020      	movs	r0, r4
    918c:	b055      	add	sp, #340	; 0x154
    918e:	bc3c      	pop	{r2, r3, r4, r5}
    9190:	4690      	mov	r8, r2
    9192:	4699      	mov	r9, r3
    9194:	46a2      	mov	sl, r4
    9196:	46ab      	mov	fp, r5
    9198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    919a:	46c0      	nop			; (mov r8, r8)
    919c:	200001f0 	.word	0x200001f0
    91a0:	0000d145 	.word	0x0000d145
    91a4:	2000031c 	.word	0x2000031c
    91a8:	2000031e 	.word	0x2000031e
    91ac:	200001d8 	.word	0x200001d8
    91b0:	20000204 	.word	0x20000204
    91b4:	20000354 	.word	0x20000354
    91b8:	0000888d 	.word	0x0000888d
    91bc:	00008e39 	.word	0x00008e39
    91c0:	00011f90 	.word	0x00011f90
    91c4:	00012114 	.word	0x00012114
    91c8:	000003d5 	.word	0x000003d5
    91cc:	0001200c 	.word	0x0001200c
    91d0:	000109d5 	.word	0x000109d5
    91d4:	2000034c 	.word	0x2000034c
    91d8:	20000208 	.word	0x20000208
    91dc:	20000324 	.word	0x20000324
    91e0:	00008c2d 	.word	0x00008c2d
    91e4:	0000ffff 	.word	0x0000ffff
    91e8:	00008b35 	.word	0x00008b35
    91ec:	00010aa9 	.word	0x00010aa9
    91f0:	20000356 	.word	0x20000356
    91f4:	00008b75 	.word	0x00008b75
    91f8:	00008ef9 	.word	0x00008ef9
    91fc:	00008e6d 	.word	0x00008e6d
    9200:	00008af9 	.word	0x00008af9
    9204:	2000034e 	.word	0x2000034e
    9208:	00008ea1 	.word	0x00008ea1
    920c:	20000009 	.word	0x20000009
    9210:	20000308 	.word	0x20000308
    9214:	0000d1b1 	.word	0x0000d1b1

00009218 <compactSectorTimerFired>:
{
    9218:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    921a:	4b07      	ldr	r3, [pc, #28]	; (9238 <compactSectorTimerFired+0x20>)
    921c:	4798      	blx	r3
    921e:	2800      	cmp	r0, #0
    9220:	d000      	beq.n	9224 <compactSectorTimerFired+0xc>
}
    9222:	bd10      	pop	{r4, pc}
      status = CompactSector();
    9224:	4b05      	ldr	r3, [pc, #20]	; (923c <compactSectorTimerFired+0x24>)
    9226:	4798      	blx	r3
      assert(false);
    9228:	4b05      	ldr	r3, [pc, #20]	; (9240 <compactSectorTimerFired+0x28>)
    922a:	4a06      	ldr	r2, [pc, #24]	; (9244 <compactSectorTimerFired+0x2c>)
    922c:	212c      	movs	r1, #44	; 0x2c
    922e:	31ff      	adds	r1, #255	; 0xff
    9230:	4805      	ldr	r0, [pc, #20]	; (9248 <compactSectorTimerFired+0x30>)
    9232:	4c06      	ldr	r4, [pc, #24]	; (924c <compactSectorTimerFired+0x34>)
    9234:	47a0      	blx	r4
    9236:	46c0      	nop			; (mov r8, r8)
    9238:	00008add 	.word	0x00008add
    923c:	00008fa1 	.word	0x00008fa1
    9240:	00011f90 	.word	0x00011f90
    9244:	000120c0 	.word	0x000120c0
    9248:	0001200c 	.word	0x0001200c
    924c:	000109d5 	.word	0x000109d5

00009250 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    9250:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    9252:	4b12      	ldr	r3, [pc, #72]	; (929c <CompactSectorIfNeeded+0x4c>)
    9254:	881a      	ldrh	r2, [r3, #0]
    9256:	2380      	movs	r3, #128	; 0x80
    9258:	019b      	lsls	r3, r3, #6
    925a:	1a9b      	subs	r3, r3, r2
    925c:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    925e:	4283      	cmp	r3, r0
    9260:	d303      	bcc.n	926a <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    9262:	4a0f      	ldr	r2, [pc, #60]	; (92a0 <CompactSectorIfNeeded+0x50>)
    9264:	4293      	cmp	r3, r2
    9266:	d90a      	bls.n	927e <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    9268:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    926a:	4b0e      	ldr	r3, [pc, #56]	; (92a4 <CompactSectorIfNeeded+0x54>)
    926c:	4798      	blx	r3
    926e:	2800      	cmp	r0, #0
    9270:	d1fa      	bne.n	9268 <CompactSectorIfNeeded+0x18>
            assert(false);
    9272:	4b0d      	ldr	r3, [pc, #52]	; (92a8 <CompactSectorIfNeeded+0x58>)
    9274:	4a0d      	ldr	r2, [pc, #52]	; (92ac <CompactSectorIfNeeded+0x5c>)
    9276:	490e      	ldr	r1, [pc, #56]	; (92b0 <CompactSectorIfNeeded+0x60>)
    9278:	480e      	ldr	r0, [pc, #56]	; (92b4 <CompactSectorIfNeeded+0x64>)
    927a:	4c0f      	ldr	r4, [pc, #60]	; (92b8 <CompactSectorIfNeeded+0x68>)
    927c:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    927e:	480f      	ldr	r0, [pc, #60]	; (92bc <CompactSectorIfNeeded+0x6c>)
    9280:	4b0f      	ldr	r3, [pc, #60]	; (92c0 <CompactSectorIfNeeded+0x70>)
    9282:	4798      	blx	r3
    9284:	2800      	cmp	r0, #0
    9286:	d1ef      	bne.n	9268 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    9288:	4b0c      	ldr	r3, [pc, #48]	; (92bc <CompactSectorIfNeeded+0x6c>)
    928a:	4a0e      	ldr	r2, [pc, #56]	; (92c4 <CompactSectorIfNeeded+0x74>)
    928c:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    928e:	4a0e      	ldr	r2, [pc, #56]	; (92c8 <CompactSectorIfNeeded+0x78>)
    9290:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    9292:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    9294:	2200      	movs	r2, #0
    9296:	731a      	strb	r2, [r3, #12]
    9298:	e7e6      	b.n	9268 <CompactSectorIfNeeded+0x18>
    929a:	46c0      	nop			; (mov r8, r8)
    929c:	20000356 	.word	0x20000356
    92a0:	0000080f 	.word	0x0000080f
    92a4:	00008fa1 	.word	0x00008fa1
    92a8:	00011f90 	.word	0x00011f90
    92ac:	00012124 	.word	0x00012124
    92b0:	0000044e 	.word	0x0000044e
    92b4:	0001200c 	.word	0x0001200c
    92b8:	000109d5 	.word	0x000109d5
    92bc:	200001f0 	.word	0x200001f0
    92c0:	0000d185 	.word	0x0000d185
    92c4:	00009219 	.word	0x00009219
    92c8:	00002710 	.word	0x00002710

000092cc <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    92cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    92ce:	46de      	mov	lr, fp
    92d0:	4657      	mov	r7, sl
    92d2:	464e      	mov	r6, r9
    92d4:	4645      	mov	r5, r8
    92d6:	b5e0      	push	{r5, r6, r7, lr}
    92d8:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    92da:	4b77      	ldr	r3, [pc, #476]	; (94b8 <CompactItem+0x1ec>)
    92dc:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    92de:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    92e0:	2800      	cmp	r0, #0
    92e2:	d007      	beq.n	92f4 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    92e4:	0018      	movs	r0, r3
    92e6:	b00b      	add	sp, #44	; 0x2c
    92e8:	bc3c      	pop	{r2, r3, r4, r5}
    92ea:	4690      	mov	r8, r2
    92ec:	4699      	mov	r9, r3
    92ee:	46a2      	mov	sl, r4
    92f0:	46ab      	mov	fp, r5
    92f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    92f4:	4b71      	ldr	r3, [pc, #452]	; (94bc <CompactItem+0x1f0>)
    92f6:	8818      	ldrh	r0, [r3, #0]
    92f8:	2800      	cmp	r0, #0
    92fa:	d146      	bne.n	938a <CompactItem+0xbe>
    92fc:	4b70      	ldr	r3, [pc, #448]	; (94c0 <CompactItem+0x1f4>)
    92fe:	881b      	ldrh	r3, [r3, #0]
    9300:	2b00      	cmp	r3, #0
    9302:	d100      	bne.n	9306 <CompactItem+0x3a>
    9304:	e0d0      	b.n	94a8 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    9306:	4b6e      	ldr	r3, [pc, #440]	; (94c0 <CompactItem+0x1f4>)
    9308:	8818      	ldrh	r0, [r3, #0]
    930a:	4b6e      	ldr	r3, [pc, #440]	; (94c4 <CompactItem+0x1f8>)
    930c:	4798      	blx	r3
    930e:	4683      	mov	fp, r0
    if ( cache == NULL )
    9310:	2800      	cmp	r0, #0
    9312:	d100      	bne.n	9316 <CompactItem+0x4a>
    9314:	e0ca      	b.n	94ac <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    9316:	7882      	ldrb	r2, [r0, #2]
    9318:	78c3      	ldrb	r3, [r0, #3]
    931a:	021b      	lsls	r3, r3, #8
    931c:	4313      	orrs	r3, r2
    931e:	0019      	movs	r1, r3
    9320:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9322:	4b69      	ldr	r3, [pc, #420]	; (94c8 <CompactItem+0x1fc>)
    9324:	7818      	ldrb	r0, [r3, #0]
    9326:	2310      	movs	r3, #16
    9328:	aa06      	add	r2, sp, #24
    932a:	4c68      	ldr	r4, [pc, #416]	; (94cc <CompactItem+0x200>)
    932c:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    932e:	4b63      	ldr	r3, [pc, #396]	; (94bc <CompactItem+0x1f0>)
    9330:	881a      	ldrh	r2, [r3, #0]
    9332:	2a00      	cmp	r2, #0
    9334:	d02e      	beq.n	9394 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    9336:	4b66      	ldr	r3, [pc, #408]	; (94d0 <CompactItem+0x204>)
    9338:	881b      	ldrh	r3, [r3, #0]
    933a:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    933c:	ab06      	add	r3, sp, #24
    933e:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    9340:	a906      	add	r1, sp, #24
    9342:	810a      	strh	r2, [r1, #8]
    9344:	1c19      	adds	r1, r3, #0
    9346:	4293      	cmp	r3, r2
    9348:	d900      	bls.n	934c <CompactItem+0x80>
    934a:	1c11      	adds	r1, r2, #0
    934c:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    934e:	aa06      	add	r2, sp, #24
    9350:	2100      	movs	r1, #0
    9352:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    9354:	8910      	ldrh	r0, [r2, #8]
    9356:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    9358:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    935a:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    935c:	001c      	movs	r4, r3
    935e:	3410      	adds	r4, #16
    9360:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9362:	495c      	ldr	r1, [pc, #368]	; (94d4 <CompactItem+0x208>)
    9364:	ca61      	ldmia	r2!, {r0, r5, r6}
    9366:	c161      	stmia	r1!, {r0, r5, r6}
    9368:	6812      	ldr	r2, [r2, #0]
    936a:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    936c:	2280      	movs	r2, #128	; 0x80
    936e:	0052      	lsls	r2, r2, #1
    9370:	4294      	cmp	r4, r2
    9372:	d939      	bls.n	93e8 <CompactItem+0x11c>
    9374:	2600      	movs	r6, #0
    9376:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9378:	2280      	movs	r2, #128	; 0x80
    937a:	0052      	lsls	r2, r2, #1
    937c:	4691      	mov	r9, r2
    937e:	4669      	mov	r1, sp
    9380:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9382:	4a51      	ldr	r2, [pc, #324]	; (94c8 <CompactItem+0x1fc>)
    9384:	4692      	mov	sl, r2
    9386:	001a      	movs	r2, r3
    9388:	e088      	b.n	949c <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    938a:	3010      	adds	r0, #16
    938c:	b280      	uxth	r0, r0
    938e:	4b52      	ldr	r3, [pc, #328]	; (94d8 <CompactItem+0x20c>)
    9390:	4798      	blx	r3
    9392:	e7b8      	b.n	9306 <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    9394:	ab06      	add	r3, sp, #24
    9396:	8918      	ldrh	r0, [r3, #8]
    9398:	3010      	adds	r0, #16
    939a:	b280      	uxth	r0, r0
    939c:	4b4e      	ldr	r3, [pc, #312]	; (94d8 <CompactItem+0x20c>)
    939e:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    93a0:	4b47      	ldr	r3, [pc, #284]	; (94c0 <CompactItem+0x1f4>)
    93a2:	8818      	ldrh	r0, [r3, #0]
    93a4:	4b47      	ldr	r3, [pc, #284]	; (94c4 <CompactItem+0x1f8>)
    93a6:	4798      	blx	r3
    93a8:	4683      	mov	fp, r0
        assert(cache != NULL);
    93aa:	2800      	cmp	r0, #0
    93ac:	d015      	beq.n	93da <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    93ae:	7882      	ldrb	r2, [r0, #2]
    93b0:	78c3      	ldrb	r3, [r0, #3]
    93b2:	021b      	lsls	r3, r3, #8
    93b4:	4313      	orrs	r3, r2
    93b6:	0019      	movs	r1, r3
    93b8:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    93ba:	ac06      	add	r4, sp, #24
    93bc:	4b42      	ldr	r3, [pc, #264]	; (94c8 <CompactItem+0x1fc>)
    93be:	7818      	ldrb	r0, [r3, #0]
    93c0:	2310      	movs	r3, #16
    93c2:	0022      	movs	r2, r4
    93c4:	4d41      	ldr	r5, [pc, #260]	; (94cc <CompactItem+0x200>)
    93c6:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    93c8:	4b41      	ldr	r3, [pc, #260]	; (94d0 <CompactItem+0x204>)
    93ca:	881b      	ldrh	r3, [r3, #0]
    93cc:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    93ce:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    93d0:	4a3a      	ldr	r2, [pc, #232]	; (94bc <CompactItem+0x1f0>)
    93d2:	8812      	ldrh	r2, [r2, #0]
    93d4:	2a00      	cmp	r2, #0
    93d6:	d0ba      	beq.n	934e <CompactItem+0x82>
    93d8:	e7b2      	b.n	9340 <CompactItem+0x74>
        assert(cache != NULL);
    93da:	4b40      	ldr	r3, [pc, #256]	; (94dc <CompactItem+0x210>)
    93dc:	4a40      	ldr	r2, [pc, #256]	; (94e0 <CompactItem+0x214>)
    93de:	2191      	movs	r1, #145	; 0x91
    93e0:	00c9      	lsls	r1, r1, #3
    93e2:	4840      	ldr	r0, [pc, #256]	; (94e4 <CompactItem+0x218>)
    93e4:	4c40      	ldr	r4, [pc, #256]	; (94e8 <CompactItem+0x21c>)
    93e6:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    93e8:	4a37      	ldr	r2, [pc, #220]	; (94c8 <CompactItem+0x1fc>)
    93ea:	7810      	ldrb	r0, [r2, #0]
    93ec:	4a39      	ldr	r2, [pc, #228]	; (94d4 <CompactItem+0x208>)
    93ee:	3210      	adds	r2, #16
    93f0:	9200      	str	r2, [sp, #0]
    93f2:	2200      	movs	r2, #0
    93f4:	9903      	ldr	r1, [sp, #12]
    93f6:	4c3d      	ldr	r4, [pc, #244]	; (94ec <CompactItem+0x220>)
    93f8:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    93fa:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    93fc:	2800      	cmp	r0, #0
    93fe:	d100      	bne.n	9402 <CompactItem+0x136>
    9400:	e770      	b.n	92e4 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9402:	4934      	ldr	r1, [pc, #208]	; (94d4 <CompactItem+0x208>)
    9404:	ab06      	add	r3, sp, #24
    9406:	000a      	movs	r2, r1
    9408:	0018      	movs	r0, r3
    940a:	c870      	ldmia	r0!, {r4, r5, r6}
    940c:	c270      	stmia	r2!, {r4, r5, r6}
    940e:	6800      	ldr	r0, [r0, #0]
    9410:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9412:	88da      	ldrh	r2, [r3, #6]
    9414:	3210      	adds	r2, #16
    9416:	b292      	uxth	r2, r2
    9418:	4b2d      	ldr	r3, [pc, #180]	; (94d0 <CompactItem+0x204>)
    941a:	8818      	ldrh	r0, [r3, #0]
    941c:	4b34      	ldr	r3, [pc, #208]	; (94f0 <CompactItem+0x224>)
    941e:	4798      	blx	r3
            return false;
    9420:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9422:	2800      	cmp	r0, #0
    9424:	d100      	bne.n	9428 <CompactItem+0x15c>
    9426:	e75d      	b.n	92e4 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    9428:	ab06      	add	r3, sp, #24
    942a:	88d8      	ldrh	r0, [r3, #6]
    942c:	3010      	adds	r0, #16
    942e:	b280      	uxth	r0, r0
    9430:	2102      	movs	r1, #2
    9432:	4b30      	ldr	r3, [pc, #192]	; (94f4 <CompactItem+0x228>)
    9434:	4798      	blx	r3
    s_compactItemId = 0u;
    9436:	2300      	movs	r3, #0
    9438:	4a21      	ldr	r2, [pc, #132]	; (94c0 <CompactItem+0x1f4>)
    943a:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    943c:	4a1f      	ldr	r2, [pc, #124]	; (94bc <CompactItem+0x1f0>)
    943e:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    9440:	465b      	mov	r3, fp
    9442:	9905      	ldr	r1, [sp, #20]
    9444:	7099      	strb	r1, [r3, #2]
    9446:	0a0b      	lsrs	r3, r1, #8
    9448:	465a      	mov	r2, fp
    944a:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    944c:	2300      	movs	r3, #0
    944e:	e749      	b.n	92e4 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9450:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9452:	1aaf      	subs	r7, r5, r2
    9454:	b2bb      	uxth	r3, r7
    9456:	0019      	movs	r1, r3
    9458:	4653      	mov	r3, sl
    945a:	7818      	ldrb	r0, [r3, #0]
    945c:	4b1d      	ldr	r3, [pc, #116]	; (94d4 <CompactItem+0x208>)
    945e:	189b      	adds	r3, r3, r2
    9460:	9300      	str	r3, [sp, #0]
    9462:	9102      	str	r1, [sp, #8]
    9464:	000b      	movs	r3, r1
    9466:	0032      	movs	r2, r6
    9468:	9903      	ldr	r1, [sp, #12]
    946a:	4f20      	ldr	r7, [pc, #128]	; (94ec <CompactItem+0x220>)
    946c:	47b8      	blx	r7
    946e:	2800      	cmp	r0, #0
    9470:	d01e      	beq.n	94b0 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    9472:	4b17      	ldr	r3, [pc, #92]	; (94d0 <CompactItem+0x204>)
    9474:	8818      	ldrh	r0, [r3, #0]
    9476:	002a      	movs	r2, r5
    9478:	4916      	ldr	r1, [pc, #88]	; (94d4 <CompactItem+0x208>)
    947a:	4b1d      	ldr	r3, [pc, #116]	; (94f0 <CompactItem+0x224>)
    947c:	4798      	blx	r3
    947e:	2800      	cmp	r0, #0
    9480:	d018      	beq.n	94b4 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    9482:	2102      	movs	r1, #2
    9484:	0028      	movs	r0, r5
    9486:	4b1b      	ldr	r3, [pc, #108]	; (94f4 <CompactItem+0x228>)
    9488:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    948a:	1b64      	subs	r4, r4, r5
    948c:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    948e:	9902      	ldr	r1, [sp, #8]
    9490:	468c      	mov	ip, r1
    9492:	4466      	add	r6, ip
    9494:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    9496:	2200      	movs	r2, #0
        } while(currLength > 0);
    9498:	2c00      	cmp	r4, #0
    949a:	d0cc      	beq.n	9436 <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    949c:	1c25      	adds	r5, r4, #0
    949e:	454c      	cmp	r4, r9
    94a0:	d9d6      	bls.n	9450 <CompactItem+0x184>
    94a2:	466b      	mov	r3, sp
    94a4:	8a5d      	ldrh	r5, [r3, #18]
    94a6:	e7d3      	b.n	9450 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    94a8:	2300      	movs	r3, #0
    94aa:	e71b      	b.n	92e4 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    94ac:	2300      	movs	r3, #0
    94ae:	e719      	b.n	92e4 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    94b0:	2301      	movs	r3, #1
    94b2:	e717      	b.n	92e4 <CompactItem+0x18>
                return false;
    94b4:	2300      	movs	r3, #0
    94b6:	e715      	b.n	92e4 <CompactItem+0x18>
    94b8:	00008add 	.word	0x00008add
    94bc:	2000031e 	.word	0x2000031e
    94c0:	2000031c 	.word	0x2000031c
    94c4:	00008cd5 	.word	0x00008cd5
    94c8:	20000354 	.word	0x20000354
    94cc:	0000888d 	.word	0x0000888d
    94d0:	20000356 	.word	0x20000356
    94d4:	20000208 	.word	0x20000208
    94d8:	00009251 	.word	0x00009251
    94dc:	00011f80 	.word	0x00011f80
    94e0:	0001213c 	.word	0x0001213c
    94e4:	0001200c 	.word	0x0001200c
    94e8:	000109d5 	.word	0x000109d5
    94ec:	00008b75 	.word	0x00008b75
    94f0:	00008e6d 	.word	0x00008e6d
    94f4:	00008af9 	.word	0x00008af9

000094f8 <compactItemTimerFired>:
{
    94f8:	b510      	push	{r4, lr}
    (void)CompactItem();
    94fa:	4b01      	ldr	r3, [pc, #4]	; (9500 <compactItemTimerFired+0x8>)
    94fc:	4798      	blx	r3
}
    94fe:	bd10      	pop	{r4, pc}
    9500:	000092cd 	.word	0x000092cd

00009504 <WriteDataBlockAndHeader>:
{
    9504:	b5f0      	push	{r4, r5, r6, r7, lr}
    9506:	46de      	mov	lr, fp
    9508:	4657      	mov	r7, sl
    950a:	464e      	mov	r6, r9
    950c:	4645      	mov	r5, r8
    950e:	b5e0      	push	{r5, r6, r7, lr}
    9510:	b083      	sub	sp, #12
    9512:	0004      	movs	r4, r0
    9514:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    9516:	4d46      	ldr	r5, [pc, #280]	; (9630 <WriteDataBlockAndHeader+0x12c>)
    9518:	2280      	movs	r2, #128	; 0x80
    951a:	0052      	lsls	r2, r2, #1
    951c:	21ff      	movs	r1, #255	; 0xff
    951e:	0028      	movs	r0, r5
    9520:	4b44      	ldr	r3, [pc, #272]	; (9634 <WriteDataBlockAndHeader+0x130>)
    9522:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    9524:	4e44      	ldr	r6, [pc, #272]	; (9638 <WriteDataBlockAndHeader+0x134>)
    9526:	79a3      	ldrb	r3, [r4, #6]
    9528:	79e1      	ldrb	r1, [r4, #7]
    952a:	0209      	lsls	r1, r1, #8
    952c:	4319      	orrs	r1, r3
    952e:	0032      	movs	r2, r6
    9530:	4650      	mov	r0, sl
    9532:	4f42      	ldr	r7, [pc, #264]	; (963c <WriteDataBlockAndHeader+0x138>)
    9534:	47b8      	blx	r7
    9536:	7020      	strb	r0, [r4, #0]
    9538:	0a00      	lsrs	r0, r0, #8
    953a:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    953c:	0032      	movs	r2, r6
    953e:	210e      	movs	r1, #14
    9540:	0020      	movs	r0, r4
    9542:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    9544:	73a0      	strb	r0, [r4, #14]
    9546:	0a00      	lsrs	r0, r0, #8
    9548:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    954a:	2210      	movs	r2, #16
    954c:	0021      	movs	r1, r4
    954e:	0028      	movs	r0, r5
    9550:	4b3b      	ldr	r3, [pc, #236]	; (9640 <WriteDataBlockAndHeader+0x13c>)
    9552:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    9554:	79a3      	ldrb	r3, [r4, #6]
    9556:	79e2      	ldrb	r2, [r4, #7]
    9558:	0212      	lsls	r2, r2, #8
    955a:	431a      	orrs	r2, r3
    955c:	0015      	movs	r5, r2
    955e:	3510      	adds	r5, #16
    9560:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    9562:	4653      	mov	r3, sl
    9564:	2b00      	cmp	r3, #0
    9566:	d012      	beq.n	958e <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    9568:	2380      	movs	r3, #128	; 0x80
    956a:	005b      	lsls	r3, r3, #1
    956c:	429d      	cmp	r5, r3
    956e:	d909      	bls.n	9584 <WriteDataBlockAndHeader+0x80>
    9570:	2600      	movs	r6, #0
    9572:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9574:	2380      	movs	r3, #128	; 0x80
    9576:	005b      	lsls	r3, r3, #1
    9578:	469b      	mov	fp, r3
    957a:	466a      	mov	r2, sp
    957c:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    957e:	4b2c      	ldr	r3, [pc, #176]	; (9630 <WriteDataBlockAndHeader+0x12c>)
    9580:	4699      	mov	r9, r3
    9582:	e045      	b.n	9610 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    9584:	4651      	mov	r1, sl
    9586:	482a      	ldr	r0, [pc, #168]	; (9630 <WriteDataBlockAndHeader+0x12c>)
    9588:	3010      	adds	r0, #16
    958a:	4b2d      	ldr	r3, [pc, #180]	; (9640 <WriteDataBlockAndHeader+0x13c>)
    958c:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    958e:	79a3      	ldrb	r3, [r4, #6]
    9590:	79e2      	ldrb	r2, [r4, #7]
    9592:	0212      	lsls	r2, r2, #8
    9594:	431a      	orrs	r2, r3
    9596:	3210      	adds	r2, #16
    9598:	2380      	movs	r3, #128	; 0x80
    959a:	005b      	lsls	r3, r3, #1
    959c:	429a      	cmp	r2, r3
    959e:	dd00      	ble.n	95a2 <WriteDataBlockAndHeader+0x9e>
    95a0:	001a      	movs	r2, r3
    95a2:	b292      	uxth	r2, r2
    95a4:	4b27      	ldr	r3, [pc, #156]	; (9644 <WriteDataBlockAndHeader+0x140>)
    95a6:	8818      	ldrh	r0, [r3, #0]
    95a8:	4921      	ldr	r1, [pc, #132]	; (9630 <WriteDataBlockAndHeader+0x12c>)
    95aa:	4b27      	ldr	r3, [pc, #156]	; (9648 <WriteDataBlockAndHeader+0x144>)
    95ac:	4798      	blx	r3
    95ae:	4680      	mov	r8, r0
    95b0:	2800      	cmp	r0, #0
    95b2:	d033      	beq.n	961c <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    95b4:	79a3      	ldrb	r3, [r4, #6]
    95b6:	79e0      	ldrb	r0, [r4, #7]
    95b8:	0200      	lsls	r0, r0, #8
    95ba:	4318      	orrs	r0, r3
    95bc:	3010      	adds	r0, #16
    95be:	b280      	uxth	r0, r0
    95c0:	2102      	movs	r1, #2
    95c2:	4b22      	ldr	r3, [pc, #136]	; (964c <WriteDataBlockAndHeader+0x148>)
    95c4:	4798      	blx	r3
}
    95c6:	4640      	mov	r0, r8
    95c8:	b003      	add	sp, #12
    95ca:	bc3c      	pop	{r2, r3, r4, r5}
    95cc:	4690      	mov	r8, r2
    95ce:	4699      	mov	r9, r3
    95d0:	46a2      	mov	sl, r4
    95d2:	46ab      	mov	fp, r5
    95d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    95d6:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    95d8:	464b      	mov	r3, r9
    95da:	19d8      	adds	r0, r3, r7
    95dc:	1be2      	subs	r2, r4, r7
    95de:	4653      	mov	r3, sl
    95e0:	1999      	adds	r1, r3, r6
    95e2:	4b17      	ldr	r3, [pc, #92]	; (9640 <WriteDataBlockAndHeader+0x13c>)
    95e4:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    95e6:	4b17      	ldr	r3, [pc, #92]	; (9644 <WriteDataBlockAndHeader+0x140>)
    95e8:	8818      	ldrh	r0, [r3, #0]
    95ea:	0022      	movs	r2, r4
    95ec:	4649      	mov	r1, r9
    95ee:	4b16      	ldr	r3, [pc, #88]	; (9648 <WriteDataBlockAndHeader+0x144>)
    95f0:	4798      	blx	r3
    95f2:	4680      	mov	r8, r0
    95f4:	2800      	cmp	r0, #0
    95f6:	d0e6      	beq.n	95c6 <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    95f8:	2102      	movs	r1, #2
    95fa:	0020      	movs	r0, r4
    95fc:	4b13      	ldr	r3, [pc, #76]	; (964c <WriteDataBlockAndHeader+0x148>)
    95fe:	4798      	blx	r3
                currentLength -= bytesToCommit;
    9600:	1b2d      	subs	r5, r5, r4
    9602:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    9604:	1be4      	subs	r4, r4, r7
    9606:	1936      	adds	r6, r6, r4
    9608:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    960a:	2700      	movs	r7, #0
            } while(currentLength > 0);
    960c:	2d00      	cmp	r5, #0
    960e:	d0da      	beq.n	95c6 <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9610:	1c2c      	adds	r4, r5, #0
    9612:	455d      	cmp	r5, fp
    9614:	d9df      	bls.n	95d6 <WriteDataBlockAndHeader+0xd2>
    9616:	466b      	mov	r3, sp
    9618:	88dc      	ldrh	r4, [r3, #6]
    961a:	e7dc      	b.n	95d6 <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    961c:	79a3      	ldrb	r3, [r4, #6]
    961e:	79e0      	ldrb	r0, [r4, #7]
    9620:	0200      	lsls	r0, r0, #8
    9622:	4318      	orrs	r0, r3
    9624:	3010      	adds	r0, #16
    9626:	b280      	uxth	r0, r0
    9628:	2102      	movs	r1, #2
    962a:	4b08      	ldr	r3, [pc, #32]	; (964c <WriteDataBlockAndHeader+0x148>)
    962c:	4798      	blx	r3
        return false;
    962e:	e7ca      	b.n	95c6 <WriteDataBlockAndHeader+0xc2>
    9630:	20000208 	.word	0x20000208
    9634:	00010aa9 	.word	0x00010aa9
    9638:	0000ffff 	.word	0x0000ffff
    963c:	00008b35 	.word	0x00008b35
    9640:	00010a97 	.word	0x00010a97
    9644:	20000356 	.word	0x20000356
    9648:	00008e6d 	.word	0x00008e6d
    964c:	00008af9 	.word	0x00008af9

00009650 <S_Nv_EarlyInit>:
/***************************************************************************************************
* EXPORTED FUNCTIONS
***************************************************************************************************/

void S_Nv_EarlyInit(void)
{
    9650:	b5f0      	push	{r4, r5, r6, r7, lr}
    9652:	46ce      	mov	lr, r9
    9654:	4647      	mov	r7, r8
    9656:	b580      	push	{r7, lr}
    9658:	b091      	sub	sp, #68	; 0x44
    SnvRevisioin_t revisionNumber;
    s_itemCount = 0u;
    965a:	2200      	movs	r2, #0
    965c:	4bb3      	ldr	r3, [pc, #716]	; (992c <S_Nv_EarlyInit+0x2dc>)
    965e:	701a      	strb	r2, [r3, #0]
    SectorHeader_t sectorHeader;

    uint8_t lastSector = 0xFFu;
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;

    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9660:	2400      	movs	r4, #0
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;
    9662:	2301      	movs	r3, #1
    9664:	425b      	negs	r3, r3
    9666:	4699      	mov	r9, r3
    uint8_t lastSector = 0xFFu;
    9668:	27ff      	movs	r7, #255	; 0xff
    {
        D_Nv_Read(sector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    966a:	4eb1      	ldr	r6, [pc, #708]	; (9930 <S_Nv_EarlyInit+0x2e0>)
    966c:	2312      	movs	r3, #18
    966e:	aa0b      	add	r2, sp, #44	; 0x2c
    9670:	2100      	movs	r1, #0
    9672:	0020      	movs	r0, r4
    9674:	47b0      	blx	r6
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    9676:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    967a:	9301      	str	r3, [sp, #4]
    967c:	406b      	eors	r3, r5
    967e:	3301      	adds	r3, #1
    9680:	d01d      	beq.n	96be <S_Nv_EarlyInit+0x6e>
    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9682:	3401      	adds	r4, #1
    9684:	b2e4      	uxtb	r4, r4
    9686:	2c02      	cmp	r4, #2
    9688:	d1f0      	bne.n	966c <S_Nv_EarlyInit+0x1c>
                lastSectorSequence = sectorHeader.sequenceNumber;
            }
        }
    }

    if ( lastSector == 0xFFu )
    968a:	2fff      	cmp	r7, #255	; 0xff
    968c:	d057      	beq.n	973e <S_Nv_EarlyInit+0xee>
        s_itemCount = 0u;
    }
    else
    {
        // load active sector
        s_sector = lastSector;
    968e:	4ba9      	ldr	r3, [pc, #676]	; (9934 <S_Nv_EarlyInit+0x2e4>)
    9690:	701f      	strb	r7, [r3, #0]
    if (SNV_REV_1 == revisionNumber)
    9692:	4643      	mov	r3, r8
    9694:	2b01      	cmp	r3, #1
    9696:	d100      	bne.n	969a <S_Nv_EarlyInit+0x4a>
    9698:	e07b      	b.n	9792 <S_Nv_EarlyInit+0x142>
    else if (SNV_REV_2 == revisionNumber)
    969a:	4643      	mov	r3, r8
    969c:	2b02      	cmp	r3, #2
    969e:	d16a      	bne.n	9776 <S_Nv_EarlyInit+0x126>
        s_sectorHead = ITEMS_AREA_START_ADDRESS;
    96a0:	2280      	movs	r2, #128	; 0x80
    96a2:	0052      	lsls	r2, r2, #1
    96a4:	4ba4      	ldr	r3, [pc, #656]	; (9938 <S_Nv_EarlyInit+0x2e8>)
    96a6:	801a      	strh	r2, [r3, #0]
        D_Nv_Read(s_sector, 0, (uint8_t*) &sectorHeader, sizeof(SectorHeader_t));
    96a8:	2312      	movs	r3, #18
    96aa:	aa06      	add	r2, sp, #24
    96ac:	2100      	movs	r1, #0
    96ae:	0038      	movs	r0, r7
    96b0:	4c9f      	ldr	r4, [pc, #636]	; (9930 <S_Nv_EarlyInit+0x2e0>)
    96b2:	47a0      	blx	r4
        while ( s_sectorHead < SECTOR_SIZE )
    96b4:	4da0      	ldr	r5, [pc, #640]	; (9938 <S_Nv_EarlyInit+0x2e8>)
                UpdateSectorHead(0, itemAlignment);
    96b6:	4ba1      	ldr	r3, [pc, #644]	; (993c <S_Nv_EarlyInit+0x2ec>)
    96b8:	4698      	mov	r8, r3
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    96ba:	002e      	movs	r6, r5
    96bc:	e10f      	b.n	98de <S_Nv_EarlyInit+0x28e>
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    96be:	ab02      	add	r3, sp, #8
    96c0:	2226      	movs	r2, #38	; 0x26
    96c2:	189b      	adds	r3, r3, r2
    96c4:	781b      	ldrb	r3, [r3, #0]
    96c6:	2b41      	cmp	r3, #65	; 0x41
    96c8:	d1db      	bne.n	9682 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[0] == (uint8_t) 'A') &&
    96ca:	ab02      	add	r3, sp, #8
    96cc:	3201      	adds	r2, #1
    96ce:	189b      	adds	r3, r3, r2
    96d0:	781b      	ldrb	r3, [r3, #0]
    96d2:	2b54      	cmp	r3, #84	; 0x54
    96d4:	d1d5      	bne.n	9682 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[1] == (uint8_t) 'T') &&
    96d6:	ab02      	add	r3, sp, #8
    96d8:	3201      	adds	r2, #1
    96da:	189b      	adds	r3, r3, r2
    96dc:	781b      	ldrb	r3, [r3, #0]
    96de:	2b53      	cmp	r3, #83	; 0x53
    96e0:	d1cf      	bne.n	9682 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[2] == (uint8_t) 'S') &&
    96e2:	ab02      	add	r3, sp, #8
    96e4:	3201      	adds	r2, #1
    96e6:	189b      	adds	r3, r3, r2
    96e8:	781b      	ldrb	r3, [r3, #0]
    96ea:	2b4e      	cmp	r3, #78	; 0x4e
    96ec:	d1c9      	bne.n	9682 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[3] == (uint8_t) 'N') &&
    96ee:	ab02      	add	r3, sp, #8
    96f0:	3201      	adds	r2, #1
    96f2:	189b      	adds	r3, r3, r2
    96f4:	781b      	ldrb	r3, [r3, #0]
    96f6:	2b76      	cmp	r3, #118	; 0x76
    96f8:	d1c3      	bne.n	9682 <S_Nv_EarlyInit+0x32>
            if ( sectorHeader.signature[5] == (uint8_t) '1')
    96fa:	ab02      	add	r3, sp, #8
    96fc:	3201      	adds	r2, #1
    96fe:	189b      	adds	r3, r3, r2
    9700:	781b      	ldrb	r3, [r3, #0]
    9702:	2b31      	cmp	r3, #49	; 0x31
    9704:	d106      	bne.n	9714 <S_Nv_EarlyInit+0xc4>
                if (pSectorHeaderSnv1->isActive == 0x0000u)
    9706:	ab02      	add	r3, sp, #8
    9708:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    970a:	2b00      	cmp	r3, #0
    970c:	d1b9      	bne.n	9682 <S_Nv_EarlyInit+0x32>
                    revisionNumber = SNV_REV_1;
    970e:	2301      	movs	r3, #1
    9710:	4698      	mov	r8, r3
    9712:	e00f      	b.n	9734 <S_Nv_EarlyInit+0xe4>
            else if (sectorHeader.signature[5] == (uint8_t) '2')
    9714:	2b32      	cmp	r3, #50	; 0x32
    9716:	d1b4      	bne.n	9682 <S_Nv_EarlyInit+0x32>
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9718:	4a89      	ldr	r2, [pc, #548]	; (9940 <S_Nv_EarlyInit+0x2f0>)
    971a:	2110      	movs	r1, #16
    971c:	2026      	movs	r0, #38	; 0x26
    971e:	ab02      	add	r3, sp, #8
    9720:	469c      	mov	ip, r3
    9722:	4460      	add	r0, ip
    9724:	4b87      	ldr	r3, [pc, #540]	; (9944 <S_Nv_EarlyInit+0x2f4>)
    9726:	4798      	blx	r3
              if (headerCrc == sectorHeader.headerCrc)
    9728:	ab02      	add	r3, sp, #8
    972a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    972c:	4283      	cmp	r3, r0
    972e:	d1a8      	bne.n	9682 <S_Nv_EarlyInit+0x32>
                  revisionNumber = SNV_REV_2;
    9730:	2302      	movs	r3, #2
    9732:	4698      	mov	r8, r3
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    9734:	454d      	cmp	r5, r9
    9736:	d2a4      	bcs.n	9682 <S_Nv_EarlyInit+0x32>
                lastSectorSequence = sectorHeader.sequenceNumber;
    9738:	46a9      	mov	r9, r5
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    973a:	0027      	movs	r7, r4
    973c:	e7a1      	b.n	9682 <S_Nv_EarlyInit+0x32>
        s_sector = FIRST_SECTOR;
    973e:	2200      	movs	r2, #0
    9740:	4b7c      	ldr	r3, [pc, #496]	; (9934 <S_Nv_EarlyInit+0x2e4>)
    9742:	701a      	strb	r2, [r3, #0]
            if ( EraseSector())
    9744:	4c80      	ldr	r4, [pc, #512]	; (9948 <S_Nv_EarlyInit+0x2f8>)
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9746:	4e81      	ldr	r6, [pc, #516]	; (994c <S_Nv_EarlyInit+0x2fc>)
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9748:	4d81      	ldr	r5, [pc, #516]	; (9950 <S_Nv_EarlyInit+0x300>)
    974a:	e006      	b.n	975a <S_Nv_EarlyInit+0x10a>
            s_sector++;
    974c:	4a79      	ldr	r2, [pc, #484]	; (9934 <S_Nv_EarlyInit+0x2e4>)
    974e:	7813      	ldrb	r3, [r2, #0]
    9750:	3301      	adds	r3, #1
    9752:	b2db      	uxtb	r3, r3
    9754:	7013      	strb	r3, [r2, #0]
            if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    9756:	2b01      	cmp	r3, #1
    9758:	d815      	bhi.n	9786 <S_Nv_EarlyInit+0x136>
            if ( EraseSector())
    975a:	47a0      	blx	r4
    975c:	2800      	cmp	r0, #0
    975e:	d0f5      	beq.n	974c <S_Nv_EarlyInit+0xfc>
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9760:	2301      	movs	r3, #1
    9762:	425b      	negs	r3, r3
    9764:	8033      	strh	r3, [r6, #0]
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9766:	2002      	movs	r0, #2
    9768:	4240      	negs	r0, r0
    976a:	47a8      	blx	r5
    976c:	2800      	cmp	r0, #0
    976e:	d0ed      	beq.n	974c <S_Nv_EarlyInit+0xfc>
        s_itemCount = 0u;
    9770:	2200      	movs	r2, #0
    9772:	4b6e      	ldr	r3, [pc, #440]	; (992c <S_Nv_EarlyInit+0x2dc>)
    9774:	701a      	strb	r2, [r3, #0]

        LoadSector(revisionNumber);
    }
    s_earlyInitDone = true;
    9776:	2201      	movs	r2, #1
    9778:	4b76      	ldr	r3, [pc, #472]	; (9954 <S_Nv_EarlyInit+0x304>)
    977a:	701a      	strb	r2, [r3, #0]
}
    977c:	b011      	add	sp, #68	; 0x44
    977e:	bc0c      	pop	{r2, r3}
    9780:	4690      	mov	r8, r2
    9782:	4699      	mov	r9, r3
    9784:	bdf0      	pop	{r4, r5, r6, r7, pc}
                assert(false);
    9786:	4b74      	ldr	r3, [pc, #464]	; (9958 <S_Nv_EarlyInit+0x308>)
    9788:	4a74      	ldr	r2, [pc, #464]	; (995c <S_Nv_EarlyInit+0x30c>)
    978a:	4975      	ldr	r1, [pc, #468]	; (9960 <S_Nv_EarlyInit+0x310>)
    978c:	4875      	ldr	r0, [pc, #468]	; (9964 <S_Nv_EarlyInit+0x314>)
    978e:	4c76      	ldr	r4, [pc, #472]	; (9968 <S_Nv_EarlyInit+0x318>)
    9790:	47a0      	blx	r4
        s_sectorHead = sizeof(SectorHeaderSnv1_t);
    9792:	2210      	movs	r2, #16
    9794:	4b68      	ldr	r3, [pc, #416]	; (9938 <S_Nv_EarlyInit+0x2e8>)
    9796:	801a      	strh	r2, [r3, #0]
    9798:	2110      	movs	r1, #16
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    979a:	4e66      	ldr	r6, [pc, #408]	; (9934 <S_Nv_EarlyInit+0x2e4>)
    979c:	4d64      	ldr	r5, [pc, #400]	; (9930 <S_Nv_EarlyInit+0x2e0>)
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    979e:	4f69      	ldr	r7, [pc, #420]	; (9944 <S_Nv_EarlyInit+0x2f4>)
    97a0:	e072      	b.n	9888 <S_Nv_EarlyInit+0x238>
            else if ( blockHeader.isActive != 0x0000u )
    97a2:	ab06      	add	r3, sp, #24
    97a4:	881b      	ldrh	r3, [r3, #0]
    97a6:	2b00      	cmp	r3, #0
    97a8:	d007      	beq.n	97ba <S_Nv_EarlyInit+0x16a>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    97aa:	ab06      	add	r3, sp, #24
    97ac:	88d8      	ldrh	r0, [r3, #6]
    97ae:	3010      	adds	r0, #16
    97b0:	b280      	uxth	r0, r0
    97b2:	2101      	movs	r1, #1
    97b4:	4b61      	ldr	r3, [pc, #388]	; (993c <S_Nv_EarlyInit+0x2ec>)
    97b6:	4798      	blx	r3
    97b8:	e061      	b.n	987e <S_Nv_EarlyInit+0x22e>
                uint16_t id = blockHeader.id;
    97ba:	ab06      	add	r3, sp, #24
    97bc:	885c      	ldrh	r4, [r3, #2]
                Item_t *cache = FindItemCache(id);
    97be:	0020      	movs	r0, r4
    97c0:	4b6a      	ldr	r3, [pc, #424]	; (996c <S_Nv_EarlyInit+0x31c>)
    97c2:	4798      	blx	r3
                if (cache == NULL)
    97c4:	2800      	cmp	r0, #0
    97c6:	d010      	beq.n	97ea <S_Nv_EarlyInit+0x19a>
                cache->lastBlock = s_sectorHead;
    97c8:	4b5b      	ldr	r3, [pc, #364]	; (9938 <S_Nv_EarlyInit+0x2e8>)
    97ca:	781a      	ldrb	r2, [r3, #0]
    97cc:	7082      	strb	r2, [r0, #2]
    97ce:	785b      	ldrb	r3, [r3, #1]
    97d0:	70c3      	strb	r3, [r0, #3]
                if ( blockHeader.itemLength == 0u )
    97d2:	ab06      	add	r3, sp, #24
    97d4:	891b      	ldrh	r3, [r3, #8]
    97d6:	2b00      	cmp	r3, #0
    97d8:	d00b      	beq.n	97f2 <S_Nv_EarlyInit+0x1a2>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    97da:	ab06      	add	r3, sp, #24
    97dc:	88d8      	ldrh	r0, [r3, #6]
    97de:	3010      	adds	r0, #16
    97e0:	b280      	uxth	r0, r0
    97e2:	2101      	movs	r1, #1
    97e4:	4b55      	ldr	r3, [pc, #340]	; (993c <S_Nv_EarlyInit+0x2ec>)
    97e6:	4798      	blx	r3
    97e8:	e049      	b.n	987e <S_Nv_EarlyInit+0x22e>
                    cache = CreateItemCache(id);
    97ea:	0020      	movs	r0, r4
    97ec:	4b60      	ldr	r3, [pc, #384]	; (9970 <S_Nv_EarlyInit+0x320>)
    97ee:	4798      	blx	r3
    97f0:	e7ea      	b.n	97c8 <S_Nv_EarlyInit+0x178>
                    DeleteItemCache(id);
    97f2:	0020      	movs	r0, r4
    97f4:	4b5f      	ldr	r3, [pc, #380]	; (9974 <S_Nv_EarlyInit+0x324>)
    97f6:	4798      	blx	r3
    97f8:	e7ef      	b.n	97da <S_Nv_EarlyInit+0x18a>
                uint16_t crc = ComputeDataCrc(s_sector, s_sectorHead, &blockHeader);
    97fa:	4b4f      	ldr	r3, [pc, #316]	; (9938 <S_Nv_EarlyInit+0x2e8>)
    97fc:	8819      	ldrh	r1, [r3, #0]
    97fe:	4b4d      	ldr	r3, [pc, #308]	; (9934 <S_Nv_EarlyInit+0x2e4>)
    9800:	7818      	ldrb	r0, [r3, #0]
    9802:	aa02      	add	r2, sp, #8
    9804:	4b5c      	ldr	r3, [pc, #368]	; (9978 <S_Nv_EarlyInit+0x328>)
    9806:	4798      	blx	r3
                if (crc != blockHeader.dataCrc)
    9808:	ab02      	add	r3, sp, #8
    980a:	881b      	ldrh	r3, [r3, #0]
    980c:	4283      	cmp	r3, r0
    980e:	d007      	beq.n	9820 <S_Nv_EarlyInit+0x1d0>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    9810:	ab02      	add	r3, sp, #8
    9812:	88d8      	ldrh	r0, [r3, #6]
    9814:	3010      	adds	r0, #16
    9816:	b280      	uxth	r0, r0
    9818:	0021      	movs	r1, r4
    981a:	4b48      	ldr	r3, [pc, #288]	; (993c <S_Nv_EarlyInit+0x2ec>)
    981c:	4798      	blx	r3
    981e:	e05e      	b.n	98de <S_Nv_EarlyInit+0x28e>
                    uint16_t id = blockHeader.id;
    9820:	ab02      	add	r3, sp, #8
    9822:	885f      	ldrh	r7, [r3, #2]
                    Item_t *cache = FindItemCache(id);
    9824:	0038      	movs	r0, r7
    9826:	4b51      	ldr	r3, [pc, #324]	; (996c <S_Nv_EarlyInit+0x31c>)
    9828:	4798      	blx	r3
                    if (cache == NULL)
    982a:	2800      	cmp	r0, #0
    982c:	d010      	beq.n	9850 <S_Nv_EarlyInit+0x200>
                    cache->lastBlock = s_sectorHead;
    982e:	4b42      	ldr	r3, [pc, #264]	; (9938 <S_Nv_EarlyInit+0x2e8>)
    9830:	781a      	ldrb	r2, [r3, #0]
    9832:	7082      	strb	r2, [r0, #2]
    9834:	785b      	ldrb	r3, [r3, #1]
    9836:	70c3      	strb	r3, [r0, #3]
                    if ( blockHeader.itemLength == 0u )
    9838:	ab02      	add	r3, sp, #8
    983a:	891b      	ldrh	r3, [r3, #8]
    983c:	2b00      	cmp	r3, #0
    983e:	d00b      	beq.n	9858 <S_Nv_EarlyInit+0x208>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    9840:	ab02      	add	r3, sp, #8
    9842:	88d8      	ldrh	r0, [r3, #6]
    9844:	3010      	adds	r0, #16
    9846:	b280      	uxth	r0, r0
    9848:	0021      	movs	r1, r4
    984a:	4b3c      	ldr	r3, [pc, #240]	; (993c <S_Nv_EarlyInit+0x2ec>)
    984c:	4798      	blx	r3
    984e:	e046      	b.n	98de <S_Nv_EarlyInit+0x28e>
                        cache = CreateItemCache(id);
    9850:	0038      	movs	r0, r7
    9852:	4b47      	ldr	r3, [pc, #284]	; (9970 <S_Nv_EarlyInit+0x320>)
    9854:	4798      	blx	r3
    9856:	e7ea      	b.n	982e <S_Nv_EarlyInit+0x1de>
                        DeleteItemCache(id);
    9858:	0038      	movs	r0, r7
    985a:	4b46      	ldr	r3, [pc, #280]	; (9974 <S_Nv_EarlyInit+0x324>)
    985c:	4798      	blx	r3
    985e:	e7ef      	b.n	9840 <S_Nv_EarlyInit+0x1f0>
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    9860:	ab06      	add	r3, sp, #24
    9862:	89dc      	ldrh	r4, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    9864:	4a36      	ldr	r2, [pc, #216]	; (9940 <S_Nv_EarlyInit+0x2f0>)
    9866:	210c      	movs	r1, #12
    9868:	2012      	movs	r0, #18
    986a:	ab02      	add	r3, sp, #8
    986c:	469c      	mov	ip, r3
    986e:	4460      	add	r0, ip
    9870:	47b8      	blx	r7
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    9872:	4284      	cmp	r4, r0
    9874:	d095      	beq.n	97a2 <S_Nv_EarlyInit+0x152>
                UpdateSectorHead(BLOCK_HEADER_SIZE, ITEM_16BYTE_ALIGNMENT);
    9876:	2101      	movs	r1, #1
    9878:	2010      	movs	r0, #16
    987a:	4b30      	ldr	r3, [pc, #192]	; (993c <S_Nv_EarlyInit+0x2ec>)
    987c:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    987e:	4b2e      	ldr	r3, [pc, #184]	; (9938 <S_Nv_EarlyInit+0x2e8>)
    9880:	8819      	ldrh	r1, [r3, #0]
    9882:	4b3e      	ldr	r3, [pc, #248]	; (997c <S_Nv_EarlyInit+0x32c>)
    9884:	4299      	cmp	r1, r3
    9886:	d812      	bhi.n	98ae <S_Nv_EarlyInit+0x25e>
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9888:	ac06      	add	r4, sp, #24
    988a:	7830      	ldrb	r0, [r6, #0]
    988c:	2310      	movs	r3, #16
    988e:	0022      	movs	r2, r4
    9890:	47a8      	blx	r5
        if ( pData[i] != 0xFFu )
    9892:	7823      	ldrb	r3, [r4, #0]
    9894:	2bff      	cmp	r3, #255	; 0xff
    9896:	d1e3      	bne.n	9860 <S_Nv_EarlyInit+0x210>
    9898:	ab06      	add	r3, sp, #24
    989a:	211f      	movs	r1, #31
    989c:	aa02      	add	r2, sp, #8
    989e:	4694      	mov	ip, r2
    98a0:	4461      	add	r1, ip
    98a2:	785a      	ldrb	r2, [r3, #1]
    98a4:	2aff      	cmp	r2, #255	; 0xff
    98a6:	d1db      	bne.n	9860 <S_Nv_EarlyInit+0x210>
    98a8:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    98aa:	428b      	cmp	r3, r1
    98ac:	d1f9      	bne.n	98a2 <S_Nv_EarlyInit+0x252>
        if ( !CompactSector() )
    98ae:	4b34      	ldr	r3, [pc, #208]	; (9980 <S_Nv_EarlyInit+0x330>)
    98b0:	4798      	blx	r3
    98b2:	2800      	cmp	r0, #0
    98b4:	d000      	beq.n	98b8 <S_Nv_EarlyInit+0x268>
    98b6:	e75e      	b.n	9776 <S_Nv_EarlyInit+0x126>
            assert(false);
    98b8:	4b27      	ldr	r3, [pc, #156]	; (9958 <S_Nv_EarlyInit+0x308>)
    98ba:	4a32      	ldr	r2, [pc, #200]	; (9984 <S_Nv_EarlyInit+0x334>)
    98bc:	4932      	ldr	r1, [pc, #200]	; (9988 <S_Nv_EarlyInit+0x338>)
    98be:	4829      	ldr	r0, [pc, #164]	; (9964 <S_Nv_EarlyInit+0x314>)
    98c0:	4c29      	ldr	r4, [pc, #164]	; (9968 <S_Nv_EarlyInit+0x318>)
    98c2:	47a0      	blx	r4
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    98c4:	ab02      	add	r3, sp, #8
    98c6:	89df      	ldrh	r7, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    98c8:	4a1d      	ldr	r2, [pc, #116]	; (9940 <S_Nv_EarlyInit+0x2f0>)
    98ca:	210e      	movs	r1, #14
    98cc:	0018      	movs	r0, r3
    98ce:	4b1d      	ldr	r3, [pc, #116]	; (9944 <S_Nv_EarlyInit+0x2f4>)
    98d0:	4798      	blx	r3
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    98d2:	4287      	cmp	r7, r0
    98d4:	d091      	beq.n	97fa <S_Nv_EarlyInit+0x1aa>
                UpdateSectorHead(BLOCK_HEADER_SIZE, itemAlignment);
    98d6:	0021      	movs	r1, r4
    98d8:	2010      	movs	r0, #16
    98da:	4b18      	ldr	r3, [pc, #96]	; (993c <S_Nv_EarlyInit+0x2ec>)
    98dc:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    98de:	882b      	ldrh	r3, [r5, #0]
    98e0:	4a26      	ldr	r2, [pc, #152]	; (997c <S_Nv_EarlyInit+0x32c>)
    98e2:	4293      	cmp	r3, r2
    98e4:	d900      	bls.n	98e8 <S_Nv_EarlyInit+0x298>
    98e6:	e746      	b.n	9776 <S_Nv_EarlyInit+0x126>
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    98e8:	aa06      	add	r2, sp, #24
    98ea:	8a12      	ldrh	r2, [r2, #16]
    98ec:	4914      	ldr	r1, [pc, #80]	; (9940 <S_Nv_EarlyInit+0x2f0>)
    98ee:	428a      	cmp	r2, r1
    98f0:	d002      	beq.n	98f8 <S_Nv_EarlyInit+0x2a8>
                itemAlignment = ITEM_NO_ALIGNMENT;
    98f2:	2400      	movs	r4, #0
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    98f4:	429a      	cmp	r2, r3
    98f6:	d803      	bhi.n	9900 <S_Nv_EarlyInit+0x2b0>
                UpdateSectorHead(0, itemAlignment);
    98f8:	2102      	movs	r1, #2
    98fa:	2000      	movs	r0, #0
    98fc:	47c0      	blx	r8
                itemAlignment = ITEM_64BYTE_ALIGNMENT;
    98fe:	2402      	movs	r4, #2
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9900:	8831      	ldrh	r1, [r6, #0]
    9902:	4b0c      	ldr	r3, [pc, #48]	; (9934 <S_Nv_EarlyInit+0x2e4>)
    9904:	7818      	ldrb	r0, [r3, #0]
    9906:	2310      	movs	r3, #16
    9908:	aa02      	add	r2, sp, #8
    990a:	4f09      	ldr	r7, [pc, #36]	; (9930 <S_Nv_EarlyInit+0x2e0>)
    990c:	47b8      	blx	r7
        if ( pData[i] != 0xFFu )
    990e:	ab02      	add	r3, sp, #8
    9910:	781b      	ldrb	r3, [r3, #0]
    9912:	2bff      	cmp	r3, #255	; 0xff
    9914:	d1d6      	bne.n	98c4 <S_Nv_EarlyInit+0x274>
    9916:	ab02      	add	r3, sp, #8
    9918:	210f      	movs	r1, #15
    991a:	469c      	mov	ip, r3
    991c:	4461      	add	r1, ip
    991e:	785a      	ldrb	r2, [r3, #1]
    9920:	2aff      	cmp	r2, #255	; 0xff
    9922:	d1cf      	bne.n	98c4 <S_Nv_EarlyInit+0x274>
    9924:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    9926:	428b      	cmp	r3, r1
    9928:	d1f9      	bne.n	991e <S_Nv_EarlyInit+0x2ce>
    992a:	e724      	b.n	9776 <S_Nv_EarlyInit+0x126>
    992c:	2000034c 	.word	0x2000034c
    9930:	0000888d 	.word	0x0000888d
    9934:	20000354 	.word	0x20000354
    9938:	20000356 	.word	0x20000356
    993c:	00008af9 	.word	0x00008af9
    9940:	0000ffff 	.word	0x0000ffff
    9944:	00008b35 	.word	0x00008b35
    9948:	00008e39 	.word	0x00008e39
    994c:	2000034e 	.word	0x2000034e
    9950:	00008ea1 	.word	0x00008ea1
    9954:	20000320 	.word	0x20000320
    9958:	00011f90 	.word	0x00011f90
    995c:	00012148 	.word	0x00012148
    9960:	0000052b 	.word	0x0000052b
    9964:	0001200c 	.word	0x0001200c
    9968:	000109d5 	.word	0x000109d5
    996c:	00008cd5 	.word	0x00008cd5
    9970:	00008d65 	.word	0x00008d65
    9974:	00008dc5 	.word	0x00008dc5
    9978:	00008c2d 	.word	0x00008c2d
    997c:	00001fff 	.word	0x00001fff
    9980:	00008fa1 	.word	0x00008fa1
    9984:	00012108 	.word	0x00012108
    9988:	00000336 	.word	0x00000336

0000998c <S_Nv_Init>:


void S_Nv_Init(void)
{
    998c:	b510      	push	{r4, lr}
    if (!s_earlyInitDone)
    998e:	4b08      	ldr	r3, [pc, #32]	; (99b0 <S_Nv_Init+0x24>)
    9990:	781b      	ldrb	r3, [r3, #0]
    9992:	2b00      	cmp	r3, #0
    9994:	d008      	beq.n	99a8 <S_Nv_Init+0x1c>
    {
        S_Nv_EarlyInit();
    }

    eraseSectorTimer.handler = eraseSectorTimerFired;
    9996:	4b07      	ldr	r3, [pc, #28]	; (99b4 <S_Nv_Init+0x28>)
    9998:	4a07      	ldr	r2, [pc, #28]	; (99b8 <S_Nv_Init+0x2c>)
    999a:	611a      	str	r2, [r3, #16]
    eraseSectorTimer.timeout = ERASE_SECTOR_DELAY_MS;
    999c:	4a07      	ldr	r2, [pc, #28]	; (99bc <S_Nv_Init+0x30>)
    999e:	605a      	str	r2, [r3, #4]
    eraseSectorTimer.interval = ERASE_SECTOR_DELAY_MS;
    99a0:	609a      	str	r2, [r3, #8]
    eraseSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    99a2:	2200      	movs	r2, #0
    99a4:	731a      	strb	r2, [r3, #12]
}
    99a6:	bd10      	pop	{r4, pc}
        S_Nv_EarlyInit();
    99a8:	4b05      	ldr	r3, [pc, #20]	; (99c0 <S_Nv_Init+0x34>)
    99aa:	4798      	blx	r3
    99ac:	e7f3      	b.n	9996 <S_Nv_Init+0xa>
    99ae:	46c0      	nop			; (mov r8, r8)
    99b0:	20000320 	.word	0x20000320
    99b4:	20000308 	.word	0x20000308
    99b8:	00008e15 	.word	0x00008e15
    99bc:	00001b58 	.word	0x00001b58
    99c0:	00009651 	.word	0x00009651

000099c4 <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    99c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99c6:	46ce      	mov	lr, r9
    99c8:	4647      	mov	r7, r8
    99ca:	b580      	push	{r7, lr}
    99cc:	b087      	sub	sp, #28
    99ce:	0004      	movs	r4, r0
    99d0:	9101      	str	r1, [sp, #4]
    99d2:	0015      	movs	r5, r2
    99d4:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    99d6:	2800      	cmp	r0, #0
    99d8:	d00c      	beq.n	99f4 <S_Nv_Write_Impl+0x30>
    99da:	2b00      	cmp	r3, #0
    99dc:	d00a      	beq.n	99f4 <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    99de:	4b35      	ldr	r3, [pc, #212]	; (9ab4 <S_Nv_Write_Impl+0xf0>)
    99e0:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    99e2:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    99e4:	2800      	cmp	r0, #0
    99e6:	d00b      	beq.n	9a00 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    99e8:	0018      	movs	r0, r3
    99ea:	b007      	add	sp, #28
    99ec:	bc0c      	pop	{r2, r3}
    99ee:	4690      	mov	r8, r2
    99f0:	4699      	mov	r9, r3
    99f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    99f4:	4b30      	ldr	r3, [pc, #192]	; (9ab8 <S_Nv_Write_Impl+0xf4>)
    99f6:	4a31      	ldr	r2, [pc, #196]	; (9abc <S_Nv_Write_Impl+0xf8>)
    99f8:	4931      	ldr	r1, [pc, #196]	; (9ac0 <S_Nv_Write_Impl+0xfc>)
    99fa:	4832      	ldr	r0, [pc, #200]	; (9ac4 <S_Nv_Write_Impl+0x100>)
    99fc:	4c32      	ldr	r4, [pc, #200]	; (9ac8 <S_Nv_Write_Impl+0x104>)
    99fe:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    9a00:	0028      	movs	r0, r5
    9a02:	3010      	adds	r0, #16
    9a04:	b280      	uxth	r0, r0
    9a06:	4b31      	ldr	r3, [pc, #196]	; (9acc <S_Nv_Write_Impl+0x108>)
    9a08:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    9a0a:	0020      	movs	r0, r4
    9a0c:	4b30      	ldr	r3, [pc, #192]	; (9ad0 <S_Nv_Write_Impl+0x10c>)
    9a0e:	4798      	blx	r3
    9a10:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    9a12:	2303      	movs	r3, #3
    if ( cache == NULL )
    9a14:	2800      	cmp	r0, #0
    9a16:	d0e7      	beq.n	99e8 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    9a18:	7883      	ldrb	r3, [r0, #2]
    9a1a:	78c4      	ldrb	r4, [r0, #3]
    9a1c:	0224      	lsls	r4, r4, #8
    9a1e:	431c      	orrs	r4, r3
    9a20:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9a22:	4b2c      	ldr	r3, [pc, #176]	; (9ad4 <S_Nv_Write_Impl+0x110>)
    9a24:	7818      	ldrb	r0, [r3, #0]
    9a26:	2310      	movs	r3, #16
    9a28:	aa02      	add	r2, sp, #8
    9a2a:	0021      	movs	r1, r4
    9a2c:	4c2a      	ldr	r4, [pc, #168]	; (9ad8 <S_Nv_Write_Impl+0x114>)
    9a2e:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    9a30:	ab02      	add	r3, sp, #8
    9a32:	8919      	ldrh	r1, [r3, #8]
    9a34:	9b01      	ldr	r3, [sp, #4]
    9a36:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    9a38:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    9a3a:	428a      	cmp	r2, r1
    9a3c:	d8d4      	bhi.n	99e8 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    9a3e:	ab02      	add	r3, sp, #8
    9a40:	466a      	mov	r2, sp
    9a42:	8892      	ldrh	r2, [r2, #4]
    9a44:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    9a46:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    9a48:	4642      	mov	r2, r8
    9a4a:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    9a4c:	428d      	cmp	r5, r1
    9a4e:	d02c      	beq.n	9aaa <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    9a50:	ab02      	add	r3, sp, #8
    9a52:	899b      	ldrh	r3, [r3, #12]
    9a54:	3301      	adds	r3, #1
    9a56:	aa02      	add	r2, sp, #8
    9a58:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    9a5a:	4b20      	ldr	r3, [pc, #128]	; (9adc <S_Nv_Write_Impl+0x118>)
    9a5c:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    9a5e:	0039      	movs	r1, r7
    9a60:	a802      	add	r0, sp, #8
    9a62:	4b1f      	ldr	r3, [pc, #124]	; (9ae0 <S_Nv_Write_Impl+0x11c>)
    9a64:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    9a66:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    9a68:	2800      	cmp	r0, #0
    9a6a:	d0bd      	beq.n	99e8 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    9a6c:	70b4      	strb	r4, [r6, #2]
    9a6e:	0a24      	lsrs	r4, r4, #8
    9a70:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    9a72:	ab02      	add	r3, sp, #8
    9a74:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    9a76:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    9a78:	2a64      	cmp	r2, #100	; 0x64
    9a7a:	d9b5      	bls.n	99e8 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    9a7c:	ab02      	add	r3, sp, #8
    9a7e:	885a      	ldrh	r2, [r3, #2]
    9a80:	4b18      	ldr	r3, [pc, #96]	; (9ae4 <S_Nv_Write_Impl+0x120>)
    9a82:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    9a84:	2200      	movs	r2, #0
    9a86:	4b18      	ldr	r3, [pc, #96]	; (9ae8 <S_Nv_Write_Impl+0x124>)
    9a88:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    9a8a:	4818      	ldr	r0, [pc, #96]	; (9aec <S_Nv_Write_Impl+0x128>)
    9a8c:	4b18      	ldr	r3, [pc, #96]	; (9af0 <S_Nv_Write_Impl+0x12c>)
    9a8e:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    9a90:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    9a92:	2800      	cmp	r0, #0
    9a94:	d1a8      	bne.n	99e8 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    9a96:	4b15      	ldr	r3, [pc, #84]	; (9aec <S_Nv_Write_Impl+0x128>)
    9a98:	4a16      	ldr	r2, [pc, #88]	; (9af4 <S_Nv_Write_Impl+0x130>)
    9a9a:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    9a9c:	4a16      	ldr	r2, [pc, #88]	; (9af8 <S_Nv_Write_Impl+0x134>)
    9a9e:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    9aa0:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    9aa2:	2200      	movs	r2, #0
    9aa4:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    9aa6:	2300      	movs	r3, #0
    9aa8:	e79e      	b.n	99e8 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    9aaa:	2300      	movs	r3, #0
    9aac:	aa02      	add	r2, sp, #8
    9aae:	8193      	strh	r3, [r2, #12]
    9ab0:	e7d3      	b.n	9a5a <S_Nv_Write_Impl+0x96>
    9ab2:	46c0      	nop			; (mov r8, r8)
    9ab4:	00008add 	.word	0x00008add
    9ab8:	000120a0 	.word	0x000120a0
    9abc:	0001216c 	.word	0x0001216c
    9ac0:	00000596 	.word	0x00000596
    9ac4:	0001200c 	.word	0x0001200c
    9ac8:	000109d5 	.word	0x000109d5
    9acc:	00009251 	.word	0x00009251
    9ad0:	00008cd5 	.word	0x00008cd5
    9ad4:	20000354 	.word	0x20000354
    9ad8:	0000888d 	.word	0x0000888d
    9adc:	20000356 	.word	0x20000356
    9ae0:	00009505 	.word	0x00009505
    9ae4:	2000031c 	.word	0x2000031c
    9ae8:	2000031e 	.word	0x2000031e
    9aec:	200001dc 	.word	0x200001dc
    9af0:	0000d185 	.word	0x0000d185
    9af4:	000094f9 	.word	0x000094f9
    9af8:	00000bb8 	.word	0x00000bb8

00009afc <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    9afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9afe:	b083      	sub	sp, #12
    9b00:	000c      	movs	r4, r1
    9b02:	0015      	movs	r5, r2
    9b04:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    9b06:	2800      	cmp	r0, #0
    9b08:	d009      	beq.n	9b1e <S_Nv_Read_Impl+0x22>
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	d007      	beq.n	9b1e <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    9b0e:	4b10      	ldr	r3, [pc, #64]	; (9b50 <S_Nv_Read_Impl+0x54>)
    9b10:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    9b12:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    9b14:	2800      	cmp	r0, #0
    9b16:	d108      	bne.n	9b2a <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    9b18:	0018      	movs	r0, r3
    9b1a:	b003      	add	sp, #12
    9b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    9b1e:	4b0d      	ldr	r3, [pc, #52]	; (9b54 <S_Nv_Read_Impl+0x58>)
    9b20:	4a0d      	ldr	r2, [pc, #52]	; (9b58 <S_Nv_Read_Impl+0x5c>)
    9b22:	490e      	ldr	r1, [pc, #56]	; (9b5c <S_Nv_Read_Impl+0x60>)
    9b24:	480e      	ldr	r0, [pc, #56]	; (9b60 <S_Nv_Read_Impl+0x64>)
    9b26:	4c0f      	ldr	r4, [pc, #60]	; (9b64 <S_Nv_Read_Impl+0x68>)
    9b28:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9b2a:	1962      	adds	r2, r4, r5
    9b2c:	490e      	ldr	r1, [pc, #56]	; (9b68 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    9b2e:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    9b30:	428a      	cmp	r2, r1
    9b32:	d8f1      	bhi.n	9b18 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    9b34:	4b0d      	ldr	r3, [pc, #52]	; (9b6c <S_Nv_Read_Impl+0x70>)
    9b36:	781f      	ldrb	r7, [r3, #0]
    9b38:	9600      	str	r6, [sp, #0]
    9b3a:	002b      	movs	r3, r5
    9b3c:	0022      	movs	r2, r4
    9b3e:	0001      	movs	r1, r0
    9b40:	0038      	movs	r0, r7
    9b42:	4c0b      	ldr	r4, [pc, #44]	; (9b70 <S_Nv_Read_Impl+0x74>)
    9b44:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    9b46:	4243      	negs	r3, r0
    9b48:	4143      	adcs	r3, r0
    9b4a:	009b      	lsls	r3, r3, #2
    9b4c:	e7e4      	b.n	9b18 <S_Nv_Read_Impl+0x1c>
    9b4e:	46c0      	nop			; (mov r8, r8)
    9b50:	00008d49 	.word	0x00008d49
    9b54:	000120a0 	.word	0x000120a0
    9b58:	0001217c 	.word	0x0001217c
    9b5c:	000005ee 	.word	0x000005ee
    9b60:	0001200c 	.word	0x0001200c
    9b64:	000109d5 	.word	0x000109d5
    9b68:	0000ffff 	.word	0x0000ffff
    9b6c:	20000354 	.word	0x20000354
    9b70:	00008b75 	.word	0x00008b75

00009b74 <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    9b74:	b510      	push	{r4, lr}
    9b76:	b084      	sub	sp, #16
    assert(id != 0u);
    9b78:	2800      	cmp	r0, #0
    9b7a:	d005      	beq.n	9b88 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    9b7c:	4b0a      	ldr	r3, [pc, #40]	; (9ba8 <S_Nv_ItemLength_Impl+0x34>)
    9b7e:	4798      	blx	r3
    9b80:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    9b82:	d107      	bne.n	9b94 <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    9b84:	b004      	add	sp, #16
    9b86:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    9b88:	4b08      	ldr	r3, [pc, #32]	; (9bac <S_Nv_ItemLength_Impl+0x38>)
    9b8a:	4a09      	ldr	r2, [pc, #36]	; (9bb0 <S_Nv_ItemLength_Impl+0x3c>)
    9b8c:	4909      	ldr	r1, [pc, #36]	; (9bb4 <S_Nv_ItemLength_Impl+0x40>)
    9b8e:	480a      	ldr	r0, [pc, #40]	; (9bb8 <S_Nv_ItemLength_Impl+0x44>)
    9b90:	4c0a      	ldr	r4, [pc, #40]	; (9bbc <S_Nv_ItemLength_Impl+0x48>)
    9b92:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9b94:	4b0a      	ldr	r3, [pc, #40]	; (9bc0 <S_Nv_ItemLength_Impl+0x4c>)
    9b96:	7818      	ldrb	r0, [r3, #0]
    9b98:	2310      	movs	r3, #16
    9b9a:	466a      	mov	r2, sp
    9b9c:	4c09      	ldr	r4, [pc, #36]	; (9bc4 <S_Nv_ItemLength_Impl+0x50>)
    9b9e:	47a0      	blx	r4
    return blockHeader.itemLength;
    9ba0:	466b      	mov	r3, sp
    9ba2:	8918      	ldrh	r0, [r3, #8]
    9ba4:	e7ee      	b.n	9b84 <S_Nv_ItemLength_Impl+0x10>
    9ba6:	46c0      	nop			; (mov r8, r8)
    9ba8:	00008d49 	.word	0x00008d49
    9bac:	00012094 	.word	0x00012094
    9bb0:	0001218c 	.word	0x0001218c
    9bb4:	0000060b 	.word	0x0000060b
    9bb8:	0001200c 	.word	0x0001200c
    9bbc:	000109d5 	.word	0x000109d5
    9bc0:	20000354 	.word	0x20000354
    9bc4:	0000888d 	.word	0x0000888d

00009bc8 <S_Nv_ItemInit_Impl>:
{
    9bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9bca:	b085      	sub	sp, #20
    9bcc:	0004      	movs	r4, r0
    9bce:	000e      	movs	r6, r1
    9bd0:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    9bd2:	1e43      	subs	r3, r0, #1
    9bd4:	b29b      	uxth	r3, r3
    9bd6:	4a2e      	ldr	r2, [pc, #184]	; (9c90 <S_Nv_ItemInit_Impl+0xc8>)
    9bd8:	4293      	cmp	r3, r2
    9bda:	d81e      	bhi.n	9c1a <S_Nv_ItemInit_Impl+0x52>
    9bdc:	2380      	movs	r3, #128	; 0x80
    9bde:	011b      	lsls	r3, r3, #4
    9be0:	4299      	cmp	r1, r3
    9be2:	d81a      	bhi.n	9c1a <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    9be4:	4b2b      	ldr	r3, [pc, #172]	; (9c94 <S_Nv_ItemInit_Impl+0xcc>)
    9be6:	4798      	blx	r3
    9be8:	2800      	cmp	r0, #0
    9bea:	d01d      	beq.n	9c28 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    9bec:	0020      	movs	r0, r4
    9bee:	4b2a      	ldr	r3, [pc, #168]	; (9c98 <S_Nv_ItemInit_Impl+0xd0>)
    9bf0:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    9bf2:	4286      	cmp	r6, r0
    9bf4:	d007      	beq.n	9c06 <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    9bf6:	4b29      	ldr	r3, [pc, #164]	; (9c9c <S_Nv_ItemInit_Impl+0xd4>)
    9bf8:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    9bfa:	4b29      	ldr	r3, [pc, #164]	; (9ca0 <S_Nv_ItemInit_Impl+0xd8>)
    9bfc:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    9bfe:	4b29      	ldr	r3, [pc, #164]	; (9ca4 <S_Nv_ItemInit_Impl+0xdc>)
    9c00:	4798      	blx	r3
    9c02:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    9c04:	d115      	bne.n	9c32 <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    9c06:	2d00      	cmp	r5, #0
    9c08:	d040      	beq.n	9c8c <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    9c0a:	002b      	movs	r3, r5
    9c0c:	0032      	movs	r2, r6
    9c0e:	2100      	movs	r1, #0
    9c10:	0020      	movs	r0, r4
    9c12:	4c25      	ldr	r4, [pc, #148]	; (9ca8 <S_Nv_ItemInit_Impl+0xe0>)
    9c14:	47a0      	blx	r4
    9c16:	0003      	movs	r3, r0
    9c18:	e00b      	b.n	9c32 <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    9c1a:	4b24      	ldr	r3, [pc, #144]	; (9cac <S_Nv_ItemInit_Impl+0xe4>)
    9c1c:	4a24      	ldr	r2, [pc, #144]	; (9cb0 <S_Nv_ItemInit_Impl+0xe8>)
    9c1e:	21aa      	movs	r1, #170	; 0xaa
    9c20:	00c9      	lsls	r1, r1, #3
    9c22:	4824      	ldr	r0, [pc, #144]	; (9cb4 <S_Nv_ItemInit_Impl+0xec>)
    9c24:	4c24      	ldr	r4, [pc, #144]	; (9cb8 <S_Nv_ItemInit_Impl+0xf0>)
    9c26:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    9c28:	4b24      	ldr	r3, [pc, #144]	; (9cbc <S_Nv_ItemInit_Impl+0xf4>)
    9c2a:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9c2c:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9c2e:	2800      	cmp	r0, #0
    9c30:	d002      	beq.n	9c38 <S_Nv_ItemInit_Impl+0x70>
}
    9c32:	0018      	movs	r0, r3
    9c34:	b005      	add	sp, #20
    9c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    9c38:	0030      	movs	r0, r6
    9c3a:	3010      	adds	r0, #16
    9c3c:	b280      	uxth	r0, r0
    9c3e:	4b20      	ldr	r3, [pc, #128]	; (9cc0 <S_Nv_ItemInit_Impl+0xf8>)
    9c40:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    9c42:	4b20      	ldr	r3, [pc, #128]	; (9cc4 <S_Nv_ItemInit_Impl+0xfc>)
    9c44:	781b      	ldrb	r3, [r3, #0]
    9c46:	2b09      	cmp	r3, #9
    9c48:	d819      	bhi.n	9c7e <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    9c4a:	4b1f      	ldr	r3, [pc, #124]	; (9cc8 <S_Nv_ItemInit_Impl+0x100>)
    9c4c:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    9c4e:	466b      	mov	r3, sp
    9c50:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    9c52:	2300      	movs	r3, #0
    9c54:	466a      	mov	r2, sp
    9c56:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    9c58:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    9c5a:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    9c5c:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    9c5e:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9c60:	0029      	movs	r1, r5
    9c62:	4668      	mov	r0, sp
    9c64:	4b19      	ldr	r3, [pc, #100]	; (9ccc <S_Nv_ItemInit_Impl+0x104>)
    9c66:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    9c68:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    9c6a:	2800      	cmp	r0, #0
    9c6c:	d0e1      	beq.n	9c32 <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    9c6e:	0020      	movs	r0, r4
    9c70:	4b17      	ldr	r3, [pc, #92]	; (9cd0 <S_Nv_ItemInit_Impl+0x108>)
    9c72:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    9c74:	7087      	strb	r7, [r0, #2]
    9c76:	0a3f      	lsrs	r7, r7, #8
    9c78:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    9c7a:	2302      	movs	r3, #2
    9c7c:	e7d9      	b.n	9c32 <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    9c7e:	4b15      	ldr	r3, [pc, #84]	; (9cd4 <S_Nv_ItemInit_Impl+0x10c>)
    9c80:	4a0b      	ldr	r2, [pc, #44]	; (9cb0 <S_Nv_ItemInit_Impl+0xe8>)
    9c82:	21af      	movs	r1, #175	; 0xaf
    9c84:	00c9      	lsls	r1, r1, #3
    9c86:	480b      	ldr	r0, [pc, #44]	; (9cb4 <S_Nv_ItemInit_Impl+0xec>)
    9c88:	4c0b      	ldr	r4, [pc, #44]	; (9cb8 <S_Nv_ItemInit_Impl+0xf0>)
    9c8a:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    9c8c:	2300      	movs	r3, #0
    9c8e:	e7d0      	b.n	9c32 <S_Nv_ItemInit_Impl+0x6a>
    9c90:	0000effe 	.word	0x0000effe
    9c94:	00008d49 	.word	0x00008d49
    9c98:	00009b75 	.word	0x00009b75
    9c9c:	2000031c 	.word	0x2000031c
    9ca0:	2000031e 	.word	0x2000031e
    9ca4:	000092cd 	.word	0x000092cd
    9ca8:	00009afd 	.word	0x00009afd
    9cac:	00012054 	.word	0x00012054
    9cb0:	00012158 	.word	0x00012158
    9cb4:	0001200c 	.word	0x0001200c
    9cb8:	000109d5 	.word	0x000109d5
    9cbc:	00008add 	.word	0x00008add
    9cc0:	00009251 	.word	0x00009251
    9cc4:	2000034c 	.word	0x2000034c
    9cc8:	20000356 	.word	0x20000356
    9ccc:	00009505 	.word	0x00009505
    9cd0:	00008d65 	.word	0x00008d65
    9cd4:	00011fb4 	.word	0x00011fb4

00009cd8 <S_Nv_EraseAll_Impl>:
 * persistent items are also deleted. This is because all sectors are
 * deleted without initializing a new one or even clearing the cache,
 * so reinitialization of the driver is needed.
 */
S_Nv_ReturnValue_t S_Nv_EraseAll_Impl(bool includingPersistentItems)
{
    9cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9cda:	46ce      	mov	lr, r9
    9cdc:	4647      	mov	r7, r8
    9cde:	b580      	push	{r7, lr}
    9ce0:	0004      	movs	r4, r0
    //PDS_EraseSecureItems();

    if ( PowerSupplyTooLow() )
    9ce2:	4b1e      	ldr	r3, [pc, #120]	; (9d5c <S_Nv_EraseAll_Impl+0x84>)
    9ce4:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9ce6:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9ce8:	2800      	cmp	r0, #0
    9cea:	d004      	beq.n	9cf6 <S_Nv_EraseAll_Impl+0x1e>
        }
    }

    // Only way we end up here is if all went well.
    return S_Nv_ReturnValue_Ok;
}
    9cec:	0018      	movs	r0, r3
    9cee:	bc0c      	pop	{r2, r3}
    9cf0:	4690      	mov	r8, r2
    9cf2:	4699      	mov	r9, r3
    9cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ( includingPersistentItems )
    9cf6:	2c00      	cmp	r4, #0
    9cf8:	d005      	beq.n	9d06 <S_Nv_EraseAll_Impl+0x2e>
            D_Nv_EraseSector(sector);
    9cfa:	4c19      	ldr	r4, [pc, #100]	; (9d60 <S_Nv_EraseAll_Impl+0x88>)
    9cfc:	47a0      	blx	r4
    9cfe:	2001      	movs	r0, #1
    9d00:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    9d02:	2300      	movs	r3, #0
    9d04:	e7f2      	b.n	9cec <S_Nv_EraseAll_Impl+0x14>
        uint8_t totalItems = s_itemCount;
    9d06:	4b17      	ldr	r3, [pc, #92]	; (9d64 <S_Nv_EraseAll_Impl+0x8c>)
    9d08:	781e      	ldrb	r6, [r3, #0]
        for ( uint8_t cacheIndex = 0; cacheIndex < totalItems; cacheIndex++ )
    9d0a:	2e00      	cmp	r6, #0
    9d0c:	d024      	beq.n	9d58 <S_Nv_EraseAll_Impl+0x80>
    9d0e:	3e01      	subs	r6, #1
    9d10:	b2f6      	uxtb	r6, r6
    9d12:	3601      	adds	r6, #1
    9d14:	00b6      	lsls	r6, r6, #2
    9d16:	2400      	movs	r4, #0
    9d18:	2500      	movs	r5, #0
            uint16_t id = s_itemCache[cacheIndex].id;
    9d1a:	4b13      	ldr	r3, [pc, #76]	; (9d68 <S_Nv_EraseAll_Impl+0x90>)
    9d1c:	4698      	mov	r8, r3
        if ( id == s_persistentItems[i] )
    9d1e:	4f13      	ldr	r7, [pc, #76]	; (9d6c <S_Nv_EraseAll_Impl+0x94>)
                DeleteItemCache(id);
    9d20:	4b13      	ldr	r3, [pc, #76]	; (9d70 <S_Nv_EraseAll_Impl+0x98>)
    9d22:	4699      	mov	r9, r3
    9d24:	e002      	b.n	9d2c <S_Nv_EraseAll_Impl+0x54>
    9d26:	3404      	adds	r4, #4
        for ( uint8_t cacheIndex = 0; cacheIndex < totalItems; cacheIndex++ )
    9d28:	42a6      	cmp	r6, r4
    9d2a:	d007      	beq.n	9d3c <S_Nv_EraseAll_Impl+0x64>
            uint16_t id = s_itemCache[cacheIndex].id;
    9d2c:	4643      	mov	r3, r8
    9d2e:	5ae0      	ldrh	r0, [r4, r3]
        if ( id == s_persistentItems[i] )
    9d30:	42b8      	cmp	r0, r7
    9d32:	d0f8      	beq.n	9d26 <S_Nv_EraseAll_Impl+0x4e>
                DeleteItemCache(id);
    9d34:	47c8      	blx	r9
                deletedItems++;
    9d36:	3501      	adds	r5, #1
    9d38:	b2ed      	uxtb	r5, r5
    9d3a:	e7f4      	b.n	9d26 <S_Nv_EraseAll_Impl+0x4e>
    return S_Nv_ReturnValue_Ok;
    9d3c:	2300      	movs	r3, #0
        if ( deletedItems > 0 )
    9d3e:	2d00      	cmp	r5, #0
    9d40:	d0d4      	beq.n	9cec <S_Nv_EraseAll_Impl+0x14>
            if ( !CompactSector() )
    9d42:	4b0c      	ldr	r3, [pc, #48]	; (9d74 <S_Nv_EraseAll_Impl+0x9c>)
    9d44:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    9d46:	2300      	movs	r3, #0
            if ( !CompactSector() )
    9d48:	2800      	cmp	r0, #0
    9d4a:	d1cf      	bne.n	9cec <S_Nv_EraseAll_Impl+0x14>
                assert(false);
    9d4c:	4b0a      	ldr	r3, [pc, #40]	; (9d78 <S_Nv_EraseAll_Impl+0xa0>)
    9d4e:	4a0b      	ldr	r2, [pc, #44]	; (9d7c <S_Nv_EraseAll_Impl+0xa4>)
    9d50:	490b      	ldr	r1, [pc, #44]	; (9d80 <S_Nv_EraseAll_Impl+0xa8>)
    9d52:	480c      	ldr	r0, [pc, #48]	; (9d84 <S_Nv_EraseAll_Impl+0xac>)
    9d54:	4c0c      	ldr	r4, [pc, #48]	; (9d88 <S_Nv_EraseAll_Impl+0xb0>)
    9d56:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    9d58:	2300      	movs	r3, #0
    9d5a:	e7c7      	b.n	9cec <S_Nv_EraseAll_Impl+0x14>
    9d5c:	00008add 	.word	0x00008add
    9d60:	00008a6d 	.word	0x00008a6d
    9d64:	2000034c 	.word	0x2000034c
    9d68:	20000324 	.word	0x20000324
    9d6c:	00000fff 	.word	0x00000fff
    9d70:	00008dc5 	.word	0x00008dc5
    9d74:	00008fa1 	.word	0x00008fa1
    9d78:	00011f90 	.word	0x00011f90
    9d7c:	000121a4 	.word	0x000121a4
    9d80:	0000066b 	.word	0x0000066b
    9d84:	0001200c 	.word	0x0001200c
    9d88:	000109d5 	.word	0x000109d5

00009d8c <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    9d8c:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    9d8e:	4b03      	ldr	r3, [pc, #12]	; (9d9c <S_Nv_IsItemAvailable_Impl+0x10>)
    9d90:	4798      	blx	r3
    9d92:	1e43      	subs	r3, r0, #1
    9d94:	4198      	sbcs	r0, r3
    9d96:	b2c0      	uxtb	r0, r0
}
    9d98:	bd10      	pop	{r4, pc}
    9d9a:	46c0      	nop			; (mov r8, r8)
    9d9c:	00008d49 	.word	0x00008d49

00009da0 <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    9da0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9da2:	46d6      	mov	lr, sl
    9da4:	4647      	mov	r7, r8
    9da6:	b580      	push	{r7, lr}
    9da8:	b087      	sub	sp, #28
    9daa:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    9dac:	4b24      	ldr	r3, [pc, #144]	; (9e40 <pdsInitItemMask+0xa0>)
    9dae:	4298      	cmp	r0, r3
    9db0:	d012      	beq.n	9dd8 <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    9db2:	0443      	lsls	r3, r0, #17
    9db4:	d41c      	bmi.n	9df0 <pdsInitItemMask+0x50>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    9db6:	08c3      	lsrs	r3, r0, #3
    9db8:	18cf      	adds	r7, r1, r3
    9dba:	2307      	movs	r3, #7
    9dbc:	4018      	ands	r0, r3
    9dbe:	3b06      	subs	r3, #6
    9dc0:	4083      	lsls	r3, r0
    9dc2:	783a      	ldrb	r2, [r7, #0]
    9dc4:	4313      	orrs	r3, r2
    9dc6:	703b      	strb	r3, [r7, #0]
  }

  return true;
    9dc8:	2301      	movs	r3, #1
    9dca:	9301      	str	r3, [sp, #4]
}
    9dcc:	9801      	ldr	r0, [sp, #4]
    9dce:	b007      	add	sp, #28
    9dd0:	bc0c      	pop	{r2, r3}
    9dd2:	4690      	mov	r8, r2
    9dd4:	469a      	mov	sl, r3
    9dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    9dd8:	2202      	movs	r2, #2
    9dda:	21ff      	movs	r1, #255	; 0xff
    9ddc:	0038      	movs	r0, r7
    9dde:	4b19      	ldr	r3, [pc, #100]	; (9e44 <pdsInitItemMask+0xa4>)
    9de0:	4798      	blx	r3
    itemMask[0] &= 0xFEU;
    9de2:	783b      	ldrb	r3, [r7, #0]
    9de4:	2201      	movs	r2, #1
    9de6:	4393      	bics	r3, r2
    9de8:	703b      	strb	r3, [r7, #0]
  return true;
    9dea:	2301      	movs	r3, #1
    9dec:	9301      	str	r3, [sp, #4]
    9dee:	e7ed      	b.n	9dcc <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    9df0:	a904      	add	r1, sp, #16
    9df2:	4b15      	ldr	r3, [pc, #84]	; (9e48 <pdsInitItemMask+0xa8>)
    9df4:	4798      	blx	r3
    9df6:	9001      	str	r0, [sp, #4]
    9df8:	2800      	cmp	r0, #0
    9dfa:	d0e7      	beq.n	9dcc <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    9dfc:	ab04      	add	r3, sp, #16
    9dfe:	889b      	ldrh	r3, [r3, #4]
    9e00:	4698      	mov	r8, r3
    9e02:	2b00      	cmp	r3, #0
    9e04:	d0e2      	beq.n	9dcc <pdsInitItemMask+0x2c>
    9e06:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    9e08:	ab02      	add	r3, sp, #8
    9e0a:	1d9d      	adds	r5, r3, #6
    9e0c:	4b0f      	ldr	r3, [pc, #60]	; (9e4c <pdsInitItemMask+0xac>)
    9e0e:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    9e10:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    9e12:	0061      	lsls	r1, r4, #1
    9e14:	9b04      	ldr	r3, [sp, #16]
    9e16:	469c      	mov	ip, r3
    9e18:	4461      	add	r1, ip
    9e1a:	2202      	movs	r2, #2
    9e1c:	0028      	movs	r0, r5
    9e1e:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    9e20:	8829      	ldrh	r1, [r5, #0]
    9e22:	08ca      	lsrs	r2, r1, #3
    9e24:	18ba      	adds	r2, r7, r2
    9e26:	4031      	ands	r1, r6
    9e28:	2301      	movs	r3, #1
    9e2a:	408b      	lsls	r3, r1
    9e2c:	7811      	ldrb	r1, [r2, #0]
    9e2e:	430b      	orrs	r3, r1
    9e30:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    9e32:	3401      	adds	r4, #1
    9e34:	b2e4      	uxtb	r4, r4
    9e36:	b2a3      	uxth	r3, r4
    9e38:	4543      	cmp	r3, r8
    9e3a:	d3ea      	bcc.n	9e12 <pdsInitItemMask+0x72>
    9e3c:	e7c6      	b.n	9dcc <pdsInitItemMask+0x2c>
    9e3e:	46c0      	nop			; (mov r8, r8)
    9e40:	00004002 	.word	0x00004002
    9e44:	00010aa9 	.word	0x00010aa9
    9e48:	0000a2c9 	.word	0x0000a2c9
    9e4c:	00010a97 	.word	0x00010a97

00009e50 <PDS_Restore>:
{
    9e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e52:	b089      	sub	sp, #36	; 0x24
  uint8_t itemsToRestore[PDS_ITEM_MASK_SIZE] = {0U};
    9e54:	a907      	add	r1, sp, #28
    9e56:	2300      	movs	r3, #0
    9e58:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToRestore))
    9e5a:	4b2b      	ldr	r3, [pc, #172]	; (9f08 <PDS_Restore+0xb8>)
    9e5c:	4798      	blx	r3
    9e5e:	9001      	str	r0, [sp, #4]
    9e60:	2600      	movs	r6, #0
    9e62:	2800      	cmp	r0, #0
    9e64:	d148      	bne.n	9ef8 <PDS_Restore+0xa8>
    9e66:	e041      	b.n	9eec <PDS_Restore+0x9c>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9e68:	4b28      	ldr	r3, [pc, #160]	; (9f0c <PDS_Restore+0xbc>)
    9e6a:	4a29      	ldr	r2, [pc, #164]	; (9f10 <PDS_Restore+0xc0>)
    9e6c:	21ab      	movs	r1, #171	; 0xab
    9e6e:	0049      	lsls	r1, r1, #1
    9e70:	4828      	ldr	r0, [pc, #160]	; (9f14 <PDS_Restore+0xc4>)
    9e72:	4c29      	ldr	r4, [pc, #164]	; (9f18 <PDS_Restore+0xc8>)
    9e74:	47a0      	blx	r4
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9e76:	4b29      	ldr	r3, [pc, #164]	; (9f1c <PDS_Restore+0xcc>)
    9e78:	4a25      	ldr	r2, [pc, #148]	; (9f10 <PDS_Restore+0xc0>)
    9e7a:	2168      	movs	r1, #104	; 0x68
    9e7c:	31ff      	adds	r1, #255	; 0xff
    9e7e:	4825      	ldr	r0, [pc, #148]	; (9f14 <PDS_Restore+0xc4>)
    9e80:	4c25      	ldr	r4, [pc, #148]	; (9f18 <PDS_Restore+0xc8>)
    9e82:	47a0      	blx	r4
    9e84:	3701      	adds	r7, #1
    9e86:	3501      	adds	r5, #1
    9e88:	b2ad      	uxth	r5, r5
    for (j = 0U; j < 8U; j++)
    9e8a:	2f08      	cmp	r7, #8
    9e8c:	d031      	beq.n	9ef2 <PDS_Restore+0xa2>
      if (itemsToRestore[i] & (1U << j))
    9e8e:	ab07      	add	r3, sp, #28
    9e90:	5cf3      	ldrb	r3, [r6, r3]
    9e92:	40fb      	lsrs	r3, r7
    9e94:	07db      	lsls	r3, r3, #31
    9e96:	d5f5      	bpl.n	9e84 <PDS_Restore+0x34>
  if (pdsGetItemDescr(id, &itemDescr))
    9e98:	a903      	add	r1, sp, #12
    9e9a:	0028      	movs	r0, r5
    9e9c:	4b20      	ldr	r3, [pc, #128]	; (9f20 <PDS_Restore+0xd0>)
    9e9e:	4798      	blx	r3
    9ea0:	2800      	cmp	r0, #0
    9ea2:	d021      	beq.n	9ee8 <PDS_Restore+0x98>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    9ea4:	ab03      	add	r3, sp, #12
    9ea6:	885b      	ldrh	r3, [r3, #2]
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d0dd      	beq.n	9e68 <PDS_Restore+0x18>
    9eac:	9b04      	ldr	r3, [sp, #16]
    9eae:	2b00      	cmp	r3, #0
    9eb0:	d0da      	beq.n	9e68 <PDS_Restore+0x18>
    if (itemDescr.filler)
    9eb2:	9b05      	ldr	r3, [sp, #20]
    9eb4:	2b00      	cmp	r3, #0
    9eb6:	d000      	beq.n	9eba <PDS_Restore+0x6a>
      itemDescr.filler();
    9eb8:	4798      	blx	r3
      oldSize = S_Nv_ItemLength(id);
    9eba:	0028      	movs	r0, r5
    9ebc:	4b19      	ldr	r3, [pc, #100]	; (9f24 <PDS_Restore+0xd4>)
    9ebe:	4798      	blx	r3
    9ec0:	0004      	movs	r4, r0
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    9ec2:	ab03      	add	r3, sp, #12
    9ec4:	9a04      	ldr	r2, [sp, #16]
    9ec6:	8859      	ldrh	r1, [r3, #2]
    9ec8:	0028      	movs	r0, r5
    9eca:	4b17      	ldr	r3, [pc, #92]	; (9f28 <PDS_Restore+0xd8>)
    9ecc:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9ece:	2802      	cmp	r0, #2
    9ed0:	d016      	beq.n	9f00 <PDS_Restore+0xb0>
    9ed2:	2800      	cmp	r0, #0
    9ed4:	d1cf      	bne.n	9e76 <PDS_Restore+0x26>
        if (!pdsUpdateMemory(id, itemDescr.itemData, itemDescr.itemSize, oldSize))
    9ed6:	ab03      	add	r3, sp, #12
    9ed8:	885a      	ldrh	r2, [r3, #2]
    9eda:	9904      	ldr	r1, [sp, #16]
    9edc:	0023      	movs	r3, r4
    9ede:	0028      	movs	r0, r5
    9ee0:	4c12      	ldr	r4, [pc, #72]	; (9f2c <PDS_Restore+0xdc>)
    9ee2:	47a0      	blx	r4
    9ee4:	2800      	cmp	r0, #0
    9ee6:	d1cd      	bne.n	9e84 <PDS_Restore+0x34>
          return false;
    9ee8:	2300      	movs	r3, #0
    9eea:	9301      	str	r3, [sp, #4]
}
    9eec:	9801      	ldr	r0, [sp, #4]
    9eee:	b009      	add	sp, #36	; 0x24
    9ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9ef2:	3601      	adds	r6, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    9ef4:	2e02      	cmp	r6, #2
    9ef6:	d0f9      	beq.n	9eec <PDS_Restore+0x9c>
    9ef8:	00f5      	lsls	r5, r6, #3
    9efa:	b2ad      	uxth	r5, r5
{
    9efc:	2700      	movs	r7, #0
    9efe:	e7c6      	b.n	9e8e <PDS_Restore+0x3e>
          return false;
    9f00:	2300      	movs	r3, #0
    9f02:	9301      	str	r3, [sp, #4]
    9f04:	e7f2      	b.n	9eec <PDS_Restore+0x9c>
    9f06:	46c0      	nop			; (mov r8, r8)
    9f08:	00009da1 	.word	0x00009da1
    9f0c:	000121b8 	.word	0x000121b8
    9f10:	000122b0 	.word	0x000122b0
    9f14:	000121f4 	.word	0x000121f4
    9f18:	000109d5 	.word	0x000109d5
    9f1c:	00012240 	.word	0x00012240
    9f20:	0000a225 	.word	0x0000a225
    9f24:	00009b75 	.word	0x00009b75
    9f28:	00009bc9 	.word	0x00009bc9
    9f2c:	0000a285 	.word	0x0000a285

00009f30 <PDS_Store>:
{
    9f30:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    9f32:	4905      	ldr	r1, [pc, #20]	; (9f48 <PDS_Store+0x18>)
    9f34:	4b05      	ldr	r3, [pc, #20]	; (9f4c <PDS_Store+0x1c>)
    9f36:	4798      	blx	r3
    9f38:	1e04      	subs	r4, r0, #0
    9f3a:	d101      	bne.n	9f40 <PDS_Store+0x10>
}
    9f3c:	0020      	movs	r0, r4
    9f3e:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    9f40:	2000      	movs	r0, #0
    9f42:	4b03      	ldr	r3, [pc, #12]	; (9f50 <PDS_Store+0x20>)
    9f44:	4798      	blx	r3
  return true;
    9f46:	e7f9      	b.n	9f3c <PDS_Store+0xc>
    9f48:	2000035c 	.word	0x2000035c
    9f4c:	00009da1 	.word	0x00009da1
    9f50:	0000a1d1 	.word	0x0000a1d1

00009f54 <PDS_DeleteAll>:
{
    9f54:	b510      	push	{r4, lr}
  if (S_Nv_ReturnValue_Ok == S_Nv_EraseAll(includingPersistentItems))
    9f56:	4b03      	ldr	r3, [pc, #12]	; (9f64 <PDS_DeleteAll+0x10>)
    9f58:	4798      	blx	r3
    9f5a:	4243      	negs	r3, r0
    9f5c:	4158      	adcs	r0, r3
    9f5e:	b2c0      	uxtb	r0, r0
}
    9f60:	bd10      	pop	{r4, pc}
    9f62:	46c0      	nop			; (mov r8, r8)
    9f64:	00009cd9 	.word	0x00009cd9

00009f68 <pdsStoreItemTaskHandler>:
{
    9f68:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f6a:	46de      	mov	lr, fp
    9f6c:	4657      	mov	r7, sl
    9f6e:	464e      	mov	r6, r9
    9f70:	4645      	mov	r5, r8
    9f72:	b5e0      	push	{r5, r6, r7, lr}
    9f74:	b089      	sub	sp, #36	; 0x24
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    9f76:	4b51      	ldr	r3, [pc, #324]	; (a0bc <pdsStoreItemTaskHandler+0x154>)
    9f78:	7818      	ldrb	r0, [r3, #0]
    9f7a:	3001      	adds	r0, #1
    9f7c:	b2c0      	uxtb	r0, r0
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9f7e:	4b50      	ldr	r3, [pc, #320]	; (a0c0 <pdsStoreItemTaskHandler+0x158>)
    9f80:	781b      	ldrb	r3, [r3, #0]
    9f82:	3301      	adds	r3, #1
      bit_index %= 8;
    9f84:	2207      	movs	r2, #7
    9f86:	4013      	ands	r3, r2
    9f88:	4698      	mov	r8, r3
    9f8a:	2301      	movs	r3, #1
    9f8c:	4642      	mov	r2, r8
    9f8e:	4093      	lsls	r3, r2
    9f90:	469a      	mov	sl, r3
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    9f92:	2302      	movs	r3, #2
    9f94:	469c      	mov	ip, r3
    byte_index %= PDS_ITEM_MASK_SIZE;
    9f96:	2401      	movs	r4, #1
      if (itemsToStore[byte_index] & (1U << bit_index))
    9f98:	4b4a      	ldr	r3, [pc, #296]	; (a0c4 <pdsStoreItemTaskHandler+0x15c>)
    9f9a:	469b      	mov	fp, r3
    9f9c:	4643      	mov	r3, r8
    9f9e:	3301      	adds	r3, #1
    9fa0:	9302      	str	r3, [sp, #8]
    9fa2:	2507      	movs	r5, #7
    9fa4:	4667      	mov	r7, ip
    9fa6:	e035      	b.n	a014 <pdsStoreItemTaskHandler+0xac>
    9fa8:	464f      	mov	r7, r9
        itemsToStore[byte_index] &= ~(1U << bit_index);
    9faa:	2201      	movs	r2, #1
    9fac:	9901      	ldr	r1, [sp, #4]
    9fae:	408a      	lsls	r2, r1
    9fb0:	4397      	bics	r7, r2
    9fb2:	4944      	ldr	r1, [pc, #272]	; (a0c4 <pdsStoreItemTaskHandler+0x15c>)
    9fb4:	9c03      	ldr	r4, [sp, #12]
    9fb6:	550f      	strb	r7, [r1, r4]
        i_found = byte_index;
    9fb8:	4a40      	ldr	r2, [pc, #256]	; (a0bc <pdsStoreItemTaskHandler+0x154>)
    9fba:	7010      	strb	r0, [r2, #0]
        j_found = bit_index;
    9fbc:	4a40      	ldr	r2, [pc, #256]	; (a0c0 <pdsStoreItemTaskHandler+0x158>)
    9fbe:	7013      	strb	r3, [r2, #0]
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    9fc0:	00c0      	lsls	r0, r0, #3
    9fc2:	18c4      	adds	r4, r0, r3
    9fc4:	0020      	movs	r0, r4
    9fc6:	4b40      	ldr	r3, [pc, #256]	; (a0c8 <pdsStoreItemTaskHandler+0x160>)
    9fc8:	4798      	blx	r3
    9fca:	2800      	cmp	r0, #0
    9fcc:	d13a      	bne.n	a044 <pdsStoreItemTaskHandler+0xdc>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    9fce:	a904      	add	r1, sp, #16
    9fd0:	0020      	movs	r0, r4
    9fd2:	4b3e      	ldr	r3, [pc, #248]	; (a0cc <pdsStoreItemTaskHandler+0x164>)
    9fd4:	4798      	blx	r3
    9fd6:	2800      	cmp	r0, #0
    9fd8:	d04e      	beq.n	a078 <pdsStoreItemTaskHandler+0x110>
      if (itemDescr.filler)
    9fda:	9b06      	ldr	r3, [sp, #24]
    9fdc:	2b00      	cmp	r3, #0
    9fde:	d000      	beq.n	9fe2 <pdsStoreItemTaskHandler+0x7a>
        itemDescr.filler();
    9fe0:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    9fe2:	9a05      	ldr	r2, [sp, #20]
    9fe4:	ab04      	add	r3, sp, #16
    9fe6:	8859      	ldrh	r1, [r3, #2]
    9fe8:	0020      	movs	r0, r4
    9fea:	4b39      	ldr	r3, [pc, #228]	; (a0d0 <pdsStoreItemTaskHandler+0x168>)
    9fec:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    9fee:	23fd      	movs	r3, #253	; 0xfd
    9ff0:	4218      	tst	r0, r3
    9ff2:	d041      	beq.n	a078 <pdsStoreItemTaskHandler+0x110>
    9ff4:	4b37      	ldr	r3, [pc, #220]	; (a0d4 <pdsStoreItemTaskHandler+0x16c>)
    9ff6:	4a38      	ldr	r2, [pc, #224]	; (a0d8 <pdsStoreItemTaskHandler+0x170>)
    9ff8:	21eb      	movs	r1, #235	; 0xeb
    9ffa:	4838      	ldr	r0, [pc, #224]	; (a0dc <pdsStoreItemTaskHandler+0x174>)
    9ffc:	4c38      	ldr	r4, [pc, #224]	; (a0e0 <pdsStoreItemTaskHandler+0x178>)
    9ffe:	47a0      	blx	r4
    a000:	464f      	mov	r7, r9
      if (itemsToStore[byte_index] & (1U << bit_index))
    a002:	4643      	mov	r3, r8
    a004:	9301      	str	r3, [sp, #4]
    a006:	e7d0      	b.n	9faa <pdsStoreItemTaskHandler+0x42>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    a008:	3001      	adds	r0, #1
    a00a:	b2c0      	uxtb	r0, r0
    a00c:	3f01      	subs	r7, #1
    a00e:	b2ff      	uxtb	r7, r7
    a010:	2f00      	cmp	r7, #0
    a012:	d0d5      	beq.n	9fc0 <pdsStoreItemTaskHandler+0x58>
    byte_index %= PDS_ITEM_MASK_SIZE;
    a014:	4020      	ands	r0, r4
      if (itemsToStore[byte_index] & (1U << bit_index))
    a016:	9003      	str	r0, [sp, #12]
    a018:	465b      	mov	r3, fp
    a01a:	5c1b      	ldrb	r3, [r3, r0]
    a01c:	4699      	mov	r9, r3
    a01e:	001e      	movs	r6, r3
    a020:	4653      	mov	r3, sl
    a022:	4233      	tst	r3, r6
    a024:	d1ec      	bne.n	a000 <pdsStoreItemTaskHandler+0x98>
    a026:	9b02      	ldr	r3, [sp, #8]
    a028:	002a      	movs	r2, r5
      bit_index %= 8;
    a02a:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    a02c:	9301      	str	r3, [sp, #4]
    a02e:	0031      	movs	r1, r6
    a030:	40d9      	lsrs	r1, r3
    a032:	420c      	tst	r4, r1
    a034:	d1b8      	bne.n	9fa8 <pdsStoreItemTaskHandler+0x40>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a036:	3301      	adds	r3, #1
    a038:	b2db      	uxtb	r3, r3
    a03a:	3a01      	subs	r2, #1
    a03c:	b2d2      	uxtb	r2, r2
    a03e:	2a00      	cmp	r2, #0
    a040:	d1f3      	bne.n	a02a <pdsStoreItemTaskHandler+0xc2>
    a042:	e7e1      	b.n	a008 <pdsStoreItemTaskHandler+0xa0>
  if (pdsGetItemDescr(id, &itemDescr))
    a044:	a904      	add	r1, sp, #16
    a046:	0020      	movs	r0, r4
    a048:	4b20      	ldr	r3, [pc, #128]	; (a0cc <pdsStoreItemTaskHandler+0x164>)
    a04a:	4798      	blx	r3
    a04c:	2800      	cmp	r0, #0
    a04e:	d013      	beq.n	a078 <pdsStoreItemTaskHandler+0x110>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a050:	ab04      	add	r3, sp, #16
    a052:	885b      	ldrh	r3, [r3, #2]
    a054:	2b00      	cmp	r3, #0
    a056:	d01e      	beq.n	a096 <pdsStoreItemTaskHandler+0x12e>
    a058:	9b05      	ldr	r3, [sp, #20]
    a05a:	2b00      	cmp	r3, #0
    a05c:	d01b      	beq.n	a096 <pdsStoreItemTaskHandler+0x12e>
    if (itemDescr.filler)
    a05e:	9b06      	ldr	r3, [sp, #24]
    a060:	2b00      	cmp	r3, #0
    a062:	d000      	beq.n	a066 <pdsStoreItemTaskHandler+0xfe>
      itemDescr.filler();
    a064:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    a066:	9b05      	ldr	r3, [sp, #20]
    a068:	aa04      	add	r2, sp, #16
    a06a:	8852      	ldrh	r2, [r2, #2]
    a06c:	2100      	movs	r1, #0
    a06e:	0020      	movs	r0, r4
    a070:	4c1c      	ldr	r4, [pc, #112]	; (a0e4 <pdsStoreItemTaskHandler+0x17c>)
    a072:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    a074:	2800      	cmp	r0, #0
    a076:	d115      	bne.n	a0a4 <pdsStoreItemTaskHandler+0x13c>
    if (itemsToStore[i])
    a078:	4b12      	ldr	r3, [pc, #72]	; (a0c4 <pdsStoreItemTaskHandler+0x15c>)
    a07a:	781b      	ldrb	r3, [r3, #0]
    a07c:	2b00      	cmp	r3, #0
    a07e:	d118      	bne.n	a0b2 <pdsStoreItemTaskHandler+0x14a>
    a080:	4b10      	ldr	r3, [pc, #64]	; (a0c4 <pdsStoreItemTaskHandler+0x15c>)
    a082:	785b      	ldrb	r3, [r3, #1]
    a084:	2b00      	cmp	r3, #0
    a086:	d114      	bne.n	a0b2 <pdsStoreItemTaskHandler+0x14a>
}
    a088:	b009      	add	sp, #36	; 0x24
    a08a:	bc3c      	pop	{r2, r3, r4, r5}
    a08c:	4690      	mov	r8, r2
    a08e:	4699      	mov	r9, r3
    a090:	46a2      	mov	sl, r4
    a092:	46ab      	mov	fp, r5
    a094:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a096:	4b14      	ldr	r3, [pc, #80]	; (a0e8 <pdsStoreItemTaskHandler+0x180>)
    a098:	4a14      	ldr	r2, [pc, #80]	; (a0ec <pdsStoreItemTaskHandler+0x184>)
    a09a:	219a      	movs	r1, #154	; 0x9a
    a09c:	0049      	lsls	r1, r1, #1
    a09e:	480f      	ldr	r0, [pc, #60]	; (a0dc <pdsStoreItemTaskHandler+0x174>)
    a0a0:	4c0f      	ldr	r4, [pc, #60]	; (a0e0 <pdsStoreItemTaskHandler+0x178>)
    a0a2:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    a0a4:	4b12      	ldr	r3, [pc, #72]	; (a0f0 <pdsStoreItemTaskHandler+0x188>)
    a0a6:	4a11      	ldr	r2, [pc, #68]	; (a0ec <pdsStoreItemTaskHandler+0x184>)
    a0a8:	21a1      	movs	r1, #161	; 0xa1
    a0aa:	0049      	lsls	r1, r1, #1
    a0ac:	480b      	ldr	r0, [pc, #44]	; (a0dc <pdsStoreItemTaskHandler+0x174>)
    a0ae:	4c0c      	ldr	r4, [pc, #48]	; (a0e0 <pdsStoreItemTaskHandler+0x178>)
    a0b0:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    a0b2:	2000      	movs	r0, #0
    a0b4:	4b0f      	ldr	r3, [pc, #60]	; (a0f4 <pdsStoreItemTaskHandler+0x18c>)
    a0b6:	4798      	blx	r3
}
    a0b8:	e7e6      	b.n	a088 <pdsStoreItemTaskHandler+0x120>
    a0ba:	46c0      	nop			; (mov r8, r8)
    a0bc:	20000358 	.word	0x20000358
    a0c0:	2000035e 	.word	0x2000035e
    a0c4:	2000035c 	.word	0x2000035c
    a0c8:	00009d8d 	.word	0x00009d8d
    a0cc:	0000a225 	.word	0x0000a225
    a0d0:	00009bc9 	.word	0x00009bc9
    a0d4:	00012240 	.word	0x00012240
    a0d8:	00012288 	.word	0x00012288
    a0dc:	000121f4 	.word	0x000121f4
    a0e0:	000109d5 	.word	0x000109d5
    a0e4:	000099c5 	.word	0x000099c5
    a0e8:	000121b8 	.word	0x000121b8
    a0ec:	000122a0 	.word	0x000122a0
    a0f0:	000122c0 	.word	0x000122c0
    a0f4:	0000a1d1 	.word	0x0000a1d1

0000a0f8 <PDS_IsAbleToRestore>:
{
    a0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0fa:	b085      	sub	sp, #20
  uint8_t itemsToBeAbleRestore[PDS_ITEM_MASK_SIZE] = {0U};
    a0fc:	a903      	add	r1, sp, #12
    a0fe:	2300      	movs	r3, #0
    a100:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToBeAbleRestore))
    a102:	4b11      	ldr	r3, [pc, #68]	; (a148 <PDS_IsAbleToRestore+0x50>)
    a104:	4798      	blx	r3
    a106:	9001      	str	r0, [sp, #4]
    a108:	2700      	movs	r7, #0
    a10a:	2800      	cmp	r0, #0
    a10c:	d116      	bne.n	a13c <PDS_IsAbleToRestore+0x44>
}
    a10e:	9801      	ldr	r0, [sp, #4]
    a110:	b005      	add	sp, #20
    a112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a114:	3501      	adds	r5, #1
    a116:	3401      	adds	r4, #1
    a118:	b2a4      	uxth	r4, r4
    for (j = 0U; j < 8U; j++)
    a11a:	2d08      	cmp	r5, #8
    a11c:	d00b      	beq.n	a136 <PDS_IsAbleToRestore+0x3e>
      if (itemsToBeAbleRestore[i] & (1U << j))
    a11e:	ab03      	add	r3, sp, #12
    a120:	5ddb      	ldrb	r3, [r3, r7]
    a122:	40eb      	lsrs	r3, r5
    a124:	421e      	tst	r6, r3
    a126:	d0f5      	beq.n	a114 <PDS_IsAbleToRestore+0x1c>
      if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)i << 3U) + j))
    a128:	0020      	movs	r0, r4
    a12a:	4b08      	ldr	r3, [pc, #32]	; (a14c <PDS_IsAbleToRestore+0x54>)
    a12c:	4798      	blx	r3
    a12e:	2800      	cmp	r0, #0
    a130:	d1f0      	bne.n	a114 <PDS_IsAbleToRestore+0x1c>
          return false;
    a132:	9001      	str	r0, [sp, #4]
    a134:	e7eb      	b.n	a10e <PDS_IsAbleToRestore+0x16>
    a136:	3701      	adds	r7, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    a138:	2f02      	cmp	r7, #2
    a13a:	d0e8      	beq.n	a10e <PDS_IsAbleToRestore+0x16>
    a13c:	00fc      	lsls	r4, r7, #3
    a13e:	b2a4      	uxth	r4, r4
{
    a140:	2500      	movs	r5, #0
      if (itemsToBeAbleRestore[i] & (1U << j))
    a142:	2601      	movs	r6, #1
    a144:	e7eb      	b.n	a11e <PDS_IsAbleToRestore+0x26>
    a146:	46c0      	nop			; (mov r8, r8)
    a148:	00009da1 	.word	0x00009da1
    a14c:	00009d8d 	.word	0x00009d8d

0000a150 <PDS_Init>:
\brief Persistent Data Server initialization routine.
******************************************************************************/


void PDS_Init (void)
{
    a150:	b510      	push	{r4, lr}
  D_Nv_Init();
    a152:	4b02      	ldr	r3, [pc, #8]	; (a15c <PDS_Init+0xc>)
    a154:	4798      	blx	r3
  S_Nv_Init();
    a156:	4b02      	ldr	r3, [pc, #8]	; (a160 <PDS_Init+0x10>)
    a158:	4798      	blx	r3
}
    a15a:	bd10      	pop	{r4, pc}
    a15c:	0000883d 	.word	0x0000883d
    a160:	0000998d 	.word	0x0000998d

0000a164 <PDS_InitItems>:

/******************************************************************************
\brief PDS item initialization routine
******************************************************************************/
void PDS_InitItems(void)
{
    a164:	b570      	push	{r4, r5, r6, lr}
    a166:	b084      	sub	sp, #16
  S_Nv_ReturnValue_t ret;
  ItemIdToMemoryMapping_t itemDesc;

  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a168:	2401      	movs	r4, #1
  {
    if (pdsGetItemDescr(i, &itemDesc))
    a16a:	4e12      	ldr	r6, [pc, #72]	; (a1b4 <PDS_InitItems+0x50>)
        pdsSecureItemInit(i,itemDesc.itemSize);
      }
      else
#endif
      {
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a16c:	4d12      	ldr	r5, [pc, #72]	; (a1b8 <PDS_InitItems+0x54>)
    a16e:	e009      	b.n	a184 <PDS_InitItems+0x20>
      assert(itemDesc.itemSize);
    a170:	4b12      	ldr	r3, [pc, #72]	; (a1bc <PDS_InitItems+0x58>)
    a172:	4a13      	ldr	r2, [pc, #76]	; (a1c0 <PDS_InitItems+0x5c>)
    a174:	3150      	adds	r1, #80	; 0x50
    a176:	4813      	ldr	r0, [pc, #76]	; (a1c4 <PDS_InitItems+0x60>)
    a178:	4c13      	ldr	r4, [pc, #76]	; (a1c8 <PDS_InitItems+0x64>)
    a17a:	47a0      	blx	r4
  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a17c:	3401      	adds	r4, #1
    a17e:	b2a4      	uxth	r4, r4
    a180:	2c0a      	cmp	r4, #10
    a182:	d014      	beq.n	a1ae <PDS_InitItems+0x4a>
    if (pdsGetItemDescr(i, &itemDesc))
    a184:	4669      	mov	r1, sp
    a186:	0020      	movs	r0, r4
    a188:	47b0      	blx	r6
    a18a:	2800      	cmp	r0, #0
    a18c:	d0f6      	beq.n	a17c <PDS_InitItems+0x18>
      assert(itemDesc.itemSize);
    a18e:	466b      	mov	r3, sp
    a190:	8859      	ldrh	r1, [r3, #2]
    a192:	2900      	cmp	r1, #0
    a194:	d0ec      	beq.n	a170 <PDS_InitItems+0xc>
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a196:	2200      	movs	r2, #0
    a198:	0020      	movs	r0, r4
    a19a:	47a8      	blx	r5
        assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a19c:	23fd      	movs	r3, #253	; 0xfd
    a19e:	4218      	tst	r0, r3
    a1a0:	d0ec      	beq.n	a17c <PDS_InitItems+0x18>
    a1a2:	4b0a      	ldr	r3, [pc, #40]	; (a1cc <PDS_InitItems+0x68>)
    a1a4:	4a06      	ldr	r2, [pc, #24]	; (a1c0 <PDS_InitItems+0x5c>)
    a1a6:	215b      	movs	r1, #91	; 0x5b
    a1a8:	4806      	ldr	r0, [pc, #24]	; (a1c4 <PDS_InitItems+0x60>)
    a1aa:	4c07      	ldr	r4, [pc, #28]	; (a1c8 <PDS_InitItems+0x64>)
    a1ac:	47a0      	blx	r4
      }
    }
  }
}
    a1ae:	b004      	add	sp, #16
    a1b0:	bd70      	pop	{r4, r5, r6, pc}
    a1b2:	46c0      	nop			; (mov r8, r8)
    a1b4:	0000a225 	.word	0x0000a225
    a1b8:	00009bc9 	.word	0x00009bc9
    a1bc:	000122dc 	.word	0x000122dc
    a1c0:	00012334 	.word	0x00012334
    a1c4:	000122f0 	.word	0x000122f0
    a1c8:	000109d5 	.word	0x000109d5
    a1cc:	00012240 	.word	0x00012240

0000a1d0 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    a1d0:	4a03      	ldr	r2, [pc, #12]	; (a1e0 <pdsPostTask+0x10>)
    a1d2:	2301      	movs	r3, #1
    a1d4:	4083      	lsls	r3, r0
    a1d6:	7811      	ldrb	r1, [r2, #0]
    a1d8:	430b      	orrs	r3, r1
    a1da:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    a1dc:	4770      	bx	lr
    a1de:	46c0      	nop			; (mov r8, r8)
    a1e0:	2000035f 	.word	0x2000035f

0000a1e4 <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    a1e4:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    a1e6:	4b0d      	ldr	r3, [pc, #52]	; (a21c <PDS_TaskHandler+0x38>)
    a1e8:	781d      	ldrb	r5, [r3, #0]
    a1ea:	2d00      	cmp	r5, #0
    a1ec:	d012      	beq.n	a214 <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    a1ee:	0028      	movs	r0, r5
    a1f0:	07eb      	lsls	r3, r5, #31
    a1f2:	d410      	bmi.n	a216 <PDS_TaskHandler+0x32>
    a1f4:	2300      	movs	r3, #0
    a1f6:	2401      	movs	r4, #1
      taskId++;
    a1f8:	3301      	adds	r3, #1
    a1fa:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    a1fc:	0019      	movs	r1, r3
    a1fe:	0002      	movs	r2, r0
    a200:	40da      	lsrs	r2, r3
    a202:	4214      	tst	r4, r2
    a204:	d0f8      	beq.n	a1f8 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    a206:	2301      	movs	r3, #1
    a208:	408b      	lsls	r3, r1
    a20a:	405d      	eors	r5, r3
    a20c:	4b03      	ldr	r3, [pc, #12]	; (a21c <PDS_TaskHandler+0x38>)
    a20e:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    a210:	4b03      	ldr	r3, [pc, #12]	; (a220 <PDS_TaskHandler+0x3c>)
    a212:	4798      	blx	r3
   
  }
}
    a214:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    a216:	2100      	movs	r1, #0
    a218:	e7f5      	b.n	a206 <PDS_TaskHandler+0x22>
    a21a:	46c0      	nop			; (mov r8, r8)
    a21c:	2000035f 	.word	0x2000035f
    a220:	00009f69 	.word	0x00009f69

0000a224 <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    a224:	b5f0      	push	{r4, r5, r6, r7, lr}
    a226:	b087      	sub	sp, #28
    a228:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a22a:	aa02      	add	r2, sp, #8
    a22c:	4b11      	ldr	r3, [pc, #68]	; (a274 <pdsGetItemDescr+0x50>)
    a22e:	0011      	movs	r1, r2
    a230:	cb70      	ldmia	r3!, {r4, r5, r6}
    a232:	c170      	stmia	r1!, {r4, r5, r6}
    a234:	681b      	ldr	r3, [r3, #0]
    a236:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    a238:	8813      	ldrh	r3, [r2, #0]
    a23a:	4283      	cmp	r3, r0
    a23c:	d012      	beq.n	a264 <pdsGetItemDescr+0x40>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    a23e:	4b0e      	ldr	r3, [pc, #56]	; (a278 <pdsGetItemDescr+0x54>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a240:	aa02      	add	r2, sp, #8
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a242:	490e      	ldr	r1, [pc, #56]	; (a27c <pdsGetItemDescr+0x58>)
    a244:	468c      	mov	ip, r1
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a246:	0011      	movs	r1, r2
    a248:	001c      	movs	r4, r3
    a24a:	cce0      	ldmia	r4!, {r5, r6, r7}
    a24c:	c1e0      	stmia	r1!, {r5, r6, r7}
    a24e:	6824      	ldr	r4, [r4, #0]
    a250:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    a252:	8811      	ldrh	r1, [r2, #0]
    a254:	4281      	cmp	r1, r0
    a256:	d005      	beq.n	a264 <pdsGetItemDescr+0x40>
    itemDescrPtr++;
    a258:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a25a:	4563      	cmp	r3, ip
    a25c:	d1f3      	bne.n	a246 <pdsGetItemDescr+0x22>

  }
  return false;
    a25e:	2000      	movs	r0, #0
}
    a260:	b007      	add	sp, #28
    a262:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    a264:	2210      	movs	r2, #16
    a266:	a902      	add	r1, sp, #8
    a268:	9801      	ldr	r0, [sp, #4]
    a26a:	4b05      	ldr	r3, [pc, #20]	; (a280 <pdsGetItemDescr+0x5c>)
    a26c:	4798      	blx	r3
      return true;
    a26e:	2001      	movs	r0, #1
    a270:	e7f6      	b.n	a260 <pdsGetItemDescr+0x3c>
    a272:	46c0      	nop			; (mov r8, r8)
    a274:	00006100 	.word	0x00006100
    a278:	00006110 	.word	0x00006110
    a27c:	000061a0 	.word	0x000061a0
    a280:	00010a97 	.word	0x00010a97

0000a284 <pdsUpdateMemory>:
{
    a284:	b510      	push	{r4, lr}
    a286:	b084      	sub	sp, #16
  if (size == oldSize)
    a288:	429a      	cmp	r2, r3
    a28a:	d008      	beq.n	a29e <pdsUpdateMemory+0x1a>
  if (pdsGetItemDescr(id, &mapItem))
    a28c:	4669      	mov	r1, sp
    a28e:	4b09      	ldr	r3, [pc, #36]	; (a2b4 <pdsUpdateMemory+0x30>)
    a290:	4798      	blx	r3
    a292:	2800      	cmp	r0, #0
    a294:	d003      	beq.n	a29e <pdsUpdateMemory+0x1a>
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a296:	466b      	mov	r3, sp
    a298:	7b1b      	ldrb	r3, [r3, #12]
    a29a:	07db      	lsls	r3, r3, #31
    a29c:	d502      	bpl.n	a2a4 <pdsUpdateMemory+0x20>
}
    a29e:	2001      	movs	r0, #1
    a2a0:	b004      	add	sp, #16
    a2a2:	bd10      	pop	{r4, pc}
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a2a4:	4b04      	ldr	r3, [pc, #16]	; (a2b8 <pdsUpdateMemory+0x34>)
    a2a6:	4a05      	ldr	r2, [pc, #20]	; (a2bc <pdsUpdateMemory+0x38>)
    a2a8:	21bc      	movs	r1, #188	; 0xbc
    a2aa:	31ff      	adds	r1, #255	; 0xff
    a2ac:	4804      	ldr	r0, [pc, #16]	; (a2c0 <pdsUpdateMemory+0x3c>)
    a2ae:	4c05      	ldr	r4, [pc, #20]	; (a2c4 <pdsUpdateMemory+0x40>)
    a2b0:	47a0      	blx	r4
    a2b2:	46c0      	nop			; (mov r8, r8)
    a2b4:	0000a225 	.word	0x0000a225
    a2b8:	00012354 	.word	0x00012354
    a2bc:	00012344 	.word	0x00012344
    a2c0:	00012380 	.word	0x00012380
    a2c4:	000109d5 	.word	0x000109d5

0000a2c8 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    a2c8:	b570      	push	{r4, r5, r6, lr}
    a2ca:	b082      	sub	sp, #8
    a2cc:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    a2ce:	466b      	mov	r3, sp
    a2d0:	4a08      	ldr	r2, [pc, #32]	; (a2f4 <pdsGetDirDescr+0x2c>)
    a2d2:	4669      	mov	r1, sp
    a2d4:	ca60      	ldmia	r2!, {r5, r6}
    a2d6:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    a2d8:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    a2da:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    a2dc:	4282      	cmp	r2, r0
    a2de:	d002      	beq.n	a2e6 <pdsGetDirDescr+0x1e>
}
    a2e0:	0018      	movs	r0, r3
    a2e2:	b002      	add	sp, #8
    a2e4:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    a2e6:	2208      	movs	r2, #8
    a2e8:	4669      	mov	r1, sp
    a2ea:	0020      	movs	r0, r4
    a2ec:	4b02      	ldr	r3, [pc, #8]	; (a2f8 <pdsGetDirDescr+0x30>)
    a2ee:	4798      	blx	r3
      return true;
    a2f0:	2301      	movs	r3, #1
    a2f2:	e7f5      	b.n	a2e0 <pdsGetDirDescr+0x18>
    a2f4:	00006190 	.word	0x00006190
    a2f8:	00010a97 	.word	0x00010a97

0000a2fc <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    a2fc:	4b02      	ldr	r3, [pc, #8]	; (a308 <PHY_DataConf+0xc>)
    a2fe:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    a300:	2201      	movs	r2, #1
    a302:	4b02      	ldr	r3, [pc, #8]	; (a30c <PHY_DataConf+0x10>)
    a304:	701a      	strb	r2, [r3, #0]
}
    a306:	4770      	bx	lr
    a308:	20001e30 	.word	0x20001e30
    a30c:	20000360 	.word	0x20000360

0000a310 <MiMAC_SetAltAddress>:
{
    a310:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    a312:	7802      	ldrb	r2, [r0, #0]
    a314:	4b08      	ldr	r3, [pc, #32]	; (a338 <MiMAC_SetAltAddress+0x28>)
    a316:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    a318:	7842      	ldrb	r2, [r0, #1]
    a31a:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    a31c:	780a      	ldrb	r2, [r1, #0]
    a31e:	4c07      	ldr	r4, [pc, #28]	; (a33c <MiMAC_SetAltAddress+0x2c>)
    a320:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    a322:	784a      	ldrb	r2, [r1, #1]
    a324:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    a326:	8818      	ldrh	r0, [r3, #0]
    a328:	4b05      	ldr	r3, [pc, #20]	; (a340 <MiMAC_SetAltAddress+0x30>)
    a32a:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    a32c:	8820      	ldrh	r0, [r4, #0]
    a32e:	4b05      	ldr	r3, [pc, #20]	; (a344 <MiMAC_SetAltAddress+0x34>)
    a330:	4798      	blx	r3
}
    a332:	2001      	movs	r0, #1
    a334:	bd10      	pop	{r4, pc}
    a336:	46c0      	nop			; (mov r8, r8)
    a338:	20001df0 	.word	0x20001df0
    a33c:	20001e4c 	.word	0x20001e4c
    a340:	0000b32d 	.word	0x0000b32d
    a344:	0000b30d 	.word	0x0000b30d

0000a348 <mic_generator>:
{
    a348:	b5f0      	push	{r4, r5, r6, r7, lr}
    a34a:	46c6      	mov	lr, r8
    a34c:	b500      	push	{lr}
    a34e:	b0a6      	sub	sp, #152	; 0x98
    a350:	0006      	movs	r6, r0
    a352:	000c      	movs	r4, r1
    a354:	469c      	mov	ip, r3
    a356:	992c      	ldr	r1, [sp, #176]	; 0xb0
	iterations = len/16;
    a358:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    a35a:	0723      	lsls	r3, r4, #28
    a35c:	d000      	beq.n	a360 <mic_generator+0x18>
    a35e:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    a360:	2049      	movs	r0, #73	; 0x49
    a362:	4b41      	ldr	r3, [pc, #260]	; (a468 <mic_generator+0x120>)
    a364:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    a366:	2300      	movs	r3, #0
    a368:	a802      	add	r0, sp, #8
    a36a:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    a36c:	330d      	adds	r3, #13
    a36e:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    a370:	7082      	strb	r2, [r0, #2]
    a372:	2200      	movs	r2, #0
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    a374:	4b3c      	ldr	r3, [pc, #240]	; (a468 <mic_generator+0x120>)
    a376:	5c8f      	ldrb	r7, [r1, r2]
    a378:	18d0      	adds	r0, r2, r3
    a37a:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    a37c:	0010      	movs	r0, r2
    a37e:	af02      	add	r7, sp, #8
    a380:	46b8      	mov	r8, r7
    a382:	4440      	add	r0, r8
    a384:	5c8f      	ldrb	r7, [r1, r2]
    a386:	71c7      	strb	r7, [r0, #7]
    a388:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    a38a:	2a08      	cmp	r2, #8
    a38c:	d1f3      	bne.n	a376 <mic_generator+0x2e>
		InitVect_in[i+9] = FrameCounter.v[i];
    a38e:	4663      	mov	r3, ip
    a390:	466a      	mov	r2, sp
    a392:	71d3      	strb	r3, [r2, #7]
    a394:	79d3      	ldrb	r3, [r2, #7]
    a396:	4834      	ldr	r0, [pc, #208]	; (a468 <mic_generator+0x120>)
    a398:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a39a:	4642      	mov	r2, r8
    a39c:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    a39e:	4663      	mov	r3, ip
    a3a0:	041b      	lsls	r3, r3, #16
    a3a2:	0e1b      	lsrs	r3, r3, #24
    a3a4:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a3a6:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    a3a8:	4663      	mov	r3, ip
    a3aa:	021b      	lsls	r3, r3, #8
    a3ac:	0e1b      	lsrs	r3, r3, #24
    a3ae:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a3b0:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    a3b2:	4663      	mov	r3, ip
    a3b4:	0e1b      	lsrs	r3, r3, #24
    a3b6:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    a3b8:	7193      	strb	r3, [r2, #6]
	cbc_header_with_padding[15] = 0x00;   // Padding
    a3ba:	2300      	movs	r3, #0
    a3bc:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    a3be:	2204      	movs	r2, #4
    a3c0:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    a3c2:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    a3c4:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    a3c6:	4929      	ldr	r1, [pc, #164]	; (a46c <mic_generator+0x124>)
    a3c8:	4b29      	ldr	r3, [pc, #164]	; (a470 <mic_generator+0x128>)
    a3ca:	4798      	blx	r3
    a3cc:	2300      	movs	r3, #0
		copy_packet1[i] = cbc_header_with_padding[i];
    a3ce:	a906      	add	r1, sp, #24
    a3d0:	aa02      	add	r2, sp, #8
    a3d2:	5c9a      	ldrb	r2, [r3, r2]
    a3d4:	545a      	strb	r2, [r3, r1]
    a3d6:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    a3d8:	2b10      	cmp	r3, #16
    a3da:	d1f9      	bne.n	a3d0 <mic_generator+0x88>
	for (i=16;i<len+16;i++)
    a3dc:	0027      	movs	r7, r4
    a3de:	3710      	adds	r7, #16
    a3e0:	2f10      	cmp	r7, #16
    a3e2:	dd0a      	ble.n	a3fa <mic_generator+0xb2>
    a3e4:	2010      	movs	r0, #16
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    a3e6:	a906      	add	r1, sp, #24
    a3e8:	18f2      	adds	r2, r6, r3
    a3ea:	3a10      	subs	r2, #16
    a3ec:	7812      	ldrb	r2, [r2, #0]
    a3ee:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    a3f0:	3301      	adds	r3, #1
    a3f2:	b2db      	uxtb	r3, r3
    a3f4:	0018      	movs	r0, r3
    a3f6:	42bb      	cmp	r3, r7
    a3f8:	dbf6      	blt.n	a3e8 <mic_generator+0xa0>
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    a3fa:	0023      	movs	r3, r4
    a3fc:	3310      	adds	r3, #16
    a3fe:	b2db      	uxtb	r3, r3
    a400:	001a      	movs	r2, r3
    a402:	3501      	adds	r5, #1
    a404:	0129      	lsls	r1, r5, #4
    a406:	428b      	cmp	r3, r1
    a408:	da07      	bge.n	a41a <mic_generator+0xd2>
		copy_packet1[i] = 0; // Padding
    a40a:	ac06      	add	r4, sp, #24
    a40c:	2000      	movs	r0, #0
    a40e:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    a410:	3301      	adds	r3, #1
    a412:	b2db      	uxtb	r3, r3
    a414:	001a      	movs	r2, r3
    a416:	428b      	cmp	r3, r1
    a418:	dbf9      	blt.n	a40e <mic_generator+0xc6>
	for (i=0;i<iterations+1;i++)
    a41a:	2200      	movs	r2, #0
    a41c:	2700      	movs	r7, #0
    a41e:	2d00      	cmp	r5, #0
    a420:	dd15      	ble.n	a44e <mic_generator+0x106>
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    a422:	4e11      	ldr	r6, [pc, #68]	; (a468 <mic_generator+0x120>)
    a424:	0112      	lsls	r2, r2, #4
    a426:	2300      	movs	r3, #0
    a428:	a906      	add	r1, sp, #24
    a42a:	188c      	adds	r4, r1, r2
    a42c:	1999      	adds	r1, r3, r6
    a42e:	5ce2      	ldrb	r2, [r4, r3]
    a430:	7808      	ldrb	r0, [r1, #0]
    a432:	4042      	eors	r2, r0
    a434:	700a      	strb	r2, [r1, #0]
    a436:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a438:	2b10      	cmp	r3, #16
    a43a:	d1f7      	bne.n	a42c <mic_generator+0xe4>
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    a43c:	490b      	ldr	r1, [pc, #44]	; (a46c <mic_generator+0x124>)
    a43e:	480a      	ldr	r0, [pc, #40]	; (a468 <mic_generator+0x120>)
    a440:	4b0b      	ldr	r3, [pc, #44]	; (a470 <mic_generator+0x128>)
    a442:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    a444:	3701      	adds	r7, #1
    a446:	b2ff      	uxtb	r7, r7
    a448:	003a      	movs	r2, r7
    a44a:	42af      	cmp	r7, r5
    a44c:	dbea      	blt.n	a424 <mic_generator+0xdc>
    a44e:	2300      	movs	r3, #0
		CBC_mic[i] = InitVect_in[i];
    a450:	4808      	ldr	r0, [pc, #32]	; (a474 <mic_generator+0x12c>)
    a452:	4905      	ldr	r1, [pc, #20]	; (a468 <mic_generator+0x120>)
    a454:	5cca      	ldrb	r2, [r1, r3]
    a456:	54c2      	strb	r2, [r0, r3]
    a458:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    a45a:	2b10      	cmp	r3, #16
    a45c:	d1fa      	bne.n	a454 <mic_generator+0x10c>
}
    a45e:	b026      	add	sp, #152	; 0x98
    a460:	bc04      	pop	{r2}
    a462:	4690      	mov	r8, r2
    a464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a466:	46c0      	nop			; (mov r8, r8)
    a468:	20001e00 	.word	0x20001e00
    a46c:	000123d0 	.word	0x000123d0
    a470:	0000b425 	.word	0x0000b425
    a474:	20001e38 	.word	0x20001e38

0000a478 <DataEncrypt>:
{
    a478:	b5f0      	push	{r4, r5, r6, r7, lr}
    a47a:	46de      	mov	lr, fp
    a47c:	4657      	mov	r7, sl
    a47e:	464e      	mov	r6, r9
    a480:	4645      	mov	r5, r8
    a482:	b5e0      	push	{r5, r6, r7, lr}
    a484:	b0a1      	sub	sp, #132	; 0x84
    a486:	9003      	str	r0, [sp, #12]
    a488:	468a      	mov	sl, r1
    a48a:	0014      	movs	r4, r2
    a48c:	001d      	movs	r5, r3
	iterations = *Payload_len/16;
    a48e:	780f      	ldrb	r7, [r1, #0]
    a490:	093e      	lsrs	r6, r7, #4
	if (*Payload_len % 16 != 0) iterations++;
    a492:	073b      	lsls	r3, r7, #28
    a494:	d000      	beq.n	a498 <DataEncrypt+0x20>
    a496:	3601      	adds	r6, #1
	memcpy(CipheringData, Payloadinfo, *Payload_len);
    a498:	003a      	movs	r2, r7
    a49a:	9903      	ldr	r1, [sp, #12]
    a49c:	a804      	add	r0, sp, #16
    a49e:	4b3e      	ldr	r3, [pc, #248]	; (a598 <DataEncrypt+0x120>)
    a4a0:	4798      	blx	r3
	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    a4a2:	4b3e      	ldr	r3, [pc, #248]	; (a59c <DataEncrypt+0x124>)
    a4a4:	685b      	ldr	r3, [r3, #4]
    a4a6:	9300      	str	r3, [sp, #0]
    a4a8:	0023      	movs	r3, r4
    a4aa:	002a      	movs	r2, r5
    a4ac:	0039      	movs	r1, r7
    a4ae:	9803      	ldr	r0, [sp, #12]
    a4b0:	4d3b      	ldr	r5, [pc, #236]	; (a5a0 <DataEncrypt+0x128>)
    a4b2:	47a8      	blx	r5
	for (i=*Payload_len;i<iterations *16 ; i++ )
    a4b4:	4653      	mov	r3, sl
    a4b6:	781b      	ldrb	r3, [r3, #0]
    a4b8:	001a      	movs	r2, r3
    a4ba:	0035      	movs	r5, r6
    a4bc:	0131      	lsls	r1, r6, #4
    a4be:	428b      	cmp	r3, r1
    a4c0:	da07      	bge.n	a4d2 <DataEncrypt+0x5a>
		CipheringData[i] = 0; // Padding
    a4c2:	a804      	add	r0, sp, #16
    a4c4:	2600      	movs	r6, #0
    a4c6:	5486      	strb	r6, [r0, r2]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    a4c8:	3301      	adds	r3, #1
    a4ca:	b2db      	uxtb	r3, r3
    a4cc:	001a      	movs	r2, r3
    a4ce:	428b      	cmp	r3, r1
    a4d0:	dbf9      	blt.n	a4c6 <DataEncrypt+0x4e>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    a4d2:	2201      	movs	r2, #1
    a4d4:	ab18      	add	r3, sp, #96	; 0x60
    a4d6:	701a      	strb	r2, [r3, #0]
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    a4d8:	4b30      	ldr	r3, [pc, #192]	; (a59c <DataEncrypt+0x124>)
    a4da:	6858      	ldr	r0, [r3, #4]
    a4dc:	2300      	movs	r3, #0
    a4de:	aa18      	add	r2, sp, #96	; 0x60
    a4e0:	18d2      	adds	r2, r2, r3
    a4e2:	5cc1      	ldrb	r1, [r0, r3]
    a4e4:	7051      	strb	r1, [r2, #1]
    a4e6:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    a4e8:	2b08      	cmp	r3, #8
    a4ea:	d1f8      	bne.n	a4de <DataEncrypt+0x66>
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    a4ec:	ab18      	add	r3, sp, #96	; 0x60
    a4ee:	725c      	strb	r4, [r3, #9]
    a4f0:	0a22      	lsrs	r2, r4, #8
    a4f2:	729a      	strb	r2, [r3, #10]
    a4f4:	0c22      	lsrs	r2, r4, #16
    a4f6:	72da      	strb	r2, [r3, #11]
    a4f8:	0e24      	lsrs	r4, r4, #24
    a4fa:	731c      	strb	r4, [r3, #12]
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    a4fc:	2204      	movs	r2, #4
    a4fe:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    a500:	2200      	movs	r2, #0
    a502:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    a504:	73da      	strb	r2, [r3, #15]
	for (i=0;i<iterations+1;i++)
    a506:	1c6b      	adds	r3, r5, #1
    a508:	4698      	mov	r8, r3
    a50a:	2300      	movs	r3, #0
    a50c:	469b      	mov	fp, r3
    a50e:	9302      	str	r3, [sp, #8]
    a510:	4643      	mov	r3, r8
    a512:	2b00      	cmp	r3, #0
    a514:	dd31      	ble.n	a57a <DataEncrypt+0x102>
			block[j] = CTR_Nonce_and_Counter[j];
    a516:	ac1c      	add	r4, sp, #112	; 0x70
    a518:	ad18      	add	r5, sp, #96	; 0x60
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    a51a:	4b22      	ldr	r3, [pc, #136]	; (a5a4 <DataEncrypt+0x12c>)
    a51c:	4699      	mov	r9, r3
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a51e:	4e22      	ldr	r6, [pc, #136]	; (a5a8 <DataEncrypt+0x130>)
    a520:	e017      	b.n	a552 <DataEncrypt+0xda>
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    a522:	5d1a      	ldrb	r2, [r3, r4]
    a524:	5cc7      	ldrb	r7, [r0, r3]
    a526:	407a      	eors	r2, r7
    a528:	54c2      	strb	r2, [r0, r3]
    a52a:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a52c:	2b10      	cmp	r3, #16
    a52e:	d007      	beq.n	a540 <DataEncrypt+0xc8>
			if (CTR_Nonce_and_Counter[15] == 0)
    a530:	2900      	cmp	r1, #0
    a532:	d1f6      	bne.n	a522 <DataEncrypt+0xaa>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a534:	5d1a      	ldrb	r2, [r3, r4]
    a536:	4667      	mov	r7, ip
    a538:	5cff      	ldrb	r7, [r7, r3]
    a53a:	407a      	eors	r2, r7
    a53c:	54f2      	strb	r2, [r6, r3]
    a53e:	e7f4      	b.n	a52a <DataEncrypt+0xb2>
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    a540:	3101      	adds	r1, #1
    a542:	73e9      	strb	r1, [r5, #15]
	for (i=0;i<iterations+1;i++)
    a544:	9f02      	ldr	r7, [sp, #8]
    a546:	3701      	adds	r7, #1
    a548:	b2fb      	uxtb	r3, r7
    a54a:	9302      	str	r3, [sp, #8]
    a54c:	469b      	mov	fp, r3
    a54e:	4543      	cmp	r3, r8
    a550:	da13      	bge.n	a57a <DataEncrypt+0x102>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    a552:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    a554:	5d5a      	ldrb	r2, [r3, r5]
    a556:	551a      	strb	r2, [r3, r4]
    a558:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a55a:	2b10      	cmp	r3, #16
    a55c:	d1fa      	bne.n	a554 <DataEncrypt+0xdc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    a55e:	4913      	ldr	r1, [pc, #76]	; (a5ac <DataEncrypt+0x134>)
    a560:	0020      	movs	r0, r4
    a562:	47c8      	blx	r9
			if (CTR_Nonce_and_Counter[15] == 0)
    a564:	7be9      	ldrb	r1, [r5, #15]
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    a566:	4658      	mov	r0, fp
    a568:	3801      	subs	r0, #1
    a56a:	0100      	lsls	r0, r0, #4
    a56c:	2300      	movs	r3, #0
    a56e:	aa04      	add	r2, sp, #16
    a570:	4694      	mov	ip, r2
    a572:	4460      	add	r0, ip
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a574:	4a0e      	ldr	r2, [pc, #56]	; (a5b0 <DataEncrypt+0x138>)
    a576:	4694      	mov	ip, r2
    a578:	e7da      	b.n	a530 <DataEncrypt+0xb8>
	memcpy(Payloadinfo, CipheringData, *Payload_len);
    a57a:	4653      	mov	r3, sl
    a57c:	781a      	ldrb	r2, [r3, #0]
    a57e:	a904      	add	r1, sp, #16
    a580:	9803      	ldr	r0, [sp, #12]
    a582:	4b05      	ldr	r3, [pc, #20]	; (a598 <DataEncrypt+0x120>)
    a584:	4798      	blx	r3
}
    a586:	2001      	movs	r0, #1
    a588:	b021      	add	sp, #132	; 0x84
    a58a:	bc3c      	pop	{r2, r3, r4, r5}
    a58c:	4690      	mov	r8, r2
    a58e:	4699      	mov	r9, r3
    a590:	46a2      	mov	sl, r4
    a592:	46ab      	mov	fp, r5
    a594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a596:	46c0      	nop			; (mov r8, r8)
    a598:	00010a97 	.word	0x00010a97
    a59c:	20001df8 	.word	0x20001df8
    a5a0:	0000a349 	.word	0x0000a349
    a5a4:	0000b425 	.word	0x0000b425
    a5a8:	20001e20 	.word	0x20001e20
    a5ac:	000123d0 	.word	0x000123d0
    a5b0:	20001e38 	.word	0x20001e38

0000a5b4 <validate_mic>:
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    a5b4:	4b08      	ldr	r3, [pc, #32]	; (a5d8 <validate_mic+0x24>)
    a5b6:	781a      	ldrb	r2, [r3, #0]
    a5b8:	4b08      	ldr	r3, [pc, #32]	; (a5dc <validate_mic+0x28>)
    a5ba:	781b      	ldrb	r3, [r3, #0]
		return false;
    a5bc:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    a5be:	429a      	cmp	r2, r3
    a5c0:	d000      	beq.n	a5c4 <validate_mic+0x10>
}
    a5c2:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    a5c4:	4b04      	ldr	r3, [pc, #16]	; (a5d8 <validate_mic+0x24>)
    a5c6:	7858      	ldrb	r0, [r3, #1]
    a5c8:	4b04      	ldr	r3, [pc, #16]	; (a5dc <validate_mic+0x28>)
    a5ca:	785b      	ldrb	r3, [r3, #1]
    a5cc:	1ac0      	subs	r0, r0, r3
    a5ce:	4243      	negs	r3, r0
    a5d0:	4158      	adcs	r0, r3
    a5d2:	b2c0      	uxtb	r0, r0
    a5d4:	e7f5      	b.n	a5c2 <validate_mic+0xe>
    a5d6:	46c0      	nop			; (mov r8, r8)
    a5d8:	20001e20 	.word	0x20001e20
    a5dc:	20001e48 	.word	0x20001e48

0000a5e0 <DataDecrypt>:
{
    a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5e2:	46de      	mov	lr, fp
    a5e4:	4657      	mov	r7, sl
    a5e6:	464e      	mov	r6, r9
    a5e8:	4645      	mov	r5, r8
    a5ea:	b5e0      	push	{r5, r6, r7, lr}
    a5ec:	b0a5      	sub	sp, #148	; 0x94
    a5ee:	9004      	str	r0, [sp, #16]
    a5f0:	9105      	str	r1, [sp, #20]
    a5f2:	4693      	mov	fp, r2
    a5f4:	9306      	str	r3, [sp, #24]
    a5f6:	ab2e      	add	r3, sp, #184	; 0xb8
    a5f8:	781b      	ldrb	r3, [r3, #0]
    a5fa:	9307      	str	r3, [sp, #28]
	iterations = *PayloadLen/16;
    a5fc:	780c      	ldrb	r4, [r1, #0]
    a5fe:	0925      	lsrs	r5, r4, #4
	if (*PayloadLen % 16 != 0) iterations++;
    a600:	0723      	lsls	r3, r4, #28
    a602:	d000      	beq.n	a606 <DataDecrypt+0x26>
    a604:	3501      	adds	r5, #1
	memcpy(CipheringData, Payload, *PayloadLen);
    a606:	0022      	movs	r2, r4
    a608:	9904      	ldr	r1, [sp, #16]
    a60a:	a808      	add	r0, sp, #32
    a60c:	4b43      	ldr	r3, [pc, #268]	; (a71c <DataDecrypt+0x13c>)
    a60e:	4798      	blx	r3
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    a610:	0023      	movs	r3, r4
    a612:	0028      	movs	r0, r5
    a614:	012d      	lsls	r5, r5, #4
    a616:	42ac      	cmp	r4, r5
    a618:	da07      	bge.n	a62a <DataDecrypt+0x4a>
		CipheringData[i] = 0; // Padding
    a61a:	aa08      	add	r2, sp, #32
    a61c:	2100      	movs	r1, #0
    a61e:	54d1      	strb	r1, [r2, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    a620:	3401      	adds	r4, #1
    a622:	b2e4      	uxtb	r4, r4
    a624:	0023      	movs	r3, r4
    a626:	42ac      	cmp	r4, r5
    a628:	dbf9      	blt.n	a61e <DataDecrypt+0x3e>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    a62a:	2201      	movs	r2, #1
    a62c:	ab1c      	add	r3, sp, #112	; 0x70
    a62e:	701a      	strb	r2, [r3, #0]
    a630:	2300      	movs	r3, #0
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    a632:	465c      	mov	r4, fp
    a634:	aa1c      	add	r2, sp, #112	; 0x70
    a636:	18d2      	adds	r2, r2, r3
    a638:	5ce1      	ldrb	r1, [r4, r3]
    a63a:	7051      	strb	r1, [r2, #1]
    a63c:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    a63e:	2b08      	cmp	r3, #8
    a640:	d1f8      	bne.n	a634 <DataDecrypt+0x54>
    a642:	46a3      	mov	fp, r4
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    a644:	ab1c      	add	r3, sp, #112	; 0x70
    a646:	9906      	ldr	r1, [sp, #24]
    a648:	7259      	strb	r1, [r3, #9]
    a64a:	0a0a      	lsrs	r2, r1, #8
    a64c:	729a      	strb	r2, [r3, #10]
    a64e:	0c0a      	lsrs	r2, r1, #16
    a650:	72da      	strb	r2, [r3, #11]
    a652:	0e0a      	lsrs	r2, r1, #24
    a654:	731a      	strb	r2, [r3, #12]
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    a656:	2204      	movs	r2, #4
    a658:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    a65a:	2200      	movs	r2, #0
    a65c:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    a65e:	73da      	strb	r2, [r3, #15]
	for (i=0;i<iterations+1;i++)
    a660:	1c43      	adds	r3, r0, #1
    a662:	4699      	mov	r9, r3
    a664:	2500      	movs	r5, #0
    a666:	2300      	movs	r3, #0
    a668:	4698      	mov	r8, r3
    a66a:	464b      	mov	r3, r9
    a66c:	2b00      	cmp	r3, #0
    a66e:	dd2e      	ble.n	a6ce <DataDecrypt+0xee>
			block[j] = CTR_Nonce_and_Counter[j];
    a670:	ac20      	add	r4, sp, #128	; 0x80
    a672:	ae1c      	add	r6, sp, #112	; 0x70
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    a674:	4b2a      	ldr	r3, [pc, #168]	; (a720 <DataDecrypt+0x140>)
    a676:	469a      	mov	sl, r3
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a678:	4f2a      	ldr	r7, [pc, #168]	; (a724 <DataDecrypt+0x144>)
    a67a:	4643      	mov	r3, r8
    a67c:	9303      	str	r3, [sp, #12]
    a67e:	46a8      	mov	r8, r5
    a680:	e014      	b.n	a6ac <DataDecrypt+0xcc>
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    a682:	5d1a      	ldrb	r2, [r3, r4]
    a684:	5ce9      	ldrb	r1, [r5, r3]
    a686:	404a      	eors	r2, r1
    a688:	54ea      	strb	r2, [r5, r3]
    a68a:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a68c:	2b10      	cmp	r3, #16
    a68e:	d004      	beq.n	a69a <DataDecrypt+0xba>
			if (CTR_Nonce_and_Counter[15] == 0)
    a690:	2800      	cmp	r0, #0
    a692:	d1f6      	bne.n	a682 <DataDecrypt+0xa2>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    a694:	5d1a      	ldrb	r2, [r3, r4]
    a696:	54fa      	strb	r2, [r7, r3]
    a698:	e7f7      	b.n	a68a <DataDecrypt+0xaa>
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    a69a:	3001      	adds	r0, #1
    a69c:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    a69e:	9d03      	ldr	r5, [sp, #12]
    a6a0:	3501      	adds	r5, #1
    a6a2:	b2eb      	uxtb	r3, r5
    a6a4:	9303      	str	r3, [sp, #12]
    a6a6:	4698      	mov	r8, r3
    a6a8:	454b      	cmp	r3, r9
    a6aa:	da10      	bge.n	a6ce <DataDecrypt+0xee>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    a6ac:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    a6ae:	5d9a      	ldrb	r2, [r3, r6]
    a6b0:	551a      	strb	r2, [r3, r4]
    a6b2:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    a6b4:	2b10      	cmp	r3, #16
    a6b6:	d1fa      	bne.n	a6ae <DataDecrypt+0xce>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    a6b8:	491b      	ldr	r1, [pc, #108]	; (a728 <DataDecrypt+0x148>)
    a6ba:	0020      	movs	r0, r4
    a6bc:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    a6be:	7bf0      	ldrb	r0, [r6, #15]
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    a6c0:	4642      	mov	r2, r8
    a6c2:	3a01      	subs	r2, #1
    a6c4:	0112      	lsls	r2, r2, #4
    a6c6:	2300      	movs	r3, #0
    a6c8:	a908      	add	r1, sp, #32
    a6ca:	188d      	adds	r5, r1, r2
    a6cc:	e7e0      	b.n	a690 <DataDecrypt+0xb0>
	*PayloadLen = *PayloadLen-4;
    a6ce:	9b05      	ldr	r3, [sp, #20]
    a6d0:	7819      	ldrb	r1, [r3, #0]
    a6d2:	3904      	subs	r1, #4
    a6d4:	b2c9      	uxtb	r1, r1
    a6d6:	7019      	strb	r1, [r3, #0]
	mic_generator(&CipheringData[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    a6d8:	465b      	mov	r3, fp
    a6da:	9300      	str	r3, [sp, #0]
    a6dc:	9b06      	ldr	r3, [sp, #24]
    a6de:	9a07      	ldr	r2, [sp, #28]
    a6e0:	a808      	add	r0, sp, #32
    a6e2:	4c12      	ldr	r4, [pc, #72]	; (a72c <DataDecrypt+0x14c>)
    a6e4:	47a0      	blx	r4
    a6e6:	2300      	movs	r3, #0
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    a6e8:	4d11      	ldr	r5, [pc, #68]	; (a730 <DataDecrypt+0x150>)
    a6ea:	4c0e      	ldr	r4, [pc, #56]	; (a724 <DataDecrypt+0x144>)
    a6ec:	4811      	ldr	r0, [pc, #68]	; (a734 <DataDecrypt+0x154>)
    a6ee:	5ce2      	ldrb	r2, [r4, r3]
    a6f0:	5cc1      	ldrb	r1, [r0, r3]
    a6f2:	404a      	eors	r2, r1
    a6f4:	54ea      	strb	r2, [r5, r3]
    a6f6:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    a6f8:	2b10      	cmp	r3, #16
    a6fa:	d1f8      	bne.n	a6ee <DataDecrypt+0x10e>
	memcpy(Payload, CipheringData, *PayloadLen);
    a6fc:	9b05      	ldr	r3, [sp, #20]
    a6fe:	781a      	ldrb	r2, [r3, #0]
    a700:	a908      	add	r1, sp, #32
    a702:	9804      	ldr	r0, [sp, #16]
    a704:	4b05      	ldr	r3, [pc, #20]	; (a71c <DataDecrypt+0x13c>)
    a706:	4798      	blx	r3
	return validate_mic();
    a708:	4b0b      	ldr	r3, [pc, #44]	; (a738 <DataDecrypt+0x158>)
    a70a:	4798      	blx	r3
}
    a70c:	b025      	add	sp, #148	; 0x94
    a70e:	bc3c      	pop	{r2, r3, r4, r5}
    a710:	4690      	mov	r8, r2
    a712:	4699      	mov	r9, r3
    a714:	46a2      	mov	sl, r4
    a716:	46ab      	mov	fp, r5
    a718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a71a:	46c0      	nop			; (mov r8, r8)
    a71c:	00010a97 	.word	0x00010a97
    a720:	0000b425 	.word	0x0000b425
    a724:	20001e10 	.word	0x20001e10
    a728:	000123d0 	.word	0x000123d0
    a72c:	0000a349 	.word	0x0000a349
    a730:	20001e20 	.word	0x20001e20
    a734:	20001e38 	.word	0x20001e38
    a738:	0000a5b5 	.word	0x0000a5b5

0000a73c <MiMAC_Set>:
{
    a73c:	b510      	push	{r4, lr}
    switch(id)
    a73e:	2800      	cmp	r0, #0
    a740:	d109      	bne.n	a756 <MiMAC_Set+0x1a>
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    a742:	780b      	ldrb	r3, [r1, #0]
    a744:	2b1a      	cmp	r3, #26
    a746:	d807      	bhi.n	a758 <MiMAC_Set+0x1c>
          MACCurrentChannel = *value;
    a748:	4a04      	ldr	r2, [pc, #16]	; (a75c <MiMAC_Set+0x20>)
    a74a:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    a74c:	0018      	movs	r0, r3
    a74e:	4b04      	ldr	r3, [pc, #16]	; (a760 <MiMAC_Set+0x24>)
    a750:	4798      	blx	r3
          return true;
    a752:	2001      	movs	r0, #1
    a754:	e000      	b.n	a758 <MiMAC_Set+0x1c>
    return false;
    a756:	2000      	movs	r0, #0
}
    a758:	bd10      	pop	{r4, pc}
    a75a:	46c0      	nop			; (mov r8, r8)
    a75c:	20001e4e 	.word	0x20001e4e
    a760:	0000b385 	.word	0x0000b385

0000a764 <MiMAC_Init>:
{
    a764:	b570      	push	{r4, r5, r6, lr}
    a766:	b082      	sub	sp, #8
    a768:	466c      	mov	r4, sp
    a76a:	9000      	str	r0, [sp, #0]
    a76c:	9101      	str	r1, [sp, #4]
	PHY_Init();
    a76e:	4b1b      	ldr	r3, [pc, #108]	; (a7dc <MiMAC_Init+0x78>)
    a770:	4798      	blx	r3
	MACInitParams = initValue;
    a772:	4d1b      	ldr	r5, [pc, #108]	; (a7e0 <MiMAC_Init+0x7c>)
    a774:	002b      	movs	r3, r5
    a776:	466a      	mov	r2, sp
    a778:	ca03      	ldmia	r2!, {r0, r1}
    a77a:	c303      	stmia	r3!, {r0, r1}
	uint16_t x =  PHY_RandomReq();
    a77c:	4b19      	ldr	r3, [pc, #100]	; (a7e4 <MiMAC_Init+0x80>)
    a77e:	4798      	blx	r3
    a780:	0006      	movs	r6, r0
	PHY_SetRxState(true);
    a782:	2001      	movs	r0, #1
    a784:	4b18      	ldr	r3, [pc, #96]	; (a7e8 <MiMAC_Init+0x84>)
    a786:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    a788:	4b18      	ldr	r3, [pc, #96]	; (a7ec <MiMAC_Init+0x88>)
    a78a:	701e      	strb	r6, [r3, #0]
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    a78c:	6868      	ldr	r0, [r5, #4]
    a78e:	4b18      	ldr	r3, [pc, #96]	; (a7f0 <MiMAC_Init+0x8c>)
    a790:	4798      	blx	r3
		RxBuffer[i].PayloadLen = 0;
    a792:	4b18      	ldr	r3, [pc, #96]	; (a7f4 <MiMAC_Init+0x90>)
    a794:	2200      	movs	r2, #0
    a796:	701a      	strb	r2, [r3, #0]
    a798:	2176      	movs	r1, #118	; 0x76
    a79a:	545a      	strb	r2, [r3, r1]
    a79c:	3176      	adds	r1, #118	; 0x76
    a79e:	545a      	strb	r2, [r3, r1]
    a7a0:	3176      	adds	r1, #118	; 0x76
    a7a2:	545a      	strb	r2, [r3, r1]
			if (initValue.actionFlags.bits.NetworkFreezer)
    a7a4:	7823      	ldrb	r3, [r4, #0]
    a7a6:	075b      	lsls	r3, r3, #29
    a7a8:	d40a      	bmi.n	a7c0 <MiMAC_Init+0x5c>
				OutgoingFrameCounter.Val = 0;
    a7aa:	4c13      	ldr	r4, [pc, #76]	; (a7f8 <MiMAC_Init+0x94>)
    a7ac:	2300      	movs	r3, #0
    a7ae:	6023      	str	r3, [r4, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    a7b0:	2001      	movs	r0, #1
    a7b2:	4b12      	ldr	r3, [pc, #72]	; (a7fc <MiMAC_Init+0x98>)
    a7b4:	4798      	blx	r3
				OutgoingFrameCounter.Val = 1;
    a7b6:	2301      	movs	r3, #1
    a7b8:	6023      	str	r3, [r4, #0]
}
    a7ba:	2001      	movs	r0, #1
    a7bc:	b002      	add	sp, #8
    a7be:	bd70      	pop	{r4, r5, r6, pc}
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
    a7c0:	2001      	movs	r0, #1
    a7c2:	4b0f      	ldr	r3, [pc, #60]	; (a800 <MiMAC_Init+0x9c>)
    a7c4:	4798      	blx	r3
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
    a7c6:	4a0c      	ldr	r2, [pc, #48]	; (a7f8 <MiMAC_Init+0x94>)
    a7c8:	6813      	ldr	r3, [r2, #0]
    a7ca:	2180      	movs	r1, #128	; 0x80
    a7cc:	00c9      	lsls	r1, r1, #3
    a7ce:	468c      	mov	ip, r1
    a7d0:	4463      	add	r3, ip
    a7d2:	6013      	str	r3, [r2, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    a7d4:	2001      	movs	r0, #1
    a7d6:	4b09      	ldr	r3, [pc, #36]	; (a7fc <MiMAC_Init+0x98>)
    a7d8:	4798      	blx	r3
    a7da:	e7ee      	b.n	a7ba <MiMAC_Init+0x56>
    a7dc:	0000b245 	.word	0x0000b245
    a7e0:	20001df8 	.word	0x20001df8
    a7e4:	0000b3b1 	.word	0x0000b3b1
    a7e8:	0000b2f9 	.word	0x0000b2f9
    a7ec:	20001d6c 	.word	0x20001d6c
    a7f0:	0000b451 	.word	0x0000b451
    a7f4:	20001e68 	.word	0x20001e68
    a7f8:	20001e34 	.word	0x20001e34
    a7fc:	00009f31 	.word	0x00009f31
    a800:	00009e51 	.word	0x00009e51

0000a804 <MiMAC_SendPacket>:
{
    a804:	b5f0      	push	{r4, r5, r6, r7, lr}
    a806:	46de      	mov	lr, fp
    a808:	4657      	mov	r7, sl
    a80a:	464e      	mov	r6, r9
    a80c:	4645      	mov	r5, r8
    a80e:	b5e0      	push	{r5, r6, r7, lr}
    a810:	b08b      	sub	sp, #44	; 0x2c
    a812:	1c04      	adds	r4, r0, #0
    a814:	9003      	str	r0, [sp, #12]
    a816:	9104      	str	r1, [sp, #16]
    a818:	0015      	movs	r5, r2
    a81a:	0a2d      	lsrs	r5, r5, #8
    a81c:	9205      	str	r2, [sp, #20]
    a81e:	9300      	str	r3, [sp, #0]
    a820:	ab15      	add	r3, sp, #84	; 0x54
    a822:	781b      	ldrb	r3, [r3, #0]
    a824:	469a      	mov	sl, r3
    a826:	b2e4      	uxtb	r4, r4
    a828:	06a3      	lsls	r3, r4, #26
    a82a:	0fdb      	lsrs	r3, r3, #31
    a82c:	4698      	mov	r8, r3
    a82e:	9102      	str	r1, [sp, #8]
    a830:	b2d7      	uxtb	r7, r2
    a832:	b2ed      	uxtb	r5, r5
    if (transParam.flags.bits.broadcast)
    a834:	0763      	lsls	r3, r4, #29
    a836:	d500      	bpl.n	a83a <MiMAC_SendPacket+0x36>
        transParam.altDestAddr = true;
    a838:	2701      	movs	r7, #1
    if (transParam.flags.bits.secEn)
    a83a:	2308      	movs	r3, #8
    a83c:	4023      	ands	r3, r4
    a83e:	001a      	movs	r2, r3
        transParam.altSrcAddr = false;
    a840:	4253      	negs	r3, r2
    a842:	4153      	adcs	r3, r2
    a844:	425b      	negs	r3, r3
    a846:	401d      	ands	r5, r3
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    a848:	2303      	movs	r3, #3
    a84a:	4023      	ands	r3, r4
    a84c:	2b01      	cmp	r3, #1
    a84e:	d03a      	beq.n	a8c6 <MiMAC_SendPacket+0xc2>
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    a850:	425a      	negs	r2, r3
    a852:	415a      	adcs	r2, r3
        frameControl = 0x03;
    a854:	b2d2      	uxtb	r2, r2
    a856:	4691      	mov	r9, r2
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    a858:	aa03      	add	r2, sp, #12
    a85a:	8952      	ldrh	r2, [r2, #10]
    a85c:	49a7      	ldr	r1, [pc, #668]	; (aafc <MiMAC_SendPacket+0x2f8>)
    a85e:	8809      	ldrh	r1, [r1, #0]
    a860:	4291      	cmp	r1, r2
    a862:	d033      	beq.n	a8cc <MiMAC_SendPacket+0xc8>
        IntraPAN = false;
    a864:	2200      	movs	r2, #0
    a866:	4693      	mov	fp, r2
        headerLength = 7;
    a868:	3207      	adds	r2, #7
        headerLength += 8;
    a86a:	0016      	movs	r6, r2
    a86c:	3608      	adds	r6, #8
    if (transParam.altDestAddr)
    a86e:	2f00      	cmp	r7, #0
    a870:	d000      	beq.n	a874 <MiMAC_SendPacket+0x70>
        headerLength += 2;
    a872:	1c96      	adds	r6, r2, #2
    if (transParam.altSrcAddr)
    a874:	2d00      	cmp	r5, #0
    a876:	d038      	beq.n	a8ea <MiMAC_SendPacket+0xe6>
        headerLength += 2;
    a878:	3602      	adds	r6, #2
    a87a:	b2f2      	uxtb	r2, r6
    a87c:	9201      	str	r2, [sp, #4]
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    a87e:	2224      	movs	r2, #36	; 0x24
    a880:	4014      	ands	r4, r2
    a882:	2c20      	cmp	r4, #32
    a884:	d035      	beq.n	a8f2 <MiMAC_SendPacket+0xee>
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    a886:	2b03      	cmp	r3, #3
    a888:	d038      	beq.n	a8fc <MiMAC_SendPacket+0xf8>
    if (transParam.flags.bits.secEn)
    a88a:	ab03      	add	r3, sp, #12
    a88c:	4642      	mov	r2, r8
    a88e:	0152      	lsls	r2, r2, #5
    a890:	781c      	ldrb	r4, [r3, #0]
    a892:	2120      	movs	r1, #32
    a894:	438c      	bics	r4, r1
    a896:	4314      	orrs	r4, r2
    a898:	701c      	strb	r4, [r3, #0]
    a89a:	0723      	lsls	r3, r4, #28
    a89c:	d436      	bmi.n	a90c <MiMAC_SendPacket+0x108>
		packet[loc++] = MACPayloadLen+headerLength;
    a89e:	ab14      	add	r3, sp, #80	; 0x50
    a8a0:	781b      	ldrb	r3, [r3, #0]
    a8a2:	9a01      	ldr	r2, [sp, #4]
    a8a4:	18d6      	adds	r6, r2, r3
    a8a6:	4b96      	ldr	r3, [pc, #600]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a8a8:	701e      	strb	r6, [r3, #0]
	packet[loc++] = frameControl;
    a8aa:	4b95      	ldr	r3, [pc, #596]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a8ac:	464a      	mov	r2, r9
    a8ae:	705a      	strb	r2, [r3, #1]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    a8b0:	43e3      	mvns	r3, r4
    a8b2:	079b      	lsls	r3, r3, #30
    a8b4:	d03d      	beq.n	a932 <MiMAC_SendPacket+0x12e>
        if (transParam.altDestAddr && transParam.altSrcAddr)
    a8b6:	2f00      	cmp	r7, #0
    a8b8:	d05d      	beq.n	a976 <MiMAC_SendPacket+0x172>
    a8ba:	2d00      	cmp	r5, #0
    a8bc:	d043      	beq.n	a946 <MiMAC_SendPacket+0x142>
			packet[loc++] = 0x88;
    a8be:	2288      	movs	r2, #136	; 0x88
    a8c0:	4b8f      	ldr	r3, [pc, #572]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a8c2:	709a      	strb	r2, [r3, #2]
    a8c4:	e042      	b.n	a94c <MiMAC_SendPacket+0x148>
        frameControl = 0x03;
    a8c6:	2203      	movs	r2, #3
    a8c8:	4691      	mov	r9, r2
    a8ca:	e7c5      	b.n	a858 <MiMAC_SendPacket+0x54>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    a8cc:	498d      	ldr	r1, [pc, #564]	; (ab04 <MiMAC_SendPacket+0x300>)
    a8ce:	428a      	cmp	r2, r1
    a8d0:	d007      	beq.n	a8e2 <MiMAC_SendPacket+0xde>
        frameControl |= 0x40;
    a8d2:	2240      	movs	r2, #64	; 0x40
    a8d4:	4649      	mov	r1, r9
    a8d6:	4311      	orrs	r1, r2
    a8d8:	4689      	mov	r9, r1
        IntraPAN = true;
    a8da:	3a3f      	subs	r2, #63	; 0x3f
    a8dc:	4693      	mov	fp, r2
        headerLength = 5;
    a8de:	3204      	adds	r2, #4
        IntraPAN = true;
    a8e0:	e7c3      	b.n	a86a <MiMAC_SendPacket+0x66>
        IntraPAN = false;
    a8e2:	2200      	movs	r2, #0
    a8e4:	4693      	mov	fp, r2
        headerLength = 7;
    a8e6:	3207      	adds	r2, #7
    a8e8:	e7bf      	b.n	a86a <MiMAC_SendPacket+0x66>
        headerLength += 8;
    a8ea:	3608      	adds	r6, #8
    a8ec:	b2f2      	uxtb	r2, r6
    a8ee:	9201      	str	r2, [sp, #4]
    a8f0:	e7c5      	b.n	a87e <MiMAC_SendPacket+0x7a>
        frameControl |= 0x20;
    a8f2:	3a04      	subs	r2, #4
    a8f4:	4649      	mov	r1, r9
    a8f6:	4311      	orrs	r1, r2
    a8f8:	4689      	mov	r9, r1
    a8fa:	e7c4      	b.n	a886 <MiMAC_SendPacket+0x82>
        transParam.altSrcAddr = true;
    a8fc:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    a8fe:	2300      	movs	r3, #0
    a900:	4698      	mov	r8, r3
        IntraPAN = false;
    a902:	469b      	mov	fp, r3
        frameControl = 0x00;
    a904:	4699      	mov	r9, r3
        headerLength = 7;
    a906:	3307      	adds	r3, #7
    a908:	9301      	str	r3, [sp, #4]
    a90a:	e7be      	b.n	a88a <MiMAC_SendPacket+0x86>
        frameControl |= 0x08;
    a90c:	2308      	movs	r3, #8
    a90e:	464a      	mov	r2, r9
    a910:	431a      	orrs	r2, r3
    a912:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    a914:	4b7c      	ldr	r3, [pc, #496]	; (ab08 <MiMAC_SendPacket+0x304>)
    a916:	681a      	ldr	r2, [r3, #0]
    a918:	464b      	mov	r3, r9
    a91a:	a914      	add	r1, sp, #80	; 0x50
    a91c:	9800      	ldr	r0, [sp, #0]
    a91e:	4e7b      	ldr	r6, [pc, #492]	; (ab0c <MiMAC_SendPacket+0x308>)
    a920:	47b0      	blx	r6
		packet[loc++] = MACPayloadLen+headerLength+9;
    a922:	ab14      	add	r3, sp, #80	; 0x50
    a924:	781b      	ldrb	r3, [r3, #0]
    a926:	3309      	adds	r3, #9
    a928:	9a01      	ldr	r2, [sp, #4]
    a92a:	18d6      	adds	r6, r2, r3
    a92c:	4b74      	ldr	r3, [pc, #464]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a92e:	701e      	strb	r6, [r3, #0]
    a930:	e7bb      	b.n	a8aa <MiMAC_SendPacket+0xa6>
		packet[loc++] = 0x80;
    a932:	4b73      	ldr	r3, [pc, #460]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a934:	2280      	movs	r2, #128	; 0x80
    a936:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a938:	4975      	ldr	r1, [pc, #468]	; (ab10 <MiMAC_SendPacket+0x30c>)
    a93a:	780a      	ldrb	r2, [r1, #0]
    a93c:	1c50      	adds	r0, r2, #1
    a93e:	7008      	strb	r0, [r1, #0]
    a940:	70da      	strb	r2, [r3, #3]
    a942:	2304      	movs	r3, #4
    a944:	e03e      	b.n	a9c4 <MiMAC_SendPacket+0x1c0>
			packet[loc++] = 0xC8;
    a946:	22c8      	movs	r2, #200	; 0xc8
    a948:	4b6d      	ldr	r3, [pc, #436]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a94a:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a94c:	4b70      	ldr	r3, [pc, #448]	; (ab10 <MiMAC_SendPacket+0x30c>)
    a94e:	781a      	ldrb	r2, [r3, #0]
    a950:	1c51      	adds	r1, r2, #1
    a952:	7019      	strb	r1, [r3, #0]
    a954:	4b6a      	ldr	r3, [pc, #424]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a956:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    a958:	aa03      	add	r2, sp, #12
    a95a:	7a91      	ldrb	r1, [r2, #10]
    a95c:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a95e:	7ad2      	ldrb	r2, [r2, #11]
    a960:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    a962:	0763      	lsls	r3, r4, #29
    a964:	d429      	bmi.n	a9ba <MiMAC_SendPacket+0x1b6>
				packet[loc++] = transParam.DestAddress[0];
    a966:	9902      	ldr	r1, [sp, #8]
    a968:	780a      	ldrb	r2, [r1, #0]
    a96a:	4b65      	ldr	r3, [pc, #404]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a96c:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    a96e:	784a      	ldrb	r2, [r1, #1]
    a970:	71da      	strb	r2, [r3, #7]
    a972:	2308      	movs	r3, #8
    a974:	e026      	b.n	a9c4 <MiMAC_SendPacket+0x1c0>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    a976:	2d00      	cmp	r5, #0
    a978:	d00f      	beq.n	a99a <MiMAC_SendPacket+0x196>
			packet[loc++] = 0x8C;
    a97a:	4b61      	ldr	r3, [pc, #388]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a97c:	228c      	movs	r2, #140	; 0x8c
    a97e:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a980:	4963      	ldr	r1, [pc, #396]	; (ab10 <MiMAC_SendPacket+0x30c>)
    a982:	780a      	ldrb	r2, [r1, #0]
    a984:	1c50      	adds	r0, r2, #1
    a986:	7008      	strb	r0, [r1, #0]
    a988:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    a98a:	aa03      	add	r2, sp, #12
    a98c:	7a91      	ldrb	r1, [r2, #10]
    a98e:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a990:	7ad2      	ldrb	r2, [r2, #11]
    a992:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    a994:	0763      	lsls	r3, r4, #29
    a996:	d410      	bmi.n	a9ba <MiMAC_SendPacket+0x1b6>
    a998:	e08f      	b.n	aaba <MiMAC_SendPacket+0x2b6>
			packet[loc++] = 0xCC;
    a99a:	4b59      	ldr	r3, [pc, #356]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a99c:	22cc      	movs	r2, #204	; 0xcc
    a99e:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    a9a0:	495b      	ldr	r1, [pc, #364]	; (ab10 <MiMAC_SendPacket+0x30c>)
    a9a2:	780a      	ldrb	r2, [r1, #0]
    a9a4:	1c50      	adds	r0, r2, #1
    a9a6:	7008      	strb	r0, [r1, #0]
    a9a8:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    a9aa:	aa03      	add	r2, sp, #12
    a9ac:	7a91      	ldrb	r1, [r2, #10]
    a9ae:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    a9b0:	7ad2      	ldrb	r2, [r2, #11]
    a9b2:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    a9b4:	0763      	lsls	r3, r4, #29
    a9b6:	d400      	bmi.n	a9ba <MiMAC_SendPacket+0x1b6>
    a9b8:	e07c      	b.n	aab4 <MiMAC_SendPacket+0x2b0>
			packet[loc++] = 0xFF;
    a9ba:	4b51      	ldr	r3, [pc, #324]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a9bc:	22ff      	movs	r2, #255	; 0xff
    a9be:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    a9c0:	71da      	strb	r2, [r3, #7]
    a9c2:	2308      	movs	r3, #8
    if (IntraPAN == false)
    a9c4:	465a      	mov	r2, fp
    a9c6:	2a00      	cmp	r2, #0
    a9c8:	d109      	bne.n	a9de <MiMAC_SendPacket+0x1da>
		packet[loc++] = MAC_PANID.v[0];
    a9ca:	1c5a      	adds	r2, r3, #1
    a9cc:	b2d2      	uxtb	r2, r2
    a9ce:	494c      	ldr	r1, [pc, #304]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a9d0:	484a      	ldr	r0, [pc, #296]	; (aafc <MiMAC_SendPacket+0x2f8>)
    a9d2:	7804      	ldrb	r4, [r0, #0]
    a9d4:	54cc      	strb	r4, [r1, r3]
		packet[loc++] = MAC_PANID.v[1];
    a9d6:	3302      	adds	r3, #2
    a9d8:	b2db      	uxtb	r3, r3
    a9da:	7840      	ldrb	r0, [r0, #1]
    a9dc:	5488      	strb	r0, [r1, r2]
    if (transParam.altSrcAddr)
    a9de:	2d00      	cmp	r5, #0
    a9e0:	d100      	bne.n	a9e4 <MiMAC_SendPacket+0x1e0>
    a9e2:	e075      	b.n	aad0 <MiMAC_SendPacket+0x2cc>
		packet[loc++] = myNetworkAddress.v[0];
    a9e4:	4a46      	ldr	r2, [pc, #280]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    a9e6:	494b      	ldr	r1, [pc, #300]	; (ab14 <MiMAC_SendPacket+0x310>)
    a9e8:	7808      	ldrb	r0, [r1, #0]
    a9ea:	54d0      	strb	r0, [r2, r3]
		packet[loc++] = myNetworkAddress.v[1];
    a9ec:	1c9c      	adds	r4, r3, #2
    a9ee:	b2e4      	uxtb	r4, r4
		packet[loc++] = myNetworkAddress.v[0];
    a9f0:	3301      	adds	r3, #1
		packet[loc++] = myNetworkAddress.v[1];
    a9f2:	b2db      	uxtb	r3, r3
    a9f4:	7849      	ldrb	r1, [r1, #1]
    a9f6:	54d1      	strb	r1, [r2, r3]
if (transParam.flags.bits.secEn)
    a9f8:	aa03      	add	r2, sp, #12
    a9fa:	4643      	mov	r3, r8
    a9fc:	0159      	lsls	r1, r3, #5
    a9fe:	7813      	ldrb	r3, [r2, #0]
    aa00:	2020      	movs	r0, #32
    aa02:	4383      	bics	r3, r0
    aa04:	430b      	orrs	r3, r1
    aa06:	7013      	strb	r3, [r2, #0]
    aa08:	071b      	lsls	r3, r3, #28
    aa0a:	d51b      	bpl.n	aa44 <MiMAC_SendPacket+0x240>
    aa0c:	0022      	movs	r2, r4
    aa0e:	2300      	movs	r3, #0
		packet[loc++] = OutgoingFrameCounter.v[i];
    aa10:	4e3b      	ldr	r6, [pc, #236]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    aa12:	4d3d      	ldr	r5, [pc, #244]	; (ab08 <MiMAC_SendPacket+0x304>)
    aa14:	1c51      	adds	r1, r2, #1
    aa16:	5ce8      	ldrb	r0, [r5, r3]
    aa18:	54b0      	strb	r0, [r6, r2]
    aa1a:	3301      	adds	r3, #1
    aa1c:	b2ca      	uxtb	r2, r1
	for (i = 0; i < 4; i++)
    aa1e:	2b04      	cmp	r3, #4
    aa20:	d1f8      	bne.n	aa14 <MiMAC_SendPacket+0x210>
    aa22:	1d25      	adds	r5, r4, #4
    aa24:	b2ed      	uxtb	r5, r5
	OutgoingFrameCounter.Val++;
    aa26:	4a38      	ldr	r2, [pc, #224]	; (ab08 <MiMAC_SendPacket+0x304>)
    aa28:	6813      	ldr	r3, [r2, #0]
    aa2a:	3301      	adds	r3, #1
    aa2c:	6013      	str	r3, [r2, #0]
	if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0))
    aa2e:	b2db      	uxtb	r3, r3
    aa30:	2b00      	cmp	r3, #0
    aa32:	d102      	bne.n	aa3a <MiMAC_SendPacket+0x236>
    aa34:	7853      	ldrb	r3, [r2, #1]
    aa36:	079b      	lsls	r3, r3, #30
    aa38:	d059      	beq.n	aaee <MiMAC_SendPacket+0x2ea>
	packet[loc++] = myKeySequenceNumber;
    aa3a:	3405      	adds	r4, #5
    aa3c:	b2e4      	uxtb	r4, r4
    aa3e:	2200      	movs	r2, #0
    aa40:	4b2f      	ldr	r3, [pc, #188]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    aa42:	555a      	strb	r2, [r3, r5]
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    aa44:	ab14      	add	r3, sp, #80	; 0x50
    aa46:	781a      	ldrb	r2, [r3, #0]
    aa48:	2a00      	cmp	r2, #0
    aa4a:	d054      	beq.n	aaf6 <MiMAC_SendPacket+0x2f2>
    aa4c:	9b00      	ldr	r3, [sp, #0]
    aa4e:	18a2      	adds	r2, r4, r2
    aa50:	b2d2      	uxtb	r2, r2
	    packet[loc++] = MACPayload[i];
    aa52:	4d2b      	ldr	r5, [pc, #172]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    aa54:	1c61      	adds	r1, r4, #1
    aa56:	7818      	ldrb	r0, [r3, #0]
    aa58:	5528      	strb	r0, [r5, r4]
    aa5a:	3301      	adds	r3, #1
    aa5c:	b2cc      	uxtb	r4, r1
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    aa5e:	4294      	cmp	r4, r2
    aa60:	d1f8      	bne.n	aa54 <MiMAC_SendPacket+0x250>
	packet[loc++] = final_mic_value[0];
    aa62:	4b27      	ldr	r3, [pc, #156]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    aa64:	492c      	ldr	r1, [pc, #176]	; (ab18 <MiMAC_SendPacket+0x314>)
    aa66:	7808      	ldrb	r0, [r1, #0]
    aa68:	5498      	strb	r0, [r3, r2]
    aa6a:	1c50      	adds	r0, r2, #1
	packet[loc++] = final_mic_value[1];
    aa6c:	b2c0      	uxtb	r0, r0
    aa6e:	784c      	ldrb	r4, [r1, #1]
    aa70:	541c      	strb	r4, [r3, r0]
    aa72:	1c90      	adds	r0, r2, #2
	packet[loc++] = final_mic_value[2];
    aa74:	b2c0      	uxtb	r0, r0
    aa76:	788c      	ldrb	r4, [r1, #2]
    aa78:	541c      	strb	r4, [r3, r0]
    aa7a:	3203      	adds	r2, #3
	packet[loc++] = final_mic_value[3];
    aa7c:	b2d2      	uxtb	r2, r2
    aa7e:	78c9      	ldrb	r1, [r1, #3]
    aa80:	5499      	strb	r1, [r3, r2]
    dataPointer = MACPayload;
    aa82:	4a26      	ldr	r2, [pc, #152]	; (ab1c <MiMAC_SendPacket+0x318>)
    aa84:	9900      	ldr	r1, [sp, #0]
    aa86:	6011      	str	r1, [r2, #0]
	dataConfCallback = ConfCallback;
    aa88:	4a25      	ldr	r2, [pc, #148]	; (ab20 <MiMAC_SendPacket+0x31c>)
    aa8a:	9916      	ldr	r1, [sp, #88]	; 0x58
    aa8c:	6011      	str	r1, [r2, #0]
    dataHandle = msghandle;
    aa8e:	4a25      	ldr	r2, [pc, #148]	; (ab24 <MiMAC_SendPacket+0x320>)
    aa90:	4651      	mov	r1, sl
    aa92:	7011      	strb	r1, [r2, #0]
    phyDataRequest.polledConfirmation = false;
    aa94:	a807      	add	r0, sp, #28
    aa96:	2200      	movs	r2, #0
    aa98:	7002      	strb	r2, [r0, #0]
    phyDataRequest.confirmCallback = PHY_DataConf;
    aa9a:	4a23      	ldr	r2, [pc, #140]	; (ab28 <MiMAC_SendPacket+0x324>)
    aa9c:	6082      	str	r2, [r0, #8]
    phyDataRequest.data = packet;
    aa9e:	6043      	str	r3, [r0, #4]
    PHY_DataReq(&phyDataRequest);
    aaa0:	4b22      	ldr	r3, [pc, #136]	; (ab2c <MiMAC_SendPacket+0x328>)
    aaa2:	4798      	blx	r3
}
    aaa4:	2001      	movs	r0, #1
    aaa6:	b00b      	add	sp, #44	; 0x2c
    aaa8:	bc3c      	pop	{r2, r3, r4, r5}
    aaaa:	4690      	mov	r8, r2
    aaac:	4699      	mov	r9, r3
    aaae:	46a2      	mov	sl, r4
    aab0:	46ab      	mov	fp, r5
    aab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    aab4:	2f00      	cmp	r7, #0
    aab6:	d000      	beq.n	aaba <MiMAC_SendPacket+0x2b6>
    aab8:	e755      	b.n	a966 <MiMAC_SendPacket+0x162>
        headerLength = 7;
    aaba:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    aabc:	4810      	ldr	r0, [pc, #64]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    aabe:	9c02      	ldr	r4, [sp, #8]
    aac0:	5ce1      	ldrb	r1, [r4, r3]
    aac2:	181a      	adds	r2, r3, r0
    aac4:	7191      	strb	r1, [r2, #6]
    aac6:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    aac8:	2b08      	cmp	r3, #8
    aaca:	d1f9      	bne.n	aac0 <MiMAC_SendPacket+0x2bc>
					packet[loc++] = transParam.DestAddress[i];
    aacc:	3306      	adds	r3, #6
    aace:	e779      	b.n	a9c4 <MiMAC_SendPacket+0x1c0>
			packet[loc++] = MACInitParams.PAddress[i];
    aad0:	4a17      	ldr	r2, [pc, #92]	; (ab30 <MiMAC_SendPacket+0x32c>)
    aad2:	6852      	ldr	r2, [r2, #4]
    aad4:	0018      	movs	r0, r3
    aad6:	3008      	adds	r0, #8
    aad8:	b2c0      	uxtb	r0, r0
    aada:	4d09      	ldr	r5, [pc, #36]	; (ab00 <MiMAC_SendPacket+0x2fc>)
    aadc:	1c5c      	adds	r4, r3, #1
    aade:	b2e4      	uxtb	r4, r4
    aae0:	7811      	ldrb	r1, [r2, #0]
    aae2:	54e9      	strb	r1, [r5, r3]
    aae4:	3201      	adds	r2, #1
    aae6:	0023      	movs	r3, r4
        for (i = 0; i < 8; i++)
    aae8:	42a0      	cmp	r0, r4
    aaea:	d1f7      	bne.n	aadc <MiMAC_SendPacket+0x2d8>
    aaec:	e784      	b.n	a9f8 <MiMAC_SendPacket+0x1f4>
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    aaee:	2001      	movs	r0, #1
    aaf0:	4b10      	ldr	r3, [pc, #64]	; (ab34 <MiMAC_SendPacket+0x330>)
    aaf2:	4798      	blx	r3
    aaf4:	e7a1      	b.n	aa3a <MiMAC_SendPacket+0x236>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    aaf6:	0022      	movs	r2, r4
    aaf8:	e7b3      	b.n	aa62 <MiMAC_SendPacket+0x25e>
    aafa:	46c0      	nop			; (mov r8, r8)
    aafc:	20001e4c 	.word	0x20001e4c
    ab00:	20001d70 	.word	0x20001d70
    ab04:	0000ffff 	.word	0x0000ffff
    ab08:	20001e34 	.word	0x20001e34
    ab0c:	0000a479 	.word	0x0000a479
    ab10:	20001d6c 	.word	0x20001d6c
    ab14:	20001df0 	.word	0x20001df0
    ab18:	20001e20 	.word	0x20001e20
    ab1c:	2000036c 	.word	0x2000036c
    ab20:	20000364 	.word	0x20000364
    ab24:	20000368 	.word	0x20000368
    ab28:	0000a2fd 	.word	0x0000a2fd
    ab2c:	0000b169 	.word	0x0000b169
    ab30:	20001df8 	.word	0x20001df8
    ab34:	00009f31 	.word	0x00009f31

0000ab38 <MiMAC_DiscardPacket>:
	if (BankIndex < BANK_SIZE)
    ab38:	4b04      	ldr	r3, [pc, #16]	; (ab4c <MiMAC_DiscardPacket+0x14>)
    ab3a:	781b      	ldrb	r3, [r3, #0]
    ab3c:	2b03      	cmp	r3, #3
    ab3e:	d804      	bhi.n	ab4a <MiMAC_DiscardPacket+0x12>
		RxBuffer[BankIndex].PayloadLen = 0;
    ab40:	2276      	movs	r2, #118	; 0x76
    ab42:	4353      	muls	r3, r2
    ab44:	2100      	movs	r1, #0
    ab46:	4a02      	ldr	r2, [pc, #8]	; (ab50 <MiMAC_DiscardPacket+0x18>)
    ab48:	5499      	strb	r1, [r3, r2]
}
    ab4a:	4770      	bx	lr
    ab4c:	2000000a 	.word	0x2000000a
    ab50:	20001e68 	.word	0x20001e68

0000ab54 <MiMAC_ReceivedPacket>:
{
    ab54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab56:	46ce      	mov	lr, r9
    ab58:	b500      	push	{lr}
    ab5a:	b082      	sub	sp, #8
	BankIndex = 0xFF;
    ab5c:	22ff      	movs	r2, #255	; 0xff
    ab5e:	4bd5      	ldr	r3, [pc, #852]	; (aeb4 <MiMAC_ReceivedPacket+0x360>)
    ab60:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    ab62:	4bd5      	ldr	r3, [pc, #852]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ab64:	781b      	ldrb	r3, [r3, #0]
    ab66:	2b00      	cmp	r3, #0
    ab68:	d000      	beq.n	ab6c <MiMAC_ReceivedPacket+0x18>
    ab6a:	e22e      	b.n	afca <MiMAC_ReceivedPacket+0x476>
    ab6c:	3376      	adds	r3, #118	; 0x76
    ab6e:	4ad2      	ldr	r2, [pc, #840]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ab70:	5cd3      	ldrb	r3, [r2, r3]
    ab72:	2b00      	cmp	r3, #0
    ab74:	d10e      	bne.n	ab94 <MiMAC_ReceivedPacket+0x40>
    ab76:	33ec      	adds	r3, #236	; 0xec
    ab78:	5cd3      	ldrb	r3, [r2, r3]
    ab7a:	2b00      	cmp	r3, #0
    ab7c:	d133      	bne.n	abe6 <MiMAC_ReceivedPacket+0x92>
    ab7e:	3363      	adds	r3, #99	; 0x63
    ab80:	33ff      	adds	r3, #255	; 0xff
    ab82:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    ab84:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    ab86:	2103      	movs	r1, #3
		if (RxBuffer[i].PayloadLen > 0)
    ab88:	2b00      	cmp	r3, #0
    ab8a:	d104      	bne.n	ab96 <MiMAC_ReceivedPacket+0x42>
}
    ab8c:	b002      	add	sp, #8
    ab8e:	bc04      	pop	{r2}
    ab90:	4691      	mov	r9, r2
    ab92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    ab94:	2101      	movs	r1, #1
			BankIndex = i;
    ab96:	4bc7      	ldr	r3, [pc, #796]	; (aeb4 <MiMAC_ReceivedPacket+0x360>)
    ab98:	7019      	strb	r1, [r3, #0]
	return false;
    ab9a:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    ab9c:	2903      	cmp	r1, #3
    ab9e:	d8f5      	bhi.n	ab8c <MiMAC_ReceivedPacket+0x38>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    aba0:	000a      	movs	r2, r1
    aba2:	2076      	movs	r0, #118	; 0x76
    aba4:	4348      	muls	r0, r1
    aba6:	4bc4      	ldr	r3, [pc, #784]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    aba8:	181b      	adds	r3, r3, r0
    abaa:	785d      	ldrb	r5, [r3, #1]
    abac:	2440      	movs	r4, #64	; 0x40
    abae:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    abb0:	48c2      	ldr	r0, [pc, #776]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    abb2:	2400      	movs	r4, #0
    abb4:	7004      	strb	r4, [r0, #0]
		MACRxPacket.altSourceAddress = false;
    abb6:	73c4      	strb	r4, [r0, #15]
		MACRxPacket.SourcePANID.Val = 0xFFFF;
    abb8:	3c01      	subs	r4, #1
    abba:	8204      	strh	r4, [r0, #16]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    abbc:	789b      	ldrb	r3, [r3, #2]
    abbe:	2033      	movs	r0, #51	; 0x33
    abc0:	4383      	bics	r3, r0
		switch (addrMode)
    abc2:	b2d8      	uxtb	r0, r3
    abc4:	2888      	cmp	r0, #136	; 0x88
    abc6:	d100      	bne.n	abca <MiMAC_ReceivedPacket+0x76>
    abc8:	e0e4      	b.n	ad94 <MiMAC_ReceivedPacket+0x240>
    abca:	d90e      	bls.n	abea <MiMAC_ReceivedPacket+0x96>
    abcc:	b2d8      	uxtb	r0, r3
    abce:	28c8      	cmp	r0, #200	; 0xc8
    abd0:	d04c      	beq.n	ac6c <MiMAC_ReceivedPacket+0x118>
    abd2:	28cc      	cmp	r0, #204	; 0xcc
    abd4:	d100      	bne.n	abd8 <MiMAC_ReceivedPacket+0x84>
    abd6:	e0ac      	b.n	ad32 <MiMAC_ReceivedPacket+0x1de>
    abd8:	288c      	cmp	r0, #140	; 0x8c
    abda:	d100      	bne.n	abde <MiMAC_ReceivedPacket+0x8a>
    abdc:	e122      	b.n	ae24 <MiMAC_ReceivedPacket+0x2d0>
			MiMAC_DiscardPacket();
    abde:	4bb8      	ldr	r3, [pc, #736]	; (aec0 <MiMAC_ReceivedPacket+0x36c>)
    abe0:	4798      	blx	r3
			return false;
    abe2:	2000      	movs	r0, #0
    abe4:	e7d2      	b.n	ab8c <MiMAC_ReceivedPacket+0x38>
	for (i = 0; i < BANK_SIZE; i++)
    abe6:	2102      	movs	r1, #2
    abe8:	e7d5      	b.n	ab96 <MiMAC_ReceivedPacket+0x42>
		switch (addrMode)
    abea:	2b08      	cmp	r3, #8
    abec:	d100      	bne.n	abf0 <MiMAC_ReceivedPacket+0x9c>
    abee:	e14d      	b.n	ae8c <MiMAC_ReceivedPacket+0x338>
    abf0:	2880      	cmp	r0, #128	; 0x80
    abf2:	d1f4      	bne.n	abde <MiMAC_ReceivedPacket+0x8a>
				MACRxPacket.flags.bits.broadcast = 1;
    abf4:	48b1      	ldr	r0, [pc, #708]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    abf6:	7803      	ldrb	r3, [r0, #0]
    abf8:	2404      	movs	r4, #4
    abfa:	4323      	orrs	r3, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    abfc:	2480      	movs	r4, #128	; 0x80
    abfe:	4264      	negs	r4, r4
    ac00:	4323      	orrs	r3, r4
    ac02:	7003      	strb	r3, [r0, #0]
				MACRxPacket.altSourceAddress = true;
    ac04:	2301      	movs	r3, #1
    ac06:	73c3      	strb	r3, [r0, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    ac08:	4cab      	ldr	r4, [pc, #684]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ac0a:	3375      	adds	r3, #117	; 0x75
    ac0c:	435a      	muls	r2, r3
    ac0e:	18a5      	adds	r5, r4, r2
    ac10:	792e      	ldrb	r6, [r5, #4]
    ac12:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ac14:	796d      	ldrb	r5, [r5, #5]
    ac16:	7445      	strb	r5, [r0, #17]
    ac18:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    ac1a:	1d8b      	adds	r3, r1, #6
    ac1c:	191b      	adds	r3, r3, r4
    ac1e:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    ac20:	5d13      	ldrb	r3, [r2, r4]
    ac22:	3b0b      	subs	r3, #11
    ac24:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    ac26:	3108      	adds	r1, #8
    ac28:	1909      	adds	r1, r1, r4
    ac2a:	6081      	str	r1, [r0, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    ac2c:	4ba1      	ldr	r3, [pc, #644]	; (aeb4 <MiMAC_ReceivedPacket+0x360>)
    ac2e:	781a      	ldrb	r2, [r3, #0]
    ac30:	2376      	movs	r3, #118	; 0x76
    ac32:	435a      	muls	r2, r3
    ac34:	4ba0      	ldr	r3, [pc, #640]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ac36:	189b      	adds	r3, r3, r2
    ac38:	785b      	ldrb	r3, [r3, #1]
    ac3a:	071b      	lsls	r3, r3, #28
    ac3c:	d500      	bpl.n	ac40 <MiMAC_ReceivedPacket+0xec>
    ac3e:	e152      	b.n	aee6 <MiMAC_ReceivedPacket+0x392>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    ac40:	4b9c      	ldr	r3, [pc, #624]	; (aeb4 <MiMAC_ReceivedPacket+0x360>)
    ac42:	7818      	ldrb	r0, [r3, #0]
    ac44:	2176      	movs	r1, #118	; 0x76
    ac46:	4341      	muls	r1, r0
    ac48:	4a9b      	ldr	r2, [pc, #620]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ac4a:	1852      	adds	r2, r2, r1
    ac4c:	7852      	ldrb	r2, [r2, #1]
    ac4e:	2307      	movs	r3, #7
    ac50:	4013      	ands	r3, r2
    ac52:	2b01      	cmp	r3, #1
    ac54:	d100      	bne.n	ac58 <MiMAC_ReceivedPacket+0x104>
    ac56:	e197      	b.n	af88 <MiMAC_ReceivedPacket+0x434>
    ac58:	2b00      	cmp	r3, #0
    ac5a:	d100      	bne.n	ac5e <MiMAC_ReceivedPacket+0x10a>
    ac5c:	e1af      	b.n	afbe <MiMAC_ReceivedPacket+0x46a>
    ac5e:	2b03      	cmp	r3, #3
    ac60:	d100      	bne.n	ac64 <MiMAC_ReceivedPacket+0x110>
    ac62:	e1a4      	b.n	afae <MiMAC_ReceivedPacket+0x45a>
			MiMAC_DiscardPacket();
    ac64:	4b96      	ldr	r3, [pc, #600]	; (aec0 <MiMAC_ReceivedPacket+0x36c>)
    ac66:	4798      	blx	r3
			return false;
    ac68:	2000      	movs	r0, #0
    ac6a:	e78f      	b.n	ab8c <MiMAC_ReceivedPacket+0x38>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    ac6c:	2076      	movs	r0, #118	; 0x76
    ac6e:	4348      	muls	r0, r1
    ac70:	4b91      	ldr	r3, [pc, #580]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ac72:	181b      	adds	r3, r3, r0
    ac74:	799b      	ldrb	r3, [r3, #6]
    ac76:	2bff      	cmp	r3, #255	; 0xff
    ac78:	d039      	beq.n	acee <MiMAC_ReceivedPacket+0x19a>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    ac7a:	4890      	ldr	r0, [pc, #576]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    ac7c:	7804      	ldrb	r4, [r0, #0]
    ac7e:	2380      	movs	r3, #128	; 0x80
    ac80:	425b      	negs	r3, r3
    ac82:	4323      	orrs	r3, r4
    ac84:	7003      	strb	r3, [r0, #0]
			if (bIntraPAN) // check if it is intraPAN
    ac86:	2d00      	cmp	r5, #0
    ac88:	d03e      	beq.n	ad08 <MiMAC_ReceivedPacket+0x1b4>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    ac8a:	4c8b      	ldr	r4, [pc, #556]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ac8c:	2376      	movs	r3, #118	; 0x76
    ac8e:	435a      	muls	r2, r3
    ac90:	18a5      	adds	r5, r4, r2
    ac92:	792e      	ldrb	r6, [r5, #4]
    ac94:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ac96:	796d      	ldrb	r5, [r5, #5]
    ac98:	7445      	strb	r5, [r0, #17]
    ac9a:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    ac9c:	000b      	movs	r3, r1
    ac9e:	3308      	adds	r3, #8
    aca0:	191b      	adds	r3, r3, r4
    aca2:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    aca4:	5d13      	ldrb	r3, [r2, r4]
    aca6:	3b13      	subs	r3, #19
    aca8:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    acaa:	3110      	adds	r1, #16
    acac:	1909      	adds	r1, r1, r4
    acae:	6081      	str	r1, [r0, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    acb0:	4b80      	ldr	r3, [pc, #512]	; (aeb4 <MiMAC_ReceivedPacket+0x360>)
    acb2:	781a      	ldrb	r2, [r3, #0]
    acb4:	2376      	movs	r3, #118	; 0x76
    acb6:	435a      	muls	r2, r3
    acb8:	4b7f      	ldr	r3, [pc, #508]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    acba:	189b      	adds	r3, r3, r2
    acbc:	785b      	ldrb	r3, [r3, #1]
    acbe:	071b      	lsls	r3, r3, #28
    acc0:	d5be      	bpl.n	ac40 <MiMAC_ReceivedPacket+0xec>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    acc2:	4b7e      	ldr	r3, [pc, #504]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    acc4:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    acc6:	785a      	ldrb	r2, [r3, #1]
    acc8:	0212      	lsls	r2, r2, #8
    acca:	781d      	ldrb	r5, [r3, #0]
    accc:	4315      	orrs	r5, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    acce:	789a      	ldrb	r2, [r3, #2]
    acd0:	0412      	lsls	r2, r2, #16
    acd2:	497c      	ldr	r1, [pc, #496]	; (aec4 <MiMAC_ReceivedPacket+0x370>)
    acd4:	400d      	ands	r5, r1
    acd6:	4315      	orrs	r5, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    acd8:	78db      	ldrb	r3, [r3, #3]
    acda:	061b      	lsls	r3, r3, #24
    acdc:	022a      	lsls	r2, r5, #8
    acde:	0a12      	lsrs	r2, r2, #8
    ace0:	431a      	orrs	r2, r3
    ace2:	0015      	movs	r5, r2
    ace4:	2400      	movs	r4, #0
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    ace6:	4e78      	ldr	r6, [pc, #480]	; (aec8 <MiMAC_ReceivedPacket+0x374>)
				isSameAddress(defaultParamsRomOrRam.ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    ace8:	4b74      	ldr	r3, [pc, #464]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    acea:	4699      	mov	r9, r3
    acec:	e102      	b.n	aef4 <MiMAC_ReceivedPacket+0x3a0>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    acee:	2076      	movs	r0, #118	; 0x76
    acf0:	4348      	muls	r0, r1
    acf2:	4b71      	ldr	r3, [pc, #452]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    acf4:	181b      	adds	r3, r3, r0
    acf6:	79db      	ldrb	r3, [r3, #7]
    acf8:	2bff      	cmp	r3, #255	; 0xff
    acfa:	d1be      	bne.n	ac7a <MiMAC_ReceivedPacket+0x126>
				MACRxPacket.flags.bits.broadcast = 1;
    acfc:	486f      	ldr	r0, [pc, #444]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    acfe:	7803      	ldrb	r3, [r0, #0]
    ad00:	2404      	movs	r4, #4
    ad02:	4323      	orrs	r3, r4
    ad04:	7003      	strb	r3, [r0, #0]
    ad06:	e7b8      	b.n	ac7a <MiMAC_ReceivedPacket+0x126>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    ad08:	486c      	ldr	r0, [pc, #432]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    ad0a:	4c6b      	ldr	r4, [pc, #428]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ad0c:	2376      	movs	r3, #118	; 0x76
    ad0e:	435a      	muls	r2, r3
    ad10:	18a5      	adds	r5, r4, r2
    ad12:	7a2e      	ldrb	r6, [r5, #8]
    ad14:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    ad16:	7a6d      	ldrb	r5, [r5, #9]
    ad18:	7445      	strb	r5, [r0, #17]
    ad1a:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    ad1c:	000b      	movs	r3, r1
    ad1e:	330a      	adds	r3, #10
    ad20:	191b      	adds	r3, r3, r4
    ad22:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    ad24:	5d13      	ldrb	r3, [r2, r4]
    ad26:	3b15      	subs	r3, #21
    ad28:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    ad2a:	3112      	adds	r1, #18
    ad2c:	1909      	adds	r1, r1, r4
    ad2e:	6081      	str	r1, [r0, #8]
    ad30:	e7be      	b.n	acb0 <MiMAC_ReceivedPacket+0x15c>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    ad32:	4862      	ldr	r0, [pc, #392]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    ad34:	7804      	ldrb	r4, [r0, #0]
    ad36:	2380      	movs	r3, #128	; 0x80
    ad38:	425b      	negs	r3, r3
    ad3a:	4323      	orrs	r3, r4
    ad3c:	7003      	strb	r3, [r0, #0]
			if (bIntraPAN) // check if it is intraPAN
    ad3e:	2d00      	cmp	r5, #0
    ad40:	d013      	beq.n	ad6a <MiMAC_ReceivedPacket+0x216>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    ad42:	4c5d      	ldr	r4, [pc, #372]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ad44:	2376      	movs	r3, #118	; 0x76
    ad46:	435a      	muls	r2, r3
    ad48:	18a5      	adds	r5, r4, r2
    ad4a:	792e      	ldrb	r6, [r5, #4]
    ad4c:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ad4e:	796d      	ldrb	r5, [r5, #5]
    ad50:	7445      	strb	r5, [r0, #17]
    ad52:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    ad54:	000b      	movs	r3, r1
    ad56:	330e      	adds	r3, #14
    ad58:	191b      	adds	r3, r3, r4
    ad5a:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    ad5c:	5d13      	ldrb	r3, [r2, r4]
    ad5e:	3b19      	subs	r3, #25
    ad60:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    ad62:	3116      	adds	r1, #22
    ad64:	1909      	adds	r1, r1, r4
    ad66:	6081      	str	r1, [r0, #8]
    ad68:	e7a2      	b.n	acb0 <MiMAC_ReceivedPacket+0x15c>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    ad6a:	4854      	ldr	r0, [pc, #336]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    ad6c:	4c52      	ldr	r4, [pc, #328]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ad6e:	2376      	movs	r3, #118	; 0x76
    ad70:	435a      	muls	r2, r3
    ad72:	18a5      	adds	r5, r4, r2
    ad74:	7bae      	ldrb	r6, [r5, #14]
    ad76:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    ad78:	7bed      	ldrb	r5, [r5, #15]
    ad7a:	7445      	strb	r5, [r0, #17]
    ad7c:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    ad7e:	000b      	movs	r3, r1
    ad80:	3310      	adds	r3, #16
    ad82:	191b      	adds	r3, r3, r4
    ad84:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    ad86:	5d13      	ldrb	r3, [r2, r4]
    ad88:	3b1b      	subs	r3, #27
    ad8a:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    ad8c:	3118      	adds	r1, #24
    ad8e:	1909      	adds	r1, r1, r4
    ad90:	6081      	str	r1, [r0, #8]
    ad92:	e78d      	b.n	acb0 <MiMAC_ReceivedPacket+0x15c>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    ad94:	2076      	movs	r0, #118	; 0x76
    ad96:	4348      	muls	r0, r1
    ad98:	4b47      	ldr	r3, [pc, #284]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ad9a:	181b      	adds	r3, r3, r0
    ad9c:	799b      	ldrb	r3, [r3, #6]
    ad9e:	2bff      	cmp	r3, #255	; 0xff
    ada0:	d01e      	beq.n	ade0 <MiMAC_ReceivedPacket+0x28c>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    ada2:	4b46      	ldr	r3, [pc, #280]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    ada4:	781c      	ldrb	r4, [r3, #0]
    ada6:	2080      	movs	r0, #128	; 0x80
    ada8:	4240      	negs	r0, r0
    adaa:	4320      	orrs	r0, r4
    adac:	7018      	strb	r0, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    adae:	2001      	movs	r0, #1
    adb0:	73d8      	strb	r0, [r3, #15]
				if (bIntraPAN == false)
    adb2:	2d00      	cmp	r5, #0
    adb4:	d121      	bne.n	adfa <MiMAC_ReceivedPacket+0x2a6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    adb6:	0018      	movs	r0, r3
    adb8:	4c3f      	ldr	r4, [pc, #252]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    adba:	2376      	movs	r3, #118	; 0x76
    adbc:	435a      	muls	r2, r3
    adbe:	18a5      	adds	r5, r4, r2
    adc0:	7a2e      	ldrb	r6, [r5, #8]
    adc2:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    adc4:	7a6d      	ldrb	r5, [r5, #9]
    adc6:	7445      	strb	r5, [r0, #17]
    adc8:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    adca:	000b      	movs	r3, r1
    adcc:	330a      	adds	r3, #10
    adce:	191b      	adds	r3, r3, r4
    add0:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    add2:	5d13      	ldrb	r3, [r2, r4]
    add4:	3b0f      	subs	r3, #15
    add6:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    add8:	310c      	adds	r1, #12
    adda:	1909      	adds	r1, r1, r4
    addc:	6081      	str	r1, [r0, #8]
    adde:	e725      	b.n	ac2c <MiMAC_ReceivedPacket+0xd8>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    ade0:	2076      	movs	r0, #118	; 0x76
    ade2:	4348      	muls	r0, r1
    ade4:	4b34      	ldr	r3, [pc, #208]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ade6:	181b      	adds	r3, r3, r0
    ade8:	79db      	ldrb	r3, [r3, #7]
    adea:	2bff      	cmp	r3, #255	; 0xff
    adec:	d1d9      	bne.n	ada2 <MiMAC_ReceivedPacket+0x24e>
					MACRxPacket.flags.bits.broadcast = 1;
    adee:	4833      	ldr	r0, [pc, #204]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    adf0:	7803      	ldrb	r3, [r0, #0]
    adf2:	2404      	movs	r4, #4
    adf4:	4323      	orrs	r3, r4
    adf6:	7003      	strb	r3, [r0, #0]
    adf8:	e7d3      	b.n	ada2 <MiMAC_ReceivedPacket+0x24e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    adfa:	4830      	ldr	r0, [pc, #192]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    adfc:	4c2e      	ldr	r4, [pc, #184]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    adfe:	2376      	movs	r3, #118	; 0x76
    ae00:	435a      	muls	r2, r3
    ae02:	18a5      	adds	r5, r4, r2
    ae04:	792e      	ldrb	r6, [r5, #4]
    ae06:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ae08:	796d      	ldrb	r5, [r5, #5]
    ae0a:	7445      	strb	r5, [r0, #17]
    ae0c:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    ae0e:	000b      	movs	r3, r1
    ae10:	3308      	adds	r3, #8
    ae12:	191b      	adds	r3, r3, r4
    ae14:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    ae16:	5d13      	ldrb	r3, [r2, r4]
    ae18:	3b0d      	subs	r3, #13
    ae1a:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    ae1c:	310a      	adds	r1, #10
    ae1e:	1909      	adds	r1, r1, r4
    ae20:	6081      	str	r1, [r0, #8]
    ae22:	e703      	b.n	ac2c <MiMAC_ReceivedPacket+0xd8>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    ae24:	4b25      	ldr	r3, [pc, #148]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    ae26:	781c      	ldrb	r4, [r3, #0]
    ae28:	2080      	movs	r0, #128	; 0x80
    ae2a:	4240      	negs	r0, r0
    ae2c:	4320      	orrs	r0, r4
    ae2e:	7018      	strb	r0, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    ae30:	2001      	movs	r0, #1
    ae32:	73d8      	strb	r0, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    ae34:	2d00      	cmp	r5, #0
    ae36:	d014      	beq.n	ae62 <MiMAC_ReceivedPacket+0x30e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    ae38:	0018      	movs	r0, r3
    ae3a:	4c1f      	ldr	r4, [pc, #124]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ae3c:	2376      	movs	r3, #118	; 0x76
    ae3e:	435a      	muls	r2, r3
    ae40:	18a5      	adds	r5, r4, r2
    ae42:	792e      	ldrb	r6, [r5, #4]
    ae44:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    ae46:	796d      	ldrb	r5, [r5, #5]
    ae48:	7445      	strb	r5, [r0, #17]
    ae4a:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    ae4c:	000b      	movs	r3, r1
    ae4e:	330d      	adds	r3, #13
    ae50:	191b      	adds	r3, r3, r4
    ae52:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    ae54:	5d13      	ldrb	r3, [r2, r4]
    ae56:	3b13      	subs	r3, #19
    ae58:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    ae5a:	3110      	adds	r1, #16
    ae5c:	1909      	adds	r1, r1, r4
    ae5e:	6081      	str	r1, [r0, #8]
    ae60:	e6e4      	b.n	ac2c <MiMAC_ReceivedPacket+0xd8>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    ae62:	4816      	ldr	r0, [pc, #88]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    ae64:	4c14      	ldr	r4, [pc, #80]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ae66:	2376      	movs	r3, #118	; 0x76
    ae68:	435a      	muls	r2, r3
    ae6a:	18a5      	adds	r5, r4, r2
    ae6c:	7b6e      	ldrb	r6, [r5, #13]
    ae6e:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    ae70:	7bad      	ldrb	r5, [r5, #14]
    ae72:	7445      	strb	r5, [r0, #17]
    ae74:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    ae76:	000b      	movs	r3, r1
    ae78:	330f      	adds	r3, #15
    ae7a:	191b      	adds	r3, r3, r4
    ae7c:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    ae7e:	5d13      	ldrb	r3, [r2, r4]
    ae80:	3b15      	subs	r3, #21
    ae82:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    ae84:	3112      	adds	r1, #18
    ae86:	1909      	adds	r1, r1, r4
    ae88:	6081      	str	r1, [r0, #8]
    ae8a:	e6cf      	b.n	ac2c <MiMAC_ReceivedPacket+0xd8>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    ae8c:	2076      	movs	r0, #118	; 0x76
    ae8e:	4348      	muls	r0, r1
    ae90:	4b09      	ldr	r3, [pc, #36]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ae92:	181b      	adds	r3, r3, r0
    ae94:	799b      	ldrb	r3, [r3, #6]
    ae96:	2bff      	cmp	r3, #255	; 0xff
    ae98:	d018      	beq.n	aecc <MiMAC_ReceivedPacket+0x378>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    ae9a:	4808      	ldr	r0, [pc, #32]	; (aebc <MiMAC_ReceivedPacket+0x368>)
    ae9c:	4c06      	ldr	r4, [pc, #24]	; (aeb8 <MiMAC_ReceivedPacket+0x364>)
    ae9e:	2376      	movs	r3, #118	; 0x76
    aea0:	435a      	muls	r2, r3
    aea2:	5d12      	ldrb	r2, [r2, r4]
    aea4:	3a0a      	subs	r2, #10
    aea6:	7302      	strb	r2, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    aea8:	434b      	muls	r3, r1
    aeaa:	3308      	adds	r3, #8
    aeac:	191b      	adds	r3, r3, r4
    aeae:	6083      	str	r3, [r0, #8]
			break;
    aeb0:	e6bc      	b.n	ac2c <MiMAC_ReceivedPacket+0xd8>
    aeb2:	46c0      	nop			; (mov r8, r8)
    aeb4:	2000000a 	.word	0x2000000a
    aeb8:	20001e68 	.word	0x20001e68
    aebc:	2000205c 	.word	0x2000205c
    aec0:	0000ab39 	.word	0x0000ab39
    aec4:	ff00ffff 	.word	0xff00ffff
    aec8:	20000024 	.word	0x20000024
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    aecc:	2076      	movs	r0, #118	; 0x76
    aece:	4348      	muls	r0, r1
    aed0:	4b40      	ldr	r3, [pc, #256]	; (afd4 <MiMAC_ReceivedPacket+0x480>)
    aed2:	181b      	adds	r3, r3, r0
    aed4:	79db      	ldrb	r3, [r3, #7]
    aed6:	2bff      	cmp	r3, #255	; 0xff
    aed8:	d1df      	bne.n	ae9a <MiMAC_ReceivedPacket+0x346>
					MACRxPacket.flags.bits.broadcast = 1;
    aeda:	483f      	ldr	r0, [pc, #252]	; (afd8 <MiMAC_ReceivedPacket+0x484>)
    aedc:	7803      	ldrb	r3, [r0, #0]
    aede:	2404      	movs	r4, #4
    aee0:	4323      	orrs	r3, r4
    aee2:	7003      	strb	r3, [r0, #0]
    aee4:	e7d9      	b.n	ae9a <MiMAC_ReceivedPacket+0x346>
				MiMAC_DiscardPacket();
    aee6:	4b3d      	ldr	r3, [pc, #244]	; (afdc <MiMAC_ReceivedPacket+0x488>)
    aee8:	4798      	blx	r3
				return false;
    aeea:	2000      	movs	r0, #0
    aeec:	e64e      	b.n	ab8c <MiMAC_ReceivedPacket+0x38>
    aeee:	3401      	adds	r4, #1
			for (i = 0; i < CONNECTION_SIZE; i++)
    aef0:	2c14      	cmp	r4, #20
    aef2:	d01a      	beq.n	af2a <MiMAC_ReceivedPacket+0x3d6>
    aef4:	b2e7      	uxtb	r7, r4
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    aef6:	0120      	lsls	r0, r4, #4
    aef8:	6833      	ldr	r3, [r6, #0]
    aefa:	469c      	mov	ip, r3
    aefc:	4460      	add	r0, ip
    aefe:	7b03      	ldrb	r3, [r0, #12]
    af00:	2b7f      	cmp	r3, #127	; 0x7f
    af02:	d9f4      	bls.n	aeee <MiMAC_ReceivedPacket+0x39a>
				isSameAddress(defaultParamsRomOrRam.ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    af04:	3004      	adds	r0, #4
    af06:	464b      	mov	r3, r9
    af08:	6859      	ldr	r1, [r3, #4]
    af0a:	4b35      	ldr	r3, [pc, #212]	; (afe0 <MiMAC_ReceivedPacket+0x48c>)
    af0c:	4798      	blx	r3
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    af0e:	2800      	cmp	r0, #0
    af10:	d0ed      	beq.n	aeee <MiMAC_ReceivedPacket+0x39a>
			if (i < CONNECTION_SIZE)
    af12:	2f13      	cmp	r7, #19
    af14:	d809      	bhi.n	af2a <MiMAC_ReceivedPacket+0x3d6>
				if (IncomingFrameCounter[i].Val > FrameCounter.Val)
    af16:	23ff      	movs	r3, #255	; 0xff
    af18:	401c      	ands	r4, r3
    af1a:	00a2      	lsls	r2, r4, #2
    af1c:	4b31      	ldr	r3, [pc, #196]	; (afe4 <MiMAC_ReceivedPacket+0x490>)
    af1e:	58d3      	ldr	r3, [r2, r3]
    af20:	42ab      	cmp	r3, r5
    af22:	d82b      	bhi.n	af7c <MiMAC_ReceivedPacket+0x428>
					IncomingFrameCounter[i].Val = FrameCounter.Val;
    af24:	00a4      	lsls	r4, r4, #2
    af26:	4b2f      	ldr	r3, [pc, #188]	; (afe4 <MiMAC_ReceivedPacket+0x490>)
    af28:	50e5      	str	r5, [r4, r3]
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    af2a:	492b      	ldr	r1, [pc, #172]	; (afd8 <MiMAC_ReceivedPacket+0x484>)
    af2c:	7b0b      	ldrb	r3, [r1, #12]
    af2e:	3b05      	subs	r3, #5
    af30:	b2db      	uxtb	r3, r3
    af32:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    af34:	6888      	ldr	r0, [r1, #8]
    af36:	18c3      	adds	r3, r0, r3
    af38:	785c      	ldrb	r4, [r3, #1]
    af3a:	4a2b      	ldr	r2, [pc, #172]	; (afe8 <MiMAC_ReceivedPacket+0x494>)
    af3c:	7014      	strb	r4, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    af3e:	789c      	ldrb	r4, [r3, #2]
    af40:	7054      	strb	r4, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    af42:	78dc      	ldrb	r4, [r3, #3]
    af44:	7094      	strb	r4, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    af46:	791b      	ldrb	r3, [r3, #4]
    af48:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    af4a:	684a      	ldr	r2, [r1, #4]
    af4c:	310c      	adds	r1, #12
    af4e:	3005      	adds	r0, #5
    af50:	4b26      	ldr	r3, [pc, #152]	; (afec <MiMAC_ReceivedPacket+0x498>)
    af52:	781c      	ldrb	r4, [r3, #0]
    af54:	2376      	movs	r3, #118	; 0x76
    af56:	435c      	muls	r4, r3
    af58:	4b1e      	ldr	r3, [pc, #120]	; (afd4 <MiMAC_ReceivedPacket+0x480>)
    af5a:	191b      	adds	r3, r3, r4
    af5c:	785b      	ldrb	r3, [r3, #1]
    af5e:	9300      	str	r3, [sp, #0]
    af60:	002b      	movs	r3, r5
    af62:	4c23      	ldr	r4, [pc, #140]	; (aff0 <MiMAC_ReceivedPacket+0x49c>)
    af64:	47a0      	blx	r4
    af66:	2800      	cmp	r0, #0
    af68:	d00b      	beq.n	af82 <MiMAC_ReceivedPacket+0x42e>
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    af6a:	4b1b      	ldr	r3, [pc, #108]	; (afd8 <MiMAC_ReceivedPacket+0x484>)
    af6c:	689a      	ldr	r2, [r3, #8]
    af6e:	3205      	adds	r2, #5
    af70:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    af72:	781a      	ldrb	r2, [r3, #0]
    af74:	2108      	movs	r1, #8
    af76:	430a      	orrs	r2, r1
    af78:	701a      	strb	r2, [r3, #0]
    af7a:	e661      	b.n	ac40 <MiMAC_ReceivedPacket+0xec>
					MiMAC_DiscardPacket();
    af7c:	4b17      	ldr	r3, [pc, #92]	; (afdc <MiMAC_ReceivedPacket+0x488>)
    af7e:	4798      	blx	r3
					return false;
    af80:	e7b3      	b.n	aeea <MiMAC_ReceivedPacket+0x396>
				MiMAC_DiscardPacket();
    af82:	4b16      	ldr	r3, [pc, #88]	; (afdc <MiMAC_ReceivedPacket+0x488>)
    af84:	4798      	blx	r3
				return false;
    af86:	e7b0      	b.n	aeea <MiMAC_ReceivedPacket+0x396>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    af88:	4a13      	ldr	r2, [pc, #76]	; (afd8 <MiMAC_ReceivedPacket+0x484>)
    af8a:	7813      	ldrb	r3, [r2, #0]
    af8c:	2103      	movs	r1, #3
    af8e:	438b      	bics	r3, r1
    af90:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    af92:	4b10      	ldr	r3, [pc, #64]	; (afd4 <MiMAC_ReceivedPacket+0x480>)
    af94:	2276      	movs	r2, #118	; 0x76
    af96:	4342      	muls	r2, r0
    af98:	5cd0      	ldrb	r0, [r2, r3]
    af9a:	490f      	ldr	r1, [pc, #60]	; (afd8 <MiMAC_ReceivedPacket+0x484>)
    af9c:	189b      	adds	r3, r3, r2
    af9e:	181a      	adds	r2, r3, r0
    afa0:	3a01      	subs	r2, #1
    afa2:	7812      	ldrb	r2, [r2, #0]
    afa4:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    afa6:	5c1b      	ldrb	r3, [r3, r0]
    afa8:	734b      	strb	r3, [r1, #13]
		return true;
    afaa:	2001      	movs	r0, #1
    afac:	e5ee      	b.n	ab8c <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    afae:	4a0a      	ldr	r2, [pc, #40]	; (afd8 <MiMAC_ReceivedPacket+0x484>)
    afb0:	7813      	ldrb	r3, [r2, #0]
    afb2:	2103      	movs	r1, #3
    afb4:	438b      	bics	r3, r1
    afb6:	2101      	movs	r1, #1
    afb8:	430b      	orrs	r3, r1
    afba:	7013      	strb	r3, [r2, #0]
			break;
    afbc:	e7e9      	b.n	af92 <MiMAC_ReceivedPacket+0x43e>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    afbe:	4a06      	ldr	r2, [pc, #24]	; (afd8 <MiMAC_ReceivedPacket+0x484>)
    afc0:	7813      	ldrb	r3, [r2, #0]
    afc2:	2103      	movs	r1, #3
    afc4:	430b      	orrs	r3, r1
    afc6:	7013      	strb	r3, [r2, #0]
			break;
    afc8:	e7e3      	b.n	af92 <MiMAC_ReceivedPacket+0x43e>
			BankIndex = i;
    afca:	2200      	movs	r2, #0
    afcc:	4b07      	ldr	r3, [pc, #28]	; (afec <MiMAC_ReceivedPacket+0x498>)
    afce:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
    afd0:	2100      	movs	r1, #0
    afd2:	e5e5      	b.n	aba0 <MiMAC_ReceivedPacket+0x4c>
    afd4:	20001e68 	.word	0x20001e68
    afd8:	2000205c 	.word	0x2000205c
    afdc:	0000ab39 	.word	0x0000ab39
    afe0:	0000babd 	.word	0x0000babd
    afe4:	20002084 	.word	0x20002084
    afe8:	20001e48 	.word	0x20001e48
    afec:	2000000a 	.word	0x2000000a
    aff0:	0000a5e1 	.word	0x0000a5e1

0000aff4 <MiMAC_SymbolToTicks>:
	return SYMBOLS_TO_TICKS(symbols);
    aff4:	4b05      	ldr	r3, [pc, #20]	; (b00c <MiMAC_SymbolToTicks+0x18>)
    aff6:	781b      	ldrb	r3, [r3, #0]
    aff8:	2b00      	cmp	r3, #0
    affa:	d004      	beq.n	b006 <MiMAC_SymbolToTicks+0x12>
    affc:	0083      	lsls	r3, r0, #2
    affe:	1818      	adds	r0, r3, r0
    b000:	0083      	lsls	r3, r0, #2
    b002:	18c0      	adds	r0, r0, r3
}
    b004:	4770      	bx	lr
	return SYMBOLS_TO_TICKS(symbols);
    b006:	3332      	adds	r3, #50	; 0x32
    b008:	4358      	muls	r0, r3
    b00a:	e7fb      	b.n	b004 <MiMAC_SymbolToTicks+0x10>
    b00c:	2000000d 	.word	0x2000000d

0000b010 <MiMAC_Task>:

void MiMAC_Task(void)
{
    b010:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    b012:	4b0b      	ldr	r3, [pc, #44]	; (b040 <MiMAC_Task+0x30>)
    b014:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    b016:	4b0b      	ldr	r3, [pc, #44]	; (b044 <MiMAC_Task+0x34>)
    b018:	681b      	ldr	r3, [r3, #0]
    b01a:	2b00      	cmp	r3, #0
    b01c:	d003      	beq.n	b026 <MiMAC_Task+0x16>
    b01e:	4a0a      	ldr	r2, [pc, #40]	; (b048 <MiMAC_Task+0x38>)
    b020:	7812      	ldrb	r2, [r2, #0]
    b022:	2a00      	cmp	r2, #0
    b024:	d100      	bne.n	b028 <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    b026:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    b028:	4a08      	ldr	r2, [pc, #32]	; (b04c <MiMAC_Task+0x3c>)
    b02a:	6812      	ldr	r2, [r2, #0]
    b02c:	4908      	ldr	r1, [pc, #32]	; (b050 <MiMAC_Task+0x40>)
    b02e:	7809      	ldrb	r1, [r1, #0]
    b030:	4808      	ldr	r0, [pc, #32]	; (b054 <MiMAC_Task+0x44>)
    b032:	7800      	ldrb	r0, [r0, #0]
    b034:	4798      	blx	r3
	  dataConfAvailable = false;
    b036:	2200      	movs	r2, #0
    b038:	4b03      	ldr	r3, [pc, #12]	; (b048 <MiMAC_Task+0x38>)
    b03a:	701a      	strb	r2, [r3, #0]
}
    b03c:	e7f3      	b.n	b026 <MiMAC_Task+0x16>
    b03e:	46c0      	nop			; (mov r8, r8)
    b040:	0000b471 	.word	0x0000b471
    b044:	20000364 	.word	0x20000364
    b048:	20000360 	.word	0x20000360
    b04c:	2000036c 	.word	0x2000036c
    b050:	20001e30 	.word	0x20001e30
    b054:	20000368 	.word	0x20000368

0000b058 <phyRssiBaseVal>:

/*************************************************************************//**
*****************************************************************************/
static int8_t phyRssiBaseVal(void)
{
	bool oqpsk = (phyModulation & (1 << BPSK_OQPSK));
    b058:	4b07      	ldr	r3, [pc, #28]	; (b078 <phyRssiBaseVal+0x20>)
    b05a:	7818      	ldrb	r0, [r3, #0]
	bool sub   = (phyModulation & (1 << SUB_MODE));
	bool rc    = (phyModulation & (1 << 4 /*ALT_SPEC*/));

	if (0 == oqpsk) {
    b05c:	0703      	lsls	r3, r0, #28
    b05e:	d403      	bmi.n	b068 <phyRssiBaseVal+0x10>
		if (0 == sub) {
    b060:	0740      	lsls	r0, r0, #29
			return PHY_RSSI_BASE_VAL_BPSK_20;
		} else {
			return PHY_RSSI_BASE_VAL_BPSK_40;
    b062:	0fc0      	lsrs	r0, r0, #31
    b064:	3864      	subs	r0, #100	; 0x64
			} else {
				return PHY_RSSI_BASE_VAL_OQPSK_RC_250;
			}
		}
	}
}
    b066:	4770      	bx	lr
			if (0 == rc) {
    b068:	2314      	movs	r3, #20
    b06a:	4018      	ands	r0, r3
				return PHY_RSSI_BASE_VAL_OQPSK_RC_250;
    b06c:	3814      	subs	r0, #20
    b06e:	4243      	negs	r3, r0
    b070:	4158      	adcs	r0, r3
    b072:	3862      	subs	r0, #98	; 0x62
    b074:	e7f7      	b.n	b066 <phyRssiBaseVal+0xe>
    b076:	46c0      	nop			; (mov r8, r8)
    b078:	20000372 	.word	0x20000372

0000b07c <phySetChannel>:
{
    b07c:	b510      	push	{r4, lr}
	phyModulation = phy_mod_user_setting & 0x3C;	//ignore last 2bits, it is used to pick up correct RSSI base value.
    b07e:	4b11      	ldr	r3, [pc, #68]	; (b0c4 <phySetChannel+0x48>)
    b080:	781a      	ldrb	r2, [r3, #0]
    b082:	233c      	movs	r3, #60	; 0x3c
    b084:	4013      	ands	r3, r2
    b086:	4a10      	ldr	r2, [pc, #64]	; (b0c8 <phySetChannel+0x4c>)
    b088:	7013      	strb	r3, [r2, #0]
	phyWriteRegister(CC_CTRL_1_REG, phyBand);
    b08a:	4c10      	ldr	r4, [pc, #64]	; (b0cc <phySetChannel+0x50>)
	trx_reg_write(reg, value);
    b08c:	7821      	ldrb	r1, [r4, #0]
    b08e:	2014      	movs	r0, #20
    b090:	4b0f      	ldr	r3, [pc, #60]	; (b0d0 <phySetChannel+0x54>)
    b092:	4798      	blx	r3
	if (0 == phyBand) {
    b094:	7823      	ldrb	r3, [r4, #0]
    b096:	2b00      	cmp	r3, #0
    b098:	d005      	beq.n	b0a6 <phySetChannel+0x2a>
		phyWriteRegister(CC_CTRL_0_REG, phyChannel);
    b09a:	4b0e      	ldr	r3, [pc, #56]	; (b0d4 <phySetChannel+0x58>)
	trx_reg_write(reg, value);
    b09c:	7819      	ldrb	r1, [r3, #0]
    b09e:	2013      	movs	r0, #19
    b0a0:	4b0b      	ldr	r3, [pc, #44]	; (b0d0 <phySetChannel+0x54>)
    b0a2:	4798      	blx	r3
}
    b0a4:	bd10      	pop	{r4, pc}
	value = trx_reg_read(reg);
    b0a6:	2008      	movs	r0, #8
    b0a8:	4b0b      	ldr	r3, [pc, #44]	; (b0d8 <phySetChannel+0x5c>)
    b0aa:	4798      	blx	r3
		reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    b0ac:	231f      	movs	r3, #31
    b0ae:	0001      	movs	r1, r0
    b0b0:	4399      	bics	r1, r3
		phyWriteRegister(PHY_CC_CCA_REG, reg | phyChannel);
    b0b2:	4b08      	ldr	r3, [pc, #32]	; (b0d4 <phySetChannel+0x58>)
    b0b4:	7818      	ldrb	r0, [r3, #0]
    b0b6:	4301      	orrs	r1, r0
	trx_reg_write(reg, value);
    b0b8:	b2c9      	uxtb	r1, r1
    b0ba:	2008      	movs	r0, #8
    b0bc:	4b04      	ldr	r3, [pc, #16]	; (b0d0 <phySetChannel+0x54>)
    b0be:	4798      	blx	r3
    b0c0:	e7f0      	b.n	b0a4 <phySetChannel+0x28>
    b0c2:	46c0      	nop			; (mov r8, r8)
    b0c4:	20001cce 	.word	0x20001cce
    b0c8:	20000372 	.word	0x20000372
    b0cc:	20000370 	.word	0x20000370
    b0d0:	0000d8c1 	.word	0x0000d8c1
    b0d4:	20000371 	.word	0x20000371
    b0d8:	0000d7c5 	.word	0x0000d7c5

0000b0dc <phyTrxSetState>:
{
    b0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0de:	0004      	movs	r4, r0
    if (PHY_STATE_SLEEP == phyState)
    b0e0:	4b0f      	ldr	r3, [pc, #60]	; (b120 <phyTrxSetState+0x44>)
    b0e2:	781b      	ldrb	r3, [r3, #0]
    b0e4:	2b02      	cmp	r3, #2
    b0e6:	d016      	beq.n	b116 <phyTrxSetState+0x3a>
	trx_reg_write(reg, value);
    b0e8:	4f0e      	ldr	r7, [pc, #56]	; (b124 <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    b0ea:	4e0f      	ldr	r6, [pc, #60]	; (b128 <phyTrxSetState+0x4c>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b0ec:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    b0ee:	2103      	movs	r1, #3
    b0f0:	2002      	movs	r0, #2
    b0f2:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b0f4:	2001      	movs	r0, #1
    b0f6:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b0f8:	4028      	ands	r0, r5
    b0fa:	2808      	cmp	r0, #8
    b0fc:	d1f7      	bne.n	b0ee <phyTrxSetState+0x12>
	trx_reg_write(reg, value);
    b0fe:	4f09      	ldr	r7, [pc, #36]	; (b124 <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    b100:	4e09      	ldr	r6, [pc, #36]	; (b128 <phyTrxSetState+0x4c>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b102:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    b104:	0021      	movs	r1, r4
    b106:	2002      	movs	r0, #2
    b108:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b10a:	2001      	movs	r0, #1
    b10c:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b10e:	4028      	ands	r0, r5
    b110:	4284      	cmp	r4, r0
    b112:	d1f7      	bne.n	b104 <phyTrxSetState+0x28>
}
    b114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		port_base->OUTCLR.reg = pin_mask;
    b116:	2280      	movs	r2, #128	; 0x80
    b118:	0352      	lsls	r2, r2, #13
    b11a:	4b04      	ldr	r3, [pc, #16]	; (b12c <phyTrxSetState+0x50>)
    b11c:	615a      	str	r2, [r3, #20]
    b11e:	e7e3      	b.n	b0e8 <phyTrxSetState+0xc>
    b120:	200003f5 	.word	0x200003f5
    b124:	0000d8c1 	.word	0x0000d8c1
    b128:	0000d7c5 	.word	0x0000d7c5
    b12c:	40002800 	.word	0x40002800

0000b130 <phySetRxState>:
{
    b130:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    b132:	2008      	movs	r0, #8
    b134:	4b08      	ldr	r3, [pc, #32]	; (b158 <phySetRxState+0x28>)
    b136:	4798      	blx	r3
	value = trx_reg_read(reg);
    b138:	200f      	movs	r0, #15
    b13a:	4b08      	ldr	r3, [pc, #32]	; (b15c <phySetRxState+0x2c>)
    b13c:	4798      	blx	r3
	if (phyRxState) {
    b13e:	4b08      	ldr	r3, [pc, #32]	; (b160 <phySetRxState+0x30>)
    b140:	781b      	ldrb	r3, [r3, #0]
    b142:	2b00      	cmp	r3, #0
    b144:	d100      	bne.n	b148 <phySetRxState+0x18>
}
    b146:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    b148:	2016      	movs	r0, #22
    b14a:	4b03      	ldr	r3, [pc, #12]	; (b158 <phySetRxState+0x28>)
    b14c:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    b14e:	2201      	movs	r2, #1
    b150:	4b04      	ldr	r3, [pc, #16]	; (b164 <phySetRxState+0x34>)
    b152:	701a      	strb	r2, [r3, #0]
}
    b154:	e7f7      	b.n	b146 <phySetRxState+0x16>
    b156:	46c0      	nop			; (mov r8, r8)
    b158:	0000b0dd 	.word	0x0000b0dd
    b15c:	0000d7c5 	.word	0x0000d7c5
    b160:	200003f4 	.word	0x200003f4
    b164:	200003f5 	.word	0x200003f5

0000b168 <PHY_DataReq>:
{
    b168:	b570      	push	{r4, r5, r6, lr}
    b16a:	0005      	movs	r5, r0
    phyDataRequestPtr = (PhyTxFrame_t *) MiMem_Alloc(sizeof(PhyTxFrame_t));
    b16c:	2010      	movs	r0, #16
    b16e:	4b09      	ldr	r3, [pc, #36]	; (b194 <PHY_DataReq+0x2c>)
    b170:	4798      	blx	r3
    b172:	1e04      	subs	r4, r0, #0
    if (NULL == phyDataRequestPtr)
    b174:	d009      	beq.n	b18a <PHY_DataReq+0x22>
    memcpy(&phyDataRequestPtr->phyDataReq, phyDataReq, sizeof(PHY_DataReq_t));
    b176:	3004      	adds	r0, #4
    b178:	220c      	movs	r2, #12
    b17a:	0029      	movs	r1, r5
    b17c:	4b06      	ldr	r3, [pc, #24]	; (b198 <PHY_DataReq+0x30>)
    b17e:	4798      	blx	r3
    miQueueAppend(&phyTxQueue, (miQueueBuffer_t *)phyDataRequestPtr);
    b180:	0021      	movs	r1, r4
    b182:	4806      	ldr	r0, [pc, #24]	; (b19c <PHY_DataReq+0x34>)
    b184:	4b06      	ldr	r3, [pc, #24]	; (b1a0 <PHY_DataReq+0x38>)
    b186:	4798      	blx	r3
}
    b188:	bd70      	pop	{r4, r5, r6, pc}
        phyDataReq->confirmCallback(PHY_STATUS_ERROR);
    b18a:	68ab      	ldr	r3, [r5, #8]
    b18c:	2001      	movs	r0, #1
    b18e:	4798      	blx	r3
        return;
    b190:	e7fa      	b.n	b188 <PHY_DataReq+0x20>
    b192:	46c0      	nop			; (mov r8, r8)
    b194:	0000ce0d 	.word	0x0000ce0d
    b198:	00010a97 	.word	0x00010a97
    b19c:	20001e5c 	.word	0x20001e5c
    b1a0:	0000d009 	.word	0x0000d009

0000b1a4 <PHY_TxHandler>:
{
    b1a4:	b510      	push	{r4, lr}
	if (phyTxQueue.size && ((phyState == PHY_STATE_IDLE) || (phyState == PHY_STATE_SLEEP)))
    b1a6:	4b1e      	ldr	r3, [pc, #120]	; (b220 <PHY_TxHandler+0x7c>)
    b1a8:	7a1b      	ldrb	r3, [r3, #8]
    b1aa:	2b00      	cmp	r3, #0
    b1ac:	d004      	beq.n	b1b8 <PHY_TxHandler+0x14>
    b1ae:	4b1d      	ldr	r3, [pc, #116]	; (b224 <PHY_TxHandler+0x80>)
    b1b0:	781b      	ldrb	r3, [r3, #0]
    b1b2:	3b01      	subs	r3, #1
    b1b4:	2b01      	cmp	r3, #1
    b1b6:	d900      	bls.n	b1ba <PHY_TxHandler+0x16>
}
    b1b8:	bd10      	pop	{r4, pc}
        phyTxPtr =  (PhyTxFrame_t *)miQueueRemove(&phyTxQueue, NULL);
    b1ba:	2100      	movs	r1, #0
    b1bc:	4818      	ldr	r0, [pc, #96]	; (b220 <PHY_TxHandler+0x7c>)
    b1be:	4b1a      	ldr	r3, [pc, #104]	; (b228 <PHY_TxHandler+0x84>)
    b1c0:	4798      	blx	r3
    b1c2:	1e04      	subs	r4, r0, #0
        if (NULL != phyTxPtr)
    b1c4:	d0f8      	beq.n	b1b8 <PHY_TxHandler+0x14>
			if (phyTxPtr->phyDataReq.data[0] > MAX_PSDU)
    b1c6:	6883      	ldr	r3, [r0, #8]
    b1c8:	781b      	ldrb	r3, [r3, #0]
    b1ca:	2b7f      	cmp	r3, #127	; 0x7f
    b1cc:	d823      	bhi.n	b216 <PHY_TxHandler+0x72>
			phyTrxSetState(TRX_CMD_TX_ARET_ON);
    b1ce:	2019      	movs	r0, #25
    b1d0:	4b16      	ldr	r3, [pc, #88]	; (b22c <PHY_TxHandler+0x88>)
    b1d2:	4798      	blx	r3
	value = trx_reg_read(reg);
    b1d4:	200f      	movs	r0, #15
    b1d6:	4b16      	ldr	r3, [pc, #88]	; (b230 <PHY_TxHandler+0x8c>)
    b1d8:	4798      	blx	r3
			phyTxPtr->phyDataReq.data[0] += 2;// 2
    b1da:	68a2      	ldr	r2, [r4, #8]
    b1dc:	7813      	ldrb	r3, [r2, #0]
    b1de:	3302      	adds	r3, #2
    b1e0:	7013      	strb	r3, [r2, #0]
			trx_frame_write(&phyTxPtr->phyDataReq.data[0], (phyTxPtr->phyDataReq.data[0]-1 ) /* length value*/);
    b1e2:	68a3      	ldr	r3, [r4, #8]
    b1e4:	7819      	ldrb	r1, [r3, #0]
    b1e6:	3901      	subs	r1, #1
    b1e8:	b2c9      	uxtb	r1, r1
    b1ea:	0018      	movs	r0, r3
    b1ec:	4b11      	ldr	r3, [pc, #68]	; (b234 <PHY_TxHandler+0x90>)
    b1ee:	4798      	blx	r3
			phyState = PHY_STATE_TX_WAIT_END;
    b1f0:	2203      	movs	r2, #3
    b1f2:	4b0c      	ldr	r3, [pc, #48]	; (b224 <PHY_TxHandler+0x80>)
    b1f4:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    b1f6:	4b10      	ldr	r3, [pc, #64]	; (b238 <PHY_TxHandler+0x94>)
    b1f8:	2280      	movs	r2, #128	; 0x80
    b1fa:	0352      	lsls	r2, r2, #13
    b1fc:	619a      	str	r2, [r3, #24]
			TRX_TRIG_DELAY();
    b1fe:	46c0      	nop			; (mov r8, r8)
    b200:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    b202:	615a      	str	r2, [r3, #20]
			gPhyDataReq.polledConfirmation = phyTxPtr->phyDataReq.polledConfirmation;
    b204:	4b0d      	ldr	r3, [pc, #52]	; (b23c <PHY_TxHandler+0x98>)
    b206:	7922      	ldrb	r2, [r4, #4]
    b208:	701a      	strb	r2, [r3, #0]
			gPhyDataReq.confirmCallback = phyTxPtr->phyDataReq.confirmCallback;
    b20a:	68e2      	ldr	r2, [r4, #12]
    b20c:	609a      	str	r2, [r3, #8]
		    MiMem_Free((uint8_t *)phyTxPtr);
    b20e:	0020      	movs	r0, r4
    b210:	4b0b      	ldr	r3, [pc, #44]	; (b240 <PHY_TxHandler+0x9c>)
    b212:	4798      	blx	r3
    b214:	e7d0      	b.n	b1b8 <PHY_TxHandler+0x14>
				phyTxPtr->phyDataReq.confirmCallback(PHY_STATUS_ERROR);
    b216:	68c3      	ldr	r3, [r0, #12]
    b218:	2001      	movs	r0, #1
    b21a:	4798      	blx	r3
				return;
    b21c:	e7cc      	b.n	b1b8 <PHY_TxHandler+0x14>
    b21e:	46c0      	nop			; (mov r8, r8)
    b220:	20001e5c 	.word	0x20001e5c
    b224:	200003f5 	.word	0x200003f5
    b228:	0000d041 	.word	0x0000d041
    b22c:	0000b0dd 	.word	0x0000b0dd
    b230:	0000d7c5 	.word	0x0000d7c5
    b234:	0000daf1 	.word	0x0000daf1
    b238:	40002800 	.word	0x40002800
    b23c:	20001e50 	.word	0x20001e50
    b240:	0000cec9 	.word	0x0000cec9

0000b244 <PHY_Init>:
{
    b244:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    b246:	4b21      	ldr	r3, [pc, #132]	; (b2cc <PHY_Init+0x88>)
    b248:	4798      	blx	r3
	PhyReset();
    b24a:	4b21      	ldr	r3, [pc, #132]	; (b2d0 <PHY_Init+0x8c>)
    b24c:	4798      	blx	r3
	phyRxState = false;
    b24e:	2300      	movs	r3, #0
    b250:	4a20      	ldr	r2, [pc, #128]	; (b2d4 <PHY_Init+0x90>)
    b252:	7013      	strb	r3, [r2, #0]
	phyBand = 0; // For RF212b-MiWi stack we fix the band to 0
    b254:	4a20      	ldr	r2, [pc, #128]	; (b2d8 <PHY_Init+0x94>)
    b256:	7013      	strb	r3, [r2, #0]
	value = trx_reg_read(reg);
    b258:	200c      	movs	r0, #12
    b25a:	4b20      	ldr	r3, [pc, #128]	; (b2dc <PHY_Init+0x98>)
    b25c:	4798      	blx	r3
	phyModulation = phyReadRegister(TRX_CTRL_2_REG) & 0x3f;
    b25e:	233f      	movs	r3, #63	; 0x3f
    b260:	4018      	ands	r0, r3
    b262:	4b1f      	ldr	r3, [pc, #124]	; (b2e0 <PHY_Init+0x9c>)
    b264:	7018      	strb	r0, [r3, #0]
	phyState = PHY_STATE_IDLE;
    b266:	2201      	movs	r2, #1
    b268:	4b1e      	ldr	r3, [pc, #120]	; (b2e4 <PHY_Init+0xa0>)
    b26a:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    b26c:	4e1e      	ldr	r6, [pc, #120]	; (b2e8 <PHY_Init+0xa4>)
	value = trx_reg_read(reg);
    b26e:	4d1b      	ldr	r5, [pc, #108]	; (b2dc <PHY_Init+0x98>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b270:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    b272:	2108      	movs	r1, #8
    b274:	2002      	movs	r0, #2
    b276:	47b0      	blx	r6
	value = trx_reg_read(reg);
    b278:	2001      	movs	r0, #1
    b27a:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b27c:	4020      	ands	r0, r4
    b27e:	2808      	cmp	r0, #8
    b280:	d1f7      	bne.n	b272 <PHY_Init+0x2e>
	trx_reg_write(reg, value);
    b282:	212e      	movs	r1, #46	; 0x2e
    b284:	3804      	subs	r0, #4
    b286:	4c18      	ldr	r4, [pc, #96]	; (b2e8 <PHY_Init+0xa4>)
    b288:	47a0      	blx	r4
    b28a:	210c      	movs	r1, #12
    b28c:	200d      	movs	r0, #13
    b28e:	47a0      	blx	r4
	phyWriteRegister(TRX_CTRL_2_REG, (1 << RX_SAFE_MODE) | phy_mod_user_setting);
    b290:	4d16      	ldr	r5, [pc, #88]	; (b2ec <PHY_Init+0xa8>)
    b292:	7829      	ldrb	r1, [r5, #0]
    b294:	2380      	movs	r3, #128	; 0x80
	trx_reg_write(reg, value);
    b296:	4319      	orrs	r1, r3
    b298:	200c      	movs	r0, #12
    b29a:	47a0      	blx	r4
	switch(phy_mod_user_setting)
    b29c:	782b      	ldrb	r3, [r5, #0]
    b29e:	3b08      	subs	r3, #8
    b2a0:	b2da      	uxtb	r2, r3
    b2a2:	2a36      	cmp	r2, #54	; 0x36
    b2a4:	d808      	bhi.n	b2b8 <PHY_Init+0x74>
    b2a6:	0093      	lsls	r3, r2, #2
    b2a8:	4a11      	ldr	r2, [pc, #68]	; (b2f0 <PHY_Init+0xac>)
    b2aa:	58d3      	ldr	r3, [r2, r3]
    b2ac:	469f      	mov	pc, r3
	trx_reg_write(reg, value);
    b2ae:	2102      	movs	r1, #2
    b2b0:	2016      	movs	r0, #22
    b2b2:	4b0d      	ldr	r3, [pc, #52]	; (b2e8 <PHY_Init+0xa4>)
    b2b4:	4798      	blx	r3
    b2b6:	e003      	b.n	b2c0 <PHY_Init+0x7c>
    b2b8:	2103      	movs	r1, #3
    b2ba:	2016      	movs	r0, #22
    b2bc:	4b0a      	ldr	r3, [pc, #40]	; (b2e8 <PHY_Init+0xa4>)
    b2be:	4798      	blx	r3
	phyWriteRegister(PHY_TX_PWR_REG, phy_txpwr_user_setting);
    b2c0:	4b0c      	ldr	r3, [pc, #48]	; (b2f4 <PHY_Init+0xb0>)
	trx_reg_write(reg, value);
    b2c2:	7819      	ldrb	r1, [r3, #0]
    b2c4:	2005      	movs	r0, #5
    b2c6:	4b08      	ldr	r3, [pc, #32]	; (b2e8 <PHY_Init+0xa4>)
    b2c8:	4798      	blx	r3
}
    b2ca:	bd70      	pop	{r4, r5, r6, pc}
    b2cc:	0000d679 	.word	0x0000d679
    b2d0:	0000d795 	.word	0x0000d795
    b2d4:	200003f4 	.word	0x200003f4
    b2d8:	20000370 	.word	0x20000370
    b2dc:	0000d7c5 	.word	0x0000d7c5
    b2e0:	20000372 	.word	0x20000372
    b2e4:	200003f5 	.word	0x200003f5
    b2e8:	0000d8c1 	.word	0x0000d8c1
    b2ec:	20001cce 	.word	0x20001cce
    b2f0:	000123e0 	.word	0x000123e0
    b2f4:	20001ccf 	.word	0x20001ccf

0000b2f8 <PHY_SetRxState>:
{
    b2f8:	b510      	push	{r4, lr}
	phyRxState = rx;
    b2fa:	4b02      	ldr	r3, [pc, #8]	; (b304 <PHY_SetRxState+0xc>)
    b2fc:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    b2fe:	4b02      	ldr	r3, [pc, #8]	; (b308 <PHY_SetRxState+0x10>)
    b300:	4798      	blx	r3
}
    b302:	bd10      	pop	{r4, pc}
    b304:	200003f4 	.word	0x200003f4
    b308:	0000b131 	.word	0x0000b131

0000b30c <PHY_SetPanId>:
{
    b30c:	b530      	push	{r4, r5, lr}
    b30e:	b083      	sub	sp, #12
    b310:	466b      	mov	r3, sp
    b312:	1d9d      	adds	r5, r3, #6
    b314:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    b316:	b2c1      	uxtb	r1, r0
    b318:	2022      	movs	r0, #34	; 0x22
    b31a:	4c03      	ldr	r4, [pc, #12]	; (b328 <PHY_SetPanId+0x1c>)
    b31c:	47a0      	blx	r4
    b31e:	7869      	ldrb	r1, [r5, #1]
    b320:	2023      	movs	r0, #35	; 0x23
    b322:	47a0      	blx	r4
}
    b324:	b003      	add	sp, #12
    b326:	bd30      	pop	{r4, r5, pc}
    b328:	0000d8c1 	.word	0x0000d8c1

0000b32c <PHY_SetShortAddr>:
{
    b32c:	b570      	push	{r4, r5, r6, lr}
    b32e:	b082      	sub	sp, #8
    b330:	466b      	mov	r3, sp
    b332:	1d9e      	adds	r6, r3, #6
    b334:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    b336:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    b338:	0021      	movs	r1, r4
    b33a:	2020      	movs	r0, #32
    b33c:	4d05      	ldr	r5, [pc, #20]	; (b354 <PHY_SetShortAddr+0x28>)
    b33e:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    b340:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    b342:	0031      	movs	r1, r6
    b344:	2021      	movs	r0, #33	; 0x21
    b346:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    b348:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    b34a:	b2e1      	uxtb	r1, r4
    b34c:	202d      	movs	r0, #45	; 0x2d
    b34e:	47a8      	blx	r5
}
    b350:	b002      	add	sp, #8
    b352:	bd70      	pop	{r4, r5, r6, pc}
    b354:	0000d8c1 	.word	0x0000d8c1

0000b358 <PHY_Wakeup>:
{
    b358:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    b35a:	4b07      	ldr	r3, [pc, #28]	; (b378 <PHY_Wakeup+0x20>)
    b35c:	781b      	ldrb	r3, [r3, #0]
    b35e:	2b02      	cmp	r3, #2
    b360:	d000      	beq.n	b364 <PHY_Wakeup+0xc>
}
    b362:	bd10      	pop	{r4, pc}
    b364:	2280      	movs	r2, #128	; 0x80
    b366:	0352      	lsls	r2, r2, #13
    b368:	4b04      	ldr	r3, [pc, #16]	; (b37c <PHY_Wakeup+0x24>)
    b36a:	615a      	str	r2, [r3, #20]
	 	phySetRxState();
    b36c:	4b04      	ldr	r3, [pc, #16]	; (b380 <PHY_Wakeup+0x28>)
    b36e:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    b370:	2201      	movs	r2, #1
    b372:	4b01      	ldr	r3, [pc, #4]	; (b378 <PHY_Wakeup+0x20>)
    b374:	701a      	strb	r2, [r3, #0]
}
    b376:	e7f4      	b.n	b362 <PHY_Wakeup+0xa>
    b378:	200003f5 	.word	0x200003f5
    b37c:	40002800 	.word	0x40002800
    b380:	0000b131 	.word	0x0000b131

0000b384 <PHY_SetChannel>:
{
    b384:	b510      	push	{r4, lr}
	phyChannel = channel;
    b386:	4b06      	ldr	r3, [pc, #24]	; (b3a0 <PHY_SetChannel+0x1c>)
    b388:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    b38a:	4b06      	ldr	r3, [pc, #24]	; (b3a4 <PHY_SetChannel+0x20>)
    b38c:	781b      	ldrb	r3, [r3, #0]
    b38e:	2b02      	cmp	r3, #2
    b390:	d002      	beq.n	b398 <PHY_SetChannel+0x14>
	phySetChannel();
    b392:	4b05      	ldr	r3, [pc, #20]	; (b3a8 <PHY_SetChannel+0x24>)
    b394:	4798      	blx	r3
}
    b396:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    b398:	4b04      	ldr	r3, [pc, #16]	; (b3ac <PHY_SetChannel+0x28>)
    b39a:	4798      	blx	r3
    b39c:	e7f9      	b.n	b392 <PHY_SetChannel+0xe>
    b39e:	46c0      	nop			; (mov r8, r8)
    b3a0:	20000371 	.word	0x20000371
    b3a4:	200003f5 	.word	0x200003f5
    b3a8:	0000b07d 	.word	0x0000b07d
    b3ac:	0000b359 	.word	0x0000b359

0000b3b0 <PHY_RandomReq>:
{
    b3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3b2:	46c6      	mov	lr, r8
    b3b4:	b500      	push	{lr}
    b3b6:	b082      	sub	sp, #8
	value = trx_reg_read(reg);
    b3b8:	2015      	movs	r0, #21
    b3ba:	4b15      	ldr	r3, [pc, #84]	; (b410 <PHY_RandomReq+0x60>)
    b3bc:	4798      	blx	r3
    b3be:	9001      	str	r0, [sp, #4]
	phyWriteRegister(RX_SYN_REG, (prev_rx_pdt_dis | (1<<7)));
    b3c0:	2180      	movs	r1, #128	; 0x80
    b3c2:	4249      	negs	r1, r1
    b3c4:	4301      	orrs	r1, r0
	trx_reg_write(reg, value);
    b3c6:	b2c9      	uxtb	r1, r1
    b3c8:	2015      	movs	r0, #21
    b3ca:	4b12      	ldr	r3, [pc, #72]	; (b414 <PHY_RandomReq+0x64>)
    b3cc:	4798      	blx	r3
	phyTrxSetState(TRX_CMD_RX_ON);
    b3ce:	2006      	movs	r0, #6
    b3d0:	4b11      	ldr	r3, [pc, #68]	; (b418 <PHY_RandomReq+0x68>)
    b3d2:	4798      	blx	r3
    b3d4:	2500      	movs	r5, #0
	uint16_t rnd = 0;
    b3d6:	2400      	movs	r4, #0
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    b3d8:	4b10      	ldr	r3, [pc, #64]	; (b41c <PHY_RandomReq+0x6c>)
    b3da:	4698      	mov	r8, r3
	value = trx_reg_read(reg);
    b3dc:	4f0c      	ldr	r7, [pc, #48]	; (b410 <PHY_RandomReq+0x60>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    b3de:	2603      	movs	r6, #3
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    b3e0:	2001      	movs	r0, #1
    b3e2:	47c0      	blx	r8
	value = trx_reg_read(reg);
    b3e4:	2006      	movs	r0, #6
    b3e6:	47b8      	blx	r7
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    b3e8:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    b3ea:	4030      	ands	r0, r6
    b3ec:	40a8      	lsls	r0, r5
    b3ee:	4304      	orrs	r4, r0
    b3f0:	b2a4      	uxth	r4, r4
    b3f2:	3502      	adds	r5, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    b3f4:	2d10      	cmp	r5, #16
    b3f6:	d1f3      	bne.n	b3e0 <PHY_RandomReq+0x30>
	phySetRxState();
    b3f8:	4b09      	ldr	r3, [pc, #36]	; (b420 <PHY_RandomReq+0x70>)
    b3fa:	4798      	blx	r3
	trx_reg_write(reg, value);
    b3fc:	9901      	ldr	r1, [sp, #4]
    b3fe:	2015      	movs	r0, #21
    b400:	4b04      	ldr	r3, [pc, #16]	; (b414 <PHY_RandomReq+0x64>)
    b402:	4798      	blx	r3
}
    b404:	0020      	movs	r0, r4
    b406:	b002      	add	sp, #8
    b408:	bc04      	pop	{r2}
    b40a:	4690      	mov	r8, r2
    b40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b40e:	46c0      	nop			; (mov r8, r8)
    b410:	0000d7c5 	.word	0x0000d7c5
    b414:	0000d8c1 	.word	0x0000d8c1
    b418:	0000b0dd 	.word	0x0000b0dd
    b41c:	00006239 	.word	0x00006239
    b420:	0000b131 	.word	0x0000b131

0000b424 <PHY_EncryptReq>:
{
    b424:	b510      	push	{r4, lr}
    b426:	0004      	movs	r4, r0
    b428:	0008      	movs	r0, r1
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    b42a:	2200      	movs	r2, #0
    b42c:	2100      	movs	r1, #0
    b42e:	4b05      	ldr	r3, [pc, #20]	; (b444 <PHY_EncryptReq+0x20>)
    b430:	4798      	blx	r3
	sal_aes_wrrd(text, NULL);
    b432:	2100      	movs	r1, #0
    b434:	0020      	movs	r0, r4
    b436:	4b04      	ldr	r3, [pc, #16]	; (b448 <PHY_EncryptReq+0x24>)
    b438:	4798      	blx	r3
	sal_aes_read(text);
    b43a:	0020      	movs	r0, r4
    b43c:	4b03      	ldr	r3, [pc, #12]	; (b44c <PHY_EncryptReq+0x28>)
    b43e:	4798      	blx	r3
}
    b440:	bd10      	pop	{r4, pc}
    b442:	46c0      	nop			; (mov r8, r8)
    b444:	0000d511 	.word	0x0000d511
    b448:	0000d4a5 	.word	0x0000d4a5
    b44c:	0000d649 	.word	0x0000d649

0000b450 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    b450:	b570      	push	{r4, r5, r6, lr}
    b452:	0005      	movs	r5, r0
    b454:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    b456:	4e05      	ldr	r6, [pc, #20]	; (b46c <PHY_SetIEEEAddr+0x1c>)
    b458:	7829      	ldrb	r1, [r5, #0]
    b45a:	0020      	movs	r0, r4
    b45c:	47b0      	blx	r6
		ptr_to_reg++;
    b45e:	3501      	adds	r5, #1
    b460:	3401      	adds	r4, #1
    b462:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    b464:	2c2c      	cmp	r4, #44	; 0x2c
    b466:	d1f7      	bne.n	b458 <PHY_SetIEEEAddr+0x8>
	}
}
    b468:	bd70      	pop	{r4, r5, r6, pc}
    b46a:	46c0      	nop			; (mov r8, r8)
    b46c:	0000d8c1 	.word	0x0000d8c1

0000b470 <PHY_TaskHandler>:
	}
}
#else
// Handle Packet Received
void PHY_TaskHandler(void)
{
    b470:	b5f0      	push	{r4, r5, r6, r7, lr}
    b472:	b085      	sub	sp, #20
    PHY_TxHandler();
    b474:	4b40      	ldr	r3, [pc, #256]	; (b578 <PHY_TaskHandler+0x108>)
    b476:	4798      	blx	r3

    if (PHY_STATE_SLEEP == phyState)
    b478:	4b40      	ldr	r3, [pc, #256]	; (b57c <PHY_TaskHandler+0x10c>)
    b47a:	781b      	ldrb	r3, [r3, #0]
    b47c:	2b02      	cmp	r3, #2
    b47e:	d00a      	beq.n	b496 <PHY_TaskHandler+0x26>
	value = trx_reg_read(reg);
    b480:	200f      	movs	r0, #15
    b482:	4b3f      	ldr	r3, [pc, #252]	; (b580 <PHY_TaskHandler+0x110>)
    b484:	4798      	blx	r3
    {
        return;
    }

    if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    b486:	0703      	lsls	r3, r0, #28
    b488:	d505      	bpl.n	b496 <PHY_TaskHandler+0x26>
    {
        if (PHY_STATE_IDLE == phyState)
    b48a:	4b3c      	ldr	r3, [pc, #240]	; (b57c <PHY_TaskHandler+0x10c>)
    b48c:	781b      	ldrb	r3, [r3, #0]
    b48e:	2b01      	cmp	r3, #1
    b490:	d003      	beq.n	b49a <PHY_TaskHandler+0x2a>
					}
				}
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    b492:	2b03      	cmp	r3, #3
    b494:	d055      	beq.n	b542 <PHY_TaskHandler+0xd2>
		    gPhyDataReq.confirmCallback = NULL;
			phySetRxState();
			phyState = PHY_STATE_IDLE;
		}
	}
}
    b496:	b005      	add	sp, #20
    b498:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (RxBuffer[i].PayloadLen == 0)
    b49a:	4b3a      	ldr	r3, [pc, #232]	; (b584 <PHY_TaskHandler+0x114>)
    b49c:	781d      	ldrb	r5, [r3, #0]
    b49e:	2d00      	cmp	r5, #0
    b4a0:	d010      	beq.n	b4c4 <PHY_TaskHandler+0x54>
    b4a2:	2376      	movs	r3, #118	; 0x76
    b4a4:	4a37      	ldr	r2, [pc, #220]	; (b584 <PHY_TaskHandler+0x114>)
    b4a6:	5cd3      	ldrb	r3, [r2, r3]
    b4a8:	2b00      	cmp	r3, #0
    b4aa:	d00a      	beq.n	b4c2 <PHY_TaskHandler+0x52>
    b4ac:	23ec      	movs	r3, #236	; 0xec
    b4ae:	5cd3      	ldrb	r3, [r2, r3]
    b4b0:	2b00      	cmp	r3, #0
    b4b2:	d044      	beq.n	b53e <PHY_TaskHandler+0xce>
    b4b4:	23b1      	movs	r3, #177	; 0xb1
    b4b6:	005b      	lsls	r3, r3, #1
    b4b8:	5cd3      	ldrb	r3, [r2, r3]
            for (i = 0; i < BANK_SIZE; i++)
    b4ba:	2503      	movs	r5, #3
                if (RxBuffer[i].PayloadLen == 0)
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d1ea      	bne.n	b496 <PHY_TaskHandler+0x26>
    b4c0:	e000      	b.n	b4c4 <PHY_TaskHandler+0x54>
            for (i = 0; i < BANK_SIZE; i++)
    b4c2:	2501      	movs	r5, #1
	value = trx_reg_read(reg);
    b4c4:	2007      	movs	r0, #7
    b4c6:	4b2e      	ldr	r3, [pc, #184]	; (b580 <PHY_TaskHandler+0x110>)
    b4c8:	4798      	blx	r3
    b4ca:	9001      	str	r0, [sp, #4]
                trx_frame_read(&size, 1);
    b4cc:	ab02      	add	r3, sp, #8
    b4ce:	1dde      	adds	r6, r3, #7
    b4d0:	2101      	movs	r1, #1
    b4d2:	0030      	movs	r0, r6
    b4d4:	4b2c      	ldr	r3, [pc, #176]	; (b588 <PHY_TaskHandler+0x118>)
    b4d6:	4798      	blx	r3
				if(size <= MAX_PSDU)
    b4d8:	7831      	ldrb	r1, [r6, #0]
    b4da:	b24b      	sxtb	r3, r1
    b4dc:	2b00      	cmp	r3, #0
    b4de:	db26      	blt.n	b52e <PHY_TaskHandler+0xbe>
					trx_frame_read(phyRxBuffer, size + 2);
    b4e0:	3102      	adds	r1, #2
    b4e2:	b2c9      	uxtb	r1, r1
    b4e4:	4829      	ldr	r0, [pc, #164]	; (b58c <PHY_TaskHandler+0x11c>)
    b4e6:	4b28      	ldr	r3, [pc, #160]	; (b588 <PHY_TaskHandler+0x118>)
    b4e8:	4798      	blx	r3
					RxBuffer[RxBank].PayloadLen = size + 2;
    b4ea:	002f      	movs	r7, r5
    b4ec:	ab02      	add	r3, sp, #8
    b4ee:	79d8      	ldrb	r0, [r3, #7]
    b4f0:	1c86      	adds	r6, r0, #2
    b4f2:	b2f6      	uxtb	r6, r6
    b4f4:	2376      	movs	r3, #118	; 0x76
    b4f6:	435d      	muls	r5, r3
    b4f8:	4b22      	ldr	r3, [pc, #136]	; (b584 <PHY_TaskHandler+0x114>)
    b4fa:	54ee      	strb	r6, [r5, r3]
					if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    b4fc:	2e74      	cmp	r6, #116	; 0x74
    b4fe:	d816      	bhi.n	b52e <PHY_TaskHandler+0xbe>
						for (i = 1; i <= size+2; i++)
    b500:	3002      	adds	r0, #2
    b502:	2201      	movs	r2, #1
    b504:	2301      	movs	r3, #1
							RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    b506:	0029      	movs	r1, r5
    b508:	4d1e      	ldr	r5, [pc, #120]	; (b584 <PHY_TaskHandler+0x114>)
    b50a:	186d      	adds	r5, r5, r1
    b50c:	4c1f      	ldr	r4, [pc, #124]	; (b58c <PHY_TaskHandler+0x11c>)
    b50e:	5ca1      	ldrb	r1, [r4, r2]
    b510:	54a9      	strb	r1, [r5, r2]
						for (i = 1; i <= size+2; i++)
    b512:	3301      	adds	r3, #1
    b514:	b2db      	uxtb	r3, r3
    b516:	001a      	movs	r2, r3
    b518:	4298      	cmp	r0, r3
    b51a:	daf8      	bge.n	b50e <PHY_TaskHandler+0x9e>
						RxBuffer[RxBank].Payload[RxBuffer[RxBank].PayloadLen - 1] = rssi + phyRssiBaseVal();
    b51c:	4b1c      	ldr	r3, [pc, #112]	; (b590 <PHY_TaskHandler+0x120>)
    b51e:	4798      	blx	r3
    b520:	2376      	movs	r3, #118	; 0x76
    b522:	437b      	muls	r3, r7
    b524:	4f17      	ldr	r7, [pc, #92]	; (b584 <PHY_TaskHandler+0x114>)
    b526:	18ff      	adds	r7, r7, r3
    b528:	9b01      	ldr	r3, [sp, #4]
    b52a:	181c      	adds	r4, r3, r0
    b52c:	55bc      	strb	r4, [r7, r6]
	value = trx_reg_read(reg);
    b52e:	4d14      	ldr	r5, [pc, #80]	; (b580 <PHY_TaskHandler+0x110>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    b530:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    b532:	2001      	movs	r0, #1
    b534:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    b536:	4020      	ands	r0, r4
    b538:	2816      	cmp	r0, #22
    b53a:	d1fa      	bne.n	b532 <PHY_TaskHandler+0xc2>
    b53c:	e7ab      	b.n	b496 <PHY_TaskHandler+0x26>
            for (i = 0; i < BANK_SIZE; i++)
    b53e:	2502      	movs	r5, #2
    b540:	e7c0      	b.n	b4c4 <PHY_TaskHandler+0x54>
	value = trx_reg_read(reg);
    b542:	2002      	movs	r0, #2
    b544:	4b0e      	ldr	r3, [pc, #56]	; (b580 <PHY_TaskHandler+0x110>)
    b546:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    b548:	0940      	lsrs	r0, r0, #5
    b54a:	b2c0      	uxtb	r0, r0
   			if (TRAC_STATUS_SUCCESS == status)
    b54c:	2800      	cmp	r0, #0
    b54e:	d004      	beq.n	b55a <PHY_TaskHandler+0xea>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    b550:	2803      	cmp	r0, #3
    b552:	d00d      	beq.n	b570 <PHY_TaskHandler+0x100>
			else if (TRAC_STATUS_NO_ACK == status)
    b554:	2805      	cmp	r0, #5
    b556:	d00d      	beq.n	b574 <PHY_TaskHandler+0x104>
				status = PHY_STATUS_ERROR;
    b558:	2001      	movs	r0, #1
		    gPhyDataReq.confirmCallback(status);
    b55a:	4c0e      	ldr	r4, [pc, #56]	; (b594 <PHY_TaskHandler+0x124>)
    b55c:	68a3      	ldr	r3, [r4, #8]
    b55e:	4798      	blx	r3
		    gPhyDataReq.confirmCallback = NULL;
    b560:	2300      	movs	r3, #0
    b562:	60a3      	str	r3, [r4, #8]
			phySetRxState();
    b564:	4b0c      	ldr	r3, [pc, #48]	; (b598 <PHY_TaskHandler+0x128>)
    b566:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    b568:	2201      	movs	r2, #1
    b56a:	4b04      	ldr	r3, [pc, #16]	; (b57c <PHY_TaskHandler+0x10c>)
    b56c:	701a      	strb	r2, [r3, #0]
    b56e:	e792      	b.n	b496 <PHY_TaskHandler+0x26>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    b570:	2002      	movs	r0, #2
    b572:	e7f2      	b.n	b55a <PHY_TaskHandler+0xea>
				status = PHY_STATUS_NO_ACK;
    b574:	2003      	movs	r0, #3
    b576:	e7f0      	b.n	b55a <PHY_TaskHandler+0xea>
    b578:	0000b1a5 	.word	0x0000b1a5
    b57c:	200003f5 	.word	0x200003f5
    b580:	0000d7c5 	.word	0x0000d7c5
    b584:	20001e68 	.word	0x20001e68
    b588:	0000d9c1 	.word	0x0000d9c1
    b58c:	20000374 	.word	0x20000374
    b590:	0000b059 	.word	0x0000b059
    b594:	20001e50 	.word	0x20001e50
    b598:	0000b131 	.word	0x0000b131

0000b59c <Find_Index>:
#if defined(PROTOCOL_STAR)
/* All connections (FFD || RFD)are stored in Connection Table of PAN Coordinator
    Each Connection is identified by its index no. In case of Data TX , EDx --> PAN CO --> EDy
    PAN Coordinator will forward the data to EDy , In order to know */
static uint8_t Find_Index (uint8_t *DestAddr)
{
    b59c:	b570      	push	{r4, r5, r6, lr}
    b59e:	0006      	movs	r6, r0
    uint8_t i;
    uint8_t return_val;
    for (i = 0;i < conn_size; i++)
    b5a0:	4b12      	ldr	r3, [pc, #72]	; (b5ec <Find_Index+0x50>)
    b5a2:	781c      	ldrb	r4, [r3, #0]
    b5a4:	2c00      	cmp	r4, #0
    b5a6:	d01e      	beq.n	b5e6 <Find_Index+0x4a>
    {
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    b5a8:	4b11      	ldr	r3, [pc, #68]	; (b5f0 <Find_Index+0x54>)
    b5aa:	681b      	ldr	r3, [r3, #0]
    b5ac:	681b      	ldr	r3, [r3, #0]
    b5ae:	2000      	movs	r0, #0
    b5b0:	e004      	b.n	b5bc <Find_Index+0x20>
    for (i = 0;i < conn_size; i++)
    b5b2:	3001      	adds	r0, #1
    b5b4:	b2c0      	uxtb	r0, r0
    b5b6:	3310      	adds	r3, #16
    b5b8:	42a0      	cmp	r0, r4
    b5ba:	d012      	beq.n	b5e2 <Find_Index+0x46>
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    b5bc:	7b1a      	ldrb	r2, [r3, #12]
    b5be:	2a7f      	cmp	r2, #127	; 0x7f
    b5c0:	d9f7      	bls.n	b5b2 <Find_Index+0x16>
        {
            if (DestAddr[0] == miwiDefaultRomOrRamParams->ConnectionTable[i].Address[0] && DestAddr[1] == miwiDefaultRomOrRamParams->ConnectionTable[i].Address[1] && DestAddr[2] == miwiDefaultRomOrRamParams->ConnectionTable[i].Address[2] )
    b5c2:	7835      	ldrb	r5, [r6, #0]
    b5c4:	791a      	ldrb	r2, [r3, #4]
    b5c6:	4295      	cmp	r5, r2
    b5c8:	d1f3      	bne.n	b5b2 <Find_Index+0x16>
    b5ca:	7875      	ldrb	r5, [r6, #1]
    b5cc:	795a      	ldrb	r2, [r3, #5]
    b5ce:	4295      	cmp	r5, r2
    b5d0:	d1ef      	bne.n	b5b2 <Find_Index+0x16>
    b5d2:	78b5      	ldrb	r5, [r6, #2]
    b5d4:	799a      	ldrb	r2, [r3, #6]
    b5d6:	4295      	cmp	r5, r2
    b5d8:	d1eb      	bne.n	b5b2 <Find_Index+0x16>
                break;
            }

        }
    }
    if (i == conn_size)
    b5da:	4284      	cmp	r4, r0
    b5dc:	d102      	bne.n	b5e4 <Find_Index+0x48>
    {
        return_val = 0xff;
    b5de:	20ff      	movs	r0, #255	; 0xff
    b5e0:	e000      	b.n	b5e4 <Find_Index+0x48>
    b5e2:	20ff      	movs	r0, #255	; 0xff
    }
    return return_val;
}
    b5e4:	bd70      	pop	{r4, r5, r6, pc}
        return_val = 0xff;
    b5e6:	20ff      	movs	r0, #255	; 0xff
    b5e8:	e7fc      	b.n	b5e4 <Find_Index+0x48>
    b5ea:	46c0      	nop			; (mov r8, r8)
    b5ec:	200003f6 	.word	0x200003f6
    b5f0:	20002070 	.word	0x20002070

0000b5f4 <CommandConfCallback>:
{
    b5f4:	b510      	push	{r4, lr}
    MiMem_Free(msgPointer);
    b5f6:	0010      	movs	r0, r2
    b5f8:	4b01      	ldr	r3, [pc, #4]	; (b600 <CommandConfCallback+0xc>)
    b5fa:	4798      	blx	r3
}
    b5fc:	bd10      	pop	{r4, pc}
    b5fe:	46c0      	nop			; (mov r8, r8)
    b600:	0000cec9 	.word	0x0000cec9

0000b604 <linkStatusConfCallback>:
{
    b604:	b510      	push	{r4, lr}
    b606:	000c      	movs	r4, r1
    MiMem_Free(msgPointer);
    b608:	0010      	movs	r0, r2
    b60a:	4b10      	ldr	r3, [pc, #64]	; (b64c <linkStatusConfCallback+0x48>)
    b60c:	4798      	blx	r3
    if (SUCCESS != status)
    b60e:	2c00      	cmp	r4, #0
    b610:	d017      	beq.n	b642 <linkStatusConfCallback+0x3e>
        if (linkStatusFailureCount >= MAX_LINK_STATUS_FAILURES)
    b612:	4b0f      	ldr	r3, [pc, #60]	; (b650 <linkStatusConfCallback+0x4c>)
    b614:	781b      	ldrb	r3, [r3, #0]
    b616:	2b02      	cmp	r3, #2
    b618:	d90e      	bls.n	b638 <linkStatusConfCallback+0x34>
            linkStatusTimeInterval = 0;
    b61a:	2200      	movs	r2, #0
    b61c:	4b0d      	ldr	r3, [pc, #52]	; (b654 <linkStatusConfCallback+0x50>)
    b61e:	801a      	strh	r2, [r3, #0]
            if ((NULL != linkFailureCallback) && (p2pStarCurrentState != DISCONNECTED))
    b620:	4b0d      	ldr	r3, [pc, #52]	; (b658 <linkStatusConfCallback+0x54>)
    b622:	681b      	ldr	r3, [r3, #0]
    b624:	2b00      	cmp	r3, #0
    b626:	d004      	beq.n	b632 <linkStatusConfCallback+0x2e>
    b628:	4a0c      	ldr	r2, [pc, #48]	; (b65c <linkStatusConfCallback+0x58>)
    b62a:	7812      	ldrb	r2, [r2, #0]
    b62c:	2a08      	cmp	r2, #8
    b62e:	d000      	beq.n	b632 <linkStatusConfCallback+0x2e>
                linkFailureCallback();
    b630:	4798      	blx	r3
            p2pStarCurrentState = DISCONNECTED;	
    b632:	2208      	movs	r2, #8
    b634:	4b09      	ldr	r3, [pc, #36]	; (b65c <linkStatusConfCallback+0x58>)
    b636:	701a      	strb	r2, [r3, #0]
        ++linkStatusFailureCount;
    b638:	4a05      	ldr	r2, [pc, #20]	; (b650 <linkStatusConfCallback+0x4c>)
    b63a:	7813      	ldrb	r3, [r2, #0]
    b63c:	3301      	adds	r3, #1
    b63e:	7013      	strb	r3, [r2, #0]
}
    b640:	bd10      	pop	{r4, pc}
        linkStatusFailureCount = 0;
    b642:	2200      	movs	r2, #0
    b644:	4b02      	ldr	r3, [pc, #8]	; (b650 <linkStatusConfCallback+0x4c>)
    b646:	701a      	strb	r2, [r3, #0]
}
    b648:	e7fa      	b.n	b640 <linkStatusConfCallback+0x3c>
    b64a:	46c0      	nop			; (mov r8, r8)
    b64c:	0000cec9 	.word	0x0000cec9
    b650:	20000418 	.word	0x20000418
    b654:	2000041a 	.word	0x2000041a
    b658:	20002174 	.word	0x20002174
    b65c:	2000041c 	.word	0x2000041c

0000b660 <frameTxCallback>:
{
    b660:	b510      	push	{r4, lr}
    txCallbackReceived = true;
    b662:	2401      	movs	r4, #1
    b664:	4b08      	ldr	r3, [pc, #32]	; (b688 <frameTxCallback+0x28>)
    b666:	701c      	strb	r4, [r3, #0]
    DataConf_callback_t callback = sentFrame->txFrameEntry.frameConfCallback;
    b668:	4b08      	ldr	r3, [pc, #32]	; (b68c <frameTxCallback+0x2c>)
    b66a:	681b      	ldr	r3, [r3, #0]
    b66c:	691b      	ldr	r3, [r3, #16]
    if (NULL != callback)
    b66e:	2b00      	cmp	r3, #0
    b670:	d005      	beq.n	b67e <frameTxCallback+0x1e>
        callback(handle, status, msgPointer);
    b672:	4798      	blx	r3
    MiMem_Free((uint8_t *)sentFrame);
    b674:	4b05      	ldr	r3, [pc, #20]	; (b68c <frameTxCallback+0x2c>)
    b676:	6818      	ldr	r0, [r3, #0]
    b678:	4b05      	ldr	r3, [pc, #20]	; (b690 <frameTxCallback+0x30>)
    b67a:	4798      	blx	r3
}
    b67c:	bd10      	pop	{r4, pc}
        MiMem_Free(msgPointer);
    b67e:	0010      	movs	r0, r2
    b680:	4b03      	ldr	r3, [pc, #12]	; (b690 <frameTxCallback+0x30>)
    b682:	4798      	blx	r3
    b684:	e7f6      	b.n	b674 <frameTxCallback+0x14>
    b686:	46c0      	nop			; (mov r8, r8)
    b688:	20000018 	.word	0x20000018
    b68c:	20002188 	.word	0x20002188
    b690:	0000cec9 	.word	0x0000cec9

0000b694 <dataTimerHandler>:
{
    b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    b696:	4b19      	ldr	r3, [pc, #100]	; (b6fc <dataTimerHandler+0x68>)
    b698:	7a1b      	ldrb	r3, [r3, #8]
    b69a:	2b00      	cmp	r3, #0
    b69c:	d029      	beq.n	b6f2 <dataTimerHandler+0x5e>
    b69e:	2600      	movs	r6, #0
		dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    b6a0:	4c16      	ldr	r4, [pc, #88]	; (b6fc <dataTimerHandler+0x68>)
    b6a2:	4f17      	ldr	r7, [pc, #92]	; (b700 <dataTimerHandler+0x6c>)
    b6a4:	e009      	b.n	b6ba <dataTimerHandler+0x26>
			miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
    b6a6:	0029      	movs	r1, r5
    b6a8:	4814      	ldr	r0, [pc, #80]	; (b6fc <dataTimerHandler+0x68>)
    b6aa:	4b16      	ldr	r3, [pc, #88]	; (b704 <dataTimerHandler+0x70>)
    b6ac:	4798      	blx	r3
	for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    b6ae:	3601      	adds	r6, #1
    b6b0:	b2f6      	uxtb	r6, r6
    b6b2:	4b12      	ldr	r3, [pc, #72]	; (b6fc <dataTimerHandler+0x68>)
    b6b4:	7a1b      	ldrb	r3, [r3, #8]
    b6b6:	42b3      	cmp	r3, r6
    b6b8:	d918      	bls.n	b6ec <dataTimerHandler+0x58>
		dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    b6ba:	2100      	movs	r1, #0
    b6bc:	0020      	movs	r0, r4
    b6be:	47b8      	blx	r7
    b6c0:	1e05      	subs	r5, r0, #0
		if (NULL == dataFramePtr)
    b6c2:	d015      	beq.n	b6f0 <dataTimerHandler+0x5c>
		if((0 != dataFramePtr->dataFrame.timeout) && (--dataFramePtr->dataFrame.timeout) == 0)
    b6c4:	7c03      	ldrb	r3, [r0, #16]
    b6c6:	2b00      	cmp	r3, #0
    b6c8:	d0ed      	beq.n	b6a6 <dataTimerHandler+0x12>
    b6ca:	3b01      	subs	r3, #1
    b6cc:	b2db      	uxtb	r3, r3
    b6ce:	7403      	strb	r3, [r0, #16]
    b6d0:	2b00      	cmp	r3, #0
    b6d2:	d1e8      	bne.n	b6a6 <dataTimerHandler+0x12>
			DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    b6d4:	6843      	ldr	r3, [r0, #4]
			if (NULL != callback)
    b6d6:	2b00      	cmp	r3, #0
    b6d8:	d004      	beq.n	b6e4 <dataTimerHandler+0x50>
				callback(dataFramePtr->dataFrame.msghandle, NO_ACK, (uint8_t*)&(dataFramePtr->dataFrame.msg));
    b6da:	7d00      	ldrb	r0, [r0, #20]
    b6dc:	002a      	movs	r2, r5
    b6de:	3216      	adds	r2, #22
    b6e0:	2103      	movs	r1, #3
    b6e2:	4798      	blx	r3
			MiMem_Free((uint8_t *)dataFramePtr);
    b6e4:	0028      	movs	r0, r5
    b6e6:	4b08      	ldr	r3, [pc, #32]	; (b708 <dataTimerHandler+0x74>)
    b6e8:	4798      	blx	r3
		{
    b6ea:	e7e0      	b.n	b6ae <dataTimerHandler+0x1a>
	if (0 == appAckWaitDataQueue.size)
    b6ec:	2b00      	cmp	r3, #0
    b6ee:	d000      	beq.n	b6f2 <dataTimerHandler+0x5e>
}
    b6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYS_TimerStop(&dataTimer);
    b6f2:	4806      	ldr	r0, [pc, #24]	; (b70c <dataTimerHandler+0x78>)
    b6f4:	4b06      	ldr	r3, [pc, #24]	; (b710 <dataTimerHandler+0x7c>)
    b6f6:	4798      	blx	r3
    b6f8:	e7fa      	b.n	b6f0 <dataTimerHandler+0x5c>
    b6fa:	46c0      	nop			; (mov r8, r8)
    b6fc:	200020e8 	.word	0x200020e8
    b700:	0000d041 	.word	0x0000d041
    b704:	0000d009 	.word	0x0000d009
    b708:	0000cec9 	.word	0x0000cec9
    b70c:	200003fc 	.word	0x200003fc
    b710:	0000d145 	.word	0x0000d145

0000b714 <MiApp_Get>:
    switch(id)
    b714:	2800      	cmp	r0, #0
    b716:	d003      	beq.n	b720 <MiApp_Get+0xc>
    b718:	2801      	cmp	r0, #1
    b71a:	d006      	beq.n	b72a <MiApp_Get+0x16>
    return false;
    b71c:	2000      	movs	r0, #0
    b71e:	e003      	b.n	b728 <MiApp_Get+0x14>
            *value = currentChannel;
    b720:	4b06      	ldr	r3, [pc, #24]	; (b73c <MiApp_Get+0x28>)
    b722:	781b      	ldrb	r3, [r3, #0]
    b724:	700b      	strb	r3, [r1, #0]
            return true;
    b726:	2001      	movs	r0, #1
}
    b728:	4770      	bx	lr
            value[0] = myPANID.Val;
    b72a:	4b05      	ldr	r3, [pc, #20]	; (b740 <MiApp_Get+0x2c>)
    b72c:	881a      	ldrh	r2, [r3, #0]
    b72e:	700a      	strb	r2, [r1, #0]
            value[1] = myPANID.Val >> 8;
    b730:	881b      	ldrh	r3, [r3, #0]
    b732:	0a1b      	lsrs	r3, r3, #8
    b734:	704b      	strb	r3, [r1, #1]
            return true;
    b736:	2001      	movs	r0, #1
    b738:	e7f6      	b.n	b728 <MiApp_Get+0x14>
    b73a:	46c0      	nop			; (mov r8, r8)
    b73c:	2000000d 	.word	0x2000000d
    b740:	20002080 	.word	0x20002080

0000b744 <MiApp_Set>:
{
    b744:	b570      	push	{r4, r5, r6, lr}
    b746:	000d      	movs	r5, r1
    return false;
    b748:	2400      	movs	r4, #0
    switch(id)
    b74a:	2800      	cmp	r0, #0
    b74c:	d001      	beq.n	b752 <MiApp_Set+0xe>
}
    b74e:	0020      	movs	r0, r4
    b750:	bd70      	pop	{r4, r5, r6, pc}
            if( MiMAC_Set(MAC_CHANNEL, value))
    b752:	4b05      	ldr	r3, [pc, #20]	; (b768 <MiApp_Set+0x24>)
    b754:	4798      	blx	r3
    b756:	1e04      	subs	r4, r0, #0
    b758:	d0f9      	beq.n	b74e <MiApp_Set+0xa>
                currentChannel = *value;
    b75a:	782a      	ldrb	r2, [r5, #0]
    b75c:	4b03      	ldr	r3, [pc, #12]	; (b76c <MiApp_Set+0x28>)
    b75e:	701a      	strb	r2, [r3, #0]
                PDS_Store(PDS_CURRENT_CHANNEL_ID);
    b760:	2004      	movs	r0, #4
    b762:	4b03      	ldr	r3, [pc, #12]	; (b770 <MiApp_Set+0x2c>)
    b764:	4798      	blx	r3
                return true;
    b766:	e7f2      	b.n	b74e <MiApp_Set+0xa>
    b768:	0000a73d 	.word	0x0000a73d
    b76c:	2000000d 	.word	0x2000000d
    b770:	00009f31 	.word	0x00009f31

0000b774 <MiApp_ProtocolInit>:
{
    b774:	b5f0      	push	{r4, r5, r6, r7, lr}
    b776:	46c6      	mov	lr, r8
    b778:	b500      	push	{lr}
    b77a:	b084      	sub	sp, #16
    b77c:	0005      	movs	r5, r0
    uint16_t broadcastAddress = 0xFFFF;
    b77e:	2201      	movs	r2, #1
    b780:	4252      	negs	r2, r2
    b782:	230e      	movs	r3, #14
    b784:	446b      	add	r3, sp
    b786:	801a      	strh	r2, [r3, #0]
    P2PStatus.Val = 0;//TODO
    b788:	2300      	movs	r3, #0
    b78a:	4a52      	ldr	r2, [pc, #328]	; (b8d4 <MiApp_ProtocolInit+0x160>)
    b78c:	7013      	strb	r3, [r2, #0]
    miwiDefaultRomOrRamParams = defaultRomOrRamParams;
    b78e:	4a52      	ldr	r2, [pc, #328]	; (b8d8 <MiApp_ProtocolInit+0x164>)
    b790:	6010      	str	r0, [r2, #0]
    miwiDefaultRamOnlyParams = defaultRamOnlyParams;
    b792:	4a52      	ldr	r2, [pc, #328]	; (b8dc <MiApp_ProtocolInit+0x168>)
    b794:	6011      	str	r1, [r2, #0]
    myPANID.Val = 0;
    b796:	4a52      	ldr	r2, [pc, #328]	; (b8e0 <MiApp_ProtocolInit+0x16c>)
    b798:	8013      	strh	r3, [r2, #0]
    if (defaultRomOrRamParams->networkFreezerRestore)
    b79a:	7b03      	ldrb	r3, [r0, #12]
    b79c:	2b00      	cmp	r3, #0
    b79e:	d166      	bne.n	b86e <MiApp_ProtocolInit+0xfa>
        p2pStarCurrentState = INIT_STATE;
    b7a0:	2201      	movs	r2, #1
    b7a2:	4b50      	ldr	r3, [pc, #320]	; (b8e4 <MiApp_ProtocolInit+0x170>)
    b7a4:	701a      	strb	r2, [r3, #0]
		myPANID.Val = myPAN_ID;
    b7a6:	4b50      	ldr	r3, [pc, #320]	; (b8e8 <MiApp_ProtocolInit+0x174>)
    b7a8:	881a      	ldrh	r2, [r3, #0]
    b7aa:	4b4d      	ldr	r3, [pc, #308]	; (b8e0 <MiApp_ProtocolInit+0x16c>)
    b7ac:	801a      	strh	r2, [r3, #0]
    b7ae:	2400      	movs	r4, #0
        defaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    b7b0:	2600      	movs	r6, #0
        memset(&defaultRomOrRamParams->ConnectionTable[i].Address, 0, LONG_ADDR_LEN);
    b7b2:	4b4e      	ldr	r3, [pc, #312]	; (b8ec <MiApp_ProtocolInit+0x178>)
    b7b4:	4698      	mov	r8, r3
    for(i = 0; i < CONNECTION_SIZE; i++)
    b7b6:	27a0      	movs	r7, #160	; 0xa0
    b7b8:	007f      	lsls	r7, r7, #1
        defaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    b7ba:	682b      	ldr	r3, [r5, #0]
    b7bc:	191b      	adds	r3, r3, r4
    b7be:	731e      	strb	r6, [r3, #12]
        memset(&defaultRomOrRamParams->ConnectionTable[i].Address, 0, LONG_ADDR_LEN);
    b7c0:	682b      	ldr	r3, [r5, #0]
    b7c2:	1918      	adds	r0, r3, r4
    b7c4:	3004      	adds	r0, #4
    b7c6:	2208      	movs	r2, #8
    b7c8:	0031      	movs	r1, r6
    b7ca:	47c0      	blx	r8
    b7cc:	3410      	adds	r4, #16
    for(i = 0; i < CONNECTION_SIZE; i++)
    b7ce:	42bc      	cmp	r4, r7
    b7d0:	d1f3      	bne.n	b7ba <MiApp_ProtocolInit+0x46>
    b7d2:	4b47      	ldr	r3, [pc, #284]	; (b8f0 <MiApp_ProtocolInit+0x17c>)
    b7d4:	0019      	movs	r1, r3
    b7d6:	3150      	adds	r1, #80	; 0x50
        IncomingFrameCounter[i].Val = 0;
    b7d8:	2200      	movs	r2, #0
    b7da:	c304      	stmia	r3!, {r2}
    for(i = 0; i < CONNECTION_SIZE; i++)
    b7dc:	428b      	cmp	r3, r1
    b7de:	d1fc      	bne.n	b7da <MiApp_ProtocolInit+0x66>
    miwi_status_t initStatus = SUCCESS;
    b7e0:	2400      	movs	r4, #0
    initValue.PAddress = myLongAddress;
    b7e2:	aa01      	add	r2, sp, #4
    initValue.actionFlags.bits.CCAEnable = 1;
    b7e4:	7813      	ldrb	r3, [r2, #0]
    b7e6:	2102      	movs	r1, #2
    b7e8:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    b7ea:	2187      	movs	r1, #135	; 0x87
    b7ec:	400b      	ands	r3, r1
    b7ee:	2140      	movs	r1, #64	; 0x40
    b7f0:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.NetworkFreezer = 1;
    b7f2:	b2db      	uxtb	r3, r3
    b7f4:	2104      	movs	r1, #4
    b7f6:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.RepeaterMode = 0;
    b7f8:	21c6      	movs	r1, #198	; 0xc6
    b7fa:	400b      	ands	r3, r1
    b7fc:	7013      	strb	r3, [r2, #0]
    MiMAC_Init(initValue);
    b7fe:	9801      	ldr	r0, [sp, #4]
    b800:	493c      	ldr	r1, [pc, #240]	; (b8f4 <MiApp_ProtocolInit+0x180>)
    b802:	4b3d      	ldr	r3, [pc, #244]	; (b8f8 <MiApp_ProtocolInit+0x184>)
    b804:	4798      	blx	r3
    if (currentChannel != 0xFF)
    b806:	4b3d      	ldr	r3, [pc, #244]	; (b8fc <MiApp_ProtocolInit+0x188>)
    b808:	781b      	ldrb	r3, [r3, #0]
    b80a:	2bff      	cmp	r3, #255	; 0xff
    b80c:	d003      	beq.n	b816 <MiApp_ProtocolInit+0xa2>
        MiApp_Set(CHANNEL, &currentChannel);
    b80e:	493b      	ldr	r1, [pc, #236]	; (b8fc <MiApp_ProtocolInit+0x188>)
    b810:	2000      	movs	r0, #0
    b812:	4b3b      	ldr	r3, [pc, #236]	; (b900 <MiApp_ProtocolInit+0x18c>)
    b814:	4798      	blx	r3
    MiMAC_SetAltAddress((uint8_t *)&broadcastAddress, (uint8_t *)&myPANID.Val);
    b816:	4932      	ldr	r1, [pc, #200]	; (b8e0 <MiApp_ProtocolInit+0x16c>)
    b818:	200e      	movs	r0, #14
    b81a:	4468      	add	r0, sp
    b81c:	4b39      	ldr	r3, [pc, #228]	; (b904 <MiApp_ProtocolInit+0x190>)
    b81e:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    b820:	4a39      	ldr	r2, [pc, #228]	; (b908 <MiApp_ProtocolInit+0x194>)
    b822:	4b3a      	ldr	r3, [pc, #232]	; (b90c <MiApp_ProtocolInit+0x198>)
    b824:	781b      	ldrb	r3, [r3, #0]
    b826:	011b      	lsls	r3, r3, #4
    b828:	7811      	ldrb	r1, [r2, #0]
    b82a:	430b      	orrs	r3, r1
    b82c:	7013      	strb	r3, [r2, #0]
    protocolTimer.interval = PROTOCOL_TIMER_INTERVAL;
    b82e:	4838      	ldr	r0, [pc, #224]	; (b910 <MiApp_ProtocolInit+0x19c>)
    b830:	23fa      	movs	r3, #250	; 0xfa
    b832:	009b      	lsls	r3, r3, #2
    b834:	6083      	str	r3, [r0, #8]
    protocolTimer.mode = SYS_TIMER_PERIODIC_MODE;
    b836:	2501      	movs	r5, #1
    b838:	7305      	strb	r5, [r0, #12]
    protocolTimer.handler = protocolTimerHandler;
    b83a:	4b36      	ldr	r3, [pc, #216]	; (b914 <MiApp_ProtocolInit+0x1a0>)
    b83c:	6103      	str	r3, [r0, #16]
    SYS_TimerStart(&protocolTimer);
    b83e:	4b36      	ldr	r3, [pc, #216]	; (b918 <MiApp_ProtocolInit+0x1a4>)
    b840:	4798      	blx	r3
    dataTimer.interval = DATA_TIMER_INTERVAL;
    b842:	4b36      	ldr	r3, [pc, #216]	; (b91c <MiApp_ProtocolInit+0x1a8>)
    b844:	2264      	movs	r2, #100	; 0x64
    b846:	609a      	str	r2, [r3, #8]
    dataTimer.mode = SYS_TIMER_PERIODIC_MODE;
    b848:	731d      	strb	r5, [r3, #12]
    dataTimer.handler = dataTimerHandler;
    b84a:	4a35      	ldr	r2, [pc, #212]	; (b920 <MiApp_ProtocolInit+0x1ac>)
    b84c:	611a      	str	r2, [r3, #16]
	miQueueInit(&appAckWaitDataQueue);
    b84e:	4835      	ldr	r0, [pc, #212]	; (b924 <MiApp_ProtocolInit+0x1b0>)
    b850:	4d35      	ldr	r5, [pc, #212]	; (b928 <MiApp_ProtocolInit+0x1b4>)
    b852:	47a8      	blx	r5
	miQueueInit(&macAckOnlyFrameQueue);
    b854:	4835      	ldr	r0, [pc, #212]	; (b92c <MiApp_ProtocolInit+0x1b8>)
    b856:	47a8      	blx	r5
	miQueueInit(&indirectFrameQueue);
    b858:	4835      	ldr	r0, [pc, #212]	; (b930 <MiApp_ProtocolInit+0x1bc>)
    b85a:	47a8      	blx	r5
    if (IN_NETWORK_STATE == p2pStarCurrentState)
    b85c:	4b21      	ldr	r3, [pc, #132]	; (b8e4 <MiApp_ProtocolInit+0x170>)
    b85e:	781b      	ldrb	r3, [r3, #0]
    b860:	2b07      	cmp	r3, #7
    b862:	d025      	beq.n	b8b0 <MiApp_ProtocolInit+0x13c>
}
    b864:	0020      	movs	r0, r4
    b866:	b004      	add	sp, #16
    b868:	bc04      	pop	{r2}
    b86a:	4690      	mov	r8, r2
    b86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!PDS_IsAbleToRestore(MIWI_ALL_MEMORY_MEM_ID) || !PDS_Restore(MIWI_ALL_MEMORY_MEM_ID))
    b86e:	4831      	ldr	r0, [pc, #196]	; (b934 <MiApp_ProtocolInit+0x1c0>)
    b870:	4b31      	ldr	r3, [pc, #196]	; (b938 <MiApp_ProtocolInit+0x1c4>)
    b872:	4798      	blx	r3
    b874:	2800      	cmp	r0, #0
    b876:	d004      	beq.n	b882 <MiApp_ProtocolInit+0x10e>
    b878:	482e      	ldr	r0, [pc, #184]	; (b934 <MiApp_ProtocolInit+0x1c0>)
    b87a:	4b30      	ldr	r3, [pc, #192]	; (b93c <MiApp_ProtocolInit+0x1c8>)
    b87c:	4798      	blx	r3
    b87e:	2800      	cmp	r0, #0
    b880:	d101      	bne.n	b886 <MiApp_ProtocolInit+0x112>
            PDS_InitItems();
    b882:	4b2f      	ldr	r3, [pc, #188]	; (b940 <MiApp_ProtocolInit+0x1cc>)
    b884:	4798      	blx	r3
    if (myPANID.Val != 0x0000 && myPANID.Val != 0xFFFF)
    b886:	4b16      	ldr	r3, [pc, #88]	; (b8e0 <MiApp_ProtocolInit+0x16c>)
    b888:	881b      	ldrh	r3, [r3, #0]
    b88a:	3b01      	subs	r3, #1
    b88c:	b29b      	uxth	r3, r3
    b88e:	4a2d      	ldr	r2, [pc, #180]	; (b944 <MiApp_ProtocolInit+0x1d0>)
    b890:	4293      	cmp	r3, r2
    b892:	d900      	bls.n	b896 <MiApp_ProtocolInit+0x122>
    b894:	e784      	b.n	b7a0 <MiApp_ProtocolInit+0x2c>
        p2pStarCurrentState = IN_NETWORK_STATE;
    b896:	2207      	movs	r2, #7
    b898:	4b12      	ldr	r3, [pc, #72]	; (b8e4 <MiApp_ProtocolInit+0x170>)
    b89a:	701a      	strb	r2, [r3, #0]
        if (NULL != reconnectionCallback)
    b89c:	4b2a      	ldr	r3, [pc, #168]	; (b948 <MiApp_ProtocolInit+0x1d4>)
    b89e:	681b      	ldr	r3, [r3, #0]
    b8a0:	2b00      	cmp	r3, #0
    b8a2:	d003      	beq.n	b8ac <MiApp_ProtocolInit+0x138>
            reconnectionCallback(SUCCESS);
    b8a4:	2000      	movs	r0, #0
    b8a6:	4798      	blx	r3
        initStatus = RECONNECTED;
    b8a8:	240f      	movs	r4, #15
    b8aa:	e79a      	b.n	b7e2 <MiApp_ProtocolInit+0x6e>
    b8ac:	240f      	movs	r4, #15
    b8ae:	e798      	b.n	b7e2 <MiApp_ProtocolInit+0x6e>
        if (PAN_COORD == role)
    b8b0:	4b26      	ldr	r3, [pc, #152]	; (b94c <MiApp_ProtocolInit+0x1d8>)
    b8b2:	781b      	ldrb	r3, [r3, #0]
    b8b4:	2b01      	cmp	r3, #1
    b8b6:	d006      	beq.n	b8c6 <MiApp_ProtocolInit+0x152>
    linkStatusTimeInterval = LINK_STATUS_TIMEOUT;
    b8b8:	2214      	movs	r2, #20
    b8ba:	4b25      	ldr	r3, [pc, #148]	; (b950 <MiApp_ProtocolInit+0x1dc>)
    b8bc:	801a      	strh	r2, [r3, #0]
	connectionTbLostCount = 0;	//clear it when reconnection to PAN
    b8be:	2200      	movs	r2, #0
    b8c0:	4b24      	ldr	r3, [pc, #144]	; (b954 <MiApp_ProtocolInit+0x1e0>)
    b8c2:	701a      	strb	r2, [r3, #0]
    b8c4:	e7ce      	b.n	b864 <MiApp_ProtocolInit+0xf0>
    inActiveDeviceCheckTimeInterval = FIND_INACTIVE_DEVICE_TIMEOUT;
    b8c6:	223c      	movs	r2, #60	; 0x3c
    b8c8:	4b23      	ldr	r3, [pc, #140]	; (b958 <MiApp_ProtocolInit+0x1e4>)
    b8ca:	801a      	strh	r2, [r3, #0]
    sharePeerDevInfoTimeInterval = SHARE_PEER_DEVICE_INFO_TIMEOUT;
    b8cc:	3a2d      	subs	r2, #45	; 0x2d
    b8ce:	4b23      	ldr	r3, [pc, #140]	; (b95c <MiApp_ProtocolInit+0x1e8>)
    b8d0:	801a      	strh	r2, [r3, #0]
    b8d2:	e7c7      	b.n	b864 <MiApp_ProtocolInit+0xf0>
    b8d4:	200020e4 	.word	0x200020e4
    b8d8:	20002070 	.word	0x20002070
    b8dc:	20002074 	.word	0x20002074
    b8e0:	20002080 	.word	0x20002080
    b8e4:	2000041c 	.word	0x2000041c
    b8e8:	2000001a 	.word	0x2000001a
    b8ec:	00010aa9 	.word	0x00010aa9
    b8f0:	20002084 	.word	0x20002084
    b8f4:	20000010 	.word	0x20000010
    b8f8:	0000a765 	.word	0x0000a765
    b8fc:	2000000d 	.word	0x2000000d
    b900:	0000b745 	.word	0x0000b745
    b904:	0000a311 	.word	0x0000a311
    b908:	2000000c 	.word	0x2000000c
    b90c:	2000000b 	.word	0x2000000b
    b910:	20000424 	.word	0x20000424
    b914:	0000c0b1 	.word	0x0000c0b1
    b918:	0000d1b1 	.word	0x0000d1b1
    b91c:	200003fc 	.word	0x200003fc
    b920:	0000b695 	.word	0x0000b695
    b924:	200020e8 	.word	0x200020e8
    b928:	0000cffd 	.word	0x0000cffd
    b92c:	20002044 	.word	0x20002044
    b930:	20002050 	.word	0x20002050
    b934:	00004001 	.word	0x00004001
    b938:	0000a0f9 	.word	0x0000a0f9
    b93c:	00009e51 	.word	0x00009e51
    b940:	0000a165 	.word	0x0000a165
    b944:	0000fffd 	.word	0x0000fffd
    b948:	2000207c 	.word	0x2000207c
    b94c:	20002160 	.word	0x20002160
    b950:	2000041a 	.word	0x2000041a
    b954:	200003f7 	.word	0x200003f7
    b958:	20000412 	.word	0x20000412
    b95c:	20000438 	.word	0x20000438

0000b960 <MiApp_ConnectionMode>:
{
    b960:	b510      	push	{r4, lr}
    if( Mode > 3 )
    b962:	2803      	cmp	r0, #3
    b964:	d900      	bls.n	b968 <MiApp_ConnectionMode+0x8>
}
    b966:	bd10      	pop	{r4, pc}
    ConnMode = Mode;
    b968:	4b06      	ldr	r3, [pc, #24]	; (b984 <MiApp_ConnectionMode+0x24>)
    b96a:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    b96c:	4a06      	ldr	r2, [pc, #24]	; (b988 <MiApp_ConnectionMode+0x28>)
    b96e:	7811      	ldrb	r1, [r2, #0]
    b970:	230f      	movs	r3, #15
    b972:	400b      	ands	r3, r1
    b974:	0100      	lsls	r0, r0, #4
    b976:	4318      	orrs	r0, r3
    b978:	7010      	strb	r0, [r2, #0]
        PDS_Store(PDS_CONNECTION_MODE_ID);
    b97a:	2005      	movs	r0, #5
    b97c:	4b03      	ldr	r3, [pc, #12]	; (b98c <MiApp_ConnectionMode+0x2c>)
    b97e:	4798      	blx	r3
    b980:	e7f1      	b.n	b966 <MiApp_ConnectionMode+0x6>
    b982:	46c0      	nop			; (mov r8, r8)
    b984:	2000000b 	.word	0x2000000b
    b988:	2000000c 	.word	0x2000000c
    b98c:	00009f31 	.word	0x00009f31

0000b990 <MiApp_StartConnection>:
{
    b990:	b530      	push	{r4, r5, lr}
    b992:	b083      	sub	sp, #12
    b994:	0015      	movs	r5, r2
    b996:	001c      	movs	r4, r3
    if ((p2pStarCurrentState != INIT_STATE) && (p2pStarCurrentState != SEARCH_COMPLETE))
    b998:	4b2d      	ldr	r3, [pc, #180]	; (ba50 <MiApp_StartConnection+0xc0>)
    b99a:	781b      	ldrb	r3, [r3, #0]
    b99c:	2204      	movs	r2, #4
    b99e:	4393      	bics	r3, r2
        return false;
    b9a0:	2200      	movs	r2, #0
    if ((p2pStarCurrentState != INIT_STATE) && (p2pStarCurrentState != SEARCH_COMPLETE))
    b9a2:	2b01      	cmp	r3, #1
    b9a4:	d002      	beq.n	b9ac <MiApp_StartConnection+0x1c>
}
    b9a6:	0010      	movs	r0, r2
    b9a8:	b003      	add	sp, #12
    b9aa:	bd30      	pop	{r4, r5, pc}
    p2pStarCurrentState = STARTING_NETWORK;
    b9ac:	3202      	adds	r2, #2
    b9ae:	4b28      	ldr	r3, [pc, #160]	; (ba50 <MiApp_StartConnection+0xc0>)
    b9b0:	701a      	strb	r2, [r3, #0]
    switch(Mode)
    b9b2:	2801      	cmp	r0, #1
    b9b4:	d040      	beq.n	ba38 <MiApp_StartConnection+0xa8>
    b9b6:	2800      	cmp	r0, #0
    b9b8:	d008      	beq.n	b9cc <MiApp_StartConnection+0x3c>
    b9ba:	2802      	cmp	r0, #2
    b9bc:	d040      	beq.n	ba40 <MiApp_StartConnection+0xb0>
    ConfCallback(FAILURE);
    b9be:	2001      	movs	r0, #1
    b9c0:	47a0      	blx	r4
    p2pStarCurrentState = INIT_STATE;
    b9c2:	2201      	movs	r2, #1
    b9c4:	4b22      	ldr	r3, [pc, #136]	; (ba50 <MiApp_StartConnection+0xc0>)
    b9c6:	701a      	strb	r2, [r3, #0]
    return false;
    b9c8:	2200      	movs	r2, #0
    b9ca:	e7ec      	b.n	b9a6 <MiApp_StartConnection+0x16>
            uint8_t channel = 0;
    b9cc:	2200      	movs	r2, #0
    b9ce:	466b      	mov	r3, sp
    b9d0:	715a      	strb	r2, [r3, #5]
            uint16_t tmp = 0xFFFF;
    b9d2:	466b      	mov	r3, sp
    b9d4:	1d98      	adds	r0, r3, #6
    b9d6:	2301      	movs	r3, #1
    b9d8:	425b      	negs	r3, r3
    b9da:	8003      	strh	r3, [r0, #0]
			myPANID.Val = myPAN_ID;
    b9dc:	491d      	ldr	r1, [pc, #116]	; (ba54 <MiApp_StartConnection+0xc4>)
    b9de:	4b1e      	ldr	r3, [pc, #120]	; (ba58 <MiApp_StartConnection+0xc8>)
    b9e0:	881b      	ldrh	r3, [r3, #0]
    b9e2:	800b      	strh	r3, [r1, #0]
            MiMAC_SetAltAddress((uint8_t *)&tmp, (uint8_t *)&myPANID.Val);
    b9e4:	4b1d      	ldr	r3, [pc, #116]	; (ba5c <MiApp_StartConnection+0xcc>)
    b9e6:	4798      	blx	r3
            while (!(index & ChannelMap))
    b9e8:	07eb      	lsls	r3, r5, #31
    b9ea:	d40d      	bmi.n	ba08 <MiApp_StartConnection+0x78>
    b9ec:	466b      	mov	r3, sp
    b9ee:	7959      	ldrb	r1, [r3, #5]
    b9f0:	3101      	adds	r1, #1
    b9f2:	b2c9      	uxtb	r1, r1
    b9f4:	2201      	movs	r2, #1
    b9f6:	e000      	b.n	b9fa <MiApp_StartConnection+0x6a>
    b9f8:	0019      	movs	r1, r3
                index = index << 1;
    b9fa:	0052      	lsls	r2, r2, #1
    b9fc:	1c4b      	adds	r3, r1, #1
    b9fe:	b2db      	uxtb	r3, r3
            while (!(index & ChannelMap))
    ba00:	422a      	tst	r2, r5
    ba02:	d0f9      	beq.n	b9f8 <MiApp_StartConnection+0x68>
    ba04:	466b      	mov	r3, sp
    ba06:	7159      	strb	r1, [r3, #5]
            MiApp_Set(CHANNEL, &channel);
    ba08:	466b      	mov	r3, sp
    ba0a:	1d59      	adds	r1, r3, #5
    ba0c:	2000      	movs	r0, #0
    ba0e:	4b14      	ldr	r3, [pc, #80]	; (ba60 <MiApp_StartConnection+0xd0>)
    ba10:	4798      	blx	r3
        role = PAN_COORD;
    ba12:	2201      	movs	r2, #1
    ba14:	4b13      	ldr	r3, [pc, #76]	; (ba64 <MiApp_StartConnection+0xd4>)
    ba16:	701a      	strb	r2, [r3, #0]
        p2pStarCurrentState = IN_NETWORK_STATE;
    ba18:	3206      	adds	r2, #6
    ba1a:	4b0d      	ldr	r3, [pc, #52]	; (ba50 <MiApp_StartConnection+0xc0>)
    ba1c:	701a      	strb	r2, [r3, #0]
        PDS_Store(MIWI_ALL_MEMORY_MEM_ID);
    ba1e:	4812      	ldr	r0, [pc, #72]	; (ba68 <MiApp_StartConnection+0xd8>)
    ba20:	4b12      	ldr	r3, [pc, #72]	; (ba6c <MiApp_StartConnection+0xdc>)
    ba22:	4798      	blx	r3
    inActiveDeviceCheckTimeInterval = FIND_INACTIVE_DEVICE_TIMEOUT;
    ba24:	223c      	movs	r2, #60	; 0x3c
    ba26:	4b12      	ldr	r3, [pc, #72]	; (ba70 <MiApp_StartConnection+0xe0>)
    ba28:	801a      	strh	r2, [r3, #0]
    sharePeerDevInfoTimeInterval = SHARE_PEER_DEVICE_INFO_TIMEOUT;
    ba2a:	3a2d      	subs	r2, #45	; 0x2d
    ba2c:	4b11      	ldr	r3, [pc, #68]	; (ba74 <MiApp_StartConnection+0xe4>)
    ba2e:	801a      	strh	r2, [r3, #0]
            ConfCallback(SUCCESS);
    ba30:	2000      	movs	r0, #0
    ba32:	47a0      	blx	r4
            return true;
    ba34:	2201      	movs	r2, #1
    ba36:	e7b6      	b.n	b9a6 <MiApp_StartConnection+0x16>
        ConfCallback(FAILURE);
    ba38:	2001      	movs	r0, #1
    ba3a:	47a0      	blx	r4
        return false;
    ba3c:	2200      	movs	r2, #0
    ba3e:	e7b2      	b.n	b9a6 <MiApp_StartConnection+0x16>
            ConfCallback(FAILURE);
    ba40:	2001      	movs	r0, #1
    ba42:	47a0      	blx	r4
            p2pStarCurrentState = INIT_STATE;
    ba44:	2201      	movs	r2, #1
    ba46:	4b02      	ldr	r3, [pc, #8]	; (ba50 <MiApp_StartConnection+0xc0>)
    ba48:	701a      	strb	r2, [r3, #0]
            return false;
    ba4a:	2200      	movs	r2, #0
    ba4c:	e7ab      	b.n	b9a6 <MiApp_StartConnection+0x16>
    ba4e:	46c0      	nop			; (mov r8, r8)
    ba50:	2000041c 	.word	0x2000041c
    ba54:	20002080 	.word	0x20002080
    ba58:	2000001a 	.word	0x2000001a
    ba5c:	0000a311 	.word	0x0000a311
    ba60:	0000b745 	.word	0x0000b745
    ba64:	20002160 	.word	0x20002160
    ba68:	00004001 	.word	0x00004001
    ba6c:	00009f31 	.word	0x00009f31
    ba70:	20000412 	.word	0x20000412
    ba74:	20000438 	.word	0x20000438

0000ba78 <MiApp_SubscribeDataIndicationCallback>:
    if (NULL != callback)
    ba78:	2800      	cmp	r0, #0
    ba7a:	d003      	beq.n	ba84 <MiApp_SubscribeDataIndicationCallback+0xc>
	    pktRxcallback = callback;
    ba7c:	4b02      	ldr	r3, [pc, #8]	; (ba88 <MiApp_SubscribeDataIndicationCallback+0x10>)
    ba7e:	6018      	str	r0, [r3, #0]
	    return true;
    ba80:	2001      	movs	r0, #1
}
    ba82:	4770      	bx	lr
    return false;
    ba84:	2000      	movs	r0, #0
    ba86:	e7fc      	b.n	ba82 <MiApp_SubscribeDataIndicationCallback+0xa>
    ba88:	20000420 	.word	0x20000420

0000ba8c <Total_Connections>:
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].Address[0] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[1] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[2] != 0x00)
    ba8c:	4b0a      	ldr	r3, [pc, #40]	; (bab8 <Total_Connections+0x2c>)
    ba8e:	681b      	ldr	r3, [r3, #0]
    ba90:	681b      	ldr	r3, [r3, #0]
    ba92:	0019      	movs	r1, r3
    ba94:	3141      	adds	r1, #65	; 0x41
    ba96:	31ff      	adds	r1, #255	; 0xff
    uint8_t count=0 , i;
    ba98:	2000      	movs	r0, #0
    ba9a:	e004      	b.n	baa6 <Total_Connections+0x1a>
            count++;
    ba9c:	3001      	adds	r0, #1
    ba9e:	b2c0      	uxtb	r0, r0
    baa0:	3310      	adds	r3, #16
    for (i=0;i<CONNECTION_SIZE;i++)
    baa2:	428b      	cmp	r3, r1
    baa4:	d006      	beq.n	bab4 <Total_Connections+0x28>
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].Address[0] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[1] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[2] != 0x00)
    baa6:	889a      	ldrh	r2, [r3, #4]
    baa8:	2a00      	cmp	r2, #0
    baaa:	d1f7      	bne.n	ba9c <Total_Connections+0x10>
    baac:	799a      	ldrb	r2, [r3, #6]
    baae:	2a00      	cmp	r2, #0
    bab0:	d0f6      	beq.n	baa0 <Total_Connections+0x14>
    bab2:	e7f3      	b.n	ba9c <Total_Connections+0x10>
}
    bab4:	4770      	bx	lr
    bab6:	46c0      	nop			; (mov r8, r8)
    bab8:	20002070 	.word	0x20002070

0000babc <isSameAddress>:
{
    babc:	b510      	push	{r4, lr}
        if( Address1[i] != Address2[i] )
    babe:	7802      	ldrb	r2, [r0, #0]
    bac0:	780b      	ldrb	r3, [r1, #0]
    bac2:	429a      	cmp	r2, r3
    bac4:	d109      	bne.n	bada <isSameAddress+0x1e>
    bac6:	2301      	movs	r3, #1
    bac8:	5cc4      	ldrb	r4, [r0, r3]
    baca:	5cca      	ldrb	r2, [r1, r3]
    bacc:	4294      	cmp	r4, r2
    bace:	d106      	bne.n	bade <isSameAddress+0x22>
    bad0:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    bad2:	2b08      	cmp	r3, #8
    bad4:	d1f8      	bne.n	bac8 <isSameAddress+0xc>
    return true;
    bad6:	2001      	movs	r0, #1
}
    bad8:	bd10      	pop	{r4, pc}
            return false;
    bada:	2000      	movs	r0, #0
    badc:	e7fc      	b.n	bad8 <isSameAddress+0x1c>
    bade:	2000      	movs	r0, #0
    bae0:	e7fa      	b.n	bad8 <isSameAddress+0x1c>
    bae2:	Address 0x0000bae2 is out of bounds.


0000bae4 <AddConnection>:
{
    bae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bae6:	b083      	sub	sp, #12
    bae8:	9001      	str	r0, [sp, #4]
        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    baea:	4b30      	ldr	r3, [pc, #192]	; (bbac <AddConnection+0xc8>)
    baec:	681f      	ldr	r7, [r3, #0]
            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    baee:	4b30      	ldr	r3, [pc, #192]	; (bbb0 <AddConnection+0xcc>)
    baf0:	685b      	ldr	r3, [r3, #4]
    baf2:	9300      	str	r3, [sp, #0]
    baf4:	683d      	ldr	r5, [r7, #0]
    uint8_t connectionSlot = 0xFF;
    baf6:	26ff      	movs	r6, #255	; 0xff
    for(i = 0; i < CONNECTION_SIZE; i++)
    baf8:	2400      	movs	r4, #0
    bafa:	e00a      	b.n	bb12 <AddConnection+0x2e>
            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    bafc:	1d29      	adds	r1, r5, #4
    bafe:	9800      	ldr	r0, [sp, #0]
    bb00:	4b2c      	ldr	r3, [pc, #176]	; (bbb4 <AddConnection+0xd0>)
    bb02:	4798      	blx	r3
    bb04:	2800      	cmp	r0, #0
    bb06:	d14a      	bne.n	bb9e <AddConnection+0xba>
    for(i = 0; i < CONNECTION_SIZE; i++)
    bb08:	3401      	adds	r4, #1
    bb0a:	b2e4      	uxtb	r4, r4
    bb0c:	3510      	adds	r5, #16
    bb0e:	2c14      	cmp	r4, #20
    bb10:	d006      	beq.n	bb20 <AddConnection+0x3c>
        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    bb12:	7b2b      	ldrb	r3, [r5, #12]
    bb14:	2b7f      	cmp	r3, #127	; 0x7f
    bb16:	d8f1      	bhi.n	bafc <AddConnection+0x18>
        else if( connectionSlot == 0xFF )
    bb18:	2eff      	cmp	r6, #255	; 0xff
    bb1a:	d1f5      	bne.n	bb08 <AddConnection+0x24>
    bb1c:	0026      	movs	r6, r4
    bb1e:	e7f3      	b.n	bb08 <AddConnection+0x24>
    uint8_t status = STATUS_SUCCESS;
    bb20:	2400      	movs	r4, #0
    if( connectionSlot == 0xFF )
    bb22:	2eff      	cmp	r6, #255	; 0xff
    bb24:	d03e      	beq.n	bba4 <AddConnection+0xc0>
        if( ConnMode >= ENABLE_PREV_CONN )
    bb26:	4b24      	ldr	r3, [pc, #144]	; (bbb8 <AddConnection+0xd4>)
    bb28:	781b      	ldrb	r3, [r3, #0]
    bb2a:	2b00      	cmp	r3, #0
    bb2c:	d13b      	bne.n	bba6 <AddConnection+0xc2>
        MyindexinPC = connectionSlot;
    bb2e:	4b23      	ldr	r3, [pc, #140]	; (bbbc <AddConnection+0xd8>)
    bb30:	701e      	strb	r6, [r3, #0]
            miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    bb32:	0130      	lsls	r0, r6, #4
    bb34:	2200      	movs	r2, #0
    bb36:	4d1e      	ldr	r5, [pc, #120]	; (bbb0 <AddConnection+0xcc>)
    bb38:	686b      	ldr	r3, [r5, #4]
    bb3a:	5c99      	ldrb	r1, [r3, r2]
    bb3c:	683b      	ldr	r3, [r7, #0]
    bb3e:	181b      	adds	r3, r3, r0
    bb40:	189b      	adds	r3, r3, r2
    bb42:	7119      	strb	r1, [r3, #4]
    bb44:	3201      	adds	r2, #1
        for(i = 0; i < 8; i++)
    bb46:	2a08      	cmp	r2, #8
    bb48:	d1f6      	bne.n	bb38 <AddConnection+0x54>
        miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].status.bits.isValid = 1;
    bb4a:	683b      	ldr	r3, [r7, #0]
    bb4c:	181b      	adds	r3, r3, r0
    bb4e:	7b19      	ldrb	r1, [r3, #12]
    bb50:	3a88      	subs	r2, #136	; 0x88
    bb52:	430a      	orrs	r2, r1
    bb54:	731a      	strb	r2, [r3, #12]
        miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (capacityInfo & 0x01);
    bb56:	683b      	ldr	r3, [r7, #0]
    bb58:	181b      	adds	r3, r3, r0
    bb5a:	2101      	movs	r1, #1
    bb5c:	2201      	movs	r2, #1
    bb5e:	9d01      	ldr	r5, [sp, #4]
    bb60:	402a      	ands	r2, r5
    bb62:	7b1d      	ldrb	r5, [r3, #12]
    bb64:	438d      	bics	r5, r1
    bb66:	432a      	orrs	r2, r5
    bb68:	731a      	strb	r2, [r3, #12]
		miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].link_status = 1;		//WSGA-13101, modified for PAN
    bb6a:	683b      	ldr	r3, [r7, #0]
    bb6c:	181b      	adds	r3, r3, r0
    bb6e:	7399      	strb	r1, [r3, #14]
                miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    bb70:	4b0f      	ldr	r3, [pc, #60]	; (bbb0 <AddConnection+0xcc>)
    bb72:	689b      	ldr	r3, [r3, #8]
    bb74:	78da      	ldrb	r2, [r3, #3]
    bb76:	683b      	ldr	r3, [r7, #0]
    bb78:	1818      	adds	r0, r3, r0
    bb7a:	7342      	strb	r2, [r0, #13]
            IncomingFrameCounter[connectionSlot].Val = 0;
    bb7c:	00b2      	lsls	r2, r6, #2
    bb7e:	2100      	movs	r1, #0
    bb80:	4b0f      	ldr	r3, [pc, #60]	; (bbc0 <AddConnection+0xdc>)
    bb82:	50d1      	str	r1, [r2, r3]
        LatestConnection = connectionSlot;
    bb84:	4b0f      	ldr	r3, [pc, #60]	; (bbc4 <AddConnection+0xe0>)
    bb86:	701e      	strb	r6, [r3, #0]
		RNCmd_SendConnectionChange(connectionSlot);
    bb88:	0030      	movs	r0, r6
    bb8a:	4b0f      	ldr	r3, [pc, #60]	; (bbc8 <AddConnection+0xe4>)
    bb8c:	4798      	blx	r3
    conn_size = Total_Connections();
    bb8e:	4b0f      	ldr	r3, [pc, #60]	; (bbcc <AddConnection+0xe8>)
    bb90:	4798      	blx	r3
    bb92:	4b0f      	ldr	r3, [pc, #60]	; (bbd0 <AddConnection+0xec>)
    bb94:	7018      	strb	r0, [r3, #0]
    PDS_Store(PDS_EDC_ID);
    bb96:	2007      	movs	r0, #7
    bb98:	4b0e      	ldr	r3, [pc, #56]	; (bbd4 <AddConnection+0xf0>)
    bb9a:	4798      	blx	r3
    return status;
    bb9c:	e003      	b.n	bba6 <AddConnection+0xc2>
    bb9e:	0026      	movs	r6, r4
                status = STATUS_EXISTS;
    bba0:	2401      	movs	r4, #1
    bba2:	e7be      	b.n	bb22 <AddConnection+0x3e>
        return STATUS_NOT_ENOUGH_SPACE;
    bba4:	24f1      	movs	r4, #241	; 0xf1
}
    bba6:	0020      	movs	r0, r4
    bba8:	b003      	add	sp, #12
    bbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbac:	20002070 	.word	0x20002070
    bbb0:	20002178 	.word	0x20002178
    bbb4:	0000babd 	.word	0x0000babd
    bbb8:	2000000b 	.word	0x2000000b
    bbbc:	200020e0 	.word	0x200020e0
    bbc0:	20002084 	.word	0x20002084
    bbc4:	20002040 	.word	0x20002040
    bbc8:	0000f43d 	.word	0x0000f43d
    bbcc:	0000ba8d 	.word	0x0000ba8d
    bbd0:	200003f6 	.word	0x200003f6
    bbd4:	00009f31 	.word	0x00009f31

0000bbd8 <frameTransmit>:
{
    bbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bbda:	46de      	mov	lr, fp
    bbdc:	4657      	mov	r7, sl
    bbde:	464e      	mov	r6, r9
    bbe0:	4645      	mov	r5, r8
    bbe2:	b5e0      	push	{r5, r6, r7, lr}
    bbe4:	b083      	sub	sp, #12
    bbe6:	0005      	movs	r5, r0
    bbe8:	4668      	mov	r0, sp
    bbea:	80c1      	strh	r1, [r0, #6]
    bbec:	0017      	movs	r7, r2
    bbee:	469a      	mov	sl, r3
    bbf0:	ab0c      	add	r3, sp, #48	; 0x30
    bbf2:	781e      	ldrb	r6, [r3, #0]
    bbf4:	ab0d      	add	r3, sp, #52	; 0x34
    bbf6:	781b      	ldrb	r3, [r3, #0]
    bbf8:	4698      	mov	r8, r3
    bbfa:	ab0f      	add	r3, sp, #60	; 0x3c
    bbfc:	781b      	ldrb	r3, [r3, #0]
    bbfe:	4699      	mov	r9, r3
    bc00:	ab10      	add	r3, sp, #64	; 0x40
    bc02:	781b      	ldrb	r3, [r3, #0]
    bc04:	469b      	mov	fp, r3
    txFramePtr = (TxFrame_t *) MiMem_Alloc(sizeof(TxFrame_t));
    bc06:	2028      	movs	r0, #40	; 0x28
    bc08:	4b30      	ldr	r3, [pc, #192]	; (bccc <frameTransmit+0xf4>)
    bc0a:	4798      	blx	r3
    bc0c:	1e04      	subs	r4, r0, #0
    if (NULL == txFramePtr)
    bc0e:	d05b      	beq.n	bcc8 <frameTransmit+0xf0>
    tParam->flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
    bc10:	2303      	movs	r3, #3
    bc12:	4652      	mov	r2, sl
    bc14:	4013      	ands	r3, r2
    bc16:	7603      	strb	r3, [r0, #24]
    tParam->flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
    bc18:	2300      	movs	r3, #0
    bc1a:	2d00      	cmp	r5, #0
    bc1c:	d100      	bne.n	bc20 <frameTransmit+0x48>
    bc1e:	465b      	mov	r3, fp
    bc20:	2201      	movs	r2, #1
    bc22:	4013      	ands	r3, r2
    bc24:	015b      	lsls	r3, r3, #5
    bc26:	469c      	mov	ip, r3
    bc28:	7e23      	ldrb	r3, [r4, #24]
    bc2a:	2120      	movs	r1, #32
    bc2c:	468a      	mov	sl, r1
    bc2e:	438b      	bics	r3, r1
    tParam->flags.bits.broadcast = Broadcast;
    bc30:	0010      	movs	r0, r2
    bc32:	4028      	ands	r0, r5
    bc34:	0080      	lsls	r0, r0, #2
    bc36:	4661      	mov	r1, ip
    bc38:	430b      	orrs	r3, r1
    bc3a:	2104      	movs	r1, #4
    bc3c:	438b      	bics	r3, r1
    tParam->flags.bits.secEn = SecurityEnabled;
    bc3e:	4016      	ands	r6, r2
    bc40:	00f6      	lsls	r6, r6, #3
    bc42:	4303      	orrs	r3, r0
    bc44:	2008      	movs	r0, #8
    bc46:	4383      	bics	r3, r0
        tParam->altSrcAddr = 0;
    bc48:	2100      	movs	r1, #0
    bc4a:	3019      	adds	r0, #25
    bc4c:	5421      	strb	r1, [r4, r0]
        tParam->altDestAddr = (Broadcast) ? true : false;
    bc4e:	4651      	mov	r1, sl
    bc50:	5465      	strb	r5, [r4, r1]
        tParam->flags.bits.destPrsnt = (Broadcast) ? 0:1;
    bc52:	2101      	movs	r1, #1
    bc54:	404d      	eors	r5, r1
    bc56:	402a      	ands	r2, r5
    bc58:	0192      	lsls	r2, r2, #6
    bc5a:	431e      	orrs	r6, r3
    bc5c:	2340      	movs	r3, #64	; 0x40
    bc5e:	439e      	bics	r6, r3
        tParam->flags.bits.sourcePrsnt = 1;
    bc60:	4332      	orrs	r2, r6
    bc62:	2680      	movs	r6, #128	; 0x80
    bc64:	4276      	negs	r6, r6
    bc66:	4332      	orrs	r2, r6
    bc68:	7622      	strb	r2, [r4, #24]
    tParam->DestAddress = DestinationAddress;
    bc6a:	61e7      	str	r7, [r4, #28]
        tParam->DestPANID.Val = DestinationPANID.Val;
    bc6c:	466b      	mov	r3, sp
    bc6e:	88db      	ldrh	r3, [r3, #6]
    bc70:	8463      	strh	r3, [r4, #34]	; 0x22
    if (NULL != DestinationAddress)
    bc72:	2f00      	cmp	r7, #0
    bc74:	d008      	beq.n	bc88 <frameTransmit+0xb0>
        if (false == tParam->flags.bits.broadcast)
    bc76:	b2d3      	uxtb	r3, r2
    bc78:	075b      	lsls	r3, r3, #29
    bc7a:	d41e      	bmi.n	bcba <frameTransmit+0xe2>
            memcpy(&(txFramePtr->txFrameEntry.frameDstAddr), DestinationAddress, LONG_ADDR_LEN);
    bc7c:	0020      	movs	r0, r4
    bc7e:	3008      	adds	r0, #8
    bc80:	2208      	movs	r2, #8
    bc82:	0039      	movs	r1, r7
    bc84:	4b12      	ldr	r3, [pc, #72]	; (bcd0 <frameTransmit+0xf8>)
    bc86:	4798      	blx	r3
    txFramePtr->txFrameEntry.frame = msgPtr;
    bc88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bc8a:	6163      	str	r3, [r4, #20]
    tParam->DestAddress = (uint8_t*)&(txFramePtr->txFrameEntry.frameDstAddr);
    bc8c:	0023      	movs	r3, r4
    bc8e:	3308      	adds	r3, #8
    bc90:	61e3      	str	r3, [r4, #28]
    txFramePtr->txFrameEntry.frameConfCallback = ConfCallback;
    bc92:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bc94:	6123      	str	r3, [r4, #16]
    txFramePtr->txFrameEntry.frameHandle = msghandle;
    bc96:	2325      	movs	r3, #37	; 0x25
    bc98:	464a      	mov	r2, r9
    bc9a:	54e2      	strb	r2, [r4, r3]
    txFramePtr->txFrameEntry.frameLength = msgLen;
    bc9c:	3b01      	subs	r3, #1
    bc9e:	4642      	mov	r2, r8
    bca0:	54e2      	strb	r2, [r4, r3]
    miQueueAppend(&frameTxQueue, (miQueueBuffer_t *)txFramePtr);
    bca2:	0021      	movs	r1, r4
    bca4:	480b      	ldr	r0, [pc, #44]	; (bcd4 <frameTransmit+0xfc>)
    bca6:	4b0c      	ldr	r3, [pc, #48]	; (bcd8 <frameTransmit+0x100>)
    bca8:	4798      	blx	r3
    return true;
    bcaa:	2001      	movs	r0, #1
}
    bcac:	b003      	add	sp, #12
    bcae:	bc3c      	pop	{r2, r3, r4, r5}
    bcb0:	4690      	mov	r8, r2
    bcb2:	4699      	mov	r9, r3
    bcb4:	46a2      	mov	sl, r4
    bcb6:	46ab      	mov	fp, r5
    bcb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(&(txFramePtr->txFrameEntry.frameDstAddr), DestinationAddress, SHORT_ADDR_LEN);
    bcba:	0020      	movs	r0, r4
    bcbc:	3008      	adds	r0, #8
    bcbe:	2202      	movs	r2, #2
    bcc0:	0039      	movs	r1, r7
    bcc2:	4b03      	ldr	r3, [pc, #12]	; (bcd0 <frameTransmit+0xf8>)
    bcc4:	4798      	blx	r3
    bcc6:	e7df      	b.n	bc88 <frameTransmit+0xb0>
        return false;
    bcc8:	2000      	movs	r0, #0
    bcca:	e7ef      	b.n	bcac <frameTransmit+0xd4>
    bccc:	0000ce0d 	.word	0x0000ce0d
    bcd0:	00010a97 	.word	0x00010a97
    bcd4:	200020d4 	.word	0x200020d4
    bcd8:	0000d009 	.word	0x0000d009

0000bcdc <sendConnectionRequest>:
{
    bcdc:	b510      	push	{r4, lr}
    bcde:	b086      	sub	sp, #24
    if ((gEstConnectionInfo.connectionRetries > 0) &&  (ESTABLISHING_NETWORK ==  p2pStarCurrentState))
    bce0:	4b26      	ldr	r3, [pc, #152]	; (bd7c <sendConnectionRequest+0xa0>)
    bce2:	78db      	ldrb	r3, [r3, #3]
    bce4:	2b00      	cmp	r3, #0
    bce6:	d111      	bne.n	bd0c <sendConnectionRequest+0x30>
        if ((gEstConnectionInfo.status == ALREADY_EXISTS) || (gEstConnectionInfo.status == SUCCESS))
    bce8:	4b24      	ldr	r3, [pc, #144]	; (bd7c <sendConnectionRequest+0xa0>)
    bcea:	7858      	ldrb	r0, [r3, #1]
    bcec:	2806      	cmp	r0, #6
    bcee:	d001      	beq.n	bcf4 <sendConnectionRequest+0x18>
    bcf0:	2800      	cmp	r0, #0
    bcf2:	d136      	bne.n	bd62 <sendConnectionRequest+0x86>
            p2pStarCurrentState = IN_NETWORK_STATE;
    bcf4:	2207      	movs	r2, #7
    bcf6:	4b22      	ldr	r3, [pc, #136]	; (bd80 <sendConnectionRequest+0xa4>)
    bcf8:	701a      	strb	r2, [r3, #0]
            gEstConnectionInfo.confCallback(gEstConnectionInfo.status);
    bcfa:	4b20      	ldr	r3, [pc, #128]	; (bd7c <sendConnectionRequest+0xa0>)
    bcfc:	68db      	ldr	r3, [r3, #12]
    bcfe:	4798      	blx	r3
        gEstConnectionInfo.confCallback = NULL;
    bd00:	2200      	movs	r2, #0
    bd02:	4b1e      	ldr	r3, [pc, #120]	; (bd7c <sendConnectionRequest+0xa0>)
    bd04:	60da      	str	r2, [r3, #12]
        return TIMER_EXPIRED;
    bd06:	2004      	movs	r0, #4
}
    bd08:	b006      	add	sp, #24
    bd0a:	bd10      	pop	{r4, pc}
    if ((gEstConnectionInfo.connectionRetries > 0) &&  (ESTABLISHING_NETWORK ==  p2pStarCurrentState))
    bd0c:	4b1c      	ldr	r3, [pc, #112]	; (bd80 <sendConnectionRequest+0xa4>)
    bd0e:	781b      	ldrb	r3, [r3, #0]
    bd10:	2b04      	cmp	r3, #4
    bd12:	d1e9      	bne.n	bce8 <sendConnectionRequest+0xc>
        dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REQUEST);
    bd14:	2005      	movs	r0, #5
    bd16:	4b1b      	ldr	r3, [pc, #108]	; (bd84 <sendConnectionRequest+0xa8>)
    bd18:	4798      	blx	r3
        if (NULL == dataPtr)
    bd1a:	2800      	cmp	r0, #0
    bd1c:	d029      	beq.n	bd72 <sendConnectionRequest+0x96>
        dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    bd1e:	2381      	movs	r3, #129	; 0x81
    bd20:	7003      	strb	r3, [r0, #0]
        dataPtr[dataLen++] = currentChannel;
    bd22:	4b19      	ldr	r3, [pc, #100]	; (bd88 <sendConnectionRequest+0xac>)
    bd24:	781b      	ldrb	r3, [r3, #0]
    bd26:	7043      	strb	r3, [r0, #1]
        dataPtr[dataLen++] = P2PCapacityInfo;
    bd28:	4b18      	ldr	r3, [pc, #96]	; (bd8c <sendConnectionRequest+0xb0>)
    bd2a:	781b      	ldrb	r3, [r3, #0]
    bd2c:	7083      	strb	r3, [r0, #2]
            dataPtr[dataLen++] = miwiDefaultRomOrRamParams->AdditionalNodeID[i];
    bd2e:	4b18      	ldr	r3, [pc, #96]	; (bd90 <sendConnectionRequest+0xb4>)
    bd30:	681b      	ldr	r3, [r3, #0]
    bd32:	689b      	ldr	r3, [r3, #8]
    bd34:	781b      	ldrb	r3, [r3, #0]
    bd36:	70c3      	strb	r3, [r0, #3]
        if(frameTransmit(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, connReqConfCallback))
    bd38:	4b16      	ldr	r3, [pc, #88]	; (bd94 <sendConnectionRequest+0xb8>)
    bd3a:	8819      	ldrh	r1, [r3, #0]
    bd3c:	4b16      	ldr	r3, [pc, #88]	; (bd98 <sendConnectionRequest+0xbc>)
    bd3e:	9305      	str	r3, [sp, #20]
    bd40:	2301      	movs	r3, #1
    bd42:	9304      	str	r3, [sp, #16]
    bd44:	2300      	movs	r3, #0
    bd46:	9303      	str	r3, [sp, #12]
    bd48:	9002      	str	r0, [sp, #8]
    bd4a:	2204      	movs	r2, #4
    bd4c:	9201      	str	r2, [sp, #4]
    bd4e:	9300      	str	r3, [sp, #0]
    bd50:	3301      	adds	r3, #1
    bd52:	2200      	movs	r2, #0
    bd54:	2001      	movs	r0, #1
    bd56:	4c11      	ldr	r4, [pc, #68]	; (bd9c <sendConnectionRequest+0xc0>)
    bd58:	47a0      	blx	r4
    bd5a:	2800      	cmp	r0, #0
    bd5c:	d10b      	bne.n	bd76 <sendConnectionRequest+0x9a>
            return MEMORY_UNAVAILABLE;
    bd5e:	300a      	adds	r0, #10
    bd60:	e7d2      	b.n	bd08 <sendConnectionRequest+0x2c>
            p2pStarCurrentState = gEstConnectionInfo.backupState;
    bd62:	4b06      	ldr	r3, [pc, #24]	; (bd7c <sendConnectionRequest+0xa0>)
    bd64:	7899      	ldrb	r1, [r3, #2]
    bd66:	4a06      	ldr	r2, [pc, #24]	; (bd80 <sendConnectionRequest+0xa4>)
    bd68:	7011      	strb	r1, [r2, #0]
            gEstConnectionInfo.confCallback(FAILURE);
    bd6a:	68db      	ldr	r3, [r3, #12]
    bd6c:	2001      	movs	r0, #1
    bd6e:	4798      	blx	r3
    bd70:	e7c6      	b.n	bd00 <sendConnectionRequest+0x24>
          return MEMORY_UNAVAILABLE;
    bd72:	200a      	movs	r0, #10
    bd74:	e7c8      	b.n	bd08 <sendConnectionRequest+0x2c>
            return SUCCESS;
    bd76:	2000      	movs	r0, #0
    bd78:	e7c6      	b.n	bd08 <sendConnectionRequest+0x2c>
    bd7a:	46c0      	nop			; (mov r8, r8)
    bd7c:	200020f4 	.word	0x200020f4
    bd80:	2000041c 	.word	0x2000041c
    bd84:	0000ce0d 	.word	0x0000ce0d
    bd88:	2000000d 	.word	0x2000000d
    bd8c:	2000000c 	.word	0x2000000c
    bd90:	20002070 	.word	0x20002070
    bd94:	20002080 	.word	0x20002080
    bd98:	0000bda1 	.word	0x0000bda1
    bd9c:	0000bbd9 	.word	0x0000bbd9

0000bda0 <connReqConfCallback>:
{
    bda0:	b510      	push	{r4, lr}
    bda2:	000c      	movs	r4, r1
    MiMem_Free(msgPointer);
    bda4:	0010      	movs	r0, r2
    bda6:	4b07      	ldr	r3, [pc, #28]	; (bdc4 <connReqConfCallback+0x24>)
    bda8:	4798      	blx	r3
    --gEstConnectionInfo.connectionRetries;
    bdaa:	4a07      	ldr	r2, [pc, #28]	; (bdc8 <connReqConfCallback+0x28>)
    bdac:	78d3      	ldrb	r3, [r2, #3]
    bdae:	3b01      	subs	r3, #1
    bdb0:	70d3      	strb	r3, [r2, #3]
    if (SUCCESS == status)
    bdb2:	2c00      	cmp	r4, #0
    bdb4:	d103      	bne.n	bdbe <connReqConfCallback+0x1e>
        connectionTimeInterval = CONNECTION_INTERVAL;
    bdb6:	2202      	movs	r2, #2
    bdb8:	4b04      	ldr	r3, [pc, #16]	; (bdcc <connReqConfCallback+0x2c>)
    bdba:	801a      	strh	r2, [r3, #0]
}
    bdbc:	bd10      	pop	{r4, pc}
        sendConnectionRequest();
    bdbe:	4b04      	ldr	r3, [pc, #16]	; (bdd0 <connReqConfCallback+0x30>)
    bdc0:	4798      	blx	r3
}
    bdc2:	e7fb      	b.n	bdbc <connReqConfCallback+0x1c>
    bdc4:	0000cec9 	.word	0x0000cec9
    bdc8:	200020f4 	.word	0x200020f4
    bdcc:	200003f8 	.word	0x200003f8
    bdd0:	0000bcdd 	.word	0x0000bcdd

0000bdd4 <MiApp_EstablishConnection>:
{
    bdd4:	b570      	push	{r4, r5, r6, lr}
    bdd6:	b082      	sub	sp, #8
    bdd8:	0016      	movs	r6, r2
    bdda:	466b      	mov	r3, sp
    bddc:	71d8      	strb	r0, [r3, #7]
    if (p2pStarCurrentState == INITIAL_STATE)
    bdde:	4b11      	ldr	r3, [pc, #68]	; (be24 <MiApp_EstablishConnection+0x50>)
    bde0:	781d      	ldrb	r5, [r3, #0]
        return 0;
    bde2:	2000      	movs	r0, #0
    if (p2pStarCurrentState == INITIAL_STATE)
    bde4:	2d00      	cmp	r5, #0
    bde6:	d101      	bne.n	bdec <MiApp_EstablishConnection+0x18>
}
    bde8:	b002      	add	sp, #8
    bdea:	bd70      	pop	{r4, r5, r6, pc}
    ConnMode = ENABLE_ALL_CONN;
    bdec:	2200      	movs	r2, #0
    bdee:	4b0e      	ldr	r3, [pc, #56]	; (be28 <MiApp_EstablishConnection+0x54>)
    bdf0:	701a      	strb	r2, [r3, #0]
    gEstConnectionInfo.confCallback = ConfCallback;
    bdf2:	4c0e      	ldr	r4, [pc, #56]	; (be2c <MiApp_EstablishConnection+0x58>)
    bdf4:	9b06      	ldr	r3, [sp, #24]
    bdf6:	60e3      	str	r3, [r4, #12]
    gEstConnectionInfo.addrLen = addr_len;
    bdf8:	7021      	strb	r1, [r4, #0]
    memcpy(gEstConnectionInfo.address, addr, addr_len);
    bdfa:	1d20      	adds	r0, r4, #4
    bdfc:	000a      	movs	r2, r1
    bdfe:	0031      	movs	r1, r6
    be00:	4b0b      	ldr	r3, [pc, #44]	; (be30 <MiApp_EstablishConnection+0x5c>)
    be02:	4798      	blx	r3
    gEstConnectionInfo.backupState = p2pStarCurrentState;
    be04:	70a5      	strb	r5, [r4, #2]
	gEstConnectionInfo.status = SCAN_NO_BEACON;
    be06:	2308      	movs	r3, #8
    be08:	7063      	strb	r3, [r4, #1]
    gEstConnectionInfo.connectionRetries = CONNECTION_RETRY_TIMES;
    be0a:	3b03      	subs	r3, #3
    be0c:	70e3      	strb	r3, [r4, #3]
    p2pStarCurrentState = ESTABLISHING_NETWORK;
    be0e:	2204      	movs	r2, #4
    be10:	4b04      	ldr	r3, [pc, #16]	; (be24 <MiApp_EstablishConnection+0x50>)
    be12:	701a      	strb	r2, [r3, #0]
    MiApp_Set(CHANNEL, &Channel);
    be14:	466b      	mov	r3, sp
    be16:	1dd9      	adds	r1, r3, #7
    be18:	2000      	movs	r0, #0
    be1a:	4b06      	ldr	r3, [pc, #24]	; (be34 <MiApp_EstablishConnection+0x60>)
    be1c:	4798      	blx	r3
    return sendConnectionRequest();
    be1e:	4b06      	ldr	r3, [pc, #24]	; (be38 <MiApp_EstablishConnection+0x64>)
    be20:	4798      	blx	r3
    be22:	e7e1      	b.n	bde8 <MiApp_EstablishConnection+0x14>
    be24:	2000041c 	.word	0x2000041c
    be28:	2000000b 	.word	0x2000000b
    be2c:	200020f4 	.word	0x200020f4
    be30:	00010a97 	.word	0x00010a97
    be34:	0000b745 	.word	0x0000b745
    be38:	0000bcdd 	.word	0x0000bcdd

0000be3c <MiApp_BroadcastConnectionTable>:
{
    be3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    be3e:	46de      	mov	lr, fp
    be40:	4657      	mov	r7, sl
    be42:	464e      	mov	r6, r9
    be44:	4645      	mov	r5, r8
    be46:	b5e0      	push	{r5, r6, r7, lr}
    be48:	b089      	sub	sp, #36	; 0x24
	if(conn_size % ((TX_BUFFER_SIZE - 4) / 4))
    be4a:	4b4f      	ldr	r3, [pc, #316]	; (bf88 <MiApp_BroadcastConnectionTable+0x14c>)
    be4c:	781c      	ldrb	r4, [r3, #0]
    be4e:	2113      	movs	r1, #19
    be50:	0020      	movs	r0, r4
    be52:	4b4e      	ldr	r3, [pc, #312]	; (bf8c <MiApp_BroadcastConnectionTable+0x150>)
    be54:	4798      	blx	r3
    be56:	b2c9      	uxtb	r1, r1
    be58:	2900      	cmp	r1, #0
    be5a:	d014      	beq.n	be86 <MiApp_BroadcastConnectionTable+0x4a>
		broadcast_count = conn_size / ((TX_BUFFER_SIZE - 4) / 4) + 1;
    be5c:	2113      	movs	r1, #19
    be5e:	0020      	movs	r0, r4
    be60:	4b4b      	ldr	r3, [pc, #300]	; (bf90 <MiApp_BroadcastConnectionTable+0x154>)
    be62:	4798      	blx	r3
    be64:	3001      	adds	r0, #1
    be66:	b2c0      	uxtb	r0, r0
    for (i = 0 ; i < broadcast_count ; i++)
    be68:	2800      	cmp	r0, #0
    be6a:	d100      	bne.n	be6e <MiApp_BroadcastConnectionTable+0x32>
    be6c:	e085      	b.n	bf7a <MiApp_BroadcastConnectionTable+0x13e>
    be6e:	00c3      	lsls	r3, r0, #3
    be70:	18c3      	adds	r3, r0, r3
    be72:	005b      	lsls	r3, r3, #1
    be74:	18c0      	adds	r0, r0, r3
    be76:	b2c3      	uxtb	r3, r0
    be78:	9307      	str	r3, [sp, #28]
    be7a:	2300      	movs	r3, #0
    be7c:	469b      	mov	fp, r3
    be7e:	3313      	adds	r3, #19
    be80:	469a      	mov	sl, r3
                if (miwiDefaultRomOrRamParams->ConnectionTable[j].status.bits.isValid)
    be82:	4e44      	ldr	r6, [pc, #272]	; (bf94 <MiApp_BroadcastConnectionTable+0x158>)
    be84:	e05f      	b.n	bf46 <MiApp_BroadcastConnectionTable+0x10a>
		broadcast_count = conn_size / ((TX_BUFFER_SIZE - 4) / 4);
    be86:	2113      	movs	r1, #19
    be88:	0020      	movs	r0, r4
    be8a:	4b41      	ldr	r3, [pc, #260]	; (bf90 <MiApp_BroadcastConnectionTable+0x154>)
    be8c:	4798      	blx	r3
    be8e:	b2c0      	uxtb	r0, r0
    be90:	e7ea      	b.n	be68 <MiApp_BroadcastConnectionTable+0x2c>
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[0]);
    be92:	7924      	ldrb	r4, [r4, #4]
    be94:	54c4      	strb	r4, [r0, r3]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[1]);
    be96:	4c3f      	ldr	r4, [pc, #252]	; (bf94 <MiApp_BroadcastConnectionTable+0x158>)
    be98:	6824      	ldr	r4, [r4, #0]
    be9a:	6824      	ldr	r4, [r4, #0]
    be9c:	1864      	adds	r4, r4, r1
    be9e:	7964      	ldrb	r4, [r4, #5]
    bea0:	46a4      	mov	ip, r4
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[0]);
    bea2:	1c5c      	adds	r4, r3, #1
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[1]);
    bea4:	b2e4      	uxtb	r4, r4
    bea6:	4667      	mov	r7, ip
    bea8:	5507      	strb	r7, [r0, r4]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[2]);
    beaa:	1cdc      	adds	r4, r3, #3
    beac:	b2e4      	uxtb	r4, r4
    beae:	46a4      	mov	ip, r4
    beb0:	4c38      	ldr	r4, [pc, #224]	; (bf94 <MiApp_BroadcastConnectionTable+0x158>)
    beb2:	6824      	ldr	r4, [r4, #0]
    beb4:	6824      	ldr	r4, [r4, #0]
    beb6:	1861      	adds	r1, r4, r1
    beb8:	798c      	ldrb	r4, [r1, #6]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[1]);
    beba:	1c99      	adds	r1, r3, #2
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[2]);
    bebc:	b2c9      	uxtb	r1, r1
    bebe:	5444      	strb	r4, [r0, r1]
                    dataPtr[dataLen++] = j;
    bec0:	3304      	adds	r3, #4
    bec2:	b2db      	uxtb	r3, r3
    bec4:	4661      	mov	r1, ip
    bec6:	5442      	strb	r2, [r0, r1]
        for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    bec8:	3201      	adds	r2, #1
    beca:	b2d2      	uxtb	r2, r2
    becc:	4542      	cmp	r2, r8
    bece:	da17      	bge.n	bf00 <MiApp_BroadcastConnectionTable+0xc4>
            if (j < conn_size)
    bed0:	4649      	mov	r1, r9
    bed2:	7809      	ldrb	r1, [r1, #0]
    bed4:	4291      	cmp	r1, r2
    bed6:	d9f7      	bls.n	bec8 <MiApp_BroadcastConnectionTable+0x8c>
                if (miwiDefaultRomOrRamParams->ConnectionTable[j].status.bits.isValid)
    bed8:	0111      	lsls	r1, r2, #4
    beda:	6834      	ldr	r4, [r6, #0]
    bedc:	6824      	ldr	r4, [r4, #0]
    bede:	1864      	adds	r4, r4, r1
    bee0:	7b27      	ldrb	r7, [r4, #12]
    bee2:	2f7f      	cmp	r7, #127	; 0x7f
    bee4:	d8d5      	bhi.n	be92 <MiApp_BroadcastConnectionTable+0x56>
                    dataPtr[dataLen++] = 0xff;
    bee6:	54c5      	strb	r5, [r0, r3]
    bee8:	1c59      	adds	r1, r3, #1
                    dataPtr[dataLen++] = 0xff;
    beea:	b2c9      	uxtb	r1, r1
    beec:	5445      	strb	r5, [r0, r1]
                    dataPtr[dataLen++] = 0xff;
    beee:	1cd9      	adds	r1, r3, #3
    bef0:	b2c9      	uxtb	r1, r1
                    dataPtr[dataLen++] = 0xff;
    bef2:	1c9c      	adds	r4, r3, #2
                    dataPtr[dataLen++] = 0xff;
    bef4:	b2e4      	uxtb	r4, r4
    bef6:	5505      	strb	r5, [r0, r4]
                    dataPtr[dataLen++] = j;
    bef8:	3304      	adds	r3, #4
    befa:	b2db      	uxtb	r3, r3
    befc:	5442      	strb	r2, [r0, r1]
    befe:	e7e3      	b.n	bec8 <MiApp_BroadcastConnectionTable+0x8c>
        for (k=count;k<TX_BUFFER_SIZE;k++)
    bf00:	2b4f      	cmp	r3, #79	; 0x4f
    bf02:	d838      	bhi.n	bf76 <MiApp_BroadcastConnectionTable+0x13a>
            dataPtr[dataLen++] = 0xFF;   // Garbage Value
    bf04:	21ff      	movs	r1, #255	; 0xff
    bf06:	1c5a      	adds	r2, r3, #1
    bf08:	b2d2      	uxtb	r2, r2
    bf0a:	54c1      	strb	r1, [r0, r3]
    bf0c:	0013      	movs	r3, r2
        for (k=count;k<TX_BUFFER_SIZE;k++)
    bf0e:	2a4f      	cmp	r2, #79	; 0x4f
    bf10:	d9f9      	bls.n	bf06 <MiApp_BroadcastConnectionTable+0xca>
        frameTransmit(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    bf12:	4b21      	ldr	r3, [pc, #132]	; (bf98 <MiApp_BroadcastConnectionTable+0x15c>)
    bf14:	8819      	ldrh	r1, [r3, #0]
    bf16:	4b21      	ldr	r3, [pc, #132]	; (bf9c <MiApp_BroadcastConnectionTable+0x160>)
    bf18:	9305      	str	r3, [sp, #20]
    bf1a:	2301      	movs	r3, #1
    bf1c:	9304      	str	r3, [sp, #16]
    bf1e:	2300      	movs	r3, #0
    bf20:	9303      	str	r3, [sp, #12]
    bf22:	9002      	str	r0, [sp, #8]
    bf24:	9201      	str	r2, [sp, #4]
    bf26:	9300      	str	r3, [sp, #0]
    bf28:	3301      	adds	r3, #1
    bf2a:	2200      	movs	r2, #0
    bf2c:	2001      	movs	r0, #1
    bf2e:	4c1c      	ldr	r4, [pc, #112]	; (bfa0 <MiApp_BroadcastConnectionTable+0x164>)
    bf30:	47a0      	blx	r4
    bf32:	2313      	movs	r3, #19
    bf34:	469c      	mov	ip, r3
    bf36:	44e2      	add	sl, ip
    bf38:	465d      	mov	r5, fp
    bf3a:	3513      	adds	r5, #19
    bf3c:	b2eb      	uxtb	r3, r5
    bf3e:	469b      	mov	fp, r3
    for (i = 0 ; i < broadcast_count ; i++)
    bf40:	9a07      	ldr	r2, [sp, #28]
    bf42:	4293      	cmp	r3, r2
    bf44:	d019      	beq.n	bf7a <MiApp_BroadcastConnectionTable+0x13e>
        dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    bf46:	2050      	movs	r0, #80	; 0x50
    bf48:	4b16      	ldr	r3, [pc, #88]	; (bfa4 <MiApp_BroadcastConnectionTable+0x168>)
    bf4a:	4798      	blx	r3
        if (NULL == dataPtr)
    bf4c:	2800      	cmp	r0, #0
    bf4e:	d014      	beq.n	bf7a <MiApp_BroadcastConnectionTable+0x13e>
        dataPtr[dataLen++] = CMD_SHARE_CONNECTION_TABLE;
    bf50:	2377      	movs	r3, #119	; 0x77
    bf52:	7003      	strb	r3, [r0, #0]
        dataPtr[dataLen++] = conn_size; // No of end devices in network
    bf54:	4b0c      	ldr	r3, [pc, #48]	; (bf88 <MiApp_BroadcastConnectionTable+0x14c>)
    bf56:	781b      	ldrb	r3, [r3, #0]
    bf58:	7043      	strb	r3, [r0, #1]
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*i);
    bf5a:	465a      	mov	r2, fp
    bf5c:	7082      	strb	r2, [r0, #2]
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*(i+1));
    bf5e:	4651      	mov	r1, sl
    bf60:	70c1      	strb	r1, [r0, #3]
        for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    bf62:	46d0      	mov	r8, sl
    bf64:	4552      	cmp	r2, sl
    bf66:	da04      	bge.n	bf72 <MiApp_BroadcastConnectionTable+0x136>
    bf68:	2304      	movs	r3, #4
            if (j < conn_size)
    bf6a:	4907      	ldr	r1, [pc, #28]	; (bf88 <MiApp_BroadcastConnectionTable+0x14c>)
    bf6c:	4689      	mov	r9, r1
                    dataPtr[dataLen++] = 0xff;
    bf6e:	25ff      	movs	r5, #255	; 0xff
    bf70:	e7ae      	b.n	bed0 <MiApp_BroadcastConnectionTable+0x94>
        count = 4;
    bf72:	2304      	movs	r3, #4
    bf74:	e7c6      	b.n	bf04 <MiApp_BroadcastConnectionTable+0xc8>
        for (k=count;k<TX_BUFFER_SIZE;k++)
    bf76:	001a      	movs	r2, r3
    bf78:	e7cb      	b.n	bf12 <MiApp_BroadcastConnectionTable+0xd6>
}
    bf7a:	b009      	add	sp, #36	; 0x24
    bf7c:	bc3c      	pop	{r2, r3, r4, r5}
    bf7e:	4690      	mov	r8, r2
    bf80:	4699      	mov	r9, r3
    bf82:	46a2      	mov	sl, r4
    bf84:	46ab      	mov	fp, r5
    bf86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf88:	200003f6 	.word	0x200003f6
    bf8c:	0000fbb9 	.word	0x0000fbb9
    bf90:	0000faad 	.word	0x0000faad
    bf94:	20002070 	.word	0x20002070
    bf98:	20002080 	.word	0x20002080
    bf9c:	0000b5f5 	.word	0x0000b5f5
    bfa0:	0000bbd9 	.word	0x0000bbd9
    bfa4:	0000ce0d 	.word	0x0000ce0d

0000bfa8 <connectionRespConfCallback>:
{
    bfa8:	b510      	push	{r4, lr}
    MiMem_Free(msgPointer);
    bfaa:	0010      	movs	r0, r2
    bfac:	4b03      	ldr	r3, [pc, #12]	; (bfbc <connectionRespConfCallback+0x14>)
    bfae:	4798      	blx	r3
    MiApp_BroadcastConnectionTable();
    bfb0:	4b03      	ldr	r3, [pc, #12]	; (bfc0 <connectionRespConfCallback+0x18>)
    bfb2:	4798      	blx	r3
	sharePeerDevInfoTimeInterval = SHARE_PEER_DEVICE_INFO_TIMEOUT;	//WSGA-13104, refresh interval timer for sending connection table.
    bfb4:	220f      	movs	r2, #15
    bfb6:	4b03      	ldr	r3, [pc, #12]	; (bfc4 <connectionRespConfCallback+0x1c>)
    bfb8:	801a      	strh	r2, [r3, #0]
}
    bfba:	bd10      	pop	{r4, pc}
    bfbc:	0000cec9 	.word	0x0000cec9
    bfc0:	0000be3d 	.word	0x0000be3d
    bfc4:	20000438 	.word	0x20000438

0000bfc8 <removeConnection>:
{
    bfc8:	b510      	push	{r4, lr}
    bfca:	b086      	sub	sp, #24
    bfcc:	0004      	movs	r4, r0
    dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REMOVAL_REQUEST);
    bfce:	2001      	movs	r0, #1
    bfd0:	4b0e      	ldr	r3, [pc, #56]	; (c00c <removeConnection+0x44>)
    bfd2:	4798      	blx	r3
    if (NULL == dataPtr)
    bfd4:	2800      	cmp	r0, #0
    bfd6:	d016      	beq.n	c006 <removeConnection+0x3e>
    dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_REQUEST;
    bfd8:	2382      	movs	r3, #130	; 0x82
    bfda:	7003      	strb	r3, [r0, #0]
    frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[index].Address, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    bfdc:	4b0c      	ldr	r3, [pc, #48]	; (c010 <removeConnection+0x48>)
    bfde:	681b      	ldr	r3, [r3, #0]
    bfe0:	0124      	lsls	r4, r4, #4
    bfe2:	681a      	ldr	r2, [r3, #0]
    bfe4:	1912      	adds	r2, r2, r4
    bfe6:	3204      	adds	r2, #4
    bfe8:	4b0a      	ldr	r3, [pc, #40]	; (c014 <removeConnection+0x4c>)
    bfea:	8819      	ldrh	r1, [r3, #0]
    bfec:	4b0a      	ldr	r3, [pc, #40]	; (c018 <removeConnection+0x50>)
    bfee:	9305      	str	r3, [sp, #20]
    bff0:	2401      	movs	r4, #1
    bff2:	9404      	str	r4, [sp, #16]
    bff4:	2300      	movs	r3, #0
    bff6:	9303      	str	r3, [sp, #12]
    bff8:	9002      	str	r0, [sp, #8]
    bffa:	9401      	str	r4, [sp, #4]
    bffc:	9300      	str	r3, [sp, #0]
    bffe:	3301      	adds	r3, #1
    c000:	2000      	movs	r0, #0
    c002:	4c06      	ldr	r4, [pc, #24]	; (c01c <removeConnection+0x54>)
    c004:	47a0      	blx	r4
}
    c006:	b006      	add	sp, #24
    c008:	bd10      	pop	{r4, pc}
    c00a:	46c0      	nop			; (mov r8, r8)
    c00c:	0000ce0d 	.word	0x0000ce0d
    c010:	20002070 	.word	0x20002070
    c014:	20002080 	.word	0x20002080
    c018:	0000b5f5 	.word	0x0000b5f5
    c01c:	0000bbd9 	.word	0x0000bbd9

0000c020 <MiApp_RemoveConnection>:
{
    c020:	b5f0      	push	{r4, r5, r6, r7, lr}
    c022:	46c6      	mov	lr, r8
    c024:	b500      	push	{lr}
    c026:	0004      	movs	r4, r0
    if( ConnectionIndex == 0xFF )
    c028:	28ff      	cmp	r0, #255	; 0xff
    c02a:	d00a      	beq.n	c042 <MiApp_RemoveConnection+0x22>
    else if( miwiDefaultRomOrRamParams->ConnectionTable[ConnectionIndex].status.bits.isValid )
    c02c:	0105      	lsls	r5, r0, #4
    c02e:	4b1c      	ldr	r3, [pc, #112]	; (c0a0 <MiApp_RemoveConnection+0x80>)
    c030:	681b      	ldr	r3, [r3, #0]
    c032:	681b      	ldr	r3, [r3, #0]
    c034:	195b      	adds	r3, r3, r5
    c036:	7b1b      	ldrb	r3, [r3, #12]
    c038:	2b7f      	cmp	r3, #127	; 0x7f
    c03a:	d821      	bhi.n	c080 <MiApp_RemoveConnection+0x60>
}
    c03c:	bc04      	pop	{r2}
    c03e:	4690      	mov	r8, r2
    c040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c042:	2400      	movs	r4, #0
            if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c044:	4d16      	ldr	r5, [pc, #88]	; (c0a0 <MiApp_RemoveConnection+0x80>)
            miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    c046:	002f      	movs	r7, r5
    c048:	e00d      	b.n	c066 <MiApp_RemoveConnection+0x46>
    c04a:	683b      	ldr	r3, [r7, #0]
    c04c:	681b      	ldr	r3, [r3, #0]
    c04e:	199b      	adds	r3, r3, r6
    c050:	2200      	movs	r2, #0
    c052:	731a      	strb	r2, [r3, #12]
            PDS_Store(PDS_CONNECTION_TABLE_ID);
    c054:	2006      	movs	r0, #6
    c056:	4b13      	ldr	r3, [pc, #76]	; (c0a4 <MiApp_RemoveConnection+0x84>)
    c058:	4798      	blx	r3
			RNCmd_SendConnectionChange(i);
    c05a:	4640      	mov	r0, r8
    c05c:	4b12      	ldr	r3, [pc, #72]	; (c0a8 <MiApp_RemoveConnection+0x88>)
    c05e:	4798      	blx	r3
    c060:	3401      	adds	r4, #1
        for(i = 0; i < CONNECTION_SIZE; i++)
    c062:	2c14      	cmp	r4, #20
    c064:	d0ea      	beq.n	c03c <MiApp_RemoveConnection+0x1c>
    c066:	b2e3      	uxtb	r3, r4
    c068:	4698      	mov	r8, r3
    c06a:	0126      	lsls	r6, r4, #4
            if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c06c:	682b      	ldr	r3, [r5, #0]
    c06e:	681b      	ldr	r3, [r3, #0]
    c070:	199b      	adds	r3, r3, r6
    c072:	7b1b      	ldrb	r3, [r3, #12]
    c074:	2b7f      	cmp	r3, #127	; 0x7f
    c076:	d9e8      	bls.n	c04a <MiApp_RemoveConnection+0x2a>
                removeConnection(i);
    c078:	4640      	mov	r0, r8
    c07a:	4b0c      	ldr	r3, [pc, #48]	; (c0ac <MiApp_RemoveConnection+0x8c>)
    c07c:	4798      	blx	r3
    c07e:	e7e4      	b.n	c04a <MiApp_RemoveConnection+0x2a>
        removeConnection(ConnectionIndex);
    c080:	4b0a      	ldr	r3, [pc, #40]	; (c0ac <MiApp_RemoveConnection+0x8c>)
    c082:	4798      	blx	r3
        miwiDefaultRomOrRamParams->ConnectionTable[ConnectionIndex].status.Val = 0;
    c084:	4b06      	ldr	r3, [pc, #24]	; (c0a0 <MiApp_RemoveConnection+0x80>)
    c086:	681b      	ldr	r3, [r3, #0]
    c088:	681b      	ldr	r3, [r3, #0]
    c08a:	195d      	adds	r5, r3, r5
    c08c:	2300      	movs	r3, #0
    c08e:	732b      	strb	r3, [r5, #12]
       PDS_Store(PDS_CONNECTION_TABLE_ID);
    c090:	2006      	movs	r0, #6
    c092:	4b04      	ldr	r3, [pc, #16]	; (c0a4 <MiApp_RemoveConnection+0x84>)
    c094:	4798      	blx	r3
		RNCmd_SendConnectionChange(ConnectionIndex);
    c096:	0020      	movs	r0, r4
    c098:	4b03      	ldr	r3, [pc, #12]	; (c0a8 <MiApp_RemoveConnection+0x88>)
    c09a:	4798      	blx	r3
}
    c09c:	e7ce      	b.n	c03c <MiApp_RemoveConnection+0x1c>
    c09e:	46c0      	nop			; (mov r8, r8)
    c0a0:	20002070 	.word	0x20002070
    c0a4:	00009f31 	.word	0x00009f31
    c0a8:	0000f43d 	.word	0x0000f43d
    c0ac:	0000bfc9 	.word	0x0000bfc9

0000c0b0 <protocolTimerHandler>:
{
    c0b0:	b570      	push	{r4, r5, r6, lr}
    c0b2:	b086      	sub	sp, #24
    if((0 != connectionTimeInterval) && ((--connectionTimeInterval) == 0))
    c0b4:	4b36      	ldr	r3, [pc, #216]	; (c190 <protocolTimerHandler+0xe0>)
    c0b6:	881b      	ldrh	r3, [r3, #0]
    c0b8:	2b00      	cmp	r3, #0
    c0ba:	d005      	beq.n	c0c8 <protocolTimerHandler+0x18>
    c0bc:	3b01      	subs	r3, #1
    c0be:	b29b      	uxth	r3, r3
    c0c0:	4a33      	ldr	r2, [pc, #204]	; (c190 <protocolTimerHandler+0xe0>)
    c0c2:	8013      	strh	r3, [r2, #0]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d01f      	beq.n	c108 <protocolTimerHandler+0x58>
    if((0 != sharePeerDevInfoTimeInterval) && ((--sharePeerDevInfoTimeInterval) == 0))
    c0c8:	4b32      	ldr	r3, [pc, #200]	; (c194 <protocolTimerHandler+0xe4>)
    c0ca:	881b      	ldrh	r3, [r3, #0]
    c0cc:	2b00      	cmp	r3, #0
    c0ce:	d005      	beq.n	c0dc <protocolTimerHandler+0x2c>
    c0d0:	3b01      	subs	r3, #1
    c0d2:	b29b      	uxth	r3, r3
    c0d4:	2b00      	cmp	r3, #0
    c0d6:	d01a      	beq.n	c10e <protocolTimerHandler+0x5e>
    c0d8:	4a2e      	ldr	r2, [pc, #184]	; (c194 <protocolTimerHandler+0xe4>)
    c0da:	8013      	strh	r3, [r2, #0]
    if((0 != inActiveDeviceCheckTimeInterval) && ((--inActiveDeviceCheckTimeInterval) == 0))
    c0dc:	4b2e      	ldr	r3, [pc, #184]	; (c198 <protocolTimerHandler+0xe8>)
    c0de:	881b      	ldrh	r3, [r3, #0]
    c0e0:	2b00      	cmp	r3, #0
    c0e2:	d005      	beq.n	c0f0 <protocolTimerHandler+0x40>
    c0e4:	3b01      	subs	r3, #1
    c0e6:	b29b      	uxth	r3, r3
    c0e8:	2b00      	cmp	r3, #0
    c0ea:	d016      	beq.n	c11a <protocolTimerHandler+0x6a>
    c0ec:	4a2a      	ldr	r2, [pc, #168]	; (c198 <protocolTimerHandler+0xe8>)
    c0ee:	8013      	strh	r3, [r2, #0]
    if((0 != linkStatusTimeInterval) && ((--linkStatusTimeInterval) == 0))
    c0f0:	4b2a      	ldr	r3, [pc, #168]	; (c19c <protocolTimerHandler+0xec>)
    c0f2:	881b      	ldrh	r3, [r3, #0]
    c0f4:	2b00      	cmp	r3, #0
    c0f6:	d005      	beq.n	c104 <protocolTimerHandler+0x54>
    c0f8:	3b01      	subs	r3, #1
    c0fa:	b29b      	uxth	r3, r3
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	d028      	beq.n	c152 <protocolTimerHandler+0xa2>
    c100:	4a26      	ldr	r2, [pc, #152]	; (c19c <protocolTimerHandler+0xec>)
    c102:	8013      	strh	r3, [r2, #0]
}
    c104:	b006      	add	sp, #24
    c106:	bd70      	pop	{r4, r5, r6, pc}
        sendConnectionRequest();
    c108:	4b25      	ldr	r3, [pc, #148]	; (c1a0 <protocolTimerHandler+0xf0>)
    c10a:	4798      	blx	r3
    c10c:	e7dc      	b.n	c0c8 <protocolTimerHandler+0x18>
        sharePeerDevInfoTimeInterval = SHARE_PEER_DEVICE_INFO_TIMEOUT;
    c10e:	220f      	movs	r2, #15
    c110:	4b20      	ldr	r3, [pc, #128]	; (c194 <protocolTimerHandler+0xe4>)
    c112:	801a      	strh	r2, [r3, #0]
        MiApp_BroadcastConnectionTable();
    c114:	4b23      	ldr	r3, [pc, #140]	; (c1a4 <protocolTimerHandler+0xf4>)
    c116:	4798      	blx	r3
    c118:	e7e0      	b.n	c0dc <protocolTimerHandler+0x2c>
        inActiveDeviceCheckTimeInterval = FIND_INACTIVE_DEVICE_TIMEOUT;
    c11a:	223c      	movs	r2, #60	; 0x3c
    c11c:	4b1e      	ldr	r3, [pc, #120]	; (c198 <protocolTimerHandler+0xe8>)
    c11e:	801a      	strh	r2, [r3, #0]
    c120:	2400      	movs	r4, #0
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    c122:	4d21      	ldr	r5, [pc, #132]	; (c1a8 <protocolTimerHandler+0xf8>)
                miwiDefaultRomOrRamParams->ConnectionTable[i].link_status = 0;
    c124:	2600      	movs	r6, #0
    c126:	e003      	b.n	c130 <protocolTimerHandler+0x80>
    c128:	739e      	strb	r6, [r3, #14]
    c12a:	3401      	adds	r4, #1
    for (i = 0;i < CONNECTION_SIZE; i++)
    c12c:	2c14      	cmp	r4, #20
    c12e:	d0df      	beq.n	c0f0 <protocolTimerHandler+0x40>
    c130:	b2e0      	uxtb	r0, r4
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    c132:	0122      	lsls	r2, r4, #4
    c134:	682b      	ldr	r3, [r5, #0]
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	189b      	adds	r3, r3, r2
    c13a:	7b1a      	ldrb	r2, [r3, #12]
    c13c:	2a7f      	cmp	r2, #127	; 0x7f
    c13e:	d9f4      	bls.n	c12a <protocolTimerHandler+0x7a>
            if (miwiDefaultRomOrRamParams->ConnectionTable[i].link_status == 0 && miwiDefaultRomOrRamParams->ConnectionTable[i].permanent_connections != 0xFF)
    c140:	7b9a      	ldrb	r2, [r3, #14]
    c142:	2a00      	cmp	r2, #0
    c144:	d1f0      	bne.n	c128 <protocolTimerHandler+0x78>
    c146:	7bda      	ldrb	r2, [r3, #15]
    c148:	2aff      	cmp	r2, #255	; 0xff
    c14a:	d0ed      	beq.n	c128 <protocolTimerHandler+0x78>
                MiApp_RemoveConnection(i);
    c14c:	4b17      	ldr	r3, [pc, #92]	; (c1ac <protocolTimerHandler+0xfc>)
    c14e:	4798      	blx	r3
    c150:	e7eb      	b.n	c12a <protocolTimerHandler+0x7a>
        linkStatusTimeInterval = LINK_STATUS_TIMEOUT;
    c152:	2214      	movs	r2, #20
    c154:	4b11      	ldr	r3, [pc, #68]	; (c19c <protocolTimerHandler+0xec>)
    c156:	801a      	strh	r2, [r3, #0]
    dataPtr = MiMem_Alloc(PACKETLEN_CMD_IAM_ALIVE);
    c158:	2001      	movs	r0, #1
    c15a:	4b15      	ldr	r3, [pc, #84]	; (c1b0 <protocolTimerHandler+0x100>)
    c15c:	4798      	blx	r3
    if (NULL == dataPtr)
    c15e:	2800      	cmp	r0, #0
    c160:	d0d0      	beq.n	c104 <protocolTimerHandler+0x54>
    dataPtr[dataLen++] = CMD_IAM_ALIVE;
    c162:	237a      	movs	r3, #122	; 0x7a
    c164:	7003      	strb	r3, [r0, #0]
    frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[0].Address, true, false,
    c166:	4b10      	ldr	r3, [pc, #64]	; (c1a8 <protocolTimerHandler+0xf8>)
    c168:	681b      	ldr	r3, [r3, #0]
    c16a:	681a      	ldr	r2, [r3, #0]
    c16c:	3204      	adds	r2, #4
    c16e:	4b11      	ldr	r3, [pc, #68]	; (c1b4 <protocolTimerHandler+0x104>)
    c170:	8819      	ldrh	r1, [r3, #0]
    c172:	4b11      	ldr	r3, [pc, #68]	; (c1b8 <protocolTimerHandler+0x108>)
    c174:	9305      	str	r3, [sp, #20]
    c176:	2401      	movs	r4, #1
    c178:	9404      	str	r4, [sp, #16]
    c17a:	2300      	movs	r3, #0
    c17c:	9303      	str	r3, [sp, #12]
    c17e:	9002      	str	r0, [sp, #8]
    c180:	9401      	str	r4, [sp, #4]
    c182:	9300      	str	r3, [sp, #0]
    c184:	3301      	adds	r3, #1
    c186:	2000      	movs	r0, #0
    c188:	4c0c      	ldr	r4, [pc, #48]	; (c1bc <protocolTimerHandler+0x10c>)
    c18a:	47a0      	blx	r4
}
    c18c:	e7ba      	b.n	c104 <protocolTimerHandler+0x54>
    c18e:	46c0      	nop			; (mov r8, r8)
    c190:	200003f8 	.word	0x200003f8
    c194:	20000438 	.word	0x20000438
    c198:	20000412 	.word	0x20000412
    c19c:	2000041a 	.word	0x2000041a
    c1a0:	0000bcdd 	.word	0x0000bcdd
    c1a4:	0000be3d 	.word	0x0000be3d
    c1a8:	20002070 	.word	0x20002070
    c1ac:	0000c021 	.word	0x0000c021
    c1b0:	0000ce0d 	.word	0x0000ce0d
    c1b4:	20002080 	.word	0x20002080
    c1b8:	0000b605 	.word	0x0000b605
    c1bc:	0000bbd9 	.word	0x0000bbd9

0000c1c0 <MiApp_SendData>:
{
    c1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c1c2:	46ce      	mov	lr, r9
    c1c4:	4647      	mov	r7, r8
    c1c6:	b580      	push	{r7, lr}
    c1c8:	b08b      	sub	sp, #44	; 0x2c
    c1ca:	9008      	str	r0, [sp, #32]
    c1cc:	9107      	str	r1, [sp, #28]
    c1ce:	0015      	movs	r5, r2
    c1d0:	9309      	str	r3, [sp, #36]	; 0x24
    c1d2:	ab12      	add	r3, sp, #72	; 0x48
    c1d4:	781e      	ldrb	r6, [r3, #0]
    c1d6:	ab13      	add	r3, sp, #76	; 0x4c
    c1d8:	781b      	ldrb	r3, [r3, #0]
    c1da:	4699      	mov	r9, r3
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c1dc:	4b77      	ldr	r3, [pc, #476]	; (c3bc <MiApp_SendData+0x1fc>)
    c1de:	781b      	ldrb	r3, [r3, #0]
	return true;
    c1e0:	2401      	movs	r4, #1
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c1e2:	2b07      	cmp	r3, #7
    c1e4:	d005      	beq.n	c1f2 <MiApp_SendData+0x32>
}
    c1e6:	0020      	movs	r0, r4
    c1e8:	b00b      	add	sp, #44	; 0x2c
    c1ea:	bc0c      	pop	{r2, r3}
    c1ec:	4690      	mov	r8, r2
    c1ee:	4699      	mov	r9, r3
    c1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c1f2:	2a4c      	cmp	r2, #76	; 0x4c
    c1f4:	d8f7      	bhi.n	c1e6 <MiApp_SendData+0x26>
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    c1f6:	2802      	cmp	r0, #2
    c1f8:	d033      	beq.n	c262 <MiApp_SendData+0xa2>
		dataFramePtr = (P2PStarDataFrame_t *)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    c1fa:	2068      	movs	r0, #104	; 0x68
    c1fc:	4b70      	ldr	r3, [pc, #448]	; (c3c0 <MiApp_SendData+0x200>)
    c1fe:	4798      	blx	r3
    c200:	1e07      	subs	r7, r0, #0
		if (NULL == dataFramePtr)
    c202:	d100      	bne.n	c206 <MiApp_SendData+0x46>
    c204:	e0d8      	b.n	c3b8 <MiApp_SendData+0x1f8>
		dataFramePtr->dataFrame.confCallback = ConfCallback;
    c206:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c208:	6043      	str	r3, [r0, #4]
		memcpy(&(dataFramePtr->dataFrame.destAddress), addr, MY_ADDRESS_LENGTH);
    c20a:	3008      	adds	r0, #8
    c20c:	2208      	movs	r2, #8
    c20e:	9c07      	ldr	r4, [sp, #28]
    c210:	0021      	movs	r1, r4
    c212:	4b6c      	ldr	r3, [pc, #432]	; (c3c4 <MiApp_SendData+0x204>)
    c214:	4798      	blx	r3
		dataFramePtr->dataFrame.msghandle = msghandle;
    c216:	753e      	strb	r6, [r7, #20]
		dataFramePtr->dataFrame.msgLength = msglen;
    c218:	757d      	strb	r5, [r7, #21]
		dataFramePtr->dataFrame.timeout = 0;
    c21a:	2300      	movs	r3, #0
    c21c:	743b      	strb	r3, [r7, #16]
		dataFramePtr->dataFrame.ackReq = ackReq;
    c21e:	464b      	mov	r3, r9
    c220:	747b      	strb	r3, [r7, #17]
		if (END_DEVICE == role)
    c222:	4b69      	ldr	r3, [pc, #420]	; (c3c8 <MiApp_SendData+0x208>)
    c224:	781b      	ldrb	r3, [r3, #0]
    c226:	2b02      	cmp	r3, #2
    c228:	d04c      	beq.n	c2c4 <MiApp_SendData+0x104>
			memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c22a:	003c      	movs	r4, r7
    c22c:	3416      	adds	r4, #22
    c22e:	002a      	movs	r2, r5
    c230:	9909      	ldr	r1, [sp, #36]	; 0x24
    c232:	0020      	movs	r0, r4
    c234:	4b63      	ldr	r3, [pc, #396]	; (c3c4 <MiApp_SendData+0x204>)
    c236:	4798      	blx	r3
			frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, ackReq, macAckOnlyDataCallback);
    c238:	4b64      	ldr	r3, [pc, #400]	; (c3cc <MiApp_SendData+0x20c>)
    c23a:	8819      	ldrh	r1, [r3, #0]
    c23c:	4b64      	ldr	r3, [pc, #400]	; (c3d0 <MiApp_SendData+0x210>)
    c23e:	9305      	str	r3, [sp, #20]
    c240:	464b      	mov	r3, r9
    c242:	9304      	str	r3, [sp, #16]
    c244:	9603      	str	r6, [sp, #12]
    c246:	9402      	str	r4, [sp, #8]
    c248:	9501      	str	r5, [sp, #4]
    c24a:	2300      	movs	r3, #0
    c24c:	9300      	str	r3, [sp, #0]
    c24e:	9a07      	ldr	r2, [sp, #28]
    c250:	2000      	movs	r0, #0
    c252:	4c60      	ldr	r4, [pc, #384]	; (c3d4 <MiApp_SendData+0x214>)
    c254:	47a0      	blx	r4
			miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c256:	0039      	movs	r1, r7
    c258:	485f      	ldr	r0, [pc, #380]	; (c3d8 <MiApp_SendData+0x218>)
    c25a:	4b60      	ldr	r3, [pc, #384]	; (c3dc <MiApp_SendData+0x21c>)
    c25c:	4798      	blx	r3
	return true;
    c25e:	2401      	movs	r4, #1
    c260:	e7c1      	b.n	c1e6 <MiApp_SendData+0x26>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);
    c262:	784a      	ldrb	r2, [r1, #1]
    c264:	0212      	lsls	r2, r2, #8
    c266:	780b      	ldrb	r3, [r1, #0]
    c268:	189b      	adds	r3, r3, r2
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    c26a:	b29b      	uxth	r3, r3
    c26c:	4a5c      	ldr	r2, [pc, #368]	; (c3e0 <MiApp_SendData+0x220>)
    c26e:	4293      	cmp	r3, r2
    c270:	d1c3      	bne.n	c1fa <MiApp_SendData+0x3a>
			dataFramePtr = (P2PStarDataFrame_t *)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    c272:	2068      	movs	r0, #104	; 0x68
    c274:	4b52      	ldr	r3, [pc, #328]	; (c3c0 <MiApp_SendData+0x200>)
    c276:	4798      	blx	r3
    c278:	1e04      	subs	r4, r0, #0
			if (NULL == dataFramePtr)
    c27a:	d100      	bne.n	c27e <MiApp_SendData+0xbe>
    c27c:	e09a      	b.n	c3b4 <MiApp_SendData+0x1f4>
			dataFramePtr->dataFrame.confCallback = ConfCallback;
    c27e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c280:	6043      	str	r3, [r0, #4]
			dataFramePtr->dataFrame.msghandle = msghandle;
    c282:	7506      	strb	r6, [r0, #20]
			dataFramePtr->dataFrame.msgLength = msglen;
    c284:	7545      	strb	r5, [r0, #21]
			dataFramePtr->dataFrame.timeout = 0;
    c286:	2700      	movs	r7, #0
    c288:	7407      	strb	r7, [r0, #16]
			memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c28a:	2316      	movs	r3, #22
    c28c:	4698      	mov	r8, r3
    c28e:	4480      	add	r8, r0
    c290:	002a      	movs	r2, r5
    c292:	9909      	ldr	r1, [sp, #36]	; 0x24
    c294:	4640      	mov	r0, r8
    c296:	4b4b      	ldr	r3, [pc, #300]	; (c3c4 <MiApp_SendData+0x204>)
    c298:	4798      	blx	r3
			frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, 0, macAckOnlyDataCallback);
    c29a:	4b4c      	ldr	r3, [pc, #304]	; (c3cc <MiApp_SendData+0x20c>)
    c29c:	8819      	ldrh	r1, [r3, #0]
    c29e:	4b4c      	ldr	r3, [pc, #304]	; (c3d0 <MiApp_SendData+0x210>)
    c2a0:	9305      	str	r3, [sp, #20]
    c2a2:	9704      	str	r7, [sp, #16]
    c2a4:	9603      	str	r6, [sp, #12]
    c2a6:	4643      	mov	r3, r8
    c2a8:	9302      	str	r3, [sp, #8]
    c2aa:	9501      	str	r5, [sp, #4]
    c2ac:	9700      	str	r7, [sp, #0]
    c2ae:	2300      	movs	r3, #0
    c2b0:	9a07      	ldr	r2, [sp, #28]
    c2b2:	2001      	movs	r0, #1
    c2b4:	4d47      	ldr	r5, [pc, #284]	; (c3d4 <MiApp_SendData+0x214>)
    c2b6:	47a8      	blx	r5
			miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c2b8:	0021      	movs	r1, r4
    c2ba:	4847      	ldr	r0, [pc, #284]	; (c3d8 <MiApp_SendData+0x218>)
    c2bc:	4b47      	ldr	r3, [pc, #284]	; (c3dc <MiApp_SendData+0x21c>)
    c2be:	4798      	blx	r3
			return true;
    c2c0:	2401      	movs	r4, #1
    c2c2:	e790      	b.n	c1e6 <MiApp_SendData+0x26>
			if (MY_ADDRESS_LENGTH == addr_len && isSameAddress(addr, miwiDefaultRomOrRamParams->ConnectionTable[0].Address))
    c2c4:	9b08      	ldr	r3, [sp, #32]
    c2c6:	2b08      	cmp	r3, #8
    c2c8:	d034      	beq.n	c334 <MiApp_SendData+0x174>
				dataFramePtr->dataFrame.msg[0] = CMD_FORWRD_PACKET;
    c2ca:	23cc      	movs	r3, #204	; 0xcc
    c2cc:	75bb      	strb	r3, [r7, #22]
				dataFramePtr->dataFrame.msg[1] = addr[0];
    c2ce:	9a07      	ldr	r2, [sp, #28]
    c2d0:	7813      	ldrb	r3, [r2, #0]
    c2d2:	75fb      	strb	r3, [r7, #23]
				dataFramePtr->dataFrame.msg[2] = addr[1];
    c2d4:	7853      	ldrb	r3, [r2, #1]
    c2d6:	763b      	strb	r3, [r7, #24]
				dataFramePtr->dataFrame.msg[3] = addr[2];
    c2d8:	7893      	ldrb	r3, [r2, #2]
    c2da:	767b      	strb	r3, [r7, #25]
				memcpy(&(dataFramePtr->dataFrame.msg[4]), msgpointer, msglen);
    c2dc:	002a      	movs	r2, r5
    c2de:	9909      	ldr	r1, [sp, #36]	; 0x24
    c2e0:	0038      	movs	r0, r7
    c2e2:	301a      	adds	r0, #26
    c2e4:	4b37      	ldr	r3, [pc, #220]	; (c3c4 <MiApp_SendData+0x204>)
    c2e6:	4798      	blx	r3
				dataFramePtr->dataFrame.msgLength = msglen + 4;
    c2e8:	3504      	adds	r5, #4
    c2ea:	b2ed      	uxtb	r5, r5
    c2ec:	757d      	strb	r5, [r7, #21]
				if (ackReq)
    c2ee:	464b      	mov	r3, r9
    c2f0:	2b00      	cmp	r3, #0
    c2f2:	d045      	beq.n	c380 <MiApp_SendData+0x1c0>
					dataFramePtr->dataFrame.timeout = SW_ACK_TIMEOUT + 1;
    c2f4:	2303      	movs	r3, #3
    c2f6:	743b      	strb	r3, [r7, #16]
					frameTransmit(broadcast, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[0].Address, true, false, dataFramePtr->dataFrame.msgLength, dataFramePtr->dataFrame.msg, msghandle, ackReq, appAckWaitDataCallback);
    c2f8:	4b3a      	ldr	r3, [pc, #232]	; (c3e4 <MiApp_SendData+0x224>)
    c2fa:	681b      	ldr	r3, [r3, #0]
    c2fc:	681a      	ldr	r2, [r3, #0]
    c2fe:	3204      	adds	r2, #4
    c300:	4b32      	ldr	r3, [pc, #200]	; (c3cc <MiApp_SendData+0x20c>)
    c302:	8819      	ldrh	r1, [r3, #0]
    c304:	4b38      	ldr	r3, [pc, #224]	; (c3e8 <MiApp_SendData+0x228>)
    c306:	9305      	str	r3, [sp, #20]
    c308:	2301      	movs	r3, #1
    c30a:	9304      	str	r3, [sp, #16]
    c30c:	9603      	str	r6, [sp, #12]
    c30e:	003b      	movs	r3, r7
    c310:	3316      	adds	r3, #22
    c312:	9302      	str	r3, [sp, #8]
    c314:	9501      	str	r5, [sp, #4]
    c316:	2300      	movs	r3, #0
    c318:	9300      	str	r3, [sp, #0]
    c31a:	3301      	adds	r3, #1
    c31c:	2000      	movs	r0, #0
    c31e:	4c2d      	ldr	r4, [pc, #180]	; (c3d4 <MiApp_SendData+0x214>)
    c320:	47a0      	blx	r4
					miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t*)dataFramePtr);
    c322:	0039      	movs	r1, r7
    c324:	4831      	ldr	r0, [pc, #196]	; (c3ec <MiApp_SendData+0x22c>)
    c326:	4b2d      	ldr	r3, [pc, #180]	; (c3dc <MiApp_SendData+0x21c>)
    c328:	4798      	blx	r3
					SYS_TimerStart(&dataTimer);
    c32a:	4831      	ldr	r0, [pc, #196]	; (c3f0 <MiApp_SendData+0x230>)
    c32c:	4b31      	ldr	r3, [pc, #196]	; (c3f4 <MiApp_SendData+0x234>)
    c32e:	4798      	blx	r3
	return true;
    c330:	464c      	mov	r4, r9
    c332:	e758      	b.n	c1e6 <MiApp_SendData+0x26>
			if (MY_ADDRESS_LENGTH == addr_len && isSameAddress(addr, miwiDefaultRomOrRamParams->ConnectionTable[0].Address))
    c334:	4b2b      	ldr	r3, [pc, #172]	; (c3e4 <MiApp_SendData+0x224>)
    c336:	681b      	ldr	r3, [r3, #0]
    c338:	6819      	ldr	r1, [r3, #0]
    c33a:	3104      	adds	r1, #4
    c33c:	0020      	movs	r0, r4
    c33e:	4b2e      	ldr	r3, [pc, #184]	; (c3f8 <MiApp_SendData+0x238>)
    c340:	4798      	blx	r3
    c342:	1e04      	subs	r4, r0, #0
    c344:	d0c1      	beq.n	c2ca <MiApp_SendData+0x10a>
				memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c346:	2316      	movs	r3, #22
    c348:	4698      	mov	r8, r3
    c34a:	44b8      	add	r8, r7
    c34c:	002a      	movs	r2, r5
    c34e:	9909      	ldr	r1, [sp, #36]	; 0x24
    c350:	4640      	mov	r0, r8
    c352:	4b1c      	ldr	r3, [pc, #112]	; (c3c4 <MiApp_SendData+0x204>)
    c354:	4798      	blx	r3
				frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, ackReq, macAckOnlyDataCallback);
    c356:	4b1d      	ldr	r3, [pc, #116]	; (c3cc <MiApp_SendData+0x20c>)
    c358:	8819      	ldrh	r1, [r3, #0]
    c35a:	4b1d      	ldr	r3, [pc, #116]	; (c3d0 <MiApp_SendData+0x210>)
    c35c:	9305      	str	r3, [sp, #20]
    c35e:	464b      	mov	r3, r9
    c360:	9304      	str	r3, [sp, #16]
    c362:	9603      	str	r6, [sp, #12]
    c364:	4643      	mov	r3, r8
    c366:	9302      	str	r3, [sp, #8]
    c368:	9501      	str	r5, [sp, #4]
    c36a:	2300      	movs	r3, #0
    c36c:	9300      	str	r3, [sp, #0]
    c36e:	9a07      	ldr	r2, [sp, #28]
    c370:	2000      	movs	r0, #0
    c372:	4d18      	ldr	r5, [pc, #96]	; (c3d4 <MiApp_SendData+0x214>)
    c374:	47a8      	blx	r5
				miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c376:	0039      	movs	r1, r7
    c378:	4817      	ldr	r0, [pc, #92]	; (c3d8 <MiApp_SendData+0x218>)
    c37a:	4b18      	ldr	r3, [pc, #96]	; (c3dc <MiApp_SendData+0x21c>)
    c37c:	4798      	blx	r3
    c37e:	e732      	b.n	c1e6 <MiApp_SendData+0x26>
					frameTransmit(broadcast, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[0].Address, true, false, dataFramePtr->dataFrame.msgLength, dataFramePtr->dataFrame.msg, msghandle, ackReq, macAckOnlyDataCallback);
    c380:	4b18      	ldr	r3, [pc, #96]	; (c3e4 <MiApp_SendData+0x224>)
    c382:	681b      	ldr	r3, [r3, #0]
    c384:	681a      	ldr	r2, [r3, #0]
    c386:	3204      	adds	r2, #4
    c388:	4b10      	ldr	r3, [pc, #64]	; (c3cc <MiApp_SendData+0x20c>)
    c38a:	8819      	ldrh	r1, [r3, #0]
    c38c:	4b10      	ldr	r3, [pc, #64]	; (c3d0 <MiApp_SendData+0x210>)
    c38e:	9305      	str	r3, [sp, #20]
    c390:	2300      	movs	r3, #0
    c392:	9304      	str	r3, [sp, #16]
    c394:	9603      	str	r6, [sp, #12]
    c396:	0038      	movs	r0, r7
    c398:	3016      	adds	r0, #22
    c39a:	9002      	str	r0, [sp, #8]
    c39c:	9501      	str	r5, [sp, #4]
    c39e:	9300      	str	r3, [sp, #0]
    c3a0:	3301      	adds	r3, #1
    c3a2:	2000      	movs	r0, #0
    c3a4:	4c0b      	ldr	r4, [pc, #44]	; (c3d4 <MiApp_SendData+0x214>)
    c3a6:	47a0      	blx	r4
					miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c3a8:	0039      	movs	r1, r7
    c3aa:	480b      	ldr	r0, [pc, #44]	; (c3d8 <MiApp_SendData+0x218>)
    c3ac:	4b0b      	ldr	r3, [pc, #44]	; (c3dc <MiApp_SendData+0x21c>)
    c3ae:	4798      	blx	r3
	return true;
    c3b0:	2401      	movs	r4, #1
    c3b2:	e718      	b.n	c1e6 <MiApp_SendData+0x26>
				return false;
    c3b4:	2400      	movs	r4, #0
    c3b6:	e716      	b.n	c1e6 <MiApp_SendData+0x26>
			return false;
    c3b8:	2400      	movs	r4, #0
    c3ba:	e714      	b.n	c1e6 <MiApp_SendData+0x26>
    c3bc:	2000041c 	.word	0x2000041c
    c3c0:	0000ce0d 	.word	0x0000ce0d
    c3c4:	00010a97 	.word	0x00010a97
    c3c8:	20002160 	.word	0x20002160
    c3cc:	20002080 	.word	0x20002080
    c3d0:	0000cbbd 	.word	0x0000cbbd
    c3d4:	0000bbd9 	.word	0x0000bbd9
    c3d8:	20002044 	.word	0x20002044
    c3dc:	0000d009 	.word	0x0000d009
    c3e0:	0000ffff 	.word	0x0000ffff
    c3e4:	20002070 	.word	0x20002070
    c3e8:	0000cc61 	.word	0x0000cc61
    c3ec:	200020e8 	.word	0x200020e8
    c3f0:	200003fc 	.word	0x200003fc
    c3f4:	0000d1b1 	.word	0x0000d1b1
    c3f8:	0000babd 	.word	0x0000babd

0000c3fc <P2PTasks>:
{
    c3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c3fe:	46de      	mov	lr, fp
    c400:	464f      	mov	r7, r9
    c402:	4646      	mov	r6, r8
    c404:	b5c0      	push	{r6, r7, lr}
    c406:	b08a      	sub	sp, #40	; 0x28
    currentTick.Val = MiWi_TickGet();
    c408:	4bcc      	ldr	r3, [pc, #816]	; (c73c <P2PTasks+0x340>)
    c40a:	4798      	blx	r3
    c40c:	0004      	movs	r4, r0
    if (frameTxQueue.size && txCallbackReceived && (MiWi_TickGetDiff(currentTick, lastTxFrameTick) > (transaction_duration_us)))
    c40e:	4bcc      	ldr	r3, [pc, #816]	; (c740 <P2PTasks+0x344>)
    c410:	7a1b      	ldrb	r3, [r3, #8]
    c412:	2b00      	cmp	r3, #0
    c414:	d003      	beq.n	c41e <P2PTasks+0x22>
    c416:	4bcb      	ldr	r3, [pc, #812]	; (c744 <P2PTasks+0x348>)
    c418:	781b      	ldrb	r3, [r3, #0]
    c41a:	2b00      	cmp	r3, #0
    c41c:	d10d      	bne.n	c43a <P2PTasks+0x3e>
    if(MiMAC_ReceivedPacket())
    c41e:	4bca      	ldr	r3, [pc, #808]	; (c748 <P2PTasks+0x34c>)
    c420:	4798      	blx	r3
    c422:	2800      	cmp	r0, #0
    c424:	d139      	bne.n	c49a <P2PTasks+0x9e>
    MiMAC_Task();
    c426:	4bc9      	ldr	r3, [pc, #804]	; (c74c <P2PTasks+0x350>)
    c428:	4798      	blx	r3
    SYS_TimerTaskHandler();
    c42a:	4bc9      	ldr	r3, [pc, #804]	; (c750 <P2PTasks+0x354>)
    c42c:	4798      	blx	r3
}
    c42e:	b00a      	add	sp, #40	; 0x28
    c430:	bc1c      	pop	{r2, r3, r4}
    c432:	4690      	mov	r8, r2
    c434:	4699      	mov	r9, r3
    c436:	46a3      	mov	fp, r4
    c438:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (frameTxQueue.size && txCallbackReceived && (MiWi_TickGetDiff(currentTick, lastTxFrameTick) > (transaction_duration_us)))
    c43a:	4bc6      	ldr	r3, [pc, #792]	; (c754 <P2PTasks+0x358>)
    c43c:	6819      	ldr	r1, [r3, #0]
    c43e:	4bc6      	ldr	r3, [pc, #792]	; (c758 <P2PTasks+0x35c>)
    c440:	4798      	blx	r3
    c442:	4bc6      	ldr	r3, [pc, #792]	; (c75c <P2PTasks+0x360>)
    c444:	681b      	ldr	r3, [r3, #0]
    c446:	4298      	cmp	r0, r3
    c448:	d9e9      	bls.n	c41e <P2PTasks+0x22>
        txFramePtr =  (TxFrame_t *)miQueueRemove(&frameTxQueue, NULL);
    c44a:	2100      	movs	r1, #0
    c44c:	48bc      	ldr	r0, [pc, #752]	; (c740 <P2PTasks+0x344>)
    c44e:	4bc4      	ldr	r3, [pc, #784]	; (c760 <P2PTasks+0x364>)
    c450:	4798      	blx	r3
    c452:	1e05      	subs	r5, r0, #0
        if (NULL != txFramePtr)
    c454:	d0e3      	beq.n	c41e <P2PTasks+0x22>
            sentFrame = txFramePtr;
    c456:	4bc3      	ldr	r3, [pc, #780]	; (c764 <P2PTasks+0x368>)
    c458:	6018      	str	r0, [r3, #0]
            if ( (txFramePtr->txFrameEntry.frameLength + MAC_OVERHEAD + PHY_OVERHEAD) > aMaxSIFSFrameSize)
    c45a:	2324      	movs	r3, #36	; 0x24
    c45c:	5cc3      	ldrb	r3, [r0, r3]
    c45e:	331c      	adds	r3, #28
                transaction_duration_sym = macMinLIFSPeriod_def;
    c460:	2028      	movs	r0, #40	; 0x28
            if ( (txFramePtr->txFrameEntry.frameLength + MAC_OVERHEAD + PHY_OVERHEAD) > aMaxSIFSFrameSize)
    c462:	2b12      	cmp	r3, #18
    c464:	dc00      	bgt.n	c468 <P2PTasks+0x6c>
                transaction_duration_sym = macMinSIFSPeriod_def;
    c466:	381c      	subs	r0, #28
            transaction_duration_us = MiMAC_SymbolToTicks(transaction_duration_sym);
    c468:	3020      	adds	r0, #32
    c46a:	4bbf      	ldr	r3, [pc, #764]	; (c768 <P2PTasks+0x36c>)
    c46c:	4798      	blx	r3
    c46e:	4bbb      	ldr	r3, [pc, #748]	; (c75c <P2PTasks+0x360>)
    c470:	6018      	str	r0, [r3, #0]
            lastTxFrameTick = currentTick;
    c472:	4bb8      	ldr	r3, [pc, #736]	; (c754 <P2PTasks+0x358>)
    c474:	601c      	str	r4, [r3, #0]
            MiMAC_SendPacket(txFramePtr->txFrameEntry.frameParam, txFramePtr->txFrameEntry.frame,
    c476:	696b      	ldr	r3, [r5, #20]
    c478:	4abc      	ldr	r2, [pc, #752]	; (c76c <P2PTasks+0x370>)
    c47a:	9202      	str	r2, [sp, #8]
    c47c:	2225      	movs	r2, #37	; 0x25
    c47e:	5caa      	ldrb	r2, [r5, r2]
    c480:	9201      	str	r2, [sp, #4]
    c482:	2224      	movs	r2, #36	; 0x24
    c484:	5caa      	ldrb	r2, [r5, r2]
    c486:	9200      	str	r2, [sp, #0]
    c488:	69a8      	ldr	r0, [r5, #24]
    c48a:	69e9      	ldr	r1, [r5, #28]
    c48c:	6a2a      	ldr	r2, [r5, #32]
    c48e:	4cb8      	ldr	r4, [pc, #736]	; (c770 <P2PTasks+0x374>)
    c490:	47a0      	blx	r4
            txCallbackReceived = false;
    c492:	2200      	movs	r2, #0
    c494:	4bab      	ldr	r3, [pc, #684]	; (c744 <P2PTasks+0x348>)
    c496:	701a      	strb	r2, [r3, #0]
    c498:	e7c1      	b.n	c41e <P2PTasks+0x22>
    rxMessage.flags.bits.broadcast = MACRxPacket.flags.bits.broadcast;
    c49a:	4bb6      	ldr	r3, [pc, #728]	; (c774 <P2PTasks+0x378>)
    c49c:	7819      	ldrb	r1, [r3, #0]
    c49e:	074a      	lsls	r2, r1, #29
    rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    c4a0:	08cd      	lsrs	r5, r1, #3
    c4a2:	2401      	movs	r4, #1
    c4a4:	4025      	ands	r5, r4
    c4a6:	00ed      	lsls	r5, r5, #3
    c4a8:	0fd2      	lsrs	r2, r2, #31
    rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    c4aa:	2303      	movs	r3, #3
    c4ac:	400b      	ands	r3, r1
    c4ae:	3b01      	subs	r3, #1
    c4b0:	425f      	negs	r7, r3
    c4b2:	415f      	adcs	r7, r3
    c4b4:	003b      	movs	r3, r7
    c4b6:	4023      	ands	r3, r4
    c4b8:	015b      	lsls	r3, r3, #5
    c4ba:	432a      	orrs	r2, r5
    rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    c4bc:	09cd      	lsrs	r5, r1, #7
    c4be:	402c      	ands	r4, r5
    c4c0:	01a4      	lsls	r4, r4, #6
    c4c2:	4313      	orrs	r3, r2
    c4c4:	4323      	orrs	r3, r4
    c4c6:	4aac      	ldr	r2, [pc, #688]	; (c778 <P2PTasks+0x37c>)
    c4c8:	7013      	strb	r3, [r2, #0]
    if( MACRxPacket.flags.bits.sourcePrsnt )
    c4ca:	b249      	sxtb	r1, r1
    c4cc:	2900      	cmp	r1, #0
    c4ce:	db19      	blt.n	c504 <P2PTasks+0x108>
    rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    c4d0:	4aa8      	ldr	r2, [pc, #672]	; (c774 <P2PTasks+0x378>)
    c4d2:	8a15      	ldrh	r5, [r2, #16]
    c4d4:	4ba8      	ldr	r3, [pc, #672]	; (c778 <P2PTasks+0x37c>)
    c4d6:	805d      	strh	r5, [r3, #2]
    rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    c4d8:	7b16      	ldrb	r6, [r2, #12]
    c4da:	731e      	strb	r6, [r3, #12]
    rxMessage.Payload = MACRxPacket.Payload;
    c4dc:	6894      	ldr	r4, [r2, #8]
    c4de:	609c      	str	r4, [r3, #8]
    rxMessage.PacketLQI = MACRxPacket.LQIValue;
    c4e0:	7b91      	ldrb	r1, [r2, #14]
    c4e2:	7399      	strb	r1, [r3, #14]
    rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    c4e4:	7b52      	ldrb	r2, [r2, #13]
    c4e6:	735a      	strb	r2, [r3, #13]
    if( rxMessage.flags.bits.command )
    c4e8:	781b      	ldrb	r3, [r3, #0]
    c4ea:	069b      	lsls	r3, r3, #26
    c4ec:	d400      	bmi.n	c4f0 <P2PTasks+0xf4>
    c4ee:	e34e      	b.n	cb8e <P2PTasks+0x792>
        switch( rxMessage.Payload[0] )
    c4f0:	7823      	ldrb	r3, [r4, #0]
    c4f2:	3b77      	subs	r3, #119	; 0x77
    c4f4:	b2da      	uxtb	r2, r3
    c4f6:	2a63      	cmp	r2, #99	; 0x63
    c4f8:	d900      	bls.n	c4fc <P2PTasks+0x100>
    c4fa:	e34c      	b.n	cb96 <P2PTasks+0x79a>
    c4fc:	0093      	lsls	r3, r2, #2
    c4fe:	4a9f      	ldr	r2, [pc, #636]	; (c77c <P2PTasks+0x380>)
    c500:	58d3      	ldr	r3, [r2, r3]
    c502:	469f      	mov	pc, r3
        rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    c504:	4b9b      	ldr	r3, [pc, #620]	; (c774 <P2PTasks+0x378>)
    c506:	685a      	ldr	r2, [r3, #4]
    c508:	4b9b      	ldr	r3, [pc, #620]	; (c778 <P2PTasks+0x37c>)
    c50a:	605a      	str	r2, [r3, #4]
    c50c:	e7e0      	b.n	c4d0 <P2PTasks+0xd4>
                if(PAN_COORD != role)
    c50e:	4b9c      	ldr	r3, [pc, #624]	; (c780 <P2PTasks+0x384>)
    c510:	781b      	ldrb	r3, [r3, #0]
    c512:	2b01      	cmp	r3, #1
    c514:	d000      	beq.n	c518 <P2PTasks+0x11c>
    c516:	e33e      	b.n	cb96 <P2PTasks+0x79a>
                if( ConnMode > ENABLE_PREV_CONN )
    c518:	4b9a      	ldr	r3, [pc, #616]	; (c784 <P2PTasks+0x388>)
    c51a:	781b      	ldrb	r3, [r3, #0]
    c51c:	2b01      	cmp	r3, #1
    c51e:	d900      	bls.n	c522 <P2PTasks+0x126>
    c520:	e339      	b.n	cb96 <P2PTasks+0x79a>
                if( currentChannel != rxMessage.Payload[1] )
    c522:	7862      	ldrb	r2, [r4, #1]
    c524:	4b98      	ldr	r3, [pc, #608]	; (c788 <P2PTasks+0x38c>)
    c526:	781b      	ldrb	r3, [r3, #0]
    c528:	429a      	cmp	r2, r3
    c52a:	d000      	beq.n	c52e <P2PTasks+0x132>
    c52c:	e333      	b.n	cb96 <P2PTasks+0x79a>
                if( (rxMessage.SourcePANID.Val != 0xFFFF) && (rxMessage.SourcePANID.Val != myPANID.Val) &&
    c52e:	4b97      	ldr	r3, [pc, #604]	; (c78c <P2PTasks+0x390>)
    c530:	429d      	cmp	r5, r3
    c532:	d007      	beq.n	c544 <P2PTasks+0x148>
    c534:	4b96      	ldr	r3, [pc, #600]	; (c790 <P2PTasks+0x394>)
    c536:	881b      	ldrh	r3, [r3, #0]
    c538:	42ab      	cmp	r3, r5
    c53a:	d003      	beq.n	c544 <P2PTasks+0x148>
                    status = STATUS_NOT_SAME_PAN;
    c53c:	23f2      	movs	r3, #242	; 0xf2
    c53e:	4698      	mov	r8, r3
                if( (rxMessage.SourcePANID.Val != 0xFFFF) && (rxMessage.SourcePANID.Val != myPANID.Val) &&
    c540:	2e02      	cmp	r6, #2
    c542:	d803      	bhi.n	c54c <P2PTasks+0x150>
                    status = AddConnection(rxMessage.Payload[2]);
    c544:	78a0      	ldrb	r0, [r4, #2]
    c546:	4b93      	ldr	r3, [pc, #588]	; (c794 <P2PTasks+0x398>)
    c548:	4798      	blx	r3
    c54a:	4680      	mov	r8, r0
                if (rxMessage.Payload[3] == 0xAA)
    c54c:	4b8a      	ldr	r3, [pc, #552]	; (c778 <P2PTasks+0x37c>)
    c54e:	689b      	ldr	r3, [r3, #8]
    c550:	78db      	ldrb	r3, [r3, #3]
    c552:	2baa      	cmp	r3, #170	; 0xaa
    c554:	d02d      	beq.n	c5b2 <P2PTasks+0x1b6>
                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    c556:	4b8b      	ldr	r3, [pc, #556]	; (c784 <P2PTasks+0x388>)
    c558:	781b      	ldrb	r3, [r3, #0]
    c55a:	2b01      	cmp	r3, #1
    c55c:	d043      	beq.n	c5e6 <P2PTasks+0x1ea>
                dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    c55e:	2050      	movs	r0, #80	; 0x50
    c560:	4b8d      	ldr	r3, [pc, #564]	; (c798 <P2PTasks+0x39c>)
    c562:	4798      	blx	r3
    c564:	1e02      	subs	r2, r0, #0
                if (NULL == dataPtr)
    c566:	d100      	bne.n	c56a <P2PTasks+0x16e>
    c568:	e315      	b.n	cb96 <P2PTasks+0x79a>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    c56a:	2391      	movs	r3, #145	; 0x91
    c56c:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = status;
    c56e:	4643      	mov	r3, r8
    c570:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = MyindexinPC;
    c572:	4b8a      	ldr	r3, [pc, #552]	; (c79c <P2PTasks+0x3a0>)
    c574:	781b      	ldrb	r3, [r3, #0]
    c576:	7083      	strb	r3, [r0, #2]
    c578:	2403      	movs	r4, #3
                if( status == STATUS_SUCCESS || status == STATUS_EXISTS )
    c57a:	4643      	mov	r3, r8
    c57c:	2b01      	cmp	r3, #1
    c57e:	d957      	bls.n	c630 <P2PTasks+0x234>
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c580:	497d      	ldr	r1, [pc, #500]	; (c778 <P2PTasks+0x37c>)
    c582:	4b87      	ldr	r3, [pc, #540]	; (c7a0 <P2PTasks+0x3a4>)
    c584:	9305      	str	r3, [sp, #20]
    c586:	2301      	movs	r3, #1
    c588:	9304      	str	r3, [sp, #16]
    c58a:	2000      	movs	r0, #0
    c58c:	9003      	str	r0, [sp, #12]
    c58e:	9202      	str	r2, [sp, #8]
    c590:	9401      	str	r4, [sp, #4]
    c592:	780a      	ldrb	r2, [r1, #0]
    c594:	0712      	lsls	r2, r2, #28
    c596:	0fd2      	lsrs	r2, r2, #31
    c598:	9200      	str	r2, [sp, #0]
    c59a:	684a      	ldr	r2, [r1, #4]
    c59c:	8849      	ldrh	r1, [r1, #2]
    c59e:	4c81      	ldr	r4, [pc, #516]	; (c7a4 <P2PTasks+0x3a8>)
    c5a0:	47a0      	blx	r4
                if( status == STATUS_SUCCESS )
    c5a2:	4643      	mov	r3, r8
    c5a4:	2b00      	cmp	r3, #0
    c5a6:	d000      	beq.n	c5aa <P2PTasks+0x1ae>
    c5a8:	e2f5      	b.n	cb96 <P2PTasks+0x79a>
                     PDS_Store(PDS_CONNECTION_TABLE_ID);
    c5aa:	2006      	movs	r0, #6
    c5ac:	4b7e      	ldr	r3, [pc, #504]	; (c7a8 <P2PTasks+0x3ac>)
    c5ae:	4798      	blx	r3
    c5b0:	e2f1      	b.n	cb96 <P2PTasks+0x79a>
                        if (isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[p].Address) )
    c5b2:	4b71      	ldr	r3, [pc, #452]	; (c778 <P2PTasks+0x37c>)
    c5b4:	685b      	ldr	r3, [r3, #4]
    c5b6:	9306      	str	r3, [sp, #24]
    c5b8:	4b7c      	ldr	r3, [pc, #496]	; (c7ac <P2PTasks+0x3b0>)
    c5ba:	681f      	ldr	r7, [r3, #0]
    c5bc:	2500      	movs	r5, #0
    c5be:	4b7c      	ldr	r3, [pc, #496]	; (c7b0 <P2PTasks+0x3b4>)
    c5c0:	4699      	mov	r9, r3
                             miwiDefaultRomOrRamParams->ConnectionTable[p].permanent_connections = 0xFF;
    c5c2:	23ff      	movs	r3, #255	; 0xff
    c5c4:	469b      	mov	fp, r3
                    for (uint8_t p = 0 ;p <CONNECTION_SIZE;p++)
    c5c6:	26a0      	movs	r6, #160	; 0xa0
    c5c8:	0076      	lsls	r6, r6, #1
    c5ca:	e002      	b.n	c5d2 <P2PTasks+0x1d6>
    c5cc:	3510      	adds	r5, #16
    c5ce:	42b5      	cmp	r5, r6
    c5d0:	d0c1      	beq.n	c556 <P2PTasks+0x15a>
                        if (isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[p].Address) )
    c5d2:	683b      	ldr	r3, [r7, #0]
    c5d4:	195c      	adds	r4, r3, r5
    c5d6:	1d21      	adds	r1, r4, #4
    c5d8:	9806      	ldr	r0, [sp, #24]
    c5da:	47c8      	blx	r9
    c5dc:	2800      	cmp	r0, #0
    c5de:	d0f5      	beq.n	c5cc <P2PTasks+0x1d0>
                             miwiDefaultRomOrRamParams->ConnectionTable[p].permanent_connections = 0xFF;
    c5e0:	465b      	mov	r3, fp
    c5e2:	73e3      	strb	r3, [r4, #15]
    c5e4:	e7f2      	b.n	c5cc <P2PTasks+0x1d0>
                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    c5e6:	4643      	mov	r3, r8
    c5e8:	3b01      	subs	r3, #1
    c5ea:	b2db      	uxtb	r3, r3
    c5ec:	2b01      	cmp	r3, #1
    c5ee:	d9b6      	bls.n	c55e <P2PTasks+0x162>
                dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    c5f0:	2050      	movs	r0, #80	; 0x50
    c5f2:	4b69      	ldr	r3, [pc, #420]	; (c798 <P2PTasks+0x39c>)
    c5f4:	4798      	blx	r3
    c5f6:	1e02      	subs	r2, r0, #0
                if (NULL == dataPtr)
    c5f8:	d100      	bne.n	c5fc <P2PTasks+0x200>
    c5fa:	e2cc      	b.n	cb96 <P2PTasks+0x79a>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    c5fc:	2391      	movs	r3, #145	; 0x91
    c5fe:	7013      	strb	r3, [r2, #0]
                dataPtr[dataLen++] = status;
    c600:	3362      	adds	r3, #98	; 0x62
    c602:	7053      	strb	r3, [r2, #1]
                dataPtr[dataLen++] = MyindexinPC;
    c604:	4b65      	ldr	r3, [pc, #404]	; (c79c <P2PTasks+0x3a0>)
    c606:	781b      	ldrb	r3, [r3, #0]
    c608:	7093      	strb	r3, [r2, #2]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c60a:	495b      	ldr	r1, [pc, #364]	; (c778 <P2PTasks+0x37c>)
    c60c:	4b64      	ldr	r3, [pc, #400]	; (c7a0 <P2PTasks+0x3a4>)
    c60e:	9305      	str	r3, [sp, #20]
    c610:	2301      	movs	r3, #1
    c612:	9304      	str	r3, [sp, #16]
    c614:	2000      	movs	r0, #0
    c616:	9003      	str	r0, [sp, #12]
    c618:	9202      	str	r2, [sp, #8]
    c61a:	2203      	movs	r2, #3
    c61c:	9201      	str	r2, [sp, #4]
    c61e:	780a      	ldrb	r2, [r1, #0]
    c620:	0712      	lsls	r2, r2, #28
    c622:	0fd2      	lsrs	r2, r2, #31
    c624:	9200      	str	r2, [sp, #0]
    c626:	684a      	ldr	r2, [r1, #4]
    c628:	8849      	ldrh	r1, [r1, #2]
    c62a:	4c5e      	ldr	r4, [pc, #376]	; (c7a4 <P2PTasks+0x3a8>)
    c62c:	47a0      	blx	r4
    c62e:	e2b2      	b.n	cb96 <P2PTasks+0x79a>
                    dataPtr[dataLen++] = P2PCapacityInfo;
    c630:	4b60      	ldr	r3, [pc, #384]	; (c7b4 <P2PTasks+0x3b8>)
    c632:	781b      	ldrb	r3, [r3, #0]
    c634:	70c3      	strb	r3, [r0, #3]
                        dataPtr[dataLen++] = miwiDefaultRomOrRamParams->AdditionalNodeID[i];
    c636:	4b5d      	ldr	r3, [pc, #372]	; (c7ac <P2PTasks+0x3b0>)
    c638:	681b      	ldr	r3, [r3, #0]
    c63a:	689b      	ldr	r3, [r3, #8]
    c63c:	781b      	ldrb	r3, [r3, #0]
    c63e:	7103      	strb	r3, [r0, #4]
    c640:	3402      	adds	r4, #2
    c642:	e79d      	b.n	c580 <P2PTasks+0x184>
                if(ESTABLISHING_NETWORK != p2pStarCurrentState)
    c644:	4b5c      	ldr	r3, [pc, #368]	; (c7b8 <P2PTasks+0x3bc>)
    c646:	781b      	ldrb	r3, [r3, #0]
    c648:	2b04      	cmp	r3, #4
    c64a:	d000      	beq.n	c64e <P2PTasks+0x252>
    c64c:	e2a3      	b.n	cb96 <P2PTasks+0x79a>
                switch( rxMessage.Payload[1] )
    c64e:	7863      	ldrb	r3, [r4, #1]
    c650:	2b01      	cmp	r3, #1
    c652:	d900      	bls.n	c656 <P2PTasks+0x25a>
    c654:	e29f      	b.n	cb96 <P2PTasks+0x79a>
                    if( myPANID.Val == 0xFFFF )
    c656:	4b4e      	ldr	r3, [pc, #312]	; (c790 <P2PTasks+0x394>)
    c658:	881a      	ldrh	r2, [r3, #0]
    c65a:	4b4c      	ldr	r3, [pc, #304]	; (c78c <P2PTasks+0x390>)
    c65c:	429a      	cmp	r2, r3
    c65e:	d01c      	beq.n	c69a <P2PTasks+0x29e>
                    if (rxMessage.Payload[1] == STATUS_EXISTS)
    c660:	4b45      	ldr	r3, [pc, #276]	; (c778 <P2PTasks+0x37c>)
    c662:	689b      	ldr	r3, [r3, #8]
    c664:	785a      	ldrb	r2, [r3, #1]
    c666:	2a01      	cmp	r2, #1
    c668:	d026      	beq.n	c6b8 <P2PTasks+0x2bc>
                    else if (rxMessage.Payload[1] == STATUS_SUCCESS)
    c66a:	2a00      	cmp	r2, #0
    c66c:	d128      	bne.n	c6c0 <P2PTasks+0x2c4>
                        gEstConnectionInfo.status = SUCCESS;
    c66e:	2100      	movs	r1, #0
    c670:	4a52      	ldr	r2, [pc, #328]	; (c7bc <P2PTasks+0x3c0>)
    c672:	7051      	strb	r1, [r2, #1]
                    gEstConnectionInfo.connectionRetries = 0;
    c674:	2100      	movs	r1, #0
    c676:	4a51      	ldr	r2, [pc, #324]	; (c7bc <P2PTasks+0x3c0>)
    c678:	70d1      	strb	r1, [r2, #3]
                    uint8_t status = AddConnection(rxMessage.Payload[3]);
    c67a:	78d8      	ldrb	r0, [r3, #3]
    c67c:	4b45      	ldr	r3, [pc, #276]	; (c794 <P2PTasks+0x398>)
    c67e:	4798      	blx	r3
                    if ((status == STATUS_SUCCESS) || (status == STATUS_EXISTS))
    c680:	2801      	cmp	r0, #1
    c682:	d921      	bls.n	c6c8 <P2PTasks+0x2cc>
                    myConnectionIndex_in_PanCo = rxMessage.Payload[2];
    c684:	4b3c      	ldr	r3, [pc, #240]	; (c778 <P2PTasks+0x37c>)
    c686:	689b      	ldr	r3, [r3, #8]
    c688:	789a      	ldrb	r2, [r3, #2]
    c68a:	4b4d      	ldr	r3, [pc, #308]	; (c7c0 <P2PTasks+0x3c4>)
    c68c:	701a      	strb	r2, [r3, #0]
                    PDS_Store(PDS_MYINDEX_ID);
    c68e:	2009      	movs	r0, #9
    c690:	4c45      	ldr	r4, [pc, #276]	; (c7a8 <P2PTasks+0x3ac>)
    c692:	47a0      	blx	r4
                   PDS_Store(MIWI_ALL_MEMORY_MEM_ID);
    c694:	484b      	ldr	r0, [pc, #300]	; (c7c4 <P2PTasks+0x3c8>)
    c696:	47a0      	blx	r4
    c698:	e27d      	b.n	cb96 <P2PTasks+0x79a>
                        uint16_t broadcastAddr = 0xFFFF;
    c69a:	201e      	movs	r0, #30
    c69c:	ab02      	add	r3, sp, #8
    c69e:	469c      	mov	ip, r3
    c6a0:	4460      	add	r0, ip
    c6a2:	2301      	movs	r3, #1
    c6a4:	425b      	negs	r3, r3
    c6a6:	8003      	strh	r3, [r0, #0]
                        myPANID.Val = rxMessage.SourcePANID.Val;
    c6a8:	4939      	ldr	r1, [pc, #228]	; (c790 <P2PTasks+0x394>)
    c6aa:	800d      	strh	r5, [r1, #0]
                        MiMAC_SetAltAddress((uint8_t *)&broadcastAddr, (uint8_t *)&myPANID.Val);
    c6ac:	4b46      	ldr	r3, [pc, #280]	; (c7c8 <P2PTasks+0x3cc>)
    c6ae:	4798      	blx	r3
                        PDS_Store(PDS_PANID_ID);
    c6b0:	2002      	movs	r0, #2
    c6b2:	4b3d      	ldr	r3, [pc, #244]	; (c7a8 <P2PTasks+0x3ac>)
    c6b4:	4798      	blx	r3
    c6b6:	e7d3      	b.n	c660 <P2PTasks+0x264>
                        gEstConnectionInfo.status = ALREADY_EXISTS;
    c6b8:	2106      	movs	r1, #6
    c6ba:	4a40      	ldr	r2, [pc, #256]	; (c7bc <P2PTasks+0x3c0>)
    c6bc:	7051      	strb	r1, [r2, #1]
    c6be:	e7d9      	b.n	c674 <P2PTasks+0x278>
                        gEstConnectionInfo.status = FAILURE;
    c6c0:	2101      	movs	r1, #1
    c6c2:	4a3e      	ldr	r2, [pc, #248]	; (c7bc <P2PTasks+0x3c0>)
    c6c4:	7051      	strb	r1, [r2, #1]
    c6c6:	e7d5      	b.n	c674 <P2PTasks+0x278>
                        role = END_DEVICE;
    c6c8:	2202      	movs	r2, #2
    c6ca:	4b2d      	ldr	r3, [pc, #180]	; (c780 <P2PTasks+0x384>)
    c6cc:	701a      	strb	r2, [r3, #0]
    linkStatusTimeInterval = LINK_STATUS_TIMEOUT;
    c6ce:	3212      	adds	r2, #18
    c6d0:	4b3e      	ldr	r3, [pc, #248]	; (c7cc <P2PTasks+0x3d0>)
    c6d2:	801a      	strh	r2, [r3, #0]
	connectionTbLostCount = 0;	//clear it when reconnection to PAN
    c6d4:	2200      	movs	r2, #0
    c6d6:	4b3e      	ldr	r3, [pc, #248]	; (c7d0 <P2PTasks+0x3d4>)
    c6d8:	701a      	strb	r2, [r3, #0]
    c6da:	e7d3      	b.n	c684 <P2PTasks+0x288>
                if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    c6dc:	4b29      	ldr	r3, [pc, #164]	; (c784 <P2PTasks+0x388>)
    c6de:	781b      	ldrb	r3, [r3, #0]
    c6e0:	2b02      	cmp	r3, #2
    c6e2:	d900      	bls.n	c6e6 <P2PTasks+0x2ea>
    c6e4:	e257      	b.n	cb96 <P2PTasks+0x79a>
                if( currentChannel != rxMessage.Payload[1] )
    c6e6:	7862      	ldrb	r2, [r4, #1]
    c6e8:	4b27      	ldr	r3, [pc, #156]	; (c788 <P2PTasks+0x38c>)
    c6ea:	781b      	ldrb	r3, [r3, #0]
    c6ec:	429a      	cmp	r2, r3
    c6ee:	d000      	beq.n	c6f2 <P2PTasks+0x2f6>
    c6f0:	e251      	b.n	cb96 <P2PTasks+0x79a>
                dataPtr = MiMem_Alloc(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE);
    c6f2:	2003      	movs	r0, #3
    c6f4:	4b28      	ldr	r3, [pc, #160]	; (c798 <P2PTasks+0x39c>)
    c6f6:	4798      	blx	r3
                if (NULL == dataPtr)
    c6f8:	2800      	cmp	r0, #0
    c6fa:	d100      	bne.n	c6fe <P2PTasks+0x302>
    c6fc:	e24b      	b.n	cb96 <P2PTasks+0x79a>
                dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    c6fe:	2397      	movs	r3, #151	; 0x97
    c700:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = P2PCapacityInfo;
    c702:	4b2c      	ldr	r3, [pc, #176]	; (c7b4 <P2PTasks+0x3b8>)
    c704:	781b      	ldrb	r3, [r3, #0]
    c706:	7043      	strb	r3, [r0, #1]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->AdditionalNodeID[i]);
    c708:	4b28      	ldr	r3, [pc, #160]	; (c7ac <P2PTasks+0x3b0>)
    c70a:	681b      	ldr	r3, [r3, #0]
    c70c:	689b      	ldr	r3, [r3, #8]
    c70e:	781b      	ldrb	r3, [r3, #0]
    c710:	7083      	strb	r3, [r0, #2]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    c712:	4b19      	ldr	r3, [pc, #100]	; (c778 <P2PTasks+0x37c>)
    c714:	685a      	ldr	r2, [r3, #4]
    c716:	8859      	ldrh	r1, [r3, #2]
    c718:	4c2e      	ldr	r4, [pc, #184]	; (c7d4 <P2PTasks+0x3d8>)
    c71a:	9405      	str	r4, [sp, #20]
    c71c:	2401      	movs	r4, #1
    c71e:	9404      	str	r4, [sp, #16]
    c720:	2400      	movs	r4, #0
    c722:	9403      	str	r4, [sp, #12]
    c724:	9002      	str	r0, [sp, #8]
    c726:	2003      	movs	r0, #3
    c728:	9001      	str	r0, [sp, #4]
    c72a:	781b      	ldrb	r3, [r3, #0]
    c72c:	071b      	lsls	r3, r3, #28
    c72e:	0fdb      	lsrs	r3, r3, #31
    c730:	9300      	str	r3, [sp, #0]
    c732:	2301      	movs	r3, #1
    c734:	2000      	movs	r0, #0
    c736:	4c1b      	ldr	r4, [pc, #108]	; (c7a4 <P2PTasks+0x3a8>)
    c738:	47a0      	blx	r4
    c73a:	e22c      	b.n	cb96 <P2PTasks+0x79a>
    c73c:	0000d25d 	.word	0x0000d25d
    c740:	200020d4 	.word	0x200020d4
    c744:	20000018 	.word	0x20000018
    c748:	0000ab55 	.word	0x0000ab55
    c74c:	0000b011 	.word	0x0000b011
    c750:	0000d1d1 	.word	0x0000d1d1
    c754:	20000414 	.word	0x20000414
    c758:	0000d2ad 	.word	0x0000d2ad
    c75c:	2000043c 	.word	0x2000043c
    c760:	0000d041 	.word	0x0000d041
    c764:	20002188 	.word	0x20002188
    c768:	0000aff5 	.word	0x0000aff5
    c76c:	0000b661 	.word	0x0000b661
    c770:	0000a805 	.word	0x0000a805
    c774:	2000205c 	.word	0x2000205c
    c778:	20002178 	.word	0x20002178
    c77c:	000124d0 	.word	0x000124d0
    c780:	20002160 	.word	0x20002160
    c784:	2000000b 	.word	0x2000000b
    c788:	2000000d 	.word	0x2000000d
    c78c:	0000ffff 	.word	0x0000ffff
    c790:	20002080 	.word	0x20002080
    c794:	0000bae5 	.word	0x0000bae5
    c798:	0000ce0d 	.word	0x0000ce0d
    c79c:	200020e0 	.word	0x200020e0
    c7a0:	0000bfa9 	.word	0x0000bfa9
    c7a4:	0000bbd9 	.word	0x0000bbd9
    c7a8:	00009f31 	.word	0x00009f31
    c7ac:	20002070 	.word	0x20002070
    c7b0:	0000babd 	.word	0x0000babd
    c7b4:	2000000c 	.word	0x2000000c
    c7b8:	2000041c 	.word	0x2000041c
    c7bc:	200020f4 	.word	0x200020f4
    c7c0:	20002078 	.word	0x20002078
    c7c4:	00004001 	.word	0x00004001
    c7c8:	0000a311 	.word	0x0000a311
    c7cc:	2000041a 	.word	0x2000041a
    c7d0:	200003f7 	.word	0x200003f7
    c7d4:	0000b5f5 	.word	0x0000b5f5
                if(RESYNC_IN_PROGRESS == p2pStarCurrentState)
    c7d8:	4bc8      	ldr	r3, [pc, #800]	; (cafc <P2PTasks+0x700>)
    c7da:	781b      	ldrb	r3, [r3, #0]
    c7dc:	2b09      	cmp	r3, #9
    c7de:	d000      	beq.n	c7e2 <P2PTasks+0x3e6>
    c7e0:	e1d9      	b.n	cb96 <P2PTasks+0x79a>
                    resyncInfo.resyncTimes = 0;
    c7e2:	4cc7      	ldr	r4, [pc, #796]	; (cb00 <P2PTasks+0x704>)
    c7e4:	2500      	movs	r5, #0
    c7e6:	7065      	strb	r5, [r4, #1]
                    p2pStarCurrentState = IN_NETWORK_STATE;
    c7e8:	2207      	movs	r2, #7
    c7ea:	4bc4      	ldr	r3, [pc, #784]	; (cafc <P2PTasks+0x700>)
    c7ec:	701a      	strb	r2, [r3, #0]
                    resyncInfo.confCallback(currentChannel, SUCCESS);
    c7ee:	4bc5      	ldr	r3, [pc, #788]	; (cb04 <P2PTasks+0x708>)
    c7f0:	7818      	ldrb	r0, [r3, #0]
    c7f2:	2100      	movs	r1, #0
    c7f4:	68e3      	ldr	r3, [r4, #12]
    c7f6:	4798      	blx	r3
                    resyncInfo.confCallback = NULL;
    c7f8:	60e5      	str	r5, [r4, #12]
    c7fa:	e1cc      	b.n	cb96 <P2PTasks+0x79a>
				if (END_DEVICE == role)
    c7fc:	4bc2      	ldr	r3, [pc, #776]	; (cb08 <P2PTasks+0x70c>)
    c7fe:	781b      	ldrb	r3, [r3, #0]
    c800:	2b02      	cmp	r3, #2
    c802:	d000      	beq.n	c806 <P2PTasks+0x40a>
    c804:	e1c7      	b.n	cb96 <P2PTasks+0x79a>
static bool parse_connection_tb(uint8_t *payload)
{
	uint8_t i;
	bool parse_result = true;
	
	if(payload[1] > CONNECTION_SIZE)
    c806:	7863      	ldrb	r3, [r4, #1]
    c808:	469c      	mov	ip, r3
    c80a:	2b14      	cmp	r3, #20
    c80c:	d900      	bls.n	c810 <P2PTasks+0x414>
    c80e:	e1c2      	b.n	cb96 <P2PTasks+0x79a>
		return false;
	if(payload[2] >= CONNECTION_SIZE)
    c810:	78a3      	ldrb	r3, [r4, #2]
    c812:	2b13      	cmp	r3, #19
    c814:	d900      	bls.n	c818 <P2PTasks+0x41c>
    c816:	e1be      	b.n	cb96 <P2PTasks+0x79a>
		return false;
	if( (payload[2] + (TX_BUFFER_SIZE-4)/4) != payload[3] )
    c818:	3313      	adds	r3, #19
    c81a:	78e2      	ldrb	r2, [r4, #3]
    c81c:	4293      	cmp	r3, r2
    c81e:	d000      	beq.n	c822 <P2PTasks+0x426>
    c820:	e1b9      	b.n	cb96 <P2PTasks+0x79a>
		return false;
		
	for (i = 4; i < RX_BUFFER_SIZE; i+=4)
	{
		if((payload[i+3] != 0xff) && (payload[i+3] >= CONNECTION_SIZE))
    c822:	79e3      	ldrb	r3, [r4, #7]
    c824:	3b14      	subs	r3, #20
    c826:	b2db      	uxtb	r3, r3
    c828:	2bea      	cmp	r3, #234	; 0xea
    c82a:	d800      	bhi.n	c82e <P2PTasks+0x432>
    c82c:	e1b3      	b.n	cb96 <P2PTasks+0x79a>
    c82e:	0022      	movs	r2, r4
    c830:	320b      	adds	r2, #11
    c832:	0021      	movs	r1, r4
    c834:	3153      	adds	r1, #83	; 0x53
    c836:	7813      	ldrb	r3, [r2, #0]
    c838:	3b14      	subs	r3, #20
    c83a:	b2db      	uxtb	r3, r3
    c83c:	2bea      	cmp	r3, #234	; 0xea
    c83e:	d800      	bhi.n	c842 <P2PTasks+0x446>
    c840:	e1a9      	b.n	cb96 <P2PTasks+0x79a>
    c842:	3204      	adds	r2, #4
	for (i = 4; i < RX_BUFFER_SIZE; i+=4)
    c844:	4291      	cmp	r1, r2
    c846:	d1f6      	bne.n	c836 <P2PTasks+0x43a>
						end_nodes = rxMessage.Payload[1];
    c848:	4bb0      	ldr	r3, [pc, #704]	; (cb0c <P2PTasks+0x710>)
    c84a:	4662      	mov	r2, ip
    c84c:	701a      	strb	r2, [r3, #0]
    c84e:	1d23      	adds	r3, r4, #4
    c850:	0027      	movs	r7, r4
    c852:	3750      	adds	r7, #80	; 0x50
    for (i = 4; i < RX_BUFFER_SIZE; i+=4)
    {
        j = payload[i+3];
        if (0xFF != j)
        {
            END_DEVICES_Short_Address[j].connection_slot = j;
    c854:	4eae      	ldr	r6, [pc, #696]	; (cb10 <P2PTasks+0x714>)
    c856:	e002      	b.n	c85e <P2PTasks+0x462>
    c858:	3304      	adds	r3, #4
    for (i = 4; i < RX_BUFFER_SIZE; i+=4)
    c85a:	429f      	cmp	r7, r3
    c85c:	d00c      	beq.n	c878 <P2PTasks+0x47c>
        j = payload[i+3];
    c85e:	78da      	ldrb	r2, [r3, #3]
        if (0xFF != j)
    c860:	2aff      	cmp	r2, #255	; 0xff
    c862:	d0f9      	beq.n	c858 <P2PTasks+0x45c>
            END_DEVICES_Short_Address[j].connection_slot = j;
    c864:	0095      	lsls	r5, r2, #2
    c866:	1971      	adds	r1, r6, r5
    c868:	70ca      	strb	r2, [r1, #3]
            END_DEVICES_Short_Address[j].Address[0] = payload[i];
    c86a:	781a      	ldrb	r2, [r3, #0]
    c86c:	55aa      	strb	r2, [r5, r6]
            END_DEVICES_Short_Address[j].Address[1] = payload[i+1];
    c86e:	785a      	ldrb	r2, [r3, #1]
    c870:	704a      	strb	r2, [r1, #1]
            END_DEVICES_Short_Address[j].Address[2] = payload[i+2];
    c872:	789a      	ldrb	r2, [r3, #2]
    c874:	708a      	strb	r2, [r1, #2]
    c876:	e7ef      	b.n	c858 <P2PTasks+0x45c>
    }
#if 0	//WSGA-13109	
    handleLostConnection();
#else
	//modify to it only when receiving the last frame of connection table
	if(payload[1] > payload[2] && payload[1] <= payload[3])
    c878:	7863      	ldrb	r3, [r4, #1]
    c87a:	78a2      	ldrb	r2, [r4, #2]
    c87c:	429a      	cmp	r2, r3
    c87e:	d300      	bcc.n	c882 <P2PTasks+0x486>
    c880:	e189      	b.n	cb96 <P2PTasks+0x79a>
    c882:	78e2      	ldrb	r2, [r4, #3]
    c884:	429a      	cmp	r2, r3
    c886:	d200      	bcs.n	c88a <P2PTasks+0x48e>
    c888:	e185      	b.n	cb96 <P2PTasks+0x79a>
        for (i = 0; i < end_nodes; i++)
    c88a:	4663      	mov	r3, ip
    c88c:	2b00      	cmp	r3, #0
    c88e:	d021      	beq.n	c8d4 <P2PTasks+0x4d8>
            if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    c890:	4ba0      	ldr	r3, [pc, #640]	; (cb14 <P2PTasks+0x718>)
    c892:	781a      	ldrb	r2, [r3, #0]
    c894:	4690      	mov	r8, r2
    c896:	785e      	ldrb	r6, [r3, #1]
    c898:	4b9f      	ldr	r3, [pc, #636]	; (cb18 <P2PTasks+0x71c>)
    c89a:	781d      	ldrb	r5, [r3, #0]
    c89c:	4a9c      	ldr	r2, [pc, #624]	; (cb10 <P2PTasks+0x714>)
    c89e:	4663      	mov	r3, ip
    c8a0:	3b01      	subs	r3, #1
    c8a2:	b2db      	uxtb	r3, r3
    c8a4:	3301      	adds	r3, #1
    c8a6:	009b      	lsls	r3, r3, #2
    c8a8:	189b      	adds	r3, r3, r2
    c8aa:	2100      	movs	r1, #0
    c8ac:	000c      	movs	r4, r1
    c8ae:	e002      	b.n	c8b6 <P2PTasks+0x4ba>
    c8b0:	3204      	adds	r2, #4
        for (i = 0; i < end_nodes; i++)
    c8b2:	4293      	cmp	r3, r2
    c8b4:	d009      	beq.n	c8ca <P2PTasks+0x4ce>
            if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    c8b6:	7817      	ldrb	r7, [r2, #0]
    c8b8:	4547      	cmp	r7, r8
    c8ba:	d1f9      	bne.n	c8b0 <P2PTasks+0x4b4>
    c8bc:	7857      	ldrb	r7, [r2, #1]
    c8be:	42b7      	cmp	r7, r6
    c8c0:	d1f6      	bne.n	c8b0 <P2PTasks+0x4b4>
    c8c2:	0001      	movs	r1, r0
                stat = true;
    c8c4:	0004      	movs	r4, r0
				connectionTbLostCount = 0;		//clear counter if find itself in the table
    c8c6:	2500      	movs	r5, #0
    c8c8:	e7f2      	b.n	c8b0 <P2PTasks+0x4b4>
    c8ca:	2900      	cmp	r1, #0
    c8cc:	d11f      	bne.n	c90e <P2PTasks+0x512>
		if(!stat)
    c8ce:	2c00      	cmp	r4, #0
    c8d0:	d000      	beq.n	c8d4 <P2PTasks+0x4d8>
    c8d2:	e160      	b.n	cb96 <P2PTasks+0x79a>
			connectionTbLostCount++;		//counter++ if find itself is not in the table
    c8d4:	4a90      	ldr	r2, [pc, #576]	; (cb18 <P2PTasks+0x71c>)
    c8d6:	7813      	ldrb	r3, [r2, #0]
    c8d8:	3301      	adds	r3, #1
    c8da:	b2db      	uxtb	r3, r3
    c8dc:	7013      	strb	r3, [r2, #0]
		if(!stat && (connectionTbLostCount >= CONN_TB_LOST_MAX) )	//make sure counter arrives to a predefined value to de-bounce the data.
    c8de:	2b01      	cmp	r3, #1
    c8e0:	d800      	bhi.n	c8e4 <P2PTasks+0x4e8>
    c8e2:	e158      	b.n	cb96 <P2PTasks+0x79a>
            linkStatusTimeInterval = 0;
    c8e4:	2200      	movs	r2, #0
    c8e6:	4b8d      	ldr	r3, [pc, #564]	; (cb1c <P2PTasks+0x720>)
    c8e8:	801a      	strh	r2, [r3, #0]
            if ((NULL != linkFailureCallback) && (p2pStarCurrentState != DISCONNECTED))
    c8ea:	4b8d      	ldr	r3, [pc, #564]	; (cb20 <P2PTasks+0x724>)
    c8ec:	681b      	ldr	r3, [r3, #0]
    c8ee:	4293      	cmp	r3, r2
    c8f0:	d004      	beq.n	c8fc <P2PTasks+0x500>
    c8f2:	4a82      	ldr	r2, [pc, #520]	; (cafc <P2PTasks+0x700>)
    c8f4:	7812      	ldrb	r2, [r2, #0]
    c8f6:	2a08      	cmp	r2, #8
    c8f8:	d005      	beq.n	c906 <P2PTasks+0x50a>
                linkFailureCallback();
    c8fa:	4798      	blx	r3
			if(p2pStarCurrentState != ESTABLISHING_NETWORK)
    c8fc:	4b7f      	ldr	r3, [pc, #508]	; (cafc <P2PTasks+0x700>)
    c8fe:	781b      	ldrb	r3, [r3, #0]
    c900:	2b04      	cmp	r3, #4
    c902:	d100      	bne.n	c906 <P2PTasks+0x50a>
    c904:	e147      	b.n	cb96 <P2PTasks+0x79a>
				p2pStarCurrentState = DISCONNECTED;
    c906:	2208      	movs	r2, #8
    c908:	4b7c      	ldr	r3, [pc, #496]	; (cafc <P2PTasks+0x700>)
    c90a:	701a      	strb	r2, [r3, #0]
    c90c:	e143      	b.n	cb96 <P2PTasks+0x79a>
    c90e:	4b82      	ldr	r3, [pc, #520]	; (cb18 <P2PTasks+0x71c>)
    c910:	701d      	strb	r5, [r3, #0]
    c912:	e7dc      	b.n	c8ce <P2PTasks+0x4d2>
				dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    c914:	2100      	movs	r1, #0
    c916:	4883      	ldr	r0, [pc, #524]	; (cb24 <P2PTasks+0x728>)
    c918:	4b83      	ldr	r3, [pc, #524]	; (cb28 <P2PTasks+0x72c>)
    c91a:	4798      	blx	r3
    c91c:	1e04      	subs	r4, r0, #0
				if (NULL == dataFramePtr)
    c91e:	d100      	bne.n	c922 <P2PTasks+0x526>
    c920:	e139      	b.n	cb96 <P2PTasks+0x79a>
				DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    c922:	6843      	ldr	r3, [r0, #4]
				if (NULL != callback)
    c924:	2b00      	cmp	r3, #0
    c926:	d004      	beq.n	c932 <P2PTasks+0x536>
					callback(dataFramePtr->dataFrame.msghandle, SUCCESS, dataFramePtr->dataFrame.msg);
    c928:	7d00      	ldrb	r0, [r0, #20]
    c92a:	0022      	movs	r2, r4
    c92c:	3216      	adds	r2, #22
    c92e:	2100      	movs	r1, #0
    c930:	4798      	blx	r3
				MiMem_Free((uint8_t *)dataFramePtr);
    c932:	0020      	movs	r0, r4
    c934:	4b7d      	ldr	r3, [pc, #500]	; (cb2c <P2PTasks+0x730>)
    c936:	4798      	blx	r3
    c938:	e12d      	b.n	cb96 <P2PTasks+0x79a>
	            if (PAN_COORD == role)
    c93a:	4b73      	ldr	r3, [pc, #460]	; (cb08 <P2PTasks+0x70c>)
    c93c:	781b      	ldrb	r3, [r3, #0]
    c93e:	2b01      	cmp	r3, #1
    c940:	d000      	beq.n	c944 <P2PTasks+0x548>
    c942:	e128      	b.n	cb96 <P2PTasks+0x79a>
					uint8_t ed_index = Find_Index(&(rxMessage.Payload[1]));
    c944:	1c60      	adds	r0, r4, #1
    c946:	4b7a      	ldr	r3, [pc, #488]	; (cb30 <P2PTasks+0x734>)
    c948:	4798      	blx	r3
    c94a:	0005      	movs	r5, r0
					if (0xFF != ed_index)
    c94c:	28ff      	cmp	r0, #255	; 0xff
    c94e:	d100      	bne.n	c952 <P2PTasks+0x556>
    c950:	e121      	b.n	cb96 <P2PTasks+0x79a>
						dataPtr = (P2PStarDataFrame_t*)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    c952:	2068      	movs	r0, #104	; 0x68
    c954:	4b77      	ldr	r3, [pc, #476]	; (cb34 <P2PTasks+0x738>)
    c956:	4798      	blx	r3
    c958:	1e04      	subs	r4, r0, #0
						if (NULL == dataPtr)
    c95a:	d100      	bne.n	c95e <P2PTasks+0x562>
    c95c:	e11b      	b.n	cb96 <P2PTasks+0x79a>
						memcpy(dataPtr->dataFrame.destAddress, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, LONG_ADDR_LEN);
    c95e:	4b76      	ldr	r3, [pc, #472]	; (cb38 <P2PTasks+0x73c>)
    c960:	681e      	ldr	r6, [r3, #0]
    c962:	012d      	lsls	r5, r5, #4
    c964:	3008      	adds	r0, #8
    c966:	6833      	ldr	r3, [r6, #0]
    c968:	1959      	adds	r1, r3, r5
    c96a:	3104      	adds	r1, #4
    c96c:	2208      	movs	r2, #8
    c96e:	4b73      	ldr	r3, [pc, #460]	; (cb3c <P2PTasks+0x740>)
    c970:	4798      	blx	r3
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[0];    // Unique address of EDy (DEST ED)
    c972:	4a73      	ldr	r2, [pc, #460]	; (cb40 <P2PTasks+0x744>)
    c974:	6853      	ldr	r3, [r2, #4]
    c976:	7819      	ldrb	r1, [r3, #0]
    c978:	75a1      	strb	r1, [r4, #22]
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[1];    // Unique address of EDy (DEST ED)
    c97a:	7859      	ldrb	r1, [r3, #1]
    c97c:	75e1      	strb	r1, [r4, #23]
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[2];    // Unique address of EDy (DEST ED)
    c97e:	789b      	ldrb	r3, [r3, #2]
    c980:	7623      	strb	r3, [r4, #24]
						for(i = 4; i < rxMessage.PayloadSize; i++)
    c982:	7b17      	ldrb	r7, [r2, #12]
    c984:	2f04      	cmp	r7, #4
    c986:	d92f      	bls.n	c9e8 <P2PTasks+0x5ec>
							dataPtr->dataFrame.msg[dataLen++] = rxMessage.Payload[i];
    c988:	6890      	ldr	r0, [r2, #8]
    c98a:	1d03      	adds	r3, r0, #4
    c98c:	0022      	movs	r2, r4
    c98e:	3219      	adds	r2, #25
    c990:	1f79      	subs	r1, r7, #5
    c992:	b2c9      	uxtb	r1, r1
    c994:	3105      	adds	r1, #5
    c996:	1840      	adds	r0, r0, r1
    c998:	7819      	ldrb	r1, [r3, #0]
    c99a:	7011      	strb	r1, [r2, #0]
    c99c:	3301      	adds	r3, #1
    c99e:	3201      	adds	r2, #1
						for(i = 4; i < rxMessage.PayloadSize; i++)
    c9a0:	4283      	cmp	r3, r0
    c9a2:	d1f9      	bne.n	c998 <P2PTasks+0x59c>
    c9a4:	1e7b      	subs	r3, r7, #1
    c9a6:	b2db      	uxtb	r3, r3
						dataPtr->dataFrame.msgLength = dataLen;
    c9a8:	7563      	strb	r3, [r4, #21]
						dataPtr->dataFrame.fromEDToED = 1;
    c9aa:	2201      	movs	r2, #1
    c9ac:	74e2      	strb	r2, [r4, #19]
						if(miwiDefaultRomOrRamParams->ConnectionTable[ed_index].status.bits.isValid && miwiDefaultRomOrRamParams->ConnectionTable[ed_index].status.bits.RXOnWhenIdle == 0)
    c9ae:	6832      	ldr	r2, [r6, #0]
    c9b0:	1955      	adds	r5, r2, r5
    c9b2:	7b2a      	ldrb	r2, [r5, #12]
    c9b4:	217e      	movs	r1, #126	; 0x7e
    c9b6:	438a      	bics	r2, r1
    c9b8:	2a80      	cmp	r2, #128	; 0x80
    c9ba:	d017      	beq.n	c9ec <P2PTasks+0x5f0>
							frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, false, false, dataLen, dataPtr->dataFrame.msg, 1, true, appAckWaitDataCallback);
    c9bc:	1d2a      	adds	r2, r5, #4
    c9be:	4961      	ldr	r1, [pc, #388]	; (cb44 <P2PTasks+0x748>)
    c9c0:	8809      	ldrh	r1, [r1, #0]
    c9c2:	4861      	ldr	r0, [pc, #388]	; (cb48 <P2PTasks+0x74c>)
    c9c4:	9005      	str	r0, [sp, #20]
    c9c6:	2001      	movs	r0, #1
    c9c8:	9004      	str	r0, [sp, #16]
    c9ca:	9003      	str	r0, [sp, #12]
    c9cc:	0020      	movs	r0, r4
    c9ce:	3016      	adds	r0, #22
    c9d0:	9002      	str	r0, [sp, #8]
    c9d2:	9301      	str	r3, [sp, #4]
    c9d4:	2300      	movs	r3, #0
    c9d6:	9300      	str	r3, [sp, #0]
    c9d8:	2000      	movs	r0, #0
    c9da:	4d5c      	ldr	r5, [pc, #368]	; (cb4c <P2PTasks+0x750>)
    c9dc:	47a8      	blx	r5
							miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t*)dataPtr);
    c9de:	0021      	movs	r1, r4
    c9e0:	4850      	ldr	r0, [pc, #320]	; (cb24 <P2PTasks+0x728>)
    c9e2:	4b5b      	ldr	r3, [pc, #364]	; (cb50 <P2PTasks+0x754>)
    c9e4:	4798      	blx	r3
    c9e6:	e0d6      	b.n	cb96 <P2PTasks+0x79a>
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[2];    // Unique address of EDy (DEST ED)
    c9e8:	2303      	movs	r3, #3
    c9ea:	e7dd      	b.n	c9a8 <P2PTasks+0x5ac>
							if (50 < MiMem_PercentageOfFreeBuffers())
    c9ec:	4b59      	ldr	r3, [pc, #356]	; (cb54 <P2PTasks+0x758>)
    c9ee:	4798      	blx	r3
    c9f0:	2832      	cmp	r0, #50	; 0x32
    c9f2:	d800      	bhi.n	c9f6 <P2PTasks+0x5fa>
    c9f4:	e0cf      	b.n	cb96 <P2PTasks+0x79a>
								dataPtr->dataFrame.confCallback = NULL;
    c9f6:	2300      	movs	r3, #0
    c9f8:	6063      	str	r3, [r4, #4]
								dataPtr->dataFrame.timeout = INDIRECT_MESSAGE_TIMEOUT;
    c9fa:	3318      	adds	r3, #24
    c9fc:	7423      	strb	r3, [r4, #16]
								dataPtr->dataFrame.ackReq = true;
    c9fe:	3b17      	subs	r3, #23
    ca00:	7463      	strb	r3, [r4, #17]
								miQueueAppend(&indirectFrameQueue, (miQueueBuffer_t*)dataPtr);
    ca02:	0021      	movs	r1, r4
    ca04:	4854      	ldr	r0, [pc, #336]	; (cb58 <P2PTasks+0x75c>)
    ca06:	4b52      	ldr	r3, [pc, #328]	; (cb50 <P2PTasks+0x754>)
    ca08:	4798      	blx	r3
    ca0a:	e0c4      	b.n	cb96 <P2PTasks+0x79a>
                if (PAN_COORD == role)
    ca0c:	4b3e      	ldr	r3, [pc, #248]	; (cb08 <P2PTasks+0x70c>)
    ca0e:	781b      	ldrb	r3, [r3, #0]
    ca10:	2b01      	cmp	r3, #1
    ca12:	d000      	beq.n	ca16 <P2PTasks+0x61a>
    ca14:	e0bf      	b.n	cb96 <P2PTasks+0x79a>
                        if (miwiDefaultRomOrRamParams->ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && miwiDefaultRomOrRamParams->ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    ca16:	4b48      	ldr	r3, [pc, #288]	; (cb38 <P2PTasks+0x73c>)
    ca18:	681b      	ldr	r3, [r3, #0]
    ca1a:	6819      	ldr	r1, [r3, #0]
    ca1c:	4b48      	ldr	r3, [pc, #288]	; (cb40 <P2PTasks+0x744>)
    ca1e:	685e      	ldr	r6, [r3, #4]
    ca20:	7834      	ldrb	r4, [r6, #0]
    ca22:	000b      	movs	r3, r1
    ca24:	3141      	adds	r1, #65	; 0x41
    ca26:	31ff      	adds	r1, #255	; 0xff
    ca28:	e003      	b.n	ca32 <P2PTasks+0x636>
    ca2a:	3310      	adds	r3, #16
                    for (p=0  ; p < CONNECTION_SIZE ; p++)
    ca2c:	428b      	cmp	r3, r1
    ca2e:	d100      	bne.n	ca32 <P2PTasks+0x636>
    ca30:	e0b1      	b.n	cb96 <P2PTasks+0x79a>
                        if (miwiDefaultRomOrRamParams->ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && miwiDefaultRomOrRamParams->ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    ca32:	0018      	movs	r0, r3
    ca34:	791a      	ldrb	r2, [r3, #4]
    ca36:	42a2      	cmp	r2, r4
    ca38:	d1f7      	bne.n	ca2a <P2PTasks+0x62e>
    ca3a:	795d      	ldrb	r5, [r3, #5]
    ca3c:	7872      	ldrb	r2, [r6, #1]
    ca3e:	4295      	cmp	r5, r2
    ca40:	d1f3      	bne.n	ca2a <P2PTasks+0x62e>
                        && miwiDefaultRomOrRamParams->ConnectionTable[p].Address[2] == rxMessage.SourceAddress[2])
    ca42:	799d      	ldrb	r5, [r3, #6]
    ca44:	78b2      	ldrb	r2, [r6, #2]
    ca46:	4295      	cmp	r5, r2
    ca48:	d1ef      	bne.n	ca2a <P2PTasks+0x62e>
                            miwiDefaultRomOrRamParams->ConnectionTable[p].link_status++;
    ca4a:	7b9b      	ldrb	r3, [r3, #14]
    ca4c:	3301      	adds	r3, #1
    ca4e:	7383      	strb	r3, [r0, #14]
    ca50:	e0a1      	b.n	cb96 <P2PTasks+0x79a>
                dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE);
    ca52:	2002      	movs	r0, #2
    ca54:	4b37      	ldr	r3, [pc, #220]	; (cb34 <P2PTasks+0x738>)
    ca56:	4798      	blx	r3
    ca58:	1e07      	subs	r7, r0, #0
                if (NULL == dataPtr)
    ca5a:	d100      	bne.n	ca5e <P2PTasks+0x662>
    ca5c:	e09b      	b.n	cb96 <P2PTasks+0x79a>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    ca5e:	2392      	movs	r3, #146	; 0x92
    ca60:	7003      	strb	r3, [r0, #0]
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    ca62:	4b37      	ldr	r3, [pc, #220]	; (cb40 <P2PTasks+0x744>)
    ca64:	685b      	ldr	r3, [r3, #4]
    ca66:	9307      	str	r3, [sp, #28]
                    if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    ca68:	4b33      	ldr	r3, [pc, #204]	; (cb38 <P2PTasks+0x73c>)
    ca6a:	681b      	ldr	r3, [r3, #0]
    ca6c:	681d      	ldr	r5, [r3, #0]
                for(i = 0; i < CONNECTION_SIZE; i++)
    ca6e:	2400      	movs	r4, #0
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    ca70:	4e3a      	ldr	r6, [pc, #232]	; (cb5c <P2PTasks+0x760>)
    ca72:	e004      	b.n	ca7e <P2PTasks+0x682>
                for(i = 0; i < CONNECTION_SIZE; i++)
    ca74:	3401      	adds	r4, #1
    ca76:	b2e4      	uxtb	r4, r4
    ca78:	3510      	adds	r5, #16
    ca7a:	2c14      	cmp	r4, #20
    ca7c:	d016      	beq.n	caac <P2PTasks+0x6b0>
                    if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    ca7e:	9506      	str	r5, [sp, #24]
    ca80:	7b2b      	ldrb	r3, [r5, #12]
    ca82:	2b7f      	cmp	r3, #127	; 0x7f
    ca84:	d9f6      	bls.n	ca74 <P2PTasks+0x678>
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    ca86:	1d29      	adds	r1, r5, #4
    ca88:	9807      	ldr	r0, [sp, #28]
    ca8a:	47b0      	blx	r6
    ca8c:	2800      	cmp	r0, #0
    ca8e:	d0f1      	beq.n	ca74 <P2PTasks+0x678>
                            miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    ca90:	2600      	movs	r6, #0
    ca92:	9b06      	ldr	r3, [sp, #24]
    ca94:	731e      	strb	r6, [r3, #12]
                            PDS_Store(PDS_CONNECTION_TABLE_ID);
    ca96:	2006      	movs	r0, #6
    ca98:	4b31      	ldr	r3, [pc, #196]	; (cb60 <P2PTasks+0x764>)
    ca9a:	4798      	blx	r3
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    ca9c:	707e      	strb	r6, [r7, #1]
							RNCmd_SendConnectionChange(i);
    ca9e:	0020      	movs	r0, r4
    caa0:	4b30      	ldr	r3, [pc, #192]	; (cb64 <P2PTasks+0x768>)
    caa2:	4798      	blx	r3
                if( i == CONNECTION_SIZE )
    caa4:	2c14      	cmp	r4, #20
    caa6:	d018      	beq.n	cada <P2PTasks+0x6de>
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    caa8:	2402      	movs	r4, #2
    caaa:	e003      	b.n	cab4 <P2PTasks+0x6b8>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    caac:	2301      	movs	r3, #1
                    dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    caae:	1c5c      	adds	r4, r3, #1
    cab0:	22f0      	movs	r2, #240	; 0xf0
    cab2:	54fa      	strb	r2, [r7, r3]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    cab4:	4b22      	ldr	r3, [pc, #136]	; (cb40 <P2PTasks+0x744>)
    cab6:	685a      	ldr	r2, [r3, #4]
    cab8:	8859      	ldrh	r1, [r3, #2]
    caba:	482b      	ldr	r0, [pc, #172]	; (cb68 <P2PTasks+0x76c>)
    cabc:	9005      	str	r0, [sp, #20]
    cabe:	2001      	movs	r0, #1
    cac0:	9004      	str	r0, [sp, #16]
    cac2:	2000      	movs	r0, #0
    cac4:	9003      	str	r0, [sp, #12]
    cac6:	9702      	str	r7, [sp, #8]
    cac8:	9401      	str	r4, [sp, #4]
    caca:	781b      	ldrb	r3, [r3, #0]
    cacc:	071b      	lsls	r3, r3, #28
    cace:	0fdb      	lsrs	r3, r3, #31
    cad0:	9300      	str	r3, [sp, #0]
    cad2:	2301      	movs	r3, #1
    cad4:	4c1d      	ldr	r4, [pc, #116]	; (cb4c <P2PTasks+0x750>)
    cad6:	47a0      	blx	r4
    cad8:	e05d      	b.n	cb96 <P2PTasks+0x79a>
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    cada:	2302      	movs	r3, #2
    cadc:	e7e7      	b.n	caae <P2PTasks+0x6b2>
                if( rxMessage.Payload[1] == STATUS_SUCCESS )
    cade:	7863      	ldrb	r3, [r4, #1]
    cae0:	2b00      	cmp	r3, #0
    cae2:	d158      	bne.n	cb96 <P2PTasks+0x79a>
                        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    cae4:	4b14      	ldr	r3, [pc, #80]	; (cb38 <P2PTasks+0x73c>)
    cae6:	681b      	ldr	r3, [r3, #0]
    cae8:	681f      	ldr	r7, [r3, #0]
                            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    caea:	4a15      	ldr	r2, [pc, #84]	; (cb40 <P2PTasks+0x744>)
    caec:	6853      	ldr	r3, [r2, #4]
    caee:	9306      	str	r3, [sp, #24]
    caf0:	003c      	movs	r4, r7
    caf2:	3741      	adds	r7, #65	; 0x41
    caf4:	37ff      	adds	r7, #255	; 0xff
    caf6:	4e19      	ldr	r6, [pc, #100]	; (cb5c <P2PTasks+0x760>)
    caf8:	e03b      	b.n	cb72 <P2PTasks+0x776>
    cafa:	46c0      	nop			; (mov r8, r8)
    cafc:	2000041c 	.word	0x2000041c
    cb00:	20002164 	.word	0x20002164
    cb04:	2000000d 	.word	0x2000000d
    cb08:	20002160 	.word	0x20002160
    cb0c:	20000410 	.word	0x20000410
    cb10:	20002104 	.word	0x20002104
    cb14:	20000010 	.word	0x20000010
    cb18:	200003f7 	.word	0x200003f7
    cb1c:	2000041a 	.word	0x2000041a
    cb20:	20002174 	.word	0x20002174
    cb24:	200020e8 	.word	0x200020e8
    cb28:	0000d041 	.word	0x0000d041
    cb2c:	0000cec9 	.word	0x0000cec9
    cb30:	0000b59d 	.word	0x0000b59d
    cb34:	0000ce0d 	.word	0x0000ce0d
    cb38:	20002070 	.word	0x20002070
    cb3c:	00010a97 	.word	0x00010a97
    cb40:	20002178 	.word	0x20002178
    cb44:	20002080 	.word	0x20002080
    cb48:	0000cc61 	.word	0x0000cc61
    cb4c:	0000bbd9 	.word	0x0000bbd9
    cb50:	0000d009 	.word	0x0000d009
    cb54:	0000cf45 	.word	0x0000cf45
    cb58:	20002050 	.word	0x20002050
    cb5c:	0000babd 	.word	0x0000babd
    cb60:	00009f31 	.word	0x00009f31
    cb64:	0000f43d 	.word	0x0000f43d
    cb68:	0000b5f5 	.word	0x0000b5f5
    cb6c:	3410      	adds	r4, #16
                    for(i = 0; i < CONNECTION_SIZE; i++)
    cb6e:	42bc      	cmp	r4, r7
    cb70:	d011      	beq.n	cb96 <P2PTasks+0x79a>
                        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    cb72:	7b23      	ldrb	r3, [r4, #12]
    cb74:	2b7f      	cmp	r3, #127	; 0x7f
    cb76:	d9f9      	bls.n	cb6c <P2PTasks+0x770>
                            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    cb78:	1d21      	adds	r1, r4, #4
    cb7a:	9806      	ldr	r0, [sp, #24]
    cb7c:	47b0      	blx	r6
    cb7e:	2800      	cmp	r0, #0
    cb80:	d0f4      	beq.n	cb6c <P2PTasks+0x770>
                                miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    cb82:	2300      	movs	r3, #0
    cb84:	7323      	strb	r3, [r4, #12]
                                PDS_Store(PDS_CONNECTION_TABLE_ID);
    cb86:	2006      	movs	r0, #6
    cb88:	4b07      	ldr	r3, [pc, #28]	; (cba8 <P2PTasks+0x7ac>)
    cb8a:	4798      	blx	r3
    cb8c:	e003      	b.n	cb96 <P2PTasks+0x79a>
		if (IN_NETWORK_STATE == p2pStarCurrentState)
    cb8e:	4b07      	ldr	r3, [pc, #28]	; (cbac <P2PTasks+0x7b0>)
    cb90:	781b      	ldrb	r3, [r3, #0]
    cb92:	2b07      	cmp	r3, #7
    cb94:	d002      	beq.n	cb9c <P2PTasks+0x7a0>
        MiMAC_DiscardPacket();
    cb96:	4b06      	ldr	r3, [pc, #24]	; (cbb0 <P2PTasks+0x7b4>)
    cb98:	4798      	blx	r3
    cb9a:	e444      	b.n	c426 <P2PTasks+0x2a>
			pktRxcallback(&rxMessage);
    cb9c:	4b05      	ldr	r3, [pc, #20]	; (cbb4 <P2PTasks+0x7b8>)
    cb9e:	681b      	ldr	r3, [r3, #0]
    cba0:	4805      	ldr	r0, [pc, #20]	; (cbb8 <P2PTasks+0x7bc>)
    cba2:	4798      	blx	r3
    cba4:	e7f7      	b.n	cb96 <P2PTasks+0x79a>
    cba6:	46c0      	nop			; (mov r8, r8)
    cba8:	00009f31 	.word	0x00009f31
    cbac:	2000041c 	.word	0x2000041c
    cbb0:	0000ab39 	.word	0x0000ab39
    cbb4:	20000420 	.word	0x20000420
    cbb8:	20002178 	.word	0x20002178

0000cbbc <macAckOnlyDataCallback>:
    return false;
}
#endif

void macAckOnlyDataCallback(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    cbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbbe:	b087      	sub	sp, #28
    cbc0:	0005      	movs	r5, r0
    cbc2:	000e      	movs	r6, r1
    cbc4:	0017      	movs	r7, r2
	P2PStarDataFrame_t *dataFramePtr = NULL;
	dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&macAckOnlyFrameQueue, NULL);
    cbc6:	2100      	movs	r1, #0
    cbc8:	481c      	ldr	r0, [pc, #112]	; (cc3c <macAckOnlyDataCallback+0x80>)
    cbca:	4b1d      	ldr	r3, [pc, #116]	; (cc40 <macAckOnlyDataCallback+0x84>)
    cbcc:	4798      	blx	r3
    cbce:	1e04      	subs	r4, r0, #0

	if (NULL != dataFramePtr)
    cbd0:	d031      	beq.n	cc36 <macAckOnlyDataCallback+0x7a>
	{
		DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    cbd2:	6843      	ldr	r3, [r0, #4]
		if (NULL != callback && 1 != dataFramePtr->dataFrame.broadcast)
    cbd4:	2b00      	cmp	r3, #0
    cbd6:	d006      	beq.n	cbe6 <macAckOnlyDataCallback+0x2a>
    cbd8:	7c82      	ldrb	r2, [r0, #18]
    cbda:	2a01      	cmp	r2, #1
    cbdc:	d003      	beq.n	cbe6 <macAckOnlyDataCallback+0x2a>
		{
			callback(handle, status, msgPointer);
    cbde:	003a      	movs	r2, r7
    cbe0:	0031      	movs	r1, r6
    cbe2:	0028      	movs	r0, r5
    cbe4:	4798      	blx	r3
		}
#if defined(PROTOCOL_STAR)
		if (dataFramePtr->dataFrame.fromEDToED)
    cbe6:	7ce3      	ldrb	r3, [r4, #19]
    cbe8:	2b00      	cmp	r3, #0
    cbea:	d021      	beq.n	cc30 <macAckOnlyDataCallback+0x74>
		{
			uint8_t ed_index = Find_Index(dataFramePtr->dataFrame.msg);
    cbec:	0020      	movs	r0, r4
    cbee:	3016      	adds	r0, #22
    cbf0:	4b14      	ldr	r3, [pc, #80]	; (cc44 <macAckOnlyDataCallback+0x88>)
    cbf2:	4798      	blx	r3
    cbf4:	0005      	movs	r5, r0
			if (0xFF != ed_index)
    cbf6:	28ff      	cmp	r0, #255	; 0xff
    cbf8:	d01a      	beq.n	cc30 <macAckOnlyDataCallback+0x74>
			{
				uint8_t* dataPtr;
				dataPtr = MiMem_Alloc(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS);
    cbfa:	2001      	movs	r0, #1
    cbfc:	4b12      	ldr	r3, [pc, #72]	; (cc48 <macAckOnlyDataCallback+0x8c>)
    cbfe:	4798      	blx	r3
				if (NULL == dataPtr)
    cc00:	2800      	cmp	r0, #0
    cc02:	d018      	beq.n	cc36 <macAckOnlyDataCallback+0x7a>
				return;
				dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
    cc04:	23da      	movs	r3, #218	; 0xda
    cc06:	7003      	strb	r3, [r0, #0]
				frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, CommandConfCallback);
    cc08:	4b10      	ldr	r3, [pc, #64]	; (cc4c <macAckOnlyDataCallback+0x90>)
    cc0a:	681b      	ldr	r3, [r3, #0]
    cc0c:	012d      	lsls	r5, r5, #4
    cc0e:	681a      	ldr	r2, [r3, #0]
    cc10:	1952      	adds	r2, r2, r5
    cc12:	3204      	adds	r2, #4
    cc14:	4b0e      	ldr	r3, [pc, #56]	; (cc50 <macAckOnlyDataCallback+0x94>)
    cc16:	8819      	ldrh	r1, [r3, #0]
    cc18:	4b0e      	ldr	r3, [pc, #56]	; (cc54 <macAckOnlyDataCallback+0x98>)
    cc1a:	9305      	str	r3, [sp, #20]
    cc1c:	2301      	movs	r3, #1
    cc1e:	9304      	str	r3, [sp, #16]
    cc20:	2500      	movs	r5, #0
    cc22:	9503      	str	r5, [sp, #12]
    cc24:	9002      	str	r0, [sp, #8]
    cc26:	9301      	str	r3, [sp, #4]
    cc28:	9300      	str	r3, [sp, #0]
    cc2a:	2000      	movs	r0, #0
    cc2c:	4d0a      	ldr	r5, [pc, #40]	; (cc58 <macAckOnlyDataCallback+0x9c>)
    cc2e:	47a8      	blx	r5
			}
		}
#endif
		MiMem_Free((uint8_t *)dataFramePtr);
    cc30:	0020      	movs	r0, r4
    cc32:	4b0a      	ldr	r3, [pc, #40]	; (cc5c <macAckOnlyDataCallback+0xa0>)
    cc34:	4798      	blx	r3
	}
}
    cc36:	b007      	add	sp, #28
    cc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc3a:	46c0      	nop			; (mov r8, r8)
    cc3c:	20002044 	.word	0x20002044
    cc40:	0000d041 	.word	0x0000d041
    cc44:	0000b59d 	.word	0x0000b59d
    cc48:	0000ce0d 	.word	0x0000ce0d
    cc4c:	20002070 	.word	0x20002070
    cc50:	20002080 	.word	0x20002080
    cc54:	0000b5f5 	.word	0x0000b5f5
    cc58:	0000bbd9 	.word	0x0000bbd9
    cc5c:	0000cec9 	.word	0x0000cec9

0000cc60 <appAckWaitDataCallback>:

#if defined(PROTOCOL_STAR)
void appAckWaitDataCallback(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    cc60:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc62:	46d6      	mov	lr, sl
    cc64:	464f      	mov	r7, r9
    cc66:	4646      	mov	r6, r8
    cc68:	b5c0      	push	{r6, r7, lr}
    cc6a:	b086      	sub	sp, #24
    cc6c:	4681      	mov	r9, r0
    cc6e:	4688      	mov	r8, r1
    cc70:	0016      	movs	r6, r2
	if (PAN_COORD == role)
    cc72:	4b3b      	ldr	r3, [pc, #236]	; (cd60 <appAckWaitDataCallback+0x100>)
    cc74:	781b      	ldrb	r3, [r3, #0]
    cc76:	2b01      	cmp	r3, #1
    cc78:	d008      	beq.n	cc8c <appAckWaitDataCallback+0x2c>
			{
				miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
			}
		}
	}
	else if (SUCCESS != status)
    cc7a:	2900      	cmp	r1, #0
    cc7c:	d069      	beq.n	cd52 <appAckWaitDataCallback+0xf2>
	{
		uint8_t loopIndex;
		P2PStarDataFrame_t *dataFramePtr = NULL;
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    cc7e:	4b39      	ldr	r3, [pc, #228]	; (cd64 <appAckWaitDataCallback+0x104>)
    cc80:	7a1b      	ldrb	r3, [r3, #8]
    cc82:	2b00      	cmp	r3, #0
    cc84:	d065      	beq.n	cd52 <appAckWaitDataCallback+0xf2>
    cc86:	2400      	movs	r4, #0
		{
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    cc88:	4f37      	ldr	r7, [pc, #220]	; (cd68 <appAckWaitDataCallback+0x108>)
    cc8a:	e04c      	b.n	cd26 <appAckWaitDataCallback+0xc6>
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    cc8c:	4b35      	ldr	r3, [pc, #212]	; (cd64 <appAckWaitDataCallback+0x104>)
    cc8e:	7a1b      	ldrb	r3, [r3, #8]
    cc90:	2b00      	cmp	r3, #0
    cc92:	d05e      	beq.n	cd52 <appAckWaitDataCallback+0xf2>
    cc94:	2400      	movs	r4, #0
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    cc96:	4b34      	ldr	r3, [pc, #208]	; (cd68 <appAckWaitDataCallback+0x108>)
    cc98:	4699      	mov	r9, r3
    cc9a:	e02d      	b.n	ccf8 <appAckWaitDataCallback+0x98>
				if (SUCCESS == status)
    cc9c:	4643      	mov	r3, r8
    cc9e:	2b00      	cmp	r3, #0
    cca0:	d121      	bne.n	cce6 <appAckWaitDataCallback+0x86>
					uint8_t ed_index = Find_Index(dataFramePtr->dataFrame.msg);
    cca2:	4b32      	ldr	r3, [pc, #200]	; (cd6c <appAckWaitDataCallback+0x10c>)
    cca4:	4798      	blx	r3
    cca6:	4682      	mov	sl, r0
					if (0xFF != ed_index)
    cca8:	28ff      	cmp	r0, #255	; 0xff
    ccaa:	d01c      	beq.n	cce6 <appAckWaitDataCallback+0x86>
						dataPtr = MiMem_Alloc(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS);
    ccac:	2001      	movs	r0, #1
    ccae:	4b30      	ldr	r3, [pc, #192]	; (cd70 <appAckWaitDataCallback+0x110>)
    ccb0:	4798      	blx	r3
						if (NULL == dataPtr)
    ccb2:	2800      	cmp	r0, #0
    ccb4:	d04d      	beq.n	cd52 <appAckWaitDataCallback+0xf2>
						dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
    ccb6:	23da      	movs	r3, #218	; 0xda
    ccb8:	7003      	strb	r3, [r0, #0]
						frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, CommandConfCallback);
    ccba:	4b2e      	ldr	r3, [pc, #184]	; (cd74 <appAckWaitDataCallback+0x114>)
    ccbc:	681b      	ldr	r3, [r3, #0]
    ccbe:	4652      	mov	r2, sl
    ccc0:	0112      	lsls	r2, r2, #4
    ccc2:	681b      	ldr	r3, [r3, #0]
    ccc4:	189a      	adds	r2, r3, r2
    ccc6:	1d17      	adds	r7, r2, #4
    ccc8:	4b2b      	ldr	r3, [pc, #172]	; (cd78 <appAckWaitDataCallback+0x118>)
    ccca:	8819      	ldrh	r1, [r3, #0]
    cccc:	4b2b      	ldr	r3, [pc, #172]	; (cd7c <appAckWaitDataCallback+0x11c>)
    ccce:	9305      	str	r3, [sp, #20]
    ccd0:	2301      	movs	r3, #1
    ccd2:	9304      	str	r3, [sp, #16]
    ccd4:	2200      	movs	r2, #0
    ccd6:	9203      	str	r2, [sp, #12]
    ccd8:	9002      	str	r0, [sp, #8]
    ccda:	9301      	str	r3, [sp, #4]
    ccdc:	9300      	str	r3, [sp, #0]
    ccde:	003a      	movs	r2, r7
    cce0:	2000      	movs	r0, #0
    cce2:	4f27      	ldr	r7, [pc, #156]	; (cd80 <appAckWaitDataCallback+0x120>)
    cce4:	47b8      	blx	r7
				MiMem_Free(dataFramePtr);
    cce6:	0028      	movs	r0, r5
    cce8:	4b26      	ldr	r3, [pc, #152]	; (cd84 <appAckWaitDataCallback+0x124>)
    ccea:	4798      	blx	r3
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    ccec:	3401      	adds	r4, #1
    ccee:	b2e4      	uxtb	r4, r4
    ccf0:	4b1c      	ldr	r3, [pc, #112]	; (cd64 <appAckWaitDataCallback+0x104>)
    ccf2:	7a1b      	ldrb	r3, [r3, #8]
    ccf4:	42a3      	cmp	r3, r4
    ccf6:	d92c      	bls.n	cd52 <appAckWaitDataCallback+0xf2>
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    ccf8:	2100      	movs	r1, #0
    ccfa:	481a      	ldr	r0, [pc, #104]	; (cd64 <appAckWaitDataCallback+0x104>)
    ccfc:	47c8      	blx	r9
    ccfe:	1e05      	subs	r5, r0, #0
			if (NULL == dataFramePtr)
    cd00:	d027      	beq.n	cd52 <appAckWaitDataCallback+0xf2>
			if(msgPointer == (uint8_t*)&(dataFramePtr->dataFrame.msg))
    cd02:	3016      	adds	r0, #22
    cd04:	42b0      	cmp	r0, r6
    cd06:	d0c9      	beq.n	cc9c <appAckWaitDataCallback+0x3c>
				miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
    cd08:	0029      	movs	r1, r5
    cd0a:	4816      	ldr	r0, [pc, #88]	; (cd64 <appAckWaitDataCallback+0x104>)
    cd0c:	4b1e      	ldr	r3, [pc, #120]	; (cd88 <appAckWaitDataCallback+0x128>)
    cd0e:	4798      	blx	r3
    cd10:	e7ec      	b.n	ccec <appAckWaitDataCallback+0x8c>
				}
				MiMem_Free((uint8_t *)dataFramePtr);
			}
			else
			{
				miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
    cd12:	0029      	movs	r1, r5
    cd14:	4813      	ldr	r0, [pc, #76]	; (cd64 <appAckWaitDataCallback+0x104>)
    cd16:	4b1c      	ldr	r3, [pc, #112]	; (cd88 <appAckWaitDataCallback+0x128>)
    cd18:	4798      	blx	r3
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    cd1a:	3401      	adds	r4, #1
    cd1c:	b2e4      	uxtb	r4, r4
    cd1e:	4b11      	ldr	r3, [pc, #68]	; (cd64 <appAckWaitDataCallback+0x104>)
    cd20:	7a1b      	ldrb	r3, [r3, #8]
    cd22:	42a3      	cmp	r3, r4
    cd24:	d915      	bls.n	cd52 <appAckWaitDataCallback+0xf2>
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    cd26:	2100      	movs	r1, #0
    cd28:	480e      	ldr	r0, [pc, #56]	; (cd64 <appAckWaitDataCallback+0x104>)
    cd2a:	47b8      	blx	r7
    cd2c:	1e05      	subs	r5, r0, #0
			if (NULL == dataFramePtr)
    cd2e:	d010      	beq.n	cd52 <appAckWaitDataCallback+0xf2>
			if(handle == dataFramePtr->dataFrame.msghandle && msgPointer == (uint8_t*)&(dataFramePtr->dataFrame.msg))
    cd30:	7d00      	ldrb	r0, [r0, #20]
    cd32:	4548      	cmp	r0, r9
    cd34:	d1ed      	bne.n	cd12 <appAckWaitDataCallback+0xb2>
    cd36:	002b      	movs	r3, r5
    cd38:	3316      	adds	r3, #22
    cd3a:	429e      	cmp	r6, r3
    cd3c:	d1e9      	bne.n	cd12 <appAckWaitDataCallback+0xb2>
				DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    cd3e:	686b      	ldr	r3, [r5, #4]
				if (NULL != callback)
    cd40:	2b00      	cmp	r3, #0
    cd42:	d002      	beq.n	cd4a <appAckWaitDataCallback+0xea>
					callback(handle, status, msgPointer);
    cd44:	0032      	movs	r2, r6
    cd46:	4641      	mov	r1, r8
    cd48:	4798      	blx	r3
				MiMem_Free((uint8_t *)dataFramePtr);
    cd4a:	0028      	movs	r0, r5
    cd4c:	4b0d      	ldr	r3, [pc, #52]	; (cd84 <appAckWaitDataCallback+0x124>)
    cd4e:	4798      	blx	r3
			{
    cd50:	e7e3      	b.n	cd1a <appAckWaitDataCallback+0xba>
			}
		}
	}
}
    cd52:	b006      	add	sp, #24
    cd54:	bc1c      	pop	{r2, r3, r4}
    cd56:	4690      	mov	r8, r2
    cd58:	4699      	mov	r9, r3
    cd5a:	46a2      	mov	sl, r4
    cd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd5e:	46c0      	nop			; (mov r8, r8)
    cd60:	20002160 	.word	0x20002160
    cd64:	200020e8 	.word	0x200020e8
    cd68:	0000d041 	.word	0x0000d041
    cd6c:	0000b59d 	.word	0x0000b59d
    cd70:	0000ce0d 	.word	0x0000ce0d
    cd74:	20002070 	.word	0x20002070
    cd78:	20002080 	.word	0x20002080
    cd7c:	0000b5f5 	.word	0x0000b5f5
    cd80:	0000bbd9 	.word	0x0000bbd9
    cd84:	0000cec9 	.word	0x0000cec9
    cd88:	0000d009 	.word	0x0000d009

0000cd8c <MiApp_SubscribeLinkFailureCallback>:
    if (NULL != callback)
    cd8c:	2800      	cmp	r0, #0
    cd8e:	d003      	beq.n	cd98 <MiApp_SubscribeLinkFailureCallback+0xc>
        linkFailureCallback = callback;
    cd90:	4b02      	ldr	r3, [pc, #8]	; (cd9c <MiApp_SubscribeLinkFailureCallback+0x10>)
    cd92:	6018      	str	r0, [r3, #0]
        return true;
    cd94:	2001      	movs	r0, #1
}
    cd96:	4770      	bx	lr
    return false;
    cd98:	2000      	movs	r0, #0
    cd9a:	e7fc      	b.n	cd96 <MiApp_SubscribeLinkFailureCallback+0xa>
    cd9c:	20002174 	.word	0x20002174

0000cda0 <MiApp_ResetToFactoryNew>:
* Returns:
*      A boolean to indicate the operation is success or not
*
*****************************************************************************************/
bool MiApp_ResetToFactoryNew(void)
{
    cda0:	b510      	push	{r4, lr}
    if (PDS_DeleteAll(true))
    cda2:	2001      	movs	r0, #1
    cda4:	4b07      	ldr	r3, [pc, #28]	; (cdc4 <MiApp_ResetToFactoryNew+0x24>)
    cda6:	4798      	blx	r3
    cda8:	2800      	cmp	r0, #0
    cdaa:	d101      	bne.n	cdb0 <MiApp_ResetToFactoryNew+0x10>
    }
    else
    {
        return false;
    }
}
    cdac:	2000      	movs	r0, #0
    cdae:	bd10      	pop	{r4, pc}
  __ASM volatile ("dsb 0xF":::"memory");
    cdb0:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    cdb4:	4a04      	ldr	r2, [pc, #16]	; (cdc8 <MiApp_ResetToFactoryNew+0x28>)
    cdb6:	4b05      	ldr	r3, [pc, #20]	; (cdcc <MiApp_ResetToFactoryNew+0x2c>)
    cdb8:	60da      	str	r2, [r3, #12]
    cdba:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    cdbe:	46c0      	nop			; (mov r8, r8)
    cdc0:	e7fd      	b.n	cdbe <MiApp_ResetToFactoryNew+0x1e>
    cdc2:	46c0      	nop			; (mov r8, r8)
    cdc4:	00009f55 	.word	0x00009f55
    cdc8:	05fa0004 	.word	0x05fa0004
    cdcc:	e000ed00 	.word	0xe000ed00

0000cdd0 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    cdd0:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    cdd2:	4a0b      	ldr	r2, [pc, #44]	; (ce00 <MiMem_Init+0x30>)
    cdd4:	1e50      	subs	r0, r2, #1
    cdd6:	2403      	movs	r4, #3
    cdd8:	43a0      	bics	r0, r4
    cdda:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    cddc:	4b09      	ldr	r3, [pc, #36]	; (ce04 <MiMem_Init+0x34>)
    cdde:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    cde0:	4253      	negs	r3, r2
    cde2:	43a3      	bics	r3, r4
    cde4:	24c0      	movs	r4, #192	; 0xc0
    cde6:	0164      	lsls	r4, r4, #5
    cde8:	46a4      	mov	ip, r4
    cdea:	4462      	add	r2, ip
    cdec:	189b      	adds	r3, r3, r2
    cdee:	4a06      	ldr	r2, [pc, #24]	; (ce08 <MiMem_Init+0x38>)
    cdf0:	6013      	str	r3, [r2, #0]
    cdf2:	60c3      	str	r3, [r0, #12]
	base->free = true;
    cdf4:	2301      	movs	r3, #1
    cdf6:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    cdf8:	2300      	movs	r3, #0
    cdfa:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    cdfc:	6083      	str	r3, [r0, #8]
}
    cdfe:	bd10      	pop	{r4, pc}
    ce00:	20000444 	.word	0x20000444
    ce04:	20000440 	.word	0x20000440
    ce08:	20001c44 	.word	0x20001c44

0000ce0c <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    ce0c:	b570      	push	{r4, r5, r6, lr}
    ce0e:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    ce10:	4b29      	ldr	r3, [pc, #164]	; (ceb8 <MiMem_Alloc+0xac>)
    ce12:	681b      	ldr	r3, [r3, #0]
    ce14:	2b00      	cmp	r3, #0
    ce16:	d012      	beq.n	ce3e <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    ce18:	2d00      	cmp	r5, #0
    ce1a:	d047      	beq.n	ceac <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    ce1c:	0029      	movs	r1, r5
    ce1e:	310f      	adds	r1, #15
    ce20:	2303      	movs	r3, #3
    ce22:	4399      	bics	r1, r3
    ce24:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    ce26:	4b25      	ldr	r3, [pc, #148]	; (cebc <MiMem_Alloc+0xb0>)
    ce28:	6818      	ldr	r0, [r3, #0]
    ce2a:	4281      	cmp	r1, r0
    ce2c:	d840      	bhi.n	ceb0 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    ce2e:	4b22      	ldr	r3, [pc, #136]	; (ceb8 <MiMem_Alloc+0xac>)
    ce30:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    ce32:	2b00      	cmp	r3, #0
    ce34:	d03e      	beq.n	ceb4 <MiMem_Alloc+0xa8>
    ce36:	2600      	movs	r6, #0
    ce38:	2401      	movs	r4, #1
    ce3a:	4264      	negs	r4, r4
    ce3c:	e005      	b.n	ce4a <MiMem_Alloc+0x3e>
		MiMem_Init();
    ce3e:	4b20      	ldr	r3, [pc, #128]	; (cec0 <MiMem_Alloc+0xb4>)
    ce40:	4798      	blx	r3
    ce42:	e7e9      	b.n	ce18 <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    ce44:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    ce46:	2b00      	cmp	r3, #0
    ce48:	d00a      	beq.n	ce60 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    ce4a:	7b1a      	ldrb	r2, [r3, #12]
    ce4c:	2a00      	cmp	r2, #0
    ce4e:	d0f9      	beq.n	ce44 <MiMem_Alloc+0x38>
    ce50:	689a      	ldr	r2, [r3, #8]
    ce52:	4291      	cmp	r1, r2
    ce54:	d8f6      	bhi.n	ce44 <MiMem_Alloc+0x38>
    ce56:	42a2      	cmp	r2, r4
    ce58:	d2f4      	bcs.n	ce44 <MiMem_Alloc+0x38>
    ce5a:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    ce5c:	0014      	movs	r4, r2
    ce5e:	e7f1      	b.n	ce44 <MiMem_Alloc+0x38>
    ce60:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    ce62:	2e00      	cmp	r6, #0
    ce64:	d012      	beq.n	ce8c <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    ce66:	68b3      	ldr	r3, [r6, #8]
    ce68:	1a5b      	subs	r3, r3, r1
    ce6a:	2b14      	cmp	r3, #20
    ce6c:	d810      	bhi.n	ce90 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    ce6e:	2300      	movs	r3, #0
    ce70:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    ce72:	68b3      	ldr	r3, [r6, #8]
    ce74:	1ac0      	subs	r0, r0, r3
    ce76:	4b11      	ldr	r3, [pc, #68]	; (cebc <MiMem_Alloc+0xb0>)
    ce78:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    ce7a:	0034      	movs	r4, r6
    ce7c:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    ce7e:	2c00      	cmp	r4, #0
    ce80:	d004      	beq.n	ce8c <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    ce82:	002a      	movs	r2, r5
    ce84:	2100      	movs	r1, #0
    ce86:	0020      	movs	r0, r4
    ce88:	4b0e      	ldr	r3, [pc, #56]	; (cec4 <MiMem_Alloc+0xb8>)
    ce8a:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    ce8c:	0020      	movs	r0, r4
    ce8e:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    ce90:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    ce92:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    ce94:	6833      	ldr	r3, [r6, #0]
    ce96:	2b00      	cmp	r3, #0
    ce98:	d000      	beq.n	ce9c <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    ce9a:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    ce9c:	6833      	ldr	r3, [r6, #0]
    ce9e:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    cea0:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    cea2:	2301      	movs	r3, #1
    cea4:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    cea6:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    cea8:	60b1      	str	r1, [r6, #8]
    ceaa:	e7e0      	b.n	ce6e <MiMem_Alloc+0x62>
    ceac:	2400      	movs	r4, #0
    ceae:	e7ed      	b.n	ce8c <MiMem_Alloc+0x80>
    ceb0:	2400      	movs	r4, #0
    ceb2:	e7eb      	b.n	ce8c <MiMem_Alloc+0x80>
			while (blockPtr)
    ceb4:	2400      	movs	r4, #0
    ceb6:	e7e9      	b.n	ce8c <MiMem_Alloc+0x80>
    ceb8:	20000440 	.word	0x20000440
    cebc:	20001c44 	.word	0x20001c44
    cec0:	0000cdd1 	.word	0x0000cdd1
    cec4:	00010aa9 	.word	0x00010aa9

0000cec8 <MiMem_Free>:
	Block_t* blockPtr = base;
    cec8:	4b1c      	ldr	r3, [pc, #112]	; (cf3c <MiMem_Free+0x74>)
    ceca:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    cecc:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    cece:	2b00      	cmp	r3, #0
    ced0:	d030      	beq.n	cf34 <MiMem_Free+0x6c>
    ced2:	4283      	cmp	r3, r0
    ced4:	d02f      	beq.n	cf36 <MiMem_Free+0x6e>
    ced6:	681b      	ldr	r3, [r3, #0]
    ced8:	2b00      	cmp	r3, #0
    ceda:	d02b      	beq.n	cf34 <MiMem_Free+0x6c>
    cedc:	4298      	cmp	r0, r3
    cede:	d1fa      	bne.n	ced6 <MiMem_Free+0xe>
		blockPtr->free = true;
    cee0:	2301      	movs	r3, #1
    cee2:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    cee4:	6881      	ldr	r1, [r0, #8]
    cee6:	4a16      	ldr	r2, [pc, #88]	; (cf40 <MiMem_Free+0x78>)
    cee8:	6813      	ldr	r3, [r2, #0]
    ceea:	185b      	adds	r3, r3, r1
    ceec:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    ceee:	6843      	ldr	r3, [r0, #4]
    cef0:	2b00      	cmp	r3, #0
    cef2:	d00f      	beq.n	cf14 <MiMem_Free+0x4c>
    cef4:	7b1a      	ldrb	r2, [r3, #12]
    cef6:	2a00      	cmp	r2, #0
    cef8:	d00c      	beq.n	cf14 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    cefa:	689a      	ldr	r2, [r3, #8]
    cefc:	4694      	mov	ip, r2
    cefe:	4461      	add	r1, ip
    cf00:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    cf02:	6803      	ldr	r3, [r0, #0]
    cf04:	2b00      	cmp	r3, #0
    cf06:	d001      	beq.n	cf0c <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    cf08:	6842      	ldr	r2, [r0, #4]
    cf0a:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    cf0c:	6843      	ldr	r3, [r0, #4]
    cf0e:	6802      	ldr	r2, [r0, #0]
    cf10:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    cf12:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    cf14:	6803      	ldr	r3, [r0, #0]
    cf16:	2b00      	cmp	r3, #0
    cf18:	d00c      	beq.n	cf34 <MiMem_Free+0x6c>
    cf1a:	7b1a      	ldrb	r2, [r3, #12]
    cf1c:	2a00      	cmp	r2, #0
    cf1e:	d009      	beq.n	cf34 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    cf20:	6882      	ldr	r2, [r0, #8]
    cf22:	6899      	ldr	r1, [r3, #8]
    cf24:	468c      	mov	ip, r1
    cf26:	4462      	add	r2, ip
    cf28:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    cf2a:	681b      	ldr	r3, [r3, #0]
    cf2c:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    cf2e:	2b00      	cmp	r3, #0
    cf30:	d000      	beq.n	cf34 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    cf32:	6058      	str	r0, [r3, #4]
}
    cf34:	4770      	bx	lr
	Block_t* blockPtr = base;
    cf36:	0018      	movs	r0, r3
    cf38:	e7d2      	b.n	cee0 <MiMem_Free+0x18>
    cf3a:	46c0      	nop			; (mov r8, r8)
    cf3c:	20000440 	.word	0x20000440
    cf40:	20001c44 	.word	0x20001c44

0000cf44 <MiMem_PercentageOfFreeBuffers>:
}

uint8_t MiMem_PercentageOfFreeBuffers(void)
{
    cf44:	b510      	push	{r4, lr}
	return (totalFreeBytesRemaining * 100) / HEAP_SIZE;;
    cf46:	4b05      	ldr	r3, [pc, #20]	; (cf5c <MiMem_PercentageOfFreeBuffers+0x18>)
    cf48:	6818      	ldr	r0, [r3, #0]
    cf4a:	2364      	movs	r3, #100	; 0x64
    cf4c:	4358      	muls	r0, r3
    cf4e:	21c0      	movs	r1, #192	; 0xc0
    cf50:	0149      	lsls	r1, r1, #5
    cf52:	4b03      	ldr	r3, [pc, #12]	; (cf60 <MiMem_PercentageOfFreeBuffers+0x1c>)
    cf54:	4798      	blx	r3
    cf56:	b2c0      	uxtb	r0, r0
}
    cf58:	bd10      	pop	{r4, pc}
    cf5a:	46c0      	nop			; (mov r8, r8)
    cf5c:	20001c44 	.word	0x20001c44
    cf60:	0000faad 	.word	0x0000faad

0000cf64 <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    cf64:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf66:	46c6      	mov	lr, r8
    cf68:	b500      	push	{lr}
    cf6a:	0007      	movs	r7, r0
    cf6c:	4688      	mov	r8, r1
    cf6e:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    cf70:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    cf72:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    cf76:	2200      	movs	r2, #0
    cf78:	4b1f      	ldr	r3, [pc, #124]	; (cff8 <miQueueReadOrRemove+0x94>)
    cf7a:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    cf7c:	7a03      	ldrb	r3, [r0, #8]
    cf7e:	2b00      	cmp	r3, #0
    cf80:	d037      	beq.n	cff2 <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    cf82:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    cf84:	2d00      	cmp	r5, #0
    cf86:	d019      	beq.n	cfbc <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    cf88:	2c00      	cmp	r4, #0
    cf8a:	d00c      	beq.n	cfa6 <miQueueReadOrRemove+0x42>
    cf8c:	0026      	movs	r6, r4
    cf8e:	e000      	b.n	cf92 <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    cf90:	001c      	movs	r4, r3
				match = search->criteria_func(
    cf92:	6869      	ldr	r1, [r5, #4]
    cf94:	6860      	ldr	r0, [r4, #4]
    cf96:	682b      	ldr	r3, [r5, #0]
    cf98:	4798      	blx	r3
				if (match) {
    cf9a:	2800      	cmp	r0, #0
    cf9c:	d10f      	bne.n	cfbe <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    cf9e:	6823      	ldr	r3, [r4, #0]
    cfa0:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    cfa2:	2b00      	cmp	r3, #0
    cfa4:	d1f4      	bne.n	cf90 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    cfa6:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    cfa8:	2201      	movs	r2, #1
    cfaa:	4b13      	ldr	r3, [pc, #76]	; (cff8 <miQueueReadOrRemove+0x94>)
    cfac:	701a      	strb	r2, [r3, #0]
    cfae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    cfb2:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    cfb4:	0020      	movs	r0, r4
    cfb6:	bc04      	pop	{r2}
    cfb8:	4690      	mov	r8, r2
    cfba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    cfbc:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    cfbe:	2c00      	cmp	r4, #0
    cfc0:	d0f2      	beq.n	cfa8 <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    cfc2:	4643      	mov	r3, r8
    cfc4:	2b00      	cmp	r3, #0
    cfc6:	d1ef      	bne.n	cfa8 <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    cfc8:	683b      	ldr	r3, [r7, #0]
    cfca:	429c      	cmp	r4, r3
    cfcc:	d00c      	beq.n	cfe8 <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    cfce:	6823      	ldr	r3, [r4, #0]
    cfd0:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    cfd2:	687b      	ldr	r3, [r7, #4]
    cfd4:	429c      	cmp	r4, r3
    cfd6:	d00a      	beq.n	cfee <miQueueReadOrRemove+0x8a>
				q->size--;
    cfd8:	7a3b      	ldrb	r3, [r7, #8]
    cfda:	3b01      	subs	r3, #1
    cfdc:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    cfde:	683b      	ldr	r3, [r7, #0]
    cfe0:	2b00      	cmp	r3, #0
    cfe2:	d1e1      	bne.n	cfa8 <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    cfe4:	607b      	str	r3, [r7, #4]
    cfe6:	e7df      	b.n	cfa8 <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    cfe8:	6823      	ldr	r3, [r4, #0]
    cfea:	603b      	str	r3, [r7, #0]
    cfec:	e7f1      	b.n	cfd2 <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    cfee:	607e      	str	r6, [r7, #4]
    cff0:	e7f2      	b.n	cfd8 <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    cff2:	2400      	movs	r4, #0
    cff4:	e7d8      	b.n	cfa8 <miQueueReadOrRemove+0x44>
    cff6:	46c0      	nop			; (mov r8, r8)
    cff8:	20000008 	.word	0x20000008

0000cffc <miQueueInit>:
	q->head = NULL;
    cffc:	2300      	movs	r3, #0
    cffe:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    d000:	6043      	str	r3, [r0, #4]
	q->size = 0;
    d002:	7203      	strb	r3, [r0, #8]
}
    d004:	4770      	bx	lr
    d006:	Address 0x0000d006 is out of bounds.


0000d008 <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    d008:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d00a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d00e:	2200      	movs	r2, #0
    d010:	4b0a      	ldr	r3, [pc, #40]	; (d03c <miQueueAppend+0x34>)
    d012:	701a      	strb	r2, [r3, #0]
	if (q->size == 0) {
    d014:	7a03      	ldrb	r3, [r0, #8]
    d016:	2b00      	cmp	r3, #0
    d018:	d00e      	beq.n	d038 <miQueueAppend+0x30>
		q->tail->nextItem = bufPtr;
    d01a:	6843      	ldr	r3, [r0, #4]
    d01c:	6019      	str	r1, [r3, #0]
	q->tail = bufPtr;
    d01e:	6041      	str	r1, [r0, #4]
	bufPtr->nextItem = NULL;
    d020:	2300      	movs	r3, #0
    d022:	600b      	str	r3, [r1, #0]
	q->size++;
    d024:	7a03      	ldrb	r3, [r0, #8]
    d026:	3301      	adds	r3, #1
    d028:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    d02a:	2201      	movs	r2, #1
    d02c:	4b03      	ldr	r3, [pc, #12]	; (d03c <miQueueAppend+0x34>)
    d02e:	701a      	strb	r2, [r3, #0]
    d030:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d034:	b662      	cpsie	i
} /* miQueueAppend */
    d036:	4770      	bx	lr
		q->head = bufPtr;
    d038:	6001      	str	r1, [r0, #0]
    d03a:	e7f0      	b.n	d01e <miQueueAppend+0x16>
    d03c:	20000008 	.word	0x20000008

0000d040 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    d040:	b510      	push	{r4, lr}
    d042:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    d044:	2100      	movs	r1, #0
    d046:	4b01      	ldr	r3, [pc, #4]	; (d04c <miQueueRemove+0xc>)
    d048:	4798      	blx	r3
}
    d04a:	bd10      	pop	{r4, pc}
    d04c:	0000cf65 	.word	0x0000cf65

0000d050 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    d050:	b530      	push	{r4, r5, lr}
	if (timers) {
    d052:	4b14      	ldr	r3, [pc, #80]	; (d0a4 <placeTimer+0x54>)
    d054:	681d      	ldr	r5, [r3, #0]
    d056:	2d00      	cmp	r5, #0
    d058:	d01c      	beq.n	d094 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    d05a:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    d05c:	6869      	ldr	r1, [r5, #4]
    d05e:	428a      	cmp	r2, r1
    d060:	d309      	bcc.n	d076 <placeTimer+0x26>
    d062:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    d064:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    d066:	6823      	ldr	r3, [r4, #0]
    d068:	2b00      	cmp	r3, #0
    d06a:	d008      	beq.n	d07e <placeTimer+0x2e>
			if (timeout < t->timeout) {
    d06c:	6859      	ldr	r1, [r3, #4]
    d06e:	4291      	cmp	r1, r2
    d070:	d803      	bhi.n	d07a <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    d072:	001c      	movs	r4, r3
    d074:	e7f6      	b.n	d064 <placeTimer+0x14>
    d076:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    d078:	2400      	movs	r4, #0
				t->timeout -= timeout;
    d07a:	1a89      	subs	r1, r1, r2
    d07c:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    d07e:	6042      	str	r2, [r0, #4]

		if (prev) {
    d080:	2c00      	cmp	r4, #0
    d082:	d003      	beq.n	d08c <placeTimer+0x3c>
			timer->next = prev->next;
    d084:	6823      	ldr	r3, [r4, #0]
    d086:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    d088:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    d08a:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    d08c:	6005      	str	r5, [r0, #0]
			timers = timer;
    d08e:	4b05      	ldr	r3, [pc, #20]	; (d0a4 <placeTimer+0x54>)
    d090:	6018      	str	r0, [r3, #0]
    d092:	e7fa      	b.n	d08a <placeTimer+0x3a>
		timer->next = NULL;
    d094:	2300      	movs	r3, #0
    d096:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    d098:	6883      	ldr	r3, [r0, #8]
    d09a:	6043      	str	r3, [r0, #4]
		timers = timer;
    d09c:	4b01      	ldr	r3, [pc, #4]	; (d0a4 <placeTimer+0x54>)
    d09e:	6018      	str	r0, [r3, #0]
}
    d0a0:	e7f3      	b.n	d08a <placeTimer+0x3a>
    d0a2:	46c0      	nop			; (mov r8, r8)
    d0a4:	20001c48 	.word	0x20001c48

0000d0a8 <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

static void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    d0a8:	4a06      	ldr	r2, [pc, #24]	; (d0c4 <SYS_HwOverflow_Cb+0x1c>)
    d0aa:	7813      	ldrb	r3, [r2, #0]
    d0ac:	3301      	adds	r3, #1
    d0ae:	b2db      	uxtb	r3, r3
    d0b0:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    d0b2:	7813      	ldrb	r3, [r2, #0]
    d0b4:	2b00      	cmp	r3, #0
    d0b6:	d104      	bne.n	d0c2 <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    d0b8:	4a03      	ldr	r2, [pc, #12]	; (d0c8 <SYS_HwOverflow_Cb+0x20>)
    d0ba:	7813      	ldrb	r3, [r2, #0]
    d0bc:	3301      	adds	r3, #1
    d0be:	b2db      	uxtb	r3, r3
    d0c0:	7013      	strb	r3, [r2, #0]
	}
}
    d0c2:	4770      	bx	lr
    d0c4:	20002190 	.word	0x20002190
    d0c8:	20002191 	.word	0x20002191

0000d0cc <SYS_HwExpiry_Cb>:
{
    d0cc:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    d0ce:	4a04      	ldr	r2, [pc, #16]	; (d0e0 <SYS_HwExpiry_Cb+0x14>)
    d0d0:	6813      	ldr	r3, [r2, #0]
    d0d2:	3301      	adds	r3, #1
    d0d4:	6013      	str	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    d0d6:	4803      	ldr	r0, [pc, #12]	; (d0e4 <SYS_HwExpiry_Cb+0x18>)
    d0d8:	4b03      	ldr	r3, [pc, #12]	; (d0e8 <SYS_HwExpiry_Cb+0x1c>)
    d0da:	4798      	blx	r3
}
    d0dc:	bd10      	pop	{r4, pc}
    d0de:	46c0      	nop			; (mov r8, r8)
    d0e0:	2000218c 	.word	0x2000218c
    d0e4:	00002710 	.word	0x00002710
    d0e8:	0000f9a5 	.word	0x0000f9a5

0000d0ec <SYS_TimerInit>:
{
    d0ec:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    d0ee:	2400      	movs	r4, #0
    d0f0:	4b09      	ldr	r3, [pc, #36]	; (d118 <SYS_TimerInit+0x2c>)
    d0f2:	601c      	str	r4, [r3, #0]
    timerExtension1 = 0;
    d0f4:	4b09      	ldr	r3, [pc, #36]	; (d11c <SYS_TimerInit+0x30>)
    d0f6:	701c      	strb	r4, [r3, #0]
    timerExtension2 = 0;
    d0f8:	4b09      	ldr	r3, [pc, #36]	; (d120 <SYS_TimerInit+0x34>)
    d0fa:	701c      	strb	r4, [r3, #0]
    set_common_tc_overflow_callback(SYS_HwOverflow_Cb);
    d0fc:	4809      	ldr	r0, [pc, #36]	; (d124 <SYS_TimerInit+0x38>)
    d0fe:	4b0a      	ldr	r3, [pc, #40]	; (d128 <SYS_TimerInit+0x3c>)
    d100:	4798      	blx	r3
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    d102:	480a      	ldr	r0, [pc, #40]	; (d12c <SYS_TimerInit+0x40>)
    d104:	4b0a      	ldr	r3, [pc, #40]	; (d130 <SYS_TimerInit+0x44>)
    d106:	4798      	blx	r3
	common_tc_init();
    d108:	4b0a      	ldr	r3, [pc, #40]	; (d134 <SYS_TimerInit+0x48>)
    d10a:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    d10c:	480a      	ldr	r0, [pc, #40]	; (d138 <SYS_TimerInit+0x4c>)
    d10e:	4b0b      	ldr	r3, [pc, #44]	; (d13c <SYS_TimerInit+0x50>)
    d110:	4798      	blx	r3
	timers = NULL;
    d112:	4b0b      	ldr	r3, [pc, #44]	; (d140 <SYS_TimerInit+0x54>)
    d114:	601c      	str	r4, [r3, #0]
}
    d116:	bd10      	pop	{r4, pc}
    d118:	2000218c 	.word	0x2000218c
    d11c:	20002190 	.word	0x20002190
    d120:	20002191 	.word	0x20002191
    d124:	0000d0a9 	.word	0x0000d0a9
    d128:	0000fa95 	.word	0x0000fa95
    d12c:	0000d0cd 	.word	0x0000d0cd
    d130:	0000faa1 	.word	0x0000faa1
    d134:	0000fa11 	.word	0x0000fa11
    d138:	00002710 	.word	0x00002710
    d13c:	0000f9a5 	.word	0x0000f9a5
    d140:	20001c48 	.word	0x20001c48

0000d144 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d144:	4b0e      	ldr	r3, [pc, #56]	; (d180 <SYS_TimerStop+0x3c>)
    d146:	681a      	ldr	r2, [r3, #0]
    d148:	2a00      	cmp	r2, #0
    d14a:	d014      	beq.n	d176 <SYS_TimerStop+0x32>
		if (t == timer) {
    d14c:	4282      	cmp	r2, r0
    d14e:	d013      	beq.n	d178 <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d150:	6813      	ldr	r3, [r2, #0]
    d152:	2b00      	cmp	r3, #0
    d154:	d00f      	beq.n	d176 <SYS_TimerStop+0x32>
		if (t == timer) {
    d156:	4298      	cmp	r0, r3
    d158:	d001      	beq.n	d15e <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d15a:	001a      	movs	r2, r3
    d15c:	e7f8      	b.n	d150 <SYS_TimerStop+0xc>
			if (prev) {
    d15e:	2a00      	cmp	r2, #0
    d160:	d00a      	beq.n	d178 <SYS_TimerStop+0x34>
				prev->next = t->next;
    d162:	6803      	ldr	r3, [r0, #0]
    d164:	6013      	str	r3, [r2, #0]
			if (t->next) {
    d166:	6803      	ldr	r3, [r0, #0]
    d168:	2b00      	cmp	r3, #0
    d16a:	d004      	beq.n	d176 <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    d16c:	6842      	ldr	r2, [r0, #4]
    d16e:	6859      	ldr	r1, [r3, #4]
    d170:	468c      	mov	ip, r1
    d172:	4462      	add	r2, ip
    d174:	605a      	str	r2, [r3, #4]
}
    d176:	4770      	bx	lr
				timers = t->next;
    d178:	4b01      	ldr	r3, [pc, #4]	; (d180 <SYS_TimerStop+0x3c>)
    d17a:	6802      	ldr	r2, [r0, #0]
    d17c:	601a      	str	r2, [r3, #0]
    d17e:	e7f2      	b.n	d166 <SYS_TimerStop+0x22>
    d180:	20001c48 	.word	0x20001c48

0000d184 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d184:	4b09      	ldr	r3, [pc, #36]	; (d1ac <SYS_TimerStarted+0x28>)
    d186:	681b      	ldr	r3, [r3, #0]
    d188:	2b00      	cmp	r3, #0
    d18a:	d00a      	beq.n	d1a2 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    d18c:	4283      	cmp	r3, r0
    d18e:	d00a      	beq.n	d1a6 <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d190:	681b      	ldr	r3, [r3, #0]
    d192:	2b00      	cmp	r3, #0
    d194:	d003      	beq.n	d19e <SYS_TimerStarted+0x1a>
		if (t == timer) {
    d196:	4298      	cmp	r0, r3
    d198:	d1fa      	bne.n	d190 <SYS_TimerStarted+0xc>
			return true;
    d19a:	2001      	movs	r0, #1
    d19c:	e000      	b.n	d1a0 <SYS_TimerStarted+0x1c>
	return false;
    d19e:	2000      	movs	r0, #0
}
    d1a0:	4770      	bx	lr
	return false;
    d1a2:	2000      	movs	r0, #0
    d1a4:	e7fc      	b.n	d1a0 <SYS_TimerStarted+0x1c>
			return true;
    d1a6:	2001      	movs	r0, #1
    d1a8:	e7fa      	b.n	d1a0 <SYS_TimerStarted+0x1c>
    d1aa:	46c0      	nop			; (mov r8, r8)
    d1ac:	20001c48 	.word	0x20001c48

0000d1b0 <SYS_TimerStart>:
{
    d1b0:	b510      	push	{r4, lr}
    d1b2:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    d1b4:	4b04      	ldr	r3, [pc, #16]	; (d1c8 <SYS_TimerStart+0x18>)
    d1b6:	4798      	blx	r3
    d1b8:	2800      	cmp	r0, #0
    d1ba:	d000      	beq.n	d1be <SYS_TimerStart+0xe>
}
    d1bc:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    d1be:	0020      	movs	r0, r4
    d1c0:	4b02      	ldr	r3, [pc, #8]	; (d1cc <SYS_TimerStart+0x1c>)
    d1c2:	4798      	blx	r3
}
    d1c4:	e7fa      	b.n	d1bc <SYS_TimerStart+0xc>
    d1c6:	46c0      	nop			; (mov r8, r8)
    d1c8:	0000d185 	.word	0x0000d185
    d1cc:	0000d051 	.word	0x0000d051

0000d1d0 <SYS_TimerTaskHandler>:
{
    d1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1d2:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    d1d4:	4b1d      	ldr	r3, [pc, #116]	; (d24c <SYS_TimerTaskHandler+0x7c>)
    d1d6:	681b      	ldr	r3, [r3, #0]
    d1d8:	2b00      	cmp	r3, #0
    d1da:	d034      	beq.n	d246 <SYS_TimerTaskHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d1dc:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d1e0:	4253      	negs	r3, r2
    d1e2:	4153      	adcs	r3, r2
    d1e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d1e6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d1e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d1ec:	2100      	movs	r1, #0
    d1ee:	4b18      	ldr	r3, [pc, #96]	; (d250 <SYS_TimerTaskHandler+0x80>)
    d1f0:	7019      	strb	r1, [r3, #0]
	return flags;
    d1f2:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    d1f4:	4a15      	ldr	r2, [pc, #84]	; (d24c <SYS_TimerTaskHandler+0x7c>)
    d1f6:	6813      	ldr	r3, [r2, #0]
	SysTimerIrqCount = 0;
    d1f8:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    d1fa:	2800      	cmp	r0, #0
    d1fc:	d005      	beq.n	d20a <SYS_TimerTaskHandler+0x3a>
		cpu_irq_enable();
    d1fe:	3101      	adds	r1, #1
    d200:	4a13      	ldr	r2, [pc, #76]	; (d250 <SYS_TimerTaskHandler+0x80>)
    d202:	7011      	strb	r1, [r2, #0]
    d204:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d208:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    d20a:	009d      	lsls	r5, r3, #2
    d20c:	18ed      	adds	r5, r5, r3
    d20e:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    d210:	4e10      	ldr	r6, [pc, #64]	; (d254 <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    d212:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    d214:	e005      	b.n	d222 <SYS_TimerTaskHandler+0x52>
			placeTimer(timer);
    d216:	0020      	movs	r0, r4
    d218:	4b0f      	ldr	r3, [pc, #60]	; (d258 <SYS_TimerTaskHandler+0x88>)
    d21a:	4798      	blx	r3
    d21c:	e00d      	b.n	d23a <SYS_TimerTaskHandler+0x6a>
			timer->handler(timer);
    d21e:	0020      	movs	r0, r4
    d220:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    d222:	6834      	ldr	r4, [r6, #0]
    d224:	2c00      	cmp	r4, #0
    d226:	d00e      	beq.n	d246 <SYS_TimerTaskHandler+0x76>
    d228:	6863      	ldr	r3, [r4, #4]
    d22a:	429d      	cmp	r5, r3
    d22c:	d309      	bcc.n	d242 <SYS_TimerTaskHandler+0x72>
		elapsed -= timers->timeout;
    d22e:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    d230:	6823      	ldr	r3, [r4, #0]
    d232:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    d234:	7b23      	ldrb	r3, [r4, #12]
    d236:	2b01      	cmp	r3, #1
    d238:	d0ed      	beq.n	d216 <SYS_TimerTaskHandler+0x46>
		if (timer->handler) {
    d23a:	6923      	ldr	r3, [r4, #16]
    d23c:	2b00      	cmp	r3, #0
    d23e:	d1ee      	bne.n	d21e <SYS_TimerTaskHandler+0x4e>
    d240:	e7ef      	b.n	d222 <SYS_TimerTaskHandler+0x52>
		timers->timeout -= elapsed;
    d242:	1b5d      	subs	r5, r3, r5
    d244:	6065      	str	r5, [r4, #4]
}
    d246:	b003      	add	sp, #12
    d248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d24a:	46c0      	nop			; (mov r8, r8)
    d24c:	2000218c 	.word	0x2000218c
    d250:	20000008 	.word	0x20000008
    d254:	20001c48 	.word	0x20001c48
    d258:	0000d051 	.word	0x0000d051

0000d25c <MiWi_TickGet>:
{
    d25c:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    d25e:	4e0f      	ldr	r6, [pc, #60]	; (d29c <MiWi_TickGet+0x40>)
    d260:	7835      	ldrb	r5, [r6, #0]
    d262:	b2ed      	uxtb	r5, r5
	currentTime.word.w0 = common_tc_read_count();
    d264:	4b0e      	ldr	r3, [pc, #56]	; (d2a0 <MiWi_TickGet+0x44>)
    d266:	4798      	blx	r3
    d268:	0004      	movs	r4, r0
	nop();
    d26a:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    d26c:	7833      	ldrb	r3, [r6, #0]
    d26e:	b2db      	uxtb	r3, r3
    d270:	429d      	cmp	r5, r3
    d272:	d004      	beq.n	d27e <MiWi_TickGet+0x22>
		currentTime.word.w0 = common_tc_read_count();
    d274:	4b0a      	ldr	r3, [pc, #40]	; (d2a0 <MiWi_TickGet+0x44>)
    d276:	4798      	blx	r3
    d278:	0c24      	lsrs	r4, r4, #16
    d27a:	0424      	lsls	r4, r4, #16
    d27c:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    d27e:	4b07      	ldr	r3, [pc, #28]	; (d29c <MiWi_TickGet+0x40>)
    d280:	781b      	ldrb	r3, [r3, #0]
    d282:	041b      	lsls	r3, r3, #16
    d284:	4807      	ldr	r0, [pc, #28]	; (d2a4 <MiWi_TickGet+0x48>)
    d286:	4004      	ands	r4, r0
    d288:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    d28a:	4b07      	ldr	r3, [pc, #28]	; (d2a8 <MiWi_TickGet+0x4c>)
    d28c:	781b      	ldrb	r3, [r3, #0]
    d28e:	061b      	lsls	r3, r3, #24
    d290:	0224      	lsls	r4, r4, #8
    d292:	0a24      	lsrs	r4, r4, #8
    d294:	431c      	orrs	r4, r3
}
    d296:	0020      	movs	r0, r4
    d298:	bd70      	pop	{r4, r5, r6, pc}
    d29a:	46c0      	nop			; (mov r8, r8)
    d29c:	20002190 	.word	0x20002190
    d2a0:	0000f959 	.word	0x0000f959
    d2a4:	ff00ffff 	.word	0xff00ffff
    d2a8:	20002191 	.word	0x20002191

0000d2ac <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    d2ac:	4288      	cmp	r0, r1
    d2ae:	d802      	bhi.n	d2b6 <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    d2b0:	3801      	subs	r0, #1
    d2b2:	1a40      	subs	r0, r0, r1
}
    d2b4:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    d2b6:	1a40      	subs	r0, r0, r1
    d2b8:	e7fc      	b.n	d2b4 <MiWi_TickGetDiff+0x8>
    d2ba:	Address 0x0000d2ba is out of bounds.


0000d2bc <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    d2bc:	b510      	push	{r4, lr}
	tmr_cca_callback();
    d2be:	4b01      	ldr	r3, [pc, #4]	; (d2c4 <tc_cca_callback+0x8>)
    d2c0:	4798      	blx	r3
}
    d2c2:	bd10      	pop	{r4, pc}
    d2c4:	0000fa79 	.word	0x0000fa79

0000d2c8 <tc_ovf_callback>:
{
    d2c8:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    d2ca:	4b01      	ldr	r3, [pc, #4]	; (d2d0 <tc_ovf_callback+0x8>)
    d2cc:	4798      	blx	r3
}
    d2ce:	bd10      	pop	{r4, pc}
    d2d0:	0000fa31 	.word	0x0000fa31

0000d2d4 <tmr_read_count>:
{
    d2d4:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    d2d6:	4802      	ldr	r0, [pc, #8]	; (d2e0 <tmr_read_count+0xc>)
    d2d8:	4b02      	ldr	r3, [pc, #8]	; (d2e4 <tmr_read_count+0x10>)
    d2da:	4798      	blx	r3
    d2dc:	b280      	uxth	r0, r0
}
    d2de:	bd10      	pop	{r4, pc}
    d2e0:	200021cc 	.word	0x200021cc
    d2e4:	00008261 	.word	0x00008261

0000d2e8 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    d2e8:	4b03      	ldr	r3, [pc, #12]	; (d2f8 <tmr_disable_cc_interrupt+0x10>)
    d2ea:	2110      	movs	r1, #16
    d2ec:	681a      	ldr	r2, [r3, #0]
    d2ee:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    d2f0:	7e5a      	ldrb	r2, [r3, #25]
    d2f2:	438a      	bics	r2, r1
    d2f4:	765a      	strb	r2, [r3, #25]
}
    d2f6:	4770      	bx	lr
    d2f8:	200021cc 	.word	0x200021cc

0000d2fc <tmr_enable_cc_interrupt>:
{
    d2fc:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d2fe:	4c0b      	ldr	r4, [pc, #44]	; (d32c <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    d300:	2510      	movs	r5, #16
    d302:	6823      	ldr	r3, [r4, #0]
    d304:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d306:	0018      	movs	r0, r3
    d308:	4b09      	ldr	r3, [pc, #36]	; (d330 <tmr_enable_cc_interrupt+0x34>)
    d30a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d30c:	4b09      	ldr	r3, [pc, #36]	; (d334 <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d30e:	5c1b      	ldrb	r3, [r3, r0]
    d310:	221f      	movs	r2, #31
    d312:	401a      	ands	r2, r3
    d314:	2301      	movs	r3, #1
    d316:	4093      	lsls	r3, r2
    d318:	4a07      	ldr	r2, [pc, #28]	; (d338 <tmr_enable_cc_interrupt+0x3c>)
    d31a:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    d31c:	7e63      	ldrb	r3, [r4, #25]
    d31e:	2210      	movs	r2, #16
    d320:	4313      	orrs	r3, r2
    d322:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    d324:	6823      	ldr	r3, [r4, #0]
    d326:	725d      	strb	r5, [r3, #9]
}
    d328:	bd70      	pop	{r4, r5, r6, pc}
    d32a:	46c0      	nop			; (mov r8, r8)
    d32c:	200021cc 	.word	0x200021cc
    d330:	00007f49 	.word	0x00007f49
    d334:	00012660 	.word	0x00012660
    d338:	e000e100 	.word	0xe000e100

0000d33c <tmr_write_cmpreg>:
{
    d33c:	b510      	push	{r4, lr}
    d33e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    d340:	2100      	movs	r1, #0
    d342:	4802      	ldr	r0, [pc, #8]	; (d34c <tmr_write_cmpreg+0x10>)
    d344:	4b02      	ldr	r3, [pc, #8]	; (d350 <tmr_write_cmpreg+0x14>)
    d346:	4798      	blx	r3
}
    d348:	bd10      	pop	{r4, pc}
    d34a:	46c0      	nop			; (mov r8, r8)
    d34c:	200021cc 	.word	0x200021cc
    d350:	000082a9 	.word	0x000082a9

0000d354 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    d354:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    d356:	4a33      	ldr	r2, [pc, #204]	; (d424 <tmr_init+0xd0>)
    d358:	2100      	movs	r1, #0
    d35a:	2300      	movs	r3, #0
    d35c:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d35e:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d360:	2000      	movs	r0, #0
    d362:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d364:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d366:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    d368:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    d36a:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d36c:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d36e:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d370:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d372:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d374:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d376:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    d378:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d37a:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d37c:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d37e:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d380:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d382:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    d384:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    d386:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d388:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    d38a:	2334      	movs	r3, #52	; 0x34
    d38c:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    d38e:	3b35      	subs	r3, #53	; 0x35
    d390:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    d392:	4c25      	ldr	r4, [pc, #148]	; (d428 <tmr_init+0xd4>)
    d394:	4925      	ldr	r1, [pc, #148]	; (d42c <tmr_init+0xd8>)
    d396:	0020      	movs	r0, r4
    d398:	4b25      	ldr	r3, [pc, #148]	; (d430 <tmr_init+0xdc>)
    d39a:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    d39c:	2200      	movs	r2, #0
    d39e:	4925      	ldr	r1, [pc, #148]	; (d434 <tmr_init+0xe0>)
    d3a0:	0020      	movs	r0, r4
    d3a2:	4d25      	ldr	r5, [pc, #148]	; (d438 <tmr_init+0xe4>)
    d3a4:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    d3a6:	2202      	movs	r2, #2
    d3a8:	4924      	ldr	r1, [pc, #144]	; (d43c <tmr_init+0xe8>)
    d3aa:	0020      	movs	r0, r4
    d3ac:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d3ae:	6820      	ldr	r0, [r4, #0]
    d3b0:	4b23      	ldr	r3, [pc, #140]	; (d440 <tmr_init+0xec>)
    d3b2:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d3b4:	4b23      	ldr	r3, [pc, #140]	; (d444 <tmr_init+0xf0>)
    d3b6:	5c1a      	ldrb	r2, [r3, r0]
    d3b8:	231f      	movs	r3, #31
    d3ba:	4013      	ands	r3, r2
    d3bc:	2101      	movs	r1, #1
    d3be:	000a      	movs	r2, r1
    d3c0:	409a      	lsls	r2, r3
    d3c2:	4b21      	ldr	r3, [pc, #132]	; (d448 <tmr_init+0xf4>)
    d3c4:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d3c6:	7e63      	ldrb	r3, [r4, #25]
    d3c8:	2201      	movs	r2, #1
    d3ca:	4313      	orrs	r3, r2
    d3cc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d3ce:	6822      	ldr	r2, [r4, #0]
    d3d0:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    d3d2:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d3d4:	2b00      	cmp	r3, #0
    d3d6:	d1fc      	bne.n	d3d2 <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d3d8:	6813      	ldr	r3, [r2, #0]
    d3da:	2102      	movs	r1, #2
    d3dc:	430b      	orrs	r3, r1
    d3de:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    d3e0:	2000      	movs	r0, #0
    d3e2:	4b1a      	ldr	r3, [pc, #104]	; (d44c <tmr_init+0xf8>)
    d3e4:	4798      	blx	r3
    d3e6:	4d1a      	ldr	r5, [pc, #104]	; (d450 <tmr_init+0xfc>)
    d3e8:	47a8      	blx	r5
    d3ea:	491a      	ldr	r1, [pc, #104]	; (d454 <tmr_init+0x100>)
    d3ec:	4b1a      	ldr	r3, [pc, #104]	; (d458 <tmr_init+0x104>)
    d3ee:	4798      	blx	r3
    d3f0:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    d3f2:	4b1a      	ldr	r3, [pc, #104]	; (d45c <tmr_init+0x108>)
    d3f4:	4798      	blx	r3
    d3f6:	47a8      	blx	r5
    d3f8:	1c01      	adds	r1, r0, #0
    d3fa:	1c20      	adds	r0, r4, #0
    d3fc:	4b18      	ldr	r3, [pc, #96]	; (d460 <tmr_init+0x10c>)
    d3fe:	4798      	blx	r3
    d400:	21fc      	movs	r1, #252	; 0xfc
    d402:	0589      	lsls	r1, r1, #22
    d404:	4b17      	ldr	r3, [pc, #92]	; (d464 <tmr_init+0x110>)
    d406:	4798      	blx	r3
    d408:	2800      	cmp	r0, #0
    d40a:	d005      	beq.n	d418 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    d40c:	21fe      	movs	r1, #254	; 0xfe
    d40e:	0589      	lsls	r1, r1, #22
    d410:	1c20      	adds	r0, r4, #0
    d412:	4b15      	ldr	r3, [pc, #84]	; (d468 <tmr_init+0x114>)
    d414:	4798      	blx	r3
    d416:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    d418:	1c20      	adds	r0, r4, #0
    d41a:	4b10      	ldr	r3, [pc, #64]	; (d45c <tmr_init+0x108>)
    d41c:	4798      	blx	r3
    d41e:	b2c0      	uxtb	r0, r0
}
    d420:	bd70      	pop	{r4, r5, r6, pc}
    d422:	46c0      	nop			; (mov r8, r8)
    d424:	20002194 	.word	0x20002194
    d428:	200021cc 	.word	0x200021cc
    d42c:	42002000 	.word	0x42002000
    d430:	00007f81 	.word	0x00007f81
    d434:	0000d2c9 	.word	0x0000d2c9
    d438:	00007e81 	.word	0x00007e81
    d43c:	0000d2bd 	.word	0x0000d2bd
    d440:	00007f49 	.word	0x00007f49
    d444:	00012660 	.word	0x00012660
    d448:	e000e100 	.word	0xe000e100
    d44c:	00007c49 	.word	0x00007c49
    d450:	0001090d 	.word	0x0001090d
    d454:	49742400 	.word	0x49742400
    d458:	000101b5 	.word	0x000101b5
    d45c:	0000fe61 	.word	0x0000fe61
    d460:	00010595 	.word	0x00010595
    d464:	0000fdf9 	.word	0x0000fdf9
    d468:	0000fe91 	.word	0x0000fe91

0000d46c <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    d46c:	b500      	push	{lr}
    d46e:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    d470:	2800      	cmp	r0, #0
    d472:	d110      	bne.n	d496 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    d474:	2300      	movs	r3, #0
    d476:	466a      	mov	r2, sp
    d478:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    d47a:	4a08      	ldr	r2, [pc, #32]	; (d49c <nvm_init+0x30>)
    d47c:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    d47e:	466a      	mov	r2, sp
    d480:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    d482:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    d484:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    d486:	3302      	adds	r3, #2
    d488:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    d48a:	4668      	mov	r0, sp
    d48c:	4b04      	ldr	r3, [pc, #16]	; (d4a0 <nvm_init+0x34>)
    d48e:	4798      	blx	r3

		return STATUS_OK;
    d490:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    d492:	b003      	add	sp, #12
    d494:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    d496:	2008      	movs	r0, #8
    d498:	4240      	negs	r0, r0
    d49a:	e7fa      	b.n	d492 <nvm_init+0x26>
    d49c:	41004000 	.word	0x41004000
    d4a0:	000065b1 	.word	0x000065b1

0000d4a4 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    d4a4:	b570      	push	{r4, r5, r6, lr}
    d4a6:	0003      	movs	r3, r0
    d4a8:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    d4aa:	4c14      	ldr	r4, [pc, #80]	; (d4fc <sal_aes_wrrd+0x58>)
    d4ac:	1c60      	adds	r0, r4, #1
    d4ae:	2210      	movs	r2, #16
    d4b0:	0019      	movs	r1, r3
    d4b2:	4b13      	ldr	r3, [pc, #76]	; (d500 <sal_aes_wrrd+0x5c>)
    d4b4:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    d4b6:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    d4b8:	4b12      	ldr	r3, [pc, #72]	; (d504 <sal_aes_wrrd+0x60>)
    d4ba:	781b      	ldrb	r3, [r3, #0]
    d4bc:	2b00      	cmp	r3, #0
    d4be:	d015      	beq.n	d4ec <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    d4c0:	2212      	movs	r2, #18
    d4c2:	490e      	ldr	r1, [pc, #56]	; (d4fc <sal_aes_wrrd+0x58>)
    d4c4:	2083      	movs	r0, #131	; 0x83
    d4c6:	4b10      	ldr	r3, [pc, #64]	; (d508 <sal_aes_wrrd+0x64>)
    d4c8:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    d4ca:	2200      	movs	r2, #0
    d4cc:	4b0d      	ldr	r3, [pc, #52]	; (d504 <sal_aes_wrrd+0x60>)
    d4ce:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    d4d0:	2d00      	cmp	r5, #0
    d4d2:	d005      	beq.n	d4e0 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    d4d4:	2210      	movs	r2, #16
    d4d6:	4909      	ldr	r1, [pc, #36]	; (d4fc <sal_aes_wrrd+0x58>)
    d4d8:	3101      	adds	r1, #1
    d4da:	0028      	movs	r0, r5
    d4dc:	4b08      	ldr	r3, [pc, #32]	; (d500 <sal_aes_wrrd+0x5c>)
    d4de:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    d4e0:	4b06      	ldr	r3, [pc, #24]	; (d4fc <sal_aes_wrrd+0x58>)
    d4e2:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    d4e4:	2018      	movs	r0, #24
    d4e6:	4b09      	ldr	r3, [pc, #36]	; (d50c <sal_aes_wrrd+0x68>)
    d4e8:	4798      	blx	r3
}
    d4ea:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    d4ec:	2211      	movs	r2, #17
    d4ee:	4903      	ldr	r1, [pc, #12]	; (d4fc <sal_aes_wrrd+0x58>)
    d4f0:	3101      	adds	r1, #1
    d4f2:	2084      	movs	r0, #132	; 0x84
    d4f4:	4b04      	ldr	r3, [pc, #16]	; (d508 <sal_aes_wrrd+0x64>)
    d4f6:	4798      	blx	r3
    d4f8:	e7ea      	b.n	d4d0 <sal_aes_wrrd+0x2c>
    d4fa:	46c0      	nop			; (mov r8, r8)
    d4fc:	20001c4c 	.word	0x20001c4c
    d500:	00010a97 	.word	0x00010a97
    d504:	20001c80 	.word	0x20001c80
    d508:	0000df01 	.word	0x0000df01
    d50c:	00006239 	.word	0x00006239

0000d510 <sal_aes_setup>:
{
    d510:	b5f0      	push	{r4, r5, r6, r7, lr}
    d512:	46c6      	mov	lr, r8
    d514:	b500      	push	{lr}
    d516:	b084      	sub	sp, #16
    d518:	0005      	movs	r5, r0
    d51a:	000e      	movs	r6, r1
    d51c:	0014      	movs	r4, r2
	if (key != NULL) {
    d51e:	2800      	cmp	r0, #0
    d520:	d017      	beq.n	d552 <sal_aes_setup+0x42>
		dec_initialized = false;
    d522:	2200      	movs	r2, #0
    d524:	4b3e      	ldr	r3, [pc, #248]	; (d620 <sal_aes_setup+0x110>)
    d526:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    d528:	3202      	adds	r2, #2
    d52a:	4b3e      	ldr	r3, [pc, #248]	; (d624 <sal_aes_setup+0x114>)
    d52c:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    d52e:	320e      	adds	r2, #14
    d530:	0001      	movs	r1, r0
    d532:	483d      	ldr	r0, [pc, #244]	; (d628 <sal_aes_setup+0x118>)
    d534:	4b3d      	ldr	r3, [pc, #244]	; (d62c <sal_aes_setup+0x11c>)
    d536:	4698      	mov	r8, r3
    d538:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    d53a:	4f3d      	ldr	r7, [pc, #244]	; (d630 <sal_aes_setup+0x120>)
    d53c:	2310      	movs	r3, #16
    d53e:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    d540:	1c78      	adds	r0, r7, #1
    d542:	2210      	movs	r2, #16
    d544:	0029      	movs	r1, r5
    d546:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    d548:	2211      	movs	r2, #17
    d54a:	0039      	movs	r1, r7
    d54c:	2083      	movs	r0, #131	; 0x83
    d54e:	4b39      	ldr	r3, [pc, #228]	; (d634 <sal_aes_setup+0x124>)
    d550:	4798      	blx	r3
	switch (dir) {
    d552:	2c00      	cmp	r4, #0
    d554:	d003      	beq.n	d55e <sal_aes_setup+0x4e>
    d556:	2c01      	cmp	r4, #1
    d558:	d02f      	beq.n	d5ba <sal_aes_setup+0xaa>
		return false;
    d55a:	2000      	movs	r0, #0
    d55c:	e01b      	b.n	d596 <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    d55e:	4b31      	ldr	r3, [pc, #196]	; (d624 <sal_aes_setup+0x114>)
    d560:	781b      	ldrb	r3, [r3, #0]
    d562:	2b01      	cmp	r3, #1
    d564:	d01b      	beq.n	d59e <sal_aes_setup+0x8e>
	last_dir = dir;
    d566:	4b2f      	ldr	r3, [pc, #188]	; (d624 <sal_aes_setup+0x114>)
    d568:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    d56a:	2e00      	cmp	r6, #0
    d56c:	d002      	beq.n	d574 <sal_aes_setup+0x64>
		return (false);
    d56e:	2000      	movs	r0, #0
	switch (enc_mode) {
    d570:	2e02      	cmp	r6, #2
    d572:	d110      	bne.n	d596 <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    d574:	0136      	lsls	r6, r6, #4
    d576:	2370      	movs	r3, #112	; 0x70
    d578:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    d57a:	00e4      	lsls	r4, r4, #3
    d57c:	3b68      	subs	r3, #104	; 0x68
    d57e:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    d580:	4334      	orrs	r4, r6
    d582:	4b2b      	ldr	r3, [pc, #172]	; (d630 <sal_aes_setup+0x120>)
    d584:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    d586:	2680      	movs	r6, #128	; 0x80
    d588:	4276      	negs	r6, r6
    d58a:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    d58c:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    d58e:	2201      	movs	r2, #1
    d590:	4b29      	ldr	r3, [pc, #164]	; (d638 <sal_aes_setup+0x128>)
    d592:	701a      	strb	r2, [r3, #0]
	return (true);
    d594:	2001      	movs	r0, #1
}
    d596:	b004      	add	sp, #16
    d598:	bc04      	pop	{r2}
    d59a:	4690      	mov	r8, r2
    d59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    d59e:	4d24      	ldr	r5, [pc, #144]	; (d630 <sal_aes_setup+0x120>)
    d5a0:	330f      	adds	r3, #15
    d5a2:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    d5a4:	1c68      	adds	r0, r5, #1
    d5a6:	2210      	movs	r2, #16
    d5a8:	491f      	ldr	r1, [pc, #124]	; (d628 <sal_aes_setup+0x118>)
    d5aa:	4b20      	ldr	r3, [pc, #128]	; (d62c <sal_aes_setup+0x11c>)
    d5ac:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    d5ae:	2211      	movs	r2, #17
    d5b0:	0029      	movs	r1, r5
    d5b2:	2083      	movs	r0, #131	; 0x83
    d5b4:	4b1f      	ldr	r3, [pc, #124]	; (d634 <sal_aes_setup+0x124>)
    d5b6:	4798      	blx	r3
    d5b8:	e7d5      	b.n	d566 <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    d5ba:	4b1a      	ldr	r3, [pc, #104]	; (d624 <sal_aes_setup+0x114>)
    d5bc:	781b      	ldrb	r3, [r3, #0]
    d5be:	2b01      	cmp	r3, #1
    d5c0:	d0d1      	beq.n	d566 <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    d5c2:	2210      	movs	r2, #16
    d5c4:	4b1a      	ldr	r3, [pc, #104]	; (d630 <sal_aes_setup+0x120>)
    d5c6:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    d5c8:	4b15      	ldr	r3, [pc, #84]	; (d620 <sal_aes_setup+0x110>)
    d5ca:	781b      	ldrb	r3, [r3, #0]
    d5cc:	2b00      	cmp	r3, #0
    d5ce:	d00e      	beq.n	d5ee <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    d5d0:	4d17      	ldr	r5, [pc, #92]	; (d630 <sal_aes_setup+0x120>)
    d5d2:	1c68      	adds	r0, r5, #1
    d5d4:	2210      	movs	r2, #16
    d5d6:	4919      	ldr	r1, [pc, #100]	; (d63c <sal_aes_setup+0x12c>)
    d5d8:	4b14      	ldr	r3, [pc, #80]	; (d62c <sal_aes_setup+0x11c>)
    d5da:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    d5dc:	2211      	movs	r2, #17
    d5de:	0029      	movs	r1, r5
    d5e0:	2083      	movs	r0, #131	; 0x83
    d5e2:	4b14      	ldr	r3, [pc, #80]	; (d634 <sal_aes_setup+0x124>)
    d5e4:	4798      	blx	r3
			dec_initialized = true;
    d5e6:	4b0e      	ldr	r3, [pc, #56]	; (d620 <sal_aes_setup+0x110>)
    d5e8:	2201      	movs	r2, #1
    d5ea:	701a      	strb	r2, [r3, #0]
    d5ec:	e7bb      	b.n	d566 <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    d5ee:	4d10      	ldr	r5, [pc, #64]	; (d630 <sal_aes_setup+0x120>)
    d5f0:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    d5f2:	3380      	adds	r3, #128	; 0x80
    d5f4:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    d5f6:	3a0f      	subs	r2, #15
    d5f8:	4b0f      	ldr	r3, [pc, #60]	; (d638 <sal_aes_setup+0x128>)
    d5fa:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    d5fc:	2100      	movs	r1, #0
    d5fe:	4668      	mov	r0, sp
    d600:	4b0f      	ldr	r3, [pc, #60]	; (d640 <sal_aes_setup+0x130>)
    d602:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    d604:	2310      	movs	r3, #16
    d606:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    d608:	2201      	movs	r2, #1
    d60a:	0029      	movs	r1, r5
    d60c:	2083      	movs	r0, #131	; 0x83
    d60e:	4b09      	ldr	r3, [pc, #36]	; (d634 <sal_aes_setup+0x124>)
    d610:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    d612:	2210      	movs	r2, #16
    d614:	4909      	ldr	r1, [pc, #36]	; (d63c <sal_aes_setup+0x12c>)
    d616:	2084      	movs	r0, #132	; 0x84
    d618:	4b0a      	ldr	r3, [pc, #40]	; (d644 <sal_aes_setup+0x134>)
    d61a:	4798      	blx	r3
    d61c:	e7d8      	b.n	d5d0 <sal_aes_setup+0xc0>
    d61e:	46c0      	nop			; (mov r8, r8)
    d620:	20001c5e 	.word	0x20001c5e
    d624:	20000019 	.word	0x20000019
    d628:	20001c70 	.word	0x20001c70
    d62c:	00010a97 	.word	0x00010a97
    d630:	20001c4c 	.word	0x20001c4c
    d634:	0000dc0d 	.word	0x0000dc0d
    d638:	20001c80 	.word	0x20001c80
    d63c:	20001c60 	.word	0x20001c60
    d640:	0000d4a5 	.word	0x0000d4a5
    d644:	0000dd79 	.word	0x0000dd79

0000d648 <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    d648:	b510      	push	{r4, lr}
    d64a:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    d64c:	2210      	movs	r2, #16
    d64e:	2084      	movs	r0, #132	; 0x84
    d650:	4b01      	ldr	r3, [pc, #4]	; (d658 <sal_aes_read+0x10>)
    d652:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    d654:	bd10      	pop	{r4, pc}
    d656:	46c0      	nop			; (mov r8, r8)
    d658:	0000dd79 	.word	0x0000dd79

0000d65c <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    d65c:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    d65e:	2201      	movs	r2, #1
    d660:	4b03      	ldr	r3, [pc, #12]	; (d670 <AT86RFX_ISR+0x14>)
    d662:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    d664:	4b03      	ldr	r3, [pc, #12]	; (d674 <AT86RFX_ISR+0x18>)
    d666:	681b      	ldr	r3, [r3, #0]
    d668:	2b00      	cmp	r3, #0
    d66a:	d000      	beq.n	d66e <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    d66c:	4798      	blx	r3
	}
}
    d66e:	bd10      	pop	{r4, pc}
    d670:	40002400 	.word	0x40002400
    d674:	20001c84 	.word	0x20001c84

0000d678 <trx_spi_init>:

void trx_spi_init(void)
{
    d678:	b530      	push	{r4, r5, lr}
    d67a:	b085      	sub	sp, #20
	config->address_enabled = false;
    d67c:	4a34      	ldr	r2, [pc, #208]	; (d750 <trx_spi_init+0xd8>)
    d67e:	2300      	movs	r3, #0
    d680:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    d682:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    d684:	213f      	movs	r1, #63	; 0x3f
    d686:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    d688:	4c32      	ldr	r4, [pc, #200]	; (d754 <trx_spi_init+0xdc>)
    d68a:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    d68c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    d68e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    d690:	2201      	movs	r2, #1
    d692:	4669      	mov	r1, sp
    d694:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    d696:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    d698:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    d69a:	203f      	movs	r0, #63	; 0x3f
    d69c:	4b2e      	ldr	r3, [pc, #184]	; (d758 <trx_spi_init+0xe0>)
    d69e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    d6a0:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    d6a2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    d6a4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    d6a6:	2900      	cmp	r1, #0
    d6a8:	d104      	bne.n	d6b4 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    d6aa:	0953      	lsrs	r3, r2, #5
    d6ac:	01db      	lsls	r3, r3, #7
    d6ae:	492b      	ldr	r1, [pc, #172]	; (d75c <trx_spi_init+0xe4>)
    d6b0:	468c      	mov	ip, r1
    d6b2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d6b4:	211f      	movs	r1, #31
    d6b6:	4011      	ands	r1, r2
    d6b8:	2201      	movs	r2, #1
    d6ba:	0010      	movs	r0, r2
    d6bc:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    d6be:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    d6c0:	4c27      	ldr	r4, [pc, #156]	; (d760 <trx_spi_init+0xe8>)
    d6c2:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    d6c4:	2300      	movs	r3, #0
    d6c6:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    d6c8:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    d6ca:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    d6cc:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    d6ce:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    d6d0:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    d6d2:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    d6d4:	3223      	adds	r2, #35	; 0x23
    d6d6:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    d6d8:	0020      	movs	r0, r4
    d6da:	3018      	adds	r0, #24
    d6dc:	3a18      	subs	r2, #24
    d6de:	2100      	movs	r1, #0
    d6e0:	4b20      	ldr	r3, [pc, #128]	; (d764 <trx_spi_init+0xec>)
    d6e2:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    d6e4:	2380      	movs	r3, #128	; 0x80
    d6e6:	025b      	lsls	r3, r3, #9
    d6e8:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    d6ea:	4b1f      	ldr	r3, [pc, #124]	; (d768 <trx_spi_init+0xf0>)
    d6ec:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    d6ee:	4b1f      	ldr	r3, [pc, #124]	; (d76c <trx_spi_init+0xf4>)
    d6f0:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    d6f2:	2301      	movs	r3, #1
    d6f4:	425b      	negs	r3, r3
    d6f6:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    d6f8:	4b1d      	ldr	r3, [pc, #116]	; (d770 <trx_spi_init+0xf8>)
    d6fa:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    d6fc:	4b1d      	ldr	r3, [pc, #116]	; (d774 <trx_spi_init+0xfc>)
    d6fe:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    d700:	4d1d      	ldr	r5, [pc, #116]	; (d778 <trx_spi_init+0x100>)
    d702:	0022      	movs	r2, r4
    d704:	491d      	ldr	r1, [pc, #116]	; (d77c <trx_spi_init+0x104>)
    d706:	0028      	movs	r0, r5
    d708:	4b1d      	ldr	r3, [pc, #116]	; (d780 <trx_spi_init+0x108>)
    d70a:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d70c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    d70e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    d710:	2b00      	cmp	r3, #0
    d712:	d1fc      	bne.n	d70e <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    d714:	6813      	ldr	r3, [r2, #0]
    d716:	2502      	movs	r5, #2
    d718:	432b      	orrs	r3, r5
    d71a:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    d71c:	ac01      	add	r4, sp, #4
    d71e:	0020      	movs	r0, r4
    d720:	4b18      	ldr	r3, [pc, #96]	; (d784 <trx_spi_init+0x10c>)
    d722:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    d724:	2320      	movs	r3, #32
    d726:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    d728:	2380      	movs	r3, #128	; 0x80
    d72a:	039b      	lsls	r3, r3, #14
    d72c:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    d72e:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
    d730:	2300      	movs	r3, #0
    d732:	7263      	strb	r3, [r4, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    d734:	72a3      	strb	r3, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    d736:	3301      	adds	r3, #1
    d738:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    d73a:	0021      	movs	r1, r4
    d73c:	2000      	movs	r0, #0
    d73e:	4b12      	ldr	r3, [pc, #72]	; (d788 <trx_spi_init+0x110>)
    d740:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    d742:	2200      	movs	r2, #0
    d744:	2100      	movs	r1, #0
    d746:	4811      	ldr	r0, [pc, #68]	; (d78c <trx_spi_init+0x114>)
    d748:	4b11      	ldr	r3, [pc, #68]	; (d790 <trx_spi_init+0x118>)
    d74a:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    d74c:	b005      	add	sp, #20
    d74e:	bd30      	pop	{r4, r5, pc}
    d750:	200021ec 	.word	0x200021ec
    d754:	200021f0 	.word	0x200021f0
    d758:	00006899 	.word	0x00006899
    d75c:	40002800 	.word	0x40002800
    d760:	200021f4 	.word	0x200021f4
    d764:	00010aa9 	.word	0x00010aa9
    d768:	003d0900 	.word	0x003d0900
    d76c:	00530005 	.word	0x00530005
    d770:	003e0005 	.word	0x003e0005
    d774:	00520005 	.word	0x00520005
    d778:	2000222c 	.word	0x2000222c
    d77c:	42001000 	.word	0x42001000
    d780:	00006d4d 	.word	0x00006d4d
    d784:	00006511 	.word	0x00006511
    d788:	00006525 	.word	0x00006525
    d78c:	0000d65d 	.word	0x0000d65d
    d790:	00006391 	.word	0x00006391

0000d794 <PhyReset>:

void PhyReset(void)
{
    d794:	b570      	push	{r4, r5, r6, lr}
    d796:	4c08      	ldr	r4, [pc, #32]	; (d7b8 <PhyReset+0x24>)
    d798:	2580      	movs	r5, #128	; 0x80
    d79a:	022d      	lsls	r5, r5, #8
    d79c:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    d79e:	2280      	movs	r2, #128	; 0x80
    d7a0:	0352      	lsls	r2, r2, #13
    d7a2:	4b06      	ldr	r3, [pc, #24]	; (d7bc <PhyReset+0x28>)
    d7a4:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    d7a6:	20a5      	movs	r0, #165	; 0xa5
    d7a8:	0040      	lsls	r0, r0, #1
    d7aa:	4e05      	ldr	r6, [pc, #20]	; (d7c0 <PhyReset+0x2c>)
    d7ac:	47b0      	blx	r6
    d7ae:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    d7b0:	200a      	movs	r0, #10
    d7b2:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    d7b4:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    d7b6:	bd70      	pop	{r4, r5, r6, pc}
    d7b8:	40002880 	.word	0x40002880
    d7bc:	40002800 	.word	0x40002800
    d7c0:	00006239 	.word	0x00006239

0000d7c4 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    d7c4:	b570      	push	{r4, r5, r6, lr}
    d7c6:	b082      	sub	sp, #8
    d7c8:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d7ca:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d7ce:	425a      	negs	r2, r3
    d7d0:	4153      	adcs	r3, r2
    d7d2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d7d4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d7d6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d7da:	2200      	movs	r2, #0
    d7dc:	4b33      	ldr	r3, [pc, #204]	; (d8ac <trx_reg_read+0xe8>)
    d7de:	701a      	strb	r2, [r3, #0]
	return flags;
    d7e0:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d7e2:	4e33      	ldr	r6, [pc, #204]	; (d8b0 <trx_reg_read+0xec>)
    d7e4:	3201      	adds	r2, #1
    d7e6:	4933      	ldr	r1, [pc, #204]	; (d8b4 <trx_reg_read+0xf0>)
    d7e8:	0030      	movs	r0, r6
    d7ea:	4b33      	ldr	r3, [pc, #204]	; (d8b8 <trx_reg_read+0xf4>)
    d7ec:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d7ee:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    d7f0:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d7f2:	7e1a      	ldrb	r2, [r3, #24]
    d7f4:	420a      	tst	r2, r1
    d7f6:	d0fc      	beq.n	d7f2 <trx_reg_read+0x2e>
    d7f8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d7fa:	07d2      	lsls	r2, r2, #31
    d7fc:	d502      	bpl.n	d804 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d7fe:	2280      	movs	r2, #128	; 0x80
    d800:	4315      	orrs	r5, r2
    d802:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    d804:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d806:	7e1a      	ldrb	r2, [r3, #24]
    d808:	420a      	tst	r2, r1
    d80a:	d0fc      	beq.n	d806 <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d80c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d80e:	7e1a      	ldrb	r2, [r3, #24]
    d810:	420a      	tst	r2, r1
    d812:	d0fc      	beq.n	d80e <trx_reg_read+0x4a>
    d814:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d816:	0752      	lsls	r2, r2, #29
    d818:	d50c      	bpl.n	d834 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d81a:	8b5a      	ldrh	r2, [r3, #26]
    d81c:	0752      	lsls	r2, r2, #29
    d81e:	d501      	bpl.n	d824 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d820:	2204      	movs	r2, #4
    d822:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d824:	4a22      	ldr	r2, [pc, #136]	; (d8b0 <trx_reg_read+0xec>)
    d826:	7992      	ldrb	r2, [r2, #6]
    d828:	2a01      	cmp	r2, #1
    d82a:	d034      	beq.n	d896 <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d82c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d82e:	b2d2      	uxtb	r2, r2
    d830:	4922      	ldr	r1, [pc, #136]	; (d8bc <trx_reg_read+0xf8>)
    d832:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    d834:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d836:	7e1a      	ldrb	r2, [r3, #24]
    d838:	420a      	tst	r2, r1
    d83a:	d0fc      	beq.n	d836 <trx_reg_read+0x72>
    d83c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d83e:	07d2      	lsls	r2, r2, #31
    d840:	d501      	bpl.n	d846 <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d842:	2200      	movs	r2, #0
    d844:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    d846:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d848:	7e1a      	ldrb	r2, [r3, #24]
    d84a:	420a      	tst	r2, r1
    d84c:	d0fc      	beq.n	d848 <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    d84e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d850:	7e1a      	ldrb	r2, [r3, #24]
    d852:	420a      	tst	r2, r1
    d854:	d0fc      	beq.n	d850 <trx_reg_read+0x8c>
    d856:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    d858:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    d85a:	0752      	lsls	r2, r2, #29
    d85c:	d50a      	bpl.n	d874 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d85e:	8b5a      	ldrh	r2, [r3, #26]
    d860:	0752      	lsls	r2, r2, #29
    d862:	d501      	bpl.n	d868 <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d864:	2204      	movs	r2, #4
    d866:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d868:	4a11      	ldr	r2, [pc, #68]	; (d8b0 <trx_reg_read+0xec>)
    d86a:	7992      	ldrb	r2, [r2, #6]
    d86c:	2a01      	cmp	r2, #1
    d86e:	d018      	beq.n	d8a2 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d870:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    d872:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d874:	2200      	movs	r2, #0
    d876:	490f      	ldr	r1, [pc, #60]	; (d8b4 <trx_reg_read+0xf0>)
    d878:	480d      	ldr	r0, [pc, #52]	; (d8b0 <trx_reg_read+0xec>)
    d87a:	4b0f      	ldr	r3, [pc, #60]	; (d8b8 <trx_reg_read+0xf4>)
    d87c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d87e:	23ff      	movs	r3, #255	; 0xff
    d880:	4223      	tst	r3, r4
    d882:	d005      	beq.n	d890 <trx_reg_read+0xcc>
		cpu_irq_enable();
    d884:	2201      	movs	r2, #1
    d886:	4b09      	ldr	r3, [pc, #36]	; (d8ac <trx_reg_read+0xe8>)
    d888:	701a      	strb	r2, [r3, #0]
    d88a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d88e:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    d890:	b2e8      	uxtb	r0, r5
}
    d892:	b002      	add	sp, #8
    d894:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d898:	05d2      	lsls	r2, r2, #23
    d89a:	0dd2      	lsrs	r2, r2, #23
    d89c:	4907      	ldr	r1, [pc, #28]	; (d8bc <trx_reg_read+0xf8>)
    d89e:	800a      	strh	r2, [r1, #0]
    d8a0:	e7c8      	b.n	d834 <trx_reg_read+0x70>
    d8a2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    d8a4:	05ed      	lsls	r5, r5, #23
    d8a6:	0ded      	lsrs	r5, r5, #23
    d8a8:	e7e4      	b.n	d874 <trx_reg_read+0xb0>
    d8aa:	46c0      	nop			; (mov r8, r8)
    d8ac:	20000008 	.word	0x20000008
    d8b0:	2000222c 	.word	0x2000222c
    d8b4:	200021f0 	.word	0x200021f0
    d8b8:	00007029 	.word	0x00007029
    d8bc:	200021e8 	.word	0x200021e8

0000d8c0 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    d8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8c2:	b083      	sub	sp, #12
    d8c4:	0006      	movs	r6, r0
    d8c6:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d8c8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d8cc:	425a      	negs	r2, r3
    d8ce:	4153      	adcs	r3, r2
    d8d0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d8d2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d8d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d8d8:	2200      	movs	r2, #0
    d8da:	4b34      	ldr	r3, [pc, #208]	; (d9ac <trx_reg_write+0xec>)
    d8dc:	701a      	strb	r2, [r3, #0]
	return flags;
    d8de:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d8e0:	4f33      	ldr	r7, [pc, #204]	; (d9b0 <trx_reg_write+0xf0>)
    d8e2:	3201      	adds	r2, #1
    d8e4:	4933      	ldr	r1, [pc, #204]	; (d9b4 <trx_reg_write+0xf4>)
    d8e6:	0038      	movs	r0, r7
    d8e8:	4b33      	ldr	r3, [pc, #204]	; (d9b8 <trx_reg_write+0xf8>)
    d8ea:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d8ec:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    d8ee:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d8f0:	7e1a      	ldrb	r2, [r3, #24]
    d8f2:	420a      	tst	r2, r1
    d8f4:	d0fc      	beq.n	d8f0 <trx_reg_write+0x30>
    d8f6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d8f8:	07d2      	lsls	r2, r2, #31
    d8fa:	d502      	bpl.n	d902 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d8fc:	22c0      	movs	r2, #192	; 0xc0
    d8fe:	4316      	orrs	r6, r2
    d900:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    d902:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d904:	7e1a      	ldrb	r2, [r3, #24]
    d906:	420a      	tst	r2, r1
    d908:	d0fc      	beq.n	d904 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d90a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d90c:	7e1a      	ldrb	r2, [r3, #24]
    d90e:	420a      	tst	r2, r1
    d910:	d0fc      	beq.n	d90c <trx_reg_write+0x4c>
    d912:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d914:	0752      	lsls	r2, r2, #29
    d916:	d50c      	bpl.n	d932 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d918:	8b5a      	ldrh	r2, [r3, #26]
    d91a:	0752      	lsls	r2, r2, #29
    d91c:	d501      	bpl.n	d922 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d91e:	2204      	movs	r2, #4
    d920:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d922:	4a23      	ldr	r2, [pc, #140]	; (d9b0 <trx_reg_write+0xf0>)
    d924:	7992      	ldrb	r2, [r2, #6]
    d926:	2a01      	cmp	r2, #1
    d928:	d033      	beq.n	d992 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d92a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d92c:	b2d2      	uxtb	r2, r2
    d92e:	4923      	ldr	r1, [pc, #140]	; (d9bc <trx_reg_write+0xfc>)
    d930:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    d932:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d934:	7e1a      	ldrb	r2, [r3, #24]
    d936:	420a      	tst	r2, r1
    d938:	d0fc      	beq.n	d934 <trx_reg_write+0x74>
    d93a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    d93c:	07d2      	lsls	r2, r2, #31
    d93e:	d500      	bpl.n	d942 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    d940:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    d942:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    d944:	7e1a      	ldrb	r2, [r3, #24]
    d946:	420a      	tst	r2, r1
    d948:	d0fc      	beq.n	d944 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    d94a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    d94c:	7e1a      	ldrb	r2, [r3, #24]
    d94e:	420a      	tst	r2, r1
    d950:	d0fc      	beq.n	d94c <trx_reg_write+0x8c>
    d952:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    d954:	0752      	lsls	r2, r2, #29
    d956:	d50c      	bpl.n	d972 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    d958:	8b5a      	ldrh	r2, [r3, #26]
    d95a:	0752      	lsls	r2, r2, #29
    d95c:	d501      	bpl.n	d962 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    d95e:	2204      	movs	r2, #4
    d960:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    d962:	4a13      	ldr	r2, [pc, #76]	; (d9b0 <trx_reg_write+0xf0>)
    d964:	7992      	ldrb	r2, [r2, #6]
    d966:	2a01      	cmp	r2, #1
    d968:	d019      	beq.n	d99e <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    d96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d96c:	b2db      	uxtb	r3, r3
    d96e:	4a13      	ldr	r2, [pc, #76]	; (d9bc <trx_reg_write+0xfc>)
    d970:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    d972:	2200      	movs	r2, #0
    d974:	490f      	ldr	r1, [pc, #60]	; (d9b4 <trx_reg_write+0xf4>)
    d976:	480e      	ldr	r0, [pc, #56]	; (d9b0 <trx_reg_write+0xf0>)
    d978:	4b0f      	ldr	r3, [pc, #60]	; (d9b8 <trx_reg_write+0xf8>)
    d97a:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    d97c:	23ff      	movs	r3, #255	; 0xff
    d97e:	422b      	tst	r3, r5
    d980:	d005      	beq.n	d98e <trx_reg_write+0xce>
		cpu_irq_enable();
    d982:	2201      	movs	r2, #1
    d984:	4b09      	ldr	r3, [pc, #36]	; (d9ac <trx_reg_write+0xec>)
    d986:	701a      	strb	r2, [r3, #0]
    d988:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d98c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    d98e:	b003      	add	sp, #12
    d990:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    d992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d994:	05d2      	lsls	r2, r2, #23
    d996:	0dd2      	lsrs	r2, r2, #23
    d998:	4908      	ldr	r1, [pc, #32]	; (d9bc <trx_reg_write+0xfc>)
    d99a:	800a      	strh	r2, [r1, #0]
    d99c:	e7c9      	b.n	d932 <trx_reg_write+0x72>
    d99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d9a0:	05db      	lsls	r3, r3, #23
    d9a2:	0ddb      	lsrs	r3, r3, #23
    d9a4:	4a05      	ldr	r2, [pc, #20]	; (d9bc <trx_reg_write+0xfc>)
    d9a6:	8013      	strh	r3, [r2, #0]
    d9a8:	e7e3      	b.n	d972 <trx_reg_write+0xb2>
    d9aa:	46c0      	nop			; (mov r8, r8)
    d9ac:	20000008 	.word	0x20000008
    d9b0:	2000222c 	.word	0x2000222c
    d9b4:	200021f0 	.word	0x200021f0
    d9b8:	00007029 	.word	0x00007029
    d9bc:	200021e8 	.word	0x200021e8

0000d9c0 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    d9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9c2:	46d6      	mov	lr, sl
    d9c4:	464f      	mov	r7, r9
    d9c6:	4646      	mov	r6, r8
    d9c8:	b5c0      	push	{r6, r7, lr}
    d9ca:	b082      	sub	sp, #8
    d9cc:	0005      	movs	r5, r0
    d9ce:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d9d0:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d9d4:	425a      	negs	r2, r3
    d9d6:	4153      	adcs	r3, r2
    d9d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d9da:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d9dc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d9e0:	2200      	movs	r2, #0
    d9e2:	4b3e      	ldr	r3, [pc, #248]	; (dadc <trx_frame_read+0x11c>)
    d9e4:	701a      	strb	r2, [r3, #0]
	return flags;
    d9e6:	9b01      	ldr	r3, [sp, #4]
    d9e8:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    d9ea:	4f3d      	ldr	r7, [pc, #244]	; (dae0 <trx_frame_read+0x120>)
    d9ec:	3201      	adds	r2, #1
    d9ee:	493d      	ldr	r1, [pc, #244]	; (dae4 <trx_frame_read+0x124>)
    d9f0:	0038      	movs	r0, r7
    d9f2:	4b3d      	ldr	r3, [pc, #244]	; (dae8 <trx_frame_read+0x128>)
    d9f4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    d9f6:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    d9f8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    d9fa:	7e1a      	ldrb	r2, [r3, #24]
    d9fc:	420a      	tst	r2, r1
    d9fe:	d0fc      	beq.n	d9fa <trx_frame_read+0x3a>
    da00:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    da02:	07d2      	lsls	r2, r2, #31
    da04:	d501      	bpl.n	da0a <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    da06:	2220      	movs	r2, #32
    da08:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    da0a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    da0c:	7e1a      	ldrb	r2, [r3, #24]
    da0e:	420a      	tst	r2, r1
    da10:	d0fc      	beq.n	da0c <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    da12:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    da14:	7e1a      	ldrb	r2, [r3, #24]
    da16:	420a      	tst	r2, r1
    da18:	d0fc      	beq.n	da14 <trx_frame_read+0x54>
    da1a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    da1c:	0752      	lsls	r2, r2, #29
    da1e:	d50c      	bpl.n	da3a <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    da20:	8b5a      	ldrh	r2, [r3, #26]
    da22:	0752      	lsls	r2, r2, #29
    da24:	d501      	bpl.n	da2a <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    da26:	2204      	movs	r2, #4
    da28:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    da2a:	4a2d      	ldr	r2, [pc, #180]	; (dae0 <trx_frame_read+0x120>)
    da2c:	7992      	ldrb	r2, [r2, #6]
    da2e:	2a01      	cmp	r2, #1
    da30:	d013      	beq.n	da5a <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    da32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    da34:	b2db      	uxtb	r3, r3
    da36:	4a2d      	ldr	r2, [pc, #180]	; (daec <trx_frame_read+0x12c>)
    da38:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    da3a:	1e63      	subs	r3, r4, #1
    da3c:	b2db      	uxtb	r3, r3
    da3e:	2c00      	cmp	r4, #0
    da40:	d036      	beq.n	dab0 <trx_frame_read+0xf0>
    da42:	3301      	adds	r3, #1
    da44:	469c      	mov	ip, r3
    da46:	44ac      	add	ip, r5
    da48:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    da4a:	4e25      	ldr	r6, [pc, #148]	; (dae0 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    da4c:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    da4e:	2300      	movs	r3, #0
    da50:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    da52:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    da54:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    da56:	46b1      	mov	r9, r6
    da58:	e00f      	b.n	da7a <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    da5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    da5c:	05db      	lsls	r3, r3, #23
    da5e:	0ddb      	lsrs	r3, r3, #23
    da60:	4a22      	ldr	r2, [pc, #136]	; (daec <trx_frame_read+0x12c>)
    da62:	8013      	strh	r3, [r2, #0]
    da64:	e7e9      	b.n	da3a <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    da66:	464a      	mov	r2, r9
    da68:	7992      	ldrb	r2, [r2, #6]
    da6a:	2a01      	cmp	r2, #1
    da6c:	d01c      	beq.n	daa8 <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    da6e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    da70:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    da72:	702f      	strb	r7, [r5, #0]
		data++;
    da74:	3501      	adds	r5, #1
	while (length--) {
    da76:	4565      	cmp	r5, ip
    da78:	d01a      	beq.n	dab0 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    da7a:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    da7c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    da7e:	4202      	tst	r2, r0
    da80:	d0fc      	beq.n	da7c <trx_frame_read+0xbc>
    da82:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    da84:	4202      	tst	r2, r0
    da86:	d001      	beq.n	da8c <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    da88:	4652      	mov	r2, sl
    da8a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    da8c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    da8e:	4222      	tst	r2, r4
    da90:	d0fc      	beq.n	da8c <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    da92:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    da94:	420a      	tst	r2, r1
    da96:	d0fc      	beq.n	da92 <trx_frame_read+0xd2>
    da98:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    da9a:	420a      	tst	r2, r1
    da9c:	d0e9      	beq.n	da72 <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    da9e:	8b5a      	ldrh	r2, [r3, #26]
    daa0:	420a      	tst	r2, r1
    daa2:	d0e0      	beq.n	da66 <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    daa4:	8359      	strh	r1, [r3, #26]
    daa6:	e7de      	b.n	da66 <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    daa8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    daaa:	05ff      	lsls	r7, r7, #23
    daac:	0dff      	lsrs	r7, r7, #23
    daae:	e7e0      	b.n	da72 <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    dab0:	2200      	movs	r2, #0
    dab2:	490c      	ldr	r1, [pc, #48]	; (dae4 <trx_frame_read+0x124>)
    dab4:	480a      	ldr	r0, [pc, #40]	; (dae0 <trx_frame_read+0x120>)
    dab6:	4b0c      	ldr	r3, [pc, #48]	; (dae8 <trx_frame_read+0x128>)
    dab8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    daba:	23ff      	movs	r3, #255	; 0xff
    dabc:	4642      	mov	r2, r8
    dabe:	4213      	tst	r3, r2
    dac0:	d005      	beq.n	dace <trx_frame_read+0x10e>
		cpu_irq_enable();
    dac2:	2201      	movs	r2, #1
    dac4:	4b05      	ldr	r3, [pc, #20]	; (dadc <trx_frame_read+0x11c>)
    dac6:	701a      	strb	r2, [r3, #0]
    dac8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dacc:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    dace:	b002      	add	sp, #8
    dad0:	bc1c      	pop	{r2, r3, r4}
    dad2:	4690      	mov	r8, r2
    dad4:	4699      	mov	r9, r3
    dad6:	46a2      	mov	sl, r4
    dad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dada:	46c0      	nop			; (mov r8, r8)
    dadc:	20000008 	.word	0x20000008
    dae0:	2000222c 	.word	0x2000222c
    dae4:	200021f0 	.word	0x200021f0
    dae8:	00007029 	.word	0x00007029
    daec:	200021e8 	.word	0x200021e8

0000daf0 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    daf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    daf2:	46c6      	mov	lr, r8
    daf4:	b500      	push	{lr}
    daf6:	b082      	sub	sp, #8
    daf8:	0004      	movs	r4, r0
    dafa:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dafc:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    db00:	425a      	negs	r2, r3
    db02:	4153      	adcs	r3, r2
    db04:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    db06:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    db08:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    db0c:	2200      	movs	r2, #0
    db0e:	4b3a      	ldr	r3, [pc, #232]	; (dbf8 <trx_frame_write+0x108>)
    db10:	701a      	strb	r2, [r3, #0]
	return flags;
    db12:	9b01      	ldr	r3, [sp, #4]
    db14:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    db16:	4f39      	ldr	r7, [pc, #228]	; (dbfc <trx_frame_write+0x10c>)
    db18:	3201      	adds	r2, #1
    db1a:	4939      	ldr	r1, [pc, #228]	; (dc00 <trx_frame_write+0x110>)
    db1c:	0038      	movs	r0, r7
    db1e:	4b39      	ldr	r3, [pc, #228]	; (dc04 <trx_frame_write+0x114>)
    db20:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    db22:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    db24:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    db26:	7e1a      	ldrb	r2, [r3, #24]
    db28:	420a      	tst	r2, r1
    db2a:	d0fc      	beq.n	db26 <trx_frame_write+0x36>
    db2c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    db2e:	07d2      	lsls	r2, r2, #31
    db30:	d501      	bpl.n	db36 <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    db32:	2260      	movs	r2, #96	; 0x60
    db34:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    db36:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    db38:	7e1a      	ldrb	r2, [r3, #24]
    db3a:	420a      	tst	r2, r1
    db3c:	d0fc      	beq.n	db38 <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    db3e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    db40:	7e1a      	ldrb	r2, [r3, #24]
    db42:	420a      	tst	r2, r1
    db44:	d0fc      	beq.n	db40 <trx_frame_write+0x50>
    db46:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    db48:	0752      	lsls	r2, r2, #29
    db4a:	d50c      	bpl.n	db66 <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    db4c:	8b5a      	ldrh	r2, [r3, #26]
    db4e:	0752      	lsls	r2, r2, #29
    db50:	d501      	bpl.n	db56 <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    db52:	2204      	movs	r2, #4
    db54:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    db56:	4a29      	ldr	r2, [pc, #164]	; (dbfc <trx_frame_write+0x10c>)
    db58:	7992      	ldrb	r2, [r2, #6]
    db5a:	2a01      	cmp	r2, #1
    db5c:	d00b      	beq.n	db76 <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    db5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    db60:	b2d2      	uxtb	r2, r2
    db62:	4929      	ldr	r1, [pc, #164]	; (dc08 <trx_frame_write+0x118>)
    db64:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    db66:	4a25      	ldr	r2, [pc, #148]	; (dbfc <trx_frame_write+0x10c>)
    db68:	7992      	ldrb	r2, [r2, #6]
    db6a:	4694      	mov	ip, r2
    db6c:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    db6e:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    db70:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    db72:	2404      	movs	r4, #4
    db74:	e00d      	b.n	db92 <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    db76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    db78:	05d2      	lsls	r2, r2, #23
    db7a:	0dd2      	lsrs	r2, r2, #23
    db7c:	4922      	ldr	r1, [pc, #136]	; (dc08 <trx_frame_write+0x118>)
    db7e:	800a      	strh	r2, [r1, #0]
    db80:	e7f1      	b.n	db66 <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    db82:	4662      	mov	r2, ip
    db84:	2a01      	cmp	r2, #1
    db86:	d01e      	beq.n	dbc6 <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    db88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    db8a:	b2d2      	uxtb	r2, r2
    db8c:	4e1e      	ldr	r6, [pc, #120]	; (dc08 <trx_frame_write+0x118>)
    db8e:	8032      	strh	r2, [r6, #0]
    db90:	3101      	adds	r1, #1
	while (length--) {
    db92:	3d01      	subs	r5, #1
    db94:	b2ed      	uxtb	r5, r5
    db96:	2dff      	cmp	r5, #255	; 0xff
    db98:	d01b      	beq.n	dbd2 <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    db9a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    db9c:	423a      	tst	r2, r7
    db9e:	d0fc      	beq.n	db9a <trx_frame_write+0xaa>
    dba0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dba2:	423a      	tst	r2, r7
    dba4:	d001      	beq.n	dbaa <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dba6:	780a      	ldrb	r2, [r1, #0]
    dba8:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dbaa:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    dbac:	4202      	tst	r2, r0
    dbae:	d0fc      	beq.n	dbaa <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dbb0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    dbb2:	4222      	tst	r2, r4
    dbb4:	d0fc      	beq.n	dbb0 <trx_frame_write+0xc0>
    dbb6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dbb8:	4222      	tst	r2, r4
    dbba:	d0e9      	beq.n	db90 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dbbc:	8b5a      	ldrh	r2, [r3, #26]
    dbbe:	4222      	tst	r2, r4
    dbc0:	d0df      	beq.n	db82 <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dbc2:	835c      	strh	r4, [r3, #26]
    dbc4:	e7dd      	b.n	db82 <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dbc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dbc8:	05d2      	lsls	r2, r2, #23
    dbca:	0dd2      	lsrs	r2, r2, #23
    dbcc:	4e0e      	ldr	r6, [pc, #56]	; (dc08 <trx_frame_write+0x118>)
    dbce:	8032      	strh	r2, [r6, #0]
    dbd0:	e7de      	b.n	db90 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    dbd2:	2200      	movs	r2, #0
    dbd4:	490a      	ldr	r1, [pc, #40]	; (dc00 <trx_frame_write+0x110>)
    dbd6:	4809      	ldr	r0, [pc, #36]	; (dbfc <trx_frame_write+0x10c>)
    dbd8:	4b0a      	ldr	r3, [pc, #40]	; (dc04 <trx_frame_write+0x114>)
    dbda:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    dbdc:	23ff      	movs	r3, #255	; 0xff
    dbde:	4642      	mov	r2, r8
    dbe0:	4213      	tst	r3, r2
    dbe2:	d005      	beq.n	dbf0 <trx_frame_write+0x100>
		cpu_irq_enable();
    dbe4:	2201      	movs	r2, #1
    dbe6:	4b04      	ldr	r3, [pc, #16]	; (dbf8 <trx_frame_write+0x108>)
    dbe8:	701a      	strb	r2, [r3, #0]
    dbea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dbee:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    dbf0:	b002      	add	sp, #8
    dbf2:	bc04      	pop	{r2}
    dbf4:	4690      	mov	r8, r2
    dbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dbf8:	20000008 	.word	0x20000008
    dbfc:	2000222c 	.word	0x2000222c
    dc00:	200021f0 	.word	0x200021f0
    dc04:	00007029 	.word	0x00007029
    dc08:	200021e8 	.word	0x200021e8

0000dc0c <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    dc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc0e:	46c6      	mov	lr, r8
    dc10:	b500      	push	{lr}
    dc12:	b082      	sub	sp, #8
    dc14:	0006      	movs	r6, r0
    dc16:	000d      	movs	r5, r1
    dc18:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dc1a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    dc1e:	425a      	negs	r2, r3
    dc20:	4153      	adcs	r3, r2
    dc22:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    dc24:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    dc26:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    dc2a:	2200      	movs	r2, #0
    dc2c:	4b4d      	ldr	r3, [pc, #308]	; (dd64 <trx_sram_write+0x158>)
    dc2e:	701a      	strb	r2, [r3, #0]
	return flags;
    dc30:	9b01      	ldr	r3, [sp, #4]
    dc32:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    dc34:	4f4c      	ldr	r7, [pc, #304]	; (dd68 <trx_sram_write+0x15c>)
    dc36:	3201      	adds	r2, #1
    dc38:	494c      	ldr	r1, [pc, #304]	; (dd6c <trx_sram_write+0x160>)
    dc3a:	0038      	movs	r0, r7
    dc3c:	4b4c      	ldr	r3, [pc, #304]	; (dd70 <trx_sram_write+0x164>)
    dc3e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    dc40:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    dc42:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dc44:	7e1a      	ldrb	r2, [r3, #24]
    dc46:	420a      	tst	r2, r1
    dc48:	d0fc      	beq.n	dc44 <trx_sram_write+0x38>
    dc4a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dc4c:	07d2      	lsls	r2, r2, #31
    dc4e:	d501      	bpl.n	dc54 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dc50:	2240      	movs	r2, #64	; 0x40
    dc52:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    dc54:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dc56:	7e1a      	ldrb	r2, [r3, #24]
    dc58:	420a      	tst	r2, r1
    dc5a:	d0fc      	beq.n	dc56 <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    dc5c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dc5e:	7e1a      	ldrb	r2, [r3, #24]
    dc60:	420a      	tst	r2, r1
    dc62:	d0fc      	beq.n	dc5e <trx_sram_write+0x52>
    dc64:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dc66:	0752      	lsls	r2, r2, #29
    dc68:	d50c      	bpl.n	dc84 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dc6a:	8b5a      	ldrh	r2, [r3, #26]
    dc6c:	0752      	lsls	r2, r2, #29
    dc6e:	d501      	bpl.n	dc74 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dc70:	2204      	movs	r2, #4
    dc72:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dc74:	4a3c      	ldr	r2, [pc, #240]	; (dd68 <trx_sram_write+0x15c>)
    dc76:	7992      	ldrb	r2, [r2, #6]
    dc78:	2a01      	cmp	r2, #1
    dc7a:	d02b      	beq.n	dcd4 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dc7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dc7e:	b2d2      	uxtb	r2, r2
    dc80:	493c      	ldr	r1, [pc, #240]	; (dd74 <trx_sram_write+0x168>)
    dc82:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    dc84:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dc86:	7e1a      	ldrb	r2, [r3, #24]
    dc88:	420a      	tst	r2, r1
    dc8a:	d0fc      	beq.n	dc86 <trx_sram_write+0x7a>
    dc8c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dc8e:	07d2      	lsls	r2, r2, #31
    dc90:	d500      	bpl.n	dc94 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dc92:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    dc94:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dc96:	7e1a      	ldrb	r2, [r3, #24]
    dc98:	420a      	tst	r2, r1
    dc9a:	d0fc      	beq.n	dc96 <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    dc9c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dc9e:	7e1a      	ldrb	r2, [r3, #24]
    dca0:	420a      	tst	r2, r1
    dca2:	d0fc      	beq.n	dc9e <trx_sram_write+0x92>
    dca4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dca6:	0752      	lsls	r2, r2, #29
    dca8:	d50c      	bpl.n	dcc4 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dcaa:	8b5a      	ldrh	r2, [r3, #26]
    dcac:	0752      	lsls	r2, r2, #29
    dcae:	d501      	bpl.n	dcb4 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dcb0:	2204      	movs	r2, #4
    dcb2:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dcb4:	4a2c      	ldr	r2, [pc, #176]	; (dd68 <trx_sram_write+0x15c>)
    dcb6:	7992      	ldrb	r2, [r2, #6]
    dcb8:	2a01      	cmp	r2, #1
    dcba:	d011      	beq.n	dce0 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dcbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dcbe:	b2d2      	uxtb	r2, r2
    dcc0:	492c      	ldr	r1, [pc, #176]	; (dd74 <trx_sram_write+0x168>)
    dcc2:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dcc4:	4a28      	ldr	r2, [pc, #160]	; (dd68 <trx_sram_write+0x15c>)
    dcc6:	7992      	ldrb	r2, [r2, #6]
    dcc8:	4694      	mov	ip, r2
    dcca:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    dccc:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    dcce:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    dcd0:	2104      	movs	r1, #4
    dcd2:	e013      	b.n	dcfc <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dcd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dcd6:	05d2      	lsls	r2, r2, #23
    dcd8:	0dd2      	lsrs	r2, r2, #23
    dcda:	4926      	ldr	r1, [pc, #152]	; (dd74 <trx_sram_write+0x168>)
    dcdc:	800a      	strh	r2, [r1, #0]
    dcde:	e7d1      	b.n	dc84 <trx_sram_write+0x78>
    dce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dce2:	05d2      	lsls	r2, r2, #23
    dce4:	0dd2      	lsrs	r2, r2, #23
    dce6:	4923      	ldr	r1, [pc, #140]	; (dd74 <trx_sram_write+0x168>)
    dce8:	800a      	strh	r2, [r1, #0]
    dcea:	e7eb      	b.n	dcc4 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dcec:	4662      	mov	r2, ip
    dcee:	2a01      	cmp	r2, #1
    dcf0:	d01e      	beq.n	dd30 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dcf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dcf4:	b2d2      	uxtb	r2, r2
    dcf6:	4f1f      	ldr	r7, [pc, #124]	; (dd74 <trx_sram_write+0x168>)
    dcf8:	803a      	strh	r2, [r7, #0]
    dcfa:	3001      	adds	r0, #1
	while (length--) {
    dcfc:	3c01      	subs	r4, #1
    dcfe:	b2e4      	uxtb	r4, r4
    dd00:	2cff      	cmp	r4, #255	; 0xff
    dd02:	d01b      	beq.n	dd3c <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dd04:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    dd06:	4232      	tst	r2, r6
    dd08:	d0fc      	beq.n	dd04 <trx_sram_write+0xf8>
    dd0a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dd0c:	4232      	tst	r2, r6
    dd0e:	d001      	beq.n	dd14 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dd10:	7802      	ldrb	r2, [r0, #0]
    dd12:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dd14:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    dd16:	422a      	tst	r2, r5
    dd18:	d0fc      	beq.n	dd14 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dd1a:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    dd1c:	420a      	tst	r2, r1
    dd1e:	d0fc      	beq.n	dd1a <trx_sram_write+0x10e>
    dd20:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dd22:	420a      	tst	r2, r1
    dd24:	d0e9      	beq.n	dcfa <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dd26:	8b5a      	ldrh	r2, [r3, #26]
    dd28:	420a      	tst	r2, r1
    dd2a:	d0df      	beq.n	dcec <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dd2c:	8359      	strh	r1, [r3, #26]
    dd2e:	e7dd      	b.n	dcec <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dd30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dd32:	05d2      	lsls	r2, r2, #23
    dd34:	0dd2      	lsrs	r2, r2, #23
    dd36:	4f0f      	ldr	r7, [pc, #60]	; (dd74 <trx_sram_write+0x168>)
    dd38:	803a      	strh	r2, [r7, #0]
    dd3a:	e7de      	b.n	dcfa <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    dd3c:	2200      	movs	r2, #0
    dd3e:	490b      	ldr	r1, [pc, #44]	; (dd6c <trx_sram_write+0x160>)
    dd40:	4809      	ldr	r0, [pc, #36]	; (dd68 <trx_sram_write+0x15c>)
    dd42:	4b0b      	ldr	r3, [pc, #44]	; (dd70 <trx_sram_write+0x164>)
    dd44:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    dd46:	23ff      	movs	r3, #255	; 0xff
    dd48:	4642      	mov	r2, r8
    dd4a:	4213      	tst	r3, r2
    dd4c:	d005      	beq.n	dd5a <trx_sram_write+0x14e>
		cpu_irq_enable();
    dd4e:	2201      	movs	r2, #1
    dd50:	4b04      	ldr	r3, [pc, #16]	; (dd64 <trx_sram_write+0x158>)
    dd52:	701a      	strb	r2, [r3, #0]
    dd54:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dd58:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    dd5a:	b002      	add	sp, #8
    dd5c:	bc04      	pop	{r2}
    dd5e:	4690      	mov	r8, r2
    dd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd62:	46c0      	nop			; (mov r8, r8)
    dd64:	20000008 	.word	0x20000008
    dd68:	2000222c 	.word	0x2000222c
    dd6c:	200021f0 	.word	0x200021f0
    dd70:	00007029 	.word	0x00007029
    dd74:	200021e8 	.word	0x200021e8

0000dd78 <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    dd78:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd7a:	46d6      	mov	lr, sl
    dd7c:	464f      	mov	r7, r9
    dd7e:	4646      	mov	r6, r8
    dd80:	b5c0      	push	{r6, r7, lr}
    dd82:	b082      	sub	sp, #8
    dd84:	0004      	movs	r4, r0
    dd86:	000d      	movs	r5, r1
    dd88:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    dd8a:	2001      	movs	r0, #1
    dd8c:	4b56      	ldr	r3, [pc, #344]	; (dee8 <trx_sram_read+0x170>)
    dd8e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dd90:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    dd94:	425a      	negs	r2, r3
    dd96:	4153      	adcs	r3, r2
    dd98:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    dd9a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    dd9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    dda0:	2200      	movs	r2, #0
    dda2:	4b52      	ldr	r3, [pc, #328]	; (deec <trx_sram_read+0x174>)
    dda4:	701a      	strb	r2, [r3, #0]
	return flags;
    dda6:	9b01      	ldr	r3, [sp, #4]
    dda8:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    ddaa:	4e51      	ldr	r6, [pc, #324]	; (def0 <trx_sram_read+0x178>)
    ddac:	3201      	adds	r2, #1
    ddae:	4951      	ldr	r1, [pc, #324]	; (def4 <trx_sram_read+0x17c>)
    ddb0:	0030      	movs	r0, r6
    ddb2:	4b51      	ldr	r3, [pc, #324]	; (def8 <trx_sram_read+0x180>)
    ddb4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    ddb6:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    ddb8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ddba:	7e1a      	ldrb	r2, [r3, #24]
    ddbc:	420a      	tst	r2, r1
    ddbe:	d0fc      	beq.n	ddba <trx_sram_read+0x42>
    ddc0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    ddc2:	07d2      	lsls	r2, r2, #31
    ddc4:	d501      	bpl.n	ddca <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    ddc6:	2200      	movs	r2, #0
    ddc8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    ddca:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    ddcc:	7e1a      	ldrb	r2, [r3, #24]
    ddce:	420a      	tst	r2, r1
    ddd0:	d0fc      	beq.n	ddcc <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    ddd2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    ddd4:	7e1a      	ldrb	r2, [r3, #24]
    ddd6:	420a      	tst	r2, r1
    ddd8:	d0fc      	beq.n	ddd4 <trx_sram_read+0x5c>
    ddda:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dddc:	0752      	lsls	r2, r2, #29
    ddde:	d50c      	bpl.n	ddfa <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dde0:	8b5a      	ldrh	r2, [r3, #26]
    dde2:	0752      	lsls	r2, r2, #29
    dde4:	d501      	bpl.n	ddea <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dde6:	2204      	movs	r2, #4
    dde8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    ddea:	4a41      	ldr	r2, [pc, #260]	; (def0 <trx_sram_read+0x178>)
    ddec:	7992      	ldrb	r2, [r2, #6]
    ddee:	2a01      	cmp	r2, #1
    ddf0:	d033      	beq.n	de5a <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    ddf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ddf4:	b2d2      	uxtb	r2, r2
    ddf6:	4941      	ldr	r1, [pc, #260]	; (defc <trx_sram_read+0x184>)
    ddf8:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    ddfa:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    ddfc:	7e1a      	ldrb	r2, [r3, #24]
    ddfe:	420a      	tst	r2, r1
    de00:	d0fc      	beq.n	ddfc <trx_sram_read+0x84>
    de02:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    de04:	07d2      	lsls	r2, r2, #31
    de06:	d500      	bpl.n	de0a <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de08:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    de0a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    de0c:	7e1a      	ldrb	r2, [r3, #24]
    de0e:	420a      	tst	r2, r1
    de10:	d0fc      	beq.n	de0c <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    de12:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    de14:	7e1a      	ldrb	r2, [r3, #24]
    de16:	420a      	tst	r2, r1
    de18:	d0fc      	beq.n	de14 <trx_sram_read+0x9c>
    de1a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    de1c:	0752      	lsls	r2, r2, #29
    de1e:	d50c      	bpl.n	de3a <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    de20:	8b5a      	ldrh	r2, [r3, #26]
    de22:	0752      	lsls	r2, r2, #29
    de24:	d501      	bpl.n	de2a <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    de26:	2204      	movs	r2, #4
    de28:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    de2a:	4a31      	ldr	r2, [pc, #196]	; (def0 <trx_sram_read+0x178>)
    de2c:	7992      	ldrb	r2, [r2, #6]
    de2e:	2a01      	cmp	r2, #1
    de30:	d019      	beq.n	de66 <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    de32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de34:	b2db      	uxtb	r3, r3
    de36:	4a31      	ldr	r2, [pc, #196]	; (defc <trx_sram_read+0x184>)
    de38:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    de3a:	1e7b      	subs	r3, r7, #1
    de3c:	b2db      	uxtb	r3, r3
    de3e:	2f00      	cmp	r7, #0
    de40:	d03c      	beq.n	debc <trx_sram_read+0x144>
    de42:	3301      	adds	r3, #1
    de44:	469c      	mov	ip, r3
    de46:	44ac      	add	ip, r5
    de48:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    de4a:	4e29      	ldr	r6, [pc, #164]	; (def0 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    de4c:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de4e:	2300      	movs	r3, #0
    de50:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    de52:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    de54:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    de56:	46b1      	mov	r9, r6
    de58:	e015      	b.n	de86 <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    de5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    de5c:	05d2      	lsls	r2, r2, #23
    de5e:	0dd2      	lsrs	r2, r2, #23
    de60:	4926      	ldr	r1, [pc, #152]	; (defc <trx_sram_read+0x184>)
    de62:	800a      	strh	r2, [r1, #0]
    de64:	e7c9      	b.n	ddfa <trx_sram_read+0x82>
    de66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    de68:	05db      	lsls	r3, r3, #23
    de6a:	0ddb      	lsrs	r3, r3, #23
    de6c:	4a23      	ldr	r2, [pc, #140]	; (defc <trx_sram_read+0x184>)
    de6e:	8013      	strh	r3, [r2, #0]
    de70:	e7e3      	b.n	de3a <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    de72:	464a      	mov	r2, r9
    de74:	7992      	ldrb	r2, [r2, #6]
    de76:	2a01      	cmp	r2, #1
    de78:	d01c      	beq.n	deb4 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    de7a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    de7c:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    de7e:	702f      	strb	r7, [r5, #0]
		data++;
    de80:	3501      	adds	r5, #1
	while (length--) {
    de82:	4565      	cmp	r5, ip
    de84:	d01a      	beq.n	debc <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    de86:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    de88:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    de8a:	4202      	tst	r2, r0
    de8c:	d0fc      	beq.n	de88 <trx_sram_read+0x110>
    de8e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    de90:	4202      	tst	r2, r0
    de92:	d001      	beq.n	de98 <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de94:	4652      	mov	r2, sl
    de96:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    de98:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    de9a:	4222      	tst	r2, r4
    de9c:	d0fc      	beq.n	de98 <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    de9e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    dea0:	420a      	tst	r2, r1
    dea2:	d0fc      	beq.n	de9e <trx_sram_read+0x126>
    dea4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dea6:	420a      	tst	r2, r1
    dea8:	d0e9      	beq.n	de7e <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    deaa:	8b5a      	ldrh	r2, [r3, #26]
    deac:	420a      	tst	r2, r1
    deae:	d0e0      	beq.n	de72 <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    deb0:	8359      	strh	r1, [r3, #26]
    deb2:	e7de      	b.n	de72 <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    deb4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    deb6:	05ff      	lsls	r7, r7, #23
    deb8:	0dff      	lsrs	r7, r7, #23
    deba:	e7e0      	b.n	de7e <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    debc:	2200      	movs	r2, #0
    debe:	490d      	ldr	r1, [pc, #52]	; (def4 <trx_sram_read+0x17c>)
    dec0:	480b      	ldr	r0, [pc, #44]	; (def0 <trx_sram_read+0x178>)
    dec2:	4b0d      	ldr	r3, [pc, #52]	; (def8 <trx_sram_read+0x180>)
    dec4:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    dec6:	23ff      	movs	r3, #255	; 0xff
    dec8:	4642      	mov	r2, r8
    deca:	4213      	tst	r3, r2
    decc:	d005      	beq.n	deda <trx_sram_read+0x162>
		cpu_irq_enable();
    dece:	2201      	movs	r2, #1
    ded0:	4b06      	ldr	r3, [pc, #24]	; (deec <trx_sram_read+0x174>)
    ded2:	701a      	strb	r2, [r3, #0]
    ded4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ded8:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    deda:	b002      	add	sp, #8
    dedc:	bc1c      	pop	{r2, r3, r4}
    dede:	4690      	mov	r8, r2
    dee0:	4699      	mov	r9, r3
    dee2:	46a2      	mov	sl, r4
    dee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dee6:	46c0      	nop			; (mov r8, r8)
    dee8:	00006239 	.word	0x00006239
    deec:	20000008 	.word	0x20000008
    def0:	2000222c 	.word	0x2000222c
    def4:	200021f0 	.word	0x200021f0
    def8:	00007029 	.word	0x00007029
    defc:	200021e8 	.word	0x200021e8

0000df00 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    df00:	b5f0      	push	{r4, r5, r6, r7, lr}
    df02:	46d6      	mov	lr, sl
    df04:	464f      	mov	r7, r9
    df06:	4646      	mov	r6, r8
    df08:	b5c0      	push	{r6, r7, lr}
    df0a:	0006      	movs	r6, r0
    df0c:	468a      	mov	sl, r1
    df0e:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    df10:	2001      	movs	r0, #1
    df12:	4b76      	ldr	r3, [pc, #472]	; (e0ec <trx_aes_wrrd+0x1ec>)
    df14:	4798      	blx	r3

	ENTER_TRX_REGION();
    df16:	2100      	movs	r1, #0
    df18:	2000      	movs	r0, #0
    df1a:	4b75      	ldr	r3, [pc, #468]	; (e0f0 <trx_aes_wrrd+0x1f0>)
    df1c:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    df1e:	4f75      	ldr	r7, [pc, #468]	; (e0f4 <trx_aes_wrrd+0x1f4>)
    df20:	2201      	movs	r2, #1
    df22:	4975      	ldr	r1, [pc, #468]	; (e0f8 <trx_aes_wrrd+0x1f8>)
    df24:	0038      	movs	r0, r7
    df26:	4b75      	ldr	r3, [pc, #468]	; (e0fc <trx_aes_wrrd+0x1fc>)
    df28:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    df2a:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    df2c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    df2e:	7e1a      	ldrb	r2, [r3, #24]
    df30:	420a      	tst	r2, r1
    df32:	d0fc      	beq.n	df2e <trx_aes_wrrd+0x2e>
    df34:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    df36:	07d2      	lsls	r2, r2, #31
    df38:	d501      	bpl.n	df3e <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    df3a:	2240      	movs	r2, #64	; 0x40
    df3c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    df3e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    df40:	7e1a      	ldrb	r2, [r3, #24]
    df42:	420a      	tst	r2, r1
    df44:	d0fc      	beq.n	df40 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    df46:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    df48:	7e1a      	ldrb	r2, [r3, #24]
    df4a:	420a      	tst	r2, r1
    df4c:	d0fc      	beq.n	df48 <trx_aes_wrrd+0x48>
    df4e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    df50:	0752      	lsls	r2, r2, #29
    df52:	d50c      	bpl.n	df6e <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    df54:	8b5a      	ldrh	r2, [r3, #26]
    df56:	0752      	lsls	r2, r2, #29
    df58:	d501      	bpl.n	df5e <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    df5a:	2204      	movs	r2, #4
    df5c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    df5e:	4a65      	ldr	r2, [pc, #404]	; (e0f4 <trx_aes_wrrd+0x1f4>)
    df60:	7992      	ldrb	r2, [r2, #6]
    df62:	2a01      	cmp	r2, #1
    df64:	d055      	beq.n	e012 <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    df66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df68:	b2d2      	uxtb	r2, r2
    df6a:	4965      	ldr	r1, [pc, #404]	; (e100 <trx_aes_wrrd+0x200>)
    df6c:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    df6e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    df70:	7e1a      	ldrb	r2, [r3, #24]
    df72:	420a      	tst	r2, r1
    df74:	d0fc      	beq.n	df70 <trx_aes_wrrd+0x70>
    df76:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    df78:	07d2      	lsls	r2, r2, #31
    df7a:	d500      	bpl.n	df7e <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    df7c:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    df7e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    df80:	7e1a      	ldrb	r2, [r3, #24]
    df82:	420a      	tst	r2, r1
    df84:	d0fc      	beq.n	df80 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    df86:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    df88:	7e1a      	ldrb	r2, [r3, #24]
    df8a:	420a      	tst	r2, r1
    df8c:	d0fc      	beq.n	df88 <trx_aes_wrrd+0x88>
    df8e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    df90:	0752      	lsls	r2, r2, #29
    df92:	d50c      	bpl.n	dfae <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    df94:	8b5a      	ldrh	r2, [r3, #26]
    df96:	0752      	lsls	r2, r2, #29
    df98:	d501      	bpl.n	df9e <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    df9a:	2204      	movs	r2, #4
    df9c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    df9e:	4a55      	ldr	r2, [pc, #340]	; (e0f4 <trx_aes_wrrd+0x1f4>)
    dfa0:	7992      	ldrb	r2, [r2, #6]
    dfa2:	2a01      	cmp	r2, #1
    dfa4:	d03b      	beq.n	e01e <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dfa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dfa8:	b2d2      	uxtb	r2, r2
    dfaa:	4955      	ldr	r1, [pc, #340]	; (e100 <trx_aes_wrrd+0x200>)
    dfac:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    dfae:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    dfb0:	7e1a      	ldrb	r2, [r3, #24]
    dfb2:	420a      	tst	r2, r1
    dfb4:	d0fc      	beq.n	dfb0 <trx_aes_wrrd+0xb0>
    dfb6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    dfb8:	07d2      	lsls	r2, r2, #31
    dfba:	d502      	bpl.n	dfc2 <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    dfbc:	4652      	mov	r2, sl
    dfbe:	7812      	ldrb	r2, [r2, #0]
    dfc0:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    dfc2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    dfc4:	7e1a      	ldrb	r2, [r3, #24]
    dfc6:	420a      	tst	r2, r1
    dfc8:	d0fc      	beq.n	dfc4 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    dfca:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    dfcc:	7e1a      	ldrb	r2, [r3, #24]
    dfce:	420a      	tst	r2, r1
    dfd0:	d0fc      	beq.n	dfcc <trx_aes_wrrd+0xcc>
    dfd2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    dfd4:	0752      	lsls	r2, r2, #29
    dfd6:	d50c      	bpl.n	dff2 <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    dfd8:	8b5a      	ldrh	r2, [r3, #26]
    dfda:	0752      	lsls	r2, r2, #29
    dfdc:	d501      	bpl.n	dfe2 <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    dfde:	2204      	movs	r2, #4
    dfe0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    dfe2:	4a44      	ldr	r2, [pc, #272]	; (e0f4 <trx_aes_wrrd+0x1f4>)
    dfe4:	7992      	ldrb	r2, [r2, #6]
    dfe6:	2a01      	cmp	r2, #1
    dfe8:	d01f      	beq.n	e02a <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    dfea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfec:	b2db      	uxtb	r3, r3
    dfee:	4a44      	ldr	r2, [pc, #272]	; (e100 <trx_aes_wrrd+0x200>)
    dff0:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    dff2:	2700      	movs	r7, #0
    dff4:	2c00      	cmp	r4, #0
    dff6:	d043      	beq.n	e080 <trx_aes_wrrd+0x180>
    dff8:	4656      	mov	r6, sl
    dffa:	3c01      	subs	r4, #1
    dffc:	b2e4      	uxtb	r4, r4
    dffe:	3401      	adds	r4, #1
    e000:	44a2      	add	sl, r4
    e002:	46d0      	mov	r8, sl
    e004:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    e006:	4d3b      	ldr	r5, [pc, #236]	; (e0f4 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    e008:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    e00a:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    e00c:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e00e:	46a9      	mov	r9, r5
    e010:	e01b      	b.n	e04a <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e014:	05d2      	lsls	r2, r2, #23
    e016:	0dd2      	lsrs	r2, r2, #23
    e018:	4939      	ldr	r1, [pc, #228]	; (e100 <trx_aes_wrrd+0x200>)
    e01a:	800a      	strh	r2, [r1, #0]
    e01c:	e7a7      	b.n	df6e <trx_aes_wrrd+0x6e>
    e01e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e020:	05d2      	lsls	r2, r2, #23
    e022:	0dd2      	lsrs	r2, r2, #23
    e024:	4936      	ldr	r1, [pc, #216]	; (e100 <trx_aes_wrrd+0x200>)
    e026:	800a      	strh	r2, [r1, #0]
    e028:	e7c1      	b.n	dfae <trx_aes_wrrd+0xae>
    e02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e02c:	05db      	lsls	r3, r3, #23
    e02e:	0ddb      	lsrs	r3, r3, #23
    e030:	4a33      	ldr	r2, [pc, #204]	; (e100 <trx_aes_wrrd+0x200>)
    e032:	8013      	strh	r3, [r2, #0]
    e034:	e7dd      	b.n	dff2 <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e036:	464a      	mov	r2, r9
    e038:	7992      	ldrb	r2, [r2, #6]
    e03a:	2a01      	cmp	r2, #1
    e03c:	d01c      	beq.n	e078 <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e03e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e040:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    e042:	7037      	strb	r7, [r6, #0]
    e044:	3601      	adds	r6, #1
	while (length > 0) {
    e046:	45b0      	cmp	r8, r6
    e048:	d01a      	beq.n	e080 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e04a:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e04c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    e04e:	4202      	tst	r2, r0
    e050:	d0fc      	beq.n	e04c <trx_aes_wrrd+0x14c>
    e052:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e054:	4202      	tst	r2, r0
    e056:	d001      	beq.n	e05c <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e058:	7872      	ldrb	r2, [r6, #1]
    e05a:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e05c:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    e05e:	4222      	tst	r2, r4
    e060:	d0fc      	beq.n	e05c <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e062:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    e064:	420a      	tst	r2, r1
    e066:	d0fc      	beq.n	e062 <trx_aes_wrrd+0x162>
    e068:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e06a:	420a      	tst	r2, r1
    e06c:	d0e9      	beq.n	e042 <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e06e:	8b5a      	ldrh	r2, [r3, #26]
    e070:	420a      	tst	r2, r1
    e072:	d0e0      	beq.n	e036 <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e074:	8359      	strh	r1, [r3, #26]
    e076:	e7de      	b.n	e036 <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e078:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e07a:	05ff      	lsls	r7, r7, #23
    e07c:	0dff      	lsrs	r7, r7, #23
    e07e:	e7e0      	b.n	e042 <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e080:	4b1c      	ldr	r3, [pc, #112]	; (e0f4 <trx_aes_wrrd+0x1f4>)
    e082:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    e084:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e086:	7e1a      	ldrb	r2, [r3, #24]
    e088:	420a      	tst	r2, r1
    e08a:	d0fc      	beq.n	e086 <trx_aes_wrrd+0x186>
    e08c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e08e:	07d2      	lsls	r2, r2, #31
    e090:	d501      	bpl.n	e096 <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e092:	2200      	movs	r2, #0
    e094:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    e096:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e098:	7e1a      	ldrb	r2, [r3, #24]
    e09a:	420a      	tst	r2, r1
    e09c:	d0fc      	beq.n	e098 <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    e09e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e0a0:	7e1a      	ldrb	r2, [r3, #24]
    e0a2:	420a      	tst	r2, r1
    e0a4:	d0fc      	beq.n	e0a0 <trx_aes_wrrd+0x1a0>
    e0a6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e0a8:	0752      	lsls	r2, r2, #29
    e0aa:	d50a      	bpl.n	e0c2 <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e0ac:	8b5a      	ldrh	r2, [r3, #26]
    e0ae:	0752      	lsls	r2, r2, #29
    e0b0:	d501      	bpl.n	e0b6 <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e0b2:	2204      	movs	r2, #4
    e0b4:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e0b6:	4a0f      	ldr	r2, [pc, #60]	; (e0f4 <trx_aes_wrrd+0x1f4>)
    e0b8:	7992      	ldrb	r2, [r2, #6]
    e0ba:	2a01      	cmp	r2, #1
    e0bc:	d011      	beq.n	e0e2 <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e0be:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e0c0:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    e0c2:	4653      	mov	r3, sl
    e0c4:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    e0c6:	2200      	movs	r2, #0
    e0c8:	490b      	ldr	r1, [pc, #44]	; (e0f8 <trx_aes_wrrd+0x1f8>)
    e0ca:	480a      	ldr	r0, [pc, #40]	; (e0f4 <trx_aes_wrrd+0x1f4>)
    e0cc:	4b0b      	ldr	r3, [pc, #44]	; (e0fc <trx_aes_wrrd+0x1fc>)
    e0ce:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    e0d0:	2100      	movs	r1, #0
    e0d2:	2000      	movs	r0, #0
    e0d4:	4b0b      	ldr	r3, [pc, #44]	; (e104 <trx_aes_wrrd+0x204>)
    e0d6:	4798      	blx	r3
}
    e0d8:	bc1c      	pop	{r2, r3, r4}
    e0da:	4690      	mov	r8, r2
    e0dc:	4699      	mov	r9, r3
    e0de:	46a2      	mov	sl, r4
    e0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e0e2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e0e4:	05ff      	lsls	r7, r7, #23
    e0e6:	0dff      	lsrs	r7, r7, #23
    e0e8:	e7eb      	b.n	e0c2 <trx_aes_wrrd+0x1c2>
    e0ea:	46c0      	nop			; (mov r8, r8)
    e0ec:	00006239 	.word	0x00006239
    e0f0:	000063dd 	.word	0x000063dd
    e0f4:	2000222c 	.word	0x2000222c
    e0f8:	200021f0 	.word	0x200021f0
    e0fc:	00007029 	.word	0x00007029
    e100:	200021e8 	.word	0x200021e8
    e104:	000063bd 	.word	0x000063bd

0000e108 <ReadMacAddress>:
* Overview:            Uses the MAC Address from the EEPROM for addressing
*
* Note:
**********************************************************************/
void ReadMacAddress(void)
{
    e108:	b530      	push	{r4, r5, lr}
    e10a:	4b09      	ldr	r3, [pc, #36]	; (e130 <ReadMacAddress+0x28>)
    e10c:	4d09      	ldr	r5, [pc, #36]	; (e134 <ReadMacAddress+0x2c>)
#if ((BOARD == SAMR21ZLL_EK) || (BOARD == SAMR30_MODULE_XPLAINED_PRO))
   uint8_t i = 0, j = 0;
   for (i = 0; i < 8; i += 2, j++)
    e10e:	4c0a      	ldr	r4, [pc, #40]	; (e138 <ReadMacAddress+0x30>)
   {
     myLongAddress[i] = (NVM_UID_ADDRESS[j] & 0xFF);
    e110:	8818      	ldrh	r0, [r3, #0]
    e112:	195a      	adds	r2, r3, r5
    e114:	4909      	ldr	r1, [pc, #36]	; (e13c <ReadMacAddress+0x34>)
    e116:	1851      	adds	r1, r2, r1
    e118:	7008      	strb	r0, [r1, #0]
     myLongAddress[i + 1] = (NVM_UID_ADDRESS[j] >> 8);
    e11a:	8819      	ldrh	r1, [r3, #0]
    e11c:	4808      	ldr	r0, [pc, #32]	; (e140 <ReadMacAddress+0x38>)
    e11e:	4684      	mov	ip, r0
    e120:	4462      	add	r2, ip
    e122:	0a09      	lsrs	r1, r1, #8
    e124:	7011      	strb	r1, [r2, #0]
    e126:	3302      	adds	r3, #2
   for (i = 0; i < 8; i += 2, j++)
    e128:	42a3      	cmp	r3, r4
    e12a:	d1f1      	bne.n	e110 <ReadMacAddress+0x8>
   for(uint8_t i=0; i<MY_ADDRESS_LENGTH; i++)
   {
       myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1];
   }
#endif
}
    e12c:	bd30      	pop	{r4, r5, pc}
    e12e:	46c0      	nop			; (mov r8, r8)
    e130:	0080400a 	.word	0x0080400a
    e134:	20000010 	.word	0x20000010
    e138:	00804012 	.word	0x00804012
    e13c:	ff7fbff6 	.word	0xff7fbff6
    e140:	ff7fbff7 	.word	0xff7fbff7

0000e144 <main>:
{
    e144:	b570      	push	{r4, r5, r6, lr}
    system_init();
    e146:	4b19      	ldr	r3, [pc, #100]	; (e1ac <main+0x68>)
    e148:	4798      	blx	r3
    delay_init();
    e14a:	4b19      	ldr	r3, [pc, #100]	; (e1b0 <main+0x6c>)
    e14c:	4798      	blx	r3
    cpu_irq_enable();
    e14e:	2201      	movs	r2, #1
    e150:	4b18      	ldr	r3, [pc, #96]	; (e1b4 <main+0x70>)
    e152:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    e154:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e158:	b662      	cpsie	i
    sio2host_init();
    e15a:	4b17      	ldr	r3, [pc, #92]	; (e1b8 <main+0x74>)
    e15c:	4798      	blx	r3
	RNCmd_CmdInit();
    e15e:	4b17      	ldr	r3, [pc, #92]	; (e1bc <main+0x78>)
    e160:	4798      	blx	r3
    ReadMacAddress();
    e162:	4b17      	ldr	r3, [pc, #92]	; (e1c0 <main+0x7c>)
    e164:	4798      	blx	r3
    SYS_TimerInit();
    e166:	4c17      	ldr	r4, [pc, #92]	; (e1c4 <main+0x80>)
    e168:	47a0      	blx	r4
    SYS_TimerInit();
    e16a:	47a0      	blx	r4
    nvm_init(INT_FLASH);
    e16c:	2000      	movs	r0, #0
    e16e:	4b16      	ldr	r3, [pc, #88]	; (e1c8 <main+0x84>)
    e170:	4798      	blx	r3
    PDS_Init();
    e172:	4b16      	ldr	r3, [pc, #88]	; (e1cc <main+0x88>)
    e174:	4798      	blx	r3
	freezer_enable = false;	//AT command page init	
    e176:	2200      	movs	r2, #0
    e178:	4b15      	ldr	r3, [pc, #84]	; (e1d0 <main+0x8c>)
    e17a:	701a      	strb	r2, [r3, #0]
		if(main_state==0)
    e17c:	4c15      	ldr	r4, [pc, #84]	; (e1d4 <main+0x90>)
			Run_Demo();
    e17e:	4e16      	ldr	r6, [pc, #88]	; (e1d8 <main+0x94>)
			RNCmdTask();
    e180:	4d16      	ldr	r5, [pc, #88]	; (e1dc <main+0x98>)
    e182:	e001      	b.n	e188 <main+0x44>
			Run_Demo();
    e184:	47b0      	blx	r6
			RNCmdTask();
    e186:	47a8      	blx	r5
		if(main_state==0)
    e188:	7823      	ldrb	r3, [r4, #0]
    e18a:	2b00      	cmp	r3, #0
    e18c:	d1fa      	bne.n	e184 <main+0x40>
			RNCmdTask();
    e18e:	4b13      	ldr	r3, [pc, #76]	; (e1dc <main+0x98>)
    e190:	4798      	blx	r3
			if(!RNCmd_IsCfgMode())
    e192:	4b13      	ldr	r3, [pc, #76]	; (e1e0 <main+0x9c>)
    e194:	4798      	blx	r3
    e196:	2800      	cmp	r0, #0
    e198:	d1f6      	bne.n	e188 <main+0x44>
				main_state = 1;
    e19a:	2201      	movs	r2, #1
    e19c:	4b0d      	ldr	r3, [pc, #52]	; (e1d4 <main+0x90>)
    e19e:	701a      	strb	r2, [r3, #0]
				Initialize_Demo(freezer_enable);
    e1a0:	4b0b      	ldr	r3, [pc, #44]	; (e1d0 <main+0x8c>)
    e1a2:	7818      	ldrb	r0, [r3, #0]
    e1a4:	4b0f      	ldr	r3, [pc, #60]	; (e1e4 <main+0xa0>)
    e1a6:	4798      	blx	r3
    e1a8:	e7ee      	b.n	e188 <main+0x44>
    e1aa:	46c0      	nop			; (mov r8, r8)
    e1ac:	00007e55 	.word	0x00007e55
    e1b0:	000061f9 	.word	0x000061f9
    e1b4:	20000008 	.word	0x20000008
    e1b8:	0000854d 	.word	0x0000854d
    e1bc:	0000f695 	.word	0x0000f695
    e1c0:	0000e109 	.word	0x0000e109
    e1c4:	0000d0ed 	.word	0x0000d0ed
    e1c8:	0000d46d 	.word	0x0000d46d
    e1cc:	0000a151 	.word	0x0000a151
    e1d0:	20001ccd 	.word	0x20001ccd
    e1d4:	20001c88 	.word	0x20001c88
    e1d8:	0000f93d 	.word	0x0000f93d
    e1dc:	0000f6f9 	.word	0x0000f6f9
    e1e0:	0000f769 	.word	0x0000f769
    e1e4:	0000f825 	.word	0x0000f825

0000e1e8 <num2HexStr>:
*		a number of digits is input by parameter pHex, and hexSize will define digit size by byte
*		HEX String is output by parameter pTxt and txtSize
*
*****************************************************************************************/
static void num2HexStr(uint8_t *pHex, uint8_t hexSize, uint8_t *pTxt, uint8_t txtSize)
{
    e1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t i, datah, datal;
	
	if(!pTxt || !pHex)
    e1ea:	2a00      	cmp	r2, #0
    e1ec:	d024      	beq.n	e238 <num2HexStr+0x50>
    e1ee:	2800      	cmp	r0, #0
    e1f0:	d022      	beq.n	e238 <num2HexStr+0x50>
		return;
	if(hexSize == 0 || hexSize > 8)	//hex number need to be equal or smaller than 8
		return;
	if(txtSize < 2*hexSize)	//text buffer size must be greater than 2 times of hex size
    e1f2:	004c      	lsls	r4, r1, #1
    e1f4:	42a3      	cmp	r3, r4
    e1f6:	db1f      	blt.n	e238 <num2HexStr+0x50>
		return;
	
	for(i=0; i<hexSize; i++)
    e1f8:	3901      	subs	r1, #1
    e1fa:	b2c9      	uxtb	r1, r1
    e1fc:	2907      	cmp	r1, #7
    e1fe:	d81b      	bhi.n	e238 <num2HexStr+0x50>
    e200:	0004      	movs	r4, r0
    e202:	3101      	adds	r1, #1
    e204:	1840      	adds	r0, r0, r1
	{
		datah = *pHex++;
		datal = datah&0x0f;
    e206:	270f      	movs	r7, #15
    e208:	e004      	b.n	e214 <num2HexStr+0x2c>
		*pTxt++ = datah;
		if(datal>=0x0a)
			datal += 87;//55;
		else
			datal += 0x30;
		*pTxt++ = datal;
    e20a:	7073      	strb	r3, [r6, #1]
    e20c:	3401      	adds	r4, #1
    e20e:	3202      	adds	r2, #2
	for(i=0; i<hexSize; i++)
    e210:	4284      	cmp	r4, r0
    e212:	d011      	beq.n	e238 <num2HexStr+0x50>
		datah = *pHex++;
    e214:	7823      	ldrb	r3, [r4, #0]
		datal = datah&0x0f;
    e216:	0039      	movs	r1, r7
    e218:	4019      	ands	r1, r3
		datah = datah>>4;
    e21a:	091b      	lsrs	r3, r3, #4
			datah += 0x30;
    e21c:	001d      	movs	r5, r3
    e21e:	3530      	adds	r5, #48	; 0x30
		if(datah>=0x0a)
    e220:	2b09      	cmp	r3, #9
    e222:	d901      	bls.n	e228 <num2HexStr+0x40>
			datah += 87;//55;
    e224:	3357      	adds	r3, #87	; 0x57
    e226:	001d      	movs	r5, r3
    e228:	0016      	movs	r6, r2
		*pTxt++ = datah;
    e22a:	7015      	strb	r5, [r2, #0]
			datal += 0x30;
    e22c:	000b      	movs	r3, r1
    e22e:	3330      	adds	r3, #48	; 0x30
		if(datal>=0x0a)
    e230:	2909      	cmp	r1, #9
    e232:	d9ea      	bls.n	e20a <num2HexStr+0x22>
			datal += 87;//55;
    e234:	3327      	adds	r3, #39	; 0x27
    e236:	e7e8      	b.n	e20a <num2HexStr+0x22>
	}
}
    e238:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e23a <num2Hex>:
*		it can only convert 1 byte digit, and string converted is only 1 or 2 characters.
*
*****************************************************************************************/
static void num2Hex(uint8_t num, uint8_t *pTxt, uint8_t* txtSize)
{
	if(!pTxt)
    e23a:	2900      	cmp	r1, #0
    e23c:	d015      	beq.n	e26a <num2Hex+0x30>
		return;
		
	if(num < 10)
    e23e:	2809      	cmp	r0, #9
    e240:	d90f      	bls.n	e262 <num2Hex+0x28>
	{
		pTxt[0] = num + 48;
		*txtSize = 1;
	}
	else if(num < 16)
    e242:	280f      	cmp	r0, #15
    e244:	d912      	bls.n	e26c <num2Hex+0x32>
	{
		pTxt[0] = num + 87;
		*txtSize = 1;
	}
	else if(num < 0xa0)
    e246:	289f      	cmp	r0, #159	; 0x9f
    e248:	d81d      	bhi.n	e286 <num2Hex+0x4c>
	{
		if(num%16 < 10)
    e24a:	230f      	movs	r3, #15
    e24c:	4003      	ands	r3, r0
    e24e:	2b09      	cmp	r3, #9
    e250:	d811      	bhi.n	e276 <num2Hex+0x3c>
		{
			pTxt[0] = num/16 + 48;
    e252:	0900      	lsrs	r0, r0, #4
    e254:	3030      	adds	r0, #48	; 0x30
    e256:	7008      	strb	r0, [r1, #0]
			pTxt[1] = num%16 + 48;
    e258:	3330      	adds	r3, #48	; 0x30
    e25a:	704b      	strb	r3, [r1, #1]
			*txtSize = 2;
    e25c:	2302      	movs	r3, #2
    e25e:	7013      	strb	r3, [r2, #0]
    e260:	e003      	b.n	e26a <num2Hex+0x30>
		pTxt[0] = num + 48;
    e262:	3030      	adds	r0, #48	; 0x30
    e264:	7008      	strb	r0, [r1, #0]
		*txtSize = 1;
    e266:	2301      	movs	r3, #1
    e268:	7013      	strb	r3, [r2, #0]
			pTxt[0] = num/16 + 87;
			pTxt[1] = num%16 + 87;
			*txtSize = 2;
		}
	}
}
    e26a:	4770      	bx	lr
		pTxt[0] = num + 87;
    e26c:	3057      	adds	r0, #87	; 0x57
    e26e:	7008      	strb	r0, [r1, #0]
		*txtSize = 1;
    e270:	2301      	movs	r3, #1
    e272:	7013      	strb	r3, [r2, #0]
    e274:	e7f9      	b.n	e26a <num2Hex+0x30>
			pTxt[0] = num/16 + 48;
    e276:	0900      	lsrs	r0, r0, #4
    e278:	3030      	adds	r0, #48	; 0x30
    e27a:	7008      	strb	r0, [r1, #0]
			pTxt[1] = num%16 + 87;
    e27c:	3357      	adds	r3, #87	; 0x57
    e27e:	704b      	strb	r3, [r1, #1]
			*txtSize = 2;
    e280:	2302      	movs	r3, #2
    e282:	7013      	strb	r3, [r2, #0]
    e284:	e7f1      	b.n	e26a <num2Hex+0x30>
		if(num%16 < 10)
    e286:	230f      	movs	r3, #15
    e288:	4003      	ands	r3, r0
    e28a:	2b09      	cmp	r3, #9
    e28c:	d907      	bls.n	e29e <num2Hex+0x64>
			pTxt[0] = num/16 + 87;
    e28e:	0900      	lsrs	r0, r0, #4
    e290:	3057      	adds	r0, #87	; 0x57
    e292:	7008      	strb	r0, [r1, #0]
			pTxt[1] = num%16 + 87;
    e294:	3357      	adds	r3, #87	; 0x57
    e296:	704b      	strb	r3, [r1, #1]
			*txtSize = 2;
    e298:	2302      	movs	r3, #2
    e29a:	7013      	strb	r3, [r2, #0]
    e29c:	e7e5      	b.n	e26a <num2Hex+0x30>
			pTxt[0] = num/16 + 87;
    e29e:	0900      	lsrs	r0, r0, #4
    e2a0:	3057      	adds	r0, #87	; 0x57
    e2a2:	7008      	strb	r0, [r1, #0]
			pTxt[1] = num%16 + 48;
    e2a4:	3330      	adds	r3, #48	; 0x30
    e2a6:	704b      	strb	r3, [r1, #1]
			*txtSize = 2;
    e2a8:	2302      	movs	r3, #2
    e2aa:	7013      	strb	r3, [r2, #0]
    e2ac:	e7dd      	b.n	e26a <num2Hex+0x30>

0000e2ae <char2byte>:
*
*****************************************************************************************/
static uint8_t char2byte(uint8_t charb)	//only used by str2byte()
{
	uint8_t a;
	if(charb >= 0x41 && charb <= 0x46 )
    e2ae:	0003      	movs	r3, r0
    e2b0:	3b41      	subs	r3, #65	; 0x41
    e2b2:	2b05      	cmp	r3, #5
    e2b4:	d909      	bls.n	e2ca <char2byte+0x1c>
		a = charb - 0x41 + 10;
	else if(charb >= 0x61 && charb <= 0x66 )
    e2b6:	0003      	movs	r3, r0
    e2b8:	3b61      	subs	r3, #97	; 0x61
    e2ba:	2b05      	cmp	r3, #5
    e2bc:	d908      	bls.n	e2d0 <char2byte+0x22>
		a = charb - 0x61 + 10;
	else if(charb >= 0x30 && charb <= 0x39 )
    e2be:	3830      	subs	r0, #48	; 0x30
    e2c0:	b2c0      	uxtb	r0, r0
    e2c2:	2809      	cmp	r0, #9
    e2c4:	d903      	bls.n	e2ce <char2byte+0x20>
		a = charb - 0x30;
	else
		a = 0;
    e2c6:	2000      	movs	r0, #0
    e2c8:	e001      	b.n	e2ce <char2byte+0x20>
		a = charb - 0x41 + 10;
    e2ca:	3837      	subs	r0, #55	; 0x37
    e2cc:	b2c0      	uxtb	r0, r0
	return a;
}
    e2ce:	4770      	bx	lr
		a = charb - 0x61 + 10;
    e2d0:	3857      	subs	r0, #87	; 0x57
    e2d2:	b2c0      	uxtb	r0, r0
    e2d4:	e7fb      	b.n	e2ce <char2byte+0x20>
    e2d6:	Address 0x0000e2d6 is out of bounds.


0000e2d8 <str2byte>:
*      this function convert String to unsigned byte
*		String can only be 1 or 2 characters
*
*****************************************************************************************/
static uint8_t str2byte(uint8_t* str)
{
    e2d8:	b570      	push	{r4, r5, r6, lr}
	uint8_t strb[3];
	uint8_t bb;
	strb[0] = *str++;
	strb[1] = *str;
    e2da:	7845      	ldrb	r5, [r0, #1]
	strb[2] = 0;
	bb = char2byte(strb[0]);
    e2dc:	7800      	ldrb	r0, [r0, #0]
    e2de:	4b06      	ldr	r3, [pc, #24]	; (e2f8 <str2byte+0x20>)
    e2e0:	4798      	blx	r3
	if(strb[1])
    e2e2:	2d00      	cmp	r5, #0
    e2e4:	d006      	beq.n	e2f4 <str2byte+0x1c>
	{
		bb <<= 4;
    e2e6:	0103      	lsls	r3, r0, #4
    e2e8:	b2dc      	uxtb	r4, r3
		bb += char2byte(strb[1]);
    e2ea:	0028      	movs	r0, r5
    e2ec:	4b02      	ldr	r3, [pc, #8]	; (e2f8 <str2byte+0x20>)
    e2ee:	4798      	blx	r3
    e2f0:	1820      	adds	r0, r4, r0
    e2f2:	b2c0      	uxtb	r0, r0
	}
	return bb;
}
    e2f4:	bd70      	pop	{r4, r5, r6, pc}
    e2f6:	46c0      	nop			; (mov r8, r8)
    e2f8:	0000e2af 	.word	0x0000e2af

0000e2fc <RNCmd_ResponseAOK>:
* Summary:
*      implementation about "AOK"
*
*****************************************************************************************/
static void RNCmd_ResponseAOK( void )
{
    e2fc:	b510      	push	{r4, lr}
	if(enable_echo)
    e2fe:	4b07      	ldr	r3, [pc, #28]	; (e31c <RNCmd_ResponseAOK+0x20>)
    e300:	781b      	ldrb	r3, [r3, #0]
    e302:	2b00      	cmp	r3, #0
    e304:	d104      	bne.n	e310 <RNCmd_ResponseAOK+0x14>
		sio2host_tx((uint8_t *)StrAOK, sizeof(StrAOK));
	else
		sio2host_tx((uint8_t *)StrAOK2, sizeof(StrAOK2));
    e306:	2105      	movs	r1, #5
    e308:	4805      	ldr	r0, [pc, #20]	; (e320 <RNCmd_ResponseAOK+0x24>)
    e30a:	4b06      	ldr	r3, [pc, #24]	; (e324 <RNCmd_ResponseAOK+0x28>)
    e30c:	4798      	blx	r3
}
    e30e:	bd10      	pop	{r4, pc}
		sio2host_tx((uint8_t *)StrAOK, sizeof(StrAOK));
    e310:	2107      	movs	r1, #7
    e312:	4805      	ldr	r0, [pc, #20]	; (e328 <RNCmd_ResponseAOK+0x2c>)
    e314:	4b03      	ldr	r3, [pc, #12]	; (e324 <RNCmd_ResponseAOK+0x28>)
    e316:	4798      	blx	r3
    e318:	e7f9      	b.n	e30e <RNCmd_ResponseAOK+0x12>
    e31a:	46c0      	nop			; (mov r8, r8)
    e31c:	20001ccc 	.word	0x20001ccc
    e320:	000127f0 	.word	0x000127f0
    e324:	0000869d 	.word	0x0000869d
    e328:	000127e8 	.word	0x000127e8

0000e32c <RNCmd_ResponseERR>:
* Summary:
*      implementation about "ERR"
*
*****************************************************************************************/
static void RNCmd_ResponseERR( void )
{
    e32c:	b510      	push	{r4, lr}
	if(enable_echo)
    e32e:	4b07      	ldr	r3, [pc, #28]	; (e34c <RNCmd_ResponseERR+0x20>)
    e330:	781b      	ldrb	r3, [r3, #0]
    e332:	2b00      	cmp	r3, #0
    e334:	d104      	bne.n	e340 <RNCmd_ResponseERR+0x14>
		sio2host_tx((uint8_t *)StrERR, sizeof(StrERR));
	else
		sio2host_tx((uint8_t *)StrERR2, sizeof(StrERR2));
    e336:	2105      	movs	r1, #5
    e338:	4805      	ldr	r0, [pc, #20]	; (e350 <RNCmd_ResponseERR+0x24>)
    e33a:	4b06      	ldr	r3, [pc, #24]	; (e354 <RNCmd_ResponseERR+0x28>)
    e33c:	4798      	blx	r3
}
    e33e:	bd10      	pop	{r4, pc}
		sio2host_tx((uint8_t *)StrERR, sizeof(StrERR));
    e340:	2107      	movs	r1, #7
    e342:	4805      	ldr	r0, [pc, #20]	; (e358 <RNCmd_ResponseERR+0x2c>)
    e344:	4b03      	ldr	r3, [pc, #12]	; (e354 <RNCmd_ResponseERR+0x28>)
    e346:	4798      	blx	r3
    e348:	e7f9      	b.n	e33e <RNCmd_ResponseERR+0x12>
    e34a:	46c0      	nop			; (mov r8, r8)
    e34c:	20001ccc 	.word	0x20001ccc
    e350:	00012830 	.word	0x00012830
    e354:	0000869d 	.word	0x0000869d
    e358:	00012828 	.word	0x00012828

0000e35c <RNCmd_RxCmdInit>:
* Summary:
*      Initialize RN rx buffer and variables for decoding rx data
*
*****************************************************************************************/
void RNCmd_RxCmdInit( void )
{
    e35c:	b510      	push	{r4, lr}
	prx_cmd = rx_cmd;
    e35e:	4808      	ldr	r0, [pc, #32]	; (e380 <RNCmd_RxCmdInit+0x24>)
    e360:	4b08      	ldr	r3, [pc, #32]	; (e384 <RNCmd_RxCmdInit+0x28>)
    e362:	6018      	str	r0, [r3, #0]
	ptag1 = rx_cmd;
    e364:	4b08      	ldr	r3, [pc, #32]	; (e388 <RNCmd_RxCmdInit+0x2c>)
    e366:	6018      	str	r0, [r3, #0]
	ptag2 = 0;
    e368:	2300      	movs	r3, #0
    e36a:	4a08      	ldr	r2, [pc, #32]	; (e38c <RNCmd_RxCmdInit+0x30>)
    e36c:	6013      	str	r3, [r2, #0]
	ptag3 = 0;
    e36e:	4a08      	ldr	r2, [pc, #32]	; (e390 <RNCmd_RxCmdInit+0x34>)
    e370:	6013      	str	r3, [r2, #0]
	ptag4 = 0;
    e372:	4a08      	ldr	r2, [pc, #32]	; (e394 <RNCmd_RxCmdInit+0x38>)
    e374:	6013      	str	r3, [r2, #0]
	memset(rx_cmd, 0, APP_RX_CMD_SIZE);
    e376:	2296      	movs	r2, #150	; 0x96
    e378:	2100      	movs	r1, #0
    e37a:	4b07      	ldr	r3, [pc, #28]	; (e398 <RNCmd_RxCmdInit+0x3c>)
    e37c:	4798      	blx	r3
}
    e37e:	bd10      	pop	{r4, pc}
    e380:	20002300 	.word	0x20002300
    e384:	200023a4 	.word	0x200023a4
    e388:	2000239c 	.word	0x2000239c
    e38c:	200023ac 	.word	0x200023ac
    e390:	20002398 	.word	0x20002398
    e394:	200023a0 	.word	0x200023a0
    e398:	00010aa9 	.word	0x00010aa9

0000e39c <RNCmd_ProcessCommand>:
{
    e39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e39e:	46ce      	mov	lr, r9
    e3a0:	4647      	mov	r7, r8
    e3a2:	b580      	push	{r7, lr}
    e3a4:	b0bd      	sub	sp, #244	; 0xf4
	switch(ptag1[0])
    e3a6:	4bdc      	ldr	r3, [pc, #880]	; (e718 <RNCmd_ProcessCommand+0x37c>)
    e3a8:	681c      	ldr	r4, [r3, #0]
    e3aa:	7823      	ldrb	r3, [r4, #0]
    e3ac:	3b63      	subs	r3, #99	; 0x63
    e3ae:	b2da      	uxtb	r2, r3
    e3b0:	2a1b      	cmp	r2, #27
    e3b2:	d901      	bls.n	e3b8 <RNCmd_ProcessCommand+0x1c>
    e3b4:	f000 fe9b 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
    e3b8:	0093      	lsls	r3, r2, #2
    e3ba:	4ad8      	ldr	r2, [pc, #864]	; (e71c <RNCmd_ProcessCommand+0x380>)
    e3bc:	58d3      	ldr	r3, [r2, r3]
    e3be:	469f      	mov	pc, r3
		if(strcmp(StrCFG, (const char*)ptag1) == 0)
    e3c0:	0021      	movs	r1, r4
    e3c2:	48d7      	ldr	r0, [pc, #860]	; (e720 <RNCmd_ProcessCommand+0x384>)
    e3c4:	4bd7      	ldr	r3, [pc, #860]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e3c6:	4798      	blx	r3
    e3c8:	2800      	cmp	r0, #0
    e3ca:	d000      	beq.n	e3ce <RNCmd_ProcessCommand+0x32>
    e3cc:	e0ba      	b.n	e544 <RNCmd_ProcessCommand+0x1a8>
			if(!rn_cfg_mode)	//not in configure mode
    e3ce:	4bd6      	ldr	r3, [pc, #856]	; (e728 <RNCmd_ProcessCommand+0x38c>)
    e3d0:	781b      	ldrb	r3, [r3, #0]
    e3d2:	2b00      	cmp	r3, #0
    e3d4:	d02d      	beq.n	e432 <RNCmd_ProcessCommand+0x96>
			else if(strcmp(StrPAN, (const char*)ptag2) == 0)		//command: cfg pan r1
    e3d6:	4bd5      	ldr	r3, [pc, #852]	; (e72c <RNCmd_ProcessCommand+0x390>)
    e3d8:	681c      	ldr	r4, [r3, #0]
    e3da:	0021      	movs	r1, r4
    e3dc:	48d4      	ldr	r0, [pc, #848]	; (e730 <RNCmd_ProcessCommand+0x394>)
    e3de:	4bd1      	ldr	r3, [pc, #836]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e3e0:	4798      	blx	r3
    e3e2:	2800      	cmp	r0, #0
    e3e4:	d029      	beq.n	e43a <RNCmd_ProcessCommand+0x9e>
			else if(strcmp(StrRECONN, (const char*)ptag2) == 0)		//command: cfg reconn r1(0/1/2)
    e3e6:	0021      	movs	r1, r4
    e3e8:	48d2      	ldr	r0, [pc, #840]	; (e734 <RNCmd_ProcessCommand+0x398>)
    e3ea:	4bce      	ldr	r3, [pc, #824]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e3ec:	4798      	blx	r3
    e3ee:	2800      	cmp	r0, #0
    e3f0:	d148      	bne.n	e484 <RNCmd_ProcessCommand+0xe8>
				temp = str2byte(ptag3);
    e3f2:	4bd1      	ldr	r3, [pc, #836]	; (e738 <RNCmd_ProcessCommand+0x39c>)
    e3f4:	6818      	ldr	r0, [r3, #0]
    e3f6:	4bd1      	ldr	r3, [pc, #836]	; (e73c <RNCmd_ProcessCommand+0x3a0>)
    e3f8:	4798      	blx	r3
    e3fa:	23e7      	movs	r3, #231	; 0xe7
    e3fc:	aa02      	add	r2, sp, #8
    e3fe:	4694      	mov	ip, r2
    e400:	4463      	add	r3, ip
    e402:	7018      	strb	r0, [r3, #0]
				if(temp == 0 || temp == 1 || temp == 2)
    e404:	2802      	cmp	r0, #2
    e406:	d834      	bhi.n	e472 <RNCmd_ProcessCommand+0xd6>
					RNCmd_ResponseAOK();
    e408:	4bcd      	ldr	r3, [pc, #820]	; (e740 <RNCmd_ProcessCommand+0x3a4>)
    e40a:	4798      	blx	r3
					if(temp == 0 || temp == 2)
    e40c:	23e7      	movs	r3, #231	; 0xe7
    e40e:	aa02      	add	r2, sp, #8
    e410:	4694      	mov	ip, r2
    e412:	4463      	add	r3, ip
    e414:	781b      	ldrb	r3, [r3, #0]
    e416:	2202      	movs	r2, #2
    e418:	0019      	movs	r1, r3
    e41a:	4391      	bics	r1, r2
    e41c:	d120      	bne.n	e460 <RNCmd_ProcessCommand+0xc4>
					freezer_enable = false;
    e41e:	2100      	movs	r1, #0
    e420:	4ac8      	ldr	r2, [pc, #800]	; (e744 <RNCmd_ProcessCommand+0x3a8>)
    e422:	7011      	strb	r1, [r2, #0]
					if(temp == 2)
    e424:	2b02      	cmp	r3, #2
    e426:	d01f      	beq.n	e468 <RNCmd_ProcessCommand+0xcc>
					manual_establish_network = false;
    e428:	2200      	movs	r2, #0
    e42a:	4bc7      	ldr	r3, [pc, #796]	; (e748 <RNCmd_ProcessCommand+0x3ac>)
    e42c:	701a      	strb	r2, [r3, #0]
    e42e:	f000 fe5e 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
			RNCmd_ResponseERR();
    e432:	4bc6      	ldr	r3, [pc, #792]	; (e74c <RNCmd_ProcessCommand+0x3b0>)
    e434:	4798      	blx	r3
    e436:	f000 fe5a 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
				RNCmd_ResponseAOK();
    e43a:	4bc1      	ldr	r3, [pc, #772]	; (e740 <RNCmd_ProcessCommand+0x3a4>)
    e43c:	4798      	blx	r3
				myPAN_ID = (uint16_t)str2byte(ptag3);
    e43e:	4fbe      	ldr	r7, [pc, #760]	; (e738 <RNCmd_ProcessCommand+0x39c>)
    e440:	683d      	ldr	r5, [r7, #0]
    e442:	0028      	movs	r0, r5
    e444:	4ebd      	ldr	r6, [pc, #756]	; (e73c <RNCmd_ProcessCommand+0x3a0>)
    e446:	47b0      	blx	r6
    e448:	0004      	movs	r4, r0
				ptag3+=2;
    e44a:	1ca8      	adds	r0, r5, #2
    e44c:	6038      	str	r0, [r7, #0]
				myPAN_ID <<= 8;
    e44e:	0224      	lsls	r4, r4, #8
    e450:	b2a4      	uxth	r4, r4
    e452:	4dbf      	ldr	r5, [pc, #764]	; (e750 <RNCmd_ProcessCommand+0x3b4>)
    e454:	802c      	strh	r4, [r5, #0]
				myPAN_ID += (uint16_t)str2byte(ptag3);
    e456:	47b0      	blx	r6
    e458:	1824      	adds	r4, r4, r0
    e45a:	802c      	strh	r4, [r5, #0]
    e45c:	f000 fe47 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
					freezer_enable = true;
    e460:	2201      	movs	r2, #1
    e462:	4bb8      	ldr	r3, [pc, #736]	; (e744 <RNCmd_ProcessCommand+0x3a8>)
    e464:	701a      	strb	r2, [r3, #0]
    e466:	e7df      	b.n	e428 <RNCmd_ProcessCommand+0x8c>
					manual_establish_network = true;
    e468:	2201      	movs	r2, #1
    e46a:	4bb7      	ldr	r3, [pc, #732]	; (e748 <RNCmd_ProcessCommand+0x3ac>)
    e46c:	701a      	strb	r2, [r3, #0]
    e46e:	f000 fe3e 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
					RNCmd_ResponseERR();
    e472:	4bb6      	ldr	r3, [pc, #728]	; (e74c <RNCmd_ProcessCommand+0x3b0>)
    e474:	4798      	blx	r3
					freezer_enable = 0;
    e476:	2300      	movs	r3, #0
    e478:	4ab2      	ldr	r2, [pc, #712]	; (e744 <RNCmd_ProcessCommand+0x3a8>)
    e47a:	7013      	strb	r3, [r2, #0]
					manual_establish_network = false;
    e47c:	4ab2      	ldr	r2, [pc, #712]	; (e748 <RNCmd_ProcessCommand+0x3ac>)
    e47e:	7013      	strb	r3, [r2, #0]
    e480:	f000 fe35 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
			else if(strcmp(StrCHANNEL, (const char*)ptag2) == 0)	//command: cfg channel r1
    e484:	0021      	movs	r1, r4
    e486:	48b3      	ldr	r0, [pc, #716]	; (e754 <RNCmd_ProcessCommand+0x3b8>)
    e488:	4ba6      	ldr	r3, [pc, #664]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e48a:	4798      	blx	r3
    e48c:	2800      	cmp	r0, #0
    e48e:	d118      	bne.n	e4c2 <RNCmd_ProcessCommand+0x126>
				temp = str2byte(ptag3);
    e490:	4ba9      	ldr	r3, [pc, #676]	; (e738 <RNCmd_ProcessCommand+0x39c>)
    e492:	6818      	ldr	r0, [r3, #0]
    e494:	4ba9      	ldr	r3, [pc, #676]	; (e73c <RNCmd_ProcessCommand+0x3a0>)
    e496:	4798      	blx	r3
    e498:	23e7      	movs	r3, #231	; 0xe7
    e49a:	aa02      	add	r2, sp, #8
    e49c:	4694      	mov	ip, r2
    e49e:	4463      	add	r3, ip
    e4a0:	7018      	strb	r0, [r3, #0]
				if(temp > 10)					//SAMR30
    e4a2:	280a      	cmp	r0, #10
    e4a4:	d903      	bls.n	e4ae <RNCmd_ProcessCommand+0x112>
					RNCmd_ResponseERR();
    e4a6:	4ba9      	ldr	r3, [pc, #676]	; (e74c <RNCmd_ProcessCommand+0x3b0>)
    e4a8:	4798      	blx	r3
    e4aa:	f000 fe20 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
					RNCmd_ResponseAOK();
    e4ae:	4ba4      	ldr	r3, [pc, #656]	; (e740 <RNCmd_ProcessCommand+0x3a4>)
    e4b0:	4798      	blx	r3
					myChannel = str2byte(ptag3);
    e4b2:	4ba1      	ldr	r3, [pc, #644]	; (e738 <RNCmd_ProcessCommand+0x39c>)
    e4b4:	6818      	ldr	r0, [r3, #0]
    e4b6:	4ba1      	ldr	r3, [pc, #644]	; (e73c <RNCmd_ProcessCommand+0x3a0>)
    e4b8:	4798      	blx	r3
    e4ba:	4ba7      	ldr	r3, [pc, #668]	; (e758 <RNCmd_ProcessCommand+0x3bc>)
    e4bc:	7018      	strb	r0, [r3, #0]
    e4be:	f000 fe16 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
			else if(strcmp(StrPHYMOD, (const char*)ptag2) == 0)	//command: cfg phymod r1
    e4c2:	0021      	movs	r1, r4
    e4c4:	48a5      	ldr	r0, [pc, #660]	; (e75c <RNCmd_ProcessCommand+0x3c0>)
    e4c6:	4b97      	ldr	r3, [pc, #604]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e4c8:	4798      	blx	r3
    e4ca:	2800      	cmp	r0, #0
    e4cc:	d11f      	bne.n	e50e <RNCmd_ProcessCommand+0x172>
				temp = str2byte(ptag3);
    e4ce:	4b9a      	ldr	r3, [pc, #616]	; (e738 <RNCmd_ProcessCommand+0x39c>)
    e4d0:	6818      	ldr	r0, [r3, #0]
    e4d2:	4b9a      	ldr	r3, [pc, #616]	; (e73c <RNCmd_ProcessCommand+0x3a0>)
    e4d4:	4798      	blx	r3
				temp &= 0x3f;		//only valid last 5bits.
    e4d6:	233f      	movs	r3, #63	; 0x3f
    e4d8:	4018      	ands	r0, r3
    e4da:	33a8      	adds	r3, #168	; 0xa8
    e4dc:	aa02      	add	r2, sp, #8
    e4de:	4694      	mov	ip, r2
    e4e0:	4463      	add	r3, ip
    e4e2:	7018      	strb	r0, [r3, #0]
	switch(phy_mod_set)
    e4e4:	283e      	cmp	r0, #62	; 0x3e
    e4e6:	d80e      	bhi.n	e506 <RNCmd_ProcessCommand+0x16a>
    e4e8:	0080      	lsls	r0, r0, #2
    e4ea:	4b9d      	ldr	r3, [pc, #628]	; (e760 <RNCmd_ProcessCommand+0x3c4>)
    e4ec:	581b      	ldr	r3, [r3, r0]
    e4ee:	469f      	mov	pc, r3
					RNCmd_ResponseAOK();
    e4f0:	4b93      	ldr	r3, [pc, #588]	; (e740 <RNCmd_ProcessCommand+0x3a4>)
    e4f2:	4798      	blx	r3
					phy_mod_user_setting = temp;
    e4f4:	23e7      	movs	r3, #231	; 0xe7
    e4f6:	aa02      	add	r2, sp, #8
    e4f8:	4694      	mov	ip, r2
    e4fa:	4463      	add	r3, ip
    e4fc:	781a      	ldrb	r2, [r3, #0]
    e4fe:	4b99      	ldr	r3, [pc, #612]	; (e764 <RNCmd_ProcessCommand+0x3c8>)
    e500:	701a      	strb	r2, [r3, #0]
    e502:	f000 fdf4 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
					RNCmd_ResponseERR();
    e506:	4b91      	ldr	r3, [pc, #580]	; (e74c <RNCmd_ProcessCommand+0x3b0>)
    e508:	4798      	blx	r3
    e50a:	f000 fdf0 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
			else if(strcmp(StrTXPOWER, (const char*)ptag2) == 0)	//command: cfg txpower r1
    e50e:	0021      	movs	r1, r4
    e510:	4895      	ldr	r0, [pc, #596]	; (e768 <RNCmd_ProcessCommand+0x3cc>)
    e512:	4b84      	ldr	r3, [pc, #528]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e514:	4798      	blx	r3
    e516:	2800      	cmp	r0, #0
    e518:	d110      	bne.n	e53c <RNCmd_ProcessCommand+0x1a0>
				temp = str2byte(ptag3);
    e51a:	4d87      	ldr	r5, [pc, #540]	; (e738 <RNCmd_ProcessCommand+0x39c>)
    e51c:	6828      	ldr	r0, [r5, #0]
    e51e:	4c87      	ldr	r4, [pc, #540]	; (e73c <RNCmd_ProcessCommand+0x3a0>)
    e520:	47a0      	blx	r4
    e522:	23e7      	movs	r3, #231	; 0xe7
    e524:	aa02      	add	r2, sp, #8
    e526:	4694      	mov	ip, r2
    e528:	4463      	add	r3, ip
    e52a:	7018      	strb	r0, [r3, #0]
				RNCmd_ResponseAOK();
    e52c:	4b84      	ldr	r3, [pc, #528]	; (e740 <RNCmd_ProcessCommand+0x3a4>)
    e52e:	4798      	blx	r3
				phy_txpwr_user_setting = str2byte(ptag3);
    e530:	6828      	ldr	r0, [r5, #0]
    e532:	47a0      	blx	r4
    e534:	4b8d      	ldr	r3, [pc, #564]	; (e76c <RNCmd_ProcessCommand+0x3d0>)
    e536:	7018      	strb	r0, [r3, #0]
    e538:	f000 fdd9 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
				RNCmd_ResponseERR();
    e53c:	4b83      	ldr	r3, [pc, #524]	; (e74c <RNCmd_ProcessCommand+0x3b0>)
    e53e:	4798      	blx	r3
    e540:	f000 fdd5 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
			RNCmd_ResponseERR();
    e544:	4b81      	ldr	r3, [pc, #516]	; (e74c <RNCmd_ProcessCommand+0x3b0>)
    e546:	4798      	blx	r3
    e548:	f000 fdd1 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
		if(strcmp(StrGET, (const char*)ptag1) == 0)
    e54c:	0021      	movs	r1, r4
    e54e:	4888      	ldr	r0, [pc, #544]	; (e770 <RNCmd_ProcessCommand+0x3d4>)
    e550:	4b74      	ldr	r3, [pc, #464]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e552:	4798      	blx	r3
    e554:	2800      	cmp	r0, #0
    e556:	d001      	beq.n	e55c <RNCmd_ProcessCommand+0x1c0>
    e558:	f000 fbfc 	bl	ed54 <RNCmd_ProcessCommand+0x9b8>
			if(strcmp(StrADDR, (const char*)ptag2) == 0)	//command: get addr
    e55c:	4b73      	ldr	r3, [pc, #460]	; (e72c <RNCmd_ProcessCommand+0x390>)
    e55e:	681c      	ldr	r4, [r3, #0]
    e560:	0021      	movs	r1, r4
    e562:	4884      	ldr	r0, [pc, #528]	; (e774 <RNCmd_ProcessCommand+0x3d8>)
    e564:	4b6f      	ldr	r3, [pc, #444]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e566:	4798      	blx	r3
    e568:	2800      	cmp	r0, #0
    e56a:	d03d      	beq.n	e5e8 <RNCmd_ProcessCommand+0x24c>
			else if(strcmp(StrCHANNEL, (const char*)ptag2) == 0)	//command: get channel
    e56c:	0021      	movs	r1, r4
    e56e:	4879      	ldr	r0, [pc, #484]	; (e754 <RNCmd_ProcessCommand+0x3b8>)
    e570:	4b6c      	ldr	r3, [pc, #432]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e572:	4798      	blx	r3
    e574:	2800      	cmp	r0, #0
    e576:	d06b      	beq.n	e650 <RNCmd_ProcessCommand+0x2b4>
			else if(strcmp(StrPAN, (const char*)ptag2) == 0)	//command: get pan
    e578:	0021      	movs	r1, r4
    e57a:	486d      	ldr	r0, [pc, #436]	; (e730 <RNCmd_ProcessCommand+0x394>)
    e57c:	4b69      	ldr	r3, [pc, #420]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e57e:	4798      	blx	r3
    e580:	2800      	cmp	r0, #0
    e582:	d100      	bne.n	e586 <RNCmd_ProcessCommand+0x1ea>
    e584:	e129      	b.n	e7da <RNCmd_ProcessCommand+0x43e>
			else if(!rn_cfg_mode && (strcmp(StrROLE, (const char*)ptag2) == 0))	//command: get role
    e586:	4b68      	ldr	r3, [pc, #416]	; (e728 <RNCmd_ProcessCommand+0x38c>)
    e588:	781b      	ldrb	r3, [r3, #0]
    e58a:	2b00      	cmp	r3, #0
    e58c:	d000      	beq.n	e590 <RNCmd_ProcessCommand+0x1f4>
    e58e:	e27d      	b.n	ea8c <RNCmd_ProcessCommand+0x6f0>
    e590:	0021      	movs	r1, r4
    e592:	4879      	ldr	r0, [pc, #484]	; (e778 <RNCmd_ProcessCommand+0x3dc>)
    e594:	4b63      	ldr	r3, [pc, #396]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e596:	4798      	blx	r3
    e598:	2800      	cmp	r0, #0
    e59a:	d100      	bne.n	e59e <RNCmd_ProcessCommand+0x202>
    e59c:	e15f      	b.n	e85e <RNCmd_ProcessCommand+0x4c2>
			else if(!rn_cfg_mode && (strcmp(StrCONSIZE, (const char*)ptag2) == 0))	//command: get consize
    e59e:	0021      	movs	r1, r4
    e5a0:	4876      	ldr	r0, [pc, #472]	; (e77c <RNCmd_ProcessCommand+0x3e0>)
    e5a2:	4b60      	ldr	r3, [pc, #384]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e5a4:	4798      	blx	r3
    e5a6:	2800      	cmp	r0, #0
    e5a8:	d100      	bne.n	e5ac <RNCmd_ProcessCommand+0x210>
    e5aa:	e1a0      	b.n	e8ee <RNCmd_ProcessCommand+0x552>
			else if(!rn_cfg_mode && (strcmp(StrCONN, (const char*)ptag2) == 0))	//command: get conn r1
    e5ac:	0021      	movs	r1, r4
    e5ae:	4874      	ldr	r0, [pc, #464]	; (e780 <RNCmd_ProcessCommand+0x3e4>)
    e5b0:	4b5c      	ldr	r3, [pc, #368]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e5b2:	4798      	blx	r3
    e5b4:	2800      	cmp	r0, #0
    e5b6:	d100      	bne.n	e5ba <RNCmd_ProcessCommand+0x21e>
    e5b8:	e1dc      	b.n	e974 <RNCmd_ProcessCommand+0x5d8>
			else if(strcmp(StrVER, (const char*)ptag2) == 0)	//command: get ver
    e5ba:	0021      	movs	r1, r4
    e5bc:	4871      	ldr	r0, [pc, #452]	; (e784 <RNCmd_ProcessCommand+0x3e8>)
    e5be:	4b59      	ldr	r3, [pc, #356]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e5c0:	4798      	blx	r3
    e5c2:	2800      	cmp	r0, #0
    e5c4:	d100      	bne.n	e5c8 <RNCmd_ProcessCommand+0x22c>
    e5c6:	e268      	b.n	ea9a <RNCmd_ProcessCommand+0x6fe>
			else if(!rn_cfg_mode && (strcmp(StrEDSIZE, (const char*)ptag2) == 0))	//command: get edsize
    e5c8:	0021      	movs	r1, r4
    e5ca:	486f      	ldr	r0, [pc, #444]	; (e788 <RNCmd_ProcessCommand+0x3ec>)
    e5cc:	4b55      	ldr	r3, [pc, #340]	; (e724 <RNCmd_ProcessCommand+0x388>)
    e5ce:	4798      	blx	r3
    e5d0:	2800      	cmp	r0, #0
    e5d2:	d000      	beq.n	e5d6 <RNCmd_ProcessCommand+0x23a>
    e5d4:	e2b6      	b.n	eb44 <RNCmd_ProcessCommand+0x7a8>
				if(role == END_DEVICE)
    e5d6:	4b6d      	ldr	r3, [pc, #436]	; (e78c <RNCmd_ProcessCommand+0x3f0>)
    e5d8:	781b      	ldrb	r3, [r3, #0]
    e5da:	2b02      	cmp	r3, #2
    e5dc:	d100      	bne.n	e5e0 <RNCmd_ProcessCommand+0x244>
    e5de:	e26a      	b.n	eab6 <RNCmd_ProcessCommand+0x71a>
					RNCmd_ResponseERR();
    e5e0:	4b5a      	ldr	r3, [pc, #360]	; (e74c <RNCmd_ProcessCommand+0x3b0>)
    e5e2:	4798      	blx	r3
    e5e4:	f000 fd83 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
				memset(str1, 0, sizeof(str1));
    e5e8:	22c8      	movs	r2, #200	; 0xc8
    e5ea:	2100      	movs	r1, #0
    e5ec:	a809      	add	r0, sp, #36	; 0x24
    e5ee:	4b68      	ldr	r3, [pc, #416]	; (e790 <RNCmd_ProcessCommand+0x3f4>)
    e5f0:	4798      	blx	r3
				if(enable_echo)
    e5f2:	4b68      	ldr	r3, [pc, #416]	; (e794 <RNCmd_ProcessCommand+0x3f8>)
    e5f4:	781d      	ldrb	r5, [r3, #0]
				pStr1 = str1;
    e5f6:	ac09      	add	r4, sp, #36	; 0x24
				if(enable_echo)
    e5f8:	2d00      	cmp	r5, #0
    e5fa:	d006      	beq.n	e60a <RNCmd_ProcessCommand+0x26e>
				*pStr1++ = '\n';
    e5fc:	220a      	movs	r2, #10
    e5fe:	7022      	strb	r2, [r4, #0]
				str1Len++;
    e600:	2501      	movs	r5, #1
				*pStr1++ = '\n';
    e602:	241d      	movs	r4, #29
    e604:	ab02      	add	r3, sp, #8
    e606:	469c      	mov	ip, r3
    e608:	4464      	add	r4, ip
			*pStr1++ = 'a';	//add "addr"
    e60a:	2361      	movs	r3, #97	; 0x61
    e60c:	7023      	strb	r3, [r4, #0]
			*pStr1++ = 'd';
    e60e:	3303      	adds	r3, #3
    e610:	7063      	strb	r3, [r4, #1]
			*pStr1++ = 'd';
    e612:	70a3      	strb	r3, [r4, #2]
			*pStr1++ = 'r';
    e614:	330e      	adds	r3, #14
    e616:	70e3      	strb	r3, [r4, #3]
			*pStr1++ = ' ';
    e618:	3b52      	subs	r3, #82	; 0x52
    e61a:	7123      	strb	r3, [r4, #4]
    e61c:	1d62      	adds	r2, r4, #5
			num2HexStr(myLongAddress, MY_ADDRESS_LENGTH, pStr1, 2*MY_ADDRESS_LENGTH+1);
    e61e:	3b0f      	subs	r3, #15
    e620:	2108      	movs	r1, #8
    e622:	485d      	ldr	r0, [pc, #372]	; (e798 <RNCmd_ProcessCommand+0x3fc>)
    e624:	4e5d      	ldr	r6, [pc, #372]	; (e79c <RNCmd_ProcessCommand+0x400>)
    e626:	47b0      	blx	r6
				if(enable_echo)
    e628:	4b5a      	ldr	r3, [pc, #360]	; (e794 <RNCmd_ProcessCommand+0x3f8>)
    e62a:	781b      	ldrb	r3, [r3, #0]
    e62c:	2b00      	cmp	r3, #0
    e62e:	d00a      	beq.n	e646 <RNCmd_ProcessCommand+0x2aa>
				*pStr1++ = '\n';
    e630:	230a      	movs	r3, #10
    e632:	7563      	strb	r3, [r4, #21]
				*pStr1 = '\r';
    e634:	3303      	adds	r3, #3
    e636:	75a3      	strb	r3, [r4, #22]
				str1Len += 2;
    e638:	3517      	adds	r5, #23
    e63a:	b2e9      	uxtb	r1, r5
				sio2host_tx(str1, str1Len);
    e63c:	a809      	add	r0, sp, #36	; 0x24
    e63e:	4b58      	ldr	r3, [pc, #352]	; (e7a0 <RNCmd_ProcessCommand+0x404>)
    e640:	4798      	blx	r3
    e642:	f000 fd54 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
				*pStr1++ = '\r';	//0x13, ENTER
    e646:	230d      	movs	r3, #13
    e648:	7563      	strb	r3, [r4, #21]
				str1Len += 1;
    e64a:	3516      	adds	r5, #22
    e64c:	b2e9      	uxtb	r1, r5
    e64e:	e7f5      	b.n	e63c <RNCmd_ProcessCommand+0x2a0>
				memset(str1, 0, sizeof(str1));
    e650:	22c8      	movs	r2, #200	; 0xc8
    e652:	2100      	movs	r1, #0
    e654:	a809      	add	r0, sp, #36	; 0x24
    e656:	4b4e      	ldr	r3, [pc, #312]	; (e790 <RNCmd_ProcessCommand+0x3f4>)
    e658:	4798      	blx	r3
				if(enable_echo)
    e65a:	4b4e      	ldr	r3, [pc, #312]	; (e794 <RNCmd_ProcessCommand+0x3f8>)
    e65c:	781c      	ldrb	r4, [r3, #0]
				pStr1 = str1;
    e65e:	ad09      	add	r5, sp, #36	; 0x24
				if(enable_echo)
    e660:	2c00      	cmp	r4, #0
    e662:	d006      	beq.n	e672 <RNCmd_ProcessCommand+0x2d6>
				*pStr1++ = '\n';
    e664:	220a      	movs	r2, #10
    e666:	702a      	strb	r2, [r5, #0]
				str1Len++;
    e668:	2401      	movs	r4, #1
				*pStr1++ = '\n';
    e66a:	251d      	movs	r5, #29
    e66c:	ab02      	add	r3, sp, #8
    e66e:	469c      	mov	ip, r3
    e670:	4465      	add	r5, ip
				*pStr1++ = 'c';	//add "channel"
    e672:	2363      	movs	r3, #99	; 0x63
    e674:	702b      	strb	r3, [r5, #0]
				*pStr1++ = 'h';
    e676:	3305      	adds	r3, #5
    e678:	706b      	strb	r3, [r5, #1]
				*pStr1++ = 'a';
    e67a:	3b07      	subs	r3, #7
    e67c:	70ab      	strb	r3, [r5, #2]
				*pStr1++ = 'n';
    e67e:	330d      	adds	r3, #13
    e680:	70eb      	strb	r3, [r5, #3]
				*pStr1++ = 'n';
    e682:	712b      	strb	r3, [r5, #4]
				*pStr1++ = 'e';
    e684:	3b09      	subs	r3, #9
    e686:	716b      	strb	r3, [r5, #5]
				*pStr1++ = 'l';
    e688:	3307      	adds	r3, #7
    e68a:	71ab      	strb	r3, [r5, #6]
				*pStr1++ = ' ';
    e68c:	002e      	movs	r6, r5
    e68e:	3608      	adds	r6, #8
    e690:	3b4c      	subs	r3, #76	; 0x4c
    e692:	71eb      	strb	r3, [r5, #7]
				if(!rn_cfg_mode)	//afer exiting from config mode, use API to read channel; in config mode, just use variable myChannel
    e694:	4b24      	ldr	r3, [pc, #144]	; (e728 <RNCmd_ProcessCommand+0x38c>)
    e696:	781b      	ldrb	r3, [r3, #0]
    e698:	2b00      	cmp	r3, #0
    e69a:	d017      	beq.n	e6cc <RNCmd_ProcessCommand+0x330>
				channel2HexStr(myChannel, pStr1, &temp);
    e69c:	4b2e      	ldr	r3, [pc, #184]	; (e758 <RNCmd_ProcessCommand+0x3bc>)
    e69e:	781b      	ldrb	r3, [r3, #0]
	if(!pTxt)
    e6a0:	2e00      	cmp	r6, #0
    e6a2:	d020      	beq.n	e6e6 <RNCmd_ProcessCommand+0x34a>
	if(channel > 26)	//channel range: 0~10(RF212B), 11~26(RF233)
    e6a4:	2b1a      	cmp	r3, #26
    e6a6:	d81e      	bhi.n	e6e6 <RNCmd_ProcessCommand+0x34a>
	if(channel < 10)
    e6a8:	2b09      	cmp	r3, #9
    e6aa:	d914      	bls.n	e6d6 <RNCmd_ProcessCommand+0x33a>
	else if(channel < 16)
    e6ac:	2b0f      	cmp	r3, #15
    e6ae:	d97b      	bls.n	e7a8 <RNCmd_ProcessCommand+0x40c>
	else if(channel < 26)
    e6b0:	2b19      	cmp	r3, #25
    e6b2:	d800      	bhi.n	e6b6 <RNCmd_ProcessCommand+0x31a>
    e6b4:	e081      	b.n	e7ba <RNCmd_ProcessCommand+0x41e>
		pTxt[0] = '1';
    e6b6:	2231      	movs	r2, #49	; 0x31
    e6b8:	722a      	strb	r2, [r5, #8]
		pTxt[1] = channel + 71;
    e6ba:	3347      	adds	r3, #71	; 0x47
    e6bc:	726b      	strb	r3, [r5, #9]
		*txtSize = 2;
    e6be:	3a2f      	subs	r2, #47	; 0x2f
    e6c0:	23e7      	movs	r3, #231	; 0xe7
    e6c2:	a902      	add	r1, sp, #8
    e6c4:	468c      	mov	ip, r1
    e6c6:	4463      	add	r3, ip
    e6c8:	701a      	strb	r2, [r3, #0]
    e6ca:	e00c      	b.n	e6e6 <RNCmd_ProcessCommand+0x34a>
					MiApp_Get(CHANNEL, &myChannel);
    e6cc:	4922      	ldr	r1, [pc, #136]	; (e758 <RNCmd_ProcessCommand+0x3bc>)
    e6ce:	2000      	movs	r0, #0
    e6d0:	4b34      	ldr	r3, [pc, #208]	; (e7a4 <RNCmd_ProcessCommand+0x408>)
    e6d2:	4798      	blx	r3
    e6d4:	e7e2      	b.n	e69c <RNCmd_ProcessCommand+0x300>
		pTxt[0] = channel + 48;
    e6d6:	3330      	adds	r3, #48	; 0x30
    e6d8:	722b      	strb	r3, [r5, #8]
		*txtSize = 1;
    e6da:	2201      	movs	r2, #1
    e6dc:	23e7      	movs	r3, #231	; 0xe7
    e6de:	a902      	add	r1, sp, #8
    e6e0:	468c      	mov	ip, r1
    e6e2:	4463      	add	r3, ip
    e6e4:	701a      	strb	r2, [r3, #0]
				pStr1 += temp;
    e6e6:	23e7      	movs	r3, #231	; 0xe7
    e6e8:	aa02      	add	r2, sp, #8
    e6ea:	4694      	mov	ip, r2
    e6ec:	4463      	add	r3, ip
    e6ee:	7819      	ldrb	r1, [r3, #0]
    e6f0:	1876      	adds	r6, r6, r1
				str1Len += temp;
    e6f2:	3108      	adds	r1, #8
    e6f4:	1861      	adds	r1, r4, r1
    e6f6:	b2c9      	uxtb	r1, r1
				if(enable_echo)
    e6f8:	4b26      	ldr	r3, [pc, #152]	; (e794 <RNCmd_ProcessCommand+0x3f8>)
    e6fa:	781b      	ldrb	r3, [r3, #0]
    e6fc:	2b00      	cmp	r3, #0
    e6fe:	d067      	beq.n	e7d0 <RNCmd_ProcessCommand+0x434>
				*pStr1++ = '\n';
    e700:	230a      	movs	r3, #10
    e702:	7033      	strb	r3, [r6, #0]
				*pStr1 = '\r';
    e704:	3303      	adds	r3, #3
    e706:	7073      	strb	r3, [r6, #1]
				str1Len += 2;
    e708:	3102      	adds	r1, #2
    e70a:	b2c9      	uxtb	r1, r1
				sio2host_tx(str1, str1Len);
    e70c:	a809      	add	r0, sp, #36	; 0x24
    e70e:	4b24      	ldr	r3, [pc, #144]	; (e7a0 <RNCmd_ProcessCommand+0x404>)
    e710:	4798      	blx	r3
    e712:	f000 fcec 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
    e716:	46c0      	nop			; (mov r8, r8)
    e718:	2000239c 	.word	0x2000239c
    e71c:	00012664 	.word	0x00012664
    e720:	000127f8 	.word	0x000127f8
    e724:	00011291 	.word	0x00011291
    e728:	2000001c 	.word	0x2000001c
    e72c:	200023ac 	.word	0x200023ac
    e730:	0001285c 	.word	0x0001285c
    e734:	00012874 	.word	0x00012874
    e738:	20002398 	.word	0x20002398
    e73c:	0000e2d9 	.word	0x0000e2d9
    e740:	0000e2fd 	.word	0x0000e2fd
    e744:	20001ccd 	.word	0x20001ccd
    e748:	200023a8 	.word	0x200023a8
    e74c:	0000e32d 	.word	0x0000e32d
    e750:	2000001a 	.word	0x2000001a
    e754:	000127fc 	.word	0x000127fc
    e758:	20000034 	.word	0x20000034
    e75c:	00012860 	.word	0x00012860
    e760:	000126d4 	.word	0x000126d4
    e764:	20001cce 	.word	0x20001cce
    e768:	000128c8 	.word	0x000128c8
    e76c:	20001ccf 	.word	0x20001ccf
    e770:	00012848 	.word	0x00012848
    e774:	000127e0 	.word	0x000127e0
    e778:	000128b0 	.word	0x000128b0
    e77c:	0001280c 	.word	0x0001280c
    e780:	00012804 	.word	0x00012804
    e784:	000128d0 	.word	0x000128d0
    e788:	00012820 	.word	0x00012820
    e78c:	20002160 	.word	0x20002160
    e790:	00010aa9 	.word	0x00010aa9
    e794:	20001ccc 	.word	0x20001ccc
    e798:	20000010 	.word	0x20000010
    e79c:	0000e1e9 	.word	0x0000e1e9
    e7a0:	0000869d 	.word	0x0000869d
    e7a4:	0000b715 	.word	0x0000b715
		pTxt[0] = channel + 87;
    e7a8:	3357      	adds	r3, #87	; 0x57
    e7aa:	722b      	strb	r3, [r5, #8]
		*txtSize = 1;
    e7ac:	2201      	movs	r2, #1
    e7ae:	23e7      	movs	r3, #231	; 0xe7
    e7b0:	a902      	add	r1, sp, #8
    e7b2:	468c      	mov	ip, r1
    e7b4:	4463      	add	r3, ip
    e7b6:	701a      	strb	r2, [r3, #0]
    e7b8:	e795      	b.n	e6e6 <RNCmd_ProcessCommand+0x34a>
		pTxt[0] = '1';
    e7ba:	2231      	movs	r2, #49	; 0x31
    e7bc:	722a      	strb	r2, [r5, #8]
		pTxt[1] = channel + 32;
    e7be:	3320      	adds	r3, #32
    e7c0:	726b      	strb	r3, [r5, #9]
		*txtSize = 2;
    e7c2:	3a2f      	subs	r2, #47	; 0x2f
    e7c4:	23e7      	movs	r3, #231	; 0xe7
    e7c6:	a902      	add	r1, sp, #8
    e7c8:	468c      	mov	ip, r1
    e7ca:	4463      	add	r3, ip
    e7cc:	701a      	strb	r2, [r3, #0]
    e7ce:	e78a      	b.n	e6e6 <RNCmd_ProcessCommand+0x34a>
				*pStr1++ = '\r';	//0x13, ENTER
    e7d0:	230d      	movs	r3, #13
    e7d2:	7033      	strb	r3, [r6, #0]
				str1Len += 1;
    e7d4:	3101      	adds	r1, #1
    e7d6:	b2c9      	uxtb	r1, r1
    e7d8:	e798      	b.n	e70c <RNCmd_ProcessCommand+0x370>
				memset(str1, 0, sizeof(str1));
    e7da:	22c8      	movs	r2, #200	; 0xc8
    e7dc:	2100      	movs	r1, #0
    e7de:	a809      	add	r0, sp, #36	; 0x24
    e7e0:	4bdf      	ldr	r3, [pc, #892]	; (eb60 <RNCmd_ProcessCommand+0x7c4>)
    e7e2:	4798      	blx	r3
				if(enable_echo)
    e7e4:	4bdf      	ldr	r3, [pc, #892]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    e7e6:	781d      	ldrb	r5, [r3, #0]
				pStr1 = str1;
    e7e8:	ac09      	add	r4, sp, #36	; 0x24
				if(enable_echo)
    e7ea:	2d00      	cmp	r5, #0
    e7ec:	d006      	beq.n	e7fc <RNCmd_ProcessCommand+0x460>
				*pStr1++ = '\n';
    e7ee:	220a      	movs	r2, #10
    e7f0:	7022      	strb	r2, [r4, #0]
				str1Len++;
    e7f2:	2501      	movs	r5, #1
				*pStr1++ = '\n';
    e7f4:	241d      	movs	r4, #29
    e7f6:	ab02      	add	r3, sp, #8
    e7f8:	469c      	mov	ip, r3
    e7fa:	4464      	add	r4, ip
				*pStr1++ = 'p';	//add "pan"
    e7fc:	2370      	movs	r3, #112	; 0x70
    e7fe:	7023      	strb	r3, [r4, #0]
				*pStr1++ = 'a';
    e800:	3b0f      	subs	r3, #15
    e802:	7063      	strb	r3, [r4, #1]
				*pStr1++ = 'n';
    e804:	330d      	adds	r3, #13
    e806:	70a3      	strb	r3, [r4, #2]
				*pStr1++ = ' ';
    e808:	1d26      	adds	r6, r4, #4
    e80a:	3b4e      	subs	r3, #78	; 0x4e
    e80c:	70e3      	strb	r3, [r4, #3]
				if(!rn_cfg_mode)	//afer exiting from config mode, use API to read PAN ID; in config mode, just use variable myPAN_ID
    e80e:	4bd6      	ldr	r3, [pc, #856]	; (eb68 <RNCmd_ProcessCommand+0x7cc>)
    e810:	781b      	ldrb	r3, [r3, #0]
    e812:	2b00      	cmp	r3, #0
    e814:	d019      	beq.n	e84a <RNCmd_ProcessCommand+0x4ae>
				pana[0] = (uint8_t)(myPAN_ID>>8);
    e816:	4bd5      	ldr	r3, [pc, #852]	; (eb6c <RNCmd_ProcessCommand+0x7d0>)
    e818:	881b      	ldrh	r3, [r3, #0]
    e81a:	a808      	add	r0, sp, #32
    e81c:	0a1a      	lsrs	r2, r3, #8
    e81e:	7002      	strb	r2, [r0, #0]
				pana[1] = (uint8_t)myPAN_ID;
    e820:	7043      	strb	r3, [r0, #1]
				num2HexStr(pana, 2, pStr1, 5);
    e822:	2305      	movs	r3, #5
    e824:	0032      	movs	r2, r6
    e826:	2102      	movs	r1, #2
    e828:	4ed1      	ldr	r6, [pc, #836]	; (eb70 <RNCmd_ProcessCommand+0x7d4>)
    e82a:	47b0      	blx	r6
				if(enable_echo)
    e82c:	4bcd      	ldr	r3, [pc, #820]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    e82e:	781b      	ldrb	r3, [r3, #0]
    e830:	2b00      	cmp	r3, #0
    e832:	d00f      	beq.n	e854 <RNCmd_ProcessCommand+0x4b8>
				*pStr1++ = '\n';
    e834:	230a      	movs	r3, #10
    e836:	7223      	strb	r3, [r4, #8]
				*pStr1 = '\r';
    e838:	3303      	adds	r3, #3
    e83a:	7263      	strb	r3, [r4, #9]
				str1Len += 2;
    e83c:	350a      	adds	r5, #10
    e83e:	b2e9      	uxtb	r1, r5
				sio2host_tx(str1, str1Len);
    e840:	a809      	add	r0, sp, #36	; 0x24
    e842:	4bcc      	ldr	r3, [pc, #816]	; (eb74 <RNCmd_ProcessCommand+0x7d8>)
    e844:	4798      	blx	r3
    e846:	f000 fc52 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
					MiApp_Get(PANID, &myPAN_ID);
    e84a:	49c8      	ldr	r1, [pc, #800]	; (eb6c <RNCmd_ProcessCommand+0x7d0>)
    e84c:	2001      	movs	r0, #1
    e84e:	4bca      	ldr	r3, [pc, #808]	; (eb78 <RNCmd_ProcessCommand+0x7dc>)
    e850:	4798      	blx	r3
    e852:	e7e0      	b.n	e816 <RNCmd_ProcessCommand+0x47a>
					*pStr1++ = '\r';	//0x13, ENTER
    e854:	230d      	movs	r3, #13
    e856:	7223      	strb	r3, [r4, #8]
					str1Len += 1;
    e858:	3509      	adds	r5, #9
    e85a:	b2e9      	uxtb	r1, r5
    e85c:	e7f0      	b.n	e840 <RNCmd_ProcessCommand+0x4a4>
				memset(str1, 0, sizeof(str1));
    e85e:	22c8      	movs	r2, #200	; 0xc8
    e860:	2100      	movs	r1, #0
    e862:	a809      	add	r0, sp, #36	; 0x24
    e864:	4bbe      	ldr	r3, [pc, #760]	; (eb60 <RNCmd_ProcessCommand+0x7c4>)
    e866:	4798      	blx	r3
				if(enable_echo)
    e868:	4bbe      	ldr	r3, [pc, #760]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    e86a:	781d      	ldrb	r5, [r3, #0]
				pStr1 = str1;
    e86c:	ac09      	add	r4, sp, #36	; 0x24
				if(enable_echo)
    e86e:	2d00      	cmp	r5, #0
    e870:	d006      	beq.n	e880 <RNCmd_ProcessCommand+0x4e4>
					*pStr1++ = '\n';
    e872:	220a      	movs	r2, #10
    e874:	7022      	strb	r2, [r4, #0]
					str1Len++;
    e876:	2501      	movs	r5, #1
					*pStr1++ = '\n';
    e878:	241d      	movs	r4, #29
    e87a:	ab02      	add	r3, sp, #8
    e87c:	469c      	mov	ip, r3
    e87e:	4464      	add	r4, ip
				*pStr1++ = 'r';	//add "role"
    e880:	2372      	movs	r3, #114	; 0x72
    e882:	7023      	strb	r3, [r4, #0]
				*pStr1++ = 'o';
    e884:	3b03      	subs	r3, #3
    e886:	7063      	strb	r3, [r4, #1]
				*pStr1++ = 'l';
    e888:	3b03      	subs	r3, #3
    e88a:	70a3      	strb	r3, [r4, #2]
				*pStr1++ = 'e';
    e88c:	3b07      	subs	r3, #7
    e88e:	70e3      	strb	r3, [r4, #3]
				*pStr1++ = ' ';
    e890:	1d62      	adds	r2, r4, #5
    e892:	3b45      	subs	r3, #69	; 0x45
    e894:	7123      	strb	r3, [r4, #4]
				temp = 0;
    e896:	2100      	movs	r1, #0
    e898:	33c7      	adds	r3, #199	; 0xc7
    e89a:	a802      	add	r0, sp, #8
    e89c:	4684      	mov	ip, r0
    e89e:	4463      	add	r3, ip
    e8a0:	7019      	strb	r1, [r3, #0]
				if(role == PAN_COORD)
    e8a2:	4bb6      	ldr	r3, [pc, #728]	; (eb7c <RNCmd_ProcessCommand+0x7e0>)
    e8a4:	781b      	ldrb	r3, [r3, #0]
    e8a6:	2b01      	cmp	r3, #1
    e8a8:	d016      	beq.n	e8d8 <RNCmd_ProcessCommand+0x53c>
				num2HexStr(&temp, 1, pStr1, 2);
    e8aa:	2302      	movs	r3, #2
    e8ac:	2101      	movs	r1, #1
    e8ae:	20e7      	movs	r0, #231	; 0xe7
    e8b0:	ae02      	add	r6, sp, #8
    e8b2:	46b4      	mov	ip, r6
    e8b4:	4460      	add	r0, ip
    e8b6:	4eae      	ldr	r6, [pc, #696]	; (eb70 <RNCmd_ProcessCommand+0x7d4>)
    e8b8:	47b0      	blx	r6
				if(enable_echo)
    e8ba:	4baa      	ldr	r3, [pc, #680]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    e8bc:	781b      	ldrb	r3, [r3, #0]
    e8be:	2b00      	cmp	r3, #0
    e8c0:	d00f      	beq.n	e8e2 <RNCmd_ProcessCommand+0x546>
					*pStr1++ = '\n';
    e8c2:	230a      	movs	r3, #10
    e8c4:	71e3      	strb	r3, [r4, #7]
					*pStr1 = '\r';
    e8c6:	3303      	adds	r3, #3
    e8c8:	7223      	strb	r3, [r4, #8]
					str1Len += 2;
    e8ca:	3509      	adds	r5, #9
    e8cc:	b2e9      	uxtb	r1, r5
				sio2host_tx(str1, str1Len);
    e8ce:	a809      	add	r0, sp, #36	; 0x24
    e8d0:	4ba8      	ldr	r3, [pc, #672]	; (eb74 <RNCmd_ProcessCommand+0x7d8>)
    e8d2:	4798      	blx	r3
    e8d4:	f000 fc0b 	bl	f0ee <RNCmd_ProcessCommand+0xd52>
					temp |= 0x02;
    e8d8:	3102      	adds	r1, #2
    e8da:	33e6      	adds	r3, #230	; 0xe6
    e8dc:	4463      	add	r3, ip
    e8de:	7019      	strb	r1, [r3, #0]
    e8e0:	e7e3      	b.n	e8aa <RNCmd_ProcessCommand+0x50e>
					*pStr1++ = '\r';	//0x13, ENTER
    e8e2:	230d      	movs	r3, #13
    e8e4:	71e3      	strb	r3, [r4, #7]
					str1Len += 1;
    e8e6:	0029      	movs	r1, r5
    e8e8:	3108      	adds	r1, #8
    e8ea:	b2c9      	uxtb	r1, r1
    e8ec:	e7ef      	b.n	e8ce <RNCmd_ProcessCommand+0x532>
				memset(str1, 0, sizeof(str1));
    e8ee:	22c8      	movs	r2, #200	; 0xc8
    e8f0:	2100      	movs	r1, #0
    e8f2:	a809      	add	r0, sp, #36	; 0x24
    e8f4:	4b9a      	ldr	r3, [pc, #616]	; (eb60 <RNCmd_ProcessCommand+0x7c4>)
    e8f6:	4798      	blx	r3
				if(enable_echo)
    e8f8:	4b9a      	ldr	r3, [pc, #616]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    e8fa:	781d      	ldrb	r5, [r3, #0]
				pStr1 = str1;
    e8fc:	ac09      	add	r4, sp, #36	; 0x24
				if(enable_echo)
    e8fe:	2d00      	cmp	r5, #0
    e900:	d006      	beq.n	e910 <RNCmd_ProcessCommand+0x574>
					*pStr1++ = '\n';
    e902:	220a      	movs	r2, #10
    e904:	7022      	strb	r2, [r4, #0]
					str1Len++;
    e906:	2501      	movs	r5, #1
					*pStr1++ = '\n';
    e908:	241d      	movs	r4, #29
    e90a:	ab02      	add	r3, sp, #8
    e90c:	469c      	mov	ip, r3
    e90e:	4464      	add	r4, ip
				*pStr1++ = 'c';	//add "consize"
    e910:	2363      	movs	r3, #99	; 0x63
    e912:	7023      	strb	r3, [r4, #0]
				*pStr1++ = 'o';
    e914:	330c      	adds	r3, #12
    e916:	7063      	strb	r3, [r4, #1]
				*pStr1++ = 'n';
    e918:	3b01      	subs	r3, #1
    e91a:	70a3      	strb	r3, [r4, #2]
				*pStr1++ = 's';
    e91c:	3305      	adds	r3, #5
    e91e:	70e3      	strb	r3, [r4, #3]
				*pStr1++ = 'i';
    e920:	3b0a      	subs	r3, #10
    e922:	7123      	strb	r3, [r4, #4]
				*pStr1++ = 'z';
    e924:	3311      	adds	r3, #17
    e926:	7163      	strb	r3, [r4, #5]
				*pStr1++ = 'e';
    e928:	3b15      	subs	r3, #21
    e92a:	71a3      	strb	r3, [r4, #6]
				*pStr1++ = ' ';
    e92c:	3b45      	subs	r3, #69	; 0x45
    e92e:	71e3      	strb	r3, [r4, #7]
				temp = Total_Connections();
    e930:	4b93      	ldr	r3, [pc, #588]	; (eb80 <RNCmd_ProcessCommand+0x7e4>)
    e932:	4798      	blx	r3
    e934:	0003      	movs	r3, r0
    e936:	20e7      	movs	r0, #231	; 0xe7
    e938:	aa02      	add	r2, sp, #8
    e93a:	4694      	mov	ip, r2
    e93c:	4460      	add	r0, ip
    e93e:	7003      	strb	r3, [r0, #0]
				*pStr1++ = ' ';
    e940:	0022      	movs	r2, r4
    e942:	3208      	adds	r2, #8
				num2HexStr(&temp, 1, pStr1, 2);
    e944:	2302      	movs	r3, #2
    e946:	2101      	movs	r1, #1
    e948:	4e89      	ldr	r6, [pc, #548]	; (eb70 <RNCmd_ProcessCommand+0x7d4>)
    e94a:	47b0      	blx	r6
				if(enable_echo)
    e94c:	4b85      	ldr	r3, [pc, #532]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    e94e:	781b      	ldrb	r3, [r3, #0]
    e950:	2b00      	cmp	r3, #0
    e952:	d00a      	beq.n	e96a <RNCmd_ProcessCommand+0x5ce>
				*pStr1++ = '\n';
    e954:	230a      	movs	r3, #10
    e956:	72a3      	strb	r3, [r4, #10]
				*pStr1 = '\r';
    e958:	3303      	adds	r3, #3
    e95a:	72e3      	strb	r3, [r4, #11]
				str1Len += 2;
    e95c:	0029      	movs	r1, r5
    e95e:	310c      	adds	r1, #12
    e960:	b2c9      	uxtb	r1, r1
				sio2host_tx(str1, str1Len);
    e962:	a809      	add	r0, sp, #36	; 0x24
    e964:	4b83      	ldr	r3, [pc, #524]	; (eb74 <RNCmd_ProcessCommand+0x7d8>)
    e966:	4798      	blx	r3
    e968:	e3c1      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
				*pStr1++ = '\r';	//0x13, ENTER
    e96a:	230d      	movs	r3, #13
    e96c:	72a3      	strb	r3, [r4, #10]
				str1Len += 1;
    e96e:	350b      	adds	r5, #11
    e970:	b2e9      	uxtb	r1, r5
    e972:	e7f6      	b.n	e962 <RNCmd_ProcessCommand+0x5c6>
				temp = str2byte(ptag3);
    e974:	4b83      	ldr	r3, [pc, #524]	; (eb84 <RNCmd_ProcessCommand+0x7e8>)
    e976:	6818      	ldr	r0, [r3, #0]
    e978:	4b83      	ldr	r3, [pc, #524]	; (eb88 <RNCmd_ProcessCommand+0x7ec>)
    e97a:	4798      	blx	r3
    e97c:	24e7      	movs	r4, #231	; 0xe7
    e97e:	ab02      	add	r3, sp, #8
    e980:	469c      	mov	ip, r3
    e982:	4464      	add	r4, ip
    e984:	7020      	strb	r0, [r4, #0]
				if(temp >= Total_Connections())
    e986:	4b7e      	ldr	r3, [pc, #504]	; (eb80 <RNCmd_ProcessCommand+0x7e4>)
    e988:	4798      	blx	r3
    e98a:	7826      	ldrb	r6, [r4, #0]
    e98c:	42b0      	cmp	r0, r6
    e98e:	d958      	bls.n	ea42 <RNCmd_ProcessCommand+0x6a6>
					memset(str1, 0, sizeof(str1));
    e990:	22c8      	movs	r2, #200	; 0xc8
    e992:	2100      	movs	r1, #0
    e994:	a809      	add	r0, sp, #36	; 0x24
    e996:	4b72      	ldr	r3, [pc, #456]	; (eb60 <RNCmd_ProcessCommand+0x7c4>)
    e998:	4798      	blx	r3
					if(enable_echo)
    e99a:	4b72      	ldr	r3, [pc, #456]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    e99c:	781c      	ldrb	r4, [r3, #0]
					pStr1 = str1;
    e99e:	ad09      	add	r5, sp, #36	; 0x24
					if(enable_echo)
    e9a0:	2c00      	cmp	r4, #0
    e9a2:	d006      	beq.n	e9b2 <RNCmd_ProcessCommand+0x616>
					*pStr1++ = '\n';
    e9a4:	220a      	movs	r2, #10
    e9a6:	702a      	strb	r2, [r5, #0]
					str1Len++;
    e9a8:	2401      	movs	r4, #1
					*pStr1++ = '\n';
    e9aa:	251d      	movs	r5, #29
    e9ac:	ab02      	add	r3, sp, #8
    e9ae:	469c      	mov	ip, r3
    e9b0:	4465      	add	r5, ip
					*pStr1++ = 'c';	//add "conn"
    e9b2:	2363      	movs	r3, #99	; 0x63
    e9b4:	702b      	strb	r3, [r5, #0]
					*pStr1++ = 'o';
    e9b6:	330c      	adds	r3, #12
    e9b8:	706b      	strb	r3, [r5, #1]
					*pStr1++ = 'n';
    e9ba:	3b01      	subs	r3, #1
    e9bc:	70ab      	strb	r3, [r5, #2]
					*pStr1++ = 'n';
    e9be:	70eb      	strb	r3, [r5, #3]
					*pStr1++ = ' ';
    e9c0:	3b4e      	subs	r3, #78	; 0x4e
    e9c2:	712b      	strb	r3, [r5, #4]
					num2Hex(temp, pana, &data_size);
    e9c4:	27e6      	movs	r7, #230	; 0xe6
    e9c6:	ab02      	add	r3, sp, #8
    e9c8:	469c      	mov	ip, r3
    e9ca:	4467      	add	r7, ip
    e9cc:	003a      	movs	r2, r7
    e9ce:	a908      	add	r1, sp, #32
    e9d0:	0030      	movs	r0, r6
    e9d2:	4b6e      	ldr	r3, [pc, #440]	; (eb8c <RNCmd_ProcessCommand+0x7f0>)
    e9d4:	4798      	blx	r3
					if(data_size == 1)
    e9d6:	783b      	ldrb	r3, [r7, #0]
    e9d8:	2b01      	cmp	r3, #1
    e9da:	d035      	beq.n	ea48 <RNCmd_ProcessCommand+0x6ac>
					else if(data_size == 2)
    e9dc:	2b02      	cmp	r3, #2
    e9de:	d03c      	beq.n	ea5a <RNCmd_ProcessCommand+0x6be>
					*pStr1++ = ' ';
    e9e0:	1d69      	adds	r1, r5, #5
					str1Len += 5;
    e9e2:	3405      	adds	r4, #5
    e9e4:	b2e4      	uxtb	r4, r4
					if( connectionTable[temp].status.bits.isValid )
    e9e6:	23e7      	movs	r3, #231	; 0xe7
    e9e8:	aa02      	add	r2, sp, #8
    e9ea:	4694      	mov	ip, r2
    e9ec:	4463      	add	r3, ip
    e9ee:	781a      	ldrb	r2, [r3, #0]
    e9f0:	0112      	lsls	r2, r2, #4
    e9f2:	4b67      	ldr	r3, [pc, #412]	; (eb90 <RNCmd_ProcessCommand+0x7f4>)
    e9f4:	189b      	adds	r3, r3, r2
    e9f6:	7b1b      	ldrb	r3, [r3, #12]
    e9f8:	09db      	lsrs	r3, r3, #7
    e9fa:	d03a      	beq.n	ea72 <RNCmd_ProcessCommand+0x6d6>
						*pStr1++ = '1';	//'1' means valid
    e9fc:	2331      	movs	r3, #49	; 0x31
    e9fe:	700b      	strb	r3, [r1, #0]
						*pStr1++ = ' ';
    ea00:	1c8d      	adds	r5, r1, #2
    ea02:	3b11      	subs	r3, #17
    ea04:	704b      	strb	r3, [r1, #1]
						str1Len += 2;
    ea06:	3402      	adds	r4, #2
    ea08:	b2e4      	uxtb	r4, r4
					num2HexStr(connectionTable[temp].Address, MY_ADDRESS_LENGTH, pStr1, 2*MY_ADDRESS_LENGTH+1);
    ea0a:	23e7      	movs	r3, #231	; 0xe7
    ea0c:	aa02      	add	r2, sp, #8
    ea0e:	4694      	mov	ip, r2
    ea10:	4463      	add	r3, ip
    ea12:	7818      	ldrb	r0, [r3, #0]
    ea14:	0100      	lsls	r0, r0, #4
    ea16:	3004      	adds	r0, #4
    ea18:	4b5d      	ldr	r3, [pc, #372]	; (eb90 <RNCmd_ProcessCommand+0x7f4>)
    ea1a:	18c0      	adds	r0, r0, r3
    ea1c:	2311      	movs	r3, #17
    ea1e:	002a      	movs	r2, r5
    ea20:	2108      	movs	r1, #8
    ea22:	4e53      	ldr	r6, [pc, #332]	; (eb70 <RNCmd_ProcessCommand+0x7d4>)
    ea24:	47b0      	blx	r6
					if(enable_echo)
    ea26:	4b4f      	ldr	r3, [pc, #316]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    ea28:	781b      	ldrb	r3, [r3, #0]
    ea2a:	2b00      	cmp	r3, #0
    ea2c:	d029      	beq.n	ea82 <RNCmd_ProcessCommand+0x6e6>
						*pStr1++ = '\n';
    ea2e:	230a      	movs	r3, #10
    ea30:	742b      	strb	r3, [r5, #16]
						*pStr1 = '\r';
    ea32:	3303      	adds	r3, #3
    ea34:	746b      	strb	r3, [r5, #17]
						str1Len += 2;
    ea36:	3412      	adds	r4, #18
    ea38:	b2e1      	uxtb	r1, r4
					sio2host_tx(str1, str1Len);
    ea3a:	a809      	add	r0, sp, #36	; 0x24
    ea3c:	4b4d      	ldr	r3, [pc, #308]	; (eb74 <RNCmd_ProcessCommand+0x7d8>)
    ea3e:	4798      	blx	r3
    ea40:	e355      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
					RNCmd_ResponseERR();
    ea42:	4b54      	ldr	r3, [pc, #336]	; (eb94 <RNCmd_ProcessCommand+0x7f8>)
    ea44:	4798      	blx	r3
    ea46:	e352      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
						*pStr1++ = pana[0];
    ea48:	ab08      	add	r3, sp, #32
    ea4a:	781b      	ldrb	r3, [r3, #0]
    ea4c:	716b      	strb	r3, [r5, #5]
						*pStr1++ = ' ';
    ea4e:	1de9      	adds	r1, r5, #7
    ea50:	2320      	movs	r3, #32
    ea52:	71ab      	strb	r3, [r5, #6]
						str1Len += 2;
    ea54:	3407      	adds	r4, #7
    ea56:	b2e4      	uxtb	r4, r4
    ea58:	e7c5      	b.n	e9e6 <RNCmd_ProcessCommand+0x64a>
						*pStr1++ = pana[0];
    ea5a:	ab08      	add	r3, sp, #32
    ea5c:	781a      	ldrb	r2, [r3, #0]
    ea5e:	716a      	strb	r2, [r5, #5]
						*pStr1++ = pana[1];
    ea60:	785b      	ldrb	r3, [r3, #1]
    ea62:	71ab      	strb	r3, [r5, #6]
						*pStr1++ = ' ';
    ea64:	0029      	movs	r1, r5
    ea66:	3108      	adds	r1, #8
    ea68:	2320      	movs	r3, #32
    ea6a:	71eb      	strb	r3, [r5, #7]
						str1Len += 3;
    ea6c:	3408      	adds	r4, #8
    ea6e:	b2e4      	uxtb	r4, r4
    ea70:	e7b9      	b.n	e9e6 <RNCmd_ProcessCommand+0x64a>
						*pStr1++ = '0';	//'0' means invalid
    ea72:	2330      	movs	r3, #48	; 0x30
    ea74:	700b      	strb	r3, [r1, #0]
						*pStr1++ = ' ';
    ea76:	1c8d      	adds	r5, r1, #2
    ea78:	3b10      	subs	r3, #16
    ea7a:	704b      	strb	r3, [r1, #1]
						str1Len += 2;
    ea7c:	3402      	adds	r4, #2
    ea7e:	b2e4      	uxtb	r4, r4
    ea80:	e7c3      	b.n	ea0a <RNCmd_ProcessCommand+0x66e>
						*pStr1++ = '\r';	//0x13, ENTER
    ea82:	230d      	movs	r3, #13
    ea84:	742b      	strb	r3, [r5, #16]
						str1Len += 1;
    ea86:	3411      	adds	r4, #17
    ea88:	b2e1      	uxtb	r1, r4
    ea8a:	e7d6      	b.n	ea3a <RNCmd_ProcessCommand+0x69e>
			else if(strcmp(StrVER, (const char*)ptag2) == 0)	//command: get ver
    ea8c:	0021      	movs	r1, r4
    ea8e:	4842      	ldr	r0, [pc, #264]	; (eb98 <RNCmd_ProcessCommand+0x7fc>)
    ea90:	4b42      	ldr	r3, [pc, #264]	; (eb9c <RNCmd_ProcessCommand+0x800>)
    ea92:	4798      	blx	r3
    ea94:	2800      	cmp	r0, #0
    ea96:	d000      	beq.n	ea9a <RNCmd_ProcessCommand+0x6fe>
    ea98:	e159      	b.n	ed4e <RNCmd_ProcessCommand+0x9b2>
				if(enable_echo)
    ea9a:	4b32      	ldr	r3, [pc, #200]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    ea9c:	781b      	ldrb	r3, [r3, #0]
    ea9e:	2b00      	cmp	r3, #0
    eaa0:	d004      	beq.n	eaac <RNCmd_ProcessCommand+0x710>
				sio2host_tx((uint8_t *)StrRET_VERSION, sizeof(StrRET_VERSION));
    eaa2:	2112      	movs	r1, #18
    eaa4:	483e      	ldr	r0, [pc, #248]	; (eba0 <RNCmd_ProcessCommand+0x804>)
    eaa6:	4b33      	ldr	r3, [pc, #204]	; (eb74 <RNCmd_ProcessCommand+0x7d8>)
    eaa8:	4798      	blx	r3
    eaaa:	e320      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
				sio2host_tx((uint8_t *)StrRET_VERSION2, sizeof(StrRET_VERSION2));
    eaac:	2110      	movs	r1, #16
    eaae:	483d      	ldr	r0, [pc, #244]	; (eba4 <RNCmd_ProcessCommand+0x808>)
    eab0:	4b30      	ldr	r3, [pc, #192]	; (eb74 <RNCmd_ProcessCommand+0x7d8>)
    eab2:	4798      	blx	r3
    eab4:	e31b      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
					memset(str1, 0, sizeof(str1));
    eab6:	22c8      	movs	r2, #200	; 0xc8
    eab8:	2100      	movs	r1, #0
    eaba:	a809      	add	r0, sp, #36	; 0x24
    eabc:	4b28      	ldr	r3, [pc, #160]	; (eb60 <RNCmd_ProcessCommand+0x7c4>)
    eabe:	4798      	blx	r3
					if(enable_echo)
    eac0:	4b28      	ldr	r3, [pc, #160]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    eac2:	781c      	ldrb	r4, [r3, #0]
					pStr1 = str1;
    eac4:	ad09      	add	r5, sp, #36	; 0x24
					if(enable_echo)
    eac6:	2c00      	cmp	r4, #0
    eac8:	d006      	beq.n	ead8 <RNCmd_ProcessCommand+0x73c>
						*pStr1++ = '\n';
    eaca:	220a      	movs	r2, #10
    eacc:	702a      	strb	r2, [r5, #0]
						str1Len++;
    eace:	2401      	movs	r4, #1
						*pStr1++ = '\n';
    ead0:	251d      	movs	r5, #29
    ead2:	ab02      	add	r3, sp, #8
    ead4:	469c      	mov	ip, r3
    ead6:	4465      	add	r5, ip
					*pStr1++ = 'e';	//add "edsize"
    ead8:	2365      	movs	r3, #101	; 0x65
    eada:	702b      	strb	r3, [r5, #0]
					*pStr1++ = 'd';
    eadc:	2264      	movs	r2, #100	; 0x64
    eade:	706a      	strb	r2, [r5, #1]
					*pStr1++ = 's';
    eae0:	320f      	adds	r2, #15
    eae2:	70aa      	strb	r2, [r5, #2]
					*pStr1++ = 'i';
    eae4:	3a0a      	subs	r2, #10
    eae6:	70ea      	strb	r2, [r5, #3]
					*pStr1++ = 'z';
    eae8:	3211      	adds	r2, #17
    eaea:	712a      	strb	r2, [r5, #4]
					*pStr1++ = 'e';
    eaec:	716b      	strb	r3, [r5, #5]
					*pStr1++ = ' ';
    eaee:	3b45      	subs	r3, #69	; 0x45
    eaf0:	71ab      	strb	r3, [r5, #6]
					num2Hex(end_nodes, pStr1, &temp);
    eaf2:	26e7      	movs	r6, #231	; 0xe7
    eaf4:	ab02      	add	r3, sp, #8
    eaf6:	469c      	mov	ip, r3
    eaf8:	4466      	add	r6, ip
					*pStr1++ = ' ';
    eafa:	1de9      	adds	r1, r5, #7
					num2Hex(end_nodes, pStr1, &temp);
    eafc:	4b2a      	ldr	r3, [pc, #168]	; (eba8 <RNCmd_ProcessCommand+0x80c>)
    eafe:	7818      	ldrb	r0, [r3, #0]
    eb00:	0032      	movs	r2, r6
    eb02:	4b22      	ldr	r3, [pc, #136]	; (eb8c <RNCmd_ProcessCommand+0x7f0>)
    eb04:	4798      	blx	r3
					if(temp == 1)
    eb06:	7833      	ldrb	r3, [r6, #0]
    eb08:	2b01      	cmp	r3, #1
    eb0a:	d011      	beq.n	eb30 <RNCmd_ProcessCommand+0x794>
						pStr1 += 2;
    eb0c:	3509      	adds	r5, #9
						str1Len += 2;
    eb0e:	0023      	movs	r3, r4
    eb10:	3309      	adds	r3, #9
    eb12:	b2db      	uxtb	r3, r3
					if(enable_echo)
    eb14:	4913      	ldr	r1, [pc, #76]	; (eb64 <RNCmd_ProcessCommand+0x7c8>)
    eb16:	7809      	ldrb	r1, [r1, #0]
    eb18:	2900      	cmp	r1, #0
    eb1a:	d00e      	beq.n	eb3a <RNCmd_ProcessCommand+0x79e>
						*pStr1++ = '\n';
    eb1c:	210a      	movs	r1, #10
    eb1e:	7029      	strb	r1, [r5, #0]
						*pStr1 = '\r';
    eb20:	3103      	adds	r1, #3
    eb22:	7069      	strb	r1, [r5, #1]
						str1Len += 2;
    eb24:	3302      	adds	r3, #2
    eb26:	b2d9      	uxtb	r1, r3
					sio2host_tx(str1, str1Len);
    eb28:	a809      	add	r0, sp, #36	; 0x24
    eb2a:	4b12      	ldr	r3, [pc, #72]	; (eb74 <RNCmd_ProcessCommand+0x7d8>)
    eb2c:	4798      	blx	r3
    eb2e:	e2de      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
						pStr1++;
    eb30:	3508      	adds	r5, #8
						str1Len ++;
    eb32:	0023      	movs	r3, r4
    eb34:	3308      	adds	r3, #8
    eb36:	b2db      	uxtb	r3, r3
    eb38:	e7ec      	b.n	eb14 <RNCmd_ProcessCommand+0x778>
						*pStr1++ = '\r';	//0x13, ENTER
    eb3a:	210d      	movs	r1, #13
    eb3c:	7029      	strb	r1, [r5, #0]
						str1Len += 1;
    eb3e:	3301      	adds	r3, #1
    eb40:	b2d9      	uxtb	r1, r3
    eb42:	e7f1      	b.n	eb28 <RNCmd_ProcessCommand+0x78c>
			else if(!rn_cfg_mode && (strcmp(StrMYINDEX, (const char*)ptag2) == 0))	//command: get myindex
    eb44:	0021      	movs	r1, r4
    eb46:	4819      	ldr	r0, [pc, #100]	; (ebac <RNCmd_ProcessCommand+0x810>)
    eb48:	4b14      	ldr	r3, [pc, #80]	; (eb9c <RNCmd_ProcessCommand+0x800>)
    eb4a:	4798      	blx	r3
    eb4c:	2800      	cmp	r0, #0
    eb4e:	d17a      	bne.n	ec46 <RNCmd_ProcessCommand+0x8aa>
				if(role == END_DEVICE)
    eb50:	4b0a      	ldr	r3, [pc, #40]	; (eb7c <RNCmd_ProcessCommand+0x7e0>)
    eb52:	781b      	ldrb	r3, [r3, #0]
    eb54:	2b02      	cmp	r3, #2
    eb56:	d02b      	beq.n	ebb0 <RNCmd_ProcessCommand+0x814>
					RNCmd_ResponseERR();
    eb58:	4b0e      	ldr	r3, [pc, #56]	; (eb94 <RNCmd_ProcessCommand+0x7f8>)
    eb5a:	4798      	blx	r3
    eb5c:	e2c7      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
    eb5e:	46c0      	nop			; (mov r8, r8)
    eb60:	00010aa9 	.word	0x00010aa9
    eb64:	20001ccc 	.word	0x20001ccc
    eb68:	2000001c 	.word	0x2000001c
    eb6c:	2000001a 	.word	0x2000001a
    eb70:	0000e1e9 	.word	0x0000e1e9
    eb74:	0000869d 	.word	0x0000869d
    eb78:	0000b715 	.word	0x0000b715
    eb7c:	20002160 	.word	0x20002160
    eb80:	0000ba8d 	.word	0x0000ba8d
    eb84:	20002398 	.word	0x20002398
    eb88:	0000e2d9 	.word	0x0000e2d9
    eb8c:	0000e23b 	.word	0x0000e23b
    eb90:	200023b0 	.word	0x200023b0
    eb94:	0000e32d 	.word	0x0000e32d
    eb98:	000128d0 	.word	0x000128d0
    eb9c:	00011291 	.word	0x00011291
    eba0:	0001288c 	.word	0x0001288c
    eba4:	000128a0 	.word	0x000128a0
    eba8:	20000410 	.word	0x20000410
    ebac:	00012854 	.word	0x00012854
					memset(str1, 0, sizeof(str1));
    ebb0:	22c8      	movs	r2, #200	; 0xc8
    ebb2:	2100      	movs	r1, #0
    ebb4:	a809      	add	r0, sp, #36	; 0x24
    ebb6:	4bd2      	ldr	r3, [pc, #840]	; (ef00 <RNCmd_ProcessCommand+0xb64>)
    ebb8:	4798      	blx	r3
					if(enable_echo)
    ebba:	4bd2      	ldr	r3, [pc, #840]	; (ef04 <RNCmd_ProcessCommand+0xb68>)
    ebbc:	781c      	ldrb	r4, [r3, #0]
					pStr1 = str1;
    ebbe:	ad09      	add	r5, sp, #36	; 0x24
					if(enable_echo)
    ebc0:	2c00      	cmp	r4, #0
    ebc2:	d006      	beq.n	ebd2 <RNCmd_ProcessCommand+0x836>
						*pStr1++ = '\n';
    ebc4:	220a      	movs	r2, #10
    ebc6:	702a      	strb	r2, [r5, #0]
						str1Len++;
    ebc8:	2401      	movs	r4, #1
						*pStr1++ = '\n';
    ebca:	251d      	movs	r5, #29
    ebcc:	ab02      	add	r3, sp, #8
    ebce:	469c      	mov	ip, r3
    ebd0:	4465      	add	r5, ip
					*pStr1++ = 'm';	//add "edsize"
    ebd2:	236d      	movs	r3, #109	; 0x6d
    ebd4:	702b      	strb	r3, [r5, #0]
					*pStr1++ = 'y';
    ebd6:	330c      	adds	r3, #12
    ebd8:	706b      	strb	r3, [r5, #1]
					*pStr1++ = 'i';
    ebda:	3b10      	subs	r3, #16
    ebdc:	70ab      	strb	r3, [r5, #2]
					*pStr1++ = 'n';
    ebde:	3305      	adds	r3, #5
    ebe0:	70eb      	strb	r3, [r5, #3]
					*pStr1++ = 'd';
    ebe2:	3b0a      	subs	r3, #10
    ebe4:	712b      	strb	r3, [r5, #4]
					*pStr1++ = 'e';
    ebe6:	3301      	adds	r3, #1
    ebe8:	716b      	strb	r3, [r5, #5]
					*pStr1++ = 'x';
    ebea:	3313      	adds	r3, #19
    ebec:	71ab      	strb	r3, [r5, #6]
					*pStr1++ = ' ';
    ebee:	3b58      	subs	r3, #88	; 0x58
    ebf0:	71eb      	strb	r3, [r5, #7]
					num2Hex(myConnectionIndex_in_PanCo, pStr1, &temp);
    ebf2:	26e7      	movs	r6, #231	; 0xe7
    ebf4:	ab02      	add	r3, sp, #8
    ebf6:	469c      	mov	ip, r3
    ebf8:	4466      	add	r6, ip
					*pStr1++ = ' ';
    ebfa:	0029      	movs	r1, r5
    ebfc:	3108      	adds	r1, #8
					num2Hex(myConnectionIndex_in_PanCo, pStr1, &temp);
    ebfe:	4bc2      	ldr	r3, [pc, #776]	; (ef08 <RNCmd_ProcessCommand+0xb6c>)
    ec00:	7818      	ldrb	r0, [r3, #0]
    ec02:	0032      	movs	r2, r6
    ec04:	4bc1      	ldr	r3, [pc, #772]	; (ef0c <RNCmd_ProcessCommand+0xb70>)
    ec06:	4798      	blx	r3
					if(temp == 1)
    ec08:	7833      	ldrb	r3, [r6, #0]
    ec0a:	2b01      	cmp	r3, #1
    ec0c:	d011      	beq.n	ec32 <RNCmd_ProcessCommand+0x896>
						pStr1 += 2;
    ec0e:	350a      	adds	r5, #10
						str1Len += 2;
    ec10:	0023      	movs	r3, r4
    ec12:	330a      	adds	r3, #10
    ec14:	b2db      	uxtb	r3, r3
					if(enable_echo)
    ec16:	49bb      	ldr	r1, [pc, #748]	; (ef04 <RNCmd_ProcessCommand+0xb68>)
    ec18:	7809      	ldrb	r1, [r1, #0]
    ec1a:	2900      	cmp	r1, #0
    ec1c:	d00e      	beq.n	ec3c <RNCmd_ProcessCommand+0x8a0>
						*pStr1++ = '\n';
    ec1e:	210a      	movs	r1, #10
    ec20:	7029      	strb	r1, [r5, #0]
						*pStr1 = '\r';
    ec22:	3103      	adds	r1, #3
    ec24:	7069      	strb	r1, [r5, #1]
						str1Len += 2;
    ec26:	3302      	adds	r3, #2
    ec28:	b2d9      	uxtb	r1, r3
					sio2host_tx(str1, str1Len);
    ec2a:	a809      	add	r0, sp, #36	; 0x24
    ec2c:	4bb8      	ldr	r3, [pc, #736]	; (ef10 <RNCmd_ProcessCommand+0xb74>)
    ec2e:	4798      	blx	r3
    ec30:	e25d      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
						pStr1++;
    ec32:	3509      	adds	r5, #9
						str1Len ++;
    ec34:	0023      	movs	r3, r4
    ec36:	3309      	adds	r3, #9
    ec38:	b2db      	uxtb	r3, r3
    ec3a:	e7ec      	b.n	ec16 <RNCmd_ProcessCommand+0x87a>
						*pStr1++ = '\r';	//0x13, ENTER
    ec3c:	210d      	movs	r1, #13
    ec3e:	7029      	strb	r1, [r5, #0]
						str1Len += 1;
    ec40:	3301      	adds	r3, #1
    ec42:	b2d9      	uxtb	r1, r3
    ec44:	e7f1      	b.n	ec2a <RNCmd_ProcessCommand+0x88e>
			else if(!rn_cfg_mode && (strcmp(StrEDS, (const char*)ptag2) == 0))	//command: get eds r1 r2
    ec46:	0021      	movs	r1, r4
    ec48:	48b2      	ldr	r0, [pc, #712]	; (ef14 <RNCmd_ProcessCommand+0xb78>)
    ec4a:	4bb3      	ldr	r3, [pc, #716]	; (ef18 <RNCmd_ProcessCommand+0xb7c>)
    ec4c:	4798      	blx	r3
    ec4e:	2800      	cmp	r0, #0
    ec50:	d17d      	bne.n	ed4e <RNCmd_ProcessCommand+0x9b2>
				if(role == END_DEVICE)
    ec52:	4bb2      	ldr	r3, [pc, #712]	; (ef1c <RNCmd_ProcessCommand+0xb80>)
    ec54:	781b      	ldrb	r3, [r3, #0]
    ec56:	2b02      	cmp	r3, #2
    ec58:	d176      	bne.n	ed48 <RNCmd_ProcessCommand+0x9ac>
					if(ptag3 && ptag4)
    ec5a:	4bb1      	ldr	r3, [pc, #708]	; (ef20 <RNCmd_ProcessCommand+0xb84>)
    ec5c:	6818      	ldr	r0, [r3, #0]
    ec5e:	2800      	cmp	r0, #0
    ec60:	d06f      	beq.n	ed42 <RNCmd_ProcessCommand+0x9a6>
    ec62:	4bb0      	ldr	r3, [pc, #704]	; (ef24 <RNCmd_ProcessCommand+0xb88>)
    ec64:	681d      	ldr	r5, [r3, #0]
    ec66:	2d00      	cmp	r5, #0
    ec68:	d06b      	beq.n	ed42 <RNCmd_ProcessCommand+0x9a6>
						temp = str2byte(ptag3);	//get start index of eds reading
    ec6a:	4caf      	ldr	r4, [pc, #700]	; (ef28 <RNCmd_ProcessCommand+0xb8c>)
    ec6c:	47a0      	blx	r4
    ec6e:	0006      	movs	r6, r0
    ec70:	23e7      	movs	r3, #231	; 0xe7
    ec72:	aa02      	add	r2, sp, #8
    ec74:	4694      	mov	ip, r2
    ec76:	4463      	add	r3, ip
    ec78:	7018      	strb	r0, [r3, #0]
						data_size = str2byte(ptag4);	//get end index of eds reading
    ec7a:	0028      	movs	r0, r5
    ec7c:	47a0      	blx	r4
    ec7e:	23e6      	movs	r3, #230	; 0xe6
    ec80:	a902      	add	r1, sp, #8
    ec82:	468c      	mov	ip, r1
    ec84:	4463      	add	r3, ip
    ec86:	7018      	strb	r0, [r3, #0]
						if(temp > data_size || temp >= end_nodes || data_size >= end_nodes)
    ec88:	4286      	cmp	r6, r0
    ec8a:	d805      	bhi.n	ec98 <RNCmd_ProcessCommand+0x8fc>
    ec8c:	4ba7      	ldr	r3, [pc, #668]	; (ef2c <RNCmd_ProcessCommand+0xb90>)
    ec8e:	781b      	ldrb	r3, [r3, #0]
    ec90:	429e      	cmp	r6, r3
    ec92:	d201      	bcs.n	ec98 <RNCmd_ProcessCommand+0x8fc>
    ec94:	4298      	cmp	r0, r3
    ec96:	d302      	bcc.n	ec9e <RNCmd_ProcessCommand+0x902>
							RNCmd_ResponseERR();
    ec98:	4ba5      	ldr	r3, [pc, #660]	; (ef30 <RNCmd_ProcessCommand+0xb94>)
    ec9a:	4798      	blx	r3
    ec9c:	e227      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
						memset(str1, 0, sizeof(str1));
    ec9e:	22c8      	movs	r2, #200	; 0xc8
    eca0:	2100      	movs	r1, #0
    eca2:	a809      	add	r0, sp, #36	; 0x24
    eca4:	4b96      	ldr	r3, [pc, #600]	; (ef00 <RNCmd_ProcessCommand+0xb64>)
    eca6:	4798      	blx	r3
						if(enable_echo)
    eca8:	4b96      	ldr	r3, [pc, #600]	; (ef04 <RNCmd_ProcessCommand+0xb68>)
    ecaa:	7819      	ldrb	r1, [r3, #0]
						pStr1 = str1;
    ecac:	ab09      	add	r3, sp, #36	; 0x24
						if(enable_echo)
    ecae:	2900      	cmp	r1, #0
    ecb0:	d006      	beq.n	ecc0 <RNCmd_ProcessCommand+0x924>
							*pStr1++ = '\n';
    ecb2:	220a      	movs	r2, #10
    ecb4:	701a      	strb	r2, [r3, #0]
							str1Len++;
    ecb6:	2101      	movs	r1, #1
							*pStr1++ = '\n';
    ecb8:	231d      	movs	r3, #29
    ecba:	aa02      	add	r2, sp, #8
    ecbc:	4694      	mov	ip, r2
    ecbe:	4463      	add	r3, ip
						*pStr1++ = 'e';	//add "eds"
    ecc0:	2265      	movs	r2, #101	; 0x65
    ecc2:	701a      	strb	r2, [r3, #0]
						*pStr1++ = 'd';
    ecc4:	3a01      	subs	r2, #1
    ecc6:	705a      	strb	r2, [r3, #1]
						*pStr1++ = 's';
    ecc8:	320f      	adds	r2, #15
    ecca:	709a      	strb	r2, [r3, #2]
						*pStr1++ = ' ';
    eccc:	1d1f      	adds	r7, r3, #4
    ecce:	3a53      	subs	r2, #83	; 0x53
    ecd0:	70da      	strb	r2, [r3, #3]
						str1Len += 4;
    ecd2:	3104      	adds	r1, #4
    ecd4:	b2cc      	uxtb	r4, r1
							num2HexStr(&END_DEVICES_Short_Address[index].Address[0], 3, pStr1, 6);
    ecd6:	4b97      	ldr	r3, [pc, #604]	; (ef34 <RNCmd_ProcessCommand+0xb98>)
    ecd8:	4699      	mov	r9, r3
    ecda:	4b97      	ldr	r3, [pc, #604]	; (ef38 <RNCmd_ProcessCommand+0xb9c>)
    ecdc:	4698      	mov	r8, r3
    ecde:	e001      	b.n	ece4 <RNCmd_ProcessCommand+0x948>
							str1Len += 2;
    ece0:	001c      	movs	r4, r3
							pStr1+=2;
    ece2:	000f      	movs	r7, r1
    ece4:	00b5      	lsls	r5, r6, #2
							num2HexStr(&END_DEVICES_Short_Address[index].Address[0], 3, pStr1, 6);
    ece6:	464b      	mov	r3, r9
    ece8:	18e8      	adds	r0, r5, r3
    ecea:	2306      	movs	r3, #6
    ecec:	003a      	movs	r2, r7
    ecee:	2103      	movs	r1, #3
    ecf0:	47c0      	blx	r8
							pStr1+=6;
    ecf2:	1dba      	adds	r2, r7, #6
							num2HexStr(&END_DEVICES_Short_Address[index].connection_slot, 1, pStr1, 2);
    ecf4:	1ce8      	adds	r0, r5, #3
    ecf6:	4448      	add	r0, r9
    ecf8:	2302      	movs	r3, #2
    ecfa:	2101      	movs	r1, #1
    ecfc:	47c0      	blx	r8
    ecfe:	0039      	movs	r1, r7
    ed00:	3108      	adds	r1, #8
							str1Len += 2;
    ed02:	0023      	movs	r3, r4
    ed04:	3308      	adds	r3, #8
    ed06:	b2db      	uxtb	r3, r3
						for(index=temp; index<=data_size; index++)
    ed08:	3601      	adds	r6, #1
    ed0a:	b2f6      	uxtb	r6, r6
    ed0c:	aa02      	add	r2, sp, #8
    ed0e:	20e6      	movs	r0, #230	; 0xe6
    ed10:	1812      	adds	r2, r2, r0
    ed12:	7812      	ldrb	r2, [r2, #0]
    ed14:	42b2      	cmp	r2, r6
    ed16:	d2e3      	bcs.n	ece0 <RNCmd_ProcessCommand+0x944>
						if(enable_echo)
    ed18:	4b7a      	ldr	r3, [pc, #488]	; (ef04 <RNCmd_ProcessCommand+0xb68>)
    ed1a:	781b      	ldrb	r3, [r3, #0]
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	d00a      	beq.n	ed36 <RNCmd_ProcessCommand+0x99a>
							*pStr1++ = '\n';
    ed20:	230a      	movs	r3, #10
    ed22:	723b      	strb	r3, [r7, #8]
							*pStr1 = '\r';
    ed24:	3303      	adds	r3, #3
    ed26:	727b      	strb	r3, [r7, #9]
							str1Len += 2;
    ed28:	0021      	movs	r1, r4
    ed2a:	310a      	adds	r1, #10
    ed2c:	b2c9      	uxtb	r1, r1
						sio2host_tx(str1, str1Len);
    ed2e:	a809      	add	r0, sp, #36	; 0x24
    ed30:	4b77      	ldr	r3, [pc, #476]	; (ef10 <RNCmd_ProcessCommand+0xb74>)
    ed32:	4798      	blx	r3
    ed34:	e1db      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
							*pStr1++ = '\r';	//0x13, ENTER
    ed36:	230d      	movs	r3, #13
    ed38:	723b      	strb	r3, [r7, #8]
							str1Len += 1;
    ed3a:	0021      	movs	r1, r4
    ed3c:	3109      	adds	r1, #9
    ed3e:	b2c9      	uxtb	r1, r1
    ed40:	e7f5      	b.n	ed2e <RNCmd_ProcessCommand+0x992>
						RNCmd_ResponseERR();
    ed42:	4b7b      	ldr	r3, [pc, #492]	; (ef30 <RNCmd_ProcessCommand+0xb94>)
    ed44:	4798      	blx	r3
    ed46:	e1d2      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
					RNCmd_ResponseERR();
    ed48:	4b79      	ldr	r3, [pc, #484]	; (ef30 <RNCmd_ProcessCommand+0xb94>)
    ed4a:	4798      	blx	r3
    ed4c:	e1cf      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
				RNCmd_ResponseERR();
    ed4e:	4b78      	ldr	r3, [pc, #480]	; (ef30 <RNCmd_ProcessCommand+0xb94>)
    ed50:	4798      	blx	r3
    ed52:	e1cc      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
			RNCmd_ResponseERR();
    ed54:	4b76      	ldr	r3, [pc, #472]	; (ef30 <RNCmd_ProcessCommand+0xb94>)
    ed56:	4798      	blx	r3
    ed58:	e1c9      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
		if(!rn_cfg_mode && (strcmp(StrSTART, (const char*)ptag1) == 0))	//command: start
    ed5a:	4b78      	ldr	r3, [pc, #480]	; (ef3c <RNCmd_ProcessCommand+0xba0>)
    ed5c:	781b      	ldrb	r3, [r3, #0]
    ed5e:	2b00      	cmp	r3, #0
    ed60:	d000      	beq.n	ed64 <RNCmd_ProcessCommand+0x9c8>
    ed62:	e1b5      	b.n	f0d0 <RNCmd_ProcessCommand+0xd34>
    ed64:	0021      	movs	r1, r4
    ed66:	4876      	ldr	r0, [pc, #472]	; (ef40 <RNCmd_ProcessCommand+0xba4>)
    ed68:	4b6b      	ldr	r3, [pc, #428]	; (ef18 <RNCmd_ProcessCommand+0xb7c>)
    ed6a:	4798      	blx	r3
    ed6c:	2800      	cmp	r0, #0
    ed6e:	d06f      	beq.n	ee50 <RNCmd_ProcessCommand+0xab4>
		else if(!rn_cfg_mode && (strcmp(StrSEND, (const char*)ptag1) == 0))	//command: send r1 r2 r3
    ed70:	0021      	movs	r1, r4
    ed72:	4874      	ldr	r0, [pc, #464]	; (ef44 <RNCmd_ProcessCommand+0xba8>)
    ed74:	4b68      	ldr	r3, [pc, #416]	; (ef18 <RNCmd_ProcessCommand+0xb7c>)
    ed76:	4798      	blx	r3
    ed78:	2800      	cmp	r0, #0
    ed7a:	d000      	beq.n	ed7e <RNCmd_ProcessCommand+0x9e2>
    ed7c:	e1a8      	b.n	f0d0 <RNCmd_ProcessCommand+0xd34>
			if(ptag2 && ptag3 && ptag4)
    ed7e:	4b72      	ldr	r3, [pc, #456]	; (ef48 <RNCmd_ProcessCommand+0xbac>)
    ed80:	681c      	ldr	r4, [r3, #0]
    ed82:	2c00      	cmp	r4, #0
    ed84:	d100      	bne.n	ed88 <RNCmd_ProcessCommand+0x9ec>
    ed86:	e1a0      	b.n	f0ca <RNCmd_ProcessCommand+0xd2e>
    ed88:	4b65      	ldr	r3, [pc, #404]	; (ef20 <RNCmd_ProcessCommand+0xb84>)
    ed8a:	681d      	ldr	r5, [r3, #0]
    ed8c:	2d00      	cmp	r5, #0
    ed8e:	d100      	bne.n	ed92 <RNCmd_ProcessCommand+0x9f6>
    ed90:	e19b      	b.n	f0ca <RNCmd_ProcessCommand+0xd2e>
    ed92:	4b64      	ldr	r3, [pc, #400]	; (ef24 <RNCmd_ProcessCommand+0xb88>)
    ed94:	681f      	ldr	r7, [r3, #0]
    ed96:	2f00      	cmp	r7, #0
    ed98:	d100      	bne.n	ed9c <RNCmd_ProcessCommand+0xa00>
    ed9a:	e196      	b.n	f0ca <RNCmd_ProcessCommand+0xd2e>
				temp = strlen(ptag2);
    ed9c:	0020      	movs	r0, r4
    ed9e:	4b6b      	ldr	r3, [pc, #428]	; (ef4c <RNCmd_ProcessCommand+0xbb0>)
    eda0:	4798      	blx	r3
    eda2:	b2c6      	uxtb	r6, r0
    eda4:	23e7      	movs	r3, #231	; 0xe7
    eda6:	aa02      	add	r2, sp, #8
    eda8:	4694      	mov	ip, r2
    edaa:	4463      	add	r3, ip
    edac:	701e      	strb	r6, [r3, #0]
				data_size = str2byte(ptag3);
    edae:	0028      	movs	r0, r5
    edb0:	4b5d      	ldr	r3, [pc, #372]	; (ef28 <RNCmd_ProcessCommand+0xb8c>)
    edb2:	4798      	blx	r3
    edb4:	0005      	movs	r5, r0
    edb6:	9005      	str	r0, [sp, #20]
    edb8:	23e6      	movs	r3, #230	; 0xe6
    edba:	aa02      	add	r2, sp, #8
    edbc:	4694      	mov	ip, r2
    edbe:	4463      	add	r3, ip
    edc0:	7018      	strb	r0, [r3, #0]
				if(temp == 1 || temp == 2)	//unicast, by peer device index
    edc2:	1e73      	subs	r3, r6, #1
    edc4:	2b01      	cmp	r3, #1
    edc6:	d94f      	bls.n	ee68 <RNCmd_ProcessCommand+0xacc>
				else if(temp == 4)	//broadcast, by 0xFFFF broadcast address
    edc8:	2e04      	cmp	r6, #4
    edca:	d100      	bne.n	edce <RNCmd_ProcessCommand+0xa32>
    edcc:	e0d2      	b.n	ef74 <RNCmd_ProcessCommand+0xbd8>
				else if(temp == 6)	//unicast, Star edx -> edy only
    edce:	2e06      	cmp	r6, #6
    edd0:	d100      	bne.n	edd4 <RNCmd_ProcessCommand+0xa38>
    edd2:	e116      	b.n	f002 <RNCmd_ProcessCommand+0xc66>
				else if(temp == 16)	//unicast, by 8bytes IEEE long address
    edd4:	2e10      	cmp	r6, #16
    edd6:	d000      	beq.n	edda <RNCmd_ProcessCommand+0xa3e>
    edd8:	e174      	b.n	f0c4 <RNCmd_ProcessCommand+0xd28>
					destLongAddress[0] = str2byte(pStr1);
    edda:	0020      	movs	r0, r4
    eddc:	4b52      	ldr	r3, [pc, #328]	; (ef28 <RNCmd_ProcessCommand+0xb8c>)
    edde:	4699      	mov	r9, r3
    ede0:	4798      	blx	r3
    ede2:	ae06      	add	r6, sp, #24
    ede4:	7030      	strb	r0, [r6, #0]
					pStr1+=2;
    ede6:	1ca0      	adds	r0, r4, #2
					destLongAddress[1] = str2byte(pStr1);
    ede8:	47c8      	blx	r9
    edea:	7070      	strb	r0, [r6, #1]
					pStr1+=2;
    edec:	1d20      	adds	r0, r4, #4
					destLongAddress[2] = str2byte(pStr1);
    edee:	47c8      	blx	r9
    edf0:	70b0      	strb	r0, [r6, #2]
					pStr1+=2;
    edf2:	1da0      	adds	r0, r4, #6
					destLongAddress[3] = str2byte(pStr1);
    edf4:	47c8      	blx	r9
    edf6:	70f0      	strb	r0, [r6, #3]
					pStr1+=2;
    edf8:	0020      	movs	r0, r4
    edfa:	3008      	adds	r0, #8
					destLongAddress[4] = str2byte(pStr1);
    edfc:	47c8      	blx	r9
    edfe:	7130      	strb	r0, [r6, #4]
					pStr1+=2;
    ee00:	0020      	movs	r0, r4
    ee02:	300a      	adds	r0, #10
					destLongAddress[5] = str2byte(pStr1);
    ee04:	47c8      	blx	r9
    ee06:	7170      	strb	r0, [r6, #5]
					pStr1+=2;
    ee08:	0020      	movs	r0, r4
    ee0a:	300c      	adds	r0, #12
					destLongAddress[6] = str2byte(pStr1);
    ee0c:	47c8      	blx	r9
    ee0e:	71b0      	strb	r0, [r6, #6]
					pStr1+=2;
    ee10:	0020      	movs	r0, r4
    ee12:	300e      	adds	r0, #14
					destLongAddress[7] = str2byte(pStr1);
    ee14:	47c8      	blx	r9
    ee16:	71f0      	strb	r0, [r6, #7]
					if(!data_size)	//if r2=0, count r3 bytes and use counted number
    ee18:	9b05      	ldr	r3, [sp, #20]
    ee1a:	2b00      	cmp	r3, #0
    ee1c:	d000      	beq.n	ee20 <RNCmd_ProcessCommand+0xa84>
    ee1e:	e13a      	b.n	f096 <RNCmd_ProcessCommand+0xcfa>
						if(MiApp_SendData(LONG_ADDR_LEN, destLongAddress, strlen(ptag4), ptag4, msghandledemo++, true, dataConfcb))
    ee20:	0038      	movs	r0, r7
    ee22:	4b4a      	ldr	r3, [pc, #296]	; (ef4c <RNCmd_ProcessCommand+0xbb0>)
    ee24:	4798      	blx	r3
    ee26:	4a4a      	ldr	r2, [pc, #296]	; (ef50 <RNCmd_ProcessCommand+0xbb4>)
    ee28:	7813      	ldrb	r3, [r2, #0]
    ee2a:	1c59      	adds	r1, r3, #1
    ee2c:	7011      	strb	r1, [r2, #0]
    ee2e:	b2c2      	uxtb	r2, r0
    ee30:	4948      	ldr	r1, [pc, #288]	; (ef54 <RNCmd_ProcessCommand+0xbb8>)
    ee32:	9102      	str	r1, [sp, #8]
    ee34:	2101      	movs	r1, #1
    ee36:	9101      	str	r1, [sp, #4]
    ee38:	9300      	str	r3, [sp, #0]
    ee3a:	003b      	movs	r3, r7
    ee3c:	a906      	add	r1, sp, #24
    ee3e:	2008      	movs	r0, #8
    ee40:	4c45      	ldr	r4, [pc, #276]	; (ef58 <RNCmd_ProcessCommand+0xbbc>)
    ee42:	47a0      	blx	r4
    ee44:	2800      	cmp	r0, #0
    ee46:	d100      	bne.n	ee4a <RNCmd_ProcessCommand+0xaae>
    ee48:	e122      	b.n	f090 <RNCmd_ProcessCommand+0xcf4>
							RNCmd_ResponseAOK();
    ee4a:	4b44      	ldr	r3, [pc, #272]	; (ef5c <RNCmd_ProcessCommand+0xbc0>)
    ee4c:	4798      	blx	r3
    ee4e:	e14e      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
			RNCmd_ResponseAOK();
    ee50:	4b42      	ldr	r3, [pc, #264]	; (ef5c <RNCmd_ProcessCommand+0xbc0>)
    ee52:	4798      	blx	r3
			MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);			
    ee54:	4b42      	ldr	r3, [pc, #264]	; (ef60 <RNCmd_ProcessCommand+0xbc4>)
    ee56:	781b      	ldrb	r3, [r3, #0]
    ee58:	2201      	movs	r2, #1
    ee5a:	409a      	lsls	r2, r3
    ee5c:	4b41      	ldr	r3, [pc, #260]	; (ef64 <RNCmd_ProcessCommand+0xbc8>)
    ee5e:	210a      	movs	r1, #10
    ee60:	2000      	movs	r0, #0
    ee62:	4c41      	ldr	r4, [pc, #260]	; (ef68 <RNCmd_ProcessCommand+0xbcc>)
    ee64:	47a0      	blx	r4
    ee66:	e142      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
					index = str2byte(ptag2);
    ee68:	0020      	movs	r0, r4
    ee6a:	4b2f      	ldr	r3, [pc, #188]	; (ef28 <RNCmd_ProcessCommand+0xb8c>)
    ee6c:	4798      	blx	r3
    ee6e:	0004      	movs	r4, r0
					if(index >= Total_Connections())
    ee70:	4b3e      	ldr	r3, [pc, #248]	; (ef6c <RNCmd_ProcessCommand+0xbd0>)
    ee72:	4798      	blx	r3
    ee74:	4284      	cmp	r4, r0
    ee76:	d222      	bcs.n	eebe <RNCmd_ProcessCommand+0xb22>
						if(!data_size)	//if r2=0, count r3 bytes and use counted number
    ee78:	23e6      	movs	r3, #230	; 0xe6
    ee7a:	aa02      	add	r2, sp, #8
    ee7c:	4694      	mov	ip, r2
    ee7e:	4463      	add	r3, ip
    ee80:	781a      	ldrb	r2, [r3, #0]
    ee82:	2a00      	cmp	r2, #0
    ee84:	d121      	bne.n	eeca <RNCmd_ProcessCommand+0xb2e>
							if(MiApp_SendData(LONG_ADDR_LEN, connectionTable[index].Address, strlen(ptag4), ptag4, msghandledemo++, true, dataConfcb))
    ee86:	4b27      	ldr	r3, [pc, #156]	; (ef24 <RNCmd_ProcessCommand+0xb88>)
    ee88:	681d      	ldr	r5, [r3, #0]
    ee8a:	0028      	movs	r0, r5
    ee8c:	4b2f      	ldr	r3, [pc, #188]	; (ef4c <RNCmd_ProcessCommand+0xbb0>)
    ee8e:	4798      	blx	r3
    ee90:	4a2f      	ldr	r2, [pc, #188]	; (ef50 <RNCmd_ProcessCommand+0xbb4>)
    ee92:	7813      	ldrb	r3, [r2, #0]
    ee94:	1c59      	adds	r1, r3, #1
    ee96:	7011      	strb	r1, [r2, #0]
    ee98:	b2c2      	uxtb	r2, r0
    ee9a:	0124      	lsls	r4, r4, #4
    ee9c:	1d21      	adds	r1, r4, #4
    ee9e:	4834      	ldr	r0, [pc, #208]	; (ef70 <RNCmd_ProcessCommand+0xbd4>)
    eea0:	1809      	adds	r1, r1, r0
    eea2:	482c      	ldr	r0, [pc, #176]	; (ef54 <RNCmd_ProcessCommand+0xbb8>)
    eea4:	9002      	str	r0, [sp, #8]
    eea6:	2001      	movs	r0, #1
    eea8:	9001      	str	r0, [sp, #4]
    eeaa:	9300      	str	r3, [sp, #0]
    eeac:	002b      	movs	r3, r5
    eeae:	3007      	adds	r0, #7
    eeb0:	4c29      	ldr	r4, [pc, #164]	; (ef58 <RNCmd_ProcessCommand+0xbbc>)
    eeb2:	47a0      	blx	r4
    eeb4:	2800      	cmp	r0, #0
    eeb6:	d005      	beq.n	eec4 <RNCmd_ProcessCommand+0xb28>
								RNCmd_ResponseAOK();
    eeb8:	4b28      	ldr	r3, [pc, #160]	; (ef5c <RNCmd_ProcessCommand+0xbc0>)
    eeba:	4798      	blx	r3
    eebc:	e117      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
						RNCmd_ResponseERR();
    eebe:	4b1c      	ldr	r3, [pc, #112]	; (ef30 <RNCmd_ProcessCommand+0xb94>)
    eec0:	4798      	blx	r3
    eec2:	e114      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
								RNCmd_ResponseERR();
    eec4:	4b1a      	ldr	r3, [pc, #104]	; (ef30 <RNCmd_ProcessCommand+0xb94>)
    eec6:	4798      	blx	r3
    eec8:	e111      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
							if(MiApp_SendData(LONG_ADDR_LEN, connectionTable[index].Address, data_size, ptag4, msghandledemo++, true, dataConfcb))
    eeca:	4b16      	ldr	r3, [pc, #88]	; (ef24 <RNCmd_ProcessCommand+0xb88>)
    eecc:	681b      	ldr	r3, [r3, #0]
    eece:	4920      	ldr	r1, [pc, #128]	; (ef50 <RNCmd_ProcessCommand+0xbb4>)
    eed0:	7808      	ldrb	r0, [r1, #0]
    eed2:	1c45      	adds	r5, r0, #1
    eed4:	700d      	strb	r5, [r1, #0]
    eed6:	0124      	lsls	r4, r4, #4
    eed8:	1d21      	adds	r1, r4, #4
    eeda:	4c25      	ldr	r4, [pc, #148]	; (ef70 <RNCmd_ProcessCommand+0xbd4>)
    eedc:	1909      	adds	r1, r1, r4
    eede:	4c1d      	ldr	r4, [pc, #116]	; (ef54 <RNCmd_ProcessCommand+0xbb8>)
    eee0:	9402      	str	r4, [sp, #8]
    eee2:	2401      	movs	r4, #1
    eee4:	9401      	str	r4, [sp, #4]
    eee6:	9000      	str	r0, [sp, #0]
    eee8:	2008      	movs	r0, #8
    eeea:	4c1b      	ldr	r4, [pc, #108]	; (ef58 <RNCmd_ProcessCommand+0xbbc>)
    eeec:	47a0      	blx	r4
    eeee:	2800      	cmp	r0, #0
    eef0:	d002      	beq.n	eef8 <RNCmd_ProcessCommand+0xb5c>
								RNCmd_ResponseAOK();
    eef2:	4b1a      	ldr	r3, [pc, #104]	; (ef5c <RNCmd_ProcessCommand+0xbc0>)
    eef4:	4798      	blx	r3
    eef6:	e0fa      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
								RNCmd_ResponseERR();
    eef8:	4b0d      	ldr	r3, [pc, #52]	; (ef30 <RNCmd_ProcessCommand+0xb94>)
    eefa:	4798      	blx	r3
    eefc:	e0f7      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
    eefe:	46c0      	nop			; (mov r8, r8)
    ef00:	00010aa9 	.word	0x00010aa9
    ef04:	20001ccc 	.word	0x20001ccc
    ef08:	20002078 	.word	0x20002078
    ef0c:	0000e23b 	.word	0x0000e23b
    ef10:	0000869d 	.word	0x0000869d
    ef14:	0001281c 	.word	0x0001281c
    ef18:	00011291 	.word	0x00011291
    ef1c:	20002160 	.word	0x20002160
    ef20:	20002398 	.word	0x20002398
    ef24:	200023a0 	.word	0x200023a0
    ef28:	0000e2d9 	.word	0x0000e2d9
    ef2c:	20000410 	.word	0x20000410
    ef30:	0000e32d 	.word	0x0000e32d
    ef34:	20002104 	.word	0x20002104
    ef38:	0000e1e9 	.word	0x0000e1e9
    ef3c:	2000001c 	.word	0x2000001c
    ef40:	000128c0 	.word	0x000128c0
    ef44:	000128b8 	.word	0x000128b8
    ef48:	200023ac 	.word	0x200023ac
    ef4c:	000112a5 	.word	0x000112a5
    ef50:	20001cd1 	.word	0x20001cd1
    ef54:	0000f775 	.word	0x0000f775
    ef58:	0000c1c1 	.word	0x0000c1c1
    ef5c:	0000e2fd 	.word	0x0000e2fd
    ef60:	20000034 	.word	0x20000034
    ef64:	0000f7a9 	.word	0x0000f7a9
    ef68:	0000b991 	.word	0x0000b991
    ef6c:	0000ba8d 	.word	0x0000ba8d
    ef70:	200023b0 	.word	0x200023b0
					uint16_t broadcastAddress = 0xFFFF;
    ef74:	2201      	movs	r2, #1
    ef76:	4252      	negs	r2, r2
    ef78:	ab06      	add	r3, sp, #24
    ef7a:	801a      	strh	r2, [r3, #0]
					if((strcmp(ptag2, "ffff") == 0) || strcmp(ptag2, "FFFF") == 0)
    ef7c:	4996      	ldr	r1, [pc, #600]	; (f1d8 <RNCmd_ProcessCommand+0xe3c>)
    ef7e:	0020      	movs	r0, r4
    ef80:	4b96      	ldr	r3, [pc, #600]	; (f1dc <RNCmd_ProcessCommand+0xe40>)
    ef82:	4798      	blx	r3
    ef84:	2800      	cmp	r0, #0
    ef86:	d005      	beq.n	ef94 <RNCmd_ProcessCommand+0xbf8>
    ef88:	4995      	ldr	r1, [pc, #596]	; (f1e0 <RNCmd_ProcessCommand+0xe44>)
    ef8a:	0020      	movs	r0, r4
    ef8c:	4b93      	ldr	r3, [pc, #588]	; (f1dc <RNCmd_ProcessCommand+0xe40>)
    ef8e:	4798      	blx	r3
    ef90:	2800      	cmp	r0, #0
    ef92:	d133      	bne.n	effc <RNCmd_ProcessCommand+0xc60>
						if(!data_size)	//if r2=0, count r3 bytes and use counted number
    ef94:	9b05      	ldr	r3, [sp, #20]
    ef96:	2b00      	cmp	r3, #0
    ef98:	d119      	bne.n	efce <RNCmd_ProcessCommand+0xc32>
							if(MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, strlen(ptag4), ptag4, msghandledemo++, false, dataConfcb))
    ef9a:	0038      	movs	r0, r7
    ef9c:	4b91      	ldr	r3, [pc, #580]	; (f1e4 <RNCmd_ProcessCommand+0xe48>)
    ef9e:	4798      	blx	r3
    efa0:	4a91      	ldr	r2, [pc, #580]	; (f1e8 <RNCmd_ProcessCommand+0xe4c>)
    efa2:	7813      	ldrb	r3, [r2, #0]
    efa4:	1c59      	adds	r1, r3, #1
    efa6:	7011      	strb	r1, [r2, #0]
    efa8:	b2c2      	uxtb	r2, r0
    efaa:	4990      	ldr	r1, [pc, #576]	; (f1ec <RNCmd_ProcessCommand+0xe50>)
    efac:	9102      	str	r1, [sp, #8]
    efae:	2100      	movs	r1, #0
    efb0:	9101      	str	r1, [sp, #4]
    efb2:	9300      	str	r3, [sp, #0]
    efb4:	003b      	movs	r3, r7
    efb6:	a906      	add	r1, sp, #24
    efb8:	2002      	movs	r0, #2
    efba:	4c8d      	ldr	r4, [pc, #564]	; (f1f0 <RNCmd_ProcessCommand+0xe54>)
    efbc:	47a0      	blx	r4
    efbe:	2800      	cmp	r0, #0
    efc0:	d002      	beq.n	efc8 <RNCmd_ProcessCommand+0xc2c>
								RNCmd_ResponseAOK();
    efc2:	4b8c      	ldr	r3, [pc, #560]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    efc4:	4798      	blx	r3
    efc6:	e092      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
								RNCmd_ResponseERR();
    efc8:	4b8b      	ldr	r3, [pc, #556]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    efca:	4798      	blx	r3
    efcc:	e08f      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
							if(MiApp_SendData(SHORT_ADDR_LEN, (uint8_t *)&broadcastAddress, data_size, ptag4, msghandledemo++, false, dataConfcb))
    efce:	4a86      	ldr	r2, [pc, #536]	; (f1e8 <RNCmd_ProcessCommand+0xe4c>)
    efd0:	7813      	ldrb	r3, [r2, #0]
    efd2:	1c59      	adds	r1, r3, #1
    efd4:	7011      	strb	r1, [r2, #0]
    efd6:	4a85      	ldr	r2, [pc, #532]	; (f1ec <RNCmd_ProcessCommand+0xe50>)
    efd8:	9202      	str	r2, [sp, #8]
    efda:	2200      	movs	r2, #0
    efdc:	9201      	str	r2, [sp, #4]
    efde:	9300      	str	r3, [sp, #0]
    efe0:	003b      	movs	r3, r7
    efe2:	002a      	movs	r2, r5
    efe4:	a906      	add	r1, sp, #24
    efe6:	2002      	movs	r0, #2
    efe8:	4c81      	ldr	r4, [pc, #516]	; (f1f0 <RNCmd_ProcessCommand+0xe54>)
    efea:	47a0      	blx	r4
    efec:	2800      	cmp	r0, #0
    efee:	d002      	beq.n	eff6 <RNCmd_ProcessCommand+0xc5a>
								RNCmd_ResponseAOK();
    eff0:	4b80      	ldr	r3, [pc, #512]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    eff2:	4798      	blx	r3
    eff4:	e07b      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
								RNCmd_ResponseERR();
    eff6:	4b80      	ldr	r3, [pc, #512]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    eff8:	4798      	blx	r3
    effa:	e078      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
						RNCmd_ResponseERR();
    effc:	4b7e      	ldr	r3, [pc, #504]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    effe:	4798      	blx	r3
    f000:	e075      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
					if(role == END_DEVICE)
    f002:	4b7e      	ldr	r3, [pc, #504]	; (f1fc <RNCmd_ProcessCommand+0xe60>)
    f004:	781b      	ldrb	r3, [r3, #0]
    f006:	2b02      	cmp	r3, #2
    f008:	d13f      	bne.n	f08a <RNCmd_ProcessCommand+0xcee>
						desShortAddress[0] = str2byte(pStr1);
    f00a:	0020      	movs	r0, r4
    f00c:	4b7c      	ldr	r3, [pc, #496]	; (f200 <RNCmd_ProcessCommand+0xe64>)
    f00e:	4699      	mov	r9, r3
    f010:	4798      	blx	r3
    f012:	ae06      	add	r6, sp, #24
    f014:	7030      	strb	r0, [r6, #0]
						pStr1+=2;
    f016:	1ca0      	adds	r0, r4, #2
						desShortAddress[1] = str2byte(pStr1);
    f018:	47c8      	blx	r9
    f01a:	7070      	strb	r0, [r6, #1]
						pStr1+=2;
    f01c:	1d20      	adds	r0, r4, #4
						desShortAddress[2] = str2byte(pStr1);
    f01e:	47c8      	blx	r9
    f020:	70b0      	strb	r0, [r6, #2]
						if(!data_size)	//if r2=0, count r3 bytes and use counted number
    f022:	9b05      	ldr	r3, [sp, #20]
    f024:	2b00      	cmp	r3, #0
    f026:	d119      	bne.n	f05c <RNCmd_ProcessCommand+0xcc0>
							if(MiApp_SendData(3, desShortAddress, strlen(ptag4), ptag4, msghandledemo++, true, dataConfcb))
    f028:	0038      	movs	r0, r7
    f02a:	4b6e      	ldr	r3, [pc, #440]	; (f1e4 <RNCmd_ProcessCommand+0xe48>)
    f02c:	4798      	blx	r3
    f02e:	4a6e      	ldr	r2, [pc, #440]	; (f1e8 <RNCmd_ProcessCommand+0xe4c>)
    f030:	7813      	ldrb	r3, [r2, #0]
    f032:	1c59      	adds	r1, r3, #1
    f034:	7011      	strb	r1, [r2, #0]
    f036:	b2c2      	uxtb	r2, r0
    f038:	496c      	ldr	r1, [pc, #432]	; (f1ec <RNCmd_ProcessCommand+0xe50>)
    f03a:	9102      	str	r1, [sp, #8]
    f03c:	2101      	movs	r1, #1
    f03e:	9101      	str	r1, [sp, #4]
    f040:	9300      	str	r3, [sp, #0]
    f042:	003b      	movs	r3, r7
    f044:	a906      	add	r1, sp, #24
    f046:	2003      	movs	r0, #3
    f048:	4c69      	ldr	r4, [pc, #420]	; (f1f0 <RNCmd_ProcessCommand+0xe54>)
    f04a:	47a0      	blx	r4
    f04c:	2800      	cmp	r0, #0
    f04e:	d002      	beq.n	f056 <RNCmd_ProcessCommand+0xcba>
								RNCmd_ResponseAOK();
    f050:	4b68      	ldr	r3, [pc, #416]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    f052:	4798      	blx	r3
    f054:	e04b      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
								RNCmd_ResponseERR();
    f056:	4b68      	ldr	r3, [pc, #416]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f058:	4798      	blx	r3
    f05a:	e048      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
							if(MiApp_SendData(3, desShortAddress, data_size, ptag4, msghandledemo++, true, dataConfcb))
    f05c:	4a62      	ldr	r2, [pc, #392]	; (f1e8 <RNCmd_ProcessCommand+0xe4c>)
    f05e:	7813      	ldrb	r3, [r2, #0]
    f060:	1c59      	adds	r1, r3, #1
    f062:	7011      	strb	r1, [r2, #0]
    f064:	4a61      	ldr	r2, [pc, #388]	; (f1ec <RNCmd_ProcessCommand+0xe50>)
    f066:	9202      	str	r2, [sp, #8]
    f068:	2201      	movs	r2, #1
    f06a:	9201      	str	r2, [sp, #4]
    f06c:	9300      	str	r3, [sp, #0]
    f06e:	003b      	movs	r3, r7
    f070:	002a      	movs	r2, r5
    f072:	a906      	add	r1, sp, #24
    f074:	2003      	movs	r0, #3
    f076:	4c5e      	ldr	r4, [pc, #376]	; (f1f0 <RNCmd_ProcessCommand+0xe54>)
    f078:	47a0      	blx	r4
    f07a:	2800      	cmp	r0, #0
    f07c:	d002      	beq.n	f084 <RNCmd_ProcessCommand+0xce8>
								RNCmd_ResponseAOK();
    f07e:	4b5d      	ldr	r3, [pc, #372]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    f080:	4798      	blx	r3
    f082:	e034      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
								RNCmd_ResponseERR();
    f084:	4b5c      	ldr	r3, [pc, #368]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f086:	4798      	blx	r3
    f088:	e031      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
						RNCmd_ResponseERR();
    f08a:	4b5b      	ldr	r3, [pc, #364]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f08c:	4798      	blx	r3
    f08e:	e02e      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
							RNCmd_ResponseERR();
    f090:	4b59      	ldr	r3, [pc, #356]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f092:	4798      	blx	r3
    f094:	e02b      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
						if(MiApp_SendData(LONG_ADDR_LEN, destLongAddress, data_size, ptag4, msghandledemo++, true, dataConfcb))
    f096:	4a54      	ldr	r2, [pc, #336]	; (f1e8 <RNCmd_ProcessCommand+0xe4c>)
    f098:	7813      	ldrb	r3, [r2, #0]
    f09a:	1c59      	adds	r1, r3, #1
    f09c:	7011      	strb	r1, [r2, #0]
    f09e:	4a53      	ldr	r2, [pc, #332]	; (f1ec <RNCmd_ProcessCommand+0xe50>)
    f0a0:	9202      	str	r2, [sp, #8]
    f0a2:	2201      	movs	r2, #1
    f0a4:	9201      	str	r2, [sp, #4]
    f0a6:	9300      	str	r3, [sp, #0]
    f0a8:	003b      	movs	r3, r7
    f0aa:	002a      	movs	r2, r5
    f0ac:	a906      	add	r1, sp, #24
    f0ae:	2008      	movs	r0, #8
    f0b0:	4c4f      	ldr	r4, [pc, #316]	; (f1f0 <RNCmd_ProcessCommand+0xe54>)
    f0b2:	47a0      	blx	r4
    f0b4:	2800      	cmp	r0, #0
    f0b6:	d002      	beq.n	f0be <RNCmd_ProcessCommand+0xd22>
							RNCmd_ResponseAOK();
    f0b8:	4b4e      	ldr	r3, [pc, #312]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    f0ba:	4798      	blx	r3
    f0bc:	e017      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
							RNCmd_ResponseERR();
    f0be:	4b4e      	ldr	r3, [pc, #312]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f0c0:	4798      	blx	r3
    f0c2:	e014      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
					RNCmd_ResponseERR();
    f0c4:	4b4c      	ldr	r3, [pc, #304]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f0c6:	4798      	blx	r3
    f0c8:	e011      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
				RNCmd_ResponseERR();
    f0ca:	4b4b      	ldr	r3, [pc, #300]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f0cc:	4798      	blx	r3
    f0ce:	e00e      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
			RNCmd_ResponseERR();
    f0d0:	4b49      	ldr	r3, [pc, #292]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f0d2:	4798      	blx	r3
    f0d4:	e00b      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
		if(!rn_cfg_mode && (strcmp(StrJOIN, (const char*)ptag1) == 0))	//command: join
    f0d6:	4b4b      	ldr	r3, [pc, #300]	; (f204 <RNCmd_ProcessCommand+0xe68>)
    f0d8:	781b      	ldrb	r3, [r3, #0]
    f0da:	2b00      	cmp	r3, #0
    f0dc:	d105      	bne.n	f0ea <RNCmd_ProcessCommand+0xd4e>
    f0de:	0021      	movs	r1, r4
    f0e0:	4849      	ldr	r0, [pc, #292]	; (f208 <RNCmd_ProcessCommand+0xe6c>)
    f0e2:	4b3e      	ldr	r3, [pc, #248]	; (f1dc <RNCmd_ProcessCommand+0xe40>)
    f0e4:	4798      	blx	r3
    f0e6:	2800      	cmp	r0, #0
    f0e8:	d008      	beq.n	f0fc <RNCmd_ProcessCommand+0xd60>
			RNCmd_ResponseERR();
    f0ea:	4b43      	ldr	r3, [pc, #268]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f0ec:	4798      	blx	r3
	RNCmd_RxCmdInit();
    f0ee:	4b47      	ldr	r3, [pc, #284]	; (f20c <RNCmd_ProcessCommand+0xe70>)
    f0f0:	4798      	blx	r3
}
    f0f2:	b03d      	add	sp, #244	; 0xf4
    f0f4:	bc0c      	pop	{r2, r3}
    f0f6:	4690      	mov	r8, r2
    f0f8:	4699      	mov	r9, r3
    f0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint16_t broadcastAddr = 0xFFFF;
    f0fc:	ac06      	add	r4, sp, #24
    f0fe:	2301      	movs	r3, #1
    f100:	425b      	negs	r3, r3
    f102:	8023      	strh	r3, [r4, #0]
			RNCmd_ResponseAOK();
    f104:	4b3b      	ldr	r3, [pc, #236]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    f106:	4798      	blx	r3
			MiApp_EstablishConnection(myChannel, 2, (uint8_t*)&broadcastAddr, 0, Connection_Confirm);
    f108:	4b41      	ldr	r3, [pc, #260]	; (f210 <RNCmd_ProcessCommand+0xe74>)
    f10a:	7818      	ldrb	r0, [r3, #0]
    f10c:	4b41      	ldr	r3, [pc, #260]	; (f214 <RNCmd_ProcessCommand+0xe78>)
    f10e:	9300      	str	r3, [sp, #0]
    f110:	2300      	movs	r3, #0
    f112:	0022      	movs	r2, r4
    f114:	2102      	movs	r1, #2
    f116:	4c40      	ldr	r4, [pc, #256]	; (f218 <RNCmd_ProcessCommand+0xe7c>)
    f118:	47a0      	blx	r4
		{
    f11a:	e7e8      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
		if(strcmp(StrRESET, (const char*)ptag1) == 0)		//command: reset
    f11c:	0021      	movs	r1, r4
    f11e:	483f      	ldr	r0, [pc, #252]	; (f21c <RNCmd_ProcessCommand+0xe80>)
    f120:	4b2e      	ldr	r3, [pc, #184]	; (f1dc <RNCmd_ProcessCommand+0xe40>)
    f122:	4798      	blx	r3
    f124:	2800      	cmp	r0, #0
    f126:	d00c      	beq.n	f142 <RNCmd_ProcessCommand+0xda6>
		else if(!rn_cfg_mode &&  (strcmp(StrREMOVE, (const char*)ptag1) == 0))		//command: remove r1
    f128:	4b36      	ldr	r3, [pc, #216]	; (f204 <RNCmd_ProcessCommand+0xe68>)
    f12a:	781b      	ldrb	r3, [r3, #0]
    f12c:	2b00      	cmp	r3, #0
    f12e:	d105      	bne.n	f13c <RNCmd_ProcessCommand+0xda0>
    f130:	0021      	movs	r1, r4
    f132:	483b      	ldr	r0, [pc, #236]	; (f220 <RNCmd_ProcessCommand+0xe84>)
    f134:	4b29      	ldr	r3, [pc, #164]	; (f1dc <RNCmd_ProcessCommand+0xe40>)
    f136:	4798      	blx	r3
    f138:	2800      	cmp	r0, #0
    f13a:	d007      	beq.n	f14c <RNCmd_ProcessCommand+0xdb0>
			RNCmd_ResponseERR();
    f13c:	4b2e      	ldr	r3, [pc, #184]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f13e:	4798      	blx	r3
    f140:	e7d5      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
			RNCmd_ResponseAOK();
    f142:	4b2c      	ldr	r3, [pc, #176]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    f144:	4798      	blx	r3
			MiApp_ResetToFactoryNew();
    f146:	4b37      	ldr	r3, [pc, #220]	; (f224 <RNCmd_ProcessCommand+0xe88>)
    f148:	4798      	blx	r3
    f14a:	e7d0      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
			temp = str2byte(ptag2);
    f14c:	4b36      	ldr	r3, [pc, #216]	; (f228 <RNCmd_ProcessCommand+0xe8c>)
    f14e:	6818      	ldr	r0, [r3, #0]
    f150:	4b2b      	ldr	r3, [pc, #172]	; (f200 <RNCmd_ProcessCommand+0xe64>)
    f152:	4798      	blx	r3
    f154:	24e7      	movs	r4, #231	; 0xe7
    f156:	ab02      	add	r3, sp, #8
    f158:	469c      	mov	ip, r3
    f15a:	4464      	add	r4, ip
    f15c:	7020      	strb	r0, [r4, #0]
			if(temp >= Total_Connections())
    f15e:	4b33      	ldr	r3, [pc, #204]	; (f22c <RNCmd_ProcessCommand+0xe90>)
    f160:	4798      	blx	r3
    f162:	7823      	ldrb	r3, [r4, #0]
    f164:	4283      	cmp	r3, r0
    f166:	d302      	bcc.n	f16e <RNCmd_ProcessCommand+0xdd2>
				RNCmd_ResponseERR();
    f168:	4b23      	ldr	r3, [pc, #140]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f16a:	4798      	blx	r3
    f16c:	e7bf      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
				RNCmd_ResponseAOK();
    f16e:	4b21      	ldr	r3, [pc, #132]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    f170:	4798      	blx	r3
				MiApp_RemoveConnection(temp);
    f172:	23e7      	movs	r3, #231	; 0xe7
    f174:	aa02      	add	r2, sp, #8
    f176:	4694      	mov	ip, r2
    f178:	4463      	add	r3, ip
    f17a:	7818      	ldrb	r0, [r3, #0]
    f17c:	4b2c      	ldr	r3, [pc, #176]	; (f230 <RNCmd_ProcessCommand+0xe94>)
    f17e:	4798      	blx	r3
    f180:	e7b5      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
		if(strcmp(StrECHO, (const char*)ptag1) == 0)		//command: echo
    f182:	0021      	movs	r1, r4
    f184:	482b      	ldr	r0, [pc, #172]	; (f234 <RNCmd_ProcessCommand+0xe98>)
    f186:	4b15      	ldr	r3, [pc, #84]	; (f1dc <RNCmd_ProcessCommand+0xe40>)
    f188:	4798      	blx	r3
    f18a:	2800      	cmp	r0, #0
    f18c:	d105      	bne.n	f19a <RNCmd_ProcessCommand+0xdfe>
			RNCmd_ResponseAOK();
    f18e:	4b19      	ldr	r3, [pc, #100]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    f190:	4798      	blx	r3
			enable_echo = 1;
    f192:	2201      	movs	r2, #1
    f194:	4b28      	ldr	r3, [pc, #160]	; (f238 <RNCmd_ProcessCommand+0xe9c>)
    f196:	701a      	strb	r2, [r3, #0]
    f198:	e7a9      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
			RNCmd_ResponseERR();
    f19a:	4b17      	ldr	r3, [pc, #92]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f19c:	4798      	blx	r3
    f19e:	e7a6      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
		if(strcmp(StrExitCFG, (const char*)ptag1) == 0)	//command: ~cfg
    f1a0:	0021      	movs	r1, r4
    f1a2:	4826      	ldr	r0, [pc, #152]	; (f23c <RNCmd_ProcessCommand+0xea0>)
    f1a4:	4b0d      	ldr	r3, [pc, #52]	; (f1dc <RNCmd_ProcessCommand+0xe40>)
    f1a6:	4798      	blx	r3
    f1a8:	2800      	cmp	r0, #0
    f1aa:	d008      	beq.n	f1be <RNCmd_ProcessCommand+0xe22>
		else if(strcmp(StrExitECHO, (const char*)ptag1) == 0)	//command: ~echo
    f1ac:	0021      	movs	r1, r4
    f1ae:	4824      	ldr	r0, [pc, #144]	; (f240 <RNCmd_ProcessCommand+0xea4>)
    f1b0:	4b0a      	ldr	r3, [pc, #40]	; (f1dc <RNCmd_ProcessCommand+0xe40>)
    f1b2:	4798      	blx	r3
    f1b4:	2800      	cmp	r0, #0
    f1b6:	d008      	beq.n	f1ca <RNCmd_ProcessCommand+0xe2e>
			RNCmd_ResponseERR();
    f1b8:	4b0f      	ldr	r3, [pc, #60]	; (f1f8 <RNCmd_ProcessCommand+0xe5c>)
    f1ba:	4798      	blx	r3
    f1bc:	e797      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
			RNCmd_ResponseAOK();
    f1be:	4b0d      	ldr	r3, [pc, #52]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    f1c0:	4798      	blx	r3
			rn_cfg_mode = 0;	//go to action mode
    f1c2:	2200      	movs	r2, #0
    f1c4:	4b0f      	ldr	r3, [pc, #60]	; (f204 <RNCmd_ProcessCommand+0xe68>)
    f1c6:	701a      	strb	r2, [r3, #0]
    f1c8:	e791      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
			RNCmd_ResponseAOK();
    f1ca:	4b0a      	ldr	r3, [pc, #40]	; (f1f4 <RNCmd_ProcessCommand+0xe58>)
    f1cc:	4798      	blx	r3
			enable_echo = 0;
    f1ce:	2200      	movs	r2, #0
    f1d0:	4b19      	ldr	r3, [pc, #100]	; (f238 <RNCmd_ProcessCommand+0xe9c>)
    f1d2:	701a      	strb	r2, [r3, #0]
    f1d4:	e78b      	b.n	f0ee <RNCmd_ProcessCommand+0xd52>
    f1d6:	46c0      	nop			; (mov r8, r8)
    f1d8:	000127d0 	.word	0x000127d0
    f1dc:	00011291 	.word	0x00011291
    f1e0:	000127d8 	.word	0x000127d8
    f1e4:	000112a5 	.word	0x000112a5
    f1e8:	20001cd1 	.word	0x20001cd1
    f1ec:	0000f775 	.word	0x0000f775
    f1f0:	0000c1c1 	.word	0x0000c1c1
    f1f4:	0000e2fd 	.word	0x0000e2fd
    f1f8:	0000e32d 	.word	0x0000e32d
    f1fc:	20002160 	.word	0x20002160
    f200:	0000e2d9 	.word	0x0000e2d9
    f204:	2000001c 	.word	0x2000001c
    f208:	0001284c 	.word	0x0001284c
    f20c:	0000e35d 	.word	0x0000e35d
    f210:	20000034 	.word	0x20000034
    f214:	0000f7a9 	.word	0x0000f7a9
    f218:	0000bdd5 	.word	0x0000bdd5
    f21c:	00012884 	.word	0x00012884
    f220:	0001287c 	.word	0x0001287c
    f224:	0000cda1 	.word	0x0000cda1
    f228:	200023ac 	.word	0x200023ac
    f22c:	0000ba8d 	.word	0x0000ba8d
    f230:	0000c021 	.word	0x0000c021
    f234:	00012814 	.word	0x00012814
    f238:	20001ccc 	.word	0x20001ccc
    f23c:	00012838 	.word	0x00012838
    f240:	00012840 	.word	0x00012840

0000f244 <RNCmd_ByteReceived>:
{
    f244:	b510      	push	{r4, lr}
	if(byte == 0x0D)	//ENTER character
    f246:	280d      	cmp	r0, #13
    f248:	d007      	beq.n	f25a <RNCmd_ByteReceived+0x16>
	if((byte == 0x20) && (!ptag2 || !ptag3 || !ptag4))	//SPACE check
    f24a:	2820      	cmp	r0, #32
    f24c:	d008      	beq.n	f260 <RNCmd_ByteReceived+0x1c>
		*prx_cmd++ = byte;
    f24e:	4a1b      	ldr	r2, [pc, #108]	; (f2bc <RNCmd_ByteReceived+0x78>)
    f250:	6813      	ldr	r3, [r2, #0]
    f252:	1c59      	adds	r1, r3, #1
    f254:	6011      	str	r1, [r2, #0]
    f256:	7018      	strb	r0, [r3, #0]
}
    f258:	bd10      	pop	{r4, pc}
		RNCmd_ProcessCommand();		
    f25a:	4b19      	ldr	r3, [pc, #100]	; (f2c0 <RNCmd_ByteReceived+0x7c>)
    f25c:	4798      	blx	r3
		return;
    f25e:	e7fb      	b.n	f258 <RNCmd_ByteReceived+0x14>
	if((byte == 0x20) && (!ptag2 || !ptag3 || !ptag4))	//SPACE check
    f260:	4b18      	ldr	r3, [pc, #96]	; (f2c4 <RNCmd_ByteReceived+0x80>)
    f262:	681b      	ldr	r3, [r3, #0]
    f264:	2b00      	cmp	r3, #0
    f266:	d007      	beq.n	f278 <RNCmd_ByteReceived+0x34>
    f268:	4b17      	ldr	r3, [pc, #92]	; (f2c8 <RNCmd_ByteReceived+0x84>)
    f26a:	681b      	ldr	r3, [r3, #0]
    f26c:	2b00      	cmp	r3, #0
    f26e:	d003      	beq.n	f278 <RNCmd_ByteReceived+0x34>
    f270:	4b16      	ldr	r3, [pc, #88]	; (f2cc <RNCmd_ByteReceived+0x88>)
    f272:	681b      	ldr	r3, [r3, #0]
    f274:	2b00      	cmp	r3, #0
    f276:	d1ea      	bne.n	f24e <RNCmd_ByteReceived+0xa>
		*prx_cmd++ = byte;
    f278:	4a10      	ldr	r2, [pc, #64]	; (f2bc <RNCmd_ByteReceived+0x78>)
    f27a:	6813      	ldr	r3, [r2, #0]
    f27c:	1c59      	adds	r1, r3, #1
    f27e:	6011      	str	r1, [r2, #0]
    f280:	2200      	movs	r2, #0
    f282:	701a      	strb	r2, [r3, #0]
		if(!ptag2)
    f284:	4b0f      	ldr	r3, [pc, #60]	; (f2c4 <RNCmd_ByteReceived+0x80>)
    f286:	681b      	ldr	r3, [r3, #0]
    f288:	2b00      	cmp	r3, #0
    f28a:	d00c      	beq.n	f2a6 <RNCmd_ByteReceived+0x62>
		else if(!ptag3)
    f28c:	4b0e      	ldr	r3, [pc, #56]	; (f2c8 <RNCmd_ByteReceived+0x84>)
    f28e:	681b      	ldr	r3, [r3, #0]
    f290:	2b00      	cmp	r3, #0
    f292:	d00d      	beq.n	f2b0 <RNCmd_ByteReceived+0x6c>
		else if(!ptag4)
    f294:	4b0d      	ldr	r3, [pc, #52]	; (f2cc <RNCmd_ByteReceived+0x88>)
    f296:	681b      	ldr	r3, [r3, #0]
    f298:	2b00      	cmp	r3, #0
    f29a:	d1dd      	bne.n	f258 <RNCmd_ByteReceived+0x14>
			ptag4 = prx_cmd;
    f29c:	4b07      	ldr	r3, [pc, #28]	; (f2bc <RNCmd_ByteReceived+0x78>)
    f29e:	681a      	ldr	r2, [r3, #0]
    f2a0:	4b0a      	ldr	r3, [pc, #40]	; (f2cc <RNCmd_ByteReceived+0x88>)
    f2a2:	601a      	str	r2, [r3, #0]
    f2a4:	e7d8      	b.n	f258 <RNCmd_ByteReceived+0x14>
			ptag2 = prx_cmd;
    f2a6:	4b05      	ldr	r3, [pc, #20]	; (f2bc <RNCmd_ByteReceived+0x78>)
    f2a8:	681a      	ldr	r2, [r3, #0]
    f2aa:	4b06      	ldr	r3, [pc, #24]	; (f2c4 <RNCmd_ByteReceived+0x80>)
    f2ac:	601a      	str	r2, [r3, #0]
    f2ae:	e7d3      	b.n	f258 <RNCmd_ByteReceived+0x14>
			ptag3 = prx_cmd;
    f2b0:	4b02      	ldr	r3, [pc, #8]	; (f2bc <RNCmd_ByteReceived+0x78>)
    f2b2:	681a      	ldr	r2, [r3, #0]
    f2b4:	4b04      	ldr	r3, [pc, #16]	; (f2c8 <RNCmd_ByteReceived+0x84>)
    f2b6:	601a      	str	r2, [r3, #0]
    f2b8:	e7ce      	b.n	f258 <RNCmd_ByteReceived+0x14>
    f2ba:	46c0      	nop			; (mov r8, r8)
    f2bc:	200023a4 	.word	0x200023a4
    f2c0:	0000e39d 	.word	0x0000e39d
    f2c4:	200023ac 	.word	0x200023ac
    f2c8:	20002398 	.word	0x20002398
    f2cc:	200023a0 	.word	0x200023a0

0000f2d0 <RNCmd_TxCmdInit>:
* Summary:
*      Initialize RN tx buffer.
*
*****************************************************************************************/
void RNCmd_TxCmdInit( void )
{
    f2d0:	b510      	push	{r4, lr}
	memset(tx_cmd, 0, APP_TX_CMD_SIZE);
    f2d2:	22c8      	movs	r2, #200	; 0xc8
    f2d4:	2100      	movs	r1, #0
    f2d6:	4802      	ldr	r0, [pc, #8]	; (f2e0 <RNCmd_TxCmdInit+0x10>)
    f2d8:	4b02      	ldr	r3, [pc, #8]	; (f2e4 <RNCmd_TxCmdInit+0x14>)
    f2da:	4798      	blx	r3
}
    f2dc:	bd10      	pop	{r4, pc}
    f2de:	46c0      	nop			; (mov r8, r8)
    f2e0:	20002238 	.word	0x20002238
    f2e4:	00010aa9 	.word	0x00010aa9

0000f2e8 <RNCmd_SendErrorCode>:
{
    f2e8:	b570      	push	{r4, r5, r6, lr}
    f2ea:	b086      	sub	sp, #24
	if(enable_echo)
    f2ec:	4b24      	ldr	r3, [pc, #144]	; (f380 <RNCmd_SendErrorCode+0x98>)
    f2ee:	781c      	ldrb	r4, [r3, #0]
	uint8_t* ptx_data = tx_data;
    f2f0:	ad03      	add	r5, sp, #12
	if(enable_echo)
    f2f2:	2c00      	cmp	r4, #0
    f2f4:	d004      	beq.n	f300 <RNCmd_SendErrorCode+0x18>
		*ptx_data++ = '\n';
    f2f6:	220a      	movs	r2, #10
    f2f8:	702a      	strb	r2, [r5, #0]
		tx_data_len++;
    f2fa:	2401      	movs	r4, #1
		*ptx_data++ = '\n';
    f2fc:	250d      	movs	r5, #13
    f2fe:	446d      	add	r5, sp
	*ptx_data++ = 'e';
    f300:	2365      	movs	r3, #101	; 0x65
    f302:	702b      	strb	r3, [r5, #0]
	*ptx_data++ = 'r';
    f304:	330d      	adds	r3, #13
    f306:	706b      	strb	r3, [r5, #1]
	*ptx_data++ = 'r';
    f308:	70ab      	strb	r3, [r5, #2]
	*ptx_data++ = 'o';
    f30a:	226f      	movs	r2, #111	; 0x6f
    f30c:	70ea      	strb	r2, [r5, #3]
	*ptx_data++ = 'r';
    f30e:	712b      	strb	r3, [r5, #4]
	*ptx_data++ = ' ';
    f310:	3b52      	subs	r3, #82	; 0x52
    f312:	716b      	strb	r3, [r5, #5]
	num2Hex(error_code, hex, &hex_len);
    f314:	466b      	mov	r3, sp
    f316:	1dde      	adds	r6, r3, #7
    f318:	0032      	movs	r2, r6
    f31a:	a902      	add	r1, sp, #8
    f31c:	4b19      	ldr	r3, [pc, #100]	; (f384 <RNCmd_SendErrorCode+0x9c>)
    f31e:	4798      	blx	r3
	if(hex_len == 1)
    f320:	7833      	ldrb	r3, [r6, #0]
    f322:	2b01      	cmp	r3, #1
    f324:	d013      	beq.n	f34e <RNCmd_SendErrorCode+0x66>
	else if(hex_len == 2)
    f326:	2b02      	cmp	r3, #2
    f328:	d018      	beq.n	f35c <RNCmd_SendErrorCode+0x74>
	*ptx_data++ = ' ';
    f32a:	1dab      	adds	r3, r5, #6
	tx_data_len += 6;
    f32c:	3406      	adds	r4, #6
    f32e:	b2e1      	uxtb	r1, r4
	if(enable_echo)
    f330:	4a13      	ldr	r2, [pc, #76]	; (f380 <RNCmd_SendErrorCode+0x98>)
    f332:	7812      	ldrb	r2, [r2, #0]
    f334:	2a00      	cmp	r2, #0
    f336:	d11b      	bne.n	f370 <RNCmd_SendErrorCode+0x88>
		*ptx_data++ = '\r';	//0x13, ENTER
    f338:	220d      	movs	r2, #13
    f33a:	701a      	strb	r2, [r3, #0]
		tx_data_len += 1;
    f33c:	3101      	adds	r1, #1
    f33e:	b2c9      	uxtb	r1, r1
	sio2host_tx(tx_data, tx_data_len);
    f340:	a803      	add	r0, sp, #12
    f342:	4b11      	ldr	r3, [pc, #68]	; (f388 <RNCmd_SendErrorCode+0xa0>)
    f344:	4798      	blx	r3
	RNCmd_TxCmdInit();
    f346:	4b11      	ldr	r3, [pc, #68]	; (f38c <RNCmd_SendErrorCode+0xa4>)
    f348:	4798      	blx	r3
}
    f34a:	b006      	add	sp, #24
    f34c:	bd70      	pop	{r4, r5, r6, pc}
		*ptx_data++ = hex[0];
    f34e:	1deb      	adds	r3, r5, #7
    f350:	aa02      	add	r2, sp, #8
    f352:	7812      	ldrb	r2, [r2, #0]
    f354:	71aa      	strb	r2, [r5, #6]
		tx_data_len ++;
    f356:	3407      	adds	r4, #7
    f358:	b2e1      	uxtb	r1, r4
    f35a:	e7e9      	b.n	f330 <RNCmd_SendErrorCode+0x48>
		*ptx_data++ = hex[0];
    f35c:	aa02      	add	r2, sp, #8
    f35e:	7813      	ldrb	r3, [r2, #0]
    f360:	71ab      	strb	r3, [r5, #6]
		*ptx_data++ = hex[1];
    f362:	002b      	movs	r3, r5
    f364:	3308      	adds	r3, #8
    f366:	7852      	ldrb	r2, [r2, #1]
    f368:	71ea      	strb	r2, [r5, #7]
		tx_data_len += 2;
    f36a:	3408      	adds	r4, #8
    f36c:	b2e1      	uxtb	r1, r4
    f36e:	e7df      	b.n	f330 <RNCmd_SendErrorCode+0x48>
		*ptx_data++ = '\n';
    f370:	220a      	movs	r2, #10
    f372:	701a      	strb	r2, [r3, #0]
		*ptx_data++ = '\r';
    f374:	3203      	adds	r2, #3
    f376:	705a      	strb	r2, [r3, #1]
		tx_data_len += 2;
    f378:	3102      	adds	r1, #2
    f37a:	b2c9      	uxtb	r1, r1
    f37c:	e7e0      	b.n	f340 <RNCmd_SendErrorCode+0x58>
    f37e:	46c0      	nop			; (mov r8, r8)
    f380:	20001ccc 	.word	0x20001ccc
    f384:	0000e23b 	.word	0x0000e23b
    f388:	0000869d 	.word	0x0000869d
    f38c:	0000f2d1 	.word	0x0000f2d1

0000f390 <RNCmd_SendStatusChange>:
{
    f390:	b570      	push	{r4, r5, r6, lr}
    f392:	b086      	sub	sp, #24
	if(enable_echo)
    f394:	4b25      	ldr	r3, [pc, #148]	; (f42c <RNCmd_SendStatusChange+0x9c>)
    f396:	781c      	ldrb	r4, [r3, #0]
	uint8_t* ptx_data = tx_data;
    f398:	ad03      	add	r5, sp, #12
	if(enable_echo)
    f39a:	2c00      	cmp	r4, #0
    f39c:	d004      	beq.n	f3a8 <RNCmd_SendStatusChange+0x18>
		*ptx_data++ = '\n';
    f39e:	220a      	movs	r2, #10
    f3a0:	702a      	strb	r2, [r5, #0]
		tx_data_len++;
    f3a2:	2401      	movs	r4, #1
		*ptx_data++ = '\n';
    f3a4:	250d      	movs	r5, #13
    f3a6:	446d      	add	r5, sp
	*ptx_data++ = 's';
    f3a8:	2373      	movs	r3, #115	; 0x73
    f3aa:	702b      	strb	r3, [r5, #0]
	*ptx_data++ = 't';
    f3ac:	2274      	movs	r2, #116	; 0x74
    f3ae:	706a      	strb	r2, [r5, #1]
	*ptx_data++ = 'a';
    f3b0:	2161      	movs	r1, #97	; 0x61
    f3b2:	70a9      	strb	r1, [r5, #2]
	*ptx_data++ = 't';
    f3b4:	70ea      	strb	r2, [r5, #3]
	*ptx_data++ = 'u';
    f3b6:	3201      	adds	r2, #1
    f3b8:	712a      	strb	r2, [r5, #4]
	*ptx_data++ = 's';
    f3ba:	716b      	strb	r3, [r5, #5]
	*ptx_data++ = ' ';
    f3bc:	3b53      	subs	r3, #83	; 0x53
    f3be:	71ab      	strb	r3, [r5, #6]
	num2Hex(event_code, hex, &hex_len);
    f3c0:	466b      	mov	r3, sp
    f3c2:	1dde      	adds	r6, r3, #7
    f3c4:	0032      	movs	r2, r6
    f3c6:	a902      	add	r1, sp, #8
    f3c8:	4b19      	ldr	r3, [pc, #100]	; (f430 <RNCmd_SendStatusChange+0xa0>)
    f3ca:	4798      	blx	r3
	if(hex_len == 1)
    f3cc:	7833      	ldrb	r3, [r6, #0]
    f3ce:	2b01      	cmp	r3, #1
    f3d0:	d013      	beq.n	f3fa <RNCmd_SendStatusChange+0x6a>
	else if(hex_len == 2)
    f3d2:	2b02      	cmp	r3, #2
    f3d4:	d019      	beq.n	f40a <RNCmd_SendStatusChange+0x7a>
	*ptx_data++ = ' ';
    f3d6:	1deb      	adds	r3, r5, #7
	tx_data_len += 7;
    f3d8:	3407      	adds	r4, #7
    f3da:	b2e1      	uxtb	r1, r4
	if(enable_echo)
    f3dc:	4a13      	ldr	r2, [pc, #76]	; (f42c <RNCmd_SendStatusChange+0x9c>)
    f3de:	7812      	ldrb	r2, [r2, #0]
    f3e0:	2a00      	cmp	r2, #0
    f3e2:	d11c      	bne.n	f41e <RNCmd_SendStatusChange+0x8e>
		*ptx_data++ = '\r';	//0x13, ENTER
    f3e4:	220d      	movs	r2, #13
    f3e6:	701a      	strb	r2, [r3, #0]
		tx_data_len += 1;
    f3e8:	3101      	adds	r1, #1
    f3ea:	b2c9      	uxtb	r1, r1
	sio2host_tx(tx_data, tx_data_len);
    f3ec:	a803      	add	r0, sp, #12
    f3ee:	4b11      	ldr	r3, [pc, #68]	; (f434 <RNCmd_SendStatusChange+0xa4>)
    f3f0:	4798      	blx	r3
	RNCmd_TxCmdInit();
    f3f2:	4b11      	ldr	r3, [pc, #68]	; (f438 <RNCmd_SendStatusChange+0xa8>)
    f3f4:	4798      	blx	r3
}
    f3f6:	b006      	add	sp, #24
    f3f8:	bd70      	pop	{r4, r5, r6, pc}
		*ptx_data++ = hex[0];
    f3fa:	002b      	movs	r3, r5
    f3fc:	3308      	adds	r3, #8
    f3fe:	aa02      	add	r2, sp, #8
    f400:	7812      	ldrb	r2, [r2, #0]
    f402:	71ea      	strb	r2, [r5, #7]
		tx_data_len ++;
    f404:	3408      	adds	r4, #8
    f406:	b2e1      	uxtb	r1, r4
    f408:	e7e8      	b.n	f3dc <RNCmd_SendStatusChange+0x4c>
		*ptx_data++ = hex[0];
    f40a:	aa02      	add	r2, sp, #8
    f40c:	7813      	ldrb	r3, [r2, #0]
    f40e:	71eb      	strb	r3, [r5, #7]
		*ptx_data++ = hex[1];
    f410:	002b      	movs	r3, r5
    f412:	3309      	adds	r3, #9
    f414:	7852      	ldrb	r2, [r2, #1]
    f416:	722a      	strb	r2, [r5, #8]
		tx_data_len += 2;
    f418:	3409      	adds	r4, #9
    f41a:	b2e1      	uxtb	r1, r4
    f41c:	e7de      	b.n	f3dc <RNCmd_SendStatusChange+0x4c>
		*ptx_data++ = '\n';
    f41e:	220a      	movs	r2, #10
    f420:	701a      	strb	r2, [r3, #0]
		*ptx_data++ = '\r';
    f422:	3203      	adds	r2, #3
    f424:	705a      	strb	r2, [r3, #1]
		tx_data_len += 2;
    f426:	3102      	adds	r1, #2
    f428:	b2c9      	uxtb	r1, r1
    f42a:	e7df      	b.n	f3ec <RNCmd_SendStatusChange+0x5c>
    f42c:	20001ccc 	.word	0x20001ccc
    f430:	0000e23b 	.word	0x0000e23b
    f434:	0000869d 	.word	0x0000869d
    f438:	0000f2d1 	.word	0x0000f2d1

0000f43c <RNCmd_SendConnectionChange>:
{
    f43c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f43e:	b083      	sub	sp, #12
    f440:	0006      	movs	r6, r0
	if(enable_echo)
    f442:	4b36      	ldr	r3, [pc, #216]	; (f51c <RNCmd_SendConnectionChange+0xe0>)
    f444:	781d      	ldrb	r5, [r3, #0]
    f446:	2d00      	cmp	r5, #0
    f448:	d041      	beq.n	f4ce <RNCmd_SendConnectionChange+0x92>
		*pStr1++ = '\n';
    f44a:	4c35      	ldr	r4, [pc, #212]	; (f520 <RNCmd_SendConnectionChange+0xe4>)
    f44c:	230a      	movs	r3, #10
    f44e:	7023      	strb	r3, [r4, #0]
		str1Len++;
    f450:	2501      	movs	r5, #1
		*pStr1++ = '\n';
    f452:	3401      	adds	r4, #1
	*pStr1++ = 'c';	//add "conn"
    f454:	2363      	movs	r3, #99	; 0x63
    f456:	7023      	strb	r3, [r4, #0]
	*pStr1++ = 'o';
    f458:	330c      	adds	r3, #12
    f45a:	7063      	strb	r3, [r4, #1]
	*pStr1++ = 'n';
    f45c:	3b01      	subs	r3, #1
    f45e:	70a3      	strb	r3, [r4, #2]
	*pStr1++ = 'n';
    f460:	70e3      	strb	r3, [r4, #3]
	*pStr1++ = ' ';
    f462:	3b4e      	subs	r3, #78	; 0x4e
    f464:	7123      	strb	r3, [r4, #4]
	num2Hex(index, hex, &hex_len);
    f466:	466b      	mov	r3, sp
    f468:	1cdf      	adds	r7, r3, #3
    f46a:	003a      	movs	r2, r7
    f46c:	a901      	add	r1, sp, #4
    f46e:	0030      	movs	r0, r6
    f470:	4b2c      	ldr	r3, [pc, #176]	; (f524 <RNCmd_SendConnectionChange+0xe8>)
    f472:	4798      	blx	r3
	if(hex_len == 1)
    f474:	783b      	ldrb	r3, [r7, #0]
    f476:	2b01      	cmp	r3, #1
    f478:	d02b      	beq.n	f4d2 <RNCmd_SendConnectionChange+0x96>
	else if(hex_len == 2)
    f47a:	2b02      	cmp	r3, #2
    f47c:	d032      	beq.n	f4e4 <RNCmd_SendConnectionChange+0xa8>
	*pStr1++ = ' ';
    f47e:	1d60      	adds	r0, r4, #5
	str1Len += 5;
    f480:	3505      	adds	r5, #5
    f482:	b2ed      	uxtb	r5, r5
	if( connectionTable[index].status.bits.isValid )
    f484:	0132      	lsls	r2, r6, #4
    f486:	4b28      	ldr	r3, [pc, #160]	; (f528 <RNCmd_SendConnectionChange+0xec>)
    f488:	189b      	adds	r3, r3, r2
    f48a:	7b1b      	ldrb	r3, [r3, #12]
    f48c:	09db      	lsrs	r3, r3, #7
    f48e:	d035      	beq.n	f4fc <RNCmd_SendConnectionChange+0xc0>
		*pStr1++ = '1';	//'1' means valid
    f490:	2331      	movs	r3, #49	; 0x31
    f492:	7003      	strb	r3, [r0, #0]
		*pStr1++ = ' ';
    f494:	1c84      	adds	r4, r0, #2
    f496:	3b11      	subs	r3, #17
    f498:	7043      	strb	r3, [r0, #1]
		str1Len += 2;
    f49a:	3502      	adds	r5, #2
    f49c:	b2ed      	uxtb	r5, r5
	num2HexStr(connectionTable[index].Address, MY_ADDRESS_LENGTH, pStr1, 2*MY_ADDRESS_LENGTH+1);
    f49e:	0136      	lsls	r6, r6, #4
    f4a0:	1d30      	adds	r0, r6, #4
    f4a2:	4b21      	ldr	r3, [pc, #132]	; (f528 <RNCmd_SendConnectionChange+0xec>)
    f4a4:	18c0      	adds	r0, r0, r3
    f4a6:	2311      	movs	r3, #17
    f4a8:	0022      	movs	r2, r4
    f4aa:	2108      	movs	r1, #8
    f4ac:	4e1f      	ldr	r6, [pc, #124]	; (f52c <RNCmd_SendConnectionChange+0xf0>)
    f4ae:	47b0      	blx	r6
	if(enable_echo)
    f4b0:	4b1a      	ldr	r3, [pc, #104]	; (f51c <RNCmd_SendConnectionChange+0xe0>)
    f4b2:	781b      	ldrb	r3, [r3, #0]
    f4b4:	2b00      	cmp	r3, #0
    f4b6:	d129      	bne.n	f50c <RNCmd_SendConnectionChange+0xd0>
		*pStr1++ = '\r';	//0x13, ENTER
    f4b8:	230d      	movs	r3, #13
    f4ba:	7423      	strb	r3, [r4, #16]
		str1Len += 1;
    f4bc:	3511      	adds	r5, #17
    f4be:	b2e9      	uxtb	r1, r5
	sio2host_tx(tx_cmd, str1Len);
    f4c0:	4817      	ldr	r0, [pc, #92]	; (f520 <RNCmd_SendConnectionChange+0xe4>)
    f4c2:	4b1b      	ldr	r3, [pc, #108]	; (f530 <RNCmd_SendConnectionChange+0xf4>)
    f4c4:	4798      	blx	r3
	RNCmd_TxCmdInit();
    f4c6:	4b1b      	ldr	r3, [pc, #108]	; (f534 <RNCmd_SendConnectionChange+0xf8>)
    f4c8:	4798      	blx	r3
}
    f4ca:	b003      	add	sp, #12
    f4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t* pStr1 = tx_cmd;
    f4ce:	4c14      	ldr	r4, [pc, #80]	; (f520 <RNCmd_SendConnectionChange+0xe4>)
    f4d0:	e7c0      	b.n	f454 <RNCmd_SendConnectionChange+0x18>
		*pStr1++ = hex[0];
    f4d2:	ab01      	add	r3, sp, #4
    f4d4:	781b      	ldrb	r3, [r3, #0]
    f4d6:	7163      	strb	r3, [r4, #5]
		*pStr1++ = ' ';
    f4d8:	1de0      	adds	r0, r4, #7
    f4da:	2320      	movs	r3, #32
    f4dc:	71a3      	strb	r3, [r4, #6]
		str1Len += 2;
    f4de:	3507      	adds	r5, #7
    f4e0:	b2ed      	uxtb	r5, r5
    f4e2:	e7cf      	b.n	f484 <RNCmd_SendConnectionChange+0x48>
		*pStr1++ = hex[0];
    f4e4:	ab01      	add	r3, sp, #4
    f4e6:	781a      	ldrb	r2, [r3, #0]
    f4e8:	7162      	strb	r2, [r4, #5]
		*pStr1++ = hex[1];
    f4ea:	785b      	ldrb	r3, [r3, #1]
    f4ec:	71a3      	strb	r3, [r4, #6]
		*pStr1++ = ' ';
    f4ee:	0020      	movs	r0, r4
    f4f0:	3008      	adds	r0, #8
    f4f2:	2320      	movs	r3, #32
    f4f4:	71e3      	strb	r3, [r4, #7]
		str1Len += 3;
    f4f6:	3508      	adds	r5, #8
    f4f8:	b2ed      	uxtb	r5, r5
    f4fa:	e7c3      	b.n	f484 <RNCmd_SendConnectionChange+0x48>
		*pStr1++ = '0';	//'0' means invalid
    f4fc:	2330      	movs	r3, #48	; 0x30
    f4fe:	7003      	strb	r3, [r0, #0]
		*pStr1++ = ' ';
    f500:	1c84      	adds	r4, r0, #2
    f502:	3b10      	subs	r3, #16
    f504:	7043      	strb	r3, [r0, #1]
		str1Len += 2;
    f506:	3502      	adds	r5, #2
    f508:	b2ed      	uxtb	r5, r5
    f50a:	e7c8      	b.n	f49e <RNCmd_SendConnectionChange+0x62>
		*pStr1++ = '\n';
    f50c:	230a      	movs	r3, #10
    f50e:	7423      	strb	r3, [r4, #16]
		*pStr1 = '\r';
    f510:	3303      	adds	r3, #3
    f512:	7463      	strb	r3, [r4, #17]
		str1Len += 2;
    f514:	3512      	adds	r5, #18
    f516:	b2e9      	uxtb	r1, r5
    f518:	e7d2      	b.n	f4c0 <RNCmd_SendConnectionChange+0x84>
    f51a:	46c0      	nop			; (mov r8, r8)
    f51c:	20001ccc 	.word	0x20001ccc
    f520:	20002238 	.word	0x20002238
    f524:	0000e23b 	.word	0x0000e23b
    f528:	200023b0 	.word	0x200023b0
    f52c:	0000e1e9 	.word	0x0000e1e9
    f530:	0000869d 	.word	0x0000869d
    f534:	0000f2d1 	.word	0x0000f2d1

0000f538 <RNCmd_SendReceiveData>:
{
    f538:	b5f0      	push	{r4, r5, r6, r7, lr}
    f53a:	46ce      	mov	lr, r9
    f53c:	4647      	mov	r7, r8
    f53e:	b580      	push	{r7, lr}
    f540:	b083      	sub	sp, #12
	if(enable_echo)
    f542:	4b4e      	ldr	r3, [pc, #312]	; (f67c <RNCmd_SendReceiveData+0x144>)
    f544:	781b      	ldrb	r3, [r3, #0]
    f546:	2b00      	cmp	r3, #0
    f548:	d049      	beq.n	f5de <RNCmd_SendReceiveData+0xa6>
		*ptx_cmd++ = '\n';
    f54a:	4d4d      	ldr	r5, [pc, #308]	; (f680 <RNCmd_SendReceiveData+0x148>)
    f54c:	230a      	movs	r3, #10
    f54e:	702b      	strb	r3, [r5, #0]
		tx_cmd_len++;
    f550:	2401      	movs	r4, #1
		*ptx_cmd++ = '\n';
    f552:	3501      	adds	r5, #1
	*ptx_cmd++ = 'r';	//add "recv"
    f554:	2372      	movs	r3, #114	; 0x72
    f556:	702b      	strb	r3, [r5, #0]
	*ptx_cmd++ = 'e';
    f558:	3b0d      	subs	r3, #13
    f55a:	706b      	strb	r3, [r5, #1]
	*ptx_cmd++ = 'c';
    f55c:	3b02      	subs	r3, #2
    f55e:	70ab      	strb	r3, [r5, #2]
	*ptx_cmd++ = 'v';
    f560:	3313      	adds	r3, #19
    f562:	70eb      	strb	r3, [r5, #3]
	*ptx_cmd++ = ' ';
    f564:	1d6a      	adds	r2, r5, #5
    f566:	3b56      	subs	r3, #86	; 0x56
    f568:	712b      	strb	r3, [r5, #4]
	temp = 0;
    f56a:	2100      	movs	r1, #0
    f56c:	466b      	mov	r3, sp
    f56e:	71d9      	strb	r1, [r3, #7]
	if( rxMessage.flags.bits.secEn )
    f570:	4b44      	ldr	r3, [pc, #272]	; (f684 <RNCmd_SendReceiveData+0x14c>)
    f572:	781b      	ldrb	r3, [r3, #0]
    f574:	0719      	lsls	r1, r3, #28
    f576:	d502      	bpl.n	f57e <RNCmd_SendReceiveData+0x46>
		temp |= 0x02;
    f578:	2002      	movs	r0, #2
    f57a:	4669      	mov	r1, sp
    f57c:	71c8      	strb	r0, [r1, #7]
	if( rxMessage.flags.bits.broadcast )
    f57e:	079b      	lsls	r3, r3, #30
    f580:	d005      	beq.n	f58e <RNCmd_SendReceiveData+0x56>
		temp |= 0x01;
    f582:	466b      	mov	r3, sp
    f584:	1dd9      	adds	r1, r3, #7
    f586:	79db      	ldrb	r3, [r3, #7]
    f588:	2001      	movs	r0, #1
    f58a:	4303      	orrs	r3, r0
    f58c:	700b      	strb	r3, [r1, #0]
	num2HexStr(&temp, 1, ptx_cmd, 2);
    f58e:	466b      	mov	r3, sp
    f590:	1dde      	adds	r6, r3, #7
    f592:	2302      	movs	r3, #2
    f594:	2101      	movs	r1, #1
    f596:	0030      	movs	r0, r6
    f598:	4f3b      	ldr	r7, [pc, #236]	; (f688 <RNCmd_SendReceiveData+0x150>)
    f59a:	46b9      	mov	r9, r7
    f59c:	47b8      	blx	r7
	*ptx_cmd++ = ' ';
    f59e:	2320      	movs	r3, #32
    f5a0:	4698      	mov	r8, r3
    f5a2:	71eb      	strb	r3, [r5, #7]
	temp = rxMessage.PacketRSSI;
    f5a4:	4f37      	ldr	r7, [pc, #220]	; (f684 <RNCmd_SendReceiveData+0x14c>)
    f5a6:	7b7b      	ldrb	r3, [r7, #13]
    f5a8:	7033      	strb	r3, [r6, #0]
	*ptx_cmd++ = ' ';
    f5aa:	002a      	movs	r2, r5
    f5ac:	3208      	adds	r2, #8
	num2HexStr(&temp, 1, ptx_cmd, 2);
    f5ae:	2302      	movs	r3, #2
    f5b0:	2101      	movs	r1, #1
    f5b2:	0030      	movs	r0, r6
    f5b4:	47c8      	blx	r9
	*ptx_cmd++ = ' ';
    f5b6:	4643      	mov	r3, r8
    f5b8:	72ab      	strb	r3, [r5, #10]
	if( rxMessage.flags.bits.srcPrsnt )
    f5ba:	783b      	ldrb	r3, [r7, #0]
    f5bc:	065a      	lsls	r2, r3, #25
    f5be:	d51b      	bpl.n	f5f8 <RNCmd_SendReceiveData+0xc0>
	*ptx_cmd++ = ' ';
    f5c0:	002a      	movs	r2, r5
    f5c2:	320b      	adds	r2, #11
		if( rxMessage.flags.bits.altSrcAddr )
    f5c4:	b25b      	sxtb	r3, r3
    f5c6:	2b00      	cmp	r3, #0
    f5c8:	db0c      	blt.n	f5e4 <RNCmd_SendReceiveData+0xac>
			num2HexStr(rxMessage.SourceAddress, MY_ADDRESS_LENGTH, ptx_cmd, 2*MY_ADDRESS_LENGTH);
    f5ca:	4b2e      	ldr	r3, [pc, #184]	; (f684 <RNCmd_SendReceiveData+0x14c>)
    f5cc:	6858      	ldr	r0, [r3, #4]
    f5ce:	2310      	movs	r3, #16
    f5d0:	2108      	movs	r1, #8
    f5d2:	4e2d      	ldr	r6, [pc, #180]	; (f688 <RNCmd_SendReceiveData+0x150>)
    f5d4:	47b0      	blx	r6
			ptx_cmd += 2*MY_ADDRESS_LENGTH;
    f5d6:	002b      	movs	r3, r5
    f5d8:	331b      	adds	r3, #27
			tx_cmd_len += 2*MY_ADDRESS_LENGTH;
    f5da:	341b      	adds	r4, #27
    f5dc:	e014      	b.n	f608 <RNCmd_SendReceiveData+0xd0>
	uint16_t tx_cmd_len = 0;
    f5de:	2400      	movs	r4, #0
	uint8_t* ptx_cmd = tx_cmd;
    f5e0:	4d27      	ldr	r5, [pc, #156]	; (f680 <RNCmd_SendReceiveData+0x148>)
    f5e2:	e7b7      	b.n	f554 <RNCmd_SendReceiveData+0x1c>
			num2HexStr(rxMessage.SourceAddress, 2, ptx_cmd, 4);
    f5e4:	4b27      	ldr	r3, [pc, #156]	; (f684 <RNCmd_SendReceiveData+0x14c>)
    f5e6:	6858      	ldr	r0, [r3, #4]
    f5e8:	2304      	movs	r3, #4
    f5ea:	2102      	movs	r1, #2
    f5ec:	4e26      	ldr	r6, [pc, #152]	; (f688 <RNCmd_SendReceiveData+0x150>)
    f5ee:	47b0      	blx	r6
			ptx_cmd += 4;
    f5f0:	002b      	movs	r3, r5
    f5f2:	330f      	adds	r3, #15
			tx_cmd_len += 4;
    f5f4:	340f      	adds	r4, #15
    f5f6:	e007      	b.n	f608 <RNCmd_SendReceiveData+0xd0>
		*ptx_cmd++ = 'f';
    f5f8:	2266      	movs	r2, #102	; 0x66
    f5fa:	72ea      	strb	r2, [r5, #11]
		*ptx_cmd++ = 'f';
    f5fc:	732a      	strb	r2, [r5, #12]
		*ptx_cmd++ = 'f';
    f5fe:	736a      	strb	r2, [r5, #13]
		*ptx_cmd++ = 'f';
    f600:	002b      	movs	r3, r5
    f602:	330f      	adds	r3, #15
    f604:	73aa      	strb	r2, [r5, #14]
		tx_cmd_len += 4;
    f606:	340f      	adds	r4, #15
	*ptx_cmd++ = ' ';
    f608:	1c5f      	adds	r7, r3, #1
    f60a:	2220      	movs	r2, #32
    f60c:	701a      	strb	r2, [r3, #0]
	tx_cmd_len ++;
    f60e:	3401      	adds	r4, #1
    f610:	b2a4      	uxth	r4, r4
	for(temp = 0; temp < rxMessage.PayloadSize; temp++)
    f612:	2200      	movs	r2, #0
    f614:	466b      	mov	r3, sp
    f616:	71da      	strb	r2, [r3, #7]
    f618:	4b1a      	ldr	r3, [pc, #104]	; (f684 <RNCmd_SendReceiveData+0x14c>)
    f61a:	7b1e      	ldrb	r6, [r3, #12]
    f61c:	2e00      	cmp	r6, #0
    f61e:	d013      	beq.n	f648 <RNCmd_SendReceiveData+0x110>
    f620:	0039      	movs	r1, r7
    f622:	689a      	ldr	r2, [r3, #8]
		*ptx_cmd++ = rxMessage.Payload[temp];
    f624:	2000      	movs	r0, #0
	for(temp = 0; temp < rxMessage.PayloadSize; temp++)
    f626:	466b      	mov	r3, sp
    f628:	1ddd      	adds	r5, r3, #7
    f62a:	e000      	b.n	f62e <RNCmd_SendReceiveData+0xf6>
    f62c:	0018      	movs	r0, r3
		*ptx_cmd++ = rxMessage.Payload[temp];
    f62e:	7813      	ldrb	r3, [r2, #0]
    f630:	700b      	strb	r3, [r1, #0]
	for(temp = 0; temp < rxMessage.PayloadSize; temp++)
    f632:	1c43      	adds	r3, r0, #1
    f634:	b2db      	uxtb	r3, r3
    f636:	702b      	strb	r3, [r5, #0]
    f638:	3101      	adds	r1, #1
    f63a:	3201      	adds	r2, #1
    f63c:	42b3      	cmp	r3, r6
    f63e:	d1f5      	bne.n	f62c <RNCmd_SendReceiveData+0xf4>
    f640:	1c43      	adds	r3, r0, #1
    f642:	18ff      	adds	r7, r7, r3
    f644:	18e4      	adds	r4, r4, r3
    f646:	b2a4      	uxth	r4, r4
	if(enable_echo)
    f648:	4b0c      	ldr	r3, [pc, #48]	; (f67c <RNCmd_SendReceiveData+0x144>)
    f64a:	781b      	ldrb	r3, [r3, #0]
    f64c:	2b00      	cmp	r3, #0
    f64e:	d10e      	bne.n	f66e <RNCmd_SendReceiveData+0x136>
		*ptx_cmd++ = '\r';	//0x13, ENTER
    f650:	230d      	movs	r3, #13
    f652:	703b      	strb	r3, [r7, #0]
		tx_cmd_len += 1;
    f654:	3401      	adds	r4, #1
    f656:	b2a1      	uxth	r1, r4
	sio2host_tx(tx_cmd, tx_cmd_len);
    f658:	b2c9      	uxtb	r1, r1
    f65a:	4809      	ldr	r0, [pc, #36]	; (f680 <RNCmd_SendReceiveData+0x148>)
    f65c:	4b0b      	ldr	r3, [pc, #44]	; (f68c <RNCmd_SendReceiveData+0x154>)
    f65e:	4798      	blx	r3
	RNCmd_TxCmdInit();
    f660:	4b0b      	ldr	r3, [pc, #44]	; (f690 <RNCmd_SendReceiveData+0x158>)
    f662:	4798      	blx	r3
}
    f664:	b003      	add	sp, #12
    f666:	bc0c      	pop	{r2, r3}
    f668:	4690      	mov	r8, r2
    f66a:	4699      	mov	r9, r3
    f66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*ptx_cmd++ = '\n';
    f66e:	230a      	movs	r3, #10
    f670:	703b      	strb	r3, [r7, #0]
		*ptx_cmd++ = '\r';
    f672:	3303      	adds	r3, #3
    f674:	707b      	strb	r3, [r7, #1]
		tx_cmd_len += 2;
    f676:	3402      	adds	r4, #2
    f678:	b2a1      	uxth	r1, r4
    f67a:	e7ed      	b.n	f658 <RNCmd_SendReceiveData+0x120>
    f67c:	20001ccc 	.word	0x20001ccc
    f680:	20002238 	.word	0x20002238
    f684:	20002178 	.word	0x20002178
    f688:	0000e1e9 	.word	0x0000e1e9
    f68c:	0000869d 	.word	0x0000869d
    f690:	0000f2d1 	.word	0x0000f2d1

0000f694 <RNCmd_CmdInit>:
* Summary:
*      Initialize RN command module.
*
*****************************************************************************************/
void RNCmd_CmdInit( void )
{
    f694:	b510      	push	{r4, lr}
	reboot_reported = 0;
    f696:	2400      	movs	r4, #0
    f698:	4b0e      	ldr	r3, [pc, #56]	; (f6d4 <RNCmd_CmdInit+0x40>)
    f69a:	701c      	strb	r4, [r3, #0]
	rn_cfg_mode = 1;
    f69c:	2201      	movs	r2, #1
    f69e:	4b0e      	ldr	r3, [pc, #56]	; (f6d8 <RNCmd_CmdInit+0x44>)
    f6a0:	701a      	strb	r2, [r3, #0]
	enable_echo = 0;
    f6a2:	4b0e      	ldr	r3, [pc, #56]	; (f6dc <RNCmd_CmdInit+0x48>)
    f6a4:	701c      	strb	r4, [r3, #0]
	manual_establish_network = false;
    f6a6:	4b0e      	ldr	r3, [pc, #56]	; (f6e0 <RNCmd_CmdInit+0x4c>)
    f6a8:	701c      	strb	r4, [r3, #0]
	RNCmd_RxCmdInit();
    f6aa:	4b0e      	ldr	r3, [pc, #56]	; (f6e4 <RNCmd_CmdInit+0x50>)
    f6ac:	4798      	blx	r3
	RNCmd_TxCmdInit();
    f6ae:	4b0e      	ldr	r3, [pc, #56]	; (f6e8 <RNCmd_CmdInit+0x54>)
    f6b0:	4798      	blx	r3
	phy_mod_user_setting = BPSK_20_RN;	//BPSK-20 for SAMR30 or 250kbps for SAMR21
    f6b2:	4b0e      	ldr	r3, [pc, #56]	; (f6ec <RNCmd_CmdInit+0x58>)
    f6b4:	701c      	strb	r4, [r3, #0]
	phy_txpwr_user_setting = 0;	//+3dbm for SAMR30 BPSK-40, BPSK-40-ALT, OQPSK-SIN-(250,500, 1000), +4dbm for SAMR21.
    f6b6:	4b0e      	ldr	r3, [pc, #56]	; (f6f0 <RNCmd_CmdInit+0x5c>)
    f6b8:	701c      	strb	r4, [r3, #0]
#if defined(PHY_AT86RF212B)
	if(myChannel)
    f6ba:	4b0e      	ldr	r3, [pc, #56]	; (f6f4 <RNCmd_CmdInit+0x60>)
    f6bc:	781b      	ldrb	r3, [r3, #0]
    f6be:	2b00      	cmp	r3, #0
    f6c0:	d103      	bne.n	f6ca <RNCmd_CmdInit+0x36>
	{
		phy_mod_user_setting = BPSK_40_ALT_RN;//default to BPSK-40-ALT if it is not channel 0
	}
	else
	{
		phy_txpwr_user_setting = 0xCB;	//+3dbm for 868.3MHZ EU band, Channel 0, BPSK-20
    f6c2:	22cb      	movs	r2, #203	; 0xcb
    f6c4:	4b0a      	ldr	r3, [pc, #40]	; (f6f0 <RNCmd_CmdInit+0x5c>)
    f6c6:	701a      	strb	r2, [r3, #0]
	}
#endif	
}
    f6c8:	bd10      	pop	{r4, pc}
		phy_mod_user_setting = BPSK_40_ALT_RN;//default to BPSK-40-ALT if it is not channel 0
    f6ca:	2214      	movs	r2, #20
    f6cc:	4b07      	ldr	r3, [pc, #28]	; (f6ec <RNCmd_CmdInit+0x58>)
    f6ce:	701a      	strb	r2, [r3, #0]
    f6d0:	e7fa      	b.n	f6c8 <RNCmd_CmdInit+0x34>
    f6d2:	46c0      	nop			; (mov r8, r8)
    f6d4:	20001cd0 	.word	0x20001cd0
    f6d8:	2000001c 	.word	0x2000001c
    f6dc:	20001ccc 	.word	0x20001ccc
    f6e0:	200023a8 	.word	0x200023a8
    f6e4:	0000e35d 	.word	0x0000e35d
    f6e8:	0000f2d1 	.word	0x0000f2d1
    f6ec:	20001cce 	.word	0x20001cce
    f6f0:	20001ccf 	.word	0x20001ccf
    f6f4:	20000034 	.word	0x20000034

0000f6f8 <RNCmdTask>:
*      RN command task called by application main loop.
*      It send Reboot to host after initialization, and process data input from host and echo.
*
*****************************************************************************************/
void RNCmdTask(void)
{
    f6f8:	b570      	push	{r4, r5, r6, lr}
	uint16_t bytes;
	if(reboot_reported == 0)
    f6fa:	4b14      	ldr	r3, [pc, #80]	; (f74c <RNCmdTask+0x54>)
    f6fc:	781b      	ldrb	r3, [r3, #0]
    f6fe:	2b00      	cmp	r3, #0
    f700:	d016      	beq.n	f730 <RNCmdTask+0x38>
	{
		reboot_reported = 1;
		sio2host_tx((uint8_t *)StrREBOOT, sizeof(StrAOK));
	}
	if ((bytes = sio2host_rx(at_rx_data, RN_RX_BUF_SIZE)) > 0) {
    f702:	2140      	movs	r1, #64	; 0x40
    f704:	4812      	ldr	r0, [pc, #72]	; (f750 <RNCmdTask+0x58>)
    f706:	4b13      	ldr	r3, [pc, #76]	; (f754 <RNCmdTask+0x5c>)
    f708:	4798      	blx	r3
    f70a:	b285      	uxth	r5, r0
    f70c:	2d00      	cmp	r5, #0
    f70e:	d00e      	beq.n	f72e <RNCmdTask+0x36>
		if(enable_echo)
    f710:	4b11      	ldr	r3, [pc, #68]	; (f758 <RNCmdTask+0x60>)
    f712:	781b      	ldrb	r3, [r3, #0]
    f714:	2b00      	cmp	r3, #0
    f716:	d113      	bne.n	f740 <RNCmdTask+0x48>
    f718:	4c0d      	ldr	r4, [pc, #52]	; (f750 <RNCmdTask+0x58>)
    f71a:	3d01      	subs	r5, #1
    f71c:	b2ad      	uxth	r5, r5
    f71e:	3501      	adds	r5, #1
    f720:	1965      	adds	r5, r4, r5
			sio2host_tx(at_rx_data, bytes);		//echo back
		for (uint16_t i = 0; i < bytes; i++) {
			RNCmd_ByteReceived(at_rx_data[i]);
    f722:	4e0e      	ldr	r6, [pc, #56]	; (f75c <RNCmdTask+0x64>)
    f724:	7820      	ldrb	r0, [r4, #0]
    f726:	47b0      	blx	r6
    f728:	3401      	adds	r4, #1
		for (uint16_t i = 0; i < bytes; i++) {
    f72a:	42ac      	cmp	r4, r5
    f72c:	d1fa      	bne.n	f724 <RNCmdTask+0x2c>
		}
	}
}
    f72e:	bd70      	pop	{r4, r5, r6, pc}
		reboot_reported = 1;
    f730:	2201      	movs	r2, #1
    f732:	4b06      	ldr	r3, [pc, #24]	; (f74c <RNCmdTask+0x54>)
    f734:	701a      	strb	r2, [r3, #0]
		sio2host_tx((uint8_t *)StrREBOOT, sizeof(StrAOK));
    f736:	2107      	movs	r1, #7
    f738:	4809      	ldr	r0, [pc, #36]	; (f760 <RNCmdTask+0x68>)
    f73a:	4b0a      	ldr	r3, [pc, #40]	; (f764 <RNCmdTask+0x6c>)
    f73c:	4798      	blx	r3
    f73e:	e7e0      	b.n	f702 <RNCmdTask+0xa>
			sio2host_tx(at_rx_data, bytes);		//echo back
    f740:	0001      	movs	r1, r0
    f742:	4803      	ldr	r0, [pc, #12]	; (f750 <RNCmdTask+0x58>)
    f744:	4b07      	ldr	r3, [pc, #28]	; (f764 <RNCmdTask+0x6c>)
    f746:	4798      	blx	r3
    f748:	e7e6      	b.n	f718 <RNCmdTask+0x20>
    f74a:	46c0      	nop			; (mov r8, r8)
    f74c:	20001cd0 	.word	0x20001cd0
    f750:	20001c8c 	.word	0x20001c8c
    f754:	000086c9 	.word	0x000086c9
    f758:	20001ccc 	.word	0x20001ccc
    f75c:	0000f245 	.word	0x0000f245
    f760:	00012868 	.word	0x00012868
    f764:	0000869d 	.word	0x0000869d

0000f768 <RNCmd_IsCfgMode>:
*      Return TRUE when configuration mode, return FALSE when action mode.
*
*****************************************************************************************/
uint8_t RNCmd_IsCfgMode(void)
{
	return rn_cfg_mode;
    f768:	4b01      	ldr	r3, [pc, #4]	; (f770 <RNCmd_IsCfgMode+0x8>)
    f76a:	7818      	ldrb	r0, [r3, #0]
}
    f76c:	4770      	bx	lr
    f76e:	46c0      	nop			; (mov r8, r8)
    f770:	2000001c 	.word	0x2000001c

0000f774 <dataConfcb>:
#ifdef MIWI_RN_CMD
void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
#else
static void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
#endif
{
    f774:	b510      	push	{r4, lr}
    if (SUCCESS == status)
    f776:	2900      	cmp	r1, #0
    f778:	d100      	bne.n	f77c <dataConfcb+0x8>
#endif	
#ifndef MIWI_RN_CMD			//remove it >>		
    /* After Displaying TX and RX Counts , Switch back to showing Demo Instructions */
    STAR_DEMO_OPTIONS_MESSAGE (role);
#endif //remove		
}
    f77a:	bd10      	pop	{r4, pc}
		RNCmd_SendErrorCode(status);		//return status code to host if not success
    f77c:	0008      	movs	r0, r1
    f77e:	4b01      	ldr	r3, [pc, #4]	; (f784 <dataConfcb+0x10>)
    f780:	4798      	blx	r3
}
    f782:	e7fa      	b.n	f77a <dataConfcb+0x6>
    f784:	0000f2e9 	.word	0x0000f2e9

0000f788 <run_star_demo>:
                sio2host_enable();
#endif
            }
        }
#endif	//ENABLE_SLEEP_FEATURE
}
    f788:	4770      	bx	lr
    f78a:	Address 0x0000f78a is out of bounds.


0000f78c <ReceivedDataIndication>:
* PreCondition: MiApp_ProtocolInit
*
* Input:  RECEIVED_MESSAGE *ind - Indication structure
********************************************************************/
void ReceivedDataIndication (RECEIVED_MESSAGE *ind)
{
    f78c:	b510      	push	{r4, lr}
#ifdef MIWI_RN_CMD
	RNCmd_SendReceiveData();
    f78e:	4b03      	ldr	r3, [pc, #12]	; (f79c <ReceivedDataIndication+0x10>)
    f790:	4798      	blx	r3
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    f792:	2280      	movs	r2, #128	; 0x80
    f794:	01d2      	lsls	r2, r2, #7
    f796:	4b02      	ldr	r3, [pc, #8]	; (f7a0 <ReceivedDataIndication+0x14>)
    f798:	61da      	str	r2, [r3, #28]

#if !defined(ENABLE_SLEEP_FEATURE)
    /* Toggle LED2 to indicate receiving a packet */
    LED_Toggle(LED0);
#endif
    f79a:	bd10      	pop	{r4, pc}
    f79c:	0000f539 	.word	0x0000f539
    f7a0:	40002800 	.word	0x40002800

0000f7a4 <EstablishConfirm>:
    {
#ifndef MIWI_RN_CMD	//remove it					
        printf("Reconnected\n\r");
#endif //remove		
    }
}
    f7a4:	4770      	bx	lr
    f7a6:	Address 0x0000f7a6 is out of bounds.


0000f7a8 <Connection_Confirm>:
{
    f7a8:	b510      	push	{r4, lr}
    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    f7aa:	2800      	cmp	r0, #0
    f7ac:	d011      	beq.n	f7d2 <Connection_Confirm+0x2a>
    f7ae:	2806      	cmp	r0, #6
    f7b0:	d00f      	beq.n	f7d2 <Connection_Confirm+0x2a>
		RNCmd_SendErrorCode(status);		//return status code to host if not success
    f7b2:	4b0a      	ldr	r3, [pc, #40]	; (f7dc <Connection_Confirm+0x34>)
    f7b4:	4798      	blx	r3
		if(!manual_establish_network)
    f7b6:	4b0a      	ldr	r3, [pc, #40]	; (f7e0 <Connection_Confirm+0x38>)
    f7b8:	781b      	ldrb	r3, [r3, #0]
    f7ba:	2b00      	cmp	r3, #0
    f7bc:	d10d      	bne.n	f7da <Connection_Confirm+0x32>
			MiApp_StartConnection(START_CONN_DIRECT, 10, (1L << myChannel), Connection_Confirm);
    f7be:	4b09      	ldr	r3, [pc, #36]	; (f7e4 <Connection_Confirm+0x3c>)
    f7c0:	781b      	ldrb	r3, [r3, #0]
    f7c2:	2201      	movs	r2, #1
    f7c4:	409a      	lsls	r2, r3
    f7c6:	4b08      	ldr	r3, [pc, #32]	; (f7e8 <Connection_Confirm+0x40>)
    f7c8:	210a      	movs	r1, #10
    f7ca:	2000      	movs	r0, #0
    f7cc:	4c07      	ldr	r4, [pc, #28]	; (f7ec <Connection_Confirm+0x44>)
    f7ce:	47a0      	blx	r4
}
    f7d0:	e003      	b.n	f7da <Connection_Confirm+0x32>
		port_base->OUTCLR.reg = pin_mask;
    f7d2:	2280      	movs	r2, #128	; 0x80
    f7d4:	01d2      	lsls	r2, r2, #7
    f7d6:	4b06      	ldr	r3, [pc, #24]	; (f7f0 <Connection_Confirm+0x48>)
    f7d8:	615a      	str	r2, [r3, #20]
    f7da:	bd10      	pop	{r4, pc}
    f7dc:	0000f2e9 	.word	0x0000f2e9
    f7e0:	200023a8 	.word	0x200023a8
    f7e4:	20000034 	.word	0x20000034
    f7e8:	0000f7a9 	.word	0x0000f7a9
    f7ec:	0000b991 	.word	0x0000b991
    f7f0:	40002800 	.word	0x40002800

0000f7f4 <appLinkFailureCallback>:
* Function: static void appLinkFailureCallback(void)
*
* Overview: callback function called upon when connection is lost
********************************************************************/
static void appLinkFailureCallback(void)
{
    f7f4:	b510      	push	{r4, lr}
    f7f6:	b084      	sub	sp, #16
    uint16_t broadcastAddr = 0xFFFF;
    f7f8:	220e      	movs	r2, #14
    f7fa:	446a      	add	r2, sp
    f7fc:	2301      	movs	r3, #1
    f7fe:	425b      	negs	r3, r3
    f800:	8013      	strh	r3, [r2, #0]
    MiApp_EstablishConnection(myChannel, 2, (uint8_t*)&broadcastAddr, 0, EstablishConfirm);
    f802:	4b05      	ldr	r3, [pc, #20]	; (f818 <appLinkFailureCallback+0x24>)
    f804:	7818      	ldrb	r0, [r3, #0]
    f806:	4b05      	ldr	r3, [pc, #20]	; (f81c <appLinkFailureCallback+0x28>)
    f808:	9300      	str	r3, [sp, #0]
    f80a:	2300      	movs	r3, #0
    f80c:	2102      	movs	r1, #2
    f80e:	4c04      	ldr	r4, [pc, #16]	; (f820 <appLinkFailureCallback+0x2c>)
    f810:	47a0      	blx	r4
}
    f812:	b004      	add	sp, #16
    f814:	bd10      	pop	{r4, pc}
    f816:	46c0      	nop			; (mov r8, r8)
    f818:	20000034 	.word	0x20000034
    f81c:	0000f7a5 	.word	0x0000f7a5
    f820:	0000bdd5 	.word	0x0000bdd5

0000f824 <Initialize_Demo>:
*
* Overview: Initializes the demo by initializing protocol, required
            components and initiates connection
********************************************************************/
bool Initialize_Demo(bool freezer_enable)
{
    f824:	b570      	push	{r4, r5, r6, lr}
    f826:	b086      	sub	sp, #24
    f828:	0004      	movs	r4, r0
    uint16_t broadcastAddr = 0xFFFF;
    f82a:	2201      	movs	r2, #1
    f82c:	4252      	negs	r2, r2
    f82e:	2316      	movs	r3, #22
    f830:	446b      	add	r3, sp
    f832:	801a      	strh	r2, [r3, #0]

    /* Subscribe for data indication */
    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    f834:	482d      	ldr	r0, [pc, #180]	; (f8ec <Initialize_Demo+0xc8>)
    f836:	4b2e      	ldr	r3, [pc, #184]	; (f8f0 <Initialize_Demo+0xcc>)
    f838:	4798      	blx	r3
    MiApp_SubscribeLinkFailureCallback(appLinkFailureCallback);
    f83a:	482e      	ldr	r0, [pc, #184]	; (f8f4 <Initialize_Demo+0xd0>)
    f83c:	4b2e      	ldr	r3, [pc, #184]	; (f8f8 <Initialize_Demo+0xd4>)
    f83e:	4798      	blx	r3
    /* Sleep manager initialization */
    sleepMgr_init();
#endif

    /* Update NetworkFreezerRestore parameter whether to restore from network freezer or not */
    defaultParamsRomOrRam.networkFreezerRestore = freezer_enable;
    f840:	482e      	ldr	r0, [pc, #184]	; (f8fc <Initialize_Demo+0xd8>)
    f842:	7304      	strb	r4, [r0, #12]

    /* Initialize the P2P and Star Protocol */
    if (MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly) == RECONNECTED)
    f844:	492e      	ldr	r1, [pc, #184]	; (f900 <Initialize_Demo+0xdc>)
    f846:	4b2f      	ldr	r3, [pc, #188]	; (f904 <Initialize_Demo+0xe0>)
    f848:	4798      	blx	r3
    f84a:	280f      	cmp	r0, #15
    f84c:	d03a      	beq.n	f8c4 <Initialize_Demo+0xa0>
		RNCmd_SendStatusChange(1);		//reconnection success
#endif		
        return true;
    }
#ifdef MIWI_RN_CMD	
	RNCmd_SendStatusChange(2);		//reconnection fail or no reconnection
    f84e:	2002      	movs	r0, #2
    f850:	4b2d      	ldr	r3, [pc, #180]	; (f908 <Initialize_Demo+0xe4>)
    f852:	4798      	blx	r3
    srand(PHY_RandomReq());
    f854:	4b2d      	ldr	r3, [pc, #180]	; (f90c <Initialize_Demo+0xe8>)
    f856:	4798      	blx	r3
    f858:	4b2d      	ldr	r3, [pc, #180]	; (f910 <Initialize_Demo+0xec>)
    f85a:	4798      	blx	r3
    memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    f85c:	2200      	movs	r2, #0
    f85e:	2300      	movs	r3, #0
    f860:	9202      	str	r2, [sp, #8]
    f862:	9303      	str	r3, [sp, #12]
    if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    f864:	4e2b      	ldr	r6, [pc, #172]	; (f914 <Initialize_Demo+0xf0>)
    f866:	3208      	adds	r2, #8
    f868:	0031      	movs	r1, r6
    f86a:	a802      	add	r0, sp, #8
    f86c:	4d2a      	ldr	r5, [pc, #168]	; (f918 <Initialize_Demo+0xf4>)
    f86e:	47a8      	blx	r5
    f870:	0004      	movs	r4, r0
    memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    f872:	2201      	movs	r2, #1
    f874:	4252      	negs	r2, r2
    f876:	17d3      	asrs	r3, r2, #31
    f878:	9202      	str	r2, [sp, #8]
    f87a:	9303      	str	r3, [sp, #12]
    if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    f87c:	3209      	adds	r2, #9
    f87e:	0031      	movs	r1, r6
    f880:	a802      	add	r0, sp, #8
    f882:	47a8      	blx	r5
    f884:	2800      	cmp	r0, #0
    f886:	d001      	beq.n	f88c <Initialize_Demo+0x68>
    if (invalidIEEEAddrFlag)
    f888:	2c00      	cmp	r4, #0
    f88a:	d108      	bne.n	f89e <Initialize_Demo+0x7a>
    f88c:	4c21      	ldr	r4, [pc, #132]	; (f914 <Initialize_Demo+0xf0>)
    f88e:	0026      	movs	r6, r4
    f890:	3608      	adds	r6, #8
            *peui64++ = (uint8_t)rand();
    f892:	4d22      	ldr	r5, [pc, #136]	; (f91c <Initialize_Demo+0xf8>)
    f894:	47a8      	blx	r5
    f896:	7020      	strb	r0, [r4, #0]
    f898:	3401      	adds	r4, #1
        for(uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    f89a:	42b4      	cmp	r4, r6
    f89c:	d1fa      	bne.n	f894 <Initialize_Demo+0x70>
    PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    f89e:	481d      	ldr	r0, [pc, #116]	; (f914 <Initialize_Demo+0xf0>)
    f8a0:	4b1f      	ldr	r3, [pc, #124]	; (f920 <Initialize_Demo+0xfc>)
    f8a2:	4798      	blx	r3
    /* Unable to boot from the Network Freezer parameters, so initiate connection */
    /* Check Valid address is found , else update with random */
    longAddressValidationAndUpdation();

    /* Enable all kinds of connection */
    MiApp_ConnectionMode(ENABLE_ALL_CONN);
    f8a4:	2000      	movs	r0, #0
    f8a6:	4b1f      	ldr	r3, [pc, #124]	; (f924 <Initialize_Demo+0x100>)
    f8a8:	4798      	blx	r3

    // Set default channel
    if( MiApp_Set(CHANNEL, &myChannel) == false )
    f8aa:	491f      	ldr	r1, [pc, #124]	; (f928 <Initialize_Demo+0x104>)
    f8ac:	2000      	movs	r0, #0
    f8ae:	4b1f      	ldr	r3, [pc, #124]	; (f92c <Initialize_Demo+0x108>)
    f8b0:	4798      	blx	r3
    f8b2:	2800      	cmp	r0, #0
    f8b4:	d004      	beq.n	f8c0 <Initialize_Demo+0x9c>
#ifndef MIWI_RN_CMD	//remove it	
    DemoOutput_Channel(myChannel, 0);
#endif //remove	

#ifdef MIWI_RN_CMD
	if(!manual_establish_network)
    f8b6:	4b1e      	ldr	r3, [pc, #120]	; (f930 <Initialize_Demo+0x10c>)
    f8b8:	781b      	ldrb	r3, [r3, #0]
    return MiApp_EstablishConnection(myChannel, 2, (uint8_t*)&broadcastAddr, 0, Connection_Confirm);
#ifdef MIWI_RN_CMD
	}
	else
	{
		return SUCCESS;
    f8ba:	2000      	movs	r0, #0
	if(!manual_establish_network)
    f8bc:	2b00      	cmp	r3, #0
    f8be:	d006      	beq.n	f8ce <Initialize_Demo+0xaa>
	}
#endif	
}
    f8c0:	b006      	add	sp, #24
    f8c2:	bd70      	pop	{r4, r5, r6, pc}
		RNCmd_SendStatusChange(1);		//reconnection success
    f8c4:	380e      	subs	r0, #14
    f8c6:	4b10      	ldr	r3, [pc, #64]	; (f908 <Initialize_Demo+0xe4>)
    f8c8:	4798      	blx	r3
        return true;
    f8ca:	2001      	movs	r0, #1
    f8cc:	e7f8      	b.n	f8c0 <Initialize_Demo+0x9c>
    return MiApp_EstablishConnection(myChannel, 2, (uint8_t*)&broadcastAddr, 0, Connection_Confirm);
    f8ce:	4b16      	ldr	r3, [pc, #88]	; (f928 <Initialize_Demo+0x104>)
    f8d0:	7818      	ldrb	r0, [r3, #0]
    f8d2:	4b18      	ldr	r3, [pc, #96]	; (f934 <Initialize_Demo+0x110>)
    f8d4:	9300      	str	r3, [sp, #0]
    f8d6:	2300      	movs	r3, #0
    f8d8:	2216      	movs	r2, #22
    f8da:	446a      	add	r2, sp
    f8dc:	2102      	movs	r1, #2
    f8de:	4c16      	ldr	r4, [pc, #88]	; (f938 <Initialize_Demo+0x114>)
    f8e0:	47a0      	blx	r4
    f8e2:	1e43      	subs	r3, r0, #1
    f8e4:	4198      	sbcs	r0, r3
    f8e6:	b2c0      	uxtb	r0, r0
    f8e8:	e7ea      	b.n	f8c0 <Initialize_Demo+0x9c>
    f8ea:	46c0      	nop			; (mov r8, r8)
    f8ec:	0000f78d 	.word	0x0000f78d
    f8f0:	0000ba79 	.word	0x0000ba79
    f8f4:	0000f7f5 	.word	0x0000f7f5
    f8f8:	0000cd8d 	.word	0x0000cd8d
    f8fc:	20000024 	.word	0x20000024
    f900:	20001cd4 	.word	0x20001cd4
    f904:	0000b775 	.word	0x0000b775
    f908:	0000f391 	.word	0x0000f391
    f90c:	0000b3b1 	.word	0x0000b3b1
    f910:	00011051 	.word	0x00011051
    f914:	20000010 	.word	0x20000010
    f918:	00010a79 	.word	0x00010a79
    f91c:	000110ad 	.word	0x000110ad
    f920:	0000b451 	.word	0x0000b451
    f924:	0000b961 	.word	0x0000b961
    f928:	20000034 	.word	0x20000034
    f92c:	0000b745 	.word	0x0000b745
    f930:	200023a8 	.word	0x200023a8
    f934:	0000f7a9 	.word	0x0000f7a9
    f938:	0000bdd5 	.word	0x0000bdd5

0000f93c <Run_Demo>:
* Function: void Run_Demo(void)
*
* Overview: runs the demo based on user input
********************************************************************/
void Run_Demo(void)
{
    f93c:	b510      	push	{r4, lr}
    P2PTasks();
    f93e:	4b03      	ldr	r3, [pc, #12]	; (f94c <Run_Demo+0x10>)
    f940:	4798      	blx	r3
#if defined(ENABLE_NETWORK_FREEZER)
#if PDS_ENABLE_WEAR_LEVELING
    PDS_TaskHandler();
    f942:	4b03      	ldr	r3, [pc, #12]	; (f950 <Run_Demo+0x14>)
    f944:	4798      	blx	r3
#endif
#endif
    run_star_demo();
    f946:	4b03      	ldr	r3, [pc, #12]	; (f954 <Run_Demo+0x18>)
    f948:	4798      	blx	r3
}
    f94a:	bd10      	pop	{r4, pc}
    f94c:	0000c3fd 	.word	0x0000c3fd
    f950:	0000a1e5 	.word	0x0000a1e5
    f954:	0000f789 	.word	0x0000f789

0000f958 <common_tc_read_count>:
    f958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f95a:	4b0d      	ldr	r3, [pc, #52]	; (f990 <common_tc_read_count+0x38>)
    f95c:	4798      	blx	r3
    f95e:	4b0d      	ldr	r3, [pc, #52]	; (f994 <common_tc_read_count+0x3c>)
    f960:	781b      	ldrb	r3, [r3, #0]
    f962:	2b00      	cmp	r3, #0
    f964:	d00e      	beq.n	f984 <common_tc_read_count+0x2c>
    f966:	4b0c      	ldr	r3, [pc, #48]	; (f998 <common_tc_read_count+0x40>)
    f968:	781d      	ldrb	r5, [r3, #0]
    f96a:	4b0a      	ldr	r3, [pc, #40]	; (f994 <common_tc_read_count+0x3c>)
    f96c:	781f      	ldrb	r7, [r3, #0]
    f96e:	4c0b      	ldr	r4, [pc, #44]	; (f99c <common_tc_read_count+0x44>)
    f970:	1c29      	adds	r1, r5, #0
    f972:	47a0      	blx	r4
    f974:	1c06      	adds	r6, r0, #0
    f976:	480a      	ldr	r0, [pc, #40]	; (f9a0 <common_tc_read_count+0x48>)
    f978:	1c29      	adds	r1, r5, #0
    f97a:	47a0      	blx	r4
    f97c:	4378      	muls	r0, r7
    f97e:	1830      	adds	r0, r6, r0
    f980:	b280      	uxth	r0, r0
    f982:	e004      	b.n	f98e <common_tc_read_count+0x36>
    f984:	4b04      	ldr	r3, [pc, #16]	; (f998 <common_tc_read_count+0x40>)
    f986:	7819      	ldrb	r1, [r3, #0]
    f988:	4b04      	ldr	r3, [pc, #16]	; (f99c <common_tc_read_count+0x44>)
    f98a:	4798      	blx	r3
    f98c:	b280      	uxth	r0, r0
    f98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f990:	0000d2d5 	.word	0x0000d2d5
    f994:	20001cd8 	.word	0x20001cd8
    f998:	200024f0 	.word	0x200024f0
    f99c:	0000fbc1 	.word	0x0000fbc1
    f9a0:	0000ffff 	.word	0x0000ffff

0000f9a4 <common_tc_delay>:
    f9a4:	b510      	push	{r4, lr}
    f9a6:	1c04      	adds	r4, r0, #0
    f9a8:	4b13      	ldr	r3, [pc, #76]	; (f9f8 <common_tc_delay+0x54>)
    f9aa:	4798      	blx	r3
    f9ac:	4b13      	ldr	r3, [pc, #76]	; (f9fc <common_tc_delay+0x58>)
    f9ae:	781a      	ldrb	r2, [r3, #0]
    f9b0:	4362      	muls	r2, r4
    f9b2:	1881      	adds	r1, r0, r2
    f9b4:	4b12      	ldr	r3, [pc, #72]	; (fa00 <common_tc_delay+0x5c>)
    f9b6:	6059      	str	r1, [r3, #4]
    f9b8:	6859      	ldr	r1, [r3, #4]
    f9ba:	0c09      	lsrs	r1, r1, #16
    f9bc:	6059      	str	r1, [r3, #4]
    f9be:	685b      	ldr	r3, [r3, #4]
    f9c0:	2b00      	cmp	r3, #0
    f9c2:	d007      	beq.n	f9d4 <common_tc_delay+0x30>
    f9c4:	4b0e      	ldr	r3, [pc, #56]	; (fa00 <common_tc_delay+0x5c>)
    f9c6:	6859      	ldr	r1, [r3, #4]
    f9c8:	3201      	adds	r2, #1
    f9ca:	1880      	adds	r0, r0, r2
    f9cc:	8118      	strh	r0, [r3, #8]
    f9ce:	4b0d      	ldr	r3, [pc, #52]	; (fa04 <common_tc_delay+0x60>)
    f9d0:	4798      	blx	r3
    f9d2:	e004      	b.n	f9de <common_tc_delay+0x3a>
    f9d4:	1882      	adds	r2, r0, r2
    f9d6:	4b0a      	ldr	r3, [pc, #40]	; (fa00 <common_tc_delay+0x5c>)
    f9d8:	811a      	strh	r2, [r3, #8]
    f9da:	4b0b      	ldr	r3, [pc, #44]	; (fa08 <common_tc_delay+0x64>)
    f9dc:	4798      	blx	r3
    f9de:	4b08      	ldr	r3, [pc, #32]	; (fa00 <common_tc_delay+0x5c>)
    f9e0:	891b      	ldrh	r3, [r3, #8]
    f9e2:	2b63      	cmp	r3, #99	; 0x63
    f9e4:	d802      	bhi.n	f9ec <common_tc_delay+0x48>
    f9e6:	3364      	adds	r3, #100	; 0x64
    f9e8:	4a05      	ldr	r2, [pc, #20]	; (fa00 <common_tc_delay+0x5c>)
    f9ea:	8113      	strh	r3, [r2, #8]
    f9ec:	4b04      	ldr	r3, [pc, #16]	; (fa00 <common_tc_delay+0x5c>)
    f9ee:	8918      	ldrh	r0, [r3, #8]
    f9f0:	4b06      	ldr	r3, [pc, #24]	; (fa0c <common_tc_delay+0x68>)
    f9f2:	4798      	blx	r3
    f9f4:	bd10      	pop	{r4, pc}
    f9f6:	46c0      	nop			; (mov r8, r8)
    f9f8:	0000d2d5 	.word	0x0000d2d5
    f9fc:	200024f0 	.word	0x200024f0
    fa00:	20001cd8 	.word	0x20001cd8
    fa04:	0000d2e9 	.word	0x0000d2e9
    fa08:	0000d2fd 	.word	0x0000d2fd
    fa0c:	0000d33d 	.word	0x0000d33d

0000fa10 <common_tc_init>:
    fa10:	b508      	push	{r3, lr}
    fa12:	2200      	movs	r2, #0
    fa14:	4b03      	ldr	r3, [pc, #12]	; (fa24 <common_tc_init+0x14>)
    fa16:	701a      	strb	r2, [r3, #0]
    fa18:	4b03      	ldr	r3, [pc, #12]	; (fa28 <common_tc_init+0x18>)
    fa1a:	4798      	blx	r3
    fa1c:	4b03      	ldr	r3, [pc, #12]	; (fa2c <common_tc_init+0x1c>)
    fa1e:	7018      	strb	r0, [r3, #0]
    fa20:	bd08      	pop	{r3, pc}
    fa22:	46c0      	nop			; (mov r8, r8)
    fa24:	20001cd8 	.word	0x20001cd8
    fa28:	0000d355 	.word	0x0000d355
    fa2c:	200024f0 	.word	0x200024f0

0000fa30 <tmr_ovf_callback>:
    fa30:	b508      	push	{r3, lr}
    fa32:	4b0e      	ldr	r3, [pc, #56]	; (fa6c <tmr_ovf_callback+0x3c>)
    fa34:	685b      	ldr	r3, [r3, #4]
    fa36:	2b00      	cmp	r3, #0
    fa38:	d007      	beq.n	fa4a <tmr_ovf_callback+0x1a>
    fa3a:	4a0c      	ldr	r2, [pc, #48]	; (fa6c <tmr_ovf_callback+0x3c>)
    fa3c:	6853      	ldr	r3, [r2, #4]
    fa3e:	3b01      	subs	r3, #1
    fa40:	6053      	str	r3, [r2, #4]
    fa42:	2b00      	cmp	r3, #0
    fa44:	d101      	bne.n	fa4a <tmr_ovf_callback+0x1a>
    fa46:	4b0a      	ldr	r3, [pc, #40]	; (fa70 <tmr_ovf_callback+0x40>)
    fa48:	4798      	blx	r3
    fa4a:	4a08      	ldr	r2, [pc, #32]	; (fa6c <tmr_ovf_callback+0x3c>)
    fa4c:	7813      	ldrb	r3, [r2, #0]
    fa4e:	3301      	adds	r3, #1
    fa50:	b2db      	uxtb	r3, r3
    fa52:	7013      	strb	r3, [r2, #0]
    fa54:	4a07      	ldr	r2, [pc, #28]	; (fa74 <tmr_ovf_callback+0x44>)
    fa56:	7812      	ldrb	r2, [r2, #0]
    fa58:	429a      	cmp	r2, r3
    fa5a:	d806      	bhi.n	fa6a <tmr_ovf_callback+0x3a>
    fa5c:	4b03      	ldr	r3, [pc, #12]	; (fa6c <tmr_ovf_callback+0x3c>)
    fa5e:	2200      	movs	r2, #0
    fa60:	701a      	strb	r2, [r3, #0]
    fa62:	68db      	ldr	r3, [r3, #12]
    fa64:	2b00      	cmp	r3, #0
    fa66:	d000      	beq.n	fa6a <tmr_ovf_callback+0x3a>
    fa68:	4798      	blx	r3
    fa6a:	bd08      	pop	{r3, pc}
    fa6c:	20001cd8 	.word	0x20001cd8
    fa70:	0000d2fd 	.word	0x0000d2fd
    fa74:	200024f0 	.word	0x200024f0

0000fa78 <tmr_cca_callback>:
    fa78:	b508      	push	{r3, lr}
    fa7a:	4b04      	ldr	r3, [pc, #16]	; (fa8c <tmr_cca_callback+0x14>)
    fa7c:	4798      	blx	r3
    fa7e:	4b04      	ldr	r3, [pc, #16]	; (fa90 <tmr_cca_callback+0x18>)
    fa80:	691b      	ldr	r3, [r3, #16]
    fa82:	2b00      	cmp	r3, #0
    fa84:	d000      	beq.n	fa88 <tmr_cca_callback+0x10>
    fa86:	4798      	blx	r3
    fa88:	bd08      	pop	{r3, pc}
    fa8a:	46c0      	nop			; (mov r8, r8)
    fa8c:	0000d2e9 	.word	0x0000d2e9
    fa90:	20001cd8 	.word	0x20001cd8

0000fa94 <set_common_tc_overflow_callback>:
    fa94:	4b01      	ldr	r3, [pc, #4]	; (fa9c <set_common_tc_overflow_callback+0x8>)
    fa96:	60d8      	str	r0, [r3, #12]
    fa98:	4770      	bx	lr
    fa9a:	46c0      	nop			; (mov r8, r8)
    fa9c:	20001cd8 	.word	0x20001cd8

0000faa0 <set_common_tc_expiry_callback>:
    faa0:	4b01      	ldr	r3, [pc, #4]	; (faa8 <set_common_tc_expiry_callback+0x8>)
    faa2:	6118      	str	r0, [r3, #16]
    faa4:	4770      	bx	lr
    faa6:	46c0      	nop			; (mov r8, r8)
    faa8:	20001cd8 	.word	0x20001cd8

0000faac <__udivsi3>:
    faac:	2200      	movs	r2, #0
    faae:	0843      	lsrs	r3, r0, #1
    fab0:	428b      	cmp	r3, r1
    fab2:	d374      	bcc.n	fb9e <__udivsi3+0xf2>
    fab4:	0903      	lsrs	r3, r0, #4
    fab6:	428b      	cmp	r3, r1
    fab8:	d35f      	bcc.n	fb7a <__udivsi3+0xce>
    faba:	0a03      	lsrs	r3, r0, #8
    fabc:	428b      	cmp	r3, r1
    fabe:	d344      	bcc.n	fb4a <__udivsi3+0x9e>
    fac0:	0b03      	lsrs	r3, r0, #12
    fac2:	428b      	cmp	r3, r1
    fac4:	d328      	bcc.n	fb18 <__udivsi3+0x6c>
    fac6:	0c03      	lsrs	r3, r0, #16
    fac8:	428b      	cmp	r3, r1
    faca:	d30d      	bcc.n	fae8 <__udivsi3+0x3c>
    facc:	22ff      	movs	r2, #255	; 0xff
    face:	0209      	lsls	r1, r1, #8
    fad0:	ba12      	rev	r2, r2
    fad2:	0c03      	lsrs	r3, r0, #16
    fad4:	428b      	cmp	r3, r1
    fad6:	d302      	bcc.n	fade <__udivsi3+0x32>
    fad8:	1212      	asrs	r2, r2, #8
    fada:	0209      	lsls	r1, r1, #8
    fadc:	d065      	beq.n	fbaa <__udivsi3+0xfe>
    fade:	0b03      	lsrs	r3, r0, #12
    fae0:	428b      	cmp	r3, r1
    fae2:	d319      	bcc.n	fb18 <__udivsi3+0x6c>
    fae4:	e000      	b.n	fae8 <__udivsi3+0x3c>
    fae6:	0a09      	lsrs	r1, r1, #8
    fae8:	0bc3      	lsrs	r3, r0, #15
    faea:	428b      	cmp	r3, r1
    faec:	d301      	bcc.n	faf2 <__udivsi3+0x46>
    faee:	03cb      	lsls	r3, r1, #15
    faf0:	1ac0      	subs	r0, r0, r3
    faf2:	4152      	adcs	r2, r2
    faf4:	0b83      	lsrs	r3, r0, #14
    faf6:	428b      	cmp	r3, r1
    faf8:	d301      	bcc.n	fafe <__udivsi3+0x52>
    fafa:	038b      	lsls	r3, r1, #14
    fafc:	1ac0      	subs	r0, r0, r3
    fafe:	4152      	adcs	r2, r2
    fb00:	0b43      	lsrs	r3, r0, #13
    fb02:	428b      	cmp	r3, r1
    fb04:	d301      	bcc.n	fb0a <__udivsi3+0x5e>
    fb06:	034b      	lsls	r3, r1, #13
    fb08:	1ac0      	subs	r0, r0, r3
    fb0a:	4152      	adcs	r2, r2
    fb0c:	0b03      	lsrs	r3, r0, #12
    fb0e:	428b      	cmp	r3, r1
    fb10:	d301      	bcc.n	fb16 <__udivsi3+0x6a>
    fb12:	030b      	lsls	r3, r1, #12
    fb14:	1ac0      	subs	r0, r0, r3
    fb16:	4152      	adcs	r2, r2
    fb18:	0ac3      	lsrs	r3, r0, #11
    fb1a:	428b      	cmp	r3, r1
    fb1c:	d301      	bcc.n	fb22 <__udivsi3+0x76>
    fb1e:	02cb      	lsls	r3, r1, #11
    fb20:	1ac0      	subs	r0, r0, r3
    fb22:	4152      	adcs	r2, r2
    fb24:	0a83      	lsrs	r3, r0, #10
    fb26:	428b      	cmp	r3, r1
    fb28:	d301      	bcc.n	fb2e <__udivsi3+0x82>
    fb2a:	028b      	lsls	r3, r1, #10
    fb2c:	1ac0      	subs	r0, r0, r3
    fb2e:	4152      	adcs	r2, r2
    fb30:	0a43      	lsrs	r3, r0, #9
    fb32:	428b      	cmp	r3, r1
    fb34:	d301      	bcc.n	fb3a <__udivsi3+0x8e>
    fb36:	024b      	lsls	r3, r1, #9
    fb38:	1ac0      	subs	r0, r0, r3
    fb3a:	4152      	adcs	r2, r2
    fb3c:	0a03      	lsrs	r3, r0, #8
    fb3e:	428b      	cmp	r3, r1
    fb40:	d301      	bcc.n	fb46 <__udivsi3+0x9a>
    fb42:	020b      	lsls	r3, r1, #8
    fb44:	1ac0      	subs	r0, r0, r3
    fb46:	4152      	adcs	r2, r2
    fb48:	d2cd      	bcs.n	fae6 <__udivsi3+0x3a>
    fb4a:	09c3      	lsrs	r3, r0, #7
    fb4c:	428b      	cmp	r3, r1
    fb4e:	d301      	bcc.n	fb54 <__udivsi3+0xa8>
    fb50:	01cb      	lsls	r3, r1, #7
    fb52:	1ac0      	subs	r0, r0, r3
    fb54:	4152      	adcs	r2, r2
    fb56:	0983      	lsrs	r3, r0, #6
    fb58:	428b      	cmp	r3, r1
    fb5a:	d301      	bcc.n	fb60 <__udivsi3+0xb4>
    fb5c:	018b      	lsls	r3, r1, #6
    fb5e:	1ac0      	subs	r0, r0, r3
    fb60:	4152      	adcs	r2, r2
    fb62:	0943      	lsrs	r3, r0, #5
    fb64:	428b      	cmp	r3, r1
    fb66:	d301      	bcc.n	fb6c <__udivsi3+0xc0>
    fb68:	014b      	lsls	r3, r1, #5
    fb6a:	1ac0      	subs	r0, r0, r3
    fb6c:	4152      	adcs	r2, r2
    fb6e:	0903      	lsrs	r3, r0, #4
    fb70:	428b      	cmp	r3, r1
    fb72:	d301      	bcc.n	fb78 <__udivsi3+0xcc>
    fb74:	010b      	lsls	r3, r1, #4
    fb76:	1ac0      	subs	r0, r0, r3
    fb78:	4152      	adcs	r2, r2
    fb7a:	08c3      	lsrs	r3, r0, #3
    fb7c:	428b      	cmp	r3, r1
    fb7e:	d301      	bcc.n	fb84 <__udivsi3+0xd8>
    fb80:	00cb      	lsls	r3, r1, #3
    fb82:	1ac0      	subs	r0, r0, r3
    fb84:	4152      	adcs	r2, r2
    fb86:	0883      	lsrs	r3, r0, #2
    fb88:	428b      	cmp	r3, r1
    fb8a:	d301      	bcc.n	fb90 <__udivsi3+0xe4>
    fb8c:	008b      	lsls	r3, r1, #2
    fb8e:	1ac0      	subs	r0, r0, r3
    fb90:	4152      	adcs	r2, r2
    fb92:	0843      	lsrs	r3, r0, #1
    fb94:	428b      	cmp	r3, r1
    fb96:	d301      	bcc.n	fb9c <__udivsi3+0xf0>
    fb98:	004b      	lsls	r3, r1, #1
    fb9a:	1ac0      	subs	r0, r0, r3
    fb9c:	4152      	adcs	r2, r2
    fb9e:	1a41      	subs	r1, r0, r1
    fba0:	d200      	bcs.n	fba4 <__udivsi3+0xf8>
    fba2:	4601      	mov	r1, r0
    fba4:	4152      	adcs	r2, r2
    fba6:	4610      	mov	r0, r2
    fba8:	4770      	bx	lr
    fbaa:	e7ff      	b.n	fbac <__udivsi3+0x100>
    fbac:	b501      	push	{r0, lr}
    fbae:	2000      	movs	r0, #0
    fbb0:	f000 f8f0 	bl	fd94 <__aeabi_idiv0>
    fbb4:	bd02      	pop	{r1, pc}
    fbb6:	46c0      	nop			; (mov r8, r8)

0000fbb8 <__aeabi_uidivmod>:
    fbb8:	2900      	cmp	r1, #0
    fbba:	d0f7      	beq.n	fbac <__udivsi3+0x100>
    fbbc:	e776      	b.n	faac <__udivsi3>
    fbbe:	4770      	bx	lr

0000fbc0 <__divsi3>:
    fbc0:	4603      	mov	r3, r0
    fbc2:	430b      	orrs	r3, r1
    fbc4:	d47f      	bmi.n	fcc6 <__divsi3+0x106>
    fbc6:	2200      	movs	r2, #0
    fbc8:	0843      	lsrs	r3, r0, #1
    fbca:	428b      	cmp	r3, r1
    fbcc:	d374      	bcc.n	fcb8 <__divsi3+0xf8>
    fbce:	0903      	lsrs	r3, r0, #4
    fbd0:	428b      	cmp	r3, r1
    fbd2:	d35f      	bcc.n	fc94 <__divsi3+0xd4>
    fbd4:	0a03      	lsrs	r3, r0, #8
    fbd6:	428b      	cmp	r3, r1
    fbd8:	d344      	bcc.n	fc64 <__divsi3+0xa4>
    fbda:	0b03      	lsrs	r3, r0, #12
    fbdc:	428b      	cmp	r3, r1
    fbde:	d328      	bcc.n	fc32 <__divsi3+0x72>
    fbe0:	0c03      	lsrs	r3, r0, #16
    fbe2:	428b      	cmp	r3, r1
    fbe4:	d30d      	bcc.n	fc02 <__divsi3+0x42>
    fbe6:	22ff      	movs	r2, #255	; 0xff
    fbe8:	0209      	lsls	r1, r1, #8
    fbea:	ba12      	rev	r2, r2
    fbec:	0c03      	lsrs	r3, r0, #16
    fbee:	428b      	cmp	r3, r1
    fbf0:	d302      	bcc.n	fbf8 <__divsi3+0x38>
    fbf2:	1212      	asrs	r2, r2, #8
    fbf4:	0209      	lsls	r1, r1, #8
    fbf6:	d065      	beq.n	fcc4 <__divsi3+0x104>
    fbf8:	0b03      	lsrs	r3, r0, #12
    fbfa:	428b      	cmp	r3, r1
    fbfc:	d319      	bcc.n	fc32 <__divsi3+0x72>
    fbfe:	e000      	b.n	fc02 <__divsi3+0x42>
    fc00:	0a09      	lsrs	r1, r1, #8
    fc02:	0bc3      	lsrs	r3, r0, #15
    fc04:	428b      	cmp	r3, r1
    fc06:	d301      	bcc.n	fc0c <__divsi3+0x4c>
    fc08:	03cb      	lsls	r3, r1, #15
    fc0a:	1ac0      	subs	r0, r0, r3
    fc0c:	4152      	adcs	r2, r2
    fc0e:	0b83      	lsrs	r3, r0, #14
    fc10:	428b      	cmp	r3, r1
    fc12:	d301      	bcc.n	fc18 <__divsi3+0x58>
    fc14:	038b      	lsls	r3, r1, #14
    fc16:	1ac0      	subs	r0, r0, r3
    fc18:	4152      	adcs	r2, r2
    fc1a:	0b43      	lsrs	r3, r0, #13
    fc1c:	428b      	cmp	r3, r1
    fc1e:	d301      	bcc.n	fc24 <__divsi3+0x64>
    fc20:	034b      	lsls	r3, r1, #13
    fc22:	1ac0      	subs	r0, r0, r3
    fc24:	4152      	adcs	r2, r2
    fc26:	0b03      	lsrs	r3, r0, #12
    fc28:	428b      	cmp	r3, r1
    fc2a:	d301      	bcc.n	fc30 <__divsi3+0x70>
    fc2c:	030b      	lsls	r3, r1, #12
    fc2e:	1ac0      	subs	r0, r0, r3
    fc30:	4152      	adcs	r2, r2
    fc32:	0ac3      	lsrs	r3, r0, #11
    fc34:	428b      	cmp	r3, r1
    fc36:	d301      	bcc.n	fc3c <__divsi3+0x7c>
    fc38:	02cb      	lsls	r3, r1, #11
    fc3a:	1ac0      	subs	r0, r0, r3
    fc3c:	4152      	adcs	r2, r2
    fc3e:	0a83      	lsrs	r3, r0, #10
    fc40:	428b      	cmp	r3, r1
    fc42:	d301      	bcc.n	fc48 <__divsi3+0x88>
    fc44:	028b      	lsls	r3, r1, #10
    fc46:	1ac0      	subs	r0, r0, r3
    fc48:	4152      	adcs	r2, r2
    fc4a:	0a43      	lsrs	r3, r0, #9
    fc4c:	428b      	cmp	r3, r1
    fc4e:	d301      	bcc.n	fc54 <__divsi3+0x94>
    fc50:	024b      	lsls	r3, r1, #9
    fc52:	1ac0      	subs	r0, r0, r3
    fc54:	4152      	adcs	r2, r2
    fc56:	0a03      	lsrs	r3, r0, #8
    fc58:	428b      	cmp	r3, r1
    fc5a:	d301      	bcc.n	fc60 <__divsi3+0xa0>
    fc5c:	020b      	lsls	r3, r1, #8
    fc5e:	1ac0      	subs	r0, r0, r3
    fc60:	4152      	adcs	r2, r2
    fc62:	d2cd      	bcs.n	fc00 <__divsi3+0x40>
    fc64:	09c3      	lsrs	r3, r0, #7
    fc66:	428b      	cmp	r3, r1
    fc68:	d301      	bcc.n	fc6e <__divsi3+0xae>
    fc6a:	01cb      	lsls	r3, r1, #7
    fc6c:	1ac0      	subs	r0, r0, r3
    fc6e:	4152      	adcs	r2, r2
    fc70:	0983      	lsrs	r3, r0, #6
    fc72:	428b      	cmp	r3, r1
    fc74:	d301      	bcc.n	fc7a <__divsi3+0xba>
    fc76:	018b      	lsls	r3, r1, #6
    fc78:	1ac0      	subs	r0, r0, r3
    fc7a:	4152      	adcs	r2, r2
    fc7c:	0943      	lsrs	r3, r0, #5
    fc7e:	428b      	cmp	r3, r1
    fc80:	d301      	bcc.n	fc86 <__divsi3+0xc6>
    fc82:	014b      	lsls	r3, r1, #5
    fc84:	1ac0      	subs	r0, r0, r3
    fc86:	4152      	adcs	r2, r2
    fc88:	0903      	lsrs	r3, r0, #4
    fc8a:	428b      	cmp	r3, r1
    fc8c:	d301      	bcc.n	fc92 <__divsi3+0xd2>
    fc8e:	010b      	lsls	r3, r1, #4
    fc90:	1ac0      	subs	r0, r0, r3
    fc92:	4152      	adcs	r2, r2
    fc94:	08c3      	lsrs	r3, r0, #3
    fc96:	428b      	cmp	r3, r1
    fc98:	d301      	bcc.n	fc9e <__divsi3+0xde>
    fc9a:	00cb      	lsls	r3, r1, #3
    fc9c:	1ac0      	subs	r0, r0, r3
    fc9e:	4152      	adcs	r2, r2
    fca0:	0883      	lsrs	r3, r0, #2
    fca2:	428b      	cmp	r3, r1
    fca4:	d301      	bcc.n	fcaa <__divsi3+0xea>
    fca6:	008b      	lsls	r3, r1, #2
    fca8:	1ac0      	subs	r0, r0, r3
    fcaa:	4152      	adcs	r2, r2
    fcac:	0843      	lsrs	r3, r0, #1
    fcae:	428b      	cmp	r3, r1
    fcb0:	d301      	bcc.n	fcb6 <__divsi3+0xf6>
    fcb2:	004b      	lsls	r3, r1, #1
    fcb4:	1ac0      	subs	r0, r0, r3
    fcb6:	4152      	adcs	r2, r2
    fcb8:	1a41      	subs	r1, r0, r1
    fcba:	d200      	bcs.n	fcbe <__divsi3+0xfe>
    fcbc:	4601      	mov	r1, r0
    fcbe:	4152      	adcs	r2, r2
    fcc0:	4610      	mov	r0, r2
    fcc2:	4770      	bx	lr
    fcc4:	e05d      	b.n	fd82 <__divsi3+0x1c2>
    fcc6:	0fca      	lsrs	r2, r1, #31
    fcc8:	d000      	beq.n	fccc <__divsi3+0x10c>
    fcca:	4249      	negs	r1, r1
    fccc:	1003      	asrs	r3, r0, #32
    fcce:	d300      	bcc.n	fcd2 <__divsi3+0x112>
    fcd0:	4240      	negs	r0, r0
    fcd2:	4053      	eors	r3, r2
    fcd4:	2200      	movs	r2, #0
    fcd6:	469c      	mov	ip, r3
    fcd8:	0903      	lsrs	r3, r0, #4
    fcda:	428b      	cmp	r3, r1
    fcdc:	d32d      	bcc.n	fd3a <__divsi3+0x17a>
    fcde:	0a03      	lsrs	r3, r0, #8
    fce0:	428b      	cmp	r3, r1
    fce2:	d312      	bcc.n	fd0a <__divsi3+0x14a>
    fce4:	22fc      	movs	r2, #252	; 0xfc
    fce6:	0189      	lsls	r1, r1, #6
    fce8:	ba12      	rev	r2, r2
    fcea:	0a03      	lsrs	r3, r0, #8
    fcec:	428b      	cmp	r3, r1
    fcee:	d30c      	bcc.n	fd0a <__divsi3+0x14a>
    fcf0:	0189      	lsls	r1, r1, #6
    fcf2:	1192      	asrs	r2, r2, #6
    fcf4:	428b      	cmp	r3, r1
    fcf6:	d308      	bcc.n	fd0a <__divsi3+0x14a>
    fcf8:	0189      	lsls	r1, r1, #6
    fcfa:	1192      	asrs	r2, r2, #6
    fcfc:	428b      	cmp	r3, r1
    fcfe:	d304      	bcc.n	fd0a <__divsi3+0x14a>
    fd00:	0189      	lsls	r1, r1, #6
    fd02:	d03a      	beq.n	fd7a <__divsi3+0x1ba>
    fd04:	1192      	asrs	r2, r2, #6
    fd06:	e000      	b.n	fd0a <__divsi3+0x14a>
    fd08:	0989      	lsrs	r1, r1, #6
    fd0a:	09c3      	lsrs	r3, r0, #7
    fd0c:	428b      	cmp	r3, r1
    fd0e:	d301      	bcc.n	fd14 <__divsi3+0x154>
    fd10:	01cb      	lsls	r3, r1, #7
    fd12:	1ac0      	subs	r0, r0, r3
    fd14:	4152      	adcs	r2, r2
    fd16:	0983      	lsrs	r3, r0, #6
    fd18:	428b      	cmp	r3, r1
    fd1a:	d301      	bcc.n	fd20 <__divsi3+0x160>
    fd1c:	018b      	lsls	r3, r1, #6
    fd1e:	1ac0      	subs	r0, r0, r3
    fd20:	4152      	adcs	r2, r2
    fd22:	0943      	lsrs	r3, r0, #5
    fd24:	428b      	cmp	r3, r1
    fd26:	d301      	bcc.n	fd2c <__divsi3+0x16c>
    fd28:	014b      	lsls	r3, r1, #5
    fd2a:	1ac0      	subs	r0, r0, r3
    fd2c:	4152      	adcs	r2, r2
    fd2e:	0903      	lsrs	r3, r0, #4
    fd30:	428b      	cmp	r3, r1
    fd32:	d301      	bcc.n	fd38 <__divsi3+0x178>
    fd34:	010b      	lsls	r3, r1, #4
    fd36:	1ac0      	subs	r0, r0, r3
    fd38:	4152      	adcs	r2, r2
    fd3a:	08c3      	lsrs	r3, r0, #3
    fd3c:	428b      	cmp	r3, r1
    fd3e:	d301      	bcc.n	fd44 <__divsi3+0x184>
    fd40:	00cb      	lsls	r3, r1, #3
    fd42:	1ac0      	subs	r0, r0, r3
    fd44:	4152      	adcs	r2, r2
    fd46:	0883      	lsrs	r3, r0, #2
    fd48:	428b      	cmp	r3, r1
    fd4a:	d301      	bcc.n	fd50 <__divsi3+0x190>
    fd4c:	008b      	lsls	r3, r1, #2
    fd4e:	1ac0      	subs	r0, r0, r3
    fd50:	4152      	adcs	r2, r2
    fd52:	d2d9      	bcs.n	fd08 <__divsi3+0x148>
    fd54:	0843      	lsrs	r3, r0, #1
    fd56:	428b      	cmp	r3, r1
    fd58:	d301      	bcc.n	fd5e <__divsi3+0x19e>
    fd5a:	004b      	lsls	r3, r1, #1
    fd5c:	1ac0      	subs	r0, r0, r3
    fd5e:	4152      	adcs	r2, r2
    fd60:	1a41      	subs	r1, r0, r1
    fd62:	d200      	bcs.n	fd66 <__divsi3+0x1a6>
    fd64:	4601      	mov	r1, r0
    fd66:	4663      	mov	r3, ip
    fd68:	4152      	adcs	r2, r2
    fd6a:	105b      	asrs	r3, r3, #1
    fd6c:	4610      	mov	r0, r2
    fd6e:	d301      	bcc.n	fd74 <__divsi3+0x1b4>
    fd70:	4240      	negs	r0, r0
    fd72:	2b00      	cmp	r3, #0
    fd74:	d500      	bpl.n	fd78 <__divsi3+0x1b8>
    fd76:	4249      	negs	r1, r1
    fd78:	4770      	bx	lr
    fd7a:	4663      	mov	r3, ip
    fd7c:	105b      	asrs	r3, r3, #1
    fd7e:	d300      	bcc.n	fd82 <__divsi3+0x1c2>
    fd80:	4240      	negs	r0, r0
    fd82:	b501      	push	{r0, lr}
    fd84:	2000      	movs	r0, #0
    fd86:	f000 f805 	bl	fd94 <__aeabi_idiv0>
    fd8a:	bd02      	pop	{r1, pc}

0000fd8c <__aeabi_idivmod>:
    fd8c:	2900      	cmp	r1, #0
    fd8e:	d0f8      	beq.n	fd82 <__divsi3+0x1c2>
    fd90:	e716      	b.n	fbc0 <__divsi3>
    fd92:	4770      	bx	lr

0000fd94 <__aeabi_idiv0>:
    fd94:	4770      	bx	lr
    fd96:	46c0      	nop			; (mov r8, r8)

0000fd98 <__aeabi_cfrcmple>:
    fd98:	4684      	mov	ip, r0
    fd9a:	1c08      	adds	r0, r1, #0
    fd9c:	4661      	mov	r1, ip
    fd9e:	e7ff      	b.n	fda0 <__aeabi_cfcmpeq>

0000fda0 <__aeabi_cfcmpeq>:
    fda0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    fda2:	f000 fbb5 	bl	10510 <__lesf2>
    fda6:	2800      	cmp	r0, #0
    fda8:	d401      	bmi.n	fdae <__aeabi_cfcmpeq+0xe>
    fdaa:	2100      	movs	r1, #0
    fdac:	42c8      	cmn	r0, r1
    fdae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000fdb0 <__aeabi_fcmpeq>:
    fdb0:	b510      	push	{r4, lr}
    fdb2:	f000 fb47 	bl	10444 <__eqsf2>
    fdb6:	4240      	negs	r0, r0
    fdb8:	3001      	adds	r0, #1
    fdba:	bd10      	pop	{r4, pc}

0000fdbc <__aeabi_fcmplt>:
    fdbc:	b510      	push	{r4, lr}
    fdbe:	f000 fba7 	bl	10510 <__lesf2>
    fdc2:	2800      	cmp	r0, #0
    fdc4:	db01      	blt.n	fdca <__aeabi_fcmplt+0xe>
    fdc6:	2000      	movs	r0, #0
    fdc8:	bd10      	pop	{r4, pc}
    fdca:	2001      	movs	r0, #1
    fdcc:	bd10      	pop	{r4, pc}
    fdce:	46c0      	nop			; (mov r8, r8)

0000fdd0 <__aeabi_fcmple>:
    fdd0:	b510      	push	{r4, lr}
    fdd2:	f000 fb9d 	bl	10510 <__lesf2>
    fdd6:	2800      	cmp	r0, #0
    fdd8:	dd01      	ble.n	fdde <__aeabi_fcmple+0xe>
    fdda:	2000      	movs	r0, #0
    fddc:	bd10      	pop	{r4, pc}
    fdde:	2001      	movs	r0, #1
    fde0:	bd10      	pop	{r4, pc}
    fde2:	46c0      	nop			; (mov r8, r8)

0000fde4 <__aeabi_fcmpgt>:
    fde4:	b510      	push	{r4, lr}
    fde6:	f000 fb53 	bl	10490 <__gesf2>
    fdea:	2800      	cmp	r0, #0
    fdec:	dc01      	bgt.n	fdf2 <__aeabi_fcmpgt+0xe>
    fdee:	2000      	movs	r0, #0
    fdf0:	bd10      	pop	{r4, pc}
    fdf2:	2001      	movs	r0, #1
    fdf4:	bd10      	pop	{r4, pc}
    fdf6:	46c0      	nop			; (mov r8, r8)

0000fdf8 <__aeabi_fcmpge>:
    fdf8:	b510      	push	{r4, lr}
    fdfa:	f000 fb49 	bl	10490 <__gesf2>
    fdfe:	2800      	cmp	r0, #0
    fe00:	da01      	bge.n	fe06 <__aeabi_fcmpge+0xe>
    fe02:	2000      	movs	r0, #0
    fe04:	bd10      	pop	{r4, pc}
    fe06:	2001      	movs	r0, #1
    fe08:	bd10      	pop	{r4, pc}
    fe0a:	46c0      	nop			; (mov r8, r8)

0000fe0c <__aeabi_lmul>:
    fe0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe0e:	46ce      	mov	lr, r9
    fe10:	4647      	mov	r7, r8
    fe12:	0415      	lsls	r5, r2, #16
    fe14:	0c2d      	lsrs	r5, r5, #16
    fe16:	002e      	movs	r6, r5
    fe18:	b580      	push	{r7, lr}
    fe1a:	0407      	lsls	r7, r0, #16
    fe1c:	0c14      	lsrs	r4, r2, #16
    fe1e:	0c3f      	lsrs	r7, r7, #16
    fe20:	4699      	mov	r9, r3
    fe22:	0c03      	lsrs	r3, r0, #16
    fe24:	437e      	muls	r6, r7
    fe26:	435d      	muls	r5, r3
    fe28:	4367      	muls	r7, r4
    fe2a:	4363      	muls	r3, r4
    fe2c:	197f      	adds	r7, r7, r5
    fe2e:	0c34      	lsrs	r4, r6, #16
    fe30:	19e4      	adds	r4, r4, r7
    fe32:	469c      	mov	ip, r3
    fe34:	42a5      	cmp	r5, r4
    fe36:	d903      	bls.n	fe40 <__aeabi_lmul+0x34>
    fe38:	2380      	movs	r3, #128	; 0x80
    fe3a:	025b      	lsls	r3, r3, #9
    fe3c:	4698      	mov	r8, r3
    fe3e:	44c4      	add	ip, r8
    fe40:	464b      	mov	r3, r9
    fe42:	4351      	muls	r1, r2
    fe44:	4343      	muls	r3, r0
    fe46:	0436      	lsls	r6, r6, #16
    fe48:	0c36      	lsrs	r6, r6, #16
    fe4a:	0c25      	lsrs	r5, r4, #16
    fe4c:	0424      	lsls	r4, r4, #16
    fe4e:	4465      	add	r5, ip
    fe50:	19a4      	adds	r4, r4, r6
    fe52:	1859      	adds	r1, r3, r1
    fe54:	1949      	adds	r1, r1, r5
    fe56:	0020      	movs	r0, r4
    fe58:	bc0c      	pop	{r2, r3}
    fe5a:	4690      	mov	r8, r2
    fe5c:	4699      	mov	r9, r3
    fe5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000fe60 <__aeabi_f2uiz>:
    fe60:	219e      	movs	r1, #158	; 0x9e
    fe62:	b510      	push	{r4, lr}
    fe64:	05c9      	lsls	r1, r1, #23
    fe66:	1c04      	adds	r4, r0, #0
    fe68:	f7ff ffc6 	bl	fdf8 <__aeabi_fcmpge>
    fe6c:	2800      	cmp	r0, #0
    fe6e:	d103      	bne.n	fe78 <__aeabi_f2uiz+0x18>
    fe70:	1c20      	adds	r0, r4, #0
    fe72:	f000 fd2b 	bl	108cc <__aeabi_f2iz>
    fe76:	bd10      	pop	{r4, pc}
    fe78:	219e      	movs	r1, #158	; 0x9e
    fe7a:	1c20      	adds	r0, r4, #0
    fe7c:	05c9      	lsls	r1, r1, #23
    fe7e:	f000 fb89 	bl	10594 <__aeabi_fsub>
    fe82:	f000 fd23 	bl	108cc <__aeabi_f2iz>
    fe86:	2380      	movs	r3, #128	; 0x80
    fe88:	061b      	lsls	r3, r3, #24
    fe8a:	469c      	mov	ip, r3
    fe8c:	4460      	add	r0, ip
    fe8e:	e7f2      	b.n	fe76 <__aeabi_f2uiz+0x16>

0000fe90 <__aeabi_fadd>:
    fe90:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe92:	46c6      	mov	lr, r8
    fe94:	024e      	lsls	r6, r1, #9
    fe96:	0247      	lsls	r7, r0, #9
    fe98:	0a76      	lsrs	r6, r6, #9
    fe9a:	0a7b      	lsrs	r3, r7, #9
    fe9c:	0044      	lsls	r4, r0, #1
    fe9e:	0fc5      	lsrs	r5, r0, #31
    fea0:	00f7      	lsls	r7, r6, #3
    fea2:	0048      	lsls	r0, r1, #1
    fea4:	4698      	mov	r8, r3
    fea6:	b500      	push	{lr}
    fea8:	0e24      	lsrs	r4, r4, #24
    feaa:	002a      	movs	r2, r5
    feac:	00db      	lsls	r3, r3, #3
    feae:	0e00      	lsrs	r0, r0, #24
    feb0:	0fc9      	lsrs	r1, r1, #31
    feb2:	46bc      	mov	ip, r7
    feb4:	428d      	cmp	r5, r1
    feb6:	d067      	beq.n	ff88 <__aeabi_fadd+0xf8>
    feb8:	1a22      	subs	r2, r4, r0
    feba:	2a00      	cmp	r2, #0
    febc:	dc00      	bgt.n	fec0 <__aeabi_fadd+0x30>
    febe:	e0a5      	b.n	1000c <__aeabi_fadd+0x17c>
    fec0:	2800      	cmp	r0, #0
    fec2:	d13a      	bne.n	ff3a <__aeabi_fadd+0xaa>
    fec4:	2f00      	cmp	r7, #0
    fec6:	d100      	bne.n	feca <__aeabi_fadd+0x3a>
    fec8:	e093      	b.n	fff2 <__aeabi_fadd+0x162>
    feca:	1e51      	subs	r1, r2, #1
    fecc:	2900      	cmp	r1, #0
    fece:	d000      	beq.n	fed2 <__aeabi_fadd+0x42>
    fed0:	e0bc      	b.n	1004c <__aeabi_fadd+0x1bc>
    fed2:	2401      	movs	r4, #1
    fed4:	1bdb      	subs	r3, r3, r7
    fed6:	015a      	lsls	r2, r3, #5
    fed8:	d546      	bpl.n	ff68 <__aeabi_fadd+0xd8>
    feda:	019b      	lsls	r3, r3, #6
    fedc:	099e      	lsrs	r6, r3, #6
    fede:	0030      	movs	r0, r6
    fee0:	f000 fd5a 	bl	10998 <__clzsi2>
    fee4:	3805      	subs	r0, #5
    fee6:	4086      	lsls	r6, r0
    fee8:	4284      	cmp	r4, r0
    feea:	dd00      	ble.n	feee <__aeabi_fadd+0x5e>
    feec:	e09d      	b.n	1002a <__aeabi_fadd+0x19a>
    feee:	1b04      	subs	r4, r0, r4
    fef0:	0032      	movs	r2, r6
    fef2:	2020      	movs	r0, #32
    fef4:	3401      	adds	r4, #1
    fef6:	40e2      	lsrs	r2, r4
    fef8:	1b04      	subs	r4, r0, r4
    fefa:	40a6      	lsls	r6, r4
    fefc:	0033      	movs	r3, r6
    fefe:	1e5e      	subs	r6, r3, #1
    ff00:	41b3      	sbcs	r3, r6
    ff02:	2400      	movs	r4, #0
    ff04:	4313      	orrs	r3, r2
    ff06:	075a      	lsls	r2, r3, #29
    ff08:	d004      	beq.n	ff14 <__aeabi_fadd+0x84>
    ff0a:	220f      	movs	r2, #15
    ff0c:	401a      	ands	r2, r3
    ff0e:	2a04      	cmp	r2, #4
    ff10:	d000      	beq.n	ff14 <__aeabi_fadd+0x84>
    ff12:	3304      	adds	r3, #4
    ff14:	015a      	lsls	r2, r3, #5
    ff16:	d529      	bpl.n	ff6c <__aeabi_fadd+0xdc>
    ff18:	3401      	adds	r4, #1
    ff1a:	2cff      	cmp	r4, #255	; 0xff
    ff1c:	d100      	bne.n	ff20 <__aeabi_fadd+0x90>
    ff1e:	e081      	b.n	10024 <__aeabi_fadd+0x194>
    ff20:	002a      	movs	r2, r5
    ff22:	019b      	lsls	r3, r3, #6
    ff24:	0a5b      	lsrs	r3, r3, #9
    ff26:	b2e4      	uxtb	r4, r4
    ff28:	025b      	lsls	r3, r3, #9
    ff2a:	05e4      	lsls	r4, r4, #23
    ff2c:	0a58      	lsrs	r0, r3, #9
    ff2e:	07d2      	lsls	r2, r2, #31
    ff30:	4320      	orrs	r0, r4
    ff32:	4310      	orrs	r0, r2
    ff34:	bc04      	pop	{r2}
    ff36:	4690      	mov	r8, r2
    ff38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff3a:	2cff      	cmp	r4, #255	; 0xff
    ff3c:	d0e3      	beq.n	ff06 <__aeabi_fadd+0x76>
    ff3e:	2180      	movs	r1, #128	; 0x80
    ff40:	0038      	movs	r0, r7
    ff42:	04c9      	lsls	r1, r1, #19
    ff44:	4308      	orrs	r0, r1
    ff46:	4684      	mov	ip, r0
    ff48:	2a1b      	cmp	r2, #27
    ff4a:	dd00      	ble.n	ff4e <__aeabi_fadd+0xbe>
    ff4c:	e082      	b.n	10054 <__aeabi_fadd+0x1c4>
    ff4e:	2020      	movs	r0, #32
    ff50:	4661      	mov	r1, ip
    ff52:	40d1      	lsrs	r1, r2
    ff54:	1a82      	subs	r2, r0, r2
    ff56:	4660      	mov	r0, ip
    ff58:	4090      	lsls	r0, r2
    ff5a:	0002      	movs	r2, r0
    ff5c:	1e50      	subs	r0, r2, #1
    ff5e:	4182      	sbcs	r2, r0
    ff60:	430a      	orrs	r2, r1
    ff62:	1a9b      	subs	r3, r3, r2
    ff64:	015a      	lsls	r2, r3, #5
    ff66:	d4b8      	bmi.n	feda <__aeabi_fadd+0x4a>
    ff68:	075a      	lsls	r2, r3, #29
    ff6a:	d1ce      	bne.n	ff0a <__aeabi_fadd+0x7a>
    ff6c:	08de      	lsrs	r6, r3, #3
    ff6e:	002a      	movs	r2, r5
    ff70:	2cff      	cmp	r4, #255	; 0xff
    ff72:	d13a      	bne.n	ffea <__aeabi_fadd+0x15a>
    ff74:	2e00      	cmp	r6, #0
    ff76:	d100      	bne.n	ff7a <__aeabi_fadd+0xea>
    ff78:	e0ae      	b.n	100d8 <__aeabi_fadd+0x248>
    ff7a:	2380      	movs	r3, #128	; 0x80
    ff7c:	03db      	lsls	r3, r3, #15
    ff7e:	4333      	orrs	r3, r6
    ff80:	025b      	lsls	r3, r3, #9
    ff82:	0a5b      	lsrs	r3, r3, #9
    ff84:	24ff      	movs	r4, #255	; 0xff
    ff86:	e7cf      	b.n	ff28 <__aeabi_fadd+0x98>
    ff88:	1a21      	subs	r1, r4, r0
    ff8a:	2900      	cmp	r1, #0
    ff8c:	dd52      	ble.n	10034 <__aeabi_fadd+0x1a4>
    ff8e:	2800      	cmp	r0, #0
    ff90:	d031      	beq.n	fff6 <__aeabi_fadd+0x166>
    ff92:	2cff      	cmp	r4, #255	; 0xff
    ff94:	d0b7      	beq.n	ff06 <__aeabi_fadd+0x76>
    ff96:	2080      	movs	r0, #128	; 0x80
    ff98:	003e      	movs	r6, r7
    ff9a:	04c0      	lsls	r0, r0, #19
    ff9c:	4306      	orrs	r6, r0
    ff9e:	46b4      	mov	ip, r6
    ffa0:	291b      	cmp	r1, #27
    ffa2:	dd00      	ble.n	ffa6 <__aeabi_fadd+0x116>
    ffa4:	e0aa      	b.n	100fc <__aeabi_fadd+0x26c>
    ffa6:	2620      	movs	r6, #32
    ffa8:	4660      	mov	r0, ip
    ffaa:	40c8      	lsrs	r0, r1
    ffac:	1a71      	subs	r1, r6, r1
    ffae:	4666      	mov	r6, ip
    ffb0:	408e      	lsls	r6, r1
    ffb2:	0031      	movs	r1, r6
    ffb4:	1e4e      	subs	r6, r1, #1
    ffb6:	41b1      	sbcs	r1, r6
    ffb8:	4301      	orrs	r1, r0
    ffba:	185b      	adds	r3, r3, r1
    ffbc:	0159      	lsls	r1, r3, #5
    ffbe:	d5d3      	bpl.n	ff68 <__aeabi_fadd+0xd8>
    ffc0:	3401      	adds	r4, #1
    ffc2:	2cff      	cmp	r4, #255	; 0xff
    ffc4:	d100      	bne.n	ffc8 <__aeabi_fadd+0x138>
    ffc6:	e087      	b.n	100d8 <__aeabi_fadd+0x248>
    ffc8:	2201      	movs	r2, #1
    ffca:	4978      	ldr	r1, [pc, #480]	; (101ac <__aeabi_fadd+0x31c>)
    ffcc:	401a      	ands	r2, r3
    ffce:	085b      	lsrs	r3, r3, #1
    ffd0:	400b      	ands	r3, r1
    ffd2:	4313      	orrs	r3, r2
    ffd4:	e797      	b.n	ff06 <__aeabi_fadd+0x76>
    ffd6:	2c00      	cmp	r4, #0
    ffd8:	d000      	beq.n	ffdc <__aeabi_fadd+0x14c>
    ffda:	e0a7      	b.n	1012c <__aeabi_fadd+0x29c>
    ffdc:	2b00      	cmp	r3, #0
    ffde:	d000      	beq.n	ffe2 <__aeabi_fadd+0x152>
    ffe0:	e0b6      	b.n	10150 <__aeabi_fadd+0x2c0>
    ffe2:	1e3b      	subs	r3, r7, #0
    ffe4:	d162      	bne.n	100ac <__aeabi_fadd+0x21c>
    ffe6:	2600      	movs	r6, #0
    ffe8:	2200      	movs	r2, #0
    ffea:	0273      	lsls	r3, r6, #9
    ffec:	0a5b      	lsrs	r3, r3, #9
    ffee:	b2e4      	uxtb	r4, r4
    fff0:	e79a      	b.n	ff28 <__aeabi_fadd+0x98>
    fff2:	0014      	movs	r4, r2
    fff4:	e787      	b.n	ff06 <__aeabi_fadd+0x76>
    fff6:	2f00      	cmp	r7, #0
    fff8:	d04d      	beq.n	10096 <__aeabi_fadd+0x206>
    fffa:	1e48      	subs	r0, r1, #1
    fffc:	2800      	cmp	r0, #0
    fffe:	d157      	bne.n	100b0 <__aeabi_fadd+0x220>
   10000:	4463      	add	r3, ip
   10002:	2401      	movs	r4, #1
   10004:	015a      	lsls	r2, r3, #5
   10006:	d5af      	bpl.n	ff68 <__aeabi_fadd+0xd8>
   10008:	2402      	movs	r4, #2
   1000a:	e7dd      	b.n	ffc8 <__aeabi_fadd+0x138>
   1000c:	2a00      	cmp	r2, #0
   1000e:	d124      	bne.n	1005a <__aeabi_fadd+0x1ca>
   10010:	1c62      	adds	r2, r4, #1
   10012:	b2d2      	uxtb	r2, r2
   10014:	2a01      	cmp	r2, #1
   10016:	ddde      	ble.n	ffd6 <__aeabi_fadd+0x146>
   10018:	1bde      	subs	r6, r3, r7
   1001a:	0172      	lsls	r2, r6, #5
   1001c:	d535      	bpl.n	1008a <__aeabi_fadd+0x1fa>
   1001e:	1afe      	subs	r6, r7, r3
   10020:	000d      	movs	r5, r1
   10022:	e75c      	b.n	fede <__aeabi_fadd+0x4e>
   10024:	002a      	movs	r2, r5
   10026:	2300      	movs	r3, #0
   10028:	e77e      	b.n	ff28 <__aeabi_fadd+0x98>
   1002a:	0033      	movs	r3, r6
   1002c:	4a60      	ldr	r2, [pc, #384]	; (101b0 <__aeabi_fadd+0x320>)
   1002e:	1a24      	subs	r4, r4, r0
   10030:	4013      	ands	r3, r2
   10032:	e768      	b.n	ff06 <__aeabi_fadd+0x76>
   10034:	2900      	cmp	r1, #0
   10036:	d163      	bne.n	10100 <__aeabi_fadd+0x270>
   10038:	1c61      	adds	r1, r4, #1
   1003a:	b2c8      	uxtb	r0, r1
   1003c:	2801      	cmp	r0, #1
   1003e:	dd4e      	ble.n	100de <__aeabi_fadd+0x24e>
   10040:	29ff      	cmp	r1, #255	; 0xff
   10042:	d049      	beq.n	100d8 <__aeabi_fadd+0x248>
   10044:	4463      	add	r3, ip
   10046:	085b      	lsrs	r3, r3, #1
   10048:	000c      	movs	r4, r1
   1004a:	e75c      	b.n	ff06 <__aeabi_fadd+0x76>
   1004c:	2aff      	cmp	r2, #255	; 0xff
   1004e:	d041      	beq.n	100d4 <__aeabi_fadd+0x244>
   10050:	000a      	movs	r2, r1
   10052:	e779      	b.n	ff48 <__aeabi_fadd+0xb8>
   10054:	2201      	movs	r2, #1
   10056:	1a9b      	subs	r3, r3, r2
   10058:	e784      	b.n	ff64 <__aeabi_fadd+0xd4>
   1005a:	2c00      	cmp	r4, #0
   1005c:	d01d      	beq.n	1009a <__aeabi_fadd+0x20a>
   1005e:	28ff      	cmp	r0, #255	; 0xff
   10060:	d022      	beq.n	100a8 <__aeabi_fadd+0x218>
   10062:	2480      	movs	r4, #128	; 0x80
   10064:	04e4      	lsls	r4, r4, #19
   10066:	4252      	negs	r2, r2
   10068:	4323      	orrs	r3, r4
   1006a:	2a1b      	cmp	r2, #27
   1006c:	dd00      	ble.n	10070 <__aeabi_fadd+0x1e0>
   1006e:	e08a      	b.n	10186 <__aeabi_fadd+0x2f6>
   10070:	001c      	movs	r4, r3
   10072:	2520      	movs	r5, #32
   10074:	40d4      	lsrs	r4, r2
   10076:	1aaa      	subs	r2, r5, r2
   10078:	4093      	lsls	r3, r2
   1007a:	1e5a      	subs	r2, r3, #1
   1007c:	4193      	sbcs	r3, r2
   1007e:	4323      	orrs	r3, r4
   10080:	4662      	mov	r2, ip
   10082:	0004      	movs	r4, r0
   10084:	1ad3      	subs	r3, r2, r3
   10086:	000d      	movs	r5, r1
   10088:	e725      	b.n	fed6 <__aeabi_fadd+0x46>
   1008a:	2e00      	cmp	r6, #0
   1008c:	d000      	beq.n	10090 <__aeabi_fadd+0x200>
   1008e:	e726      	b.n	fede <__aeabi_fadd+0x4e>
   10090:	2200      	movs	r2, #0
   10092:	2400      	movs	r4, #0
   10094:	e7a9      	b.n	ffea <__aeabi_fadd+0x15a>
   10096:	000c      	movs	r4, r1
   10098:	e735      	b.n	ff06 <__aeabi_fadd+0x76>
   1009a:	2b00      	cmp	r3, #0
   1009c:	d04d      	beq.n	1013a <__aeabi_fadd+0x2aa>
   1009e:	43d2      	mvns	r2, r2
   100a0:	2a00      	cmp	r2, #0
   100a2:	d0ed      	beq.n	10080 <__aeabi_fadd+0x1f0>
   100a4:	28ff      	cmp	r0, #255	; 0xff
   100a6:	d1e0      	bne.n	1006a <__aeabi_fadd+0x1da>
   100a8:	4663      	mov	r3, ip
   100aa:	24ff      	movs	r4, #255	; 0xff
   100ac:	000d      	movs	r5, r1
   100ae:	e72a      	b.n	ff06 <__aeabi_fadd+0x76>
   100b0:	29ff      	cmp	r1, #255	; 0xff
   100b2:	d00f      	beq.n	100d4 <__aeabi_fadd+0x244>
   100b4:	0001      	movs	r1, r0
   100b6:	e773      	b.n	ffa0 <__aeabi_fadd+0x110>
   100b8:	2b00      	cmp	r3, #0
   100ba:	d061      	beq.n	10180 <__aeabi_fadd+0x2f0>
   100bc:	24ff      	movs	r4, #255	; 0xff
   100be:	2f00      	cmp	r7, #0
   100c0:	d100      	bne.n	100c4 <__aeabi_fadd+0x234>
   100c2:	e720      	b.n	ff06 <__aeabi_fadd+0x76>
   100c4:	2280      	movs	r2, #128	; 0x80
   100c6:	4641      	mov	r1, r8
   100c8:	03d2      	lsls	r2, r2, #15
   100ca:	4211      	tst	r1, r2
   100cc:	d002      	beq.n	100d4 <__aeabi_fadd+0x244>
   100ce:	4216      	tst	r6, r2
   100d0:	d100      	bne.n	100d4 <__aeabi_fadd+0x244>
   100d2:	003b      	movs	r3, r7
   100d4:	24ff      	movs	r4, #255	; 0xff
   100d6:	e716      	b.n	ff06 <__aeabi_fadd+0x76>
   100d8:	24ff      	movs	r4, #255	; 0xff
   100da:	2300      	movs	r3, #0
   100dc:	e724      	b.n	ff28 <__aeabi_fadd+0x98>
   100de:	2c00      	cmp	r4, #0
   100e0:	d1ea      	bne.n	100b8 <__aeabi_fadd+0x228>
   100e2:	2b00      	cmp	r3, #0
   100e4:	d058      	beq.n	10198 <__aeabi_fadd+0x308>
   100e6:	2f00      	cmp	r7, #0
   100e8:	d100      	bne.n	100ec <__aeabi_fadd+0x25c>
   100ea:	e70c      	b.n	ff06 <__aeabi_fadd+0x76>
   100ec:	4463      	add	r3, ip
   100ee:	015a      	lsls	r2, r3, #5
   100f0:	d400      	bmi.n	100f4 <__aeabi_fadd+0x264>
   100f2:	e739      	b.n	ff68 <__aeabi_fadd+0xd8>
   100f4:	4a2e      	ldr	r2, [pc, #184]	; (101b0 <__aeabi_fadd+0x320>)
   100f6:	000c      	movs	r4, r1
   100f8:	4013      	ands	r3, r2
   100fa:	e704      	b.n	ff06 <__aeabi_fadd+0x76>
   100fc:	2101      	movs	r1, #1
   100fe:	e75c      	b.n	ffba <__aeabi_fadd+0x12a>
   10100:	2c00      	cmp	r4, #0
   10102:	d11e      	bne.n	10142 <__aeabi_fadd+0x2b2>
   10104:	2b00      	cmp	r3, #0
   10106:	d040      	beq.n	1018a <__aeabi_fadd+0x2fa>
   10108:	43c9      	mvns	r1, r1
   1010a:	2900      	cmp	r1, #0
   1010c:	d00b      	beq.n	10126 <__aeabi_fadd+0x296>
   1010e:	28ff      	cmp	r0, #255	; 0xff
   10110:	d036      	beq.n	10180 <__aeabi_fadd+0x2f0>
   10112:	291b      	cmp	r1, #27
   10114:	dc47      	bgt.n	101a6 <__aeabi_fadd+0x316>
   10116:	001c      	movs	r4, r3
   10118:	2620      	movs	r6, #32
   1011a:	40cc      	lsrs	r4, r1
   1011c:	1a71      	subs	r1, r6, r1
   1011e:	408b      	lsls	r3, r1
   10120:	1e59      	subs	r1, r3, #1
   10122:	418b      	sbcs	r3, r1
   10124:	4323      	orrs	r3, r4
   10126:	4463      	add	r3, ip
   10128:	0004      	movs	r4, r0
   1012a:	e747      	b.n	ffbc <__aeabi_fadd+0x12c>
   1012c:	2b00      	cmp	r3, #0
   1012e:	d118      	bne.n	10162 <__aeabi_fadd+0x2d2>
   10130:	1e3b      	subs	r3, r7, #0
   10132:	d02d      	beq.n	10190 <__aeabi_fadd+0x300>
   10134:	000d      	movs	r5, r1
   10136:	24ff      	movs	r4, #255	; 0xff
   10138:	e6e5      	b.n	ff06 <__aeabi_fadd+0x76>
   1013a:	003b      	movs	r3, r7
   1013c:	0004      	movs	r4, r0
   1013e:	000d      	movs	r5, r1
   10140:	e6e1      	b.n	ff06 <__aeabi_fadd+0x76>
   10142:	28ff      	cmp	r0, #255	; 0xff
   10144:	d01c      	beq.n	10180 <__aeabi_fadd+0x2f0>
   10146:	2480      	movs	r4, #128	; 0x80
   10148:	04e4      	lsls	r4, r4, #19
   1014a:	4249      	negs	r1, r1
   1014c:	4323      	orrs	r3, r4
   1014e:	e7e0      	b.n	10112 <__aeabi_fadd+0x282>
   10150:	2f00      	cmp	r7, #0
   10152:	d100      	bne.n	10156 <__aeabi_fadd+0x2c6>
   10154:	e6d7      	b.n	ff06 <__aeabi_fadd+0x76>
   10156:	1bde      	subs	r6, r3, r7
   10158:	0172      	lsls	r2, r6, #5
   1015a:	d51f      	bpl.n	1019c <__aeabi_fadd+0x30c>
   1015c:	1afb      	subs	r3, r7, r3
   1015e:	000d      	movs	r5, r1
   10160:	e6d1      	b.n	ff06 <__aeabi_fadd+0x76>
   10162:	24ff      	movs	r4, #255	; 0xff
   10164:	2f00      	cmp	r7, #0
   10166:	d100      	bne.n	1016a <__aeabi_fadd+0x2da>
   10168:	e6cd      	b.n	ff06 <__aeabi_fadd+0x76>
   1016a:	2280      	movs	r2, #128	; 0x80
   1016c:	4640      	mov	r0, r8
   1016e:	03d2      	lsls	r2, r2, #15
   10170:	4210      	tst	r0, r2
   10172:	d0af      	beq.n	100d4 <__aeabi_fadd+0x244>
   10174:	4216      	tst	r6, r2
   10176:	d1ad      	bne.n	100d4 <__aeabi_fadd+0x244>
   10178:	003b      	movs	r3, r7
   1017a:	000d      	movs	r5, r1
   1017c:	24ff      	movs	r4, #255	; 0xff
   1017e:	e6c2      	b.n	ff06 <__aeabi_fadd+0x76>
   10180:	4663      	mov	r3, ip
   10182:	24ff      	movs	r4, #255	; 0xff
   10184:	e6bf      	b.n	ff06 <__aeabi_fadd+0x76>
   10186:	2301      	movs	r3, #1
   10188:	e77a      	b.n	10080 <__aeabi_fadd+0x1f0>
   1018a:	003b      	movs	r3, r7
   1018c:	0004      	movs	r4, r0
   1018e:	e6ba      	b.n	ff06 <__aeabi_fadd+0x76>
   10190:	2680      	movs	r6, #128	; 0x80
   10192:	2200      	movs	r2, #0
   10194:	03f6      	lsls	r6, r6, #15
   10196:	e6f0      	b.n	ff7a <__aeabi_fadd+0xea>
   10198:	003b      	movs	r3, r7
   1019a:	e6b4      	b.n	ff06 <__aeabi_fadd+0x76>
   1019c:	1e33      	subs	r3, r6, #0
   1019e:	d000      	beq.n	101a2 <__aeabi_fadd+0x312>
   101a0:	e6e2      	b.n	ff68 <__aeabi_fadd+0xd8>
   101a2:	2200      	movs	r2, #0
   101a4:	e721      	b.n	ffea <__aeabi_fadd+0x15a>
   101a6:	2301      	movs	r3, #1
   101a8:	e7bd      	b.n	10126 <__aeabi_fadd+0x296>
   101aa:	46c0      	nop			; (mov r8, r8)
   101ac:	7dffffff 	.word	0x7dffffff
   101b0:	fbffffff 	.word	0xfbffffff

000101b4 <__aeabi_fdiv>:
   101b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   101b6:	4657      	mov	r7, sl
   101b8:	464e      	mov	r6, r9
   101ba:	46de      	mov	lr, fp
   101bc:	4645      	mov	r5, r8
   101be:	b5e0      	push	{r5, r6, r7, lr}
   101c0:	0244      	lsls	r4, r0, #9
   101c2:	0043      	lsls	r3, r0, #1
   101c4:	0fc6      	lsrs	r6, r0, #31
   101c6:	b083      	sub	sp, #12
   101c8:	1c0f      	adds	r7, r1, #0
   101ca:	0a64      	lsrs	r4, r4, #9
   101cc:	0e1b      	lsrs	r3, r3, #24
   101ce:	46b2      	mov	sl, r6
   101d0:	d053      	beq.n	1027a <__aeabi_fdiv+0xc6>
   101d2:	2bff      	cmp	r3, #255	; 0xff
   101d4:	d027      	beq.n	10226 <__aeabi_fdiv+0x72>
   101d6:	2280      	movs	r2, #128	; 0x80
   101d8:	00e4      	lsls	r4, r4, #3
   101da:	04d2      	lsls	r2, r2, #19
   101dc:	4314      	orrs	r4, r2
   101de:	227f      	movs	r2, #127	; 0x7f
   101e0:	4252      	negs	r2, r2
   101e2:	4690      	mov	r8, r2
   101e4:	4498      	add	r8, r3
   101e6:	2300      	movs	r3, #0
   101e8:	4699      	mov	r9, r3
   101ea:	469b      	mov	fp, r3
   101ec:	027d      	lsls	r5, r7, #9
   101ee:	0078      	lsls	r0, r7, #1
   101f0:	0ffb      	lsrs	r3, r7, #31
   101f2:	0a6d      	lsrs	r5, r5, #9
   101f4:	0e00      	lsrs	r0, r0, #24
   101f6:	9300      	str	r3, [sp, #0]
   101f8:	d024      	beq.n	10244 <__aeabi_fdiv+0x90>
   101fa:	28ff      	cmp	r0, #255	; 0xff
   101fc:	d046      	beq.n	1028c <__aeabi_fdiv+0xd8>
   101fe:	2380      	movs	r3, #128	; 0x80
   10200:	2100      	movs	r1, #0
   10202:	00ed      	lsls	r5, r5, #3
   10204:	04db      	lsls	r3, r3, #19
   10206:	431d      	orrs	r5, r3
   10208:	387f      	subs	r0, #127	; 0x7f
   1020a:	4647      	mov	r7, r8
   1020c:	1a38      	subs	r0, r7, r0
   1020e:	464f      	mov	r7, r9
   10210:	430f      	orrs	r7, r1
   10212:	00bf      	lsls	r7, r7, #2
   10214:	46b9      	mov	r9, r7
   10216:	0033      	movs	r3, r6
   10218:	9a00      	ldr	r2, [sp, #0]
   1021a:	4f87      	ldr	r7, [pc, #540]	; (10438 <__aeabi_fdiv+0x284>)
   1021c:	4053      	eors	r3, r2
   1021e:	464a      	mov	r2, r9
   10220:	58ba      	ldr	r2, [r7, r2]
   10222:	9301      	str	r3, [sp, #4]
   10224:	4697      	mov	pc, r2
   10226:	2c00      	cmp	r4, #0
   10228:	d14e      	bne.n	102c8 <__aeabi_fdiv+0x114>
   1022a:	2308      	movs	r3, #8
   1022c:	4699      	mov	r9, r3
   1022e:	33f7      	adds	r3, #247	; 0xf7
   10230:	4698      	mov	r8, r3
   10232:	3bfd      	subs	r3, #253	; 0xfd
   10234:	469b      	mov	fp, r3
   10236:	027d      	lsls	r5, r7, #9
   10238:	0078      	lsls	r0, r7, #1
   1023a:	0ffb      	lsrs	r3, r7, #31
   1023c:	0a6d      	lsrs	r5, r5, #9
   1023e:	0e00      	lsrs	r0, r0, #24
   10240:	9300      	str	r3, [sp, #0]
   10242:	d1da      	bne.n	101fa <__aeabi_fdiv+0x46>
   10244:	2d00      	cmp	r5, #0
   10246:	d126      	bne.n	10296 <__aeabi_fdiv+0xe2>
   10248:	2000      	movs	r0, #0
   1024a:	2101      	movs	r1, #1
   1024c:	0033      	movs	r3, r6
   1024e:	9a00      	ldr	r2, [sp, #0]
   10250:	4f7a      	ldr	r7, [pc, #488]	; (1043c <__aeabi_fdiv+0x288>)
   10252:	4053      	eors	r3, r2
   10254:	4642      	mov	r2, r8
   10256:	1a10      	subs	r0, r2, r0
   10258:	464a      	mov	r2, r9
   1025a:	430a      	orrs	r2, r1
   1025c:	0092      	lsls	r2, r2, #2
   1025e:	58ba      	ldr	r2, [r7, r2]
   10260:	001d      	movs	r5, r3
   10262:	4697      	mov	pc, r2
   10264:	9b00      	ldr	r3, [sp, #0]
   10266:	002c      	movs	r4, r5
   10268:	469a      	mov	sl, r3
   1026a:	468b      	mov	fp, r1
   1026c:	465b      	mov	r3, fp
   1026e:	2b02      	cmp	r3, #2
   10270:	d131      	bne.n	102d6 <__aeabi_fdiv+0x122>
   10272:	4653      	mov	r3, sl
   10274:	21ff      	movs	r1, #255	; 0xff
   10276:	2400      	movs	r4, #0
   10278:	e038      	b.n	102ec <__aeabi_fdiv+0x138>
   1027a:	2c00      	cmp	r4, #0
   1027c:	d117      	bne.n	102ae <__aeabi_fdiv+0xfa>
   1027e:	2304      	movs	r3, #4
   10280:	4699      	mov	r9, r3
   10282:	2300      	movs	r3, #0
   10284:	4698      	mov	r8, r3
   10286:	3301      	adds	r3, #1
   10288:	469b      	mov	fp, r3
   1028a:	e7af      	b.n	101ec <__aeabi_fdiv+0x38>
   1028c:	20ff      	movs	r0, #255	; 0xff
   1028e:	2d00      	cmp	r5, #0
   10290:	d10b      	bne.n	102aa <__aeabi_fdiv+0xf6>
   10292:	2102      	movs	r1, #2
   10294:	e7da      	b.n	1024c <__aeabi_fdiv+0x98>
   10296:	0028      	movs	r0, r5
   10298:	f000 fb7e 	bl	10998 <__clzsi2>
   1029c:	1f43      	subs	r3, r0, #5
   1029e:	409d      	lsls	r5, r3
   102a0:	2376      	movs	r3, #118	; 0x76
   102a2:	425b      	negs	r3, r3
   102a4:	1a18      	subs	r0, r3, r0
   102a6:	2100      	movs	r1, #0
   102a8:	e7af      	b.n	1020a <__aeabi_fdiv+0x56>
   102aa:	2103      	movs	r1, #3
   102ac:	e7ad      	b.n	1020a <__aeabi_fdiv+0x56>
   102ae:	0020      	movs	r0, r4
   102b0:	f000 fb72 	bl	10998 <__clzsi2>
   102b4:	1f43      	subs	r3, r0, #5
   102b6:	409c      	lsls	r4, r3
   102b8:	2376      	movs	r3, #118	; 0x76
   102ba:	425b      	negs	r3, r3
   102bc:	1a1b      	subs	r3, r3, r0
   102be:	4698      	mov	r8, r3
   102c0:	2300      	movs	r3, #0
   102c2:	4699      	mov	r9, r3
   102c4:	469b      	mov	fp, r3
   102c6:	e791      	b.n	101ec <__aeabi_fdiv+0x38>
   102c8:	230c      	movs	r3, #12
   102ca:	4699      	mov	r9, r3
   102cc:	33f3      	adds	r3, #243	; 0xf3
   102ce:	4698      	mov	r8, r3
   102d0:	3bfc      	subs	r3, #252	; 0xfc
   102d2:	469b      	mov	fp, r3
   102d4:	e78a      	b.n	101ec <__aeabi_fdiv+0x38>
   102d6:	2b03      	cmp	r3, #3
   102d8:	d100      	bne.n	102dc <__aeabi_fdiv+0x128>
   102da:	e0a5      	b.n	10428 <__aeabi_fdiv+0x274>
   102dc:	4655      	mov	r5, sl
   102de:	2b01      	cmp	r3, #1
   102e0:	d000      	beq.n	102e4 <__aeabi_fdiv+0x130>
   102e2:	e081      	b.n	103e8 <__aeabi_fdiv+0x234>
   102e4:	2301      	movs	r3, #1
   102e6:	2100      	movs	r1, #0
   102e8:	2400      	movs	r4, #0
   102ea:	402b      	ands	r3, r5
   102ec:	0264      	lsls	r4, r4, #9
   102ee:	05c9      	lsls	r1, r1, #23
   102f0:	0a60      	lsrs	r0, r4, #9
   102f2:	07db      	lsls	r3, r3, #31
   102f4:	4308      	orrs	r0, r1
   102f6:	4318      	orrs	r0, r3
   102f8:	b003      	add	sp, #12
   102fa:	bc3c      	pop	{r2, r3, r4, r5}
   102fc:	4690      	mov	r8, r2
   102fe:	4699      	mov	r9, r3
   10300:	46a2      	mov	sl, r4
   10302:	46ab      	mov	fp, r5
   10304:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10306:	2480      	movs	r4, #128	; 0x80
   10308:	2300      	movs	r3, #0
   1030a:	03e4      	lsls	r4, r4, #15
   1030c:	21ff      	movs	r1, #255	; 0xff
   1030e:	e7ed      	b.n	102ec <__aeabi_fdiv+0x138>
   10310:	21ff      	movs	r1, #255	; 0xff
   10312:	2400      	movs	r4, #0
   10314:	e7ea      	b.n	102ec <__aeabi_fdiv+0x138>
   10316:	2301      	movs	r3, #1
   10318:	1a59      	subs	r1, r3, r1
   1031a:	291b      	cmp	r1, #27
   1031c:	dd66      	ble.n	103ec <__aeabi_fdiv+0x238>
   1031e:	9a01      	ldr	r2, [sp, #4]
   10320:	4013      	ands	r3, r2
   10322:	2100      	movs	r1, #0
   10324:	2400      	movs	r4, #0
   10326:	e7e1      	b.n	102ec <__aeabi_fdiv+0x138>
   10328:	2380      	movs	r3, #128	; 0x80
   1032a:	03db      	lsls	r3, r3, #15
   1032c:	421c      	tst	r4, r3
   1032e:	d038      	beq.n	103a2 <__aeabi_fdiv+0x1ee>
   10330:	421d      	tst	r5, r3
   10332:	d051      	beq.n	103d8 <__aeabi_fdiv+0x224>
   10334:	431c      	orrs	r4, r3
   10336:	0264      	lsls	r4, r4, #9
   10338:	0a64      	lsrs	r4, r4, #9
   1033a:	0033      	movs	r3, r6
   1033c:	21ff      	movs	r1, #255	; 0xff
   1033e:	e7d5      	b.n	102ec <__aeabi_fdiv+0x138>
   10340:	0163      	lsls	r3, r4, #5
   10342:	016c      	lsls	r4, r5, #5
   10344:	42a3      	cmp	r3, r4
   10346:	d23b      	bcs.n	103c0 <__aeabi_fdiv+0x20c>
   10348:	261b      	movs	r6, #27
   1034a:	2100      	movs	r1, #0
   1034c:	3801      	subs	r0, #1
   1034e:	2501      	movs	r5, #1
   10350:	001f      	movs	r7, r3
   10352:	0049      	lsls	r1, r1, #1
   10354:	005b      	lsls	r3, r3, #1
   10356:	2f00      	cmp	r7, #0
   10358:	db01      	blt.n	1035e <__aeabi_fdiv+0x1aa>
   1035a:	429c      	cmp	r4, r3
   1035c:	d801      	bhi.n	10362 <__aeabi_fdiv+0x1ae>
   1035e:	1b1b      	subs	r3, r3, r4
   10360:	4329      	orrs	r1, r5
   10362:	3e01      	subs	r6, #1
   10364:	2e00      	cmp	r6, #0
   10366:	d1f3      	bne.n	10350 <__aeabi_fdiv+0x19c>
   10368:	001c      	movs	r4, r3
   1036a:	1e63      	subs	r3, r4, #1
   1036c:	419c      	sbcs	r4, r3
   1036e:	430c      	orrs	r4, r1
   10370:	0001      	movs	r1, r0
   10372:	317f      	adds	r1, #127	; 0x7f
   10374:	2900      	cmp	r1, #0
   10376:	ddce      	ble.n	10316 <__aeabi_fdiv+0x162>
   10378:	0763      	lsls	r3, r4, #29
   1037a:	d004      	beq.n	10386 <__aeabi_fdiv+0x1d2>
   1037c:	230f      	movs	r3, #15
   1037e:	4023      	ands	r3, r4
   10380:	2b04      	cmp	r3, #4
   10382:	d000      	beq.n	10386 <__aeabi_fdiv+0x1d2>
   10384:	3404      	adds	r4, #4
   10386:	0123      	lsls	r3, r4, #4
   10388:	d503      	bpl.n	10392 <__aeabi_fdiv+0x1de>
   1038a:	0001      	movs	r1, r0
   1038c:	4b2c      	ldr	r3, [pc, #176]	; (10440 <__aeabi_fdiv+0x28c>)
   1038e:	3180      	adds	r1, #128	; 0x80
   10390:	401c      	ands	r4, r3
   10392:	29fe      	cmp	r1, #254	; 0xfe
   10394:	dd0d      	ble.n	103b2 <__aeabi_fdiv+0x1fe>
   10396:	2301      	movs	r3, #1
   10398:	9a01      	ldr	r2, [sp, #4]
   1039a:	21ff      	movs	r1, #255	; 0xff
   1039c:	4013      	ands	r3, r2
   1039e:	2400      	movs	r4, #0
   103a0:	e7a4      	b.n	102ec <__aeabi_fdiv+0x138>
   103a2:	2380      	movs	r3, #128	; 0x80
   103a4:	03db      	lsls	r3, r3, #15
   103a6:	431c      	orrs	r4, r3
   103a8:	0264      	lsls	r4, r4, #9
   103aa:	0a64      	lsrs	r4, r4, #9
   103ac:	0033      	movs	r3, r6
   103ae:	21ff      	movs	r1, #255	; 0xff
   103b0:	e79c      	b.n	102ec <__aeabi_fdiv+0x138>
   103b2:	2301      	movs	r3, #1
   103b4:	9a01      	ldr	r2, [sp, #4]
   103b6:	01a4      	lsls	r4, r4, #6
   103b8:	0a64      	lsrs	r4, r4, #9
   103ba:	b2c9      	uxtb	r1, r1
   103bc:	4013      	ands	r3, r2
   103be:	e795      	b.n	102ec <__aeabi_fdiv+0x138>
   103c0:	1b1b      	subs	r3, r3, r4
   103c2:	261a      	movs	r6, #26
   103c4:	2101      	movs	r1, #1
   103c6:	e7c2      	b.n	1034e <__aeabi_fdiv+0x19a>
   103c8:	9b00      	ldr	r3, [sp, #0]
   103ca:	468b      	mov	fp, r1
   103cc:	469a      	mov	sl, r3
   103ce:	2400      	movs	r4, #0
   103d0:	e74c      	b.n	1026c <__aeabi_fdiv+0xb8>
   103d2:	0263      	lsls	r3, r4, #9
   103d4:	d5e5      	bpl.n	103a2 <__aeabi_fdiv+0x1ee>
   103d6:	2500      	movs	r5, #0
   103d8:	2480      	movs	r4, #128	; 0x80
   103da:	03e4      	lsls	r4, r4, #15
   103dc:	432c      	orrs	r4, r5
   103de:	0264      	lsls	r4, r4, #9
   103e0:	0a64      	lsrs	r4, r4, #9
   103e2:	9b00      	ldr	r3, [sp, #0]
   103e4:	21ff      	movs	r1, #255	; 0xff
   103e6:	e781      	b.n	102ec <__aeabi_fdiv+0x138>
   103e8:	9501      	str	r5, [sp, #4]
   103ea:	e7c1      	b.n	10370 <__aeabi_fdiv+0x1bc>
   103ec:	0023      	movs	r3, r4
   103ee:	2020      	movs	r0, #32
   103f0:	40cb      	lsrs	r3, r1
   103f2:	1a41      	subs	r1, r0, r1
   103f4:	408c      	lsls	r4, r1
   103f6:	1e61      	subs	r1, r4, #1
   103f8:	418c      	sbcs	r4, r1
   103fa:	431c      	orrs	r4, r3
   103fc:	0763      	lsls	r3, r4, #29
   103fe:	d004      	beq.n	1040a <__aeabi_fdiv+0x256>
   10400:	230f      	movs	r3, #15
   10402:	4023      	ands	r3, r4
   10404:	2b04      	cmp	r3, #4
   10406:	d000      	beq.n	1040a <__aeabi_fdiv+0x256>
   10408:	3404      	adds	r4, #4
   1040a:	0163      	lsls	r3, r4, #5
   1040c:	d505      	bpl.n	1041a <__aeabi_fdiv+0x266>
   1040e:	2301      	movs	r3, #1
   10410:	9a01      	ldr	r2, [sp, #4]
   10412:	2101      	movs	r1, #1
   10414:	4013      	ands	r3, r2
   10416:	2400      	movs	r4, #0
   10418:	e768      	b.n	102ec <__aeabi_fdiv+0x138>
   1041a:	2301      	movs	r3, #1
   1041c:	9a01      	ldr	r2, [sp, #4]
   1041e:	01a4      	lsls	r4, r4, #6
   10420:	0a64      	lsrs	r4, r4, #9
   10422:	4013      	ands	r3, r2
   10424:	2100      	movs	r1, #0
   10426:	e761      	b.n	102ec <__aeabi_fdiv+0x138>
   10428:	2380      	movs	r3, #128	; 0x80
   1042a:	03db      	lsls	r3, r3, #15
   1042c:	431c      	orrs	r4, r3
   1042e:	0264      	lsls	r4, r4, #9
   10430:	0a64      	lsrs	r4, r4, #9
   10432:	4653      	mov	r3, sl
   10434:	21ff      	movs	r1, #255	; 0xff
   10436:	e759      	b.n	102ec <__aeabi_fdiv+0x138>
   10438:	000128d4 	.word	0x000128d4
   1043c:	00012914 	.word	0x00012914
   10440:	f7ffffff 	.word	0xf7ffffff

00010444 <__eqsf2>:
   10444:	b570      	push	{r4, r5, r6, lr}
   10446:	0042      	lsls	r2, r0, #1
   10448:	0245      	lsls	r5, r0, #9
   1044a:	024e      	lsls	r6, r1, #9
   1044c:	004c      	lsls	r4, r1, #1
   1044e:	0fc3      	lsrs	r3, r0, #31
   10450:	0a6d      	lsrs	r5, r5, #9
   10452:	0e12      	lsrs	r2, r2, #24
   10454:	0a76      	lsrs	r6, r6, #9
   10456:	0e24      	lsrs	r4, r4, #24
   10458:	0fc9      	lsrs	r1, r1, #31
   1045a:	2001      	movs	r0, #1
   1045c:	2aff      	cmp	r2, #255	; 0xff
   1045e:	d006      	beq.n	1046e <__eqsf2+0x2a>
   10460:	2cff      	cmp	r4, #255	; 0xff
   10462:	d003      	beq.n	1046c <__eqsf2+0x28>
   10464:	42a2      	cmp	r2, r4
   10466:	d101      	bne.n	1046c <__eqsf2+0x28>
   10468:	42b5      	cmp	r5, r6
   1046a:	d006      	beq.n	1047a <__eqsf2+0x36>
   1046c:	bd70      	pop	{r4, r5, r6, pc}
   1046e:	2d00      	cmp	r5, #0
   10470:	d1fc      	bne.n	1046c <__eqsf2+0x28>
   10472:	2cff      	cmp	r4, #255	; 0xff
   10474:	d1fa      	bne.n	1046c <__eqsf2+0x28>
   10476:	2e00      	cmp	r6, #0
   10478:	d1f8      	bne.n	1046c <__eqsf2+0x28>
   1047a:	428b      	cmp	r3, r1
   1047c:	d006      	beq.n	1048c <__eqsf2+0x48>
   1047e:	2001      	movs	r0, #1
   10480:	2a00      	cmp	r2, #0
   10482:	d1f3      	bne.n	1046c <__eqsf2+0x28>
   10484:	0028      	movs	r0, r5
   10486:	1e45      	subs	r5, r0, #1
   10488:	41a8      	sbcs	r0, r5
   1048a:	e7ef      	b.n	1046c <__eqsf2+0x28>
   1048c:	2000      	movs	r0, #0
   1048e:	e7ed      	b.n	1046c <__eqsf2+0x28>

00010490 <__gesf2>:
   10490:	b5f0      	push	{r4, r5, r6, r7, lr}
   10492:	0042      	lsls	r2, r0, #1
   10494:	0245      	lsls	r5, r0, #9
   10496:	024c      	lsls	r4, r1, #9
   10498:	0fc3      	lsrs	r3, r0, #31
   1049a:	0048      	lsls	r0, r1, #1
   1049c:	0a6d      	lsrs	r5, r5, #9
   1049e:	0e12      	lsrs	r2, r2, #24
   104a0:	0a64      	lsrs	r4, r4, #9
   104a2:	0e00      	lsrs	r0, r0, #24
   104a4:	0fc9      	lsrs	r1, r1, #31
   104a6:	2aff      	cmp	r2, #255	; 0xff
   104a8:	d01e      	beq.n	104e8 <__gesf2+0x58>
   104aa:	28ff      	cmp	r0, #255	; 0xff
   104ac:	d021      	beq.n	104f2 <__gesf2+0x62>
   104ae:	2a00      	cmp	r2, #0
   104b0:	d10a      	bne.n	104c8 <__gesf2+0x38>
   104b2:	426e      	negs	r6, r5
   104b4:	416e      	adcs	r6, r5
   104b6:	b2f6      	uxtb	r6, r6
   104b8:	2800      	cmp	r0, #0
   104ba:	d10f      	bne.n	104dc <__gesf2+0x4c>
   104bc:	2c00      	cmp	r4, #0
   104be:	d10d      	bne.n	104dc <__gesf2+0x4c>
   104c0:	2000      	movs	r0, #0
   104c2:	2d00      	cmp	r5, #0
   104c4:	d009      	beq.n	104da <__gesf2+0x4a>
   104c6:	e005      	b.n	104d4 <__gesf2+0x44>
   104c8:	2800      	cmp	r0, #0
   104ca:	d101      	bne.n	104d0 <__gesf2+0x40>
   104cc:	2c00      	cmp	r4, #0
   104ce:	d001      	beq.n	104d4 <__gesf2+0x44>
   104d0:	428b      	cmp	r3, r1
   104d2:	d011      	beq.n	104f8 <__gesf2+0x68>
   104d4:	2101      	movs	r1, #1
   104d6:	4258      	negs	r0, r3
   104d8:	4308      	orrs	r0, r1
   104da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104dc:	2e00      	cmp	r6, #0
   104de:	d0f7      	beq.n	104d0 <__gesf2+0x40>
   104e0:	2001      	movs	r0, #1
   104e2:	3901      	subs	r1, #1
   104e4:	4308      	orrs	r0, r1
   104e6:	e7f8      	b.n	104da <__gesf2+0x4a>
   104e8:	2d00      	cmp	r5, #0
   104ea:	d0de      	beq.n	104aa <__gesf2+0x1a>
   104ec:	2002      	movs	r0, #2
   104ee:	4240      	negs	r0, r0
   104f0:	e7f3      	b.n	104da <__gesf2+0x4a>
   104f2:	2c00      	cmp	r4, #0
   104f4:	d0db      	beq.n	104ae <__gesf2+0x1e>
   104f6:	e7f9      	b.n	104ec <__gesf2+0x5c>
   104f8:	4282      	cmp	r2, r0
   104fa:	dceb      	bgt.n	104d4 <__gesf2+0x44>
   104fc:	db04      	blt.n	10508 <__gesf2+0x78>
   104fe:	42a5      	cmp	r5, r4
   10500:	d8e8      	bhi.n	104d4 <__gesf2+0x44>
   10502:	2000      	movs	r0, #0
   10504:	42a5      	cmp	r5, r4
   10506:	d2e8      	bcs.n	104da <__gesf2+0x4a>
   10508:	2101      	movs	r1, #1
   1050a:	1e58      	subs	r0, r3, #1
   1050c:	4308      	orrs	r0, r1
   1050e:	e7e4      	b.n	104da <__gesf2+0x4a>

00010510 <__lesf2>:
   10510:	b5f0      	push	{r4, r5, r6, r7, lr}
   10512:	0042      	lsls	r2, r0, #1
   10514:	024d      	lsls	r5, r1, #9
   10516:	004c      	lsls	r4, r1, #1
   10518:	0246      	lsls	r6, r0, #9
   1051a:	0a76      	lsrs	r6, r6, #9
   1051c:	0e12      	lsrs	r2, r2, #24
   1051e:	0fc3      	lsrs	r3, r0, #31
   10520:	0a6d      	lsrs	r5, r5, #9
   10522:	0e24      	lsrs	r4, r4, #24
   10524:	0fc9      	lsrs	r1, r1, #31
   10526:	2aff      	cmp	r2, #255	; 0xff
   10528:	d016      	beq.n	10558 <__lesf2+0x48>
   1052a:	2cff      	cmp	r4, #255	; 0xff
   1052c:	d018      	beq.n	10560 <__lesf2+0x50>
   1052e:	2a00      	cmp	r2, #0
   10530:	d10a      	bne.n	10548 <__lesf2+0x38>
   10532:	4270      	negs	r0, r6
   10534:	4170      	adcs	r0, r6
   10536:	b2c0      	uxtb	r0, r0
   10538:	2c00      	cmp	r4, #0
   1053a:	d015      	beq.n	10568 <__lesf2+0x58>
   1053c:	2800      	cmp	r0, #0
   1053e:	d005      	beq.n	1054c <__lesf2+0x3c>
   10540:	2001      	movs	r0, #1
   10542:	3901      	subs	r1, #1
   10544:	4308      	orrs	r0, r1
   10546:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10548:	2c00      	cmp	r4, #0
   1054a:	d013      	beq.n	10574 <__lesf2+0x64>
   1054c:	4299      	cmp	r1, r3
   1054e:	d014      	beq.n	1057a <__lesf2+0x6a>
   10550:	2001      	movs	r0, #1
   10552:	425b      	negs	r3, r3
   10554:	4318      	orrs	r0, r3
   10556:	e7f6      	b.n	10546 <__lesf2+0x36>
   10558:	2002      	movs	r0, #2
   1055a:	2e00      	cmp	r6, #0
   1055c:	d1f3      	bne.n	10546 <__lesf2+0x36>
   1055e:	e7e4      	b.n	1052a <__lesf2+0x1a>
   10560:	2002      	movs	r0, #2
   10562:	2d00      	cmp	r5, #0
   10564:	d1ef      	bne.n	10546 <__lesf2+0x36>
   10566:	e7e2      	b.n	1052e <__lesf2+0x1e>
   10568:	2d00      	cmp	r5, #0
   1056a:	d1e7      	bne.n	1053c <__lesf2+0x2c>
   1056c:	2000      	movs	r0, #0
   1056e:	2e00      	cmp	r6, #0
   10570:	d0e9      	beq.n	10546 <__lesf2+0x36>
   10572:	e7ed      	b.n	10550 <__lesf2+0x40>
   10574:	2d00      	cmp	r5, #0
   10576:	d1e9      	bne.n	1054c <__lesf2+0x3c>
   10578:	e7ea      	b.n	10550 <__lesf2+0x40>
   1057a:	42a2      	cmp	r2, r4
   1057c:	dc06      	bgt.n	1058c <__lesf2+0x7c>
   1057e:	dbdf      	blt.n	10540 <__lesf2+0x30>
   10580:	42ae      	cmp	r6, r5
   10582:	d803      	bhi.n	1058c <__lesf2+0x7c>
   10584:	2000      	movs	r0, #0
   10586:	42ae      	cmp	r6, r5
   10588:	d3da      	bcc.n	10540 <__lesf2+0x30>
   1058a:	e7dc      	b.n	10546 <__lesf2+0x36>
   1058c:	2001      	movs	r0, #1
   1058e:	4249      	negs	r1, r1
   10590:	4308      	orrs	r0, r1
   10592:	e7d8      	b.n	10546 <__lesf2+0x36>

00010594 <__aeabi_fsub>:
   10594:	b5f0      	push	{r4, r5, r6, r7, lr}
   10596:	464f      	mov	r7, r9
   10598:	46d6      	mov	lr, sl
   1059a:	4646      	mov	r6, r8
   1059c:	0044      	lsls	r4, r0, #1
   1059e:	b5c0      	push	{r6, r7, lr}
   105a0:	0fc2      	lsrs	r2, r0, #31
   105a2:	0247      	lsls	r7, r0, #9
   105a4:	0248      	lsls	r0, r1, #9
   105a6:	0a40      	lsrs	r0, r0, #9
   105a8:	4684      	mov	ip, r0
   105aa:	4666      	mov	r6, ip
   105ac:	0a7b      	lsrs	r3, r7, #9
   105ae:	0048      	lsls	r0, r1, #1
   105b0:	0fc9      	lsrs	r1, r1, #31
   105b2:	469a      	mov	sl, r3
   105b4:	0e24      	lsrs	r4, r4, #24
   105b6:	0015      	movs	r5, r2
   105b8:	00db      	lsls	r3, r3, #3
   105ba:	0e00      	lsrs	r0, r0, #24
   105bc:	4689      	mov	r9, r1
   105be:	00f6      	lsls	r6, r6, #3
   105c0:	28ff      	cmp	r0, #255	; 0xff
   105c2:	d100      	bne.n	105c6 <__aeabi_fsub+0x32>
   105c4:	e08f      	b.n	106e6 <__aeabi_fsub+0x152>
   105c6:	2101      	movs	r1, #1
   105c8:	464f      	mov	r7, r9
   105ca:	404f      	eors	r7, r1
   105cc:	0039      	movs	r1, r7
   105ce:	4291      	cmp	r1, r2
   105d0:	d066      	beq.n	106a0 <__aeabi_fsub+0x10c>
   105d2:	1a22      	subs	r2, r4, r0
   105d4:	2a00      	cmp	r2, #0
   105d6:	dc00      	bgt.n	105da <__aeabi_fsub+0x46>
   105d8:	e09d      	b.n	10716 <__aeabi_fsub+0x182>
   105da:	2800      	cmp	r0, #0
   105dc:	d13d      	bne.n	1065a <__aeabi_fsub+0xc6>
   105de:	2e00      	cmp	r6, #0
   105e0:	d100      	bne.n	105e4 <__aeabi_fsub+0x50>
   105e2:	e08b      	b.n	106fc <__aeabi_fsub+0x168>
   105e4:	1e51      	subs	r1, r2, #1
   105e6:	2900      	cmp	r1, #0
   105e8:	d000      	beq.n	105ec <__aeabi_fsub+0x58>
   105ea:	e0b5      	b.n	10758 <__aeabi_fsub+0x1c4>
   105ec:	2401      	movs	r4, #1
   105ee:	1b9b      	subs	r3, r3, r6
   105f0:	015a      	lsls	r2, r3, #5
   105f2:	d544      	bpl.n	1067e <__aeabi_fsub+0xea>
   105f4:	019b      	lsls	r3, r3, #6
   105f6:	099f      	lsrs	r7, r3, #6
   105f8:	0038      	movs	r0, r7
   105fa:	f000 f9cd 	bl	10998 <__clzsi2>
   105fe:	3805      	subs	r0, #5
   10600:	4087      	lsls	r7, r0
   10602:	4284      	cmp	r4, r0
   10604:	dd00      	ble.n	10608 <__aeabi_fsub+0x74>
   10606:	e096      	b.n	10736 <__aeabi_fsub+0x1a2>
   10608:	1b04      	subs	r4, r0, r4
   1060a:	003a      	movs	r2, r7
   1060c:	2020      	movs	r0, #32
   1060e:	3401      	adds	r4, #1
   10610:	40e2      	lsrs	r2, r4
   10612:	1b04      	subs	r4, r0, r4
   10614:	40a7      	lsls	r7, r4
   10616:	003b      	movs	r3, r7
   10618:	1e5f      	subs	r7, r3, #1
   1061a:	41bb      	sbcs	r3, r7
   1061c:	2400      	movs	r4, #0
   1061e:	4313      	orrs	r3, r2
   10620:	075a      	lsls	r2, r3, #29
   10622:	d004      	beq.n	1062e <__aeabi_fsub+0x9a>
   10624:	220f      	movs	r2, #15
   10626:	401a      	ands	r2, r3
   10628:	2a04      	cmp	r2, #4
   1062a:	d000      	beq.n	1062e <__aeabi_fsub+0x9a>
   1062c:	3304      	adds	r3, #4
   1062e:	015a      	lsls	r2, r3, #5
   10630:	d527      	bpl.n	10682 <__aeabi_fsub+0xee>
   10632:	3401      	adds	r4, #1
   10634:	2cff      	cmp	r4, #255	; 0xff
   10636:	d100      	bne.n	1063a <__aeabi_fsub+0xa6>
   10638:	e079      	b.n	1072e <__aeabi_fsub+0x19a>
   1063a:	2201      	movs	r2, #1
   1063c:	019b      	lsls	r3, r3, #6
   1063e:	0a5b      	lsrs	r3, r3, #9
   10640:	b2e4      	uxtb	r4, r4
   10642:	402a      	ands	r2, r5
   10644:	025b      	lsls	r3, r3, #9
   10646:	05e4      	lsls	r4, r4, #23
   10648:	0a58      	lsrs	r0, r3, #9
   1064a:	07d2      	lsls	r2, r2, #31
   1064c:	4320      	orrs	r0, r4
   1064e:	4310      	orrs	r0, r2
   10650:	bc1c      	pop	{r2, r3, r4}
   10652:	4690      	mov	r8, r2
   10654:	4699      	mov	r9, r3
   10656:	46a2      	mov	sl, r4
   10658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1065a:	2cff      	cmp	r4, #255	; 0xff
   1065c:	d0e0      	beq.n	10620 <__aeabi_fsub+0x8c>
   1065e:	2180      	movs	r1, #128	; 0x80
   10660:	04c9      	lsls	r1, r1, #19
   10662:	430e      	orrs	r6, r1
   10664:	2a1b      	cmp	r2, #27
   10666:	dc7b      	bgt.n	10760 <__aeabi_fsub+0x1cc>
   10668:	0031      	movs	r1, r6
   1066a:	2020      	movs	r0, #32
   1066c:	40d1      	lsrs	r1, r2
   1066e:	1a82      	subs	r2, r0, r2
   10670:	4096      	lsls	r6, r2
   10672:	1e72      	subs	r2, r6, #1
   10674:	4196      	sbcs	r6, r2
   10676:	430e      	orrs	r6, r1
   10678:	1b9b      	subs	r3, r3, r6
   1067a:	015a      	lsls	r2, r3, #5
   1067c:	d4ba      	bmi.n	105f4 <__aeabi_fsub+0x60>
   1067e:	075a      	lsls	r2, r3, #29
   10680:	d1d0      	bne.n	10624 <__aeabi_fsub+0x90>
   10682:	2201      	movs	r2, #1
   10684:	08df      	lsrs	r7, r3, #3
   10686:	402a      	ands	r2, r5
   10688:	2cff      	cmp	r4, #255	; 0xff
   1068a:	d133      	bne.n	106f4 <__aeabi_fsub+0x160>
   1068c:	2f00      	cmp	r7, #0
   1068e:	d100      	bne.n	10692 <__aeabi_fsub+0xfe>
   10690:	e0a8      	b.n	107e4 <__aeabi_fsub+0x250>
   10692:	2380      	movs	r3, #128	; 0x80
   10694:	03db      	lsls	r3, r3, #15
   10696:	433b      	orrs	r3, r7
   10698:	025b      	lsls	r3, r3, #9
   1069a:	0a5b      	lsrs	r3, r3, #9
   1069c:	24ff      	movs	r4, #255	; 0xff
   1069e:	e7d1      	b.n	10644 <__aeabi_fsub+0xb0>
   106a0:	1a21      	subs	r1, r4, r0
   106a2:	2900      	cmp	r1, #0
   106a4:	dd4c      	ble.n	10740 <__aeabi_fsub+0x1ac>
   106a6:	2800      	cmp	r0, #0
   106a8:	d02a      	beq.n	10700 <__aeabi_fsub+0x16c>
   106aa:	2cff      	cmp	r4, #255	; 0xff
   106ac:	d0b8      	beq.n	10620 <__aeabi_fsub+0x8c>
   106ae:	2080      	movs	r0, #128	; 0x80
   106b0:	04c0      	lsls	r0, r0, #19
   106b2:	4306      	orrs	r6, r0
   106b4:	291b      	cmp	r1, #27
   106b6:	dd00      	ble.n	106ba <__aeabi_fsub+0x126>
   106b8:	e0af      	b.n	1081a <__aeabi_fsub+0x286>
   106ba:	0030      	movs	r0, r6
   106bc:	2720      	movs	r7, #32
   106be:	40c8      	lsrs	r0, r1
   106c0:	1a79      	subs	r1, r7, r1
   106c2:	408e      	lsls	r6, r1
   106c4:	1e71      	subs	r1, r6, #1
   106c6:	418e      	sbcs	r6, r1
   106c8:	4306      	orrs	r6, r0
   106ca:	199b      	adds	r3, r3, r6
   106cc:	0159      	lsls	r1, r3, #5
   106ce:	d5d6      	bpl.n	1067e <__aeabi_fsub+0xea>
   106d0:	3401      	adds	r4, #1
   106d2:	2cff      	cmp	r4, #255	; 0xff
   106d4:	d100      	bne.n	106d8 <__aeabi_fsub+0x144>
   106d6:	e085      	b.n	107e4 <__aeabi_fsub+0x250>
   106d8:	2201      	movs	r2, #1
   106da:	497a      	ldr	r1, [pc, #488]	; (108c4 <__aeabi_fsub+0x330>)
   106dc:	401a      	ands	r2, r3
   106de:	085b      	lsrs	r3, r3, #1
   106e0:	400b      	ands	r3, r1
   106e2:	4313      	orrs	r3, r2
   106e4:	e79c      	b.n	10620 <__aeabi_fsub+0x8c>
   106e6:	2e00      	cmp	r6, #0
   106e8:	d000      	beq.n	106ec <__aeabi_fsub+0x158>
   106ea:	e770      	b.n	105ce <__aeabi_fsub+0x3a>
   106ec:	e76b      	b.n	105c6 <__aeabi_fsub+0x32>
   106ee:	1e3b      	subs	r3, r7, #0
   106f0:	d1c5      	bne.n	1067e <__aeabi_fsub+0xea>
   106f2:	2200      	movs	r2, #0
   106f4:	027b      	lsls	r3, r7, #9
   106f6:	0a5b      	lsrs	r3, r3, #9
   106f8:	b2e4      	uxtb	r4, r4
   106fa:	e7a3      	b.n	10644 <__aeabi_fsub+0xb0>
   106fc:	0014      	movs	r4, r2
   106fe:	e78f      	b.n	10620 <__aeabi_fsub+0x8c>
   10700:	2e00      	cmp	r6, #0
   10702:	d04d      	beq.n	107a0 <__aeabi_fsub+0x20c>
   10704:	1e48      	subs	r0, r1, #1
   10706:	2800      	cmp	r0, #0
   10708:	d157      	bne.n	107ba <__aeabi_fsub+0x226>
   1070a:	199b      	adds	r3, r3, r6
   1070c:	2401      	movs	r4, #1
   1070e:	015a      	lsls	r2, r3, #5
   10710:	d5b5      	bpl.n	1067e <__aeabi_fsub+0xea>
   10712:	2402      	movs	r4, #2
   10714:	e7e0      	b.n	106d8 <__aeabi_fsub+0x144>
   10716:	2a00      	cmp	r2, #0
   10718:	d125      	bne.n	10766 <__aeabi_fsub+0x1d2>
   1071a:	1c62      	adds	r2, r4, #1
   1071c:	b2d2      	uxtb	r2, r2
   1071e:	2a01      	cmp	r2, #1
   10720:	dd72      	ble.n	10808 <__aeabi_fsub+0x274>
   10722:	1b9f      	subs	r7, r3, r6
   10724:	017a      	lsls	r2, r7, #5
   10726:	d535      	bpl.n	10794 <__aeabi_fsub+0x200>
   10728:	1af7      	subs	r7, r6, r3
   1072a:	000d      	movs	r5, r1
   1072c:	e764      	b.n	105f8 <__aeabi_fsub+0x64>
   1072e:	2201      	movs	r2, #1
   10730:	2300      	movs	r3, #0
   10732:	402a      	ands	r2, r5
   10734:	e786      	b.n	10644 <__aeabi_fsub+0xb0>
   10736:	003b      	movs	r3, r7
   10738:	4a63      	ldr	r2, [pc, #396]	; (108c8 <__aeabi_fsub+0x334>)
   1073a:	1a24      	subs	r4, r4, r0
   1073c:	4013      	ands	r3, r2
   1073e:	e76f      	b.n	10620 <__aeabi_fsub+0x8c>
   10740:	2900      	cmp	r1, #0
   10742:	d16c      	bne.n	1081e <__aeabi_fsub+0x28a>
   10744:	1c61      	adds	r1, r4, #1
   10746:	b2c8      	uxtb	r0, r1
   10748:	2801      	cmp	r0, #1
   1074a:	dd4e      	ble.n	107ea <__aeabi_fsub+0x256>
   1074c:	29ff      	cmp	r1, #255	; 0xff
   1074e:	d049      	beq.n	107e4 <__aeabi_fsub+0x250>
   10750:	199b      	adds	r3, r3, r6
   10752:	085b      	lsrs	r3, r3, #1
   10754:	000c      	movs	r4, r1
   10756:	e763      	b.n	10620 <__aeabi_fsub+0x8c>
   10758:	2aff      	cmp	r2, #255	; 0xff
   1075a:	d041      	beq.n	107e0 <__aeabi_fsub+0x24c>
   1075c:	000a      	movs	r2, r1
   1075e:	e781      	b.n	10664 <__aeabi_fsub+0xd0>
   10760:	2601      	movs	r6, #1
   10762:	1b9b      	subs	r3, r3, r6
   10764:	e789      	b.n	1067a <__aeabi_fsub+0xe6>
   10766:	2c00      	cmp	r4, #0
   10768:	d01c      	beq.n	107a4 <__aeabi_fsub+0x210>
   1076a:	28ff      	cmp	r0, #255	; 0xff
   1076c:	d021      	beq.n	107b2 <__aeabi_fsub+0x21e>
   1076e:	2480      	movs	r4, #128	; 0x80
   10770:	04e4      	lsls	r4, r4, #19
   10772:	4252      	negs	r2, r2
   10774:	4323      	orrs	r3, r4
   10776:	2a1b      	cmp	r2, #27
   10778:	dd00      	ble.n	1077c <__aeabi_fsub+0x1e8>
   1077a:	e096      	b.n	108aa <__aeabi_fsub+0x316>
   1077c:	001c      	movs	r4, r3
   1077e:	2520      	movs	r5, #32
   10780:	40d4      	lsrs	r4, r2
   10782:	1aaa      	subs	r2, r5, r2
   10784:	4093      	lsls	r3, r2
   10786:	1e5a      	subs	r2, r3, #1
   10788:	4193      	sbcs	r3, r2
   1078a:	4323      	orrs	r3, r4
   1078c:	1af3      	subs	r3, r6, r3
   1078e:	0004      	movs	r4, r0
   10790:	000d      	movs	r5, r1
   10792:	e72d      	b.n	105f0 <__aeabi_fsub+0x5c>
   10794:	2f00      	cmp	r7, #0
   10796:	d000      	beq.n	1079a <__aeabi_fsub+0x206>
   10798:	e72e      	b.n	105f8 <__aeabi_fsub+0x64>
   1079a:	2200      	movs	r2, #0
   1079c:	2400      	movs	r4, #0
   1079e:	e7a9      	b.n	106f4 <__aeabi_fsub+0x160>
   107a0:	000c      	movs	r4, r1
   107a2:	e73d      	b.n	10620 <__aeabi_fsub+0x8c>
   107a4:	2b00      	cmp	r3, #0
   107a6:	d058      	beq.n	1085a <__aeabi_fsub+0x2c6>
   107a8:	43d2      	mvns	r2, r2
   107aa:	2a00      	cmp	r2, #0
   107ac:	d0ee      	beq.n	1078c <__aeabi_fsub+0x1f8>
   107ae:	28ff      	cmp	r0, #255	; 0xff
   107b0:	d1e1      	bne.n	10776 <__aeabi_fsub+0x1e2>
   107b2:	0033      	movs	r3, r6
   107b4:	24ff      	movs	r4, #255	; 0xff
   107b6:	000d      	movs	r5, r1
   107b8:	e732      	b.n	10620 <__aeabi_fsub+0x8c>
   107ba:	29ff      	cmp	r1, #255	; 0xff
   107bc:	d010      	beq.n	107e0 <__aeabi_fsub+0x24c>
   107be:	0001      	movs	r1, r0
   107c0:	e778      	b.n	106b4 <__aeabi_fsub+0x120>
   107c2:	2b00      	cmp	r3, #0
   107c4:	d06e      	beq.n	108a4 <__aeabi_fsub+0x310>
   107c6:	24ff      	movs	r4, #255	; 0xff
   107c8:	2e00      	cmp	r6, #0
   107ca:	d100      	bne.n	107ce <__aeabi_fsub+0x23a>
   107cc:	e728      	b.n	10620 <__aeabi_fsub+0x8c>
   107ce:	2280      	movs	r2, #128	; 0x80
   107d0:	4651      	mov	r1, sl
   107d2:	03d2      	lsls	r2, r2, #15
   107d4:	4211      	tst	r1, r2
   107d6:	d003      	beq.n	107e0 <__aeabi_fsub+0x24c>
   107d8:	4661      	mov	r1, ip
   107da:	4211      	tst	r1, r2
   107dc:	d100      	bne.n	107e0 <__aeabi_fsub+0x24c>
   107de:	0033      	movs	r3, r6
   107e0:	24ff      	movs	r4, #255	; 0xff
   107e2:	e71d      	b.n	10620 <__aeabi_fsub+0x8c>
   107e4:	24ff      	movs	r4, #255	; 0xff
   107e6:	2300      	movs	r3, #0
   107e8:	e72c      	b.n	10644 <__aeabi_fsub+0xb0>
   107ea:	2c00      	cmp	r4, #0
   107ec:	d1e9      	bne.n	107c2 <__aeabi_fsub+0x22e>
   107ee:	2b00      	cmp	r3, #0
   107f0:	d063      	beq.n	108ba <__aeabi_fsub+0x326>
   107f2:	2e00      	cmp	r6, #0
   107f4:	d100      	bne.n	107f8 <__aeabi_fsub+0x264>
   107f6:	e713      	b.n	10620 <__aeabi_fsub+0x8c>
   107f8:	199b      	adds	r3, r3, r6
   107fa:	015a      	lsls	r2, r3, #5
   107fc:	d400      	bmi.n	10800 <__aeabi_fsub+0x26c>
   107fe:	e73e      	b.n	1067e <__aeabi_fsub+0xea>
   10800:	4a31      	ldr	r2, [pc, #196]	; (108c8 <__aeabi_fsub+0x334>)
   10802:	000c      	movs	r4, r1
   10804:	4013      	ands	r3, r2
   10806:	e70b      	b.n	10620 <__aeabi_fsub+0x8c>
   10808:	2c00      	cmp	r4, #0
   1080a:	d11e      	bne.n	1084a <__aeabi_fsub+0x2b6>
   1080c:	2b00      	cmp	r3, #0
   1080e:	d12f      	bne.n	10870 <__aeabi_fsub+0x2dc>
   10810:	2e00      	cmp	r6, #0
   10812:	d04f      	beq.n	108b4 <__aeabi_fsub+0x320>
   10814:	0033      	movs	r3, r6
   10816:	000d      	movs	r5, r1
   10818:	e702      	b.n	10620 <__aeabi_fsub+0x8c>
   1081a:	2601      	movs	r6, #1
   1081c:	e755      	b.n	106ca <__aeabi_fsub+0x136>
   1081e:	2c00      	cmp	r4, #0
   10820:	d11f      	bne.n	10862 <__aeabi_fsub+0x2ce>
   10822:	2b00      	cmp	r3, #0
   10824:	d043      	beq.n	108ae <__aeabi_fsub+0x31a>
   10826:	43c9      	mvns	r1, r1
   10828:	2900      	cmp	r1, #0
   1082a:	d00b      	beq.n	10844 <__aeabi_fsub+0x2b0>
   1082c:	28ff      	cmp	r0, #255	; 0xff
   1082e:	d039      	beq.n	108a4 <__aeabi_fsub+0x310>
   10830:	291b      	cmp	r1, #27
   10832:	dc44      	bgt.n	108be <__aeabi_fsub+0x32a>
   10834:	001c      	movs	r4, r3
   10836:	2720      	movs	r7, #32
   10838:	40cc      	lsrs	r4, r1
   1083a:	1a79      	subs	r1, r7, r1
   1083c:	408b      	lsls	r3, r1
   1083e:	1e59      	subs	r1, r3, #1
   10840:	418b      	sbcs	r3, r1
   10842:	4323      	orrs	r3, r4
   10844:	199b      	adds	r3, r3, r6
   10846:	0004      	movs	r4, r0
   10848:	e740      	b.n	106cc <__aeabi_fsub+0x138>
   1084a:	2b00      	cmp	r3, #0
   1084c:	d11a      	bne.n	10884 <__aeabi_fsub+0x2f0>
   1084e:	2e00      	cmp	r6, #0
   10850:	d124      	bne.n	1089c <__aeabi_fsub+0x308>
   10852:	2780      	movs	r7, #128	; 0x80
   10854:	2200      	movs	r2, #0
   10856:	03ff      	lsls	r7, r7, #15
   10858:	e71b      	b.n	10692 <__aeabi_fsub+0xfe>
   1085a:	0033      	movs	r3, r6
   1085c:	0004      	movs	r4, r0
   1085e:	000d      	movs	r5, r1
   10860:	e6de      	b.n	10620 <__aeabi_fsub+0x8c>
   10862:	28ff      	cmp	r0, #255	; 0xff
   10864:	d01e      	beq.n	108a4 <__aeabi_fsub+0x310>
   10866:	2480      	movs	r4, #128	; 0x80
   10868:	04e4      	lsls	r4, r4, #19
   1086a:	4249      	negs	r1, r1
   1086c:	4323      	orrs	r3, r4
   1086e:	e7df      	b.n	10830 <__aeabi_fsub+0x29c>
   10870:	2e00      	cmp	r6, #0
   10872:	d100      	bne.n	10876 <__aeabi_fsub+0x2e2>
   10874:	e6d4      	b.n	10620 <__aeabi_fsub+0x8c>
   10876:	1b9f      	subs	r7, r3, r6
   10878:	017a      	lsls	r2, r7, #5
   1087a:	d400      	bmi.n	1087e <__aeabi_fsub+0x2ea>
   1087c:	e737      	b.n	106ee <__aeabi_fsub+0x15a>
   1087e:	1af3      	subs	r3, r6, r3
   10880:	000d      	movs	r5, r1
   10882:	e6cd      	b.n	10620 <__aeabi_fsub+0x8c>
   10884:	24ff      	movs	r4, #255	; 0xff
   10886:	2e00      	cmp	r6, #0
   10888:	d100      	bne.n	1088c <__aeabi_fsub+0x2f8>
   1088a:	e6c9      	b.n	10620 <__aeabi_fsub+0x8c>
   1088c:	2280      	movs	r2, #128	; 0x80
   1088e:	4650      	mov	r0, sl
   10890:	03d2      	lsls	r2, r2, #15
   10892:	4210      	tst	r0, r2
   10894:	d0a4      	beq.n	107e0 <__aeabi_fsub+0x24c>
   10896:	4660      	mov	r0, ip
   10898:	4210      	tst	r0, r2
   1089a:	d1a1      	bne.n	107e0 <__aeabi_fsub+0x24c>
   1089c:	0033      	movs	r3, r6
   1089e:	000d      	movs	r5, r1
   108a0:	24ff      	movs	r4, #255	; 0xff
   108a2:	e6bd      	b.n	10620 <__aeabi_fsub+0x8c>
   108a4:	0033      	movs	r3, r6
   108a6:	24ff      	movs	r4, #255	; 0xff
   108a8:	e6ba      	b.n	10620 <__aeabi_fsub+0x8c>
   108aa:	2301      	movs	r3, #1
   108ac:	e76e      	b.n	1078c <__aeabi_fsub+0x1f8>
   108ae:	0033      	movs	r3, r6
   108b0:	0004      	movs	r4, r0
   108b2:	e6b5      	b.n	10620 <__aeabi_fsub+0x8c>
   108b4:	2700      	movs	r7, #0
   108b6:	2200      	movs	r2, #0
   108b8:	e71c      	b.n	106f4 <__aeabi_fsub+0x160>
   108ba:	0033      	movs	r3, r6
   108bc:	e6b0      	b.n	10620 <__aeabi_fsub+0x8c>
   108be:	2301      	movs	r3, #1
   108c0:	e7c0      	b.n	10844 <__aeabi_fsub+0x2b0>
   108c2:	46c0      	nop			; (mov r8, r8)
   108c4:	7dffffff 	.word	0x7dffffff
   108c8:	fbffffff 	.word	0xfbffffff

000108cc <__aeabi_f2iz>:
   108cc:	0241      	lsls	r1, r0, #9
   108ce:	0043      	lsls	r3, r0, #1
   108d0:	0fc2      	lsrs	r2, r0, #31
   108d2:	0a49      	lsrs	r1, r1, #9
   108d4:	0e1b      	lsrs	r3, r3, #24
   108d6:	2000      	movs	r0, #0
   108d8:	2b7e      	cmp	r3, #126	; 0x7e
   108da:	dd0d      	ble.n	108f8 <__aeabi_f2iz+0x2c>
   108dc:	2b9d      	cmp	r3, #157	; 0x9d
   108de:	dc0c      	bgt.n	108fa <__aeabi_f2iz+0x2e>
   108e0:	2080      	movs	r0, #128	; 0x80
   108e2:	0400      	lsls	r0, r0, #16
   108e4:	4301      	orrs	r1, r0
   108e6:	2b95      	cmp	r3, #149	; 0x95
   108e8:	dc0a      	bgt.n	10900 <__aeabi_f2iz+0x34>
   108ea:	2096      	movs	r0, #150	; 0x96
   108ec:	1ac3      	subs	r3, r0, r3
   108ee:	40d9      	lsrs	r1, r3
   108f0:	4248      	negs	r0, r1
   108f2:	2a00      	cmp	r2, #0
   108f4:	d100      	bne.n	108f8 <__aeabi_f2iz+0x2c>
   108f6:	0008      	movs	r0, r1
   108f8:	4770      	bx	lr
   108fa:	4b03      	ldr	r3, [pc, #12]	; (10908 <__aeabi_f2iz+0x3c>)
   108fc:	18d0      	adds	r0, r2, r3
   108fe:	e7fb      	b.n	108f8 <__aeabi_f2iz+0x2c>
   10900:	3b96      	subs	r3, #150	; 0x96
   10902:	4099      	lsls	r1, r3
   10904:	e7f4      	b.n	108f0 <__aeabi_f2iz+0x24>
   10906:	46c0      	nop			; (mov r8, r8)
   10908:	7fffffff 	.word	0x7fffffff

0001090c <__aeabi_ui2f>:
   1090c:	b510      	push	{r4, lr}
   1090e:	1e04      	subs	r4, r0, #0
   10910:	d027      	beq.n	10962 <__aeabi_ui2f+0x56>
   10912:	f000 f841 	bl	10998 <__clzsi2>
   10916:	239e      	movs	r3, #158	; 0x9e
   10918:	1a1b      	subs	r3, r3, r0
   1091a:	2b96      	cmp	r3, #150	; 0x96
   1091c:	dc0a      	bgt.n	10934 <__aeabi_ui2f+0x28>
   1091e:	2296      	movs	r2, #150	; 0x96
   10920:	1ad2      	subs	r2, r2, r3
   10922:	4094      	lsls	r4, r2
   10924:	0264      	lsls	r4, r4, #9
   10926:	0a64      	lsrs	r4, r4, #9
   10928:	b2db      	uxtb	r3, r3
   1092a:	0264      	lsls	r4, r4, #9
   1092c:	05db      	lsls	r3, r3, #23
   1092e:	0a60      	lsrs	r0, r4, #9
   10930:	4318      	orrs	r0, r3
   10932:	bd10      	pop	{r4, pc}
   10934:	2b99      	cmp	r3, #153	; 0x99
   10936:	dc17      	bgt.n	10968 <__aeabi_ui2f+0x5c>
   10938:	2299      	movs	r2, #153	; 0x99
   1093a:	1ad2      	subs	r2, r2, r3
   1093c:	2a00      	cmp	r2, #0
   1093e:	dd27      	ble.n	10990 <__aeabi_ui2f+0x84>
   10940:	4094      	lsls	r4, r2
   10942:	0022      	movs	r2, r4
   10944:	4c13      	ldr	r4, [pc, #76]	; (10994 <__aeabi_ui2f+0x88>)
   10946:	4014      	ands	r4, r2
   10948:	0751      	lsls	r1, r2, #29
   1094a:	d004      	beq.n	10956 <__aeabi_ui2f+0x4a>
   1094c:	210f      	movs	r1, #15
   1094e:	400a      	ands	r2, r1
   10950:	2a04      	cmp	r2, #4
   10952:	d000      	beq.n	10956 <__aeabi_ui2f+0x4a>
   10954:	3404      	adds	r4, #4
   10956:	0162      	lsls	r2, r4, #5
   10958:	d412      	bmi.n	10980 <__aeabi_ui2f+0x74>
   1095a:	01a4      	lsls	r4, r4, #6
   1095c:	0a64      	lsrs	r4, r4, #9
   1095e:	b2db      	uxtb	r3, r3
   10960:	e7e3      	b.n	1092a <__aeabi_ui2f+0x1e>
   10962:	2300      	movs	r3, #0
   10964:	2400      	movs	r4, #0
   10966:	e7e0      	b.n	1092a <__aeabi_ui2f+0x1e>
   10968:	22b9      	movs	r2, #185	; 0xb9
   1096a:	0021      	movs	r1, r4
   1096c:	1ad2      	subs	r2, r2, r3
   1096e:	4091      	lsls	r1, r2
   10970:	000a      	movs	r2, r1
   10972:	1e51      	subs	r1, r2, #1
   10974:	418a      	sbcs	r2, r1
   10976:	2105      	movs	r1, #5
   10978:	1a09      	subs	r1, r1, r0
   1097a:	40cc      	lsrs	r4, r1
   1097c:	4314      	orrs	r4, r2
   1097e:	e7db      	b.n	10938 <__aeabi_ui2f+0x2c>
   10980:	4b04      	ldr	r3, [pc, #16]	; (10994 <__aeabi_ui2f+0x88>)
   10982:	401c      	ands	r4, r3
   10984:	239f      	movs	r3, #159	; 0x9f
   10986:	01a4      	lsls	r4, r4, #6
   10988:	1a1b      	subs	r3, r3, r0
   1098a:	0a64      	lsrs	r4, r4, #9
   1098c:	b2db      	uxtb	r3, r3
   1098e:	e7cc      	b.n	1092a <__aeabi_ui2f+0x1e>
   10990:	0022      	movs	r2, r4
   10992:	e7d7      	b.n	10944 <__aeabi_ui2f+0x38>
   10994:	fbffffff 	.word	0xfbffffff

00010998 <__clzsi2>:
   10998:	211c      	movs	r1, #28
   1099a:	2301      	movs	r3, #1
   1099c:	041b      	lsls	r3, r3, #16
   1099e:	4298      	cmp	r0, r3
   109a0:	d301      	bcc.n	109a6 <__clzsi2+0xe>
   109a2:	0c00      	lsrs	r0, r0, #16
   109a4:	3910      	subs	r1, #16
   109a6:	0a1b      	lsrs	r3, r3, #8
   109a8:	4298      	cmp	r0, r3
   109aa:	d301      	bcc.n	109b0 <__clzsi2+0x18>
   109ac:	0a00      	lsrs	r0, r0, #8
   109ae:	3908      	subs	r1, #8
   109b0:	091b      	lsrs	r3, r3, #4
   109b2:	4298      	cmp	r0, r3
   109b4:	d301      	bcc.n	109ba <__clzsi2+0x22>
   109b6:	0900      	lsrs	r0, r0, #4
   109b8:	3904      	subs	r1, #4
   109ba:	a202      	add	r2, pc, #8	; (adr r2, 109c4 <__clzsi2+0x2c>)
   109bc:	5c10      	ldrb	r0, [r2, r0]
   109be:	1840      	adds	r0, r0, r1
   109c0:	4770      	bx	lr
   109c2:	46c0      	nop			; (mov r8, r8)
   109c4:	02020304 	.word	0x02020304
   109c8:	01010101 	.word	0x01010101
	...

000109d4 <__assert_func>:
   109d4:	b530      	push	{r4, r5, lr}
   109d6:	001c      	movs	r4, r3
   109d8:	4b09      	ldr	r3, [pc, #36]	; (10a00 <__assert_func+0x2c>)
   109da:	0005      	movs	r5, r0
   109dc:	681b      	ldr	r3, [r3, #0]
   109de:	b085      	sub	sp, #20
   109e0:	68d8      	ldr	r0, [r3, #12]
   109e2:	4b08      	ldr	r3, [pc, #32]	; (10a04 <__assert_func+0x30>)
   109e4:	2a00      	cmp	r2, #0
   109e6:	d101      	bne.n	109ec <__assert_func+0x18>
   109e8:	4b07      	ldr	r3, [pc, #28]	; (10a08 <__assert_func+0x34>)
   109ea:	001a      	movs	r2, r3
   109ec:	9202      	str	r2, [sp, #8]
   109ee:	9301      	str	r3, [sp, #4]
   109f0:	9100      	str	r1, [sp, #0]
   109f2:	002b      	movs	r3, r5
   109f4:	0022      	movs	r2, r4
   109f6:	4905      	ldr	r1, [pc, #20]	; (10a0c <__assert_func+0x38>)
   109f8:	f000 f80a 	bl	10a10 <fiprintf>
   109fc:	f000 fd26 	bl	1144c <abort>
   10a00:	20000038 	.word	0x20000038
   10a04:	00012954 	.word	0x00012954
   10a08:	0001298f 	.word	0x0001298f
   10a0c:	00012961 	.word	0x00012961

00010a10 <fiprintf>:
   10a10:	b40e      	push	{r1, r2, r3}
   10a12:	b503      	push	{r0, r1, lr}
   10a14:	0001      	movs	r1, r0
   10a16:	ab03      	add	r3, sp, #12
   10a18:	4804      	ldr	r0, [pc, #16]	; (10a2c <fiprintf+0x1c>)
   10a1a:	cb04      	ldmia	r3!, {r2}
   10a1c:	6800      	ldr	r0, [r0, #0]
   10a1e:	9301      	str	r3, [sp, #4]
   10a20:	f000 f872 	bl	10b08 <_vfiprintf_r>
   10a24:	b002      	add	sp, #8
   10a26:	bc08      	pop	{r3}
   10a28:	b003      	add	sp, #12
   10a2a:	4718      	bx	r3
   10a2c:	20000038 	.word	0x20000038

00010a30 <__libc_init_array>:
   10a30:	b570      	push	{r4, r5, r6, lr}
   10a32:	2600      	movs	r6, #0
   10a34:	4d0c      	ldr	r5, [pc, #48]	; (10a68 <__libc_init_array+0x38>)
   10a36:	4c0d      	ldr	r4, [pc, #52]	; (10a6c <__libc_init_array+0x3c>)
   10a38:	1b64      	subs	r4, r4, r5
   10a3a:	10a4      	asrs	r4, r4, #2
   10a3c:	42a6      	cmp	r6, r4
   10a3e:	d109      	bne.n	10a54 <__libc_init_array+0x24>
   10a40:	2600      	movs	r6, #0
   10a42:	f001 fff1 	bl	12a28 <_init>
   10a46:	4d0a      	ldr	r5, [pc, #40]	; (10a70 <__libc_init_array+0x40>)
   10a48:	4c0a      	ldr	r4, [pc, #40]	; (10a74 <__libc_init_array+0x44>)
   10a4a:	1b64      	subs	r4, r4, r5
   10a4c:	10a4      	asrs	r4, r4, #2
   10a4e:	42a6      	cmp	r6, r4
   10a50:	d105      	bne.n	10a5e <__libc_init_array+0x2e>
   10a52:	bd70      	pop	{r4, r5, r6, pc}
   10a54:	00b3      	lsls	r3, r6, #2
   10a56:	58eb      	ldr	r3, [r5, r3]
   10a58:	4798      	blx	r3
   10a5a:	3601      	adds	r6, #1
   10a5c:	e7ee      	b.n	10a3c <__libc_init_array+0xc>
   10a5e:	00b3      	lsls	r3, r6, #2
   10a60:	58eb      	ldr	r3, [r5, r3]
   10a62:	4798      	blx	r3
   10a64:	3601      	adds	r6, #1
   10a66:	e7f2      	b.n	10a4e <__libc_init_array+0x1e>
   10a68:	00012a34 	.word	0x00012a34
   10a6c:	00012a34 	.word	0x00012a34
   10a70:	00012a34 	.word	0x00012a34
   10a74:	00012a38 	.word	0x00012a38

00010a78 <memcmp>:
   10a78:	b530      	push	{r4, r5, lr}
   10a7a:	2400      	movs	r4, #0
   10a7c:	42a2      	cmp	r2, r4
   10a7e:	d101      	bne.n	10a84 <memcmp+0xc>
   10a80:	2000      	movs	r0, #0
   10a82:	e005      	b.n	10a90 <memcmp+0x18>
   10a84:	5d03      	ldrb	r3, [r0, r4]
   10a86:	1c65      	adds	r5, r4, #1
   10a88:	5d0c      	ldrb	r4, [r1, r4]
   10a8a:	42a3      	cmp	r3, r4
   10a8c:	d001      	beq.n	10a92 <memcmp+0x1a>
   10a8e:	1b18      	subs	r0, r3, r4
   10a90:	bd30      	pop	{r4, r5, pc}
   10a92:	002c      	movs	r4, r5
   10a94:	e7f2      	b.n	10a7c <memcmp+0x4>

00010a96 <memcpy>:
   10a96:	2300      	movs	r3, #0
   10a98:	b510      	push	{r4, lr}
   10a9a:	429a      	cmp	r2, r3
   10a9c:	d100      	bne.n	10aa0 <memcpy+0xa>
   10a9e:	bd10      	pop	{r4, pc}
   10aa0:	5ccc      	ldrb	r4, [r1, r3]
   10aa2:	54c4      	strb	r4, [r0, r3]
   10aa4:	3301      	adds	r3, #1
   10aa6:	e7f8      	b.n	10a9a <memcpy+0x4>

00010aa8 <memset>:
   10aa8:	0003      	movs	r3, r0
   10aaa:	1882      	adds	r2, r0, r2
   10aac:	4293      	cmp	r3, r2
   10aae:	d100      	bne.n	10ab2 <memset+0xa>
   10ab0:	4770      	bx	lr
   10ab2:	7019      	strb	r1, [r3, #0]
   10ab4:	3301      	adds	r3, #1
   10ab6:	e7f9      	b.n	10aac <memset+0x4>

00010ab8 <__sfputc_r>:
   10ab8:	6893      	ldr	r3, [r2, #8]
   10aba:	b510      	push	{r4, lr}
   10abc:	3b01      	subs	r3, #1
   10abe:	6093      	str	r3, [r2, #8]
   10ac0:	2b00      	cmp	r3, #0
   10ac2:	da05      	bge.n	10ad0 <__sfputc_r+0x18>
   10ac4:	6994      	ldr	r4, [r2, #24]
   10ac6:	42a3      	cmp	r3, r4
   10ac8:	db08      	blt.n	10adc <__sfputc_r+0x24>
   10aca:	b2cb      	uxtb	r3, r1
   10acc:	2b0a      	cmp	r3, #10
   10ace:	d005      	beq.n	10adc <__sfputc_r+0x24>
   10ad0:	6813      	ldr	r3, [r2, #0]
   10ad2:	1c58      	adds	r0, r3, #1
   10ad4:	6010      	str	r0, [r2, #0]
   10ad6:	7019      	strb	r1, [r3, #0]
   10ad8:	b2c8      	uxtb	r0, r1
   10ada:	bd10      	pop	{r4, pc}
   10adc:	f000 fbea 	bl	112b4 <__swbuf_r>
   10ae0:	e7fb      	b.n	10ada <__sfputc_r+0x22>

00010ae2 <__sfputs_r>:
   10ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ae4:	0006      	movs	r6, r0
   10ae6:	000f      	movs	r7, r1
   10ae8:	0014      	movs	r4, r2
   10aea:	18d5      	adds	r5, r2, r3
   10aec:	42ac      	cmp	r4, r5
   10aee:	d101      	bne.n	10af4 <__sfputs_r+0x12>
   10af0:	2000      	movs	r0, #0
   10af2:	e007      	b.n	10b04 <__sfputs_r+0x22>
   10af4:	7821      	ldrb	r1, [r4, #0]
   10af6:	003a      	movs	r2, r7
   10af8:	0030      	movs	r0, r6
   10afa:	f7ff ffdd 	bl	10ab8 <__sfputc_r>
   10afe:	3401      	adds	r4, #1
   10b00:	1c43      	adds	r3, r0, #1
   10b02:	d1f3      	bne.n	10aec <__sfputs_r+0xa>
   10b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b06:	Address 0x00010b06 is out of bounds.


00010b08 <_vfiprintf_r>:
   10b08:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b0a:	b09f      	sub	sp, #124	; 0x7c
   10b0c:	0006      	movs	r6, r0
   10b0e:	000f      	movs	r7, r1
   10b10:	0014      	movs	r4, r2
   10b12:	9305      	str	r3, [sp, #20]
   10b14:	2800      	cmp	r0, #0
   10b16:	d004      	beq.n	10b22 <_vfiprintf_r+0x1a>
   10b18:	6983      	ldr	r3, [r0, #24]
   10b1a:	2b00      	cmp	r3, #0
   10b1c:	d101      	bne.n	10b22 <_vfiprintf_r+0x1a>
   10b1e:	f000 fd95 	bl	1164c <__sinit>
   10b22:	4b7f      	ldr	r3, [pc, #508]	; (10d20 <_vfiprintf_r+0x218>)
   10b24:	429f      	cmp	r7, r3
   10b26:	d15c      	bne.n	10be2 <_vfiprintf_r+0xda>
   10b28:	6877      	ldr	r7, [r6, #4]
   10b2a:	89bb      	ldrh	r3, [r7, #12]
   10b2c:	071b      	lsls	r3, r3, #28
   10b2e:	d562      	bpl.n	10bf6 <_vfiprintf_r+0xee>
   10b30:	693b      	ldr	r3, [r7, #16]
   10b32:	2b00      	cmp	r3, #0
   10b34:	d05f      	beq.n	10bf6 <_vfiprintf_r+0xee>
   10b36:	2300      	movs	r3, #0
   10b38:	ad06      	add	r5, sp, #24
   10b3a:	616b      	str	r3, [r5, #20]
   10b3c:	3320      	adds	r3, #32
   10b3e:	766b      	strb	r3, [r5, #25]
   10b40:	3310      	adds	r3, #16
   10b42:	76ab      	strb	r3, [r5, #26]
   10b44:	9402      	str	r4, [sp, #8]
   10b46:	9c02      	ldr	r4, [sp, #8]
   10b48:	7823      	ldrb	r3, [r4, #0]
   10b4a:	2b00      	cmp	r3, #0
   10b4c:	d15d      	bne.n	10c0a <_vfiprintf_r+0x102>
   10b4e:	9b02      	ldr	r3, [sp, #8]
   10b50:	1ae3      	subs	r3, r4, r3
   10b52:	9304      	str	r3, [sp, #16]
   10b54:	d00d      	beq.n	10b72 <_vfiprintf_r+0x6a>
   10b56:	9b04      	ldr	r3, [sp, #16]
   10b58:	9a02      	ldr	r2, [sp, #8]
   10b5a:	0039      	movs	r1, r7
   10b5c:	0030      	movs	r0, r6
   10b5e:	f7ff ffc0 	bl	10ae2 <__sfputs_r>
   10b62:	1c43      	adds	r3, r0, #1
   10b64:	d100      	bne.n	10b68 <_vfiprintf_r+0x60>
   10b66:	e0cc      	b.n	10d02 <_vfiprintf_r+0x1fa>
   10b68:	696a      	ldr	r2, [r5, #20]
   10b6a:	9b04      	ldr	r3, [sp, #16]
   10b6c:	4694      	mov	ip, r2
   10b6e:	4463      	add	r3, ip
   10b70:	616b      	str	r3, [r5, #20]
   10b72:	7823      	ldrb	r3, [r4, #0]
   10b74:	2b00      	cmp	r3, #0
   10b76:	d100      	bne.n	10b7a <_vfiprintf_r+0x72>
   10b78:	e0c3      	b.n	10d02 <_vfiprintf_r+0x1fa>
   10b7a:	2201      	movs	r2, #1
   10b7c:	2300      	movs	r3, #0
   10b7e:	4252      	negs	r2, r2
   10b80:	606a      	str	r2, [r5, #4]
   10b82:	a902      	add	r1, sp, #8
   10b84:	3254      	adds	r2, #84	; 0x54
   10b86:	1852      	adds	r2, r2, r1
   10b88:	3401      	adds	r4, #1
   10b8a:	602b      	str	r3, [r5, #0]
   10b8c:	60eb      	str	r3, [r5, #12]
   10b8e:	60ab      	str	r3, [r5, #8]
   10b90:	7013      	strb	r3, [r2, #0]
   10b92:	65ab      	str	r3, [r5, #88]	; 0x58
   10b94:	7821      	ldrb	r1, [r4, #0]
   10b96:	2205      	movs	r2, #5
   10b98:	4862      	ldr	r0, [pc, #392]	; (10d24 <_vfiprintf_r+0x21c>)
   10b9a:	f000 fe63 	bl	11864 <memchr>
   10b9e:	1c63      	adds	r3, r4, #1
   10ba0:	469c      	mov	ip, r3
   10ba2:	2800      	cmp	r0, #0
   10ba4:	d135      	bne.n	10c12 <_vfiprintf_r+0x10a>
   10ba6:	6829      	ldr	r1, [r5, #0]
   10ba8:	06cb      	lsls	r3, r1, #27
   10baa:	d504      	bpl.n	10bb6 <_vfiprintf_r+0xae>
   10bac:	2353      	movs	r3, #83	; 0x53
   10bae:	aa02      	add	r2, sp, #8
   10bb0:	3020      	adds	r0, #32
   10bb2:	189b      	adds	r3, r3, r2
   10bb4:	7018      	strb	r0, [r3, #0]
   10bb6:	070b      	lsls	r3, r1, #28
   10bb8:	d504      	bpl.n	10bc4 <_vfiprintf_r+0xbc>
   10bba:	2353      	movs	r3, #83	; 0x53
   10bbc:	202b      	movs	r0, #43	; 0x2b
   10bbe:	aa02      	add	r2, sp, #8
   10bc0:	189b      	adds	r3, r3, r2
   10bc2:	7018      	strb	r0, [r3, #0]
   10bc4:	7823      	ldrb	r3, [r4, #0]
   10bc6:	2b2a      	cmp	r3, #42	; 0x2a
   10bc8:	d02c      	beq.n	10c24 <_vfiprintf_r+0x11c>
   10bca:	2000      	movs	r0, #0
   10bcc:	210a      	movs	r1, #10
   10bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10bd0:	7822      	ldrb	r2, [r4, #0]
   10bd2:	3a30      	subs	r2, #48	; 0x30
   10bd4:	2a09      	cmp	r2, #9
   10bd6:	d800      	bhi.n	10bda <_vfiprintf_r+0xd2>
   10bd8:	e06b      	b.n	10cb2 <_vfiprintf_r+0x1aa>
   10bda:	2800      	cmp	r0, #0
   10bdc:	d02a      	beq.n	10c34 <_vfiprintf_r+0x12c>
   10bde:	9309      	str	r3, [sp, #36]	; 0x24
   10be0:	e028      	b.n	10c34 <_vfiprintf_r+0x12c>
   10be2:	4b51      	ldr	r3, [pc, #324]	; (10d28 <_vfiprintf_r+0x220>)
   10be4:	429f      	cmp	r7, r3
   10be6:	d101      	bne.n	10bec <_vfiprintf_r+0xe4>
   10be8:	68b7      	ldr	r7, [r6, #8]
   10bea:	e79e      	b.n	10b2a <_vfiprintf_r+0x22>
   10bec:	4b4f      	ldr	r3, [pc, #316]	; (10d2c <_vfiprintf_r+0x224>)
   10bee:	429f      	cmp	r7, r3
   10bf0:	d19b      	bne.n	10b2a <_vfiprintf_r+0x22>
   10bf2:	68f7      	ldr	r7, [r6, #12]
   10bf4:	e799      	b.n	10b2a <_vfiprintf_r+0x22>
   10bf6:	0039      	movs	r1, r7
   10bf8:	0030      	movs	r0, r6
   10bfa:	f000 fbb1 	bl	11360 <__swsetup_r>
   10bfe:	2800      	cmp	r0, #0
   10c00:	d099      	beq.n	10b36 <_vfiprintf_r+0x2e>
   10c02:	2001      	movs	r0, #1
   10c04:	4240      	negs	r0, r0
   10c06:	b01f      	add	sp, #124	; 0x7c
   10c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c0a:	2b25      	cmp	r3, #37	; 0x25
   10c0c:	d09f      	beq.n	10b4e <_vfiprintf_r+0x46>
   10c0e:	3401      	adds	r4, #1
   10c10:	e79a      	b.n	10b48 <_vfiprintf_r+0x40>
   10c12:	4b44      	ldr	r3, [pc, #272]	; (10d24 <_vfiprintf_r+0x21c>)
   10c14:	6829      	ldr	r1, [r5, #0]
   10c16:	1ac0      	subs	r0, r0, r3
   10c18:	2301      	movs	r3, #1
   10c1a:	4083      	lsls	r3, r0
   10c1c:	430b      	orrs	r3, r1
   10c1e:	602b      	str	r3, [r5, #0]
   10c20:	4664      	mov	r4, ip
   10c22:	e7b7      	b.n	10b94 <_vfiprintf_r+0x8c>
   10c24:	9b05      	ldr	r3, [sp, #20]
   10c26:	1d18      	adds	r0, r3, #4
   10c28:	681b      	ldr	r3, [r3, #0]
   10c2a:	9005      	str	r0, [sp, #20]
   10c2c:	2b00      	cmp	r3, #0
   10c2e:	db3a      	blt.n	10ca6 <_vfiprintf_r+0x19e>
   10c30:	9309      	str	r3, [sp, #36]	; 0x24
   10c32:	4664      	mov	r4, ip
   10c34:	7823      	ldrb	r3, [r4, #0]
   10c36:	2b2e      	cmp	r3, #46	; 0x2e
   10c38:	d10b      	bne.n	10c52 <_vfiprintf_r+0x14a>
   10c3a:	7863      	ldrb	r3, [r4, #1]
   10c3c:	1c62      	adds	r2, r4, #1
   10c3e:	2b2a      	cmp	r3, #42	; 0x2a
   10c40:	d13f      	bne.n	10cc2 <_vfiprintf_r+0x1ba>
   10c42:	9b05      	ldr	r3, [sp, #20]
   10c44:	3402      	adds	r4, #2
   10c46:	1d1a      	adds	r2, r3, #4
   10c48:	681b      	ldr	r3, [r3, #0]
   10c4a:	9205      	str	r2, [sp, #20]
   10c4c:	2b00      	cmp	r3, #0
   10c4e:	db35      	blt.n	10cbc <_vfiprintf_r+0x1b4>
   10c50:	9307      	str	r3, [sp, #28]
   10c52:	7821      	ldrb	r1, [r4, #0]
   10c54:	2203      	movs	r2, #3
   10c56:	4836      	ldr	r0, [pc, #216]	; (10d30 <_vfiprintf_r+0x228>)
   10c58:	f000 fe04 	bl	11864 <memchr>
   10c5c:	2800      	cmp	r0, #0
   10c5e:	d007      	beq.n	10c70 <_vfiprintf_r+0x168>
   10c60:	4b33      	ldr	r3, [pc, #204]	; (10d30 <_vfiprintf_r+0x228>)
   10c62:	682a      	ldr	r2, [r5, #0]
   10c64:	1ac0      	subs	r0, r0, r3
   10c66:	2340      	movs	r3, #64	; 0x40
   10c68:	4083      	lsls	r3, r0
   10c6a:	4313      	orrs	r3, r2
   10c6c:	602b      	str	r3, [r5, #0]
   10c6e:	3401      	adds	r4, #1
   10c70:	7821      	ldrb	r1, [r4, #0]
   10c72:	1c63      	adds	r3, r4, #1
   10c74:	2206      	movs	r2, #6
   10c76:	482f      	ldr	r0, [pc, #188]	; (10d34 <_vfiprintf_r+0x22c>)
   10c78:	9302      	str	r3, [sp, #8]
   10c7a:	7629      	strb	r1, [r5, #24]
   10c7c:	f000 fdf2 	bl	11864 <memchr>
   10c80:	2800      	cmp	r0, #0
   10c82:	d044      	beq.n	10d0e <_vfiprintf_r+0x206>
   10c84:	4b2c      	ldr	r3, [pc, #176]	; (10d38 <_vfiprintf_r+0x230>)
   10c86:	2b00      	cmp	r3, #0
   10c88:	d12f      	bne.n	10cea <_vfiprintf_r+0x1e2>
   10c8a:	6829      	ldr	r1, [r5, #0]
   10c8c:	9b05      	ldr	r3, [sp, #20]
   10c8e:	2207      	movs	r2, #7
   10c90:	05c9      	lsls	r1, r1, #23
   10c92:	d528      	bpl.n	10ce6 <_vfiprintf_r+0x1de>
   10c94:	189b      	adds	r3, r3, r2
   10c96:	4393      	bics	r3, r2
   10c98:	3308      	adds	r3, #8
   10c9a:	9305      	str	r3, [sp, #20]
   10c9c:	696b      	ldr	r3, [r5, #20]
   10c9e:	9a03      	ldr	r2, [sp, #12]
   10ca0:	189b      	adds	r3, r3, r2
   10ca2:	616b      	str	r3, [r5, #20]
   10ca4:	e74f      	b.n	10b46 <_vfiprintf_r+0x3e>
   10ca6:	425b      	negs	r3, r3
   10ca8:	60eb      	str	r3, [r5, #12]
   10caa:	2302      	movs	r3, #2
   10cac:	430b      	orrs	r3, r1
   10cae:	602b      	str	r3, [r5, #0]
   10cb0:	e7bf      	b.n	10c32 <_vfiprintf_r+0x12a>
   10cb2:	434b      	muls	r3, r1
   10cb4:	3401      	adds	r4, #1
   10cb6:	189b      	adds	r3, r3, r2
   10cb8:	2001      	movs	r0, #1
   10cba:	e789      	b.n	10bd0 <_vfiprintf_r+0xc8>
   10cbc:	2301      	movs	r3, #1
   10cbe:	425b      	negs	r3, r3
   10cc0:	e7c6      	b.n	10c50 <_vfiprintf_r+0x148>
   10cc2:	2300      	movs	r3, #0
   10cc4:	0014      	movs	r4, r2
   10cc6:	200a      	movs	r0, #10
   10cc8:	001a      	movs	r2, r3
   10cca:	606b      	str	r3, [r5, #4]
   10ccc:	7821      	ldrb	r1, [r4, #0]
   10cce:	3930      	subs	r1, #48	; 0x30
   10cd0:	2909      	cmp	r1, #9
   10cd2:	d903      	bls.n	10cdc <_vfiprintf_r+0x1d4>
   10cd4:	2b00      	cmp	r3, #0
   10cd6:	d0bc      	beq.n	10c52 <_vfiprintf_r+0x14a>
   10cd8:	9207      	str	r2, [sp, #28]
   10cda:	e7ba      	b.n	10c52 <_vfiprintf_r+0x14a>
   10cdc:	4342      	muls	r2, r0
   10cde:	3401      	adds	r4, #1
   10ce0:	1852      	adds	r2, r2, r1
   10ce2:	2301      	movs	r3, #1
   10ce4:	e7f2      	b.n	10ccc <_vfiprintf_r+0x1c4>
   10ce6:	3307      	adds	r3, #7
   10ce8:	e7d5      	b.n	10c96 <_vfiprintf_r+0x18e>
   10cea:	ab05      	add	r3, sp, #20
   10cec:	9300      	str	r3, [sp, #0]
   10cee:	003a      	movs	r2, r7
   10cf0:	4b12      	ldr	r3, [pc, #72]	; (10d3c <_vfiprintf_r+0x234>)
   10cf2:	0029      	movs	r1, r5
   10cf4:	0030      	movs	r0, r6
   10cf6:	e000      	b.n	10cfa <_vfiprintf_r+0x1f2>
   10cf8:	bf00      	nop
   10cfa:	9003      	str	r0, [sp, #12]
   10cfc:	9b03      	ldr	r3, [sp, #12]
   10cfe:	3301      	adds	r3, #1
   10d00:	d1cc      	bne.n	10c9c <_vfiprintf_r+0x194>
   10d02:	89bb      	ldrh	r3, [r7, #12]
   10d04:	065b      	lsls	r3, r3, #25
   10d06:	d500      	bpl.n	10d0a <_vfiprintf_r+0x202>
   10d08:	e77b      	b.n	10c02 <_vfiprintf_r+0xfa>
   10d0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10d0c:	e77b      	b.n	10c06 <_vfiprintf_r+0xfe>
   10d0e:	ab05      	add	r3, sp, #20
   10d10:	9300      	str	r3, [sp, #0]
   10d12:	003a      	movs	r2, r7
   10d14:	4b09      	ldr	r3, [pc, #36]	; (10d3c <_vfiprintf_r+0x234>)
   10d16:	0029      	movs	r1, r5
   10d18:	0030      	movs	r0, r6
   10d1a:	f000 f87f 	bl	10e1c <_printf_i>
   10d1e:	e7ec      	b.n	10cfa <_vfiprintf_r+0x1f2>
   10d20:	000129e8 	.word	0x000129e8
   10d24:	00012994 	.word	0x00012994
   10d28:	00012a08 	.word	0x00012a08
   10d2c:	000129c8 	.word	0x000129c8
   10d30:	0001299a 	.word	0x0001299a
   10d34:	0001299e 	.word	0x0001299e
   10d38:	00000000 	.word	0x00000000
   10d3c:	00010ae3 	.word	0x00010ae3

00010d40 <_printf_common>:
   10d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10d42:	0015      	movs	r5, r2
   10d44:	9301      	str	r3, [sp, #4]
   10d46:	688a      	ldr	r2, [r1, #8]
   10d48:	690b      	ldr	r3, [r1, #16]
   10d4a:	9000      	str	r0, [sp, #0]
   10d4c:	000c      	movs	r4, r1
   10d4e:	4293      	cmp	r3, r2
   10d50:	da00      	bge.n	10d54 <_printf_common+0x14>
   10d52:	0013      	movs	r3, r2
   10d54:	0022      	movs	r2, r4
   10d56:	602b      	str	r3, [r5, #0]
   10d58:	3243      	adds	r2, #67	; 0x43
   10d5a:	7812      	ldrb	r2, [r2, #0]
   10d5c:	2a00      	cmp	r2, #0
   10d5e:	d001      	beq.n	10d64 <_printf_common+0x24>
   10d60:	3301      	adds	r3, #1
   10d62:	602b      	str	r3, [r5, #0]
   10d64:	6823      	ldr	r3, [r4, #0]
   10d66:	069b      	lsls	r3, r3, #26
   10d68:	d502      	bpl.n	10d70 <_printf_common+0x30>
   10d6a:	682b      	ldr	r3, [r5, #0]
   10d6c:	3302      	adds	r3, #2
   10d6e:	602b      	str	r3, [r5, #0]
   10d70:	2706      	movs	r7, #6
   10d72:	6823      	ldr	r3, [r4, #0]
   10d74:	401f      	ands	r7, r3
   10d76:	d027      	beq.n	10dc8 <_printf_common+0x88>
   10d78:	0023      	movs	r3, r4
   10d7a:	3343      	adds	r3, #67	; 0x43
   10d7c:	781b      	ldrb	r3, [r3, #0]
   10d7e:	1e5a      	subs	r2, r3, #1
   10d80:	4193      	sbcs	r3, r2
   10d82:	6822      	ldr	r2, [r4, #0]
   10d84:	0692      	lsls	r2, r2, #26
   10d86:	d430      	bmi.n	10dea <_printf_common+0xaa>
   10d88:	0022      	movs	r2, r4
   10d8a:	9901      	ldr	r1, [sp, #4]
   10d8c:	3243      	adds	r2, #67	; 0x43
   10d8e:	9800      	ldr	r0, [sp, #0]
   10d90:	9e08      	ldr	r6, [sp, #32]
   10d92:	47b0      	blx	r6
   10d94:	1c43      	adds	r3, r0, #1
   10d96:	d025      	beq.n	10de4 <_printf_common+0xa4>
   10d98:	2306      	movs	r3, #6
   10d9a:	6820      	ldr	r0, [r4, #0]
   10d9c:	682a      	ldr	r2, [r5, #0]
   10d9e:	68e1      	ldr	r1, [r4, #12]
   10da0:	4003      	ands	r3, r0
   10da2:	2500      	movs	r5, #0
   10da4:	2b04      	cmp	r3, #4
   10da6:	d103      	bne.n	10db0 <_printf_common+0x70>
   10da8:	1a8d      	subs	r5, r1, r2
   10daa:	43eb      	mvns	r3, r5
   10dac:	17db      	asrs	r3, r3, #31
   10dae:	401d      	ands	r5, r3
   10db0:	68a3      	ldr	r3, [r4, #8]
   10db2:	6922      	ldr	r2, [r4, #16]
   10db4:	4293      	cmp	r3, r2
   10db6:	dd01      	ble.n	10dbc <_printf_common+0x7c>
   10db8:	1a9b      	subs	r3, r3, r2
   10dba:	18ed      	adds	r5, r5, r3
   10dbc:	2700      	movs	r7, #0
   10dbe:	42bd      	cmp	r5, r7
   10dc0:	d120      	bne.n	10e04 <_printf_common+0xc4>
   10dc2:	2000      	movs	r0, #0
   10dc4:	e010      	b.n	10de8 <_printf_common+0xa8>
   10dc6:	3701      	adds	r7, #1
   10dc8:	68e3      	ldr	r3, [r4, #12]
   10dca:	682a      	ldr	r2, [r5, #0]
   10dcc:	1a9b      	subs	r3, r3, r2
   10dce:	429f      	cmp	r7, r3
   10dd0:	dad2      	bge.n	10d78 <_printf_common+0x38>
   10dd2:	0022      	movs	r2, r4
   10dd4:	2301      	movs	r3, #1
   10dd6:	3219      	adds	r2, #25
   10dd8:	9901      	ldr	r1, [sp, #4]
   10dda:	9800      	ldr	r0, [sp, #0]
   10ddc:	9e08      	ldr	r6, [sp, #32]
   10dde:	47b0      	blx	r6
   10de0:	1c43      	adds	r3, r0, #1
   10de2:	d1f0      	bne.n	10dc6 <_printf_common+0x86>
   10de4:	2001      	movs	r0, #1
   10de6:	4240      	negs	r0, r0
   10de8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10dea:	2030      	movs	r0, #48	; 0x30
   10dec:	18e1      	adds	r1, r4, r3
   10dee:	3143      	adds	r1, #67	; 0x43
   10df0:	7008      	strb	r0, [r1, #0]
   10df2:	0021      	movs	r1, r4
   10df4:	1c5a      	adds	r2, r3, #1
   10df6:	3145      	adds	r1, #69	; 0x45
   10df8:	7809      	ldrb	r1, [r1, #0]
   10dfa:	18a2      	adds	r2, r4, r2
   10dfc:	3243      	adds	r2, #67	; 0x43
   10dfe:	3302      	adds	r3, #2
   10e00:	7011      	strb	r1, [r2, #0]
   10e02:	e7c1      	b.n	10d88 <_printf_common+0x48>
   10e04:	0022      	movs	r2, r4
   10e06:	2301      	movs	r3, #1
   10e08:	321a      	adds	r2, #26
   10e0a:	9901      	ldr	r1, [sp, #4]
   10e0c:	9800      	ldr	r0, [sp, #0]
   10e0e:	9e08      	ldr	r6, [sp, #32]
   10e10:	47b0      	blx	r6
   10e12:	1c43      	adds	r3, r0, #1
   10e14:	d0e6      	beq.n	10de4 <_printf_common+0xa4>
   10e16:	3701      	adds	r7, #1
   10e18:	e7d1      	b.n	10dbe <_printf_common+0x7e>
   10e1a:	Address 0x00010e1a is out of bounds.


00010e1c <_printf_i>:
   10e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e1e:	b08b      	sub	sp, #44	; 0x2c
   10e20:	9206      	str	r2, [sp, #24]
   10e22:	000a      	movs	r2, r1
   10e24:	3243      	adds	r2, #67	; 0x43
   10e26:	9307      	str	r3, [sp, #28]
   10e28:	9005      	str	r0, [sp, #20]
   10e2a:	9204      	str	r2, [sp, #16]
   10e2c:	7e0a      	ldrb	r2, [r1, #24]
   10e2e:	000c      	movs	r4, r1
   10e30:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10e32:	2a6e      	cmp	r2, #110	; 0x6e
   10e34:	d100      	bne.n	10e38 <_printf_i+0x1c>
   10e36:	e08f      	b.n	10f58 <_printf_i+0x13c>
   10e38:	d817      	bhi.n	10e6a <_printf_i+0x4e>
   10e3a:	2a63      	cmp	r2, #99	; 0x63
   10e3c:	d02c      	beq.n	10e98 <_printf_i+0x7c>
   10e3e:	d808      	bhi.n	10e52 <_printf_i+0x36>
   10e40:	2a00      	cmp	r2, #0
   10e42:	d100      	bne.n	10e46 <_printf_i+0x2a>
   10e44:	e099      	b.n	10f7a <_printf_i+0x15e>
   10e46:	2a58      	cmp	r2, #88	; 0x58
   10e48:	d054      	beq.n	10ef4 <_printf_i+0xd8>
   10e4a:	0026      	movs	r6, r4
   10e4c:	3642      	adds	r6, #66	; 0x42
   10e4e:	7032      	strb	r2, [r6, #0]
   10e50:	e029      	b.n	10ea6 <_printf_i+0x8a>
   10e52:	2a64      	cmp	r2, #100	; 0x64
   10e54:	d001      	beq.n	10e5a <_printf_i+0x3e>
   10e56:	2a69      	cmp	r2, #105	; 0x69
   10e58:	d1f7      	bne.n	10e4a <_printf_i+0x2e>
   10e5a:	6821      	ldr	r1, [r4, #0]
   10e5c:	681a      	ldr	r2, [r3, #0]
   10e5e:	0608      	lsls	r0, r1, #24
   10e60:	d523      	bpl.n	10eaa <_printf_i+0x8e>
   10e62:	1d11      	adds	r1, r2, #4
   10e64:	6019      	str	r1, [r3, #0]
   10e66:	6815      	ldr	r5, [r2, #0]
   10e68:	e025      	b.n	10eb6 <_printf_i+0x9a>
   10e6a:	2a73      	cmp	r2, #115	; 0x73
   10e6c:	d100      	bne.n	10e70 <_printf_i+0x54>
   10e6e:	e088      	b.n	10f82 <_printf_i+0x166>
   10e70:	d808      	bhi.n	10e84 <_printf_i+0x68>
   10e72:	2a6f      	cmp	r2, #111	; 0x6f
   10e74:	d029      	beq.n	10eca <_printf_i+0xae>
   10e76:	2a70      	cmp	r2, #112	; 0x70
   10e78:	d1e7      	bne.n	10e4a <_printf_i+0x2e>
   10e7a:	2220      	movs	r2, #32
   10e7c:	6809      	ldr	r1, [r1, #0]
   10e7e:	430a      	orrs	r2, r1
   10e80:	6022      	str	r2, [r4, #0]
   10e82:	e003      	b.n	10e8c <_printf_i+0x70>
   10e84:	2a75      	cmp	r2, #117	; 0x75
   10e86:	d020      	beq.n	10eca <_printf_i+0xae>
   10e88:	2a78      	cmp	r2, #120	; 0x78
   10e8a:	d1de      	bne.n	10e4a <_printf_i+0x2e>
   10e8c:	0022      	movs	r2, r4
   10e8e:	2178      	movs	r1, #120	; 0x78
   10e90:	3245      	adds	r2, #69	; 0x45
   10e92:	7011      	strb	r1, [r2, #0]
   10e94:	4a6c      	ldr	r2, [pc, #432]	; (11048 <_printf_i+0x22c>)
   10e96:	e030      	b.n	10efa <_printf_i+0xde>
   10e98:	000e      	movs	r6, r1
   10e9a:	681a      	ldr	r2, [r3, #0]
   10e9c:	3642      	adds	r6, #66	; 0x42
   10e9e:	1d11      	adds	r1, r2, #4
   10ea0:	6019      	str	r1, [r3, #0]
   10ea2:	6813      	ldr	r3, [r2, #0]
   10ea4:	7033      	strb	r3, [r6, #0]
   10ea6:	2301      	movs	r3, #1
   10ea8:	e079      	b.n	10f9e <_printf_i+0x182>
   10eaa:	0649      	lsls	r1, r1, #25
   10eac:	d5d9      	bpl.n	10e62 <_printf_i+0x46>
   10eae:	1d11      	adds	r1, r2, #4
   10eb0:	6019      	str	r1, [r3, #0]
   10eb2:	2300      	movs	r3, #0
   10eb4:	5ed5      	ldrsh	r5, [r2, r3]
   10eb6:	2d00      	cmp	r5, #0
   10eb8:	da03      	bge.n	10ec2 <_printf_i+0xa6>
   10eba:	232d      	movs	r3, #45	; 0x2d
   10ebc:	9a04      	ldr	r2, [sp, #16]
   10ebe:	426d      	negs	r5, r5
   10ec0:	7013      	strb	r3, [r2, #0]
   10ec2:	4b62      	ldr	r3, [pc, #392]	; (1104c <_printf_i+0x230>)
   10ec4:	270a      	movs	r7, #10
   10ec6:	9303      	str	r3, [sp, #12]
   10ec8:	e02f      	b.n	10f2a <_printf_i+0x10e>
   10eca:	6820      	ldr	r0, [r4, #0]
   10ecc:	6819      	ldr	r1, [r3, #0]
   10ece:	0605      	lsls	r5, r0, #24
   10ed0:	d503      	bpl.n	10eda <_printf_i+0xbe>
   10ed2:	1d08      	adds	r0, r1, #4
   10ed4:	6018      	str	r0, [r3, #0]
   10ed6:	680d      	ldr	r5, [r1, #0]
   10ed8:	e005      	b.n	10ee6 <_printf_i+0xca>
   10eda:	0640      	lsls	r0, r0, #25
   10edc:	d5f9      	bpl.n	10ed2 <_printf_i+0xb6>
   10ede:	680d      	ldr	r5, [r1, #0]
   10ee0:	1d08      	adds	r0, r1, #4
   10ee2:	6018      	str	r0, [r3, #0]
   10ee4:	b2ad      	uxth	r5, r5
   10ee6:	4b59      	ldr	r3, [pc, #356]	; (1104c <_printf_i+0x230>)
   10ee8:	2708      	movs	r7, #8
   10eea:	9303      	str	r3, [sp, #12]
   10eec:	2a6f      	cmp	r2, #111	; 0x6f
   10eee:	d018      	beq.n	10f22 <_printf_i+0x106>
   10ef0:	270a      	movs	r7, #10
   10ef2:	e016      	b.n	10f22 <_printf_i+0x106>
   10ef4:	3145      	adds	r1, #69	; 0x45
   10ef6:	700a      	strb	r2, [r1, #0]
   10ef8:	4a54      	ldr	r2, [pc, #336]	; (1104c <_printf_i+0x230>)
   10efa:	9203      	str	r2, [sp, #12]
   10efc:	681a      	ldr	r2, [r3, #0]
   10efe:	6821      	ldr	r1, [r4, #0]
   10f00:	1d10      	adds	r0, r2, #4
   10f02:	6018      	str	r0, [r3, #0]
   10f04:	6815      	ldr	r5, [r2, #0]
   10f06:	0608      	lsls	r0, r1, #24
   10f08:	d522      	bpl.n	10f50 <_printf_i+0x134>
   10f0a:	07cb      	lsls	r3, r1, #31
   10f0c:	d502      	bpl.n	10f14 <_printf_i+0xf8>
   10f0e:	2320      	movs	r3, #32
   10f10:	4319      	orrs	r1, r3
   10f12:	6021      	str	r1, [r4, #0]
   10f14:	2710      	movs	r7, #16
   10f16:	2d00      	cmp	r5, #0
   10f18:	d103      	bne.n	10f22 <_printf_i+0x106>
   10f1a:	2320      	movs	r3, #32
   10f1c:	6822      	ldr	r2, [r4, #0]
   10f1e:	439a      	bics	r2, r3
   10f20:	6022      	str	r2, [r4, #0]
   10f22:	0023      	movs	r3, r4
   10f24:	2200      	movs	r2, #0
   10f26:	3343      	adds	r3, #67	; 0x43
   10f28:	701a      	strb	r2, [r3, #0]
   10f2a:	6863      	ldr	r3, [r4, #4]
   10f2c:	60a3      	str	r3, [r4, #8]
   10f2e:	2b00      	cmp	r3, #0
   10f30:	db5c      	blt.n	10fec <_printf_i+0x1d0>
   10f32:	2204      	movs	r2, #4
   10f34:	6821      	ldr	r1, [r4, #0]
   10f36:	4391      	bics	r1, r2
   10f38:	6021      	str	r1, [r4, #0]
   10f3a:	2d00      	cmp	r5, #0
   10f3c:	d158      	bne.n	10ff0 <_printf_i+0x1d4>
   10f3e:	9e04      	ldr	r6, [sp, #16]
   10f40:	2b00      	cmp	r3, #0
   10f42:	d064      	beq.n	1100e <_printf_i+0x1f2>
   10f44:	0026      	movs	r6, r4
   10f46:	9b03      	ldr	r3, [sp, #12]
   10f48:	3642      	adds	r6, #66	; 0x42
   10f4a:	781b      	ldrb	r3, [r3, #0]
   10f4c:	7033      	strb	r3, [r6, #0]
   10f4e:	e05e      	b.n	1100e <_printf_i+0x1f2>
   10f50:	0648      	lsls	r0, r1, #25
   10f52:	d5da      	bpl.n	10f0a <_printf_i+0xee>
   10f54:	b2ad      	uxth	r5, r5
   10f56:	e7d8      	b.n	10f0a <_printf_i+0xee>
   10f58:	6809      	ldr	r1, [r1, #0]
   10f5a:	681a      	ldr	r2, [r3, #0]
   10f5c:	0608      	lsls	r0, r1, #24
   10f5e:	d505      	bpl.n	10f6c <_printf_i+0x150>
   10f60:	1d11      	adds	r1, r2, #4
   10f62:	6019      	str	r1, [r3, #0]
   10f64:	6813      	ldr	r3, [r2, #0]
   10f66:	6962      	ldr	r2, [r4, #20]
   10f68:	601a      	str	r2, [r3, #0]
   10f6a:	e006      	b.n	10f7a <_printf_i+0x15e>
   10f6c:	0649      	lsls	r1, r1, #25
   10f6e:	d5f7      	bpl.n	10f60 <_printf_i+0x144>
   10f70:	1d11      	adds	r1, r2, #4
   10f72:	6019      	str	r1, [r3, #0]
   10f74:	6813      	ldr	r3, [r2, #0]
   10f76:	8aa2      	ldrh	r2, [r4, #20]
   10f78:	801a      	strh	r2, [r3, #0]
   10f7a:	2300      	movs	r3, #0
   10f7c:	9e04      	ldr	r6, [sp, #16]
   10f7e:	6123      	str	r3, [r4, #16]
   10f80:	e054      	b.n	1102c <_printf_i+0x210>
   10f82:	681a      	ldr	r2, [r3, #0]
   10f84:	1d11      	adds	r1, r2, #4
   10f86:	6019      	str	r1, [r3, #0]
   10f88:	6816      	ldr	r6, [r2, #0]
   10f8a:	2100      	movs	r1, #0
   10f8c:	6862      	ldr	r2, [r4, #4]
   10f8e:	0030      	movs	r0, r6
   10f90:	f000 fc68 	bl	11864 <memchr>
   10f94:	2800      	cmp	r0, #0
   10f96:	d001      	beq.n	10f9c <_printf_i+0x180>
   10f98:	1b80      	subs	r0, r0, r6
   10f9a:	6060      	str	r0, [r4, #4]
   10f9c:	6863      	ldr	r3, [r4, #4]
   10f9e:	6123      	str	r3, [r4, #16]
   10fa0:	2300      	movs	r3, #0
   10fa2:	9a04      	ldr	r2, [sp, #16]
   10fa4:	7013      	strb	r3, [r2, #0]
   10fa6:	e041      	b.n	1102c <_printf_i+0x210>
   10fa8:	6923      	ldr	r3, [r4, #16]
   10faa:	0032      	movs	r2, r6
   10fac:	9906      	ldr	r1, [sp, #24]
   10fae:	9805      	ldr	r0, [sp, #20]
   10fb0:	9d07      	ldr	r5, [sp, #28]
   10fb2:	47a8      	blx	r5
   10fb4:	1c43      	adds	r3, r0, #1
   10fb6:	d043      	beq.n	11040 <_printf_i+0x224>
   10fb8:	6823      	ldr	r3, [r4, #0]
   10fba:	2500      	movs	r5, #0
   10fbc:	079b      	lsls	r3, r3, #30
   10fbe:	d40f      	bmi.n	10fe0 <_printf_i+0x1c4>
   10fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10fc2:	68e0      	ldr	r0, [r4, #12]
   10fc4:	4298      	cmp	r0, r3
   10fc6:	da3d      	bge.n	11044 <_printf_i+0x228>
   10fc8:	0018      	movs	r0, r3
   10fca:	e03b      	b.n	11044 <_printf_i+0x228>
   10fcc:	0022      	movs	r2, r4
   10fce:	2301      	movs	r3, #1
   10fd0:	3219      	adds	r2, #25
   10fd2:	9906      	ldr	r1, [sp, #24]
   10fd4:	9805      	ldr	r0, [sp, #20]
   10fd6:	9e07      	ldr	r6, [sp, #28]
   10fd8:	47b0      	blx	r6
   10fda:	1c43      	adds	r3, r0, #1
   10fdc:	d030      	beq.n	11040 <_printf_i+0x224>
   10fde:	3501      	adds	r5, #1
   10fe0:	68e3      	ldr	r3, [r4, #12]
   10fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10fe4:	1a9b      	subs	r3, r3, r2
   10fe6:	429d      	cmp	r5, r3
   10fe8:	dbf0      	blt.n	10fcc <_printf_i+0x1b0>
   10fea:	e7e9      	b.n	10fc0 <_printf_i+0x1a4>
   10fec:	2d00      	cmp	r5, #0
   10fee:	d0a9      	beq.n	10f44 <_printf_i+0x128>
   10ff0:	9e04      	ldr	r6, [sp, #16]
   10ff2:	0028      	movs	r0, r5
   10ff4:	0039      	movs	r1, r7
   10ff6:	f7fe fddf 	bl	fbb8 <__aeabi_uidivmod>
   10ffa:	9b03      	ldr	r3, [sp, #12]
   10ffc:	3e01      	subs	r6, #1
   10ffe:	5c5b      	ldrb	r3, [r3, r1]
   11000:	0028      	movs	r0, r5
   11002:	7033      	strb	r3, [r6, #0]
   11004:	0039      	movs	r1, r7
   11006:	f7fe fd51 	bl	faac <__udivsi3>
   1100a:	1e05      	subs	r5, r0, #0
   1100c:	d1f1      	bne.n	10ff2 <_printf_i+0x1d6>
   1100e:	2f08      	cmp	r7, #8
   11010:	d109      	bne.n	11026 <_printf_i+0x20a>
   11012:	6823      	ldr	r3, [r4, #0]
   11014:	07db      	lsls	r3, r3, #31
   11016:	d506      	bpl.n	11026 <_printf_i+0x20a>
   11018:	6863      	ldr	r3, [r4, #4]
   1101a:	6922      	ldr	r2, [r4, #16]
   1101c:	4293      	cmp	r3, r2
   1101e:	dc02      	bgt.n	11026 <_printf_i+0x20a>
   11020:	2330      	movs	r3, #48	; 0x30
   11022:	3e01      	subs	r6, #1
   11024:	7033      	strb	r3, [r6, #0]
   11026:	9b04      	ldr	r3, [sp, #16]
   11028:	1b9b      	subs	r3, r3, r6
   1102a:	6123      	str	r3, [r4, #16]
   1102c:	9b07      	ldr	r3, [sp, #28]
   1102e:	aa09      	add	r2, sp, #36	; 0x24
   11030:	9300      	str	r3, [sp, #0]
   11032:	0021      	movs	r1, r4
   11034:	9b06      	ldr	r3, [sp, #24]
   11036:	9805      	ldr	r0, [sp, #20]
   11038:	f7ff fe82 	bl	10d40 <_printf_common>
   1103c:	1c43      	adds	r3, r0, #1
   1103e:	d1b3      	bne.n	10fa8 <_printf_i+0x18c>
   11040:	2001      	movs	r0, #1
   11042:	4240      	negs	r0, r0
   11044:	b00b      	add	sp, #44	; 0x2c
   11046:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11048:	000129b6 	.word	0x000129b6
   1104c:	000129a5 	.word	0x000129a5

00011050 <srand>:
   11050:	4b10      	ldr	r3, [pc, #64]	; (11094 <srand+0x44>)
   11052:	b570      	push	{r4, r5, r6, lr}
   11054:	681c      	ldr	r4, [r3, #0]
   11056:	0005      	movs	r5, r0
   11058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1105a:	2b00      	cmp	r3, #0
   1105c:	d115      	bne.n	1108a <srand+0x3a>
   1105e:	2018      	movs	r0, #24
   11060:	f000 fbf6 	bl	11850 <malloc>
   11064:	4b0c      	ldr	r3, [pc, #48]	; (11098 <srand+0x48>)
   11066:	63a0      	str	r0, [r4, #56]	; 0x38
   11068:	8003      	strh	r3, [r0, #0]
   1106a:	4b0c      	ldr	r3, [pc, #48]	; (1109c <srand+0x4c>)
   1106c:	2201      	movs	r2, #1
   1106e:	8043      	strh	r3, [r0, #2]
   11070:	4b0b      	ldr	r3, [pc, #44]	; (110a0 <srand+0x50>)
   11072:	8083      	strh	r3, [r0, #4]
   11074:	4b0b      	ldr	r3, [pc, #44]	; (110a4 <srand+0x54>)
   11076:	80c3      	strh	r3, [r0, #6]
   11078:	4b0b      	ldr	r3, [pc, #44]	; (110a8 <srand+0x58>)
   1107a:	8103      	strh	r3, [r0, #8]
   1107c:	2305      	movs	r3, #5
   1107e:	8143      	strh	r3, [r0, #10]
   11080:	3306      	adds	r3, #6
   11082:	8183      	strh	r3, [r0, #12]
   11084:	2300      	movs	r3, #0
   11086:	6102      	str	r2, [r0, #16]
   11088:	6143      	str	r3, [r0, #20]
   1108a:	2200      	movs	r2, #0
   1108c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1108e:	611d      	str	r5, [r3, #16]
   11090:	615a      	str	r2, [r3, #20]
   11092:	bd70      	pop	{r4, r5, r6, pc}
   11094:	20000038 	.word	0x20000038
   11098:	0000330e 	.word	0x0000330e
   1109c:	ffffabcd 	.word	0xffffabcd
   110a0:	00001234 	.word	0x00001234
   110a4:	ffffe66d 	.word	0xffffe66d
   110a8:	ffffdeec 	.word	0xffffdeec

000110ac <rand>:
   110ac:	4b15      	ldr	r3, [pc, #84]	; (11104 <rand+0x58>)
   110ae:	b510      	push	{r4, lr}
   110b0:	681c      	ldr	r4, [r3, #0]
   110b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   110b4:	2b00      	cmp	r3, #0
   110b6:	d115      	bne.n	110e4 <rand+0x38>
   110b8:	2018      	movs	r0, #24
   110ba:	f000 fbc9 	bl	11850 <malloc>
   110be:	4b12      	ldr	r3, [pc, #72]	; (11108 <rand+0x5c>)
   110c0:	63a0      	str	r0, [r4, #56]	; 0x38
   110c2:	8003      	strh	r3, [r0, #0]
   110c4:	4b11      	ldr	r3, [pc, #68]	; (1110c <rand+0x60>)
   110c6:	2201      	movs	r2, #1
   110c8:	8043      	strh	r3, [r0, #2]
   110ca:	4b11      	ldr	r3, [pc, #68]	; (11110 <rand+0x64>)
   110cc:	8083      	strh	r3, [r0, #4]
   110ce:	4b11      	ldr	r3, [pc, #68]	; (11114 <rand+0x68>)
   110d0:	80c3      	strh	r3, [r0, #6]
   110d2:	4b11      	ldr	r3, [pc, #68]	; (11118 <rand+0x6c>)
   110d4:	8103      	strh	r3, [r0, #8]
   110d6:	2305      	movs	r3, #5
   110d8:	8143      	strh	r3, [r0, #10]
   110da:	3306      	adds	r3, #6
   110dc:	8183      	strh	r3, [r0, #12]
   110de:	2300      	movs	r3, #0
   110e0:	6102      	str	r2, [r0, #16]
   110e2:	6143      	str	r3, [r0, #20]
   110e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   110e6:	4a0d      	ldr	r2, [pc, #52]	; (1111c <rand+0x70>)
   110e8:	6920      	ldr	r0, [r4, #16]
   110ea:	6961      	ldr	r1, [r4, #20]
   110ec:	4b0c      	ldr	r3, [pc, #48]	; (11120 <rand+0x74>)
   110ee:	f7fe fe8d 	bl	fe0c <__aeabi_lmul>
   110f2:	2201      	movs	r2, #1
   110f4:	2300      	movs	r3, #0
   110f6:	1880      	adds	r0, r0, r2
   110f8:	4159      	adcs	r1, r3
   110fa:	6120      	str	r0, [r4, #16]
   110fc:	6161      	str	r1, [r4, #20]
   110fe:	0048      	lsls	r0, r1, #1
   11100:	0840      	lsrs	r0, r0, #1
   11102:	bd10      	pop	{r4, pc}
   11104:	20000038 	.word	0x20000038
   11108:	0000330e 	.word	0x0000330e
   1110c:	ffffabcd 	.word	0xffffabcd
   11110:	00001234 	.word	0x00001234
   11114:	ffffe66d 	.word	0xffffe66d
   11118:	ffffdeec 	.word	0xffffdeec
   1111c:	4c957f2d 	.word	0x4c957f2d
   11120:	5851f42d 	.word	0x5851f42d

00011124 <setbuf>:
   11124:	424a      	negs	r2, r1
   11126:	414a      	adcs	r2, r1
   11128:	2380      	movs	r3, #128	; 0x80
   1112a:	b510      	push	{r4, lr}
   1112c:	0052      	lsls	r2, r2, #1
   1112e:	00db      	lsls	r3, r3, #3
   11130:	f000 f802 	bl	11138 <setvbuf>
   11134:	bd10      	pop	{r4, pc}
   11136:	Address 0x00011136 is out of bounds.


00011138 <setvbuf>:
   11138:	b5f0      	push	{r4, r5, r6, r7, lr}
   1113a:	001d      	movs	r5, r3
   1113c:	4b4f      	ldr	r3, [pc, #316]	; (1127c <setvbuf+0x144>)
   1113e:	b085      	sub	sp, #20
   11140:	681e      	ldr	r6, [r3, #0]
   11142:	0004      	movs	r4, r0
   11144:	000f      	movs	r7, r1
   11146:	9200      	str	r2, [sp, #0]
   11148:	2e00      	cmp	r6, #0
   1114a:	d005      	beq.n	11158 <setvbuf+0x20>
   1114c:	69b3      	ldr	r3, [r6, #24]
   1114e:	2b00      	cmp	r3, #0
   11150:	d102      	bne.n	11158 <setvbuf+0x20>
   11152:	0030      	movs	r0, r6
   11154:	f000 fa7a 	bl	1164c <__sinit>
   11158:	4b49      	ldr	r3, [pc, #292]	; (11280 <setvbuf+0x148>)
   1115a:	429c      	cmp	r4, r3
   1115c:	d150      	bne.n	11200 <setvbuf+0xc8>
   1115e:	6874      	ldr	r4, [r6, #4]
   11160:	9b00      	ldr	r3, [sp, #0]
   11162:	2b02      	cmp	r3, #2
   11164:	d005      	beq.n	11172 <setvbuf+0x3a>
   11166:	2b01      	cmp	r3, #1
   11168:	d900      	bls.n	1116c <setvbuf+0x34>
   1116a:	e084      	b.n	11276 <setvbuf+0x13e>
   1116c:	2d00      	cmp	r5, #0
   1116e:	da00      	bge.n	11172 <setvbuf+0x3a>
   11170:	e081      	b.n	11276 <setvbuf+0x13e>
   11172:	0021      	movs	r1, r4
   11174:	0030      	movs	r0, r6
   11176:	f000 f9fb 	bl	11570 <_fflush_r>
   1117a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1117c:	2900      	cmp	r1, #0
   1117e:	d008      	beq.n	11192 <setvbuf+0x5a>
   11180:	0023      	movs	r3, r4
   11182:	3344      	adds	r3, #68	; 0x44
   11184:	4299      	cmp	r1, r3
   11186:	d002      	beq.n	1118e <setvbuf+0x56>
   11188:	0030      	movs	r0, r6
   1118a:	f000 fb77 	bl	1187c <_free_r>
   1118e:	2300      	movs	r3, #0
   11190:	6363      	str	r3, [r4, #52]	; 0x34
   11192:	2300      	movs	r3, #0
   11194:	61a3      	str	r3, [r4, #24]
   11196:	6063      	str	r3, [r4, #4]
   11198:	89a3      	ldrh	r3, [r4, #12]
   1119a:	061b      	lsls	r3, r3, #24
   1119c:	d503      	bpl.n	111a6 <setvbuf+0x6e>
   1119e:	6921      	ldr	r1, [r4, #16]
   111a0:	0030      	movs	r0, r6
   111a2:	f000 fb6b 	bl	1187c <_free_r>
   111a6:	89a3      	ldrh	r3, [r4, #12]
   111a8:	4a36      	ldr	r2, [pc, #216]	; (11284 <setvbuf+0x14c>)
   111aa:	4013      	ands	r3, r2
   111ac:	81a3      	strh	r3, [r4, #12]
   111ae:	9b00      	ldr	r3, [sp, #0]
   111b0:	2b02      	cmp	r3, #2
   111b2:	d05a      	beq.n	1126a <setvbuf+0x132>
   111b4:	ab03      	add	r3, sp, #12
   111b6:	aa02      	add	r2, sp, #8
   111b8:	0021      	movs	r1, r4
   111ba:	0030      	movs	r0, r6
   111bc:	f000 fadc 	bl	11778 <__swhatbuf_r>
   111c0:	89a3      	ldrh	r3, [r4, #12]
   111c2:	4318      	orrs	r0, r3
   111c4:	81a0      	strh	r0, [r4, #12]
   111c6:	2d00      	cmp	r5, #0
   111c8:	d124      	bne.n	11214 <setvbuf+0xdc>
   111ca:	9d02      	ldr	r5, [sp, #8]
   111cc:	0028      	movs	r0, r5
   111ce:	f000 fb3f 	bl	11850 <malloc>
   111d2:	9501      	str	r5, [sp, #4]
   111d4:	1e07      	subs	r7, r0, #0
   111d6:	d142      	bne.n	1125e <setvbuf+0x126>
   111d8:	9b02      	ldr	r3, [sp, #8]
   111da:	9301      	str	r3, [sp, #4]
   111dc:	42ab      	cmp	r3, r5
   111de:	d139      	bne.n	11254 <setvbuf+0x11c>
   111e0:	2001      	movs	r0, #1
   111e2:	4240      	negs	r0, r0
   111e4:	2302      	movs	r3, #2
   111e6:	89a2      	ldrh	r2, [r4, #12]
   111e8:	4313      	orrs	r3, r2
   111ea:	81a3      	strh	r3, [r4, #12]
   111ec:	2300      	movs	r3, #0
   111ee:	60a3      	str	r3, [r4, #8]
   111f0:	0023      	movs	r3, r4
   111f2:	3347      	adds	r3, #71	; 0x47
   111f4:	6023      	str	r3, [r4, #0]
   111f6:	6123      	str	r3, [r4, #16]
   111f8:	2301      	movs	r3, #1
   111fa:	6163      	str	r3, [r4, #20]
   111fc:	b005      	add	sp, #20
   111fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11200:	4b21      	ldr	r3, [pc, #132]	; (11288 <setvbuf+0x150>)
   11202:	429c      	cmp	r4, r3
   11204:	d101      	bne.n	1120a <setvbuf+0xd2>
   11206:	68b4      	ldr	r4, [r6, #8]
   11208:	e7aa      	b.n	11160 <setvbuf+0x28>
   1120a:	4b20      	ldr	r3, [pc, #128]	; (1128c <setvbuf+0x154>)
   1120c:	429c      	cmp	r4, r3
   1120e:	d1a7      	bne.n	11160 <setvbuf+0x28>
   11210:	68f4      	ldr	r4, [r6, #12]
   11212:	e7a5      	b.n	11160 <setvbuf+0x28>
   11214:	2f00      	cmp	r7, #0
   11216:	d0d9      	beq.n	111cc <setvbuf+0x94>
   11218:	69b3      	ldr	r3, [r6, #24]
   1121a:	2b00      	cmp	r3, #0
   1121c:	d102      	bne.n	11224 <setvbuf+0xec>
   1121e:	0030      	movs	r0, r6
   11220:	f000 fa14 	bl	1164c <__sinit>
   11224:	9b00      	ldr	r3, [sp, #0]
   11226:	2b01      	cmp	r3, #1
   11228:	d103      	bne.n	11232 <setvbuf+0xfa>
   1122a:	89a3      	ldrh	r3, [r4, #12]
   1122c:	9a00      	ldr	r2, [sp, #0]
   1122e:	431a      	orrs	r2, r3
   11230:	81a2      	strh	r2, [r4, #12]
   11232:	2008      	movs	r0, #8
   11234:	89a3      	ldrh	r3, [r4, #12]
   11236:	6027      	str	r7, [r4, #0]
   11238:	6127      	str	r7, [r4, #16]
   1123a:	6165      	str	r5, [r4, #20]
   1123c:	4018      	ands	r0, r3
   1123e:	d018      	beq.n	11272 <setvbuf+0x13a>
   11240:	2001      	movs	r0, #1
   11242:	4018      	ands	r0, r3
   11244:	2300      	movs	r3, #0
   11246:	4298      	cmp	r0, r3
   11248:	d011      	beq.n	1126e <setvbuf+0x136>
   1124a:	426d      	negs	r5, r5
   1124c:	60a3      	str	r3, [r4, #8]
   1124e:	61a5      	str	r5, [r4, #24]
   11250:	0018      	movs	r0, r3
   11252:	e7d3      	b.n	111fc <setvbuf+0xc4>
   11254:	9801      	ldr	r0, [sp, #4]
   11256:	f000 fafb 	bl	11850 <malloc>
   1125a:	1e07      	subs	r7, r0, #0
   1125c:	d0c0      	beq.n	111e0 <setvbuf+0xa8>
   1125e:	2380      	movs	r3, #128	; 0x80
   11260:	89a2      	ldrh	r2, [r4, #12]
   11262:	9d01      	ldr	r5, [sp, #4]
   11264:	4313      	orrs	r3, r2
   11266:	81a3      	strh	r3, [r4, #12]
   11268:	e7d6      	b.n	11218 <setvbuf+0xe0>
   1126a:	2000      	movs	r0, #0
   1126c:	e7ba      	b.n	111e4 <setvbuf+0xac>
   1126e:	60a5      	str	r5, [r4, #8]
   11270:	e7c4      	b.n	111fc <setvbuf+0xc4>
   11272:	60a0      	str	r0, [r4, #8]
   11274:	e7c2      	b.n	111fc <setvbuf+0xc4>
   11276:	2001      	movs	r0, #1
   11278:	4240      	negs	r0, r0
   1127a:	e7bf      	b.n	111fc <setvbuf+0xc4>
   1127c:	20000038 	.word	0x20000038
   11280:	000129e8 	.word	0x000129e8
   11284:	fffff35c 	.word	0xfffff35c
   11288:	00012a08 	.word	0x00012a08
   1128c:	000129c8 	.word	0x000129c8

00011290 <strcmp>:
   11290:	7802      	ldrb	r2, [r0, #0]
   11292:	780b      	ldrb	r3, [r1, #0]
   11294:	2a00      	cmp	r2, #0
   11296:	d003      	beq.n	112a0 <strcmp+0x10>
   11298:	3001      	adds	r0, #1
   1129a:	3101      	adds	r1, #1
   1129c:	429a      	cmp	r2, r3
   1129e:	d0f7      	beq.n	11290 <strcmp>
   112a0:	1ad0      	subs	r0, r2, r3
   112a2:	4770      	bx	lr

000112a4 <strlen>:
   112a4:	2300      	movs	r3, #0
   112a6:	5cc2      	ldrb	r2, [r0, r3]
   112a8:	3301      	adds	r3, #1
   112aa:	2a00      	cmp	r2, #0
   112ac:	d1fb      	bne.n	112a6 <strlen+0x2>
   112ae:	1e58      	subs	r0, r3, #1
   112b0:	4770      	bx	lr
   112b2:	Address 0x000112b2 is out of bounds.


000112b4 <__swbuf_r>:
   112b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112b6:	0005      	movs	r5, r0
   112b8:	000e      	movs	r6, r1
   112ba:	0014      	movs	r4, r2
   112bc:	2800      	cmp	r0, #0
   112be:	d004      	beq.n	112ca <__swbuf_r+0x16>
   112c0:	6983      	ldr	r3, [r0, #24]
   112c2:	2b00      	cmp	r3, #0
   112c4:	d101      	bne.n	112ca <__swbuf_r+0x16>
   112c6:	f000 f9c1 	bl	1164c <__sinit>
   112ca:	4b22      	ldr	r3, [pc, #136]	; (11354 <__swbuf_r+0xa0>)
   112cc:	429c      	cmp	r4, r3
   112ce:	d12d      	bne.n	1132c <__swbuf_r+0x78>
   112d0:	686c      	ldr	r4, [r5, #4]
   112d2:	69a3      	ldr	r3, [r4, #24]
   112d4:	60a3      	str	r3, [r4, #8]
   112d6:	89a3      	ldrh	r3, [r4, #12]
   112d8:	071b      	lsls	r3, r3, #28
   112da:	d531      	bpl.n	11340 <__swbuf_r+0x8c>
   112dc:	6923      	ldr	r3, [r4, #16]
   112de:	2b00      	cmp	r3, #0
   112e0:	d02e      	beq.n	11340 <__swbuf_r+0x8c>
   112e2:	6823      	ldr	r3, [r4, #0]
   112e4:	6922      	ldr	r2, [r4, #16]
   112e6:	b2f7      	uxtb	r7, r6
   112e8:	1a98      	subs	r0, r3, r2
   112ea:	6963      	ldr	r3, [r4, #20]
   112ec:	b2f6      	uxtb	r6, r6
   112ee:	4298      	cmp	r0, r3
   112f0:	db05      	blt.n	112fe <__swbuf_r+0x4a>
   112f2:	0021      	movs	r1, r4
   112f4:	0028      	movs	r0, r5
   112f6:	f000 f93b 	bl	11570 <_fflush_r>
   112fa:	2800      	cmp	r0, #0
   112fc:	d126      	bne.n	1134c <__swbuf_r+0x98>
   112fe:	68a3      	ldr	r3, [r4, #8]
   11300:	3001      	adds	r0, #1
   11302:	3b01      	subs	r3, #1
   11304:	60a3      	str	r3, [r4, #8]
   11306:	6823      	ldr	r3, [r4, #0]
   11308:	1c5a      	adds	r2, r3, #1
   1130a:	6022      	str	r2, [r4, #0]
   1130c:	701f      	strb	r7, [r3, #0]
   1130e:	6963      	ldr	r3, [r4, #20]
   11310:	4298      	cmp	r0, r3
   11312:	d004      	beq.n	1131e <__swbuf_r+0x6a>
   11314:	89a3      	ldrh	r3, [r4, #12]
   11316:	07db      	lsls	r3, r3, #31
   11318:	d51a      	bpl.n	11350 <__swbuf_r+0x9c>
   1131a:	2e0a      	cmp	r6, #10
   1131c:	d118      	bne.n	11350 <__swbuf_r+0x9c>
   1131e:	0021      	movs	r1, r4
   11320:	0028      	movs	r0, r5
   11322:	f000 f925 	bl	11570 <_fflush_r>
   11326:	2800      	cmp	r0, #0
   11328:	d012      	beq.n	11350 <__swbuf_r+0x9c>
   1132a:	e00f      	b.n	1134c <__swbuf_r+0x98>
   1132c:	4b0a      	ldr	r3, [pc, #40]	; (11358 <__swbuf_r+0xa4>)
   1132e:	429c      	cmp	r4, r3
   11330:	d101      	bne.n	11336 <__swbuf_r+0x82>
   11332:	68ac      	ldr	r4, [r5, #8]
   11334:	e7cd      	b.n	112d2 <__swbuf_r+0x1e>
   11336:	4b09      	ldr	r3, [pc, #36]	; (1135c <__swbuf_r+0xa8>)
   11338:	429c      	cmp	r4, r3
   1133a:	d1ca      	bne.n	112d2 <__swbuf_r+0x1e>
   1133c:	68ec      	ldr	r4, [r5, #12]
   1133e:	e7c8      	b.n	112d2 <__swbuf_r+0x1e>
   11340:	0021      	movs	r1, r4
   11342:	0028      	movs	r0, r5
   11344:	f000 f80c 	bl	11360 <__swsetup_r>
   11348:	2800      	cmp	r0, #0
   1134a:	d0ca      	beq.n	112e2 <__swbuf_r+0x2e>
   1134c:	2601      	movs	r6, #1
   1134e:	4276      	negs	r6, r6
   11350:	0030      	movs	r0, r6
   11352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11354:	000129e8 	.word	0x000129e8
   11358:	00012a08 	.word	0x00012a08
   1135c:	000129c8 	.word	0x000129c8

00011360 <__swsetup_r>:
   11360:	4b36      	ldr	r3, [pc, #216]	; (1143c <__swsetup_r+0xdc>)
   11362:	b570      	push	{r4, r5, r6, lr}
   11364:	681d      	ldr	r5, [r3, #0]
   11366:	0006      	movs	r6, r0
   11368:	000c      	movs	r4, r1
   1136a:	2d00      	cmp	r5, #0
   1136c:	d005      	beq.n	1137a <__swsetup_r+0x1a>
   1136e:	69ab      	ldr	r3, [r5, #24]
   11370:	2b00      	cmp	r3, #0
   11372:	d102      	bne.n	1137a <__swsetup_r+0x1a>
   11374:	0028      	movs	r0, r5
   11376:	f000 f969 	bl	1164c <__sinit>
   1137a:	4b31      	ldr	r3, [pc, #196]	; (11440 <__swsetup_r+0xe0>)
   1137c:	429c      	cmp	r4, r3
   1137e:	d10f      	bne.n	113a0 <__swsetup_r+0x40>
   11380:	686c      	ldr	r4, [r5, #4]
   11382:	230c      	movs	r3, #12
   11384:	5ee2      	ldrsh	r2, [r4, r3]
   11386:	b293      	uxth	r3, r2
   11388:	0719      	lsls	r1, r3, #28
   1138a:	d42d      	bmi.n	113e8 <__swsetup_r+0x88>
   1138c:	06d9      	lsls	r1, r3, #27
   1138e:	d411      	bmi.n	113b4 <__swsetup_r+0x54>
   11390:	2309      	movs	r3, #9
   11392:	2001      	movs	r0, #1
   11394:	6033      	str	r3, [r6, #0]
   11396:	3337      	adds	r3, #55	; 0x37
   11398:	4313      	orrs	r3, r2
   1139a:	81a3      	strh	r3, [r4, #12]
   1139c:	4240      	negs	r0, r0
   1139e:	bd70      	pop	{r4, r5, r6, pc}
   113a0:	4b28      	ldr	r3, [pc, #160]	; (11444 <__swsetup_r+0xe4>)
   113a2:	429c      	cmp	r4, r3
   113a4:	d101      	bne.n	113aa <__swsetup_r+0x4a>
   113a6:	68ac      	ldr	r4, [r5, #8]
   113a8:	e7eb      	b.n	11382 <__swsetup_r+0x22>
   113aa:	4b27      	ldr	r3, [pc, #156]	; (11448 <__swsetup_r+0xe8>)
   113ac:	429c      	cmp	r4, r3
   113ae:	d1e8      	bne.n	11382 <__swsetup_r+0x22>
   113b0:	68ec      	ldr	r4, [r5, #12]
   113b2:	e7e6      	b.n	11382 <__swsetup_r+0x22>
   113b4:	075b      	lsls	r3, r3, #29
   113b6:	d513      	bpl.n	113e0 <__swsetup_r+0x80>
   113b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   113ba:	2900      	cmp	r1, #0
   113bc:	d008      	beq.n	113d0 <__swsetup_r+0x70>
   113be:	0023      	movs	r3, r4
   113c0:	3344      	adds	r3, #68	; 0x44
   113c2:	4299      	cmp	r1, r3
   113c4:	d002      	beq.n	113cc <__swsetup_r+0x6c>
   113c6:	0030      	movs	r0, r6
   113c8:	f000 fa58 	bl	1187c <_free_r>
   113cc:	2300      	movs	r3, #0
   113ce:	6363      	str	r3, [r4, #52]	; 0x34
   113d0:	2224      	movs	r2, #36	; 0x24
   113d2:	89a3      	ldrh	r3, [r4, #12]
   113d4:	4393      	bics	r3, r2
   113d6:	81a3      	strh	r3, [r4, #12]
   113d8:	2300      	movs	r3, #0
   113da:	6063      	str	r3, [r4, #4]
   113dc:	6923      	ldr	r3, [r4, #16]
   113de:	6023      	str	r3, [r4, #0]
   113e0:	2308      	movs	r3, #8
   113e2:	89a2      	ldrh	r2, [r4, #12]
   113e4:	4313      	orrs	r3, r2
   113e6:	81a3      	strh	r3, [r4, #12]
   113e8:	6923      	ldr	r3, [r4, #16]
   113ea:	2b00      	cmp	r3, #0
   113ec:	d10b      	bne.n	11406 <__swsetup_r+0xa6>
   113ee:	21a0      	movs	r1, #160	; 0xa0
   113f0:	2280      	movs	r2, #128	; 0x80
   113f2:	89a3      	ldrh	r3, [r4, #12]
   113f4:	0089      	lsls	r1, r1, #2
   113f6:	0092      	lsls	r2, r2, #2
   113f8:	400b      	ands	r3, r1
   113fa:	4293      	cmp	r3, r2
   113fc:	d003      	beq.n	11406 <__swsetup_r+0xa6>
   113fe:	0021      	movs	r1, r4
   11400:	0030      	movs	r0, r6
   11402:	f000 f9e1 	bl	117c8 <__smakebuf_r>
   11406:	2301      	movs	r3, #1
   11408:	89a2      	ldrh	r2, [r4, #12]
   1140a:	4013      	ands	r3, r2
   1140c:	d011      	beq.n	11432 <__swsetup_r+0xd2>
   1140e:	2300      	movs	r3, #0
   11410:	60a3      	str	r3, [r4, #8]
   11412:	6963      	ldr	r3, [r4, #20]
   11414:	425b      	negs	r3, r3
   11416:	61a3      	str	r3, [r4, #24]
   11418:	2000      	movs	r0, #0
   1141a:	6923      	ldr	r3, [r4, #16]
   1141c:	4283      	cmp	r3, r0
   1141e:	d1be      	bne.n	1139e <__swsetup_r+0x3e>
   11420:	230c      	movs	r3, #12
   11422:	5ee2      	ldrsh	r2, [r4, r3]
   11424:	0613      	lsls	r3, r2, #24
   11426:	d5ba      	bpl.n	1139e <__swsetup_r+0x3e>
   11428:	2340      	movs	r3, #64	; 0x40
   1142a:	4313      	orrs	r3, r2
   1142c:	81a3      	strh	r3, [r4, #12]
   1142e:	3801      	subs	r0, #1
   11430:	e7b5      	b.n	1139e <__swsetup_r+0x3e>
   11432:	0792      	lsls	r2, r2, #30
   11434:	d400      	bmi.n	11438 <__swsetup_r+0xd8>
   11436:	6963      	ldr	r3, [r4, #20]
   11438:	60a3      	str	r3, [r4, #8]
   1143a:	e7ed      	b.n	11418 <__swsetup_r+0xb8>
   1143c:	20000038 	.word	0x20000038
   11440:	000129e8 	.word	0x000129e8
   11444:	00012a08 	.word	0x00012a08
   11448:	000129c8 	.word	0x000129c8

0001144c <abort>:
   1144c:	b510      	push	{r4, lr}
   1144e:	2006      	movs	r0, #6
   11450:	f000 faf8 	bl	11a44 <raise>
   11454:	2001      	movs	r0, #1
   11456:	f7f7 f821 	bl	849c <_exit>
   1145a:	Address 0x0001145a is out of bounds.


0001145c <__sflush_r>:
   1145c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1145e:	898a      	ldrh	r2, [r1, #12]
   11460:	0005      	movs	r5, r0
   11462:	000c      	movs	r4, r1
   11464:	0713      	lsls	r3, r2, #28
   11466:	d460      	bmi.n	1152a <__sflush_r+0xce>
   11468:	684b      	ldr	r3, [r1, #4]
   1146a:	2b00      	cmp	r3, #0
   1146c:	dc04      	bgt.n	11478 <__sflush_r+0x1c>
   1146e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   11470:	2b00      	cmp	r3, #0
   11472:	dc01      	bgt.n	11478 <__sflush_r+0x1c>
   11474:	2000      	movs	r0, #0
   11476:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11478:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1147a:	2f00      	cmp	r7, #0
   1147c:	d0fa      	beq.n	11474 <__sflush_r+0x18>
   1147e:	2300      	movs	r3, #0
   11480:	682e      	ldr	r6, [r5, #0]
   11482:	602b      	str	r3, [r5, #0]
   11484:	2380      	movs	r3, #128	; 0x80
   11486:	015b      	lsls	r3, r3, #5
   11488:	401a      	ands	r2, r3
   1148a:	d034      	beq.n	114f6 <__sflush_r+0x9a>
   1148c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1148e:	89a3      	ldrh	r3, [r4, #12]
   11490:	075b      	lsls	r3, r3, #29
   11492:	d506      	bpl.n	114a2 <__sflush_r+0x46>
   11494:	6863      	ldr	r3, [r4, #4]
   11496:	1ac0      	subs	r0, r0, r3
   11498:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1149a:	2b00      	cmp	r3, #0
   1149c:	d001      	beq.n	114a2 <__sflush_r+0x46>
   1149e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   114a0:	1ac0      	subs	r0, r0, r3
   114a2:	0002      	movs	r2, r0
   114a4:	6a21      	ldr	r1, [r4, #32]
   114a6:	2300      	movs	r3, #0
   114a8:	0028      	movs	r0, r5
   114aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   114ac:	47b8      	blx	r7
   114ae:	89a1      	ldrh	r1, [r4, #12]
   114b0:	1c43      	adds	r3, r0, #1
   114b2:	d106      	bne.n	114c2 <__sflush_r+0x66>
   114b4:	682b      	ldr	r3, [r5, #0]
   114b6:	2b1d      	cmp	r3, #29
   114b8:	d831      	bhi.n	1151e <__sflush_r+0xc2>
   114ba:	4a2c      	ldr	r2, [pc, #176]	; (1156c <__sflush_r+0x110>)
   114bc:	40da      	lsrs	r2, r3
   114be:	07d3      	lsls	r3, r2, #31
   114c0:	d52d      	bpl.n	1151e <__sflush_r+0xc2>
   114c2:	2300      	movs	r3, #0
   114c4:	6063      	str	r3, [r4, #4]
   114c6:	6923      	ldr	r3, [r4, #16]
   114c8:	6023      	str	r3, [r4, #0]
   114ca:	04cb      	lsls	r3, r1, #19
   114cc:	d505      	bpl.n	114da <__sflush_r+0x7e>
   114ce:	1c43      	adds	r3, r0, #1
   114d0:	d102      	bne.n	114d8 <__sflush_r+0x7c>
   114d2:	682b      	ldr	r3, [r5, #0]
   114d4:	2b00      	cmp	r3, #0
   114d6:	d100      	bne.n	114da <__sflush_r+0x7e>
   114d8:	6560      	str	r0, [r4, #84]	; 0x54
   114da:	6b61      	ldr	r1, [r4, #52]	; 0x34
   114dc:	602e      	str	r6, [r5, #0]
   114de:	2900      	cmp	r1, #0
   114e0:	d0c8      	beq.n	11474 <__sflush_r+0x18>
   114e2:	0023      	movs	r3, r4
   114e4:	3344      	adds	r3, #68	; 0x44
   114e6:	4299      	cmp	r1, r3
   114e8:	d002      	beq.n	114f0 <__sflush_r+0x94>
   114ea:	0028      	movs	r0, r5
   114ec:	f000 f9c6 	bl	1187c <_free_r>
   114f0:	2000      	movs	r0, #0
   114f2:	6360      	str	r0, [r4, #52]	; 0x34
   114f4:	e7bf      	b.n	11476 <__sflush_r+0x1a>
   114f6:	2301      	movs	r3, #1
   114f8:	6a21      	ldr	r1, [r4, #32]
   114fa:	0028      	movs	r0, r5
   114fc:	47b8      	blx	r7
   114fe:	1c43      	adds	r3, r0, #1
   11500:	d1c5      	bne.n	1148e <__sflush_r+0x32>
   11502:	682b      	ldr	r3, [r5, #0]
   11504:	2b00      	cmp	r3, #0
   11506:	d0c2      	beq.n	1148e <__sflush_r+0x32>
   11508:	2b1d      	cmp	r3, #29
   1150a:	d001      	beq.n	11510 <__sflush_r+0xb4>
   1150c:	2b16      	cmp	r3, #22
   1150e:	d101      	bne.n	11514 <__sflush_r+0xb8>
   11510:	602e      	str	r6, [r5, #0]
   11512:	e7af      	b.n	11474 <__sflush_r+0x18>
   11514:	2340      	movs	r3, #64	; 0x40
   11516:	89a2      	ldrh	r2, [r4, #12]
   11518:	4313      	orrs	r3, r2
   1151a:	81a3      	strh	r3, [r4, #12]
   1151c:	e7ab      	b.n	11476 <__sflush_r+0x1a>
   1151e:	2340      	movs	r3, #64	; 0x40
   11520:	430b      	orrs	r3, r1
   11522:	2001      	movs	r0, #1
   11524:	81a3      	strh	r3, [r4, #12]
   11526:	4240      	negs	r0, r0
   11528:	e7a5      	b.n	11476 <__sflush_r+0x1a>
   1152a:	690f      	ldr	r7, [r1, #16]
   1152c:	2f00      	cmp	r7, #0
   1152e:	d0a1      	beq.n	11474 <__sflush_r+0x18>
   11530:	680b      	ldr	r3, [r1, #0]
   11532:	600f      	str	r7, [r1, #0]
   11534:	1bdb      	subs	r3, r3, r7
   11536:	9301      	str	r3, [sp, #4]
   11538:	2300      	movs	r3, #0
   1153a:	0792      	lsls	r2, r2, #30
   1153c:	d100      	bne.n	11540 <__sflush_r+0xe4>
   1153e:	694b      	ldr	r3, [r1, #20]
   11540:	60a3      	str	r3, [r4, #8]
   11542:	9b01      	ldr	r3, [sp, #4]
   11544:	2b00      	cmp	r3, #0
   11546:	dc00      	bgt.n	1154a <__sflush_r+0xee>
   11548:	e794      	b.n	11474 <__sflush_r+0x18>
   1154a:	9b01      	ldr	r3, [sp, #4]
   1154c:	003a      	movs	r2, r7
   1154e:	6a21      	ldr	r1, [r4, #32]
   11550:	0028      	movs	r0, r5
   11552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   11554:	47b0      	blx	r6
   11556:	2800      	cmp	r0, #0
   11558:	dc03      	bgt.n	11562 <__sflush_r+0x106>
   1155a:	2340      	movs	r3, #64	; 0x40
   1155c:	89a2      	ldrh	r2, [r4, #12]
   1155e:	4313      	orrs	r3, r2
   11560:	e7df      	b.n	11522 <__sflush_r+0xc6>
   11562:	9b01      	ldr	r3, [sp, #4]
   11564:	183f      	adds	r7, r7, r0
   11566:	1a1b      	subs	r3, r3, r0
   11568:	9301      	str	r3, [sp, #4]
   1156a:	e7ea      	b.n	11542 <__sflush_r+0xe6>
   1156c:	20400001 	.word	0x20400001

00011570 <_fflush_r>:
   11570:	690b      	ldr	r3, [r1, #16]
   11572:	b570      	push	{r4, r5, r6, lr}
   11574:	0005      	movs	r5, r0
   11576:	000c      	movs	r4, r1
   11578:	2b00      	cmp	r3, #0
   1157a:	d101      	bne.n	11580 <_fflush_r+0x10>
   1157c:	2000      	movs	r0, #0
   1157e:	bd70      	pop	{r4, r5, r6, pc}
   11580:	2800      	cmp	r0, #0
   11582:	d004      	beq.n	1158e <_fflush_r+0x1e>
   11584:	6983      	ldr	r3, [r0, #24]
   11586:	2b00      	cmp	r3, #0
   11588:	d101      	bne.n	1158e <_fflush_r+0x1e>
   1158a:	f000 f85f 	bl	1164c <__sinit>
   1158e:	4b0b      	ldr	r3, [pc, #44]	; (115bc <_fflush_r+0x4c>)
   11590:	429c      	cmp	r4, r3
   11592:	d109      	bne.n	115a8 <_fflush_r+0x38>
   11594:	686c      	ldr	r4, [r5, #4]
   11596:	220c      	movs	r2, #12
   11598:	5ea3      	ldrsh	r3, [r4, r2]
   1159a:	2b00      	cmp	r3, #0
   1159c:	d0ee      	beq.n	1157c <_fflush_r+0xc>
   1159e:	0021      	movs	r1, r4
   115a0:	0028      	movs	r0, r5
   115a2:	f7ff ff5b 	bl	1145c <__sflush_r>
   115a6:	e7ea      	b.n	1157e <_fflush_r+0xe>
   115a8:	4b05      	ldr	r3, [pc, #20]	; (115c0 <_fflush_r+0x50>)
   115aa:	429c      	cmp	r4, r3
   115ac:	d101      	bne.n	115b2 <_fflush_r+0x42>
   115ae:	68ac      	ldr	r4, [r5, #8]
   115b0:	e7f1      	b.n	11596 <_fflush_r+0x26>
   115b2:	4b04      	ldr	r3, [pc, #16]	; (115c4 <_fflush_r+0x54>)
   115b4:	429c      	cmp	r4, r3
   115b6:	d1ee      	bne.n	11596 <_fflush_r+0x26>
   115b8:	68ec      	ldr	r4, [r5, #12]
   115ba:	e7ec      	b.n	11596 <_fflush_r+0x26>
   115bc:	000129e8 	.word	0x000129e8
   115c0:	00012a08 	.word	0x00012a08
   115c4:	000129c8 	.word	0x000129c8

000115c8 <_cleanup_r>:
   115c8:	b510      	push	{r4, lr}
   115ca:	4902      	ldr	r1, [pc, #8]	; (115d4 <_cleanup_r+0xc>)
   115cc:	f000 f8b2 	bl	11734 <_fwalk_reent>
   115d0:	bd10      	pop	{r4, pc}
   115d2:	46c0      	nop			; (mov r8, r8)
   115d4:	00011571 	.word	0x00011571

000115d8 <std.isra.0>:
   115d8:	2300      	movs	r3, #0
   115da:	b510      	push	{r4, lr}
   115dc:	0004      	movs	r4, r0
   115de:	6003      	str	r3, [r0, #0]
   115e0:	6043      	str	r3, [r0, #4]
   115e2:	6083      	str	r3, [r0, #8]
   115e4:	8181      	strh	r1, [r0, #12]
   115e6:	6643      	str	r3, [r0, #100]	; 0x64
   115e8:	81c2      	strh	r2, [r0, #14]
   115ea:	6103      	str	r3, [r0, #16]
   115ec:	6143      	str	r3, [r0, #20]
   115ee:	6183      	str	r3, [r0, #24]
   115f0:	0019      	movs	r1, r3
   115f2:	2208      	movs	r2, #8
   115f4:	305c      	adds	r0, #92	; 0x5c
   115f6:	f7ff fa57 	bl	10aa8 <memset>
   115fa:	4b05      	ldr	r3, [pc, #20]	; (11610 <std.isra.0+0x38>)
   115fc:	6224      	str	r4, [r4, #32]
   115fe:	6263      	str	r3, [r4, #36]	; 0x24
   11600:	4b04      	ldr	r3, [pc, #16]	; (11614 <std.isra.0+0x3c>)
   11602:	62a3      	str	r3, [r4, #40]	; 0x28
   11604:	4b04      	ldr	r3, [pc, #16]	; (11618 <std.isra.0+0x40>)
   11606:	62e3      	str	r3, [r4, #44]	; 0x2c
   11608:	4b04      	ldr	r3, [pc, #16]	; (1161c <std.isra.0+0x44>)
   1160a:	6323      	str	r3, [r4, #48]	; 0x30
   1160c:	bd10      	pop	{r4, pc}
   1160e:	46c0      	nop			; (mov r8, r8)
   11610:	00011a85 	.word	0x00011a85
   11614:	00011aad 	.word	0x00011aad
   11618:	00011ae5 	.word	0x00011ae5
   1161c:	00011b11 	.word	0x00011b11

00011620 <__sfmoreglue>:
   11620:	b570      	push	{r4, r5, r6, lr}
   11622:	2568      	movs	r5, #104	; 0x68
   11624:	1e4a      	subs	r2, r1, #1
   11626:	4355      	muls	r5, r2
   11628:	000e      	movs	r6, r1
   1162a:	0029      	movs	r1, r5
   1162c:	3174      	adds	r1, #116	; 0x74
   1162e:	f000 f96f 	bl	11910 <_malloc_r>
   11632:	1e04      	subs	r4, r0, #0
   11634:	d008      	beq.n	11648 <__sfmoreglue+0x28>
   11636:	2100      	movs	r1, #0
   11638:	002a      	movs	r2, r5
   1163a:	6001      	str	r1, [r0, #0]
   1163c:	6046      	str	r6, [r0, #4]
   1163e:	300c      	adds	r0, #12
   11640:	60a0      	str	r0, [r4, #8]
   11642:	3268      	adds	r2, #104	; 0x68
   11644:	f7ff fa30 	bl	10aa8 <memset>
   11648:	0020      	movs	r0, r4
   1164a:	bd70      	pop	{r4, r5, r6, pc}

0001164c <__sinit>:
   1164c:	6983      	ldr	r3, [r0, #24]
   1164e:	b513      	push	{r0, r1, r4, lr}
   11650:	0004      	movs	r4, r0
   11652:	2b00      	cmp	r3, #0
   11654:	d128      	bne.n	116a8 <__sinit+0x5c>
   11656:	6483      	str	r3, [r0, #72]	; 0x48
   11658:	64c3      	str	r3, [r0, #76]	; 0x4c
   1165a:	6503      	str	r3, [r0, #80]	; 0x50
   1165c:	4b13      	ldr	r3, [pc, #76]	; (116ac <__sinit+0x60>)
   1165e:	4a14      	ldr	r2, [pc, #80]	; (116b0 <__sinit+0x64>)
   11660:	681b      	ldr	r3, [r3, #0]
   11662:	6282      	str	r2, [r0, #40]	; 0x28
   11664:	9301      	str	r3, [sp, #4]
   11666:	4298      	cmp	r0, r3
   11668:	d101      	bne.n	1166e <__sinit+0x22>
   1166a:	2301      	movs	r3, #1
   1166c:	6183      	str	r3, [r0, #24]
   1166e:	0020      	movs	r0, r4
   11670:	f000 f820 	bl	116b4 <__sfp>
   11674:	6060      	str	r0, [r4, #4]
   11676:	0020      	movs	r0, r4
   11678:	f000 f81c 	bl	116b4 <__sfp>
   1167c:	60a0      	str	r0, [r4, #8]
   1167e:	0020      	movs	r0, r4
   11680:	f000 f818 	bl	116b4 <__sfp>
   11684:	2200      	movs	r2, #0
   11686:	60e0      	str	r0, [r4, #12]
   11688:	2104      	movs	r1, #4
   1168a:	6860      	ldr	r0, [r4, #4]
   1168c:	f7ff ffa4 	bl	115d8 <std.isra.0>
   11690:	2201      	movs	r2, #1
   11692:	2109      	movs	r1, #9
   11694:	68a0      	ldr	r0, [r4, #8]
   11696:	f7ff ff9f 	bl	115d8 <std.isra.0>
   1169a:	2202      	movs	r2, #2
   1169c:	2112      	movs	r1, #18
   1169e:	68e0      	ldr	r0, [r4, #12]
   116a0:	f7ff ff9a 	bl	115d8 <std.isra.0>
   116a4:	2301      	movs	r3, #1
   116a6:	61a3      	str	r3, [r4, #24]
   116a8:	bd13      	pop	{r0, r1, r4, pc}
   116aa:	46c0      	nop			; (mov r8, r8)
   116ac:	00012990 	.word	0x00012990
   116b0:	000115c9 	.word	0x000115c9

000116b4 <__sfp>:
   116b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116b6:	4b1e      	ldr	r3, [pc, #120]	; (11730 <__sfp+0x7c>)
   116b8:	0007      	movs	r7, r0
   116ba:	681e      	ldr	r6, [r3, #0]
   116bc:	69b3      	ldr	r3, [r6, #24]
   116be:	2b00      	cmp	r3, #0
   116c0:	d102      	bne.n	116c8 <__sfp+0x14>
   116c2:	0030      	movs	r0, r6
   116c4:	f7ff ffc2 	bl	1164c <__sinit>
   116c8:	3648      	adds	r6, #72	; 0x48
   116ca:	68b4      	ldr	r4, [r6, #8]
   116cc:	6873      	ldr	r3, [r6, #4]
   116ce:	3b01      	subs	r3, #1
   116d0:	d504      	bpl.n	116dc <__sfp+0x28>
   116d2:	6833      	ldr	r3, [r6, #0]
   116d4:	2b00      	cmp	r3, #0
   116d6:	d007      	beq.n	116e8 <__sfp+0x34>
   116d8:	6836      	ldr	r6, [r6, #0]
   116da:	e7f6      	b.n	116ca <__sfp+0x16>
   116dc:	220c      	movs	r2, #12
   116de:	5ea5      	ldrsh	r5, [r4, r2]
   116e0:	2d00      	cmp	r5, #0
   116e2:	d00d      	beq.n	11700 <__sfp+0x4c>
   116e4:	3468      	adds	r4, #104	; 0x68
   116e6:	e7f2      	b.n	116ce <__sfp+0x1a>
   116e8:	2104      	movs	r1, #4
   116ea:	0038      	movs	r0, r7
   116ec:	f7ff ff98 	bl	11620 <__sfmoreglue>
   116f0:	6030      	str	r0, [r6, #0]
   116f2:	2800      	cmp	r0, #0
   116f4:	d1f0      	bne.n	116d8 <__sfp+0x24>
   116f6:	230c      	movs	r3, #12
   116f8:	0004      	movs	r4, r0
   116fa:	603b      	str	r3, [r7, #0]
   116fc:	0020      	movs	r0, r4
   116fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11700:	2301      	movs	r3, #1
   11702:	0020      	movs	r0, r4
   11704:	425b      	negs	r3, r3
   11706:	81e3      	strh	r3, [r4, #14]
   11708:	3302      	adds	r3, #2
   1170a:	81a3      	strh	r3, [r4, #12]
   1170c:	6665      	str	r5, [r4, #100]	; 0x64
   1170e:	6025      	str	r5, [r4, #0]
   11710:	60a5      	str	r5, [r4, #8]
   11712:	6065      	str	r5, [r4, #4]
   11714:	6125      	str	r5, [r4, #16]
   11716:	6165      	str	r5, [r4, #20]
   11718:	61a5      	str	r5, [r4, #24]
   1171a:	2208      	movs	r2, #8
   1171c:	0029      	movs	r1, r5
   1171e:	305c      	adds	r0, #92	; 0x5c
   11720:	f7ff f9c2 	bl	10aa8 <memset>
   11724:	6365      	str	r5, [r4, #52]	; 0x34
   11726:	63a5      	str	r5, [r4, #56]	; 0x38
   11728:	64a5      	str	r5, [r4, #72]	; 0x48
   1172a:	64e5      	str	r5, [r4, #76]	; 0x4c
   1172c:	e7e6      	b.n	116fc <__sfp+0x48>
   1172e:	46c0      	nop			; (mov r8, r8)
   11730:	00012990 	.word	0x00012990

00011734 <_fwalk_reent>:
   11734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11736:	0004      	movs	r4, r0
   11738:	0007      	movs	r7, r0
   1173a:	2600      	movs	r6, #0
   1173c:	9101      	str	r1, [sp, #4]
   1173e:	3448      	adds	r4, #72	; 0x48
   11740:	2c00      	cmp	r4, #0
   11742:	d101      	bne.n	11748 <_fwalk_reent+0x14>
   11744:	0030      	movs	r0, r6
   11746:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11748:	6863      	ldr	r3, [r4, #4]
   1174a:	68a5      	ldr	r5, [r4, #8]
   1174c:	9300      	str	r3, [sp, #0]
   1174e:	9b00      	ldr	r3, [sp, #0]
   11750:	3b01      	subs	r3, #1
   11752:	9300      	str	r3, [sp, #0]
   11754:	d501      	bpl.n	1175a <_fwalk_reent+0x26>
   11756:	6824      	ldr	r4, [r4, #0]
   11758:	e7f2      	b.n	11740 <_fwalk_reent+0xc>
   1175a:	89ab      	ldrh	r3, [r5, #12]
   1175c:	2b01      	cmp	r3, #1
   1175e:	d908      	bls.n	11772 <_fwalk_reent+0x3e>
   11760:	220e      	movs	r2, #14
   11762:	5eab      	ldrsh	r3, [r5, r2]
   11764:	3301      	adds	r3, #1
   11766:	d004      	beq.n	11772 <_fwalk_reent+0x3e>
   11768:	0029      	movs	r1, r5
   1176a:	0038      	movs	r0, r7
   1176c:	9b01      	ldr	r3, [sp, #4]
   1176e:	4798      	blx	r3
   11770:	4306      	orrs	r6, r0
   11772:	3568      	adds	r5, #104	; 0x68
   11774:	e7eb      	b.n	1174e <_fwalk_reent+0x1a>
   11776:	Address 0x00011776 is out of bounds.


00011778 <__swhatbuf_r>:
   11778:	b570      	push	{r4, r5, r6, lr}
   1177a:	000e      	movs	r6, r1
   1177c:	001d      	movs	r5, r3
   1177e:	230e      	movs	r3, #14
   11780:	5ec9      	ldrsh	r1, [r1, r3]
   11782:	b090      	sub	sp, #64	; 0x40
   11784:	0014      	movs	r4, r2
   11786:	2900      	cmp	r1, #0
   11788:	da07      	bge.n	1179a <__swhatbuf_r+0x22>
   1178a:	2300      	movs	r3, #0
   1178c:	602b      	str	r3, [r5, #0]
   1178e:	89b3      	ldrh	r3, [r6, #12]
   11790:	061b      	lsls	r3, r3, #24
   11792:	d411      	bmi.n	117b8 <__swhatbuf_r+0x40>
   11794:	2380      	movs	r3, #128	; 0x80
   11796:	00db      	lsls	r3, r3, #3
   11798:	e00f      	b.n	117ba <__swhatbuf_r+0x42>
   1179a:	aa01      	add	r2, sp, #4
   1179c:	f000 f9e4 	bl	11b68 <_fstat_r>
   117a0:	2800      	cmp	r0, #0
   117a2:	dbf2      	blt.n	1178a <__swhatbuf_r+0x12>
   117a4:	22f0      	movs	r2, #240	; 0xf0
   117a6:	9b02      	ldr	r3, [sp, #8]
   117a8:	0212      	lsls	r2, r2, #8
   117aa:	4013      	ands	r3, r2
   117ac:	4a05      	ldr	r2, [pc, #20]	; (117c4 <__swhatbuf_r+0x4c>)
   117ae:	189b      	adds	r3, r3, r2
   117b0:	425a      	negs	r2, r3
   117b2:	4153      	adcs	r3, r2
   117b4:	602b      	str	r3, [r5, #0]
   117b6:	e7ed      	b.n	11794 <__swhatbuf_r+0x1c>
   117b8:	2340      	movs	r3, #64	; 0x40
   117ba:	2000      	movs	r0, #0
   117bc:	6023      	str	r3, [r4, #0]
   117be:	b010      	add	sp, #64	; 0x40
   117c0:	bd70      	pop	{r4, r5, r6, pc}
   117c2:	46c0      	nop			; (mov r8, r8)
   117c4:	ffffe000 	.word	0xffffe000

000117c8 <__smakebuf_r>:
   117c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   117ca:	2602      	movs	r6, #2
   117cc:	898b      	ldrh	r3, [r1, #12]
   117ce:	0005      	movs	r5, r0
   117d0:	000c      	movs	r4, r1
   117d2:	4233      	tst	r3, r6
   117d4:	d006      	beq.n	117e4 <__smakebuf_r+0x1c>
   117d6:	0023      	movs	r3, r4
   117d8:	3347      	adds	r3, #71	; 0x47
   117da:	6023      	str	r3, [r4, #0]
   117dc:	6123      	str	r3, [r4, #16]
   117de:	2301      	movs	r3, #1
   117e0:	6163      	str	r3, [r4, #20]
   117e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   117e4:	ab01      	add	r3, sp, #4
   117e6:	466a      	mov	r2, sp
   117e8:	f7ff ffc6 	bl	11778 <__swhatbuf_r>
   117ec:	9900      	ldr	r1, [sp, #0]
   117ee:	0007      	movs	r7, r0
   117f0:	0028      	movs	r0, r5
   117f2:	f000 f88d 	bl	11910 <_malloc_r>
   117f6:	2800      	cmp	r0, #0
   117f8:	d108      	bne.n	1180c <__smakebuf_r+0x44>
   117fa:	220c      	movs	r2, #12
   117fc:	5ea3      	ldrsh	r3, [r4, r2]
   117fe:	059a      	lsls	r2, r3, #22
   11800:	d4ef      	bmi.n	117e2 <__smakebuf_r+0x1a>
   11802:	2203      	movs	r2, #3
   11804:	4393      	bics	r3, r2
   11806:	431e      	orrs	r6, r3
   11808:	81a6      	strh	r6, [r4, #12]
   1180a:	e7e4      	b.n	117d6 <__smakebuf_r+0xe>
   1180c:	4b0f      	ldr	r3, [pc, #60]	; (1184c <__smakebuf_r+0x84>)
   1180e:	62ab      	str	r3, [r5, #40]	; 0x28
   11810:	2380      	movs	r3, #128	; 0x80
   11812:	89a2      	ldrh	r2, [r4, #12]
   11814:	6020      	str	r0, [r4, #0]
   11816:	4313      	orrs	r3, r2
   11818:	81a3      	strh	r3, [r4, #12]
   1181a:	9b00      	ldr	r3, [sp, #0]
   1181c:	6120      	str	r0, [r4, #16]
   1181e:	6163      	str	r3, [r4, #20]
   11820:	9b01      	ldr	r3, [sp, #4]
   11822:	2b00      	cmp	r3, #0
   11824:	d00d      	beq.n	11842 <__smakebuf_r+0x7a>
   11826:	230e      	movs	r3, #14
   11828:	5ee1      	ldrsh	r1, [r4, r3]
   1182a:	0028      	movs	r0, r5
   1182c:	f000 f9ae 	bl	11b8c <_isatty_r>
   11830:	2800      	cmp	r0, #0
   11832:	d006      	beq.n	11842 <__smakebuf_r+0x7a>
   11834:	2203      	movs	r2, #3
   11836:	89a3      	ldrh	r3, [r4, #12]
   11838:	4393      	bics	r3, r2
   1183a:	001a      	movs	r2, r3
   1183c:	2301      	movs	r3, #1
   1183e:	4313      	orrs	r3, r2
   11840:	81a3      	strh	r3, [r4, #12]
   11842:	89a0      	ldrh	r0, [r4, #12]
   11844:	4338      	orrs	r0, r7
   11846:	81a0      	strh	r0, [r4, #12]
   11848:	e7cb      	b.n	117e2 <__smakebuf_r+0x1a>
   1184a:	46c0      	nop			; (mov r8, r8)
   1184c:	000115c9 	.word	0x000115c9

00011850 <malloc>:
   11850:	b510      	push	{r4, lr}
   11852:	4b03      	ldr	r3, [pc, #12]	; (11860 <malloc+0x10>)
   11854:	0001      	movs	r1, r0
   11856:	6818      	ldr	r0, [r3, #0]
   11858:	f000 f85a 	bl	11910 <_malloc_r>
   1185c:	bd10      	pop	{r4, pc}
   1185e:	46c0      	nop			; (mov r8, r8)
   11860:	20000038 	.word	0x20000038

00011864 <memchr>:
   11864:	b2c9      	uxtb	r1, r1
   11866:	1882      	adds	r2, r0, r2
   11868:	4290      	cmp	r0, r2
   1186a:	d101      	bne.n	11870 <memchr+0xc>
   1186c:	2000      	movs	r0, #0
   1186e:	4770      	bx	lr
   11870:	7803      	ldrb	r3, [r0, #0]
   11872:	428b      	cmp	r3, r1
   11874:	d0fb      	beq.n	1186e <memchr+0xa>
   11876:	3001      	adds	r0, #1
   11878:	e7f6      	b.n	11868 <memchr+0x4>
   1187a:	Address 0x0001187a is out of bounds.


0001187c <_free_r>:
   1187c:	b570      	push	{r4, r5, r6, lr}
   1187e:	0005      	movs	r5, r0
   11880:	2900      	cmp	r1, #0
   11882:	d010      	beq.n	118a6 <_free_r+0x2a>
   11884:	1f0c      	subs	r4, r1, #4
   11886:	6823      	ldr	r3, [r4, #0]
   11888:	2b00      	cmp	r3, #0
   1188a:	da00      	bge.n	1188e <_free_r+0x12>
   1188c:	18e4      	adds	r4, r4, r3
   1188e:	0028      	movs	r0, r5
   11890:	f000 f9a2 	bl	11bd8 <__malloc_lock>
   11894:	4a1d      	ldr	r2, [pc, #116]	; (1190c <_free_r+0x90>)
   11896:	6813      	ldr	r3, [r2, #0]
   11898:	2b00      	cmp	r3, #0
   1189a:	d105      	bne.n	118a8 <_free_r+0x2c>
   1189c:	6063      	str	r3, [r4, #4]
   1189e:	6014      	str	r4, [r2, #0]
   118a0:	0028      	movs	r0, r5
   118a2:	f000 f99a 	bl	11bda <__malloc_unlock>
   118a6:	bd70      	pop	{r4, r5, r6, pc}
   118a8:	42a3      	cmp	r3, r4
   118aa:	d909      	bls.n	118c0 <_free_r+0x44>
   118ac:	6821      	ldr	r1, [r4, #0]
   118ae:	1860      	adds	r0, r4, r1
   118b0:	4283      	cmp	r3, r0
   118b2:	d1f3      	bne.n	1189c <_free_r+0x20>
   118b4:	6818      	ldr	r0, [r3, #0]
   118b6:	685b      	ldr	r3, [r3, #4]
   118b8:	1841      	adds	r1, r0, r1
   118ba:	6021      	str	r1, [r4, #0]
   118bc:	e7ee      	b.n	1189c <_free_r+0x20>
   118be:	0013      	movs	r3, r2
   118c0:	685a      	ldr	r2, [r3, #4]
   118c2:	2a00      	cmp	r2, #0
   118c4:	d001      	beq.n	118ca <_free_r+0x4e>
   118c6:	42a2      	cmp	r2, r4
   118c8:	d9f9      	bls.n	118be <_free_r+0x42>
   118ca:	6819      	ldr	r1, [r3, #0]
   118cc:	1858      	adds	r0, r3, r1
   118ce:	42a0      	cmp	r0, r4
   118d0:	d10b      	bne.n	118ea <_free_r+0x6e>
   118d2:	6820      	ldr	r0, [r4, #0]
   118d4:	1809      	adds	r1, r1, r0
   118d6:	1858      	adds	r0, r3, r1
   118d8:	6019      	str	r1, [r3, #0]
   118da:	4282      	cmp	r2, r0
   118dc:	d1e0      	bne.n	118a0 <_free_r+0x24>
   118de:	6810      	ldr	r0, [r2, #0]
   118e0:	6852      	ldr	r2, [r2, #4]
   118e2:	1841      	adds	r1, r0, r1
   118e4:	6019      	str	r1, [r3, #0]
   118e6:	605a      	str	r2, [r3, #4]
   118e8:	e7da      	b.n	118a0 <_free_r+0x24>
   118ea:	42a0      	cmp	r0, r4
   118ec:	d902      	bls.n	118f4 <_free_r+0x78>
   118ee:	230c      	movs	r3, #12
   118f0:	602b      	str	r3, [r5, #0]
   118f2:	e7d5      	b.n	118a0 <_free_r+0x24>
   118f4:	6821      	ldr	r1, [r4, #0]
   118f6:	1860      	adds	r0, r4, r1
   118f8:	4282      	cmp	r2, r0
   118fa:	d103      	bne.n	11904 <_free_r+0x88>
   118fc:	6810      	ldr	r0, [r2, #0]
   118fe:	6852      	ldr	r2, [r2, #4]
   11900:	1841      	adds	r1, r0, r1
   11902:	6021      	str	r1, [r4, #0]
   11904:	6062      	str	r2, [r4, #4]
   11906:	605c      	str	r4, [r3, #4]
   11908:	e7ca      	b.n	118a0 <_free_r+0x24>
   1190a:	46c0      	nop			; (mov r8, r8)
   1190c:	20001cec 	.word	0x20001cec

00011910 <_malloc_r>:
   11910:	2303      	movs	r3, #3
   11912:	b570      	push	{r4, r5, r6, lr}
   11914:	1ccd      	adds	r5, r1, #3
   11916:	439d      	bics	r5, r3
   11918:	3508      	adds	r5, #8
   1191a:	0006      	movs	r6, r0
   1191c:	2d0c      	cmp	r5, #12
   1191e:	d21e      	bcs.n	1195e <_malloc_r+0x4e>
   11920:	250c      	movs	r5, #12
   11922:	42a9      	cmp	r1, r5
   11924:	d81d      	bhi.n	11962 <_malloc_r+0x52>
   11926:	0030      	movs	r0, r6
   11928:	f000 f956 	bl	11bd8 <__malloc_lock>
   1192c:	4a25      	ldr	r2, [pc, #148]	; (119c4 <_malloc_r+0xb4>)
   1192e:	6814      	ldr	r4, [r2, #0]
   11930:	0021      	movs	r1, r4
   11932:	2900      	cmp	r1, #0
   11934:	d119      	bne.n	1196a <_malloc_r+0x5a>
   11936:	4c24      	ldr	r4, [pc, #144]	; (119c8 <_malloc_r+0xb8>)
   11938:	6823      	ldr	r3, [r4, #0]
   1193a:	2b00      	cmp	r3, #0
   1193c:	d103      	bne.n	11946 <_malloc_r+0x36>
   1193e:	0030      	movs	r0, r6
   11940:	f000 f844 	bl	119cc <_sbrk_r>
   11944:	6020      	str	r0, [r4, #0]
   11946:	0029      	movs	r1, r5
   11948:	0030      	movs	r0, r6
   1194a:	f000 f83f 	bl	119cc <_sbrk_r>
   1194e:	1c43      	adds	r3, r0, #1
   11950:	d12c      	bne.n	119ac <_malloc_r+0x9c>
   11952:	230c      	movs	r3, #12
   11954:	0030      	movs	r0, r6
   11956:	6033      	str	r3, [r6, #0]
   11958:	f000 f93f 	bl	11bda <__malloc_unlock>
   1195c:	e003      	b.n	11966 <_malloc_r+0x56>
   1195e:	2d00      	cmp	r5, #0
   11960:	dadf      	bge.n	11922 <_malloc_r+0x12>
   11962:	230c      	movs	r3, #12
   11964:	6033      	str	r3, [r6, #0]
   11966:	2000      	movs	r0, #0
   11968:	bd70      	pop	{r4, r5, r6, pc}
   1196a:	680b      	ldr	r3, [r1, #0]
   1196c:	1b5b      	subs	r3, r3, r5
   1196e:	d41a      	bmi.n	119a6 <_malloc_r+0x96>
   11970:	2b0b      	cmp	r3, #11
   11972:	d903      	bls.n	1197c <_malloc_r+0x6c>
   11974:	600b      	str	r3, [r1, #0]
   11976:	18cc      	adds	r4, r1, r3
   11978:	6025      	str	r5, [r4, #0]
   1197a:	e003      	b.n	11984 <_malloc_r+0x74>
   1197c:	428c      	cmp	r4, r1
   1197e:	d10e      	bne.n	1199e <_malloc_r+0x8e>
   11980:	6863      	ldr	r3, [r4, #4]
   11982:	6013      	str	r3, [r2, #0]
   11984:	0030      	movs	r0, r6
   11986:	f000 f928 	bl	11bda <__malloc_unlock>
   1198a:	0020      	movs	r0, r4
   1198c:	2207      	movs	r2, #7
   1198e:	300b      	adds	r0, #11
   11990:	1d23      	adds	r3, r4, #4
   11992:	4390      	bics	r0, r2
   11994:	1ac3      	subs	r3, r0, r3
   11996:	d0e7      	beq.n	11968 <_malloc_r+0x58>
   11998:	425a      	negs	r2, r3
   1199a:	50e2      	str	r2, [r4, r3]
   1199c:	e7e4      	b.n	11968 <_malloc_r+0x58>
   1199e:	684b      	ldr	r3, [r1, #4]
   119a0:	6063      	str	r3, [r4, #4]
   119a2:	000c      	movs	r4, r1
   119a4:	e7ee      	b.n	11984 <_malloc_r+0x74>
   119a6:	000c      	movs	r4, r1
   119a8:	6849      	ldr	r1, [r1, #4]
   119aa:	e7c2      	b.n	11932 <_malloc_r+0x22>
   119ac:	2303      	movs	r3, #3
   119ae:	1cc4      	adds	r4, r0, #3
   119b0:	439c      	bics	r4, r3
   119b2:	42a0      	cmp	r0, r4
   119b4:	d0e0      	beq.n	11978 <_malloc_r+0x68>
   119b6:	1a21      	subs	r1, r4, r0
   119b8:	0030      	movs	r0, r6
   119ba:	f000 f807 	bl	119cc <_sbrk_r>
   119be:	1c43      	adds	r3, r0, #1
   119c0:	d1da      	bne.n	11978 <_malloc_r+0x68>
   119c2:	e7c6      	b.n	11952 <_malloc_r+0x42>
   119c4:	20001cec 	.word	0x20001cec
   119c8:	20001cf0 	.word	0x20001cf0

000119cc <_sbrk_r>:
   119cc:	2300      	movs	r3, #0
   119ce:	b570      	push	{r4, r5, r6, lr}
   119d0:	4c06      	ldr	r4, [pc, #24]	; (119ec <_sbrk_r+0x20>)
   119d2:	0005      	movs	r5, r0
   119d4:	0008      	movs	r0, r1
   119d6:	6023      	str	r3, [r4, #0]
   119d8:	f7f6 fd42 	bl	8460 <_sbrk>
   119dc:	1c43      	adds	r3, r0, #1
   119de:	d103      	bne.n	119e8 <_sbrk_r+0x1c>
   119e0:	6823      	ldr	r3, [r4, #0]
   119e2:	2b00      	cmp	r3, #0
   119e4:	d000      	beq.n	119e8 <_sbrk_r+0x1c>
   119e6:	602b      	str	r3, [r5, #0]
   119e8:	bd70      	pop	{r4, r5, r6, pc}
   119ea:	46c0      	nop			; (mov r8, r8)
   119ec:	200024f4 	.word	0x200024f4

000119f0 <_raise_r>:
   119f0:	b570      	push	{r4, r5, r6, lr}
   119f2:	0004      	movs	r4, r0
   119f4:	000d      	movs	r5, r1
   119f6:	291f      	cmp	r1, #31
   119f8:	d904      	bls.n	11a04 <_raise_r+0x14>
   119fa:	2316      	movs	r3, #22
   119fc:	6003      	str	r3, [r0, #0]
   119fe:	2001      	movs	r0, #1
   11a00:	4240      	negs	r0, r0
   11a02:	bd70      	pop	{r4, r5, r6, pc}
   11a04:	6c43      	ldr	r3, [r0, #68]	; 0x44
   11a06:	2b00      	cmp	r3, #0
   11a08:	d004      	beq.n	11a14 <_raise_r+0x24>
   11a0a:	008a      	lsls	r2, r1, #2
   11a0c:	189b      	adds	r3, r3, r2
   11a0e:	681a      	ldr	r2, [r3, #0]
   11a10:	2a00      	cmp	r2, #0
   11a12:	d108      	bne.n	11a26 <_raise_r+0x36>
   11a14:	0020      	movs	r0, r4
   11a16:	f000 f831 	bl	11a7c <_getpid_r>
   11a1a:	002a      	movs	r2, r5
   11a1c:	0001      	movs	r1, r0
   11a1e:	0020      	movs	r0, r4
   11a20:	f000 f81a 	bl	11a58 <_kill_r>
   11a24:	e7ed      	b.n	11a02 <_raise_r+0x12>
   11a26:	2000      	movs	r0, #0
   11a28:	2a01      	cmp	r2, #1
   11a2a:	d0ea      	beq.n	11a02 <_raise_r+0x12>
   11a2c:	1c51      	adds	r1, r2, #1
   11a2e:	d103      	bne.n	11a38 <_raise_r+0x48>
   11a30:	2316      	movs	r3, #22
   11a32:	3001      	adds	r0, #1
   11a34:	6023      	str	r3, [r4, #0]
   11a36:	e7e4      	b.n	11a02 <_raise_r+0x12>
   11a38:	2400      	movs	r4, #0
   11a3a:	0028      	movs	r0, r5
   11a3c:	601c      	str	r4, [r3, #0]
   11a3e:	4790      	blx	r2
   11a40:	0020      	movs	r0, r4
   11a42:	e7de      	b.n	11a02 <_raise_r+0x12>

00011a44 <raise>:
   11a44:	b510      	push	{r4, lr}
   11a46:	4b03      	ldr	r3, [pc, #12]	; (11a54 <raise+0x10>)
   11a48:	0001      	movs	r1, r0
   11a4a:	6818      	ldr	r0, [r3, #0]
   11a4c:	f7ff ffd0 	bl	119f0 <_raise_r>
   11a50:	bd10      	pop	{r4, pc}
   11a52:	46c0      	nop			; (mov r8, r8)
   11a54:	20000038 	.word	0x20000038

00011a58 <_kill_r>:
   11a58:	2300      	movs	r3, #0
   11a5a:	b570      	push	{r4, r5, r6, lr}
   11a5c:	4c06      	ldr	r4, [pc, #24]	; (11a78 <_kill_r+0x20>)
   11a5e:	0005      	movs	r5, r0
   11a60:	0008      	movs	r0, r1
   11a62:	0011      	movs	r1, r2
   11a64:	6023      	str	r3, [r4, #0]
   11a66:	f7f6 fd1b 	bl	84a0 <_kill>
   11a6a:	1c43      	adds	r3, r0, #1
   11a6c:	d103      	bne.n	11a76 <_kill_r+0x1e>
   11a6e:	6823      	ldr	r3, [r4, #0]
   11a70:	2b00      	cmp	r3, #0
   11a72:	d000      	beq.n	11a76 <_kill_r+0x1e>
   11a74:	602b      	str	r3, [r5, #0]
   11a76:	bd70      	pop	{r4, r5, r6, pc}
   11a78:	200024f4 	.word	0x200024f4

00011a7c <_getpid_r>:
   11a7c:	b510      	push	{r4, lr}
   11a7e:	f7f6 fd10 	bl	84a2 <_getpid>
   11a82:	bd10      	pop	{r4, pc}

00011a84 <__sread>:
   11a84:	b570      	push	{r4, r5, r6, lr}
   11a86:	000c      	movs	r4, r1
   11a88:	250e      	movs	r5, #14
   11a8a:	5f49      	ldrsh	r1, [r1, r5]
   11a8c:	f000 f8a6 	bl	11bdc <_read_r>
   11a90:	2800      	cmp	r0, #0
   11a92:	db03      	blt.n	11a9c <__sread+0x18>
   11a94:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11a96:	181b      	adds	r3, r3, r0
   11a98:	6563      	str	r3, [r4, #84]	; 0x54
   11a9a:	bd70      	pop	{r4, r5, r6, pc}
   11a9c:	89a3      	ldrh	r3, [r4, #12]
   11a9e:	4a02      	ldr	r2, [pc, #8]	; (11aa8 <__sread+0x24>)
   11aa0:	4013      	ands	r3, r2
   11aa2:	81a3      	strh	r3, [r4, #12]
   11aa4:	e7f9      	b.n	11a9a <__sread+0x16>
   11aa6:	46c0      	nop			; (mov r8, r8)
   11aa8:	ffffefff 	.word	0xffffefff

00011aac <__swrite>:
   11aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11aae:	001f      	movs	r7, r3
   11ab0:	898b      	ldrh	r3, [r1, #12]
   11ab2:	0005      	movs	r5, r0
   11ab4:	000c      	movs	r4, r1
   11ab6:	0016      	movs	r6, r2
   11ab8:	05db      	lsls	r3, r3, #23
   11aba:	d505      	bpl.n	11ac8 <__swrite+0x1c>
   11abc:	230e      	movs	r3, #14
   11abe:	5ec9      	ldrsh	r1, [r1, r3]
   11ac0:	2200      	movs	r2, #0
   11ac2:	2302      	movs	r3, #2
   11ac4:	f000 f874 	bl	11bb0 <_lseek_r>
   11ac8:	89a3      	ldrh	r3, [r4, #12]
   11aca:	4a05      	ldr	r2, [pc, #20]	; (11ae0 <__swrite+0x34>)
   11acc:	0028      	movs	r0, r5
   11ace:	4013      	ands	r3, r2
   11ad0:	81a3      	strh	r3, [r4, #12]
   11ad2:	0032      	movs	r2, r6
   11ad4:	230e      	movs	r3, #14
   11ad6:	5ee1      	ldrsh	r1, [r4, r3]
   11ad8:	003b      	movs	r3, r7
   11ada:	f000 f81f 	bl	11b1c <_write_r>
   11ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ae0:	ffffefff 	.word	0xffffefff

00011ae4 <__sseek>:
   11ae4:	b570      	push	{r4, r5, r6, lr}
   11ae6:	000c      	movs	r4, r1
   11ae8:	250e      	movs	r5, #14
   11aea:	5f49      	ldrsh	r1, [r1, r5]
   11aec:	f000 f860 	bl	11bb0 <_lseek_r>
   11af0:	89a3      	ldrh	r3, [r4, #12]
   11af2:	1c42      	adds	r2, r0, #1
   11af4:	d103      	bne.n	11afe <__sseek+0x1a>
   11af6:	4a05      	ldr	r2, [pc, #20]	; (11b0c <__sseek+0x28>)
   11af8:	4013      	ands	r3, r2
   11afa:	81a3      	strh	r3, [r4, #12]
   11afc:	bd70      	pop	{r4, r5, r6, pc}
   11afe:	2280      	movs	r2, #128	; 0x80
   11b00:	0152      	lsls	r2, r2, #5
   11b02:	4313      	orrs	r3, r2
   11b04:	81a3      	strh	r3, [r4, #12]
   11b06:	6560      	str	r0, [r4, #84]	; 0x54
   11b08:	e7f8      	b.n	11afc <__sseek+0x18>
   11b0a:	46c0      	nop			; (mov r8, r8)
   11b0c:	ffffefff 	.word	0xffffefff

00011b10 <__sclose>:
   11b10:	b510      	push	{r4, lr}
   11b12:	230e      	movs	r3, #14
   11b14:	5ec9      	ldrsh	r1, [r1, r3]
   11b16:	f000 f815 	bl	11b44 <_close_r>
   11b1a:	bd10      	pop	{r4, pc}

00011b1c <_write_r>:
   11b1c:	b570      	push	{r4, r5, r6, lr}
   11b1e:	0005      	movs	r5, r0
   11b20:	0008      	movs	r0, r1
   11b22:	0011      	movs	r1, r2
   11b24:	2200      	movs	r2, #0
   11b26:	4c06      	ldr	r4, [pc, #24]	; (11b40 <_write_r+0x24>)
   11b28:	6022      	str	r2, [r4, #0]
   11b2a:	001a      	movs	r2, r3
   11b2c:	f7f6 fc70 	bl	8410 <_write>
   11b30:	1c43      	adds	r3, r0, #1
   11b32:	d103      	bne.n	11b3c <_write_r+0x20>
   11b34:	6823      	ldr	r3, [r4, #0]
   11b36:	2b00      	cmp	r3, #0
   11b38:	d000      	beq.n	11b3c <_write_r+0x20>
   11b3a:	602b      	str	r3, [r5, #0]
   11b3c:	bd70      	pop	{r4, r5, r6, pc}
   11b3e:	46c0      	nop			; (mov r8, r8)
   11b40:	200024f4 	.word	0x200024f4

00011b44 <_close_r>:
   11b44:	2300      	movs	r3, #0
   11b46:	b570      	push	{r4, r5, r6, lr}
   11b48:	4c06      	ldr	r4, [pc, #24]	; (11b64 <_close_r+0x20>)
   11b4a:	0005      	movs	r5, r0
   11b4c:	0008      	movs	r0, r1
   11b4e:	6023      	str	r3, [r4, #0]
   11b50:	f7f6 fc98 	bl	8484 <_close>
   11b54:	1c43      	adds	r3, r0, #1
   11b56:	d103      	bne.n	11b60 <_close_r+0x1c>
   11b58:	6823      	ldr	r3, [r4, #0]
   11b5a:	2b00      	cmp	r3, #0
   11b5c:	d000      	beq.n	11b60 <_close_r+0x1c>
   11b5e:	602b      	str	r3, [r5, #0]
   11b60:	bd70      	pop	{r4, r5, r6, pc}
   11b62:	46c0      	nop			; (mov r8, r8)
   11b64:	200024f4 	.word	0x200024f4

00011b68 <_fstat_r>:
   11b68:	2300      	movs	r3, #0
   11b6a:	b570      	push	{r4, r5, r6, lr}
   11b6c:	4c06      	ldr	r4, [pc, #24]	; (11b88 <_fstat_r+0x20>)
   11b6e:	0005      	movs	r5, r0
   11b70:	0008      	movs	r0, r1
   11b72:	0011      	movs	r1, r2
   11b74:	6023      	str	r3, [r4, #0]
   11b76:	f7f6 fc88 	bl	848a <_fstat>
   11b7a:	1c43      	adds	r3, r0, #1
   11b7c:	d103      	bne.n	11b86 <_fstat_r+0x1e>
   11b7e:	6823      	ldr	r3, [r4, #0]
   11b80:	2b00      	cmp	r3, #0
   11b82:	d000      	beq.n	11b86 <_fstat_r+0x1e>
   11b84:	602b      	str	r3, [r5, #0]
   11b86:	bd70      	pop	{r4, r5, r6, pc}
   11b88:	200024f4 	.word	0x200024f4

00011b8c <_isatty_r>:
   11b8c:	2300      	movs	r3, #0
   11b8e:	b570      	push	{r4, r5, r6, lr}
   11b90:	4c06      	ldr	r4, [pc, #24]	; (11bac <_isatty_r+0x20>)
   11b92:	0005      	movs	r5, r0
   11b94:	0008      	movs	r0, r1
   11b96:	6023      	str	r3, [r4, #0]
   11b98:	f7f6 fc7c 	bl	8494 <_isatty>
   11b9c:	1c43      	adds	r3, r0, #1
   11b9e:	d103      	bne.n	11ba8 <_isatty_r+0x1c>
   11ba0:	6823      	ldr	r3, [r4, #0]
   11ba2:	2b00      	cmp	r3, #0
   11ba4:	d000      	beq.n	11ba8 <_isatty_r+0x1c>
   11ba6:	602b      	str	r3, [r5, #0]
   11ba8:	bd70      	pop	{r4, r5, r6, pc}
   11baa:	46c0      	nop			; (mov r8, r8)
   11bac:	200024f4 	.word	0x200024f4

00011bb0 <_lseek_r>:
   11bb0:	b570      	push	{r4, r5, r6, lr}
   11bb2:	0005      	movs	r5, r0
   11bb4:	0008      	movs	r0, r1
   11bb6:	0011      	movs	r1, r2
   11bb8:	2200      	movs	r2, #0
   11bba:	4c06      	ldr	r4, [pc, #24]	; (11bd4 <_lseek_r+0x24>)
   11bbc:	6022      	str	r2, [r4, #0]
   11bbe:	001a      	movs	r2, r3
   11bc0:	f7f6 fc6a 	bl	8498 <_lseek>
   11bc4:	1c43      	adds	r3, r0, #1
   11bc6:	d103      	bne.n	11bd0 <_lseek_r+0x20>
   11bc8:	6823      	ldr	r3, [r4, #0]
   11bca:	2b00      	cmp	r3, #0
   11bcc:	d000      	beq.n	11bd0 <_lseek_r+0x20>
   11bce:	602b      	str	r3, [r5, #0]
   11bd0:	bd70      	pop	{r4, r5, r6, pc}
   11bd2:	46c0      	nop			; (mov r8, r8)
   11bd4:	200024f4 	.word	0x200024f4

00011bd8 <__malloc_lock>:
   11bd8:	4770      	bx	lr

00011bda <__malloc_unlock>:
   11bda:	4770      	bx	lr

00011bdc <_read_r>:
   11bdc:	b570      	push	{r4, r5, r6, lr}
   11bde:	0005      	movs	r5, r0
   11be0:	0008      	movs	r0, r1
   11be2:	0011      	movs	r1, r2
   11be4:	2200      	movs	r2, #0
   11be6:	4c06      	ldr	r4, [pc, #24]	; (11c00 <_read_r+0x24>)
   11be8:	6022      	str	r2, [r4, #0]
   11bea:	001a      	movs	r2, r3
   11bec:	f7f6 fbee 	bl	83cc <_read>
   11bf0:	1c43      	adds	r3, r0, #1
   11bf2:	d103      	bne.n	11bfc <_read_r+0x20>
   11bf4:	6823      	ldr	r3, [r4, #0]
   11bf6:	2b00      	cmp	r3, #0
   11bf8:	d000      	beq.n	11bfc <_read_r+0x20>
   11bfa:	602b      	str	r3, [r5, #0]
   11bfc:	bd70      	pop	{r4, r5, r6, pc}
   11bfe:	46c0      	nop			; (mov r8, r8)
   11c00:	200024f4 	.word	0x200024f4
   11c04:	000066d8 	.word	0x000066d8
   11c08:	000066d8 	.word	0x000066d8
   11c0c:	000066a6 	.word	0x000066a6
   11c10:	000066d8 	.word	0x000066d8
   11c14:	000066a6 	.word	0x000066a6
   11c18:	0000668c 	.word	0x0000668c
   11c1c:	0000668c 	.word	0x0000668c
   11c20:	000066d8 	.word	0x000066d8
   11c24:	000066d8 	.word	0x000066d8
   11c28:	000066d8 	.word	0x000066d8
   11c2c:	000066d8 	.word	0x000066d8
   11c30:	000066d8 	.word	0x000066d8
   11c34:	000066d8 	.word	0x000066d8
   11c38:	000066d8 	.word	0x000066d8
   11c3c:	000066d8 	.word	0x000066d8
   11c40:	000066d8 	.word	0x000066d8
   11c44:	000066d8 	.word	0x000066d8
   11c48:	000066d8 	.word	0x000066d8
   11c4c:	000066d8 	.word	0x000066d8
   11c50:	000066d8 	.word	0x000066d8
   11c54:	000066d8 	.word	0x000066d8
   11c58:	000066d8 	.word	0x000066d8
   11c5c:	000066d8 	.word	0x000066d8
   11c60:	000066d8 	.word	0x000066d8
   11c64:	000066d8 	.word	0x000066d8
   11c68:	000066d8 	.word	0x000066d8
   11c6c:	000066a6 	.word	0x000066a6
   11c70:	000066d8 	.word	0x000066d8
   11c74:	000066a6 	.word	0x000066a6
   11c78:	000066d8 	.word	0x000066d8
   11c7c:	000066d8 	.word	0x000066d8
   11c80:	000066d8 	.word	0x000066d8
   11c84:	000066d8 	.word	0x000066d8
   11c88:	000066d8 	.word	0x000066d8
   11c8c:	000066d8 	.word	0x000066d8
   11c90:	000066d8 	.word	0x000066d8
   11c94:	000066d8 	.word	0x000066d8
   11c98:	000066d8 	.word	0x000066d8
   11c9c:	000066d8 	.word	0x000066d8
   11ca0:	000066d8 	.word	0x000066d8
   11ca4:	000066d8 	.word	0x000066d8
   11ca8:	000066d8 	.word	0x000066d8
   11cac:	000066d8 	.word	0x000066d8
   11cb0:	000066d8 	.word	0x000066d8
   11cb4:	000066d8 	.word	0x000066d8
   11cb8:	000066d8 	.word	0x000066d8
   11cbc:	000066d8 	.word	0x000066d8
   11cc0:	000066d8 	.word	0x000066d8
   11cc4:	000066d8 	.word	0x000066d8
   11cc8:	000066d8 	.word	0x000066d8
   11ccc:	000066d8 	.word	0x000066d8
   11cd0:	000066d8 	.word	0x000066d8
   11cd4:	000066d8 	.word	0x000066d8
   11cd8:	000066d8 	.word	0x000066d8
   11cdc:	000066d8 	.word	0x000066d8
   11ce0:	000066d8 	.word	0x000066d8
   11ce4:	000066d8 	.word	0x000066d8
   11ce8:	000066d8 	.word	0x000066d8
   11cec:	000066d8 	.word	0x000066d8
   11cf0:	000066d8 	.word	0x000066d8
   11cf4:	000066d8 	.word	0x000066d8
   11cf8:	000066d8 	.word	0x000066d8
   11cfc:	000066d8 	.word	0x000066d8
   11d00:	000066d8 	.word	0x000066d8
   11d04:	000066a6 	.word	0x000066a6
   11d08:	000066a6 	.word	0x000066a6
   11d0c:	000066ae 	.word	0x000066ae
   11d10:	000066ae 	.word	0x000066ae
   11d14:	000066ae 	.word	0x000066ae
   11d18:	000066ae 	.word	0x000066ae
   11d1c:	42000000 	.word	0x42000000
   11d20:	42000400 	.word	0x42000400
   11d24:	42000800 	.word	0x42000800
   11d28:	42000c00 	.word	0x42000c00
   11d2c:	42001000 	.word	0x42001000
   11d30:	43000400 	.word	0x43000400
   11d34:	0000780a 	.word	0x0000780a
   11d38:	00007806 	.word	0x00007806
   11d3c:	00007806 	.word	0x00007806
   11d40:	00007870 	.word	0x00007870
   11d44:	00007870 	.word	0x00007870
   11d48:	00007820 	.word	0x00007820
   11d4c:	00007810 	.word	0x00007810
   11d50:	00007826 	.word	0x00007826
   11d54:	0000785e 	.word	0x0000785e
   11d58:	000078f0 	.word	0x000078f0
   11d5c:	000078d0 	.word	0x000078d0
   11d60:	000078d0 	.word	0x000078d0
   11d64:	0000796a 	.word	0x0000796a
   11d68:	000078e2 	.word	0x000078e2
   11d6c:	000078fe 	.word	0x000078fe
   11d70:	000078d4 	.word	0x000078d4
   11d74:	0000790c 	.word	0x0000790c
   11d78:	0000794e 	.word	0x0000794e
   11d7c:	000079a8 	.word	0x000079a8
   11d80:	000079ea 	.word	0x000079ea
   11d84:	000079ea 	.word	0x000079ea
   11d88:	000079ea 	.word	0x000079ea
   11d8c:	0000799a 	.word	0x0000799a
   11d90:	000079b6 	.word	0x000079b6
   11d94:	0000798c 	.word	0x0000798c
   11d98:	000079c4 	.word	0x000079c4
   11d9c:	000079da 	.word	0x000079da
   11da0:	00008064 	.word	0x00008064
   11da4:	00008158 	.word	0x00008158
   11da8:	00008162 	.word	0x00008162
   11dac:	0000816c 	.word	0x0000816c
   11db0:	00008176 	.word	0x00008176
   11db4:	000081a8 	.word	0x000081a8
   11db8:	000081b2 	.word	0x000081b2
   11dbc:	000081bc 	.word	0x000081bc
   11dc0:	000081c6 	.word	0x000081c6
   11dc4:	000081d0 	.word	0x000081d0
   11dc8:	42002000 	.word	0x42002000
   11dcc:	42002400 	.word	0x42002400
   11dd0:	43000800 	.word	0x43000800
   11dd4:	00000002 	.word	0x00000002
   11dd8:	00000100 	.word	0x00000100
   11ddc:	00000002 	.word	0x00000002
   11de0:	00000200 	.word	0x00000200
   11de4:	00000003 	.word	0x00000003
   11de8:	00000004 	.word	0x00000004
   11dec:	ffffff9c 	.word	0xffffff9c
   11df0:	626d756e 	.word	0x626d756e
   11df4:	664f7265 	.word	0x664f7265
   11df8:	65747942 	.word	0x65747942
   11dfc:	00000073 	.word	0x00000073
   11e00:	732f2e2e 	.word	0x732f2e2e
   11e04:	412f6372 	.word	0x412f6372
   11e08:	742f4653 	.word	0x742f4653
   11e0c:	64726968 	.word	0x64726968
   11e10:	74726170 	.word	0x74726170
   11e14:	69772f79 	.word	0x69772f79
   11e18:	656c6572 	.word	0x656c6572
   11e1c:	6d2f7373 	.word	0x6d2f7373
   11e20:	2f697769 	.word	0x2f697769
   11e24:	76726573 	.word	0x76726573
   11e28:	73656369 	.word	0x73656369
   11e2c:	7364702f 	.word	0x7364702f
   11e30:	6372732f 	.word	0x6372732f
   11e34:	2f766e2f 	.word	0x2f766e2f
   11e38:	764e5f44 	.word	0x764e5f44
   11e3c:	0000632e 	.word	0x0000632e
   11e40:	72646461 	.word	0x72646461
   11e44:	20737365 	.word	0x20737365
   11e48:	44203d3c 	.word	0x44203d3c
   11e4c:	5f564e5f 	.word	0x5f564e5f
   11e50:	4f4d454d 	.word	0x4f4d454d
   11e54:	455f5952 	.word	0x455f5952
   11e58:	0000444e 	.word	0x0000444e
   11e5c:	64646128 	.word	0x64646128
   11e60:	73736572 	.word	0x73736572
   11e64:	6e202b20 	.word	0x6e202b20
   11e68:	65626d75 	.word	0x65626d75
   11e6c:	42664f72 	.word	0x42664f72
   11e70:	73657479 	.word	0x73657479
   11e74:	3d3c2029 	.word	0x3d3c2029
   11e78:	5f442820 	.word	0x5f442820
   11e7c:	4d5f564e 	.word	0x4d5f564e
   11e80:	524f4d45 	.word	0x524f4d45
   11e84:	4e455f59 	.word	0x4e455f59
   11e88:	202b2044 	.word	0x202b2044
   11e8c:	00295531 	.word	0x00295531
   11e90:	66666f28 	.word	0x66666f28
   11e94:	20746573 	.word	0x20746573
   11e98:	756e202b 	.word	0x756e202b
   11e9c:	7265626d 	.word	0x7265626d
   11ea0:	7942664f 	.word	0x7942664f
   11ea4:	29736574 	.word	0x29736574
   11ea8:	203d3c20 	.word	0x203d3c20
   11eac:	564e5f44 	.word	0x564e5f44
   11eb0:	4345535f 	.word	0x4345535f
   11eb4:	5f524f54 	.word	0x5f524f54
   11eb8:	455a4953 	.word	0x455a4953
   11ebc:	ffffff00 	.word	0xffffff00
   11ec0:	4e5f4428 	.word	0x4e5f4428
   11ec4:	454d5f56 	.word	0x454d5f56
   11ec8:	59524f4d 	.word	0x59524f4d
   11ecc:	4154535f 	.word	0x4154535f
   11ed0:	25205452 	.word	0x25205452
   11ed4:	4d564e20 	.word	0x4d564e20
   11ed8:	4c525443 	.word	0x4c525443
   11edc:	574f525f 	.word	0x574f525f
   11ee0:	5a49535f 	.word	0x5a49535f
   11ee4:	3d202945 	.word	0x3d202945
   11ee8:	5530203d 	.word	0x5530203d
   11eec:	00000000 	.word	0x00000000
   11ef0:	4e5f4428 	.word	0x4e5f4428
   11ef4:	454d5f56 	.word	0x454d5f56
   11ef8:	59524f4d 	.word	0x59524f4d
   11efc:	444e455f 	.word	0x444e455f
   11f00:	44202d20 	.word	0x44202d20
   11f04:	5f564e5f 	.word	0x5f564e5f
   11f08:	4f4d454d 	.word	0x4f4d454d
   11f0c:	535f5952 	.word	0x535f5952
   11f10:	54524154 	.word	0x54524154
   11f14:	31202b20 	.word	0x31202b20
   11f18:	3d202955 	.word	0x3d202955
   11f1c:	5f44203d 	.word	0x5f44203d
   11f20:	4d5f564e 	.word	0x4d5f564e
   11f24:	524f4d45 	.word	0x524f4d45
   11f28:	49535f59 	.word	0x49535f59
   11f2c:	ff00455a 	.word	0xff00455a

00011f30 <__func__.12931>:
   11f30:	764e5f44 696e495f ffff0074              D_Nv_Init...

00011f3c <__func__.12943>:
   11f3c:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

00011f4c <__func__.12956>:
   11f4c:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

00011f5c <__func__.12968>:
   11f5c:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   11f6c:	706d495f ffff006c                       _Impl...

00011f74 <__func__.12981>:
   11f74:	706d6f43 44657261 00617461 68636163     CompareData.cach
   11f84:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   11f94:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   11fa4:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   11fb4:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   11fc4:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   11fd4:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   11fe4:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   11ff4:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   12004:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   12014:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   12024:	656c6572 6d2f7373 2f697769 76726573     reless/miwi/serv
   12034:	73656369 7364702f 6372732f 2f766e2f     ices/pds/src/nv/
   12044:	764e5f53 6d61532d 2e313252 ffff0063     S_Nv-SamR21.c...
   12054:	20646928 30203d21 26202975 69282026     (id != 0u) && (i
   12064:	203c2064 30467830 29753030 20262620     d < 0xF000u) && 
   12074:	65746928 6e654c6d 20687467 4d203d3c     (itemLength <= M
   12084:	495f5841 5f4d4554 474e454c 00294854     AX_ITEM_LENGTH).
   12094:	21206469 7530203d ffffff00 20646928     id != 0u....(id 
   120a4:	30203d21 26202975 70282026 61746144     != 0u) && (pData
   120b4:	203d2120 4c4c554e ffff0029               != NULL)...

000120c0 <__func__.12962>:
   120c0:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   120d0:	69467265 00646572                       erFired.

000120d8 <__func__.12998>:
   120d8:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

000120e8 <__func__.13005>:
   120e8:	61657243 74496574 61436d65 00656863     CreateItemCache.

000120f8 <__func__.13010>:
   120f8:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

00012108 <__func__.13103>:
   12108:	64616f4c 74636553 ff00726f              LoadSector..

00012114 <__func__.13125>:
   12114:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

00012124 <__func__.13145>:
   12124:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   12134:	65646565 ffff0064                       eeded...

0001213c <__func__.13152>:
   1213c:	706d6f43 49746361 006d6574              CompactItem.

00012148 <__func__.13176>:
   12148:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

00012158 <__func__.13186>:
   12158:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   12168:	ff006c70                                pl..

0001216c <__func__.13199>:
   1216c:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

0001217c <__func__.13210>:
   1217c:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

0001218c <__func__.13215>:
   1218c:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   1219c:	6c706d49 ffffff00                       Impl....

000121a4 <__func__.13237>:
   121a4:	764e5f53 6172455f 6c416573 6d495f6c     S_Nv_EraseAll_Im
   121b4:	ff006c70 20553028 69203d21 446d6574     pl..(0U != itemD
   121c4:	72637365 6574692e 7a69536d 26202965     escr.itemSize) &
   121d4:	4e282026 204c4c55 69203d21 446d6574     & (NULL != itemD
   121e4:	72637365 6574692e 7461446d 00002961     escr.itemData)..
   121f4:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   12204:	74726170 69772f79 656c6572 6d2f7373     party/wireless/m
   12214:	2f697769 76726573 73656369 7364702f     iwi/services/pds
   12224:	6372732f 2f6c772f 64506c77 74614473     /src/wl/wlPdsDat
   12234:	72655361 2e726576 00000063 4e5f5328     aServer.c...(S_N
   12244:	65525f76 6e727574 756c6156 69445f65     v_ReturnValue_Di
   12254:	746f4e64 73697845 3d3d2074 74657220     dNotExist == ret
   12264:	7c7c2029 5f532820 525f764e 72757465     ) || (S_Nv_Retur
   12274:	6c61566e 4f5f6575 3d3d206b 74657220     nValue_Ok == ret
   12284:	ffff0029                                )...

00012288 <__func__.12877>:
   12288:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   12298:	646e6148 0072656c                       Handler.

000122a0 <__func__.12897>:
   122a0:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

000122b0 <__func__.12904>:
   122b0:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   122c0:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   122d0:	61566e72 5f65756c ff006b4f 6d657469     rnValue_Ok..item
   122e0:	63736544 6574692e 7a69536d 00000065     Desc.itemSize...
   122f0:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   12300:	74726170 69772f79 656c6572 6d2f7373     party/wireless/m
   12310:	2f697769 76726573 73656369 7364702f     iwi/services/pds
   12320:	6372732f 2f6c772f 64506c77 696e4973     /src/wl/wlPdsIni
   12330:	00632e74                                t.c.

00012334 <__func__.12635>:
   12334:	5f534450 74696e49 6d657449 ffff0073     PDS_InitItems...

00012344 <__func__.13097>:
   12344:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   12354:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   12364:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   12374:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   12384:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   12394:	69772f79 656c6572 6d2f7373 2f697769     y/wireless/miwi/
   123a4:	76726573 73656369 7364702f 6372732f     services/pds/src
   123b4:	2f6c772f 64506c77 70795473 6f437365     /wl/wlPdsTypesCo
   123c4:	7265766e 2e726574 ffff0063              nverter.c...

000123d0 <mySecurityKey>:
   123d0:	03020100 07060504 0b0a0908 0f0e0d0c     ................
   123e0:	0000b2ae 0000b2ae 0000b2ae 0000b2b8     ................
   123f0:	0000b2b8 0000b2b8 0000b2b8 0000b2b8     ................
   12400:	0000b2b8 0000b2b8 0000b2b8 0000b2b8     ................
   12410:	0000b2b8 0000b2b8 0000b2b8 0000b2b8     ................
   12420:	0000b2b8 0000b2b8 0000b2b8 0000b2b8     ................
   12430:	0000b2ae 0000b2ae 0000b2ae 0000b2ae     ................
   12440:	0000b2b8 0000b2b8 0000b2b8 0000b2b8     ................
   12450:	0000b2b8 0000b2b8 0000b2b8 0000b2b8     ................
   12460:	0000b2b8 0000b2b8 0000b2ae 0000b2b8     ................
   12470:	0000b2b8 0000b2b8 0000b2b8 0000b2b8     ................
   12480:	0000b2b8 0000b2b8 0000b2b8 0000b2b8     ................
   12490:	0000b2b8 0000b2b8 0000b2b8 0000b2b8     ................
   124a0:	0000b2b8 0000b2b8 0000b2b8 0000b2b8     ................
   124b0:	0000b2b8 0000b2b8 0000b2ae              ............

000124bc <MiWiItemIdsTable>:
   124bc:	00040002 00060005 00030007 00080001     ................
   124cc:	ffff0009 0000c7fc 0000cb96 0000cb96     ................
   124dc:	0000ca0c 0000cb96 0000cb96 0000cb96     ................
   124ec:	0000cb96 0000cb96 0000cb96 0000c50e     ................
   124fc:	0000ca52 0000cb96 0000cb96 0000cb96     R...............
   1250c:	0000cb96 0000c6dc 0000cb96 0000cb96     ................
   1251c:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   1252c:	0000cb96 0000cb96 0000cb96 0000c644     ............D...
   1253c:	0000cade 0000cb96 0000cb96 0000cb96     ................
   1254c:	0000cb96 0000c7d8 0000cb96 0000cb96     ................
   1255c:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   1256c:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   1257c:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   1258c:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   1259c:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   125ac:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   125bc:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   125cc:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   125dc:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   125ec:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   125fc:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   1260c:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   1261c:	0000cb96 0000cb96 0000c93a 0000cb96     ........:.......
   1262c:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   1263c:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   1264c:	0000cb96 0000cb96 0000cb96 0000cb96     ................
   1265c:	0000c914                                ....

00012660 <tc_interrupt_vectors.13115>:
   12660:	ff151211 0000e3c0 0000f0ee 0000f182     ................
   12670:	0000f0ee 0000e54c 0000f0ee 0000f0ee     ....L...........
   12680:	0000f0d6 0000f0ee 0000f0ee 0000f0ee     ................
   12690:	0000f0ee 0000f0ee 0000f0ee 0000f0ee     ................
   126a0:	0000f11c 0000ed5a 0000f0ee 0000f0ee     ....Z...........
   126b0:	0000f0ee 0000f0ee 0000f0ee 0000f0ee     ................
   126c0:	0000f0ee 0000f0ee 0000f0ee 0000f0ee     ................
   126d0:	0000f1a0 0000e4f0 0000e506 0000e506     ................
   126e0:	0000e506 0000e4f0 0000e506 0000e506     ................
   126f0:	0000e506 0000e4f0 0000e4f0 0000e4f0     ................
   12700:	0000e506 0000e4f0 0000e4f0 0000e4f0     ................
   12710:	0000e4f0 0000e506 0000e506 0000e506     ................
   12720:	0000e506 0000e4f0 0000e506 0000e506     ................
   12730:	0000e506 0000e4f0 0000e4f0 0000e4f0     ................
   12740:	0000e506 0000e4f0 0000e4f0 0000e4f0     ................
   12750:	0000e4f0 0000e506 0000e506 0000e506     ................
   12760:	0000e506 0000e506 0000e506 0000e506     ................
   12770:	0000e506 0000e506 0000e506 0000e4f0     ................
   12780:	0000e506 0000e506 0000e506 0000e4f0     ................
   12790:	0000e506 0000e506 0000e506 0000e506     ................
   127a0:	0000e506 0000e506 0000e506 0000e506     ................
   127b0:	0000e506 0000e506 0000e506 0000e4f0     ................
   127c0:	0000e506 0000e506 0000e506 0000e4f0     ................
   127d0:	66666666 00000000 46464646 00000000     ffff....FFFF....

000127e0 <StrADDR>:
   127e0:	72646461 ffffff00                       addr....

000127e8 <StrAOK>:
   127e8:	4b4f410a ff000d0a                       .AOK....

000127f0 <StrAOK2>:
   127f0:	0d4b4f41 ffffff00                       AOK.....

000127f8 <StrCFG>:
   127f8:	00676663                                cfg.

000127fc <StrCHANNEL>:
   127fc:	6e616863 006c656e                       channel.

00012804 <StrCONN>:
   12804:	6e6e6f63 ffffff00                       conn....

0001280c <StrCONSIZE>:
   1280c:	736e6f63 00657a69                       consize.

00012814 <StrECHO>:
   12814:	6f686365 ffffff00                       echo....

0001281c <StrEDS>:
   1281c:	00736465                                eds.

00012820 <StrEDSIZE>:
   12820:	69736465 ff00657a                       edsize..

00012828 <StrERR>:
   12828:	5252450a ff000d0a                       .ERR....

00012830 <StrERR2>:
   12830:	0d525245 ffffff00                       ERR.....

00012838 <StrExitCFG>:
   12838:	6766637e ffffff00                       ~cfg....

00012840 <StrExitECHO>:
   12840:	6863657e ffff006f                       ~echo...

00012848 <StrGET>:
   12848:	00746567                                get.

0001284c <StrJOIN>:
   1284c:	6e696f6a ffffff00                       join....

00012854 <StrMYINDEX>:
   12854:	6e69796d 00786564                       myindex.

0001285c <StrPAN>:
   1285c:	006e6170                                pan.

00012860 <StrPHYMOD>:
   12860:	6d796870 ff00646f                       phymod..

00012868 <StrREBOOT>:
   12868:	6f626552 0d0a746f ffffff00              Reboot......

00012874 <StrRECONN>:
   12874:	6f636572 ff006e6e                       reconn..

0001287c <StrREMOVE>:
   1287c:	6f6d6572 ff006576                       remove..

00012884 <StrRESET>:
   12884:	65736572 ffff0074                       reset...

0001288c <StrRET_VERSION>:
   1288c:	7265760a 646d6320 77663630 0a623230     .ver cmd06fw02b.
   1289c:	ffff000d                                ....

000128a0 <StrRET_VERSION2>:
   128a0:	20726576 30646d63 30776636 000d6232     ver cmd06fw02b..

000128b0 <StrROLE>:
   128b0:	656c6f72 ffffff00                       role....

000128b8 <StrSEND>:
   128b8:	646e6573 ffffff00                       send....

000128c0 <StrSTART>:
   128c0:	72617473 ffff0074                       start...

000128c8 <StrTXPOWER>:
   128c8:	6f707874 00726577                       txpower.

000128d0 <StrVER>:
   128d0:	00726576 00010340 00010310 00010322     ver.@......."...
   128e0:	00010264 00010322 00010306 00010322     d..."......."...
   128f0:	00010264 00010310 00010310 00010306     d...............
   12900:	00010264 0001026c 0001026c 0001026c     d...l...l...l...
   12910:	00010328 00010310 00010310 000102e4     (...............
   12920:	000103c8 000102e4 00010306 000102e4     ................
   12930:	000103c8 00010310 00010310 00010306     ................
   12940:	000103c8 0001026c 0001026c 0001026c     ....l...l...l...
   12950:	000103d2 7566202c 6974636e 203a6e6f     ...., function: 
   12960:	73736100 69747265 22206e6f 20227325     .assertion "%s" 
   12970:	6c696166 203a6465 656c6966 73252220     failed: file "%s
   12980:	6c202c22 20656e69 73256425 000a7325     ", line %d%s%s..

00012990 <_global_impure_ptr>:
   12990:	2000003c 2b302d23 6c680020 6665004c     <.. #-0+ .hlL.ef
   129a0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   129b0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   129c0:	64636261 ff006665                       abcdef..

000129c8 <__sf_fake_stderr>:
	...

000129e8 <__sf_fake_stdin>:
	...

00012a08 <__sf_fake_stdout>:
	...

00012a28 <_init>:
   12a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a2a:	46c0      	nop			; (mov r8, r8)
   12a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12a2e:	bc08      	pop	{r3}
   12a30:	469e      	mov	lr, r3
   12a32:	4770      	bx	lr

00012a34 <__init_array_start>:
   12a34:	000061c1 	.word	0x000061c1

00012a38 <_fini>:
   12a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a3a:	46c0      	nop			; (mov r8, r8)
   12a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12a3e:	bc08      	pop	{r3}
   12a40:	469e      	mov	lr, r3
   12a42:	4770      	bx	lr

00012a44 <__fini_array_start>:
   12a44:	00006199 	.word	0x00006199
