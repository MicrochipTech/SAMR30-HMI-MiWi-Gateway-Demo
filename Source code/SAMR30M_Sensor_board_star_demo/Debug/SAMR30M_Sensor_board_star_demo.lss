
SAMR30M_Sensor_board_star_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00013fa0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000098  20000000  00013fa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00030098  2**0
                  CONTENTS
  3 .bss          00002358  20000098  00014038  00030098  2**2
                  ALLOC
  4 .stack        00002000  200023f0  00016390  00030098  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
  6 .comment      0000008c  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
  7 .debug_info   0006d1b9  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000af73  00000000  00000000  0009d305  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000184e5  00000000  00000000  000a8278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001190  00000000  00000000  000c075d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001d68  00000000  00000000  000c18ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002ad89  00000000  00000000  000c3655  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027e20  00000000  00000000  000ee3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009eaf7  00000000  00000000  001161fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003bcc  00000000  00000000  001b4cf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 */
enum status_code rtc_count_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_count_config *const config)
{
       0:	f0 43 00 20 69 8b 00 00 65 8b 00 00 65 8b 00 00     .C. i...e...e...
	...
				    | config->prescaler;
      2c:	65 8b 00 00 00 00 00 00 00 00 00 00 65 8b 00 00     e...........e...
	switch (config->mode) {
      3c:	65 8b 00 00 65 8b 00 00 65 8b 00 00 bd 6a 00 00     e...e...e....j..
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
      4c:	fd 65 00 00 65 8b 00 00 65 8b 00 00 65 8b 00 00     .e..e...e...e...
				rtc_count_set_compare(module, config->compare_values[i],
      5c:	65 8b 00 00 21 75 00 00 31 75 00 00 41 75 00 00     e...!u..1u..Au..
				return STATUS_ERR_INVALID_ARG;
      6c:	51 75 00 00 61 75 00 00 71 75 00 00 65 8b 00 00     Qu..au..qu..e...
				rtc_count_set_compare(module, config->compare_values[i],
      7c:	65 8b 00 00 65 8b 00 00 4d 87 00 00 5d 87 00 00     e...e...M...]...
	...
	return STATUS_OK;
      94:	6d 87 00 00 65 8b 00 00 65 8b 00 00 00 00 00 00     m...e...e.......
      a4:	65 8b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     e...............
	...

00002100 <__d_nv_mem_start>:
    2100:	ffffffff 	.word	0xffffffff
    2104:	ffffffff 	.word	0xffffffff
    2108:	ffffffff 	.word	0xffffffff
    210c:	ffffffff 	.word	0xffffffff
    2110:	ffffffff 	.word	0xffffffff
    2114:	ffffffff 	.word	0xffffffff
    2118:	ffffffff 	.word	0xffffffff
    211c:	ffffffff 	.word	0xffffffff
    2120:	ffffffff 	.word	0xffffffff
    2124:	ffffffff 	.word	0xffffffff
    2128:	ffffffff 	.word	0xffffffff
    212c:	ffffffff 	.word	0xffffffff
    2130:	ffffffff 	.word	0xffffffff
    2134:	ffffffff 	.word	0xffffffff
    2138:	ffffffff 	.word	0xffffffff
    213c:	ffffffff 	.word	0xffffffff
    2140:	ffffffff 	.word	0xffffffff
    2144:	ffffffff 	.word	0xffffffff
    2148:	ffffffff 	.word	0xffffffff
    214c:	ffffffff 	.word	0xffffffff
    2150:	ffffffff 	.word	0xffffffff
    2154:	ffffffff 	.word	0xffffffff
    2158:	ffffffff 	.word	0xffffffff
    215c:	ffffffff 	.word	0xffffffff
    2160:	ffffffff 	.word	0xffffffff
    2164:	ffffffff 	.word	0xffffffff
    2168:	ffffffff 	.word	0xffffffff
    216c:	ffffffff 	.word	0xffffffff
    2170:	ffffffff 	.word	0xffffffff
    2174:	ffffffff 	.word	0xffffffff
    2178:	ffffffff 	.word	0xffffffff
    217c:	ffffffff 	.word	0xffffffff
    2180:	ffffffff 	.word	0xffffffff
    2184:	ffffffff 	.word	0xffffffff
    2188:	ffffffff 	.word	0xffffffff
    218c:	ffffffff 	.word	0xffffffff
    2190:	ffffffff 	.word	0xffffffff
    2194:	ffffffff 	.word	0xffffffff
    2198:	ffffffff 	.word	0xffffffff
    219c:	ffffffff 	.word	0xffffffff
    21a0:	ffffffff 	.word	0xffffffff
    21a4:	ffffffff 	.word	0xffffffff
    21a8:	ffffffff 	.word	0xffffffff
    21ac:	ffffffff 	.word	0xffffffff
    21b0:	ffffffff 	.word	0xffffffff
    21b4:	ffffffff 	.word	0xffffffff
    21b8:	ffffffff 	.word	0xffffffff
    21bc:	ffffffff 	.word	0xffffffff
    21c0:	ffffffff 	.word	0xffffffff
    21c4:	ffffffff 	.word	0xffffffff
    21c8:	ffffffff 	.word	0xffffffff
    21cc:	ffffffff 	.word	0xffffffff
    21d0:	ffffffff 	.word	0xffffffff
    21d4:	ffffffff 	.word	0xffffffff
    21d8:	ffffffff 	.word	0xffffffff
    21dc:	ffffffff 	.word	0xffffffff
    21e0:	ffffffff 	.word	0xffffffff
    21e4:	ffffffff 	.word	0xffffffff
    21e8:	ffffffff 	.word	0xffffffff
    21ec:	ffffffff 	.word	0xffffffff
    21f0:	ffffffff 	.word	0xffffffff
    21f4:	ffffffff 	.word	0xffffffff
    21f8:	ffffffff 	.word	0xffffffff
    21fc:	ffffffff 	.word	0xffffffff
    2200:	ffffffff 	.word	0xffffffff
    2204:	ffffffff 	.word	0xffffffff
    2208:	ffffffff 	.word	0xffffffff
    220c:	ffffffff 	.word	0xffffffff
    2210:	ffffffff 	.word	0xffffffff
    2214:	ffffffff 	.word	0xffffffff
    2218:	ffffffff 	.word	0xffffffff
    221c:	ffffffff 	.word	0xffffffff
    2220:	ffffffff 	.word	0xffffffff
    2224:	ffffffff 	.word	0xffffffff
    2228:	ffffffff 	.word	0xffffffff
    222c:	ffffffff 	.word	0xffffffff
    2230:	ffffffff 	.word	0xffffffff
    2234:	ffffffff 	.word	0xffffffff
    2238:	ffffffff 	.word	0xffffffff
    223c:	ffffffff 	.word	0xffffffff
    2240:	ffffffff 	.word	0xffffffff
    2244:	ffffffff 	.word	0xffffffff
    2248:	ffffffff 	.word	0xffffffff
    224c:	ffffffff 	.word	0xffffffff
    2250:	ffffffff 	.word	0xffffffff
    2254:	ffffffff 	.word	0xffffffff
    2258:	ffffffff 	.word	0xffffffff
    225c:	ffffffff 	.word	0xffffffff
    2260:	ffffffff 	.word	0xffffffff
    2264:	ffffffff 	.word	0xffffffff
    2268:	ffffffff 	.word	0xffffffff
    226c:	ffffffff 	.word	0xffffffff
    2270:	ffffffff 	.word	0xffffffff
    2274:	ffffffff 	.word	0xffffffff
    2278:	ffffffff 	.word	0xffffffff
    227c:	ffffffff 	.word	0xffffffff
    2280:	ffffffff 	.word	0xffffffff
    2284:	ffffffff 	.word	0xffffffff
    2288:	ffffffff 	.word	0xffffffff
    228c:	ffffffff 	.word	0xffffffff
    2290:	ffffffff 	.word	0xffffffff
    2294:	ffffffff 	.word	0xffffffff
    2298:	ffffffff 	.word	0xffffffff
    229c:	ffffffff 	.word	0xffffffff
    22a0:	ffffffff 	.word	0xffffffff
    22a4:	ffffffff 	.word	0xffffffff
    22a8:	ffffffff 	.word	0xffffffff
    22ac:	ffffffff 	.word	0xffffffff
    22b0:	ffffffff 	.word	0xffffffff
    22b4:	ffffffff 	.word	0xffffffff
    22b8:	ffffffff 	.word	0xffffffff
    22bc:	ffffffff 	.word	0xffffffff
    22c0:	ffffffff 	.word	0xffffffff
    22c4:	ffffffff 	.word	0xffffffff
    22c8:	ffffffff 	.word	0xffffffff
    22cc:	ffffffff 	.word	0xffffffff
    22d0:	ffffffff 	.word	0xffffffff
    22d4:	ffffffff 	.word	0xffffffff
    22d8:	ffffffff 	.word	0xffffffff
    22dc:	ffffffff 	.word	0xffffffff
    22e0:	ffffffff 	.word	0xffffffff
    22e4:	ffffffff 	.word	0xffffffff
    22e8:	ffffffff 	.word	0xffffffff
    22ec:	ffffffff 	.word	0xffffffff
    22f0:	ffffffff 	.word	0xffffffff
    22f4:	ffffffff 	.word	0xffffffff
    22f8:	ffffffff 	.word	0xffffffff
    22fc:	ffffffff 	.word	0xffffffff
    2300:	ffffffff 	.word	0xffffffff
    2304:	ffffffff 	.word	0xffffffff
    2308:	ffffffff 	.word	0xffffffff
    230c:	ffffffff 	.word	0xffffffff
    2310:	ffffffff 	.word	0xffffffff
    2314:	ffffffff 	.word	0xffffffff
    2318:	ffffffff 	.word	0xffffffff
    231c:	ffffffff 	.word	0xffffffff
    2320:	ffffffff 	.word	0xffffffff
    2324:	ffffffff 	.word	0xffffffff
    2328:	ffffffff 	.word	0xffffffff
    232c:	ffffffff 	.word	0xffffffff
    2330:	ffffffff 	.word	0xffffffff
    2334:	ffffffff 	.word	0xffffffff
    2338:	ffffffff 	.word	0xffffffff
    233c:	ffffffff 	.word	0xffffffff
    2340:	ffffffff 	.word	0xffffffff
    2344:	ffffffff 	.word	0xffffffff
    2348:	ffffffff 	.word	0xffffffff
    234c:	ffffffff 	.word	0xffffffff
    2350:	ffffffff 	.word	0xffffffff
    2354:	ffffffff 	.word	0xffffffff
    2358:	ffffffff 	.word	0xffffffff
    235c:	ffffffff 	.word	0xffffffff
    2360:	ffffffff 	.word	0xffffffff
    2364:	ffffffff 	.word	0xffffffff
    2368:	ffffffff 	.word	0xffffffff
    236c:	ffffffff 	.word	0xffffffff
    2370:	ffffffff 	.word	0xffffffff
    2374:	ffffffff 	.word	0xffffffff
    2378:	ffffffff 	.word	0xffffffff
    237c:	ffffffff 	.word	0xffffffff
    2380:	ffffffff 	.word	0xffffffff
    2384:	ffffffff 	.word	0xffffffff
    2388:	ffffffff 	.word	0xffffffff
    238c:	ffffffff 	.word	0xffffffff
    2390:	ffffffff 	.word	0xffffffff
    2394:	ffffffff 	.word	0xffffffff
    2398:	ffffffff 	.word	0xffffffff
    239c:	ffffffff 	.word	0xffffffff
    23a0:	ffffffff 	.word	0xffffffff
    23a4:	ffffffff 	.word	0xffffffff
    23a8:	ffffffff 	.word	0xffffffff
    23ac:	ffffffff 	.word	0xffffffff
    23b0:	ffffffff 	.word	0xffffffff
    23b4:	ffffffff 	.word	0xffffffff
    23b8:	ffffffff 	.word	0xffffffff
    23bc:	ffffffff 	.word	0xffffffff
    23c0:	ffffffff 	.word	0xffffffff
    23c4:	ffffffff 	.word	0xffffffff
    23c8:	ffffffff 	.word	0xffffffff
    23cc:	ffffffff 	.word	0xffffffff
    23d0:	ffffffff 	.word	0xffffffff
    23d4:	ffffffff 	.word	0xffffffff
    23d8:	ffffffff 	.word	0xffffffff
    23dc:	ffffffff 	.word	0xffffffff
    23e0:	ffffffff 	.word	0xffffffff
    23e4:	ffffffff 	.word	0xffffffff
    23e8:	ffffffff 	.word	0xffffffff
    23ec:	ffffffff 	.word	0xffffffff
    23f0:	ffffffff 	.word	0xffffffff
    23f4:	ffffffff 	.word	0xffffffff
    23f8:	ffffffff 	.word	0xffffffff
    23fc:	ffffffff 	.word	0xffffffff
    2400:	ffffffff 	.word	0xffffffff
    2404:	ffffffff 	.word	0xffffffff
    2408:	ffffffff 	.word	0xffffffff
    240c:	ffffffff 	.word	0xffffffff
    2410:	ffffffff 	.word	0xffffffff
    2414:	ffffffff 	.word	0xffffffff
    2418:	ffffffff 	.word	0xffffffff
    241c:	ffffffff 	.word	0xffffffff
    2420:	ffffffff 	.word	0xffffffff
    2424:	ffffffff 	.word	0xffffffff
    2428:	ffffffff 	.word	0xffffffff
    242c:	ffffffff 	.word	0xffffffff
    2430:	ffffffff 	.word	0xffffffff
    2434:	ffffffff 	.word	0xffffffff
    2438:	ffffffff 	.word	0xffffffff
    243c:	ffffffff 	.word	0xffffffff
    2440:	ffffffff 	.word	0xffffffff
    2444:	ffffffff 	.word	0xffffffff
    2448:	ffffffff 	.word	0xffffffff
    244c:	ffffffff 	.word	0xffffffff
    2450:	ffffffff 	.word	0xffffffff
    2454:	ffffffff 	.word	0xffffffff
    2458:	ffffffff 	.word	0xffffffff
    245c:	ffffffff 	.word	0xffffffff
    2460:	ffffffff 	.word	0xffffffff
    2464:	ffffffff 	.word	0xffffffff
    2468:	ffffffff 	.word	0xffffffff
    246c:	ffffffff 	.word	0xffffffff
    2470:	ffffffff 	.word	0xffffffff
    2474:	ffffffff 	.word	0xffffffff
    2478:	ffffffff 	.word	0xffffffff
    247c:	ffffffff 	.word	0xffffffff
    2480:	ffffffff 	.word	0xffffffff
    2484:	ffffffff 	.word	0xffffffff
    2488:	ffffffff 	.word	0xffffffff
    248c:	ffffffff 	.word	0xffffffff
    2490:	ffffffff 	.word	0xffffffff
    2494:	ffffffff 	.word	0xffffffff
    2498:	ffffffff 	.word	0xffffffff
    249c:	ffffffff 	.word	0xffffffff
    24a0:	ffffffff 	.word	0xffffffff
    24a4:	ffffffff 	.word	0xffffffff
    24a8:	ffffffff 	.word	0xffffffff
    24ac:	ffffffff 	.word	0xffffffff
    24b0:	ffffffff 	.word	0xffffffff
    24b4:	ffffffff 	.word	0xffffffff
    24b8:	ffffffff 	.word	0xffffffff
    24bc:	ffffffff 	.word	0xffffffff
    24c0:	ffffffff 	.word	0xffffffff
    24c4:	ffffffff 	.word	0xffffffff
    24c8:	ffffffff 	.word	0xffffffff
    24cc:	ffffffff 	.word	0xffffffff
    24d0:	ffffffff 	.word	0xffffffff
    24d4:	ffffffff 	.word	0xffffffff
    24d8:	ffffffff 	.word	0xffffffff
    24dc:	ffffffff 	.word	0xffffffff
    24e0:	ffffffff 	.word	0xffffffff
    24e4:	ffffffff 	.word	0xffffffff
    24e8:	ffffffff 	.word	0xffffffff
    24ec:	ffffffff 	.word	0xffffffff
    24f0:	ffffffff 	.word	0xffffffff
    24f4:	ffffffff 	.word	0xffffffff
    24f8:	ffffffff 	.word	0xffffffff
    24fc:	ffffffff 	.word	0xffffffff
    2500:	ffffffff 	.word	0xffffffff
    2504:	ffffffff 	.word	0xffffffff
    2508:	ffffffff 	.word	0xffffffff
    250c:	ffffffff 	.word	0xffffffff
    2510:	ffffffff 	.word	0xffffffff
    2514:	ffffffff 	.word	0xffffffff
    2518:	ffffffff 	.word	0xffffffff
    251c:	ffffffff 	.word	0xffffffff
    2520:	ffffffff 	.word	0xffffffff
    2524:	ffffffff 	.word	0xffffffff
    2528:	ffffffff 	.word	0xffffffff
    252c:	ffffffff 	.word	0xffffffff
    2530:	ffffffff 	.word	0xffffffff
    2534:	ffffffff 	.word	0xffffffff
    2538:	ffffffff 	.word	0xffffffff
    253c:	ffffffff 	.word	0xffffffff
    2540:	ffffffff 	.word	0xffffffff
    2544:	ffffffff 	.word	0xffffffff
    2548:	ffffffff 	.word	0xffffffff
    254c:	ffffffff 	.word	0xffffffff
    2550:	ffffffff 	.word	0xffffffff
    2554:	ffffffff 	.word	0xffffffff
    2558:	ffffffff 	.word	0xffffffff
    255c:	ffffffff 	.word	0xffffffff
    2560:	ffffffff 	.word	0xffffffff
    2564:	ffffffff 	.word	0xffffffff
    2568:	ffffffff 	.word	0xffffffff
    256c:	ffffffff 	.word	0xffffffff
    2570:	ffffffff 	.word	0xffffffff
    2574:	ffffffff 	.word	0xffffffff
    2578:	ffffffff 	.word	0xffffffff
    257c:	ffffffff 	.word	0xffffffff
    2580:	ffffffff 	.word	0xffffffff
    2584:	ffffffff 	.word	0xffffffff
    2588:	ffffffff 	.word	0xffffffff
    258c:	ffffffff 	.word	0xffffffff
    2590:	ffffffff 	.word	0xffffffff
    2594:	ffffffff 	.word	0xffffffff
    2598:	ffffffff 	.word	0xffffffff
    259c:	ffffffff 	.word	0xffffffff
    25a0:	ffffffff 	.word	0xffffffff
    25a4:	ffffffff 	.word	0xffffffff
    25a8:	ffffffff 	.word	0xffffffff
    25ac:	ffffffff 	.word	0xffffffff
    25b0:	ffffffff 	.word	0xffffffff
    25b4:	ffffffff 	.word	0xffffffff
    25b8:	ffffffff 	.word	0xffffffff
    25bc:	ffffffff 	.word	0xffffffff
    25c0:	ffffffff 	.word	0xffffffff
    25c4:	ffffffff 	.word	0xffffffff
    25c8:	ffffffff 	.word	0xffffffff
    25cc:	ffffffff 	.word	0xffffffff
    25d0:	ffffffff 	.word	0xffffffff
    25d4:	ffffffff 	.word	0xffffffff
    25d8:	ffffffff 	.word	0xffffffff
    25dc:	ffffffff 	.word	0xffffffff
    25e0:	ffffffff 	.word	0xffffffff
    25e4:	ffffffff 	.word	0xffffffff
    25e8:	ffffffff 	.word	0xffffffff
    25ec:	ffffffff 	.word	0xffffffff
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	ffffffff 	.word	0xffffffff
    25f8:	ffffffff 	.word	0xffffffff
    25fc:	ffffffff 	.word	0xffffffff
    2600:	ffffffff 	.word	0xffffffff
    2604:	ffffffff 	.word	0xffffffff
    2608:	ffffffff 	.word	0xffffffff
    260c:	ffffffff 	.word	0xffffffff
    2610:	ffffffff 	.word	0xffffffff
    2614:	ffffffff 	.word	0xffffffff
    2618:	ffffffff 	.word	0xffffffff
    261c:	ffffffff 	.word	0xffffffff
    2620:	ffffffff 	.word	0xffffffff
    2624:	ffffffff 	.word	0xffffffff
    2628:	ffffffff 	.word	0xffffffff
    262c:	ffffffff 	.word	0xffffffff
    2630:	ffffffff 	.word	0xffffffff
    2634:	ffffffff 	.word	0xffffffff
    2638:	ffffffff 	.word	0xffffffff
    263c:	ffffffff 	.word	0xffffffff
    2640:	ffffffff 	.word	0xffffffff
    2644:	ffffffff 	.word	0xffffffff
    2648:	ffffffff 	.word	0xffffffff
    264c:	ffffffff 	.word	0xffffffff
    2650:	ffffffff 	.word	0xffffffff
    2654:	ffffffff 	.word	0xffffffff
    2658:	ffffffff 	.word	0xffffffff
    265c:	ffffffff 	.word	0xffffffff
    2660:	ffffffff 	.word	0xffffffff
    2664:	ffffffff 	.word	0xffffffff
    2668:	ffffffff 	.word	0xffffffff
    266c:	ffffffff 	.word	0xffffffff
    2670:	ffffffff 	.word	0xffffffff
    2674:	ffffffff 	.word	0xffffffff
    2678:	ffffffff 	.word	0xffffffff
    267c:	ffffffff 	.word	0xffffffff
    2680:	ffffffff 	.word	0xffffffff
    2684:	ffffffff 	.word	0xffffffff
    2688:	ffffffff 	.word	0xffffffff
    268c:	ffffffff 	.word	0xffffffff
    2690:	ffffffff 	.word	0xffffffff
    2694:	ffffffff 	.word	0xffffffff
    2698:	ffffffff 	.word	0xffffffff
    269c:	ffffffff 	.word	0xffffffff
    26a0:	ffffffff 	.word	0xffffffff
    26a4:	ffffffff 	.word	0xffffffff
    26a8:	ffffffff 	.word	0xffffffff
    26ac:	ffffffff 	.word	0xffffffff
    26b0:	ffffffff 	.word	0xffffffff
    26b4:	ffffffff 	.word	0xffffffff
    26b8:	ffffffff 	.word	0xffffffff
    26bc:	ffffffff 	.word	0xffffffff
    26c0:	ffffffff 	.word	0xffffffff
    26c4:	ffffffff 	.word	0xffffffff
    26c8:	ffffffff 	.word	0xffffffff
    26cc:	ffffffff 	.word	0xffffffff
    26d0:	ffffffff 	.word	0xffffffff
    26d4:	ffffffff 	.word	0xffffffff
    26d8:	ffffffff 	.word	0xffffffff
    26dc:	ffffffff 	.word	0xffffffff
    26e0:	ffffffff 	.word	0xffffffff
    26e4:	ffffffff 	.word	0xffffffff
    26e8:	ffffffff 	.word	0xffffffff
    26ec:	ffffffff 	.word	0xffffffff
    26f0:	ffffffff 	.word	0xffffffff
    26f4:	ffffffff 	.word	0xffffffff
    26f8:	ffffffff 	.word	0xffffffff
    26fc:	ffffffff 	.word	0xffffffff
    2700:	ffffffff 	.word	0xffffffff
    2704:	ffffffff 	.word	0xffffffff
    2708:	ffffffff 	.word	0xffffffff
    270c:	ffffffff 	.word	0xffffffff
    2710:	ffffffff 	.word	0xffffffff
    2714:	ffffffff 	.word	0xffffffff
    2718:	ffffffff 	.word	0xffffffff
    271c:	ffffffff 	.word	0xffffffff
    2720:	ffffffff 	.word	0xffffffff
    2724:	ffffffff 	.word	0xffffffff
    2728:	ffffffff 	.word	0xffffffff
    272c:	ffffffff 	.word	0xffffffff
    2730:	ffffffff 	.word	0xffffffff
    2734:	ffffffff 	.word	0xffffffff
    2738:	ffffffff 	.word	0xffffffff
    273c:	ffffffff 	.word	0xffffffff
    2740:	ffffffff 	.word	0xffffffff
    2744:	ffffffff 	.word	0xffffffff
    2748:	ffffffff 	.word	0xffffffff
    274c:	ffffffff 	.word	0xffffffff
    2750:	ffffffff 	.word	0xffffffff
    2754:	ffffffff 	.word	0xffffffff
    2758:	ffffffff 	.word	0xffffffff
    275c:	ffffffff 	.word	0xffffffff
    2760:	ffffffff 	.word	0xffffffff
    2764:	ffffffff 	.word	0xffffffff
    2768:	ffffffff 	.word	0xffffffff
    276c:	ffffffff 	.word	0xffffffff
    2770:	ffffffff 	.word	0xffffffff
    2774:	ffffffff 	.word	0xffffffff
    2778:	ffffffff 	.word	0xffffffff
    277c:	ffffffff 	.word	0xffffffff
    2780:	ffffffff 	.word	0xffffffff
    2784:	ffffffff 	.word	0xffffffff
    2788:	ffffffff 	.word	0xffffffff
    278c:	ffffffff 	.word	0xffffffff
    2790:	ffffffff 	.word	0xffffffff
    2794:	ffffffff 	.word	0xffffffff
    2798:	ffffffff 	.word	0xffffffff
    279c:	ffffffff 	.word	0xffffffff
    27a0:	ffffffff 	.word	0xffffffff
    27a4:	ffffffff 	.word	0xffffffff
    27a8:	ffffffff 	.word	0xffffffff
    27ac:	ffffffff 	.word	0xffffffff
    27b0:	ffffffff 	.word	0xffffffff
    27b4:	ffffffff 	.word	0xffffffff
    27b8:	ffffffff 	.word	0xffffffff
    27bc:	ffffffff 	.word	0xffffffff
    27c0:	ffffffff 	.word	0xffffffff
    27c4:	ffffffff 	.word	0xffffffff
    27c8:	ffffffff 	.word	0xffffffff
    27cc:	ffffffff 	.word	0xffffffff
    27d0:	ffffffff 	.word	0xffffffff
    27d4:	ffffffff 	.word	0xffffffff
    27d8:	ffffffff 	.word	0xffffffff
    27dc:	ffffffff 	.word	0xffffffff
    27e0:	ffffffff 	.word	0xffffffff
    27e4:	ffffffff 	.word	0xffffffff
    27e8:	ffffffff 	.word	0xffffffff
    27ec:	ffffffff 	.word	0xffffffff
    27f0:	ffffffff 	.word	0xffffffff
    27f4:	ffffffff 	.word	0xffffffff
    27f8:	ffffffff 	.word	0xffffffff
    27fc:	ffffffff 	.word	0xffffffff
    2800:	ffffffff 	.word	0xffffffff
    2804:	ffffffff 	.word	0xffffffff
    2808:	ffffffff 	.word	0xffffffff
    280c:	ffffffff 	.word	0xffffffff
    2810:	ffffffff 	.word	0xffffffff
    2814:	ffffffff 	.word	0xffffffff
    2818:	ffffffff 	.word	0xffffffff
    281c:	ffffffff 	.word	0xffffffff
    2820:	ffffffff 	.word	0xffffffff
    2824:	ffffffff 	.word	0xffffffff
    2828:	ffffffff 	.word	0xffffffff
    282c:	ffffffff 	.word	0xffffffff
    2830:	ffffffff 	.word	0xffffffff
    2834:	ffffffff 	.word	0xffffffff
    2838:	ffffffff 	.word	0xffffffff
    283c:	ffffffff 	.word	0xffffffff
    2840:	ffffffff 	.word	0xffffffff
    2844:	ffffffff 	.word	0xffffffff
    2848:	ffffffff 	.word	0xffffffff
    284c:	ffffffff 	.word	0xffffffff
    2850:	ffffffff 	.word	0xffffffff
    2854:	ffffffff 	.word	0xffffffff
    2858:	ffffffff 	.word	0xffffffff
    285c:	ffffffff 	.word	0xffffffff
    2860:	ffffffff 	.word	0xffffffff
    2864:	ffffffff 	.word	0xffffffff
    2868:	ffffffff 	.word	0xffffffff
    286c:	ffffffff 	.word	0xffffffff
    2870:	ffffffff 	.word	0xffffffff
    2874:	ffffffff 	.word	0xffffffff
    2878:	ffffffff 	.word	0xffffffff
    287c:	ffffffff 	.word	0xffffffff
    2880:	ffffffff 	.word	0xffffffff
    2884:	ffffffff 	.word	0xffffffff
    2888:	ffffffff 	.word	0xffffffff
    288c:	ffffffff 	.word	0xffffffff
    2890:	ffffffff 	.word	0xffffffff
    2894:	ffffffff 	.word	0xffffffff
    2898:	ffffffff 	.word	0xffffffff
    289c:	ffffffff 	.word	0xffffffff
    28a0:	ffffffff 	.word	0xffffffff
    28a4:	ffffffff 	.word	0xffffffff
    28a8:	ffffffff 	.word	0xffffffff
    28ac:	ffffffff 	.word	0xffffffff
    28b0:	ffffffff 	.word	0xffffffff
    28b4:	ffffffff 	.word	0xffffffff
    28b8:	ffffffff 	.word	0xffffffff
    28bc:	ffffffff 	.word	0xffffffff
    28c0:	ffffffff 	.word	0xffffffff
    28c4:	ffffffff 	.word	0xffffffff
    28c8:	ffffffff 	.word	0xffffffff
    28cc:	ffffffff 	.word	0xffffffff
    28d0:	ffffffff 	.word	0xffffffff
    28d4:	ffffffff 	.word	0xffffffff
    28d8:	ffffffff 	.word	0xffffffff
    28dc:	ffffffff 	.word	0xffffffff
    28e0:	ffffffff 	.word	0xffffffff
    28e4:	ffffffff 	.word	0xffffffff
    28e8:	ffffffff 	.word	0xffffffff
    28ec:	ffffffff 	.word	0xffffffff
    28f0:	ffffffff 	.word	0xffffffff
    28f4:	ffffffff 	.word	0xffffffff
    28f8:	ffffffff 	.word	0xffffffff
    28fc:	ffffffff 	.word	0xffffffff
    2900:	ffffffff 	.word	0xffffffff
    2904:	ffffffff 	.word	0xffffffff
    2908:	ffffffff 	.word	0xffffffff
    290c:	ffffffff 	.word	0xffffffff
    2910:	ffffffff 	.word	0xffffffff
    2914:	ffffffff 	.word	0xffffffff
    2918:	ffffffff 	.word	0xffffffff
    291c:	ffffffff 	.word	0xffffffff
    2920:	ffffffff 	.word	0xffffffff
    2924:	ffffffff 	.word	0xffffffff
    2928:	ffffffff 	.word	0xffffffff
    292c:	ffffffff 	.word	0xffffffff
    2930:	ffffffff 	.word	0xffffffff
    2934:	ffffffff 	.word	0xffffffff
    2938:	ffffffff 	.word	0xffffffff
    293c:	ffffffff 	.word	0xffffffff
    2940:	ffffffff 	.word	0xffffffff
    2944:	ffffffff 	.word	0xffffffff
    2948:	ffffffff 	.word	0xffffffff
    294c:	ffffffff 	.word	0xffffffff
    2950:	ffffffff 	.word	0xffffffff
    2954:	ffffffff 	.word	0xffffffff
    2958:	ffffffff 	.word	0xffffffff
    295c:	ffffffff 	.word	0xffffffff
    2960:	ffffffff 	.word	0xffffffff
    2964:	ffffffff 	.word	0xffffffff
    2968:	ffffffff 	.word	0xffffffff
    296c:	ffffffff 	.word	0xffffffff
    2970:	ffffffff 	.word	0xffffffff
    2974:	ffffffff 	.word	0xffffffff
    2978:	ffffffff 	.word	0xffffffff
    297c:	ffffffff 	.word	0xffffffff
    2980:	ffffffff 	.word	0xffffffff
    2984:	ffffffff 	.word	0xffffffff
    2988:	ffffffff 	.word	0xffffffff
    298c:	ffffffff 	.word	0xffffffff
    2990:	ffffffff 	.word	0xffffffff
    2994:	ffffffff 	.word	0xffffffff
    2998:	ffffffff 	.word	0xffffffff
    299c:	ffffffff 	.word	0xffffffff
    29a0:	ffffffff 	.word	0xffffffff
    29a4:	ffffffff 	.word	0xffffffff
    29a8:	ffffffff 	.word	0xffffffff
    29ac:	ffffffff 	.word	0xffffffff
    29b0:	ffffffff 	.word	0xffffffff
    29b4:	ffffffff 	.word	0xffffffff
    29b8:	ffffffff 	.word	0xffffffff
    29bc:	ffffffff 	.word	0xffffffff
    29c0:	ffffffff 	.word	0xffffffff
    29c4:	ffffffff 	.word	0xffffffff
    29c8:	ffffffff 	.word	0xffffffff
    29cc:	ffffffff 	.word	0xffffffff
    29d0:	ffffffff 	.word	0xffffffff
    29d4:	ffffffff 	.word	0xffffffff
    29d8:	ffffffff 	.word	0xffffffff
    29dc:	ffffffff 	.word	0xffffffff
    29e0:	ffffffff 	.word	0xffffffff
    29e4:	ffffffff 	.word	0xffffffff
    29e8:	ffffffff 	.word	0xffffffff
    29ec:	ffffffff 	.word	0xffffffff
    29f0:	ffffffff 	.word	0xffffffff
    29f4:	ffffffff 	.word	0xffffffff
    29f8:	ffffffff 	.word	0xffffffff
    29fc:	ffffffff 	.word	0xffffffff
    2a00:	ffffffff 	.word	0xffffffff
    2a04:	ffffffff 	.word	0xffffffff
    2a08:	ffffffff 	.word	0xffffffff
    2a0c:	ffffffff 	.word	0xffffffff
    2a10:	ffffffff 	.word	0xffffffff
    2a14:	ffffffff 	.word	0xffffffff
    2a18:	ffffffff 	.word	0xffffffff
    2a1c:	ffffffff 	.word	0xffffffff
    2a20:	ffffffff 	.word	0xffffffff
    2a24:	ffffffff 	.word	0xffffffff
    2a28:	ffffffff 	.word	0xffffffff
    2a2c:	ffffffff 	.word	0xffffffff
    2a30:	ffffffff 	.word	0xffffffff
    2a34:	ffffffff 	.word	0xffffffff
    2a38:	ffffffff 	.word	0xffffffff
    2a3c:	ffffffff 	.word	0xffffffff
    2a40:	ffffffff 	.word	0xffffffff
    2a44:	ffffffff 	.word	0xffffffff
    2a48:	ffffffff 	.word	0xffffffff
    2a4c:	ffffffff 	.word	0xffffffff
    2a50:	ffffffff 	.word	0xffffffff
    2a54:	ffffffff 	.word	0xffffffff
    2a58:	ffffffff 	.word	0xffffffff
    2a5c:	ffffffff 	.word	0xffffffff
    2a60:	ffffffff 	.word	0xffffffff
    2a64:	ffffffff 	.word	0xffffffff
    2a68:	ffffffff 	.word	0xffffffff
    2a6c:	ffffffff 	.word	0xffffffff
    2a70:	ffffffff 	.word	0xffffffff
    2a74:	ffffffff 	.word	0xffffffff
    2a78:	ffffffff 	.word	0xffffffff
    2a7c:	ffffffff 	.word	0xffffffff
    2a80:	ffffffff 	.word	0xffffffff
    2a84:	ffffffff 	.word	0xffffffff
    2a88:	ffffffff 	.word	0xffffffff
    2a8c:	ffffffff 	.word	0xffffffff
    2a90:	ffffffff 	.word	0xffffffff
    2a94:	ffffffff 	.word	0xffffffff
    2a98:	ffffffff 	.word	0xffffffff
    2a9c:	ffffffff 	.word	0xffffffff
    2aa0:	ffffffff 	.word	0xffffffff
    2aa4:	ffffffff 	.word	0xffffffff
    2aa8:	ffffffff 	.word	0xffffffff
    2aac:	ffffffff 	.word	0xffffffff
    2ab0:	ffffffff 	.word	0xffffffff
    2ab4:	ffffffff 	.word	0xffffffff
    2ab8:	ffffffff 	.word	0xffffffff
    2abc:	ffffffff 	.word	0xffffffff
    2ac0:	ffffffff 	.word	0xffffffff
    2ac4:	ffffffff 	.word	0xffffffff
    2ac8:	ffffffff 	.word	0xffffffff
    2acc:	ffffffff 	.word	0xffffffff
    2ad0:	ffffffff 	.word	0xffffffff
    2ad4:	ffffffff 	.word	0xffffffff
    2ad8:	ffffffff 	.word	0xffffffff
    2adc:	ffffffff 	.word	0xffffffff
    2ae0:	ffffffff 	.word	0xffffffff
    2ae4:	ffffffff 	.word	0xffffffff
    2ae8:	ffffffff 	.word	0xffffffff
    2aec:	ffffffff 	.word	0xffffffff
    2af0:	ffffffff 	.word	0xffffffff
    2af4:	ffffffff 	.word	0xffffffff
    2af8:	ffffffff 	.word	0xffffffff
    2afc:	ffffffff 	.word	0xffffffff
    2b00:	ffffffff 	.word	0xffffffff
    2b04:	ffffffff 	.word	0xffffffff
    2b08:	ffffffff 	.word	0xffffffff
    2b0c:	ffffffff 	.word	0xffffffff
    2b10:	ffffffff 	.word	0xffffffff
    2b14:	ffffffff 	.word	0xffffffff
    2b18:	ffffffff 	.word	0xffffffff
    2b1c:	ffffffff 	.word	0xffffffff
    2b20:	ffffffff 	.word	0xffffffff
    2b24:	ffffffff 	.word	0xffffffff
    2b28:	ffffffff 	.word	0xffffffff
    2b2c:	ffffffff 	.word	0xffffffff
    2b30:	ffffffff 	.word	0xffffffff
    2b34:	ffffffff 	.word	0xffffffff
    2b38:	ffffffff 	.word	0xffffffff
    2b3c:	ffffffff 	.word	0xffffffff
    2b40:	ffffffff 	.word	0xffffffff
    2b44:	ffffffff 	.word	0xffffffff
    2b48:	ffffffff 	.word	0xffffffff
    2b4c:	ffffffff 	.word	0xffffffff
    2b50:	ffffffff 	.word	0xffffffff
    2b54:	ffffffff 	.word	0xffffffff
    2b58:	ffffffff 	.word	0xffffffff
    2b5c:	ffffffff 	.word	0xffffffff
    2b60:	ffffffff 	.word	0xffffffff
    2b64:	ffffffff 	.word	0xffffffff
    2b68:	ffffffff 	.word	0xffffffff
    2b6c:	ffffffff 	.word	0xffffffff
    2b70:	ffffffff 	.word	0xffffffff
    2b74:	ffffffff 	.word	0xffffffff
    2b78:	ffffffff 	.word	0xffffffff
    2b7c:	ffffffff 	.word	0xffffffff
    2b80:	ffffffff 	.word	0xffffffff
    2b84:	ffffffff 	.word	0xffffffff
    2b88:	ffffffff 	.word	0xffffffff
    2b8c:	ffffffff 	.word	0xffffffff
    2b90:	ffffffff 	.word	0xffffffff
    2b94:	ffffffff 	.word	0xffffffff
    2b98:	ffffffff 	.word	0xffffffff
    2b9c:	ffffffff 	.word	0xffffffff
    2ba0:	ffffffff 	.word	0xffffffff
    2ba4:	ffffffff 	.word	0xffffffff
    2ba8:	ffffffff 	.word	0xffffffff
    2bac:	ffffffff 	.word	0xffffffff
    2bb0:	ffffffff 	.word	0xffffffff
    2bb4:	ffffffff 	.word	0xffffffff
    2bb8:	ffffffff 	.word	0xffffffff
    2bbc:	ffffffff 	.word	0xffffffff
    2bc0:	ffffffff 	.word	0xffffffff
    2bc4:	ffffffff 	.word	0xffffffff
    2bc8:	ffffffff 	.word	0xffffffff
    2bcc:	ffffffff 	.word	0xffffffff
    2bd0:	ffffffff 	.word	0xffffffff
    2bd4:	ffffffff 	.word	0xffffffff
    2bd8:	ffffffff 	.word	0xffffffff
    2bdc:	ffffffff 	.word	0xffffffff
    2be0:	ffffffff 	.word	0xffffffff
    2be4:	ffffffff 	.word	0xffffffff
    2be8:	ffffffff 	.word	0xffffffff
    2bec:	ffffffff 	.word	0xffffffff
    2bf0:	ffffffff 	.word	0xffffffff
    2bf4:	ffffffff 	.word	0xffffffff
    2bf8:	ffffffff 	.word	0xffffffff
    2bfc:	ffffffff 	.word	0xffffffff
    2c00:	ffffffff 	.word	0xffffffff
    2c04:	ffffffff 	.word	0xffffffff
    2c08:	ffffffff 	.word	0xffffffff
    2c0c:	ffffffff 	.word	0xffffffff
    2c10:	ffffffff 	.word	0xffffffff
    2c14:	ffffffff 	.word	0xffffffff
    2c18:	ffffffff 	.word	0xffffffff
    2c1c:	ffffffff 	.word	0xffffffff
    2c20:	ffffffff 	.word	0xffffffff
    2c24:	ffffffff 	.word	0xffffffff
    2c28:	ffffffff 	.word	0xffffffff
    2c2c:	ffffffff 	.word	0xffffffff
    2c30:	ffffffff 	.word	0xffffffff
    2c34:	ffffffff 	.word	0xffffffff
    2c38:	ffffffff 	.word	0xffffffff
    2c3c:	ffffffff 	.word	0xffffffff
    2c40:	ffffffff 	.word	0xffffffff
    2c44:	ffffffff 	.word	0xffffffff
    2c48:	ffffffff 	.word	0xffffffff
    2c4c:	ffffffff 	.word	0xffffffff
    2c50:	ffffffff 	.word	0xffffffff
    2c54:	ffffffff 	.word	0xffffffff
    2c58:	ffffffff 	.word	0xffffffff
    2c5c:	ffffffff 	.word	0xffffffff
    2c60:	ffffffff 	.word	0xffffffff
    2c64:	ffffffff 	.word	0xffffffff
    2c68:	ffffffff 	.word	0xffffffff
    2c6c:	ffffffff 	.word	0xffffffff
    2c70:	ffffffff 	.word	0xffffffff
    2c74:	ffffffff 	.word	0xffffffff
    2c78:	ffffffff 	.word	0xffffffff
    2c7c:	ffffffff 	.word	0xffffffff
    2c80:	ffffffff 	.word	0xffffffff
    2c84:	ffffffff 	.word	0xffffffff
    2c88:	ffffffff 	.word	0xffffffff
    2c8c:	ffffffff 	.word	0xffffffff
    2c90:	ffffffff 	.word	0xffffffff
    2c94:	ffffffff 	.word	0xffffffff
    2c98:	ffffffff 	.word	0xffffffff
    2c9c:	ffffffff 	.word	0xffffffff
    2ca0:	ffffffff 	.word	0xffffffff
    2ca4:	ffffffff 	.word	0xffffffff
    2ca8:	ffffffff 	.word	0xffffffff
    2cac:	ffffffff 	.word	0xffffffff
    2cb0:	ffffffff 	.word	0xffffffff
    2cb4:	ffffffff 	.word	0xffffffff
    2cb8:	ffffffff 	.word	0xffffffff
    2cbc:	ffffffff 	.word	0xffffffff
    2cc0:	ffffffff 	.word	0xffffffff
    2cc4:	ffffffff 	.word	0xffffffff
    2cc8:	ffffffff 	.word	0xffffffff
    2ccc:	ffffffff 	.word	0xffffffff
    2cd0:	ffffffff 	.word	0xffffffff
    2cd4:	ffffffff 	.word	0xffffffff
    2cd8:	ffffffff 	.word	0xffffffff
    2cdc:	ffffffff 	.word	0xffffffff
    2ce0:	ffffffff 	.word	0xffffffff
    2ce4:	ffffffff 	.word	0xffffffff
    2ce8:	ffffffff 	.word	0xffffffff
    2cec:	ffffffff 	.word	0xffffffff
    2cf0:	ffffffff 	.word	0xffffffff
    2cf4:	ffffffff 	.word	0xffffffff
    2cf8:	ffffffff 	.word	0xffffffff
    2cfc:	ffffffff 	.word	0xffffffff
    2d00:	ffffffff 	.word	0xffffffff
    2d04:	ffffffff 	.word	0xffffffff
    2d08:	ffffffff 	.word	0xffffffff
    2d0c:	ffffffff 	.word	0xffffffff
    2d10:	ffffffff 	.word	0xffffffff
    2d14:	ffffffff 	.word	0xffffffff
    2d18:	ffffffff 	.word	0xffffffff
    2d1c:	ffffffff 	.word	0xffffffff
    2d20:	ffffffff 	.word	0xffffffff
    2d24:	ffffffff 	.word	0xffffffff
    2d28:	ffffffff 	.word	0xffffffff
    2d2c:	ffffffff 	.word	0xffffffff
    2d30:	ffffffff 	.word	0xffffffff
    2d34:	ffffffff 	.word	0xffffffff
    2d38:	ffffffff 	.word	0xffffffff
    2d3c:	ffffffff 	.word	0xffffffff
    2d40:	ffffffff 	.word	0xffffffff
    2d44:	ffffffff 	.word	0xffffffff
    2d48:	ffffffff 	.word	0xffffffff
    2d4c:	ffffffff 	.word	0xffffffff
    2d50:	ffffffff 	.word	0xffffffff
    2d54:	ffffffff 	.word	0xffffffff
    2d58:	ffffffff 	.word	0xffffffff
    2d5c:	ffffffff 	.word	0xffffffff
    2d60:	ffffffff 	.word	0xffffffff
    2d64:	ffffffff 	.word	0xffffffff
    2d68:	ffffffff 	.word	0xffffffff
    2d6c:	ffffffff 	.word	0xffffffff
    2d70:	ffffffff 	.word	0xffffffff
    2d74:	ffffffff 	.word	0xffffffff
    2d78:	ffffffff 	.word	0xffffffff
    2d7c:	ffffffff 	.word	0xffffffff
    2d80:	ffffffff 	.word	0xffffffff
    2d84:	ffffffff 	.word	0xffffffff
    2d88:	ffffffff 	.word	0xffffffff
    2d8c:	ffffffff 	.word	0xffffffff
    2d90:	ffffffff 	.word	0xffffffff
    2d94:	ffffffff 	.word	0xffffffff
    2d98:	ffffffff 	.word	0xffffffff
    2d9c:	ffffffff 	.word	0xffffffff
    2da0:	ffffffff 	.word	0xffffffff
    2da4:	ffffffff 	.word	0xffffffff
    2da8:	ffffffff 	.word	0xffffffff
    2dac:	ffffffff 	.word	0xffffffff
    2db0:	ffffffff 	.word	0xffffffff
    2db4:	ffffffff 	.word	0xffffffff
    2db8:	ffffffff 	.word	0xffffffff
    2dbc:	ffffffff 	.word	0xffffffff
    2dc0:	ffffffff 	.word	0xffffffff
    2dc4:	ffffffff 	.word	0xffffffff
    2dc8:	ffffffff 	.word	0xffffffff
    2dcc:	ffffffff 	.word	0xffffffff
    2dd0:	ffffffff 	.word	0xffffffff
    2dd4:	ffffffff 	.word	0xffffffff
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	ffffffff 	.word	0xffffffff
    2de0:	ffffffff 	.word	0xffffffff
    2de4:	ffffffff 	.word	0xffffffff
    2de8:	ffffffff 	.word	0xffffffff
    2dec:	ffffffff 	.word	0xffffffff
    2df0:	ffffffff 	.word	0xffffffff
    2df4:	ffffffff 	.word	0xffffffff
    2df8:	ffffffff 	.word	0xffffffff
    2dfc:	ffffffff 	.word	0xffffffff
    2e00:	ffffffff 	.word	0xffffffff
    2e04:	ffffffff 	.word	0xffffffff
    2e08:	ffffffff 	.word	0xffffffff
    2e0c:	ffffffff 	.word	0xffffffff
    2e10:	ffffffff 	.word	0xffffffff
    2e14:	ffffffff 	.word	0xffffffff
    2e18:	ffffffff 	.word	0xffffffff
    2e1c:	ffffffff 	.word	0xffffffff
    2e20:	ffffffff 	.word	0xffffffff
    2e24:	ffffffff 	.word	0xffffffff
    2e28:	ffffffff 	.word	0xffffffff
    2e2c:	ffffffff 	.word	0xffffffff
    2e30:	ffffffff 	.word	0xffffffff
    2e34:	ffffffff 	.word	0xffffffff
    2e38:	ffffffff 	.word	0xffffffff
    2e3c:	ffffffff 	.word	0xffffffff
    2e40:	ffffffff 	.word	0xffffffff
    2e44:	ffffffff 	.word	0xffffffff
    2e48:	ffffffff 	.word	0xffffffff
    2e4c:	ffffffff 	.word	0xffffffff
    2e50:	ffffffff 	.word	0xffffffff
    2e54:	ffffffff 	.word	0xffffffff
    2e58:	ffffffff 	.word	0xffffffff
    2e5c:	ffffffff 	.word	0xffffffff
    2e60:	ffffffff 	.word	0xffffffff
    2e64:	ffffffff 	.word	0xffffffff
    2e68:	ffffffff 	.word	0xffffffff
    2e6c:	ffffffff 	.word	0xffffffff
    2e70:	ffffffff 	.word	0xffffffff
    2e74:	ffffffff 	.word	0xffffffff
    2e78:	ffffffff 	.word	0xffffffff
    2e7c:	ffffffff 	.word	0xffffffff
    2e80:	ffffffff 	.word	0xffffffff
    2e84:	ffffffff 	.word	0xffffffff
    2e88:	ffffffff 	.word	0xffffffff
    2e8c:	ffffffff 	.word	0xffffffff
    2e90:	ffffffff 	.word	0xffffffff
    2e94:	ffffffff 	.word	0xffffffff
    2e98:	ffffffff 	.word	0xffffffff
    2e9c:	ffffffff 	.word	0xffffffff
    2ea0:	ffffffff 	.word	0xffffffff
    2ea4:	ffffffff 	.word	0xffffffff
    2ea8:	ffffffff 	.word	0xffffffff
    2eac:	ffffffff 	.word	0xffffffff
    2eb0:	ffffffff 	.word	0xffffffff
    2eb4:	ffffffff 	.word	0xffffffff
    2eb8:	ffffffff 	.word	0xffffffff
    2ebc:	ffffffff 	.word	0xffffffff
    2ec0:	ffffffff 	.word	0xffffffff
    2ec4:	ffffffff 	.word	0xffffffff
    2ec8:	ffffffff 	.word	0xffffffff
    2ecc:	ffffffff 	.word	0xffffffff
    2ed0:	ffffffff 	.word	0xffffffff
    2ed4:	ffffffff 	.word	0xffffffff
    2ed8:	ffffffff 	.word	0xffffffff
    2edc:	ffffffff 	.word	0xffffffff
    2ee0:	ffffffff 	.word	0xffffffff
    2ee4:	ffffffff 	.word	0xffffffff
    2ee8:	ffffffff 	.word	0xffffffff
    2eec:	ffffffff 	.word	0xffffffff
    2ef0:	ffffffff 	.word	0xffffffff
    2ef4:	ffffffff 	.word	0xffffffff
    2ef8:	ffffffff 	.word	0xffffffff
    2efc:	ffffffff 	.word	0xffffffff
    2f00:	ffffffff 	.word	0xffffffff
    2f04:	ffffffff 	.word	0xffffffff
    2f08:	ffffffff 	.word	0xffffffff
    2f0c:	ffffffff 	.word	0xffffffff
    2f10:	ffffffff 	.word	0xffffffff
    2f14:	ffffffff 	.word	0xffffffff
    2f18:	ffffffff 	.word	0xffffffff
    2f1c:	ffffffff 	.word	0xffffffff
    2f20:	ffffffff 	.word	0xffffffff
    2f24:	ffffffff 	.word	0xffffffff
    2f28:	ffffffff 	.word	0xffffffff
    2f2c:	ffffffff 	.word	0xffffffff
    2f30:	ffffffff 	.word	0xffffffff
    2f34:	ffffffff 	.word	0xffffffff
    2f38:	ffffffff 	.word	0xffffffff
    2f3c:	ffffffff 	.word	0xffffffff
    2f40:	ffffffff 	.word	0xffffffff
    2f44:	ffffffff 	.word	0xffffffff
    2f48:	ffffffff 	.word	0xffffffff
    2f4c:	ffffffff 	.word	0xffffffff
    2f50:	ffffffff 	.word	0xffffffff
    2f54:	ffffffff 	.word	0xffffffff
    2f58:	ffffffff 	.word	0xffffffff
    2f5c:	ffffffff 	.word	0xffffffff
    2f60:	ffffffff 	.word	0xffffffff
    2f64:	ffffffff 	.word	0xffffffff
    2f68:	ffffffff 	.word	0xffffffff
    2f6c:	ffffffff 	.word	0xffffffff
    2f70:	ffffffff 	.word	0xffffffff
    2f74:	ffffffff 	.word	0xffffffff
    2f78:	ffffffff 	.word	0xffffffff
    2f7c:	ffffffff 	.word	0xffffffff
    2f80:	ffffffff 	.word	0xffffffff
    2f84:	ffffffff 	.word	0xffffffff
    2f88:	ffffffff 	.word	0xffffffff
    2f8c:	ffffffff 	.word	0xffffffff
    2f90:	ffffffff 	.word	0xffffffff
    2f94:	ffffffff 	.word	0xffffffff
    2f98:	ffffffff 	.word	0xffffffff
    2f9c:	ffffffff 	.word	0xffffffff
    2fa0:	ffffffff 	.word	0xffffffff
    2fa4:	ffffffff 	.word	0xffffffff
    2fa8:	ffffffff 	.word	0xffffffff
    2fac:	ffffffff 	.word	0xffffffff
    2fb0:	ffffffff 	.word	0xffffffff
    2fb4:	ffffffff 	.word	0xffffffff
    2fb8:	ffffffff 	.word	0xffffffff
    2fbc:	ffffffff 	.word	0xffffffff
    2fc0:	ffffffff 	.word	0xffffffff
    2fc4:	ffffffff 	.word	0xffffffff
    2fc8:	ffffffff 	.word	0xffffffff
    2fcc:	ffffffff 	.word	0xffffffff
    2fd0:	ffffffff 	.word	0xffffffff
    2fd4:	ffffffff 	.word	0xffffffff
    2fd8:	ffffffff 	.word	0xffffffff
    2fdc:	ffffffff 	.word	0xffffffff
    2fe0:	ffffffff 	.word	0xffffffff
    2fe4:	ffffffff 	.word	0xffffffff
    2fe8:	ffffffff 	.word	0xffffffff
    2fec:	ffffffff 	.word	0xffffffff
    2ff0:	ffffffff 	.word	0xffffffff
    2ff4:	ffffffff 	.word	0xffffffff
    2ff8:	ffffffff 	.word	0xffffffff
    2ffc:	ffffffff 	.word	0xffffffff
    3000:	ffffffff 	.word	0xffffffff
    3004:	ffffffff 	.word	0xffffffff
    3008:	ffffffff 	.word	0xffffffff
    300c:	ffffffff 	.word	0xffffffff
    3010:	ffffffff 	.word	0xffffffff
    3014:	ffffffff 	.word	0xffffffff
    3018:	ffffffff 	.word	0xffffffff
    301c:	ffffffff 	.word	0xffffffff
    3020:	ffffffff 	.word	0xffffffff
    3024:	ffffffff 	.word	0xffffffff
    3028:	ffffffff 	.word	0xffffffff
    302c:	ffffffff 	.word	0xffffffff
    3030:	ffffffff 	.word	0xffffffff
    3034:	ffffffff 	.word	0xffffffff
    3038:	ffffffff 	.word	0xffffffff
    303c:	ffffffff 	.word	0xffffffff
    3040:	ffffffff 	.word	0xffffffff
    3044:	ffffffff 	.word	0xffffffff
    3048:	ffffffff 	.word	0xffffffff
    304c:	ffffffff 	.word	0xffffffff
    3050:	ffffffff 	.word	0xffffffff
    3054:	ffffffff 	.word	0xffffffff
    3058:	ffffffff 	.word	0xffffffff
    305c:	ffffffff 	.word	0xffffffff
    3060:	ffffffff 	.word	0xffffffff
    3064:	ffffffff 	.word	0xffffffff
    3068:	ffffffff 	.word	0xffffffff
    306c:	ffffffff 	.word	0xffffffff
    3070:	ffffffff 	.word	0xffffffff
    3074:	ffffffff 	.word	0xffffffff
    3078:	ffffffff 	.word	0xffffffff
    307c:	ffffffff 	.word	0xffffffff
    3080:	ffffffff 	.word	0xffffffff
    3084:	ffffffff 	.word	0xffffffff
    3088:	ffffffff 	.word	0xffffffff
    308c:	ffffffff 	.word	0xffffffff
    3090:	ffffffff 	.word	0xffffffff
    3094:	ffffffff 	.word	0xffffffff
    3098:	ffffffff 	.word	0xffffffff
    309c:	ffffffff 	.word	0xffffffff
    30a0:	ffffffff 	.word	0xffffffff
    30a4:	ffffffff 	.word	0xffffffff
    30a8:	ffffffff 	.word	0xffffffff
    30ac:	ffffffff 	.word	0xffffffff
    30b0:	ffffffff 	.word	0xffffffff
    30b4:	ffffffff 	.word	0xffffffff
    30b8:	ffffffff 	.word	0xffffffff
    30bc:	ffffffff 	.word	0xffffffff
    30c0:	ffffffff 	.word	0xffffffff
    30c4:	ffffffff 	.word	0xffffffff
    30c8:	ffffffff 	.word	0xffffffff
    30cc:	ffffffff 	.word	0xffffffff
    30d0:	ffffffff 	.word	0xffffffff
    30d4:	ffffffff 	.word	0xffffffff
    30d8:	ffffffff 	.word	0xffffffff
    30dc:	ffffffff 	.word	0xffffffff
    30e0:	ffffffff 	.word	0xffffffff
    30e4:	ffffffff 	.word	0xffffffff
    30e8:	ffffffff 	.word	0xffffffff
    30ec:	ffffffff 	.word	0xffffffff
    30f0:	ffffffff 	.word	0xffffffff
    30f4:	ffffffff 	.word	0xffffffff
    30f8:	ffffffff 	.word	0xffffffff
    30fc:	ffffffff 	.word	0xffffffff
    3100:	ffffffff 	.word	0xffffffff
    3104:	ffffffff 	.word	0xffffffff
    3108:	ffffffff 	.word	0xffffffff
    310c:	ffffffff 	.word	0xffffffff
    3110:	ffffffff 	.word	0xffffffff
    3114:	ffffffff 	.word	0xffffffff
    3118:	ffffffff 	.word	0xffffffff
    311c:	ffffffff 	.word	0xffffffff
    3120:	ffffffff 	.word	0xffffffff
    3124:	ffffffff 	.word	0xffffffff
    3128:	ffffffff 	.word	0xffffffff
    312c:	ffffffff 	.word	0xffffffff
    3130:	ffffffff 	.word	0xffffffff
    3134:	ffffffff 	.word	0xffffffff
    3138:	ffffffff 	.word	0xffffffff
    313c:	ffffffff 	.word	0xffffffff
    3140:	ffffffff 	.word	0xffffffff
    3144:	ffffffff 	.word	0xffffffff
    3148:	ffffffff 	.word	0xffffffff
    314c:	ffffffff 	.word	0xffffffff
    3150:	ffffffff 	.word	0xffffffff
    3154:	ffffffff 	.word	0xffffffff
    3158:	ffffffff 	.word	0xffffffff
    315c:	ffffffff 	.word	0xffffffff
    3160:	ffffffff 	.word	0xffffffff
    3164:	ffffffff 	.word	0xffffffff
    3168:	ffffffff 	.word	0xffffffff
    316c:	ffffffff 	.word	0xffffffff
    3170:	ffffffff 	.word	0xffffffff
    3174:	ffffffff 	.word	0xffffffff
    3178:	ffffffff 	.word	0xffffffff
    317c:	ffffffff 	.word	0xffffffff
    3180:	ffffffff 	.word	0xffffffff
    3184:	ffffffff 	.word	0xffffffff
    3188:	ffffffff 	.word	0xffffffff
    318c:	ffffffff 	.word	0xffffffff
    3190:	ffffffff 	.word	0xffffffff
    3194:	ffffffff 	.word	0xffffffff
    3198:	ffffffff 	.word	0xffffffff
    319c:	ffffffff 	.word	0xffffffff
    31a0:	ffffffff 	.word	0xffffffff
    31a4:	ffffffff 	.word	0xffffffff
    31a8:	ffffffff 	.word	0xffffffff
    31ac:	ffffffff 	.word	0xffffffff
    31b0:	ffffffff 	.word	0xffffffff
    31b4:	ffffffff 	.word	0xffffffff
    31b8:	ffffffff 	.word	0xffffffff
    31bc:	ffffffff 	.word	0xffffffff
    31c0:	ffffffff 	.word	0xffffffff
    31c4:	ffffffff 	.word	0xffffffff
    31c8:	ffffffff 	.word	0xffffffff
    31cc:	ffffffff 	.word	0xffffffff
    31d0:	ffffffff 	.word	0xffffffff
    31d4:	ffffffff 	.word	0xffffffff
    31d8:	ffffffff 	.word	0xffffffff
    31dc:	ffffffff 	.word	0xffffffff
    31e0:	ffffffff 	.word	0xffffffff
    31e4:	ffffffff 	.word	0xffffffff
    31e8:	ffffffff 	.word	0xffffffff
    31ec:	ffffffff 	.word	0xffffffff
    31f0:	ffffffff 	.word	0xffffffff
    31f4:	ffffffff 	.word	0xffffffff
    31f8:	ffffffff 	.word	0xffffffff
    31fc:	ffffffff 	.word	0xffffffff
    3200:	ffffffff 	.word	0xffffffff
    3204:	ffffffff 	.word	0xffffffff
    3208:	ffffffff 	.word	0xffffffff
    320c:	ffffffff 	.word	0xffffffff
    3210:	ffffffff 	.word	0xffffffff
    3214:	ffffffff 	.word	0xffffffff
    3218:	ffffffff 	.word	0xffffffff
    321c:	ffffffff 	.word	0xffffffff
    3220:	ffffffff 	.word	0xffffffff
    3224:	ffffffff 	.word	0xffffffff
    3228:	ffffffff 	.word	0xffffffff
    322c:	ffffffff 	.word	0xffffffff
    3230:	ffffffff 	.word	0xffffffff
    3234:	ffffffff 	.word	0xffffffff
    3238:	ffffffff 	.word	0xffffffff
    323c:	ffffffff 	.word	0xffffffff
    3240:	ffffffff 	.word	0xffffffff
    3244:	ffffffff 	.word	0xffffffff
    3248:	ffffffff 	.word	0xffffffff
    324c:	ffffffff 	.word	0xffffffff
    3250:	ffffffff 	.word	0xffffffff
    3254:	ffffffff 	.word	0xffffffff
    3258:	ffffffff 	.word	0xffffffff
    325c:	ffffffff 	.word	0xffffffff
    3260:	ffffffff 	.word	0xffffffff
    3264:	ffffffff 	.word	0xffffffff
    3268:	ffffffff 	.word	0xffffffff
    326c:	ffffffff 	.word	0xffffffff
    3270:	ffffffff 	.word	0xffffffff
    3274:	ffffffff 	.word	0xffffffff
    3278:	ffffffff 	.word	0xffffffff
    327c:	ffffffff 	.word	0xffffffff
    3280:	ffffffff 	.word	0xffffffff
    3284:	ffffffff 	.word	0xffffffff
    3288:	ffffffff 	.word	0xffffffff
    328c:	ffffffff 	.word	0xffffffff
    3290:	ffffffff 	.word	0xffffffff
    3294:	ffffffff 	.word	0xffffffff
    3298:	ffffffff 	.word	0xffffffff
    329c:	ffffffff 	.word	0xffffffff
    32a0:	ffffffff 	.word	0xffffffff
    32a4:	ffffffff 	.word	0xffffffff
    32a8:	ffffffff 	.word	0xffffffff
    32ac:	ffffffff 	.word	0xffffffff
    32b0:	ffffffff 	.word	0xffffffff
    32b4:	ffffffff 	.word	0xffffffff
    32b8:	ffffffff 	.word	0xffffffff
    32bc:	ffffffff 	.word	0xffffffff
    32c0:	ffffffff 	.word	0xffffffff
    32c4:	ffffffff 	.word	0xffffffff
    32c8:	ffffffff 	.word	0xffffffff
    32cc:	ffffffff 	.word	0xffffffff
    32d0:	ffffffff 	.word	0xffffffff
    32d4:	ffffffff 	.word	0xffffffff
    32d8:	ffffffff 	.word	0xffffffff
    32dc:	ffffffff 	.word	0xffffffff
    32e0:	ffffffff 	.word	0xffffffff
    32e4:	ffffffff 	.word	0xffffffff
    32e8:	ffffffff 	.word	0xffffffff
    32ec:	ffffffff 	.word	0xffffffff
    32f0:	ffffffff 	.word	0xffffffff
    32f4:	ffffffff 	.word	0xffffffff
    32f8:	ffffffff 	.word	0xffffffff
    32fc:	ffffffff 	.word	0xffffffff
    3300:	ffffffff 	.word	0xffffffff
    3304:	ffffffff 	.word	0xffffffff
    3308:	ffffffff 	.word	0xffffffff
    330c:	ffffffff 	.word	0xffffffff
    3310:	ffffffff 	.word	0xffffffff
    3314:	ffffffff 	.word	0xffffffff
    3318:	ffffffff 	.word	0xffffffff
    331c:	ffffffff 	.word	0xffffffff
    3320:	ffffffff 	.word	0xffffffff
    3324:	ffffffff 	.word	0xffffffff
    3328:	ffffffff 	.word	0xffffffff
    332c:	ffffffff 	.word	0xffffffff
    3330:	ffffffff 	.word	0xffffffff
    3334:	ffffffff 	.word	0xffffffff
    3338:	ffffffff 	.word	0xffffffff
    333c:	ffffffff 	.word	0xffffffff
    3340:	ffffffff 	.word	0xffffffff
    3344:	ffffffff 	.word	0xffffffff
    3348:	ffffffff 	.word	0xffffffff
    334c:	ffffffff 	.word	0xffffffff
    3350:	ffffffff 	.word	0xffffffff
    3354:	ffffffff 	.word	0xffffffff
    3358:	ffffffff 	.word	0xffffffff
    335c:	ffffffff 	.word	0xffffffff
    3360:	ffffffff 	.word	0xffffffff
    3364:	ffffffff 	.word	0xffffffff
    3368:	ffffffff 	.word	0xffffffff
    336c:	ffffffff 	.word	0xffffffff
    3370:	ffffffff 	.word	0xffffffff
    3374:	ffffffff 	.word	0xffffffff
    3378:	ffffffff 	.word	0xffffffff
    337c:	ffffffff 	.word	0xffffffff
    3380:	ffffffff 	.word	0xffffffff
    3384:	ffffffff 	.word	0xffffffff
    3388:	ffffffff 	.word	0xffffffff
    338c:	ffffffff 	.word	0xffffffff
    3390:	ffffffff 	.word	0xffffffff
    3394:	ffffffff 	.word	0xffffffff
    3398:	ffffffff 	.word	0xffffffff
    339c:	ffffffff 	.word	0xffffffff
    33a0:	ffffffff 	.word	0xffffffff
    33a4:	ffffffff 	.word	0xffffffff
    33a8:	ffffffff 	.word	0xffffffff
    33ac:	ffffffff 	.word	0xffffffff
    33b0:	ffffffff 	.word	0xffffffff
    33b4:	ffffffff 	.word	0xffffffff
    33b8:	ffffffff 	.word	0xffffffff
    33bc:	ffffffff 	.word	0xffffffff
    33c0:	ffffffff 	.word	0xffffffff
    33c4:	ffffffff 	.word	0xffffffff
    33c8:	ffffffff 	.word	0xffffffff
    33cc:	ffffffff 	.word	0xffffffff
    33d0:	ffffffff 	.word	0xffffffff
    33d4:	ffffffff 	.word	0xffffffff
    33d8:	ffffffff 	.word	0xffffffff
    33dc:	ffffffff 	.word	0xffffffff
    33e0:	ffffffff 	.word	0xffffffff
    33e4:	ffffffff 	.word	0xffffffff
    33e8:	ffffffff 	.word	0xffffffff
    33ec:	ffffffff 	.word	0xffffffff
    33f0:	ffffffff 	.word	0xffffffff
    33f4:	ffffffff 	.word	0xffffffff
    33f8:	ffffffff 	.word	0xffffffff
    33fc:	ffffffff 	.word	0xffffffff
    3400:	ffffffff 	.word	0xffffffff
    3404:	ffffffff 	.word	0xffffffff
    3408:	ffffffff 	.word	0xffffffff
    340c:	ffffffff 	.word	0xffffffff
    3410:	ffffffff 	.word	0xffffffff
    3414:	ffffffff 	.word	0xffffffff
    3418:	ffffffff 	.word	0xffffffff
    341c:	ffffffff 	.word	0xffffffff
    3420:	ffffffff 	.word	0xffffffff
    3424:	ffffffff 	.word	0xffffffff
    3428:	ffffffff 	.word	0xffffffff
    342c:	ffffffff 	.word	0xffffffff
    3430:	ffffffff 	.word	0xffffffff
    3434:	ffffffff 	.word	0xffffffff
    3438:	ffffffff 	.word	0xffffffff
    343c:	ffffffff 	.word	0xffffffff
    3440:	ffffffff 	.word	0xffffffff
    3444:	ffffffff 	.word	0xffffffff
    3448:	ffffffff 	.word	0xffffffff
    344c:	ffffffff 	.word	0xffffffff
    3450:	ffffffff 	.word	0xffffffff
    3454:	ffffffff 	.word	0xffffffff
    3458:	ffffffff 	.word	0xffffffff
    345c:	ffffffff 	.word	0xffffffff
    3460:	ffffffff 	.word	0xffffffff
    3464:	ffffffff 	.word	0xffffffff
    3468:	ffffffff 	.word	0xffffffff
    346c:	ffffffff 	.word	0xffffffff
    3470:	ffffffff 	.word	0xffffffff
    3474:	ffffffff 	.word	0xffffffff
    3478:	ffffffff 	.word	0xffffffff
    347c:	ffffffff 	.word	0xffffffff
    3480:	ffffffff 	.word	0xffffffff
    3484:	ffffffff 	.word	0xffffffff
    3488:	ffffffff 	.word	0xffffffff
    348c:	ffffffff 	.word	0xffffffff
    3490:	ffffffff 	.word	0xffffffff
    3494:	ffffffff 	.word	0xffffffff
    3498:	ffffffff 	.word	0xffffffff
    349c:	ffffffff 	.word	0xffffffff
    34a0:	ffffffff 	.word	0xffffffff
    34a4:	ffffffff 	.word	0xffffffff
    34a8:	ffffffff 	.word	0xffffffff
    34ac:	ffffffff 	.word	0xffffffff
    34b0:	ffffffff 	.word	0xffffffff
    34b4:	ffffffff 	.word	0xffffffff
    34b8:	ffffffff 	.word	0xffffffff
    34bc:	ffffffff 	.word	0xffffffff
    34c0:	ffffffff 	.word	0xffffffff
    34c4:	ffffffff 	.word	0xffffffff
    34c8:	ffffffff 	.word	0xffffffff
    34cc:	ffffffff 	.word	0xffffffff
    34d0:	ffffffff 	.word	0xffffffff
    34d4:	ffffffff 	.word	0xffffffff
    34d8:	ffffffff 	.word	0xffffffff
    34dc:	ffffffff 	.word	0xffffffff
    34e0:	ffffffff 	.word	0xffffffff
    34e4:	ffffffff 	.word	0xffffffff
    34e8:	ffffffff 	.word	0xffffffff
    34ec:	ffffffff 	.word	0xffffffff
    34f0:	ffffffff 	.word	0xffffffff
    34f4:	ffffffff 	.word	0xffffffff
    34f8:	ffffffff 	.word	0xffffffff
    34fc:	ffffffff 	.word	0xffffffff
    3500:	ffffffff 	.word	0xffffffff
    3504:	ffffffff 	.word	0xffffffff
    3508:	ffffffff 	.word	0xffffffff
    350c:	ffffffff 	.word	0xffffffff
    3510:	ffffffff 	.word	0xffffffff
    3514:	ffffffff 	.word	0xffffffff
    3518:	ffffffff 	.word	0xffffffff
    351c:	ffffffff 	.word	0xffffffff
    3520:	ffffffff 	.word	0xffffffff
    3524:	ffffffff 	.word	0xffffffff
    3528:	ffffffff 	.word	0xffffffff
    352c:	ffffffff 	.word	0xffffffff
    3530:	ffffffff 	.word	0xffffffff
    3534:	ffffffff 	.word	0xffffffff
    3538:	ffffffff 	.word	0xffffffff
    353c:	ffffffff 	.word	0xffffffff
    3540:	ffffffff 	.word	0xffffffff
    3544:	ffffffff 	.word	0xffffffff
    3548:	ffffffff 	.word	0xffffffff
    354c:	ffffffff 	.word	0xffffffff
    3550:	ffffffff 	.word	0xffffffff
    3554:	ffffffff 	.word	0xffffffff
    3558:	ffffffff 	.word	0xffffffff
    355c:	ffffffff 	.word	0xffffffff
    3560:	ffffffff 	.word	0xffffffff
    3564:	ffffffff 	.word	0xffffffff
    3568:	ffffffff 	.word	0xffffffff
    356c:	ffffffff 	.word	0xffffffff
    3570:	ffffffff 	.word	0xffffffff
    3574:	ffffffff 	.word	0xffffffff
    3578:	ffffffff 	.word	0xffffffff
    357c:	ffffffff 	.word	0xffffffff
    3580:	ffffffff 	.word	0xffffffff
    3584:	ffffffff 	.word	0xffffffff
    3588:	ffffffff 	.word	0xffffffff
    358c:	ffffffff 	.word	0xffffffff
    3590:	ffffffff 	.word	0xffffffff
    3594:	ffffffff 	.word	0xffffffff
    3598:	ffffffff 	.word	0xffffffff
    359c:	ffffffff 	.word	0xffffffff
    35a0:	ffffffff 	.word	0xffffffff
    35a4:	ffffffff 	.word	0xffffffff
    35a8:	ffffffff 	.word	0xffffffff
    35ac:	ffffffff 	.word	0xffffffff
    35b0:	ffffffff 	.word	0xffffffff
    35b4:	ffffffff 	.word	0xffffffff
    35b8:	ffffffff 	.word	0xffffffff
    35bc:	ffffffff 	.word	0xffffffff
    35c0:	ffffffff 	.word	0xffffffff
    35c4:	ffffffff 	.word	0xffffffff
    35c8:	ffffffff 	.word	0xffffffff
    35cc:	ffffffff 	.word	0xffffffff
    35d0:	ffffffff 	.word	0xffffffff
    35d4:	ffffffff 	.word	0xffffffff
    35d8:	ffffffff 	.word	0xffffffff
    35dc:	ffffffff 	.word	0xffffffff
    35e0:	ffffffff 	.word	0xffffffff
    35e4:	ffffffff 	.word	0xffffffff
    35e8:	ffffffff 	.word	0xffffffff
    35ec:	ffffffff 	.word	0xffffffff
    35f0:	ffffffff 	.word	0xffffffff
    35f4:	ffffffff 	.word	0xffffffff
    35f8:	ffffffff 	.word	0xffffffff
    35fc:	ffffffff 	.word	0xffffffff
    3600:	ffffffff 	.word	0xffffffff
    3604:	ffffffff 	.word	0xffffffff
    3608:	ffffffff 	.word	0xffffffff
    360c:	ffffffff 	.word	0xffffffff
    3610:	ffffffff 	.word	0xffffffff
    3614:	ffffffff 	.word	0xffffffff
    3618:	ffffffff 	.word	0xffffffff
    361c:	ffffffff 	.word	0xffffffff
    3620:	ffffffff 	.word	0xffffffff
    3624:	ffffffff 	.word	0xffffffff
    3628:	ffffffff 	.word	0xffffffff
    362c:	ffffffff 	.word	0xffffffff
    3630:	ffffffff 	.word	0xffffffff
    3634:	ffffffff 	.word	0xffffffff
    3638:	ffffffff 	.word	0xffffffff
    363c:	ffffffff 	.word	0xffffffff
    3640:	ffffffff 	.word	0xffffffff
    3644:	ffffffff 	.word	0xffffffff
    3648:	ffffffff 	.word	0xffffffff
    364c:	ffffffff 	.word	0xffffffff
    3650:	ffffffff 	.word	0xffffffff
    3654:	ffffffff 	.word	0xffffffff
    3658:	ffffffff 	.word	0xffffffff
    365c:	ffffffff 	.word	0xffffffff
    3660:	ffffffff 	.word	0xffffffff
    3664:	ffffffff 	.word	0xffffffff
    3668:	ffffffff 	.word	0xffffffff
    366c:	ffffffff 	.word	0xffffffff
    3670:	ffffffff 	.word	0xffffffff
    3674:	ffffffff 	.word	0xffffffff
    3678:	ffffffff 	.word	0xffffffff
    367c:	ffffffff 	.word	0xffffffff
    3680:	ffffffff 	.word	0xffffffff
    3684:	ffffffff 	.word	0xffffffff
    3688:	ffffffff 	.word	0xffffffff
    368c:	ffffffff 	.word	0xffffffff
    3690:	ffffffff 	.word	0xffffffff
    3694:	ffffffff 	.word	0xffffffff
    3698:	ffffffff 	.word	0xffffffff
    369c:	ffffffff 	.word	0xffffffff
    36a0:	ffffffff 	.word	0xffffffff
    36a4:	ffffffff 	.word	0xffffffff
    36a8:	ffffffff 	.word	0xffffffff
    36ac:	ffffffff 	.word	0xffffffff
    36b0:	ffffffff 	.word	0xffffffff
    36b4:	ffffffff 	.word	0xffffffff
    36b8:	ffffffff 	.word	0xffffffff
    36bc:	ffffffff 	.word	0xffffffff
    36c0:	ffffffff 	.word	0xffffffff
    36c4:	ffffffff 	.word	0xffffffff
    36c8:	ffffffff 	.word	0xffffffff
    36cc:	ffffffff 	.word	0xffffffff
    36d0:	ffffffff 	.word	0xffffffff
    36d4:	ffffffff 	.word	0xffffffff
    36d8:	ffffffff 	.word	0xffffffff
    36dc:	ffffffff 	.word	0xffffffff
    36e0:	ffffffff 	.word	0xffffffff
    36e4:	ffffffff 	.word	0xffffffff
    36e8:	ffffffff 	.word	0xffffffff
    36ec:	ffffffff 	.word	0xffffffff
    36f0:	ffffffff 	.word	0xffffffff
    36f4:	ffffffff 	.word	0xffffffff
    36f8:	ffffffff 	.word	0xffffffff
    36fc:	ffffffff 	.word	0xffffffff
    3700:	ffffffff 	.word	0xffffffff
    3704:	ffffffff 	.word	0xffffffff
    3708:	ffffffff 	.word	0xffffffff
    370c:	ffffffff 	.word	0xffffffff
    3710:	ffffffff 	.word	0xffffffff
    3714:	ffffffff 	.word	0xffffffff
    3718:	ffffffff 	.word	0xffffffff
    371c:	ffffffff 	.word	0xffffffff
    3720:	ffffffff 	.word	0xffffffff
    3724:	ffffffff 	.word	0xffffffff
    3728:	ffffffff 	.word	0xffffffff
    372c:	ffffffff 	.word	0xffffffff
    3730:	ffffffff 	.word	0xffffffff
    3734:	ffffffff 	.word	0xffffffff
    3738:	ffffffff 	.word	0xffffffff
    373c:	ffffffff 	.word	0xffffffff
    3740:	ffffffff 	.word	0xffffffff
    3744:	ffffffff 	.word	0xffffffff
    3748:	ffffffff 	.word	0xffffffff
    374c:	ffffffff 	.word	0xffffffff
    3750:	ffffffff 	.word	0xffffffff
    3754:	ffffffff 	.word	0xffffffff
    3758:	ffffffff 	.word	0xffffffff
    375c:	ffffffff 	.word	0xffffffff
    3760:	ffffffff 	.word	0xffffffff
    3764:	ffffffff 	.word	0xffffffff
    3768:	ffffffff 	.word	0xffffffff
    376c:	ffffffff 	.word	0xffffffff
    3770:	ffffffff 	.word	0xffffffff
    3774:	ffffffff 	.word	0xffffffff
    3778:	ffffffff 	.word	0xffffffff
    377c:	ffffffff 	.word	0xffffffff
    3780:	ffffffff 	.word	0xffffffff
    3784:	ffffffff 	.word	0xffffffff
    3788:	ffffffff 	.word	0xffffffff
    378c:	ffffffff 	.word	0xffffffff
    3790:	ffffffff 	.word	0xffffffff
    3794:	ffffffff 	.word	0xffffffff
    3798:	ffffffff 	.word	0xffffffff
    379c:	ffffffff 	.word	0xffffffff
    37a0:	ffffffff 	.word	0xffffffff
    37a4:	ffffffff 	.word	0xffffffff
    37a8:	ffffffff 	.word	0xffffffff
    37ac:	ffffffff 	.word	0xffffffff
    37b0:	ffffffff 	.word	0xffffffff
    37b4:	ffffffff 	.word	0xffffffff
    37b8:	ffffffff 	.word	0xffffffff
    37bc:	ffffffff 	.word	0xffffffff
    37c0:	ffffffff 	.word	0xffffffff
    37c4:	ffffffff 	.word	0xffffffff
    37c8:	ffffffff 	.word	0xffffffff
    37cc:	ffffffff 	.word	0xffffffff
    37d0:	ffffffff 	.word	0xffffffff
    37d4:	ffffffff 	.word	0xffffffff
    37d8:	ffffffff 	.word	0xffffffff
    37dc:	ffffffff 	.word	0xffffffff
    37e0:	ffffffff 	.word	0xffffffff
    37e4:	ffffffff 	.word	0xffffffff
    37e8:	ffffffff 	.word	0xffffffff
    37ec:	ffffffff 	.word	0xffffffff
    37f0:	ffffffff 	.word	0xffffffff
    37f4:	ffffffff 	.word	0xffffffff
    37f8:	ffffffff 	.word	0xffffffff
    37fc:	ffffffff 	.word	0xffffffff
    3800:	ffffffff 	.word	0xffffffff
    3804:	ffffffff 	.word	0xffffffff
    3808:	ffffffff 	.word	0xffffffff
    380c:	ffffffff 	.word	0xffffffff
    3810:	ffffffff 	.word	0xffffffff
    3814:	ffffffff 	.word	0xffffffff
    3818:	ffffffff 	.word	0xffffffff
    381c:	ffffffff 	.word	0xffffffff
    3820:	ffffffff 	.word	0xffffffff
    3824:	ffffffff 	.word	0xffffffff
    3828:	ffffffff 	.word	0xffffffff
    382c:	ffffffff 	.word	0xffffffff
    3830:	ffffffff 	.word	0xffffffff
    3834:	ffffffff 	.word	0xffffffff
    3838:	ffffffff 	.word	0xffffffff
    383c:	ffffffff 	.word	0xffffffff
    3840:	ffffffff 	.word	0xffffffff
    3844:	ffffffff 	.word	0xffffffff
    3848:	ffffffff 	.word	0xffffffff
    384c:	ffffffff 	.word	0xffffffff
    3850:	ffffffff 	.word	0xffffffff
    3854:	ffffffff 	.word	0xffffffff
    3858:	ffffffff 	.word	0xffffffff
    385c:	ffffffff 	.word	0xffffffff
    3860:	ffffffff 	.word	0xffffffff
    3864:	ffffffff 	.word	0xffffffff
    3868:	ffffffff 	.word	0xffffffff
    386c:	ffffffff 	.word	0xffffffff
    3870:	ffffffff 	.word	0xffffffff
    3874:	ffffffff 	.word	0xffffffff
    3878:	ffffffff 	.word	0xffffffff
    387c:	ffffffff 	.word	0xffffffff
    3880:	ffffffff 	.word	0xffffffff
    3884:	ffffffff 	.word	0xffffffff
    3888:	ffffffff 	.word	0xffffffff
    388c:	ffffffff 	.word	0xffffffff
    3890:	ffffffff 	.word	0xffffffff
    3894:	ffffffff 	.word	0xffffffff
    3898:	ffffffff 	.word	0xffffffff
    389c:	ffffffff 	.word	0xffffffff
    38a0:	ffffffff 	.word	0xffffffff
    38a4:	ffffffff 	.word	0xffffffff
    38a8:	ffffffff 	.word	0xffffffff
    38ac:	ffffffff 	.word	0xffffffff
    38b0:	ffffffff 	.word	0xffffffff
    38b4:	ffffffff 	.word	0xffffffff
    38b8:	ffffffff 	.word	0xffffffff
    38bc:	ffffffff 	.word	0xffffffff
    38c0:	ffffffff 	.word	0xffffffff
    38c4:	ffffffff 	.word	0xffffffff
    38c8:	ffffffff 	.word	0xffffffff
    38cc:	ffffffff 	.word	0xffffffff
    38d0:	ffffffff 	.word	0xffffffff
    38d4:	ffffffff 	.word	0xffffffff
    38d8:	ffffffff 	.word	0xffffffff
    38dc:	ffffffff 	.word	0xffffffff
    38e0:	ffffffff 	.word	0xffffffff
    38e4:	ffffffff 	.word	0xffffffff
    38e8:	ffffffff 	.word	0xffffffff
    38ec:	ffffffff 	.word	0xffffffff
    38f0:	ffffffff 	.word	0xffffffff
    38f4:	ffffffff 	.word	0xffffffff
    38f8:	ffffffff 	.word	0xffffffff
    38fc:	ffffffff 	.word	0xffffffff
    3900:	ffffffff 	.word	0xffffffff
    3904:	ffffffff 	.word	0xffffffff
    3908:	ffffffff 	.word	0xffffffff
    390c:	ffffffff 	.word	0xffffffff
    3910:	ffffffff 	.word	0xffffffff
    3914:	ffffffff 	.word	0xffffffff
    3918:	ffffffff 	.word	0xffffffff
    391c:	ffffffff 	.word	0xffffffff
    3920:	ffffffff 	.word	0xffffffff
    3924:	ffffffff 	.word	0xffffffff
    3928:	ffffffff 	.word	0xffffffff
    392c:	ffffffff 	.word	0xffffffff
    3930:	ffffffff 	.word	0xffffffff
    3934:	ffffffff 	.word	0xffffffff
    3938:	ffffffff 	.word	0xffffffff
    393c:	ffffffff 	.word	0xffffffff
    3940:	ffffffff 	.word	0xffffffff
    3944:	ffffffff 	.word	0xffffffff
    3948:	ffffffff 	.word	0xffffffff
    394c:	ffffffff 	.word	0xffffffff
    3950:	ffffffff 	.word	0xffffffff
    3954:	ffffffff 	.word	0xffffffff
    3958:	ffffffff 	.word	0xffffffff
    395c:	ffffffff 	.word	0xffffffff
    3960:	ffffffff 	.word	0xffffffff
    3964:	ffffffff 	.word	0xffffffff
    3968:	ffffffff 	.word	0xffffffff
    396c:	ffffffff 	.word	0xffffffff
    3970:	ffffffff 	.word	0xffffffff
    3974:	ffffffff 	.word	0xffffffff
    3978:	ffffffff 	.word	0xffffffff
    397c:	ffffffff 	.word	0xffffffff
    3980:	ffffffff 	.word	0xffffffff
    3984:	ffffffff 	.word	0xffffffff
    3988:	ffffffff 	.word	0xffffffff
    398c:	ffffffff 	.word	0xffffffff
    3990:	ffffffff 	.word	0xffffffff
    3994:	ffffffff 	.word	0xffffffff
    3998:	ffffffff 	.word	0xffffffff
    399c:	ffffffff 	.word	0xffffffff
    39a0:	ffffffff 	.word	0xffffffff
    39a4:	ffffffff 	.word	0xffffffff
    39a8:	ffffffff 	.word	0xffffffff
    39ac:	ffffffff 	.word	0xffffffff
    39b0:	ffffffff 	.word	0xffffffff
    39b4:	ffffffff 	.word	0xffffffff
    39b8:	ffffffff 	.word	0xffffffff
    39bc:	ffffffff 	.word	0xffffffff
    39c0:	ffffffff 	.word	0xffffffff
    39c4:	ffffffff 	.word	0xffffffff
    39c8:	ffffffff 	.word	0xffffffff
    39cc:	ffffffff 	.word	0xffffffff
    39d0:	ffffffff 	.word	0xffffffff
    39d4:	ffffffff 	.word	0xffffffff
    39d8:	ffffffff 	.word	0xffffffff
    39dc:	ffffffff 	.word	0xffffffff
    39e0:	ffffffff 	.word	0xffffffff
    39e4:	ffffffff 	.word	0xffffffff
    39e8:	ffffffff 	.word	0xffffffff
    39ec:	ffffffff 	.word	0xffffffff
    39f0:	ffffffff 	.word	0xffffffff
    39f4:	ffffffff 	.word	0xffffffff
    39f8:	ffffffff 	.word	0xffffffff
    39fc:	ffffffff 	.word	0xffffffff
    3a00:	ffffffff 	.word	0xffffffff
    3a04:	ffffffff 	.word	0xffffffff
    3a08:	ffffffff 	.word	0xffffffff
    3a0c:	ffffffff 	.word	0xffffffff
    3a10:	ffffffff 	.word	0xffffffff
    3a14:	ffffffff 	.word	0xffffffff
    3a18:	ffffffff 	.word	0xffffffff
    3a1c:	ffffffff 	.word	0xffffffff
    3a20:	ffffffff 	.word	0xffffffff
    3a24:	ffffffff 	.word	0xffffffff
    3a28:	ffffffff 	.word	0xffffffff
    3a2c:	ffffffff 	.word	0xffffffff
    3a30:	ffffffff 	.word	0xffffffff
    3a34:	ffffffff 	.word	0xffffffff
    3a38:	ffffffff 	.word	0xffffffff
    3a3c:	ffffffff 	.word	0xffffffff
    3a40:	ffffffff 	.word	0xffffffff
    3a44:	ffffffff 	.word	0xffffffff
    3a48:	ffffffff 	.word	0xffffffff
    3a4c:	ffffffff 	.word	0xffffffff
    3a50:	ffffffff 	.word	0xffffffff
    3a54:	ffffffff 	.word	0xffffffff
    3a58:	ffffffff 	.word	0xffffffff
    3a5c:	ffffffff 	.word	0xffffffff
    3a60:	ffffffff 	.word	0xffffffff
    3a64:	ffffffff 	.word	0xffffffff
    3a68:	ffffffff 	.word	0xffffffff
    3a6c:	ffffffff 	.word	0xffffffff
    3a70:	ffffffff 	.word	0xffffffff
    3a74:	ffffffff 	.word	0xffffffff
    3a78:	ffffffff 	.word	0xffffffff
    3a7c:	ffffffff 	.word	0xffffffff
    3a80:	ffffffff 	.word	0xffffffff
    3a84:	ffffffff 	.word	0xffffffff
    3a88:	ffffffff 	.word	0xffffffff
    3a8c:	ffffffff 	.word	0xffffffff
    3a90:	ffffffff 	.word	0xffffffff
    3a94:	ffffffff 	.word	0xffffffff
    3a98:	ffffffff 	.word	0xffffffff
    3a9c:	ffffffff 	.word	0xffffffff
    3aa0:	ffffffff 	.word	0xffffffff
    3aa4:	ffffffff 	.word	0xffffffff
    3aa8:	ffffffff 	.word	0xffffffff
    3aac:	ffffffff 	.word	0xffffffff
    3ab0:	ffffffff 	.word	0xffffffff
    3ab4:	ffffffff 	.word	0xffffffff
    3ab8:	ffffffff 	.word	0xffffffff
    3abc:	ffffffff 	.word	0xffffffff
    3ac0:	ffffffff 	.word	0xffffffff
    3ac4:	ffffffff 	.word	0xffffffff
    3ac8:	ffffffff 	.word	0xffffffff
    3acc:	ffffffff 	.word	0xffffffff
    3ad0:	ffffffff 	.word	0xffffffff
    3ad4:	ffffffff 	.word	0xffffffff
    3ad8:	ffffffff 	.word	0xffffffff
    3adc:	ffffffff 	.word	0xffffffff
    3ae0:	ffffffff 	.word	0xffffffff
    3ae4:	ffffffff 	.word	0xffffffff
    3ae8:	ffffffff 	.word	0xffffffff
    3aec:	ffffffff 	.word	0xffffffff
    3af0:	ffffffff 	.word	0xffffffff
    3af4:	ffffffff 	.word	0xffffffff
    3af8:	ffffffff 	.word	0xffffffff
    3afc:	ffffffff 	.word	0xffffffff
    3b00:	ffffffff 	.word	0xffffffff
    3b04:	ffffffff 	.word	0xffffffff
    3b08:	ffffffff 	.word	0xffffffff
    3b0c:	ffffffff 	.word	0xffffffff
    3b10:	ffffffff 	.word	0xffffffff
    3b14:	ffffffff 	.word	0xffffffff
    3b18:	ffffffff 	.word	0xffffffff
    3b1c:	ffffffff 	.word	0xffffffff
    3b20:	ffffffff 	.word	0xffffffff
    3b24:	ffffffff 	.word	0xffffffff
    3b28:	ffffffff 	.word	0xffffffff
    3b2c:	ffffffff 	.word	0xffffffff
    3b30:	ffffffff 	.word	0xffffffff
    3b34:	ffffffff 	.word	0xffffffff
    3b38:	ffffffff 	.word	0xffffffff
    3b3c:	ffffffff 	.word	0xffffffff
    3b40:	ffffffff 	.word	0xffffffff
    3b44:	ffffffff 	.word	0xffffffff
    3b48:	ffffffff 	.word	0xffffffff
    3b4c:	ffffffff 	.word	0xffffffff
    3b50:	ffffffff 	.word	0xffffffff
    3b54:	ffffffff 	.word	0xffffffff
    3b58:	ffffffff 	.word	0xffffffff
    3b5c:	ffffffff 	.word	0xffffffff
    3b60:	ffffffff 	.word	0xffffffff
    3b64:	ffffffff 	.word	0xffffffff
    3b68:	ffffffff 	.word	0xffffffff
    3b6c:	ffffffff 	.word	0xffffffff
    3b70:	ffffffff 	.word	0xffffffff
    3b74:	ffffffff 	.word	0xffffffff
    3b78:	ffffffff 	.word	0xffffffff
    3b7c:	ffffffff 	.word	0xffffffff
    3b80:	ffffffff 	.word	0xffffffff
    3b84:	ffffffff 	.word	0xffffffff
    3b88:	ffffffff 	.word	0xffffffff
    3b8c:	ffffffff 	.word	0xffffffff
    3b90:	ffffffff 	.word	0xffffffff
    3b94:	ffffffff 	.word	0xffffffff
    3b98:	ffffffff 	.word	0xffffffff
    3b9c:	ffffffff 	.word	0xffffffff
    3ba0:	ffffffff 	.word	0xffffffff
    3ba4:	ffffffff 	.word	0xffffffff
    3ba8:	ffffffff 	.word	0xffffffff
    3bac:	ffffffff 	.word	0xffffffff
    3bb0:	ffffffff 	.word	0xffffffff
    3bb4:	ffffffff 	.word	0xffffffff
    3bb8:	ffffffff 	.word	0xffffffff
    3bbc:	ffffffff 	.word	0xffffffff
    3bc0:	ffffffff 	.word	0xffffffff
    3bc4:	ffffffff 	.word	0xffffffff
    3bc8:	ffffffff 	.word	0xffffffff
    3bcc:	ffffffff 	.word	0xffffffff
    3bd0:	ffffffff 	.word	0xffffffff
    3bd4:	ffffffff 	.word	0xffffffff
    3bd8:	ffffffff 	.word	0xffffffff
    3bdc:	ffffffff 	.word	0xffffffff
    3be0:	ffffffff 	.word	0xffffffff
    3be4:	ffffffff 	.word	0xffffffff
    3be8:	ffffffff 	.word	0xffffffff
    3bec:	ffffffff 	.word	0xffffffff
    3bf0:	ffffffff 	.word	0xffffffff
    3bf4:	ffffffff 	.word	0xffffffff
    3bf8:	ffffffff 	.word	0xffffffff
    3bfc:	ffffffff 	.word	0xffffffff
    3c00:	ffffffff 	.word	0xffffffff
    3c04:	ffffffff 	.word	0xffffffff
    3c08:	ffffffff 	.word	0xffffffff
    3c0c:	ffffffff 	.word	0xffffffff
    3c10:	ffffffff 	.word	0xffffffff
    3c14:	ffffffff 	.word	0xffffffff
    3c18:	ffffffff 	.word	0xffffffff
    3c1c:	ffffffff 	.word	0xffffffff
    3c20:	ffffffff 	.word	0xffffffff
    3c24:	ffffffff 	.word	0xffffffff
    3c28:	ffffffff 	.word	0xffffffff
    3c2c:	ffffffff 	.word	0xffffffff
    3c30:	ffffffff 	.word	0xffffffff
    3c34:	ffffffff 	.word	0xffffffff
    3c38:	ffffffff 	.word	0xffffffff
    3c3c:	ffffffff 	.word	0xffffffff
    3c40:	ffffffff 	.word	0xffffffff
    3c44:	ffffffff 	.word	0xffffffff
    3c48:	ffffffff 	.word	0xffffffff
    3c4c:	ffffffff 	.word	0xffffffff
    3c50:	ffffffff 	.word	0xffffffff
    3c54:	ffffffff 	.word	0xffffffff
    3c58:	ffffffff 	.word	0xffffffff
    3c5c:	ffffffff 	.word	0xffffffff
    3c60:	ffffffff 	.word	0xffffffff
    3c64:	ffffffff 	.word	0xffffffff
    3c68:	ffffffff 	.word	0xffffffff
    3c6c:	ffffffff 	.word	0xffffffff
    3c70:	ffffffff 	.word	0xffffffff
    3c74:	ffffffff 	.word	0xffffffff
    3c78:	ffffffff 	.word	0xffffffff
    3c7c:	ffffffff 	.word	0xffffffff
    3c80:	ffffffff 	.word	0xffffffff
    3c84:	ffffffff 	.word	0xffffffff
    3c88:	ffffffff 	.word	0xffffffff
    3c8c:	ffffffff 	.word	0xffffffff
    3c90:	ffffffff 	.word	0xffffffff
    3c94:	ffffffff 	.word	0xffffffff
    3c98:	ffffffff 	.word	0xffffffff
    3c9c:	ffffffff 	.word	0xffffffff
    3ca0:	ffffffff 	.word	0xffffffff
    3ca4:	ffffffff 	.word	0xffffffff
    3ca8:	ffffffff 	.word	0xffffffff
    3cac:	ffffffff 	.word	0xffffffff
    3cb0:	ffffffff 	.word	0xffffffff
    3cb4:	ffffffff 	.word	0xffffffff
    3cb8:	ffffffff 	.word	0xffffffff
    3cbc:	ffffffff 	.word	0xffffffff
    3cc0:	ffffffff 	.word	0xffffffff
    3cc4:	ffffffff 	.word	0xffffffff
    3cc8:	ffffffff 	.word	0xffffffff
    3ccc:	ffffffff 	.word	0xffffffff
    3cd0:	ffffffff 	.word	0xffffffff
    3cd4:	ffffffff 	.word	0xffffffff
    3cd8:	ffffffff 	.word	0xffffffff
    3cdc:	ffffffff 	.word	0xffffffff
    3ce0:	ffffffff 	.word	0xffffffff
    3ce4:	ffffffff 	.word	0xffffffff
    3ce8:	ffffffff 	.word	0xffffffff
    3cec:	ffffffff 	.word	0xffffffff
    3cf0:	ffffffff 	.word	0xffffffff
    3cf4:	ffffffff 	.word	0xffffffff
    3cf8:	ffffffff 	.word	0xffffffff
    3cfc:	ffffffff 	.word	0xffffffff
    3d00:	ffffffff 	.word	0xffffffff
    3d04:	ffffffff 	.word	0xffffffff
    3d08:	ffffffff 	.word	0xffffffff
    3d0c:	ffffffff 	.word	0xffffffff
    3d10:	ffffffff 	.word	0xffffffff
    3d14:	ffffffff 	.word	0xffffffff
    3d18:	ffffffff 	.word	0xffffffff
    3d1c:	ffffffff 	.word	0xffffffff
    3d20:	ffffffff 	.word	0xffffffff
    3d24:	ffffffff 	.word	0xffffffff
    3d28:	ffffffff 	.word	0xffffffff
    3d2c:	ffffffff 	.word	0xffffffff
    3d30:	ffffffff 	.word	0xffffffff
    3d34:	ffffffff 	.word	0xffffffff
    3d38:	ffffffff 	.word	0xffffffff
    3d3c:	ffffffff 	.word	0xffffffff
    3d40:	ffffffff 	.word	0xffffffff
    3d44:	ffffffff 	.word	0xffffffff
    3d48:	ffffffff 	.word	0xffffffff
    3d4c:	ffffffff 	.word	0xffffffff
    3d50:	ffffffff 	.word	0xffffffff
    3d54:	ffffffff 	.word	0xffffffff
    3d58:	ffffffff 	.word	0xffffffff
    3d5c:	ffffffff 	.word	0xffffffff
    3d60:	ffffffff 	.word	0xffffffff
    3d64:	ffffffff 	.word	0xffffffff
    3d68:	ffffffff 	.word	0xffffffff
    3d6c:	ffffffff 	.word	0xffffffff
    3d70:	ffffffff 	.word	0xffffffff
    3d74:	ffffffff 	.word	0xffffffff
    3d78:	ffffffff 	.word	0xffffffff
    3d7c:	ffffffff 	.word	0xffffffff
    3d80:	ffffffff 	.word	0xffffffff
    3d84:	ffffffff 	.word	0xffffffff
    3d88:	ffffffff 	.word	0xffffffff
    3d8c:	ffffffff 	.word	0xffffffff
    3d90:	ffffffff 	.word	0xffffffff
    3d94:	ffffffff 	.word	0xffffffff
    3d98:	ffffffff 	.word	0xffffffff
    3d9c:	ffffffff 	.word	0xffffffff
    3da0:	ffffffff 	.word	0xffffffff
    3da4:	ffffffff 	.word	0xffffffff
    3da8:	ffffffff 	.word	0xffffffff
    3dac:	ffffffff 	.word	0xffffffff
    3db0:	ffffffff 	.word	0xffffffff
    3db4:	ffffffff 	.word	0xffffffff
    3db8:	ffffffff 	.word	0xffffffff
    3dbc:	ffffffff 	.word	0xffffffff
    3dc0:	ffffffff 	.word	0xffffffff
    3dc4:	ffffffff 	.word	0xffffffff
    3dc8:	ffffffff 	.word	0xffffffff
    3dcc:	ffffffff 	.word	0xffffffff
    3dd0:	ffffffff 	.word	0xffffffff
    3dd4:	ffffffff 	.word	0xffffffff
    3dd8:	ffffffff 	.word	0xffffffff
    3ddc:	ffffffff 	.word	0xffffffff
    3de0:	ffffffff 	.word	0xffffffff
    3de4:	ffffffff 	.word	0xffffffff
    3de8:	ffffffff 	.word	0xffffffff
    3dec:	ffffffff 	.word	0xffffffff
    3df0:	ffffffff 	.word	0xffffffff
    3df4:	ffffffff 	.word	0xffffffff
    3df8:	ffffffff 	.word	0xffffffff
    3dfc:	ffffffff 	.word	0xffffffff
    3e00:	ffffffff 	.word	0xffffffff
    3e04:	ffffffff 	.word	0xffffffff
    3e08:	ffffffff 	.word	0xffffffff
    3e0c:	ffffffff 	.word	0xffffffff
    3e10:	ffffffff 	.word	0xffffffff
    3e14:	ffffffff 	.word	0xffffffff
    3e18:	ffffffff 	.word	0xffffffff
    3e1c:	ffffffff 	.word	0xffffffff
    3e20:	ffffffff 	.word	0xffffffff
    3e24:	ffffffff 	.word	0xffffffff
    3e28:	ffffffff 	.word	0xffffffff
    3e2c:	ffffffff 	.word	0xffffffff
    3e30:	ffffffff 	.word	0xffffffff
    3e34:	ffffffff 	.word	0xffffffff
    3e38:	ffffffff 	.word	0xffffffff
    3e3c:	ffffffff 	.word	0xffffffff
    3e40:	ffffffff 	.word	0xffffffff
    3e44:	ffffffff 	.word	0xffffffff
    3e48:	ffffffff 	.word	0xffffffff
    3e4c:	ffffffff 	.word	0xffffffff
    3e50:	ffffffff 	.word	0xffffffff
    3e54:	ffffffff 	.word	0xffffffff
    3e58:	ffffffff 	.word	0xffffffff
    3e5c:	ffffffff 	.word	0xffffffff
    3e60:	ffffffff 	.word	0xffffffff
    3e64:	ffffffff 	.word	0xffffffff
    3e68:	ffffffff 	.word	0xffffffff
    3e6c:	ffffffff 	.word	0xffffffff
    3e70:	ffffffff 	.word	0xffffffff
    3e74:	ffffffff 	.word	0xffffffff
    3e78:	ffffffff 	.word	0xffffffff
    3e7c:	ffffffff 	.word	0xffffffff
    3e80:	ffffffff 	.word	0xffffffff
    3e84:	ffffffff 	.word	0xffffffff
    3e88:	ffffffff 	.word	0xffffffff
    3e8c:	ffffffff 	.word	0xffffffff
    3e90:	ffffffff 	.word	0xffffffff
    3e94:	ffffffff 	.word	0xffffffff
    3e98:	ffffffff 	.word	0xffffffff
    3e9c:	ffffffff 	.word	0xffffffff
    3ea0:	ffffffff 	.word	0xffffffff
    3ea4:	ffffffff 	.word	0xffffffff
    3ea8:	ffffffff 	.word	0xffffffff
    3eac:	ffffffff 	.word	0xffffffff
    3eb0:	ffffffff 	.word	0xffffffff
    3eb4:	ffffffff 	.word	0xffffffff
    3eb8:	ffffffff 	.word	0xffffffff
    3ebc:	ffffffff 	.word	0xffffffff
    3ec0:	ffffffff 	.word	0xffffffff
    3ec4:	ffffffff 	.word	0xffffffff
    3ec8:	ffffffff 	.word	0xffffffff
    3ecc:	ffffffff 	.word	0xffffffff
    3ed0:	ffffffff 	.word	0xffffffff
    3ed4:	ffffffff 	.word	0xffffffff
    3ed8:	ffffffff 	.word	0xffffffff
    3edc:	ffffffff 	.word	0xffffffff
    3ee0:	ffffffff 	.word	0xffffffff
    3ee4:	ffffffff 	.word	0xffffffff
    3ee8:	ffffffff 	.word	0xffffffff
    3eec:	ffffffff 	.word	0xffffffff
    3ef0:	ffffffff 	.word	0xffffffff
    3ef4:	ffffffff 	.word	0xffffffff
    3ef8:	ffffffff 	.word	0xffffffff
    3efc:	ffffffff 	.word	0xffffffff
    3f00:	ffffffff 	.word	0xffffffff
    3f04:	ffffffff 	.word	0xffffffff
    3f08:	ffffffff 	.word	0xffffffff
    3f0c:	ffffffff 	.word	0xffffffff
    3f10:	ffffffff 	.word	0xffffffff
    3f14:	ffffffff 	.word	0xffffffff
    3f18:	ffffffff 	.word	0xffffffff
    3f1c:	ffffffff 	.word	0xffffffff
    3f20:	ffffffff 	.word	0xffffffff
    3f24:	ffffffff 	.word	0xffffffff
    3f28:	ffffffff 	.word	0xffffffff
    3f2c:	ffffffff 	.word	0xffffffff
    3f30:	ffffffff 	.word	0xffffffff
    3f34:	ffffffff 	.word	0xffffffff
    3f38:	ffffffff 	.word	0xffffffff
    3f3c:	ffffffff 	.word	0xffffffff
    3f40:	ffffffff 	.word	0xffffffff
    3f44:	ffffffff 	.word	0xffffffff
    3f48:	ffffffff 	.word	0xffffffff
    3f4c:	ffffffff 	.word	0xffffffff
    3f50:	ffffffff 	.word	0xffffffff
    3f54:	ffffffff 	.word	0xffffffff
    3f58:	ffffffff 	.word	0xffffffff
    3f5c:	ffffffff 	.word	0xffffffff
    3f60:	ffffffff 	.word	0xffffffff
    3f64:	ffffffff 	.word	0xffffffff
    3f68:	ffffffff 	.word	0xffffffff
    3f6c:	ffffffff 	.word	0xffffffff
    3f70:	ffffffff 	.word	0xffffffff
    3f74:	ffffffff 	.word	0xffffffff
    3f78:	ffffffff 	.word	0xffffffff
    3f7c:	ffffffff 	.word	0xffffffff
    3f80:	ffffffff 	.word	0xffffffff
    3f84:	ffffffff 	.word	0xffffffff
    3f88:	ffffffff 	.word	0xffffffff
    3f8c:	ffffffff 	.word	0xffffffff
    3f90:	ffffffff 	.word	0xffffffff
    3f94:	ffffffff 	.word	0xffffffff
    3f98:	ffffffff 	.word	0xffffffff
    3f9c:	ffffffff 	.word	0xffffffff
    3fa0:	ffffffff 	.word	0xffffffff
    3fa4:	ffffffff 	.word	0xffffffff
    3fa8:	ffffffff 	.word	0xffffffff
    3fac:	ffffffff 	.word	0xffffffff
    3fb0:	ffffffff 	.word	0xffffffff
    3fb4:	ffffffff 	.word	0xffffffff
    3fb8:	ffffffff 	.word	0xffffffff
    3fbc:	ffffffff 	.word	0xffffffff
    3fc0:	ffffffff 	.word	0xffffffff
    3fc4:	ffffffff 	.word	0xffffffff
    3fc8:	ffffffff 	.word	0xffffffff
    3fcc:	ffffffff 	.word	0xffffffff
    3fd0:	ffffffff 	.word	0xffffffff
    3fd4:	ffffffff 	.word	0xffffffff
    3fd8:	ffffffff 	.word	0xffffffff
    3fdc:	ffffffff 	.word	0xffffffff
    3fe0:	ffffffff 	.word	0xffffffff
    3fe4:	ffffffff 	.word	0xffffffff
    3fe8:	ffffffff 	.word	0xffffffff
    3fec:	ffffffff 	.word	0xffffffff
    3ff0:	ffffffff 	.word	0xffffffff
    3ff4:	ffffffff 	.word	0xffffffff
    3ff8:	ffffffff 	.word	0xffffffff
    3ffc:	ffffffff 	.word	0xffffffff
    4000:	ffffffff 	.word	0xffffffff
    4004:	ffffffff 	.word	0xffffffff
    4008:	ffffffff 	.word	0xffffffff
    400c:	ffffffff 	.word	0xffffffff
    4010:	ffffffff 	.word	0xffffffff
    4014:	ffffffff 	.word	0xffffffff
    4018:	ffffffff 	.word	0xffffffff
    401c:	ffffffff 	.word	0xffffffff
    4020:	ffffffff 	.word	0xffffffff
    4024:	ffffffff 	.word	0xffffffff
    4028:	ffffffff 	.word	0xffffffff
    402c:	ffffffff 	.word	0xffffffff
    4030:	ffffffff 	.word	0xffffffff
    4034:	ffffffff 	.word	0xffffffff
    4038:	ffffffff 	.word	0xffffffff
    403c:	ffffffff 	.word	0xffffffff
    4040:	ffffffff 	.word	0xffffffff
    4044:	ffffffff 	.word	0xffffffff
    4048:	ffffffff 	.word	0xffffffff
    404c:	ffffffff 	.word	0xffffffff
    4050:	ffffffff 	.word	0xffffffff
    4054:	ffffffff 	.word	0xffffffff
    4058:	ffffffff 	.word	0xffffffff
    405c:	ffffffff 	.word	0xffffffff
    4060:	ffffffff 	.word	0xffffffff
    4064:	ffffffff 	.word	0xffffffff
    4068:	ffffffff 	.word	0xffffffff
    406c:	ffffffff 	.word	0xffffffff
    4070:	ffffffff 	.word	0xffffffff
    4074:	ffffffff 	.word	0xffffffff
    4078:	ffffffff 	.word	0xffffffff
    407c:	ffffffff 	.word	0xffffffff
    4080:	ffffffff 	.word	0xffffffff
    4084:	ffffffff 	.word	0xffffffff
    4088:	ffffffff 	.word	0xffffffff
    408c:	ffffffff 	.word	0xffffffff
    4090:	ffffffff 	.word	0xffffffff
    4094:	ffffffff 	.word	0xffffffff
    4098:	ffffffff 	.word	0xffffffff
    409c:	ffffffff 	.word	0xffffffff
    40a0:	ffffffff 	.word	0xffffffff
    40a4:	ffffffff 	.word	0xffffffff
    40a8:	ffffffff 	.word	0xffffffff
    40ac:	ffffffff 	.word	0xffffffff
    40b0:	ffffffff 	.word	0xffffffff
    40b4:	ffffffff 	.word	0xffffffff
    40b8:	ffffffff 	.word	0xffffffff
    40bc:	ffffffff 	.word	0xffffffff
    40c0:	ffffffff 	.word	0xffffffff
    40c4:	ffffffff 	.word	0xffffffff
    40c8:	ffffffff 	.word	0xffffffff
    40cc:	ffffffff 	.word	0xffffffff
    40d0:	ffffffff 	.word	0xffffffff
    40d4:	ffffffff 	.word	0xffffffff
    40d8:	ffffffff 	.word	0xffffffff
    40dc:	ffffffff 	.word	0xffffffff
    40e0:	ffffffff 	.word	0xffffffff
    40e4:	ffffffff 	.word	0xffffffff
    40e8:	ffffffff 	.word	0xffffffff
    40ec:	ffffffff 	.word	0xffffffff
    40f0:	ffffffff 	.word	0xffffffff
    40f4:	ffffffff 	.word	0xffffffff
    40f8:	ffffffff 	.word	0xffffffff
    40fc:	ffffffff 	.word	0xffffffff
    4100:	ffffffff 	.word	0xffffffff
    4104:	ffffffff 	.word	0xffffffff
    4108:	ffffffff 	.word	0xffffffff
    410c:	ffffffff 	.word	0xffffffff
    4110:	ffffffff 	.word	0xffffffff
    4114:	ffffffff 	.word	0xffffffff
    4118:	ffffffff 	.word	0xffffffff
    411c:	ffffffff 	.word	0xffffffff
    4120:	ffffffff 	.word	0xffffffff
    4124:	ffffffff 	.word	0xffffffff
    4128:	ffffffff 	.word	0xffffffff
    412c:	ffffffff 	.word	0xffffffff
    4130:	ffffffff 	.word	0xffffffff
    4134:	ffffffff 	.word	0xffffffff
    4138:	ffffffff 	.word	0xffffffff
    413c:	ffffffff 	.word	0xffffffff
    4140:	ffffffff 	.word	0xffffffff
    4144:	ffffffff 	.word	0xffffffff
    4148:	ffffffff 	.word	0xffffffff
    414c:	ffffffff 	.word	0xffffffff
    4150:	ffffffff 	.word	0xffffffff
    4154:	ffffffff 	.word	0xffffffff
    4158:	ffffffff 	.word	0xffffffff
    415c:	ffffffff 	.word	0xffffffff
    4160:	ffffffff 	.word	0xffffffff
    4164:	ffffffff 	.word	0xffffffff
    4168:	ffffffff 	.word	0xffffffff
    416c:	ffffffff 	.word	0xffffffff
    4170:	ffffffff 	.word	0xffffffff
    4174:	ffffffff 	.word	0xffffffff
    4178:	ffffffff 	.word	0xffffffff
    417c:	ffffffff 	.word	0xffffffff
    4180:	ffffffff 	.word	0xffffffff
    4184:	ffffffff 	.word	0xffffffff
    4188:	ffffffff 	.word	0xffffffff
    418c:	ffffffff 	.word	0xffffffff
    4190:	ffffffff 	.word	0xffffffff
    4194:	ffffffff 	.word	0xffffffff
    4198:	ffffffff 	.word	0xffffffff
    419c:	ffffffff 	.word	0xffffffff
    41a0:	ffffffff 	.word	0xffffffff
    41a4:	ffffffff 	.word	0xffffffff
    41a8:	ffffffff 	.word	0xffffffff
    41ac:	ffffffff 	.word	0xffffffff
    41b0:	ffffffff 	.word	0xffffffff
    41b4:	ffffffff 	.word	0xffffffff
    41b8:	ffffffff 	.word	0xffffffff
    41bc:	ffffffff 	.word	0xffffffff
    41c0:	ffffffff 	.word	0xffffffff
    41c4:	ffffffff 	.word	0xffffffff
    41c8:	ffffffff 	.word	0xffffffff
    41cc:	ffffffff 	.word	0xffffffff
    41d0:	ffffffff 	.word	0xffffffff
    41d4:	ffffffff 	.word	0xffffffff
    41d8:	ffffffff 	.word	0xffffffff
    41dc:	ffffffff 	.word	0xffffffff
    41e0:	ffffffff 	.word	0xffffffff
    41e4:	ffffffff 	.word	0xffffffff
    41e8:	ffffffff 	.word	0xffffffff
    41ec:	ffffffff 	.word	0xffffffff
    41f0:	ffffffff 	.word	0xffffffff
    41f4:	ffffffff 	.word	0xffffffff
    41f8:	ffffffff 	.word	0xffffffff
    41fc:	ffffffff 	.word	0xffffffff
    4200:	ffffffff 	.word	0xffffffff
    4204:	ffffffff 	.word	0xffffffff
    4208:	ffffffff 	.word	0xffffffff
    420c:	ffffffff 	.word	0xffffffff
    4210:	ffffffff 	.word	0xffffffff
    4214:	ffffffff 	.word	0xffffffff
    4218:	ffffffff 	.word	0xffffffff
    421c:	ffffffff 	.word	0xffffffff
    4220:	ffffffff 	.word	0xffffffff
    4224:	ffffffff 	.word	0xffffffff
    4228:	ffffffff 	.word	0xffffffff
    422c:	ffffffff 	.word	0xffffffff
    4230:	ffffffff 	.word	0xffffffff
    4234:	ffffffff 	.word	0xffffffff
    4238:	ffffffff 	.word	0xffffffff
    423c:	ffffffff 	.word	0xffffffff
    4240:	ffffffff 	.word	0xffffffff
    4244:	ffffffff 	.word	0xffffffff
    4248:	ffffffff 	.word	0xffffffff
    424c:	ffffffff 	.word	0xffffffff
    4250:	ffffffff 	.word	0xffffffff
    4254:	ffffffff 	.word	0xffffffff
    4258:	ffffffff 	.word	0xffffffff
    425c:	ffffffff 	.word	0xffffffff
    4260:	ffffffff 	.word	0xffffffff
    4264:	ffffffff 	.word	0xffffffff
    4268:	ffffffff 	.word	0xffffffff
    426c:	ffffffff 	.word	0xffffffff
    4270:	ffffffff 	.word	0xffffffff
    4274:	ffffffff 	.word	0xffffffff
    4278:	ffffffff 	.word	0xffffffff
    427c:	ffffffff 	.word	0xffffffff
    4280:	ffffffff 	.word	0xffffffff
    4284:	ffffffff 	.word	0xffffffff
    4288:	ffffffff 	.word	0xffffffff
    428c:	ffffffff 	.word	0xffffffff
    4290:	ffffffff 	.word	0xffffffff
    4294:	ffffffff 	.word	0xffffffff
    4298:	ffffffff 	.word	0xffffffff
    429c:	ffffffff 	.word	0xffffffff
    42a0:	ffffffff 	.word	0xffffffff
    42a4:	ffffffff 	.word	0xffffffff
    42a8:	ffffffff 	.word	0xffffffff
    42ac:	ffffffff 	.word	0xffffffff
    42b0:	ffffffff 	.word	0xffffffff
    42b4:	ffffffff 	.word	0xffffffff
    42b8:	ffffffff 	.word	0xffffffff
    42bc:	ffffffff 	.word	0xffffffff
    42c0:	ffffffff 	.word	0xffffffff
    42c4:	ffffffff 	.word	0xffffffff
    42c8:	ffffffff 	.word	0xffffffff
    42cc:	ffffffff 	.word	0xffffffff
    42d0:	ffffffff 	.word	0xffffffff
    42d4:	ffffffff 	.word	0xffffffff
    42d8:	ffffffff 	.word	0xffffffff
    42dc:	ffffffff 	.word	0xffffffff
    42e0:	ffffffff 	.word	0xffffffff
    42e4:	ffffffff 	.word	0xffffffff
    42e8:	ffffffff 	.word	0xffffffff
    42ec:	ffffffff 	.word	0xffffffff
    42f0:	ffffffff 	.word	0xffffffff
    42f4:	ffffffff 	.word	0xffffffff
    42f8:	ffffffff 	.word	0xffffffff
    42fc:	ffffffff 	.word	0xffffffff
    4300:	ffffffff 	.word	0xffffffff
    4304:	ffffffff 	.word	0xffffffff
    4308:	ffffffff 	.word	0xffffffff
    430c:	ffffffff 	.word	0xffffffff
    4310:	ffffffff 	.word	0xffffffff
    4314:	ffffffff 	.word	0xffffffff
    4318:	ffffffff 	.word	0xffffffff
    431c:	ffffffff 	.word	0xffffffff
    4320:	ffffffff 	.word	0xffffffff
    4324:	ffffffff 	.word	0xffffffff
    4328:	ffffffff 	.word	0xffffffff
    432c:	ffffffff 	.word	0xffffffff
    4330:	ffffffff 	.word	0xffffffff
    4334:	ffffffff 	.word	0xffffffff
    4338:	ffffffff 	.word	0xffffffff
    433c:	ffffffff 	.word	0xffffffff
    4340:	ffffffff 	.word	0xffffffff
    4344:	ffffffff 	.word	0xffffffff
    4348:	ffffffff 	.word	0xffffffff
    434c:	ffffffff 	.word	0xffffffff
    4350:	ffffffff 	.word	0xffffffff
    4354:	ffffffff 	.word	0xffffffff
    4358:	ffffffff 	.word	0xffffffff
    435c:	ffffffff 	.word	0xffffffff
    4360:	ffffffff 	.word	0xffffffff
    4364:	ffffffff 	.word	0xffffffff
    4368:	ffffffff 	.word	0xffffffff
    436c:	ffffffff 	.word	0xffffffff
    4370:	ffffffff 	.word	0xffffffff
    4374:	ffffffff 	.word	0xffffffff
    4378:	ffffffff 	.word	0xffffffff
    437c:	ffffffff 	.word	0xffffffff
    4380:	ffffffff 	.word	0xffffffff
    4384:	ffffffff 	.word	0xffffffff
    4388:	ffffffff 	.word	0xffffffff
    438c:	ffffffff 	.word	0xffffffff
    4390:	ffffffff 	.word	0xffffffff
    4394:	ffffffff 	.word	0xffffffff
    4398:	ffffffff 	.word	0xffffffff
    439c:	ffffffff 	.word	0xffffffff
    43a0:	ffffffff 	.word	0xffffffff
    43a4:	ffffffff 	.word	0xffffffff
    43a8:	ffffffff 	.word	0xffffffff
    43ac:	ffffffff 	.word	0xffffffff
    43b0:	ffffffff 	.word	0xffffffff
    43b4:	ffffffff 	.word	0xffffffff
    43b8:	ffffffff 	.word	0xffffffff
    43bc:	ffffffff 	.word	0xffffffff
    43c0:	ffffffff 	.word	0xffffffff
    43c4:	ffffffff 	.word	0xffffffff
    43c8:	ffffffff 	.word	0xffffffff
    43cc:	ffffffff 	.word	0xffffffff
    43d0:	ffffffff 	.word	0xffffffff
    43d4:	ffffffff 	.word	0xffffffff
    43d8:	ffffffff 	.word	0xffffffff
    43dc:	ffffffff 	.word	0xffffffff
    43e0:	ffffffff 	.word	0xffffffff
    43e4:	ffffffff 	.word	0xffffffff
    43e8:	ffffffff 	.word	0xffffffff
    43ec:	ffffffff 	.word	0xffffffff
    43f0:	ffffffff 	.word	0xffffffff
    43f4:	ffffffff 	.word	0xffffffff
    43f8:	ffffffff 	.word	0xffffffff
    43fc:	ffffffff 	.word	0xffffffff
    4400:	ffffffff 	.word	0xffffffff
    4404:	ffffffff 	.word	0xffffffff
    4408:	ffffffff 	.word	0xffffffff
    440c:	ffffffff 	.word	0xffffffff
    4410:	ffffffff 	.word	0xffffffff
    4414:	ffffffff 	.word	0xffffffff
    4418:	ffffffff 	.word	0xffffffff
    441c:	ffffffff 	.word	0xffffffff
    4420:	ffffffff 	.word	0xffffffff
    4424:	ffffffff 	.word	0xffffffff
    4428:	ffffffff 	.word	0xffffffff
    442c:	ffffffff 	.word	0xffffffff
    4430:	ffffffff 	.word	0xffffffff
    4434:	ffffffff 	.word	0xffffffff
    4438:	ffffffff 	.word	0xffffffff
    443c:	ffffffff 	.word	0xffffffff
    4440:	ffffffff 	.word	0xffffffff
    4444:	ffffffff 	.word	0xffffffff
    4448:	ffffffff 	.word	0xffffffff
    444c:	ffffffff 	.word	0xffffffff
    4450:	ffffffff 	.word	0xffffffff
    4454:	ffffffff 	.word	0xffffffff
    4458:	ffffffff 	.word	0xffffffff
    445c:	ffffffff 	.word	0xffffffff
    4460:	ffffffff 	.word	0xffffffff
    4464:	ffffffff 	.word	0xffffffff
    4468:	ffffffff 	.word	0xffffffff
    446c:	ffffffff 	.word	0xffffffff
    4470:	ffffffff 	.word	0xffffffff
    4474:	ffffffff 	.word	0xffffffff
    4478:	ffffffff 	.word	0xffffffff
    447c:	ffffffff 	.word	0xffffffff
    4480:	ffffffff 	.word	0xffffffff
    4484:	ffffffff 	.word	0xffffffff
    4488:	ffffffff 	.word	0xffffffff
    448c:	ffffffff 	.word	0xffffffff
    4490:	ffffffff 	.word	0xffffffff
    4494:	ffffffff 	.word	0xffffffff
    4498:	ffffffff 	.word	0xffffffff
    449c:	ffffffff 	.word	0xffffffff
    44a0:	ffffffff 	.word	0xffffffff
    44a4:	ffffffff 	.word	0xffffffff
    44a8:	ffffffff 	.word	0xffffffff
    44ac:	ffffffff 	.word	0xffffffff
    44b0:	ffffffff 	.word	0xffffffff
    44b4:	ffffffff 	.word	0xffffffff
    44b8:	ffffffff 	.word	0xffffffff
    44bc:	ffffffff 	.word	0xffffffff
    44c0:	ffffffff 	.word	0xffffffff
    44c4:	ffffffff 	.word	0xffffffff
    44c8:	ffffffff 	.word	0xffffffff
    44cc:	ffffffff 	.word	0xffffffff
    44d0:	ffffffff 	.word	0xffffffff
    44d4:	ffffffff 	.word	0xffffffff
    44d8:	ffffffff 	.word	0xffffffff
    44dc:	ffffffff 	.word	0xffffffff
    44e0:	ffffffff 	.word	0xffffffff
    44e4:	ffffffff 	.word	0xffffffff
    44e8:	ffffffff 	.word	0xffffffff
    44ec:	ffffffff 	.word	0xffffffff
    44f0:	ffffffff 	.word	0xffffffff
    44f4:	ffffffff 	.word	0xffffffff
    44f8:	ffffffff 	.word	0xffffffff
    44fc:	ffffffff 	.word	0xffffffff
    4500:	ffffffff 	.word	0xffffffff
    4504:	ffffffff 	.word	0xffffffff
    4508:	ffffffff 	.word	0xffffffff
    450c:	ffffffff 	.word	0xffffffff
    4510:	ffffffff 	.word	0xffffffff
    4514:	ffffffff 	.word	0xffffffff
    4518:	ffffffff 	.word	0xffffffff
    451c:	ffffffff 	.word	0xffffffff
    4520:	ffffffff 	.word	0xffffffff
    4524:	ffffffff 	.word	0xffffffff
    4528:	ffffffff 	.word	0xffffffff
    452c:	ffffffff 	.word	0xffffffff
    4530:	ffffffff 	.word	0xffffffff
    4534:	ffffffff 	.word	0xffffffff
    4538:	ffffffff 	.word	0xffffffff
    453c:	ffffffff 	.word	0xffffffff
    4540:	ffffffff 	.word	0xffffffff
    4544:	ffffffff 	.word	0xffffffff
    4548:	ffffffff 	.word	0xffffffff
    454c:	ffffffff 	.word	0xffffffff
    4550:	ffffffff 	.word	0xffffffff
    4554:	ffffffff 	.word	0xffffffff
    4558:	ffffffff 	.word	0xffffffff
    455c:	ffffffff 	.word	0xffffffff
    4560:	ffffffff 	.word	0xffffffff
    4564:	ffffffff 	.word	0xffffffff
    4568:	ffffffff 	.word	0xffffffff
    456c:	ffffffff 	.word	0xffffffff
    4570:	ffffffff 	.word	0xffffffff
    4574:	ffffffff 	.word	0xffffffff
    4578:	ffffffff 	.word	0xffffffff
    457c:	ffffffff 	.word	0xffffffff
    4580:	ffffffff 	.word	0xffffffff
    4584:	ffffffff 	.word	0xffffffff
    4588:	ffffffff 	.word	0xffffffff
    458c:	ffffffff 	.word	0xffffffff
    4590:	ffffffff 	.word	0xffffffff
    4594:	ffffffff 	.word	0xffffffff
    4598:	ffffffff 	.word	0xffffffff
    459c:	ffffffff 	.word	0xffffffff
    45a0:	ffffffff 	.word	0xffffffff
    45a4:	ffffffff 	.word	0xffffffff
    45a8:	ffffffff 	.word	0xffffffff
    45ac:	ffffffff 	.word	0xffffffff
    45b0:	ffffffff 	.word	0xffffffff
    45b4:	ffffffff 	.word	0xffffffff
    45b8:	ffffffff 	.word	0xffffffff
    45bc:	ffffffff 	.word	0xffffffff
    45c0:	ffffffff 	.word	0xffffffff
    45c4:	ffffffff 	.word	0xffffffff
    45c8:	ffffffff 	.word	0xffffffff
    45cc:	ffffffff 	.word	0xffffffff
    45d0:	ffffffff 	.word	0xffffffff
    45d4:	ffffffff 	.word	0xffffffff
    45d8:	ffffffff 	.word	0xffffffff
    45dc:	ffffffff 	.word	0xffffffff
    45e0:	ffffffff 	.word	0xffffffff
    45e4:	ffffffff 	.word	0xffffffff
    45e8:	ffffffff 	.word	0xffffffff
    45ec:	ffffffff 	.word	0xffffffff
    45f0:	ffffffff 	.word	0xffffffff
    45f4:	ffffffff 	.word	0xffffffff
    45f8:	ffffffff 	.word	0xffffffff
    45fc:	ffffffff 	.word	0xffffffff
    4600:	ffffffff 	.word	0xffffffff
    4604:	ffffffff 	.word	0xffffffff
    4608:	ffffffff 	.word	0xffffffff
    460c:	ffffffff 	.word	0xffffffff
    4610:	ffffffff 	.word	0xffffffff
    4614:	ffffffff 	.word	0xffffffff
    4618:	ffffffff 	.word	0xffffffff
    461c:	ffffffff 	.word	0xffffffff
    4620:	ffffffff 	.word	0xffffffff
    4624:	ffffffff 	.word	0xffffffff
    4628:	ffffffff 	.word	0xffffffff
    462c:	ffffffff 	.word	0xffffffff
    4630:	ffffffff 	.word	0xffffffff
    4634:	ffffffff 	.word	0xffffffff
    4638:	ffffffff 	.word	0xffffffff
    463c:	ffffffff 	.word	0xffffffff
    4640:	ffffffff 	.word	0xffffffff
    4644:	ffffffff 	.word	0xffffffff
    4648:	ffffffff 	.word	0xffffffff
    464c:	ffffffff 	.word	0xffffffff
    4650:	ffffffff 	.word	0xffffffff
    4654:	ffffffff 	.word	0xffffffff
    4658:	ffffffff 	.word	0xffffffff
    465c:	ffffffff 	.word	0xffffffff
    4660:	ffffffff 	.word	0xffffffff
    4664:	ffffffff 	.word	0xffffffff
    4668:	ffffffff 	.word	0xffffffff
    466c:	ffffffff 	.word	0xffffffff
    4670:	ffffffff 	.word	0xffffffff
    4674:	ffffffff 	.word	0xffffffff
    4678:	ffffffff 	.word	0xffffffff
    467c:	ffffffff 	.word	0xffffffff
    4680:	ffffffff 	.word	0xffffffff
    4684:	ffffffff 	.word	0xffffffff
    4688:	ffffffff 	.word	0xffffffff
    468c:	ffffffff 	.word	0xffffffff
    4690:	ffffffff 	.word	0xffffffff
    4694:	ffffffff 	.word	0xffffffff
    4698:	ffffffff 	.word	0xffffffff
    469c:	ffffffff 	.word	0xffffffff
    46a0:	ffffffff 	.word	0xffffffff
    46a4:	ffffffff 	.word	0xffffffff
    46a8:	ffffffff 	.word	0xffffffff
    46ac:	ffffffff 	.word	0xffffffff
    46b0:	ffffffff 	.word	0xffffffff
    46b4:	ffffffff 	.word	0xffffffff
    46b8:	ffffffff 	.word	0xffffffff
    46bc:	ffffffff 	.word	0xffffffff
    46c0:	ffffffff 	.word	0xffffffff
    46c4:	ffffffff 	.word	0xffffffff
    46c8:	ffffffff 	.word	0xffffffff
    46cc:	ffffffff 	.word	0xffffffff
    46d0:	ffffffff 	.word	0xffffffff
    46d4:	ffffffff 	.word	0xffffffff
    46d8:	ffffffff 	.word	0xffffffff
    46dc:	ffffffff 	.word	0xffffffff
    46e0:	ffffffff 	.word	0xffffffff
    46e4:	ffffffff 	.word	0xffffffff
    46e8:	ffffffff 	.word	0xffffffff
    46ec:	ffffffff 	.word	0xffffffff
    46f0:	ffffffff 	.word	0xffffffff
    46f4:	ffffffff 	.word	0xffffffff
    46f8:	ffffffff 	.word	0xffffffff
    46fc:	ffffffff 	.word	0xffffffff
    4700:	ffffffff 	.word	0xffffffff
    4704:	ffffffff 	.word	0xffffffff
    4708:	ffffffff 	.word	0xffffffff
    470c:	ffffffff 	.word	0xffffffff
    4710:	ffffffff 	.word	0xffffffff
    4714:	ffffffff 	.word	0xffffffff
    4718:	ffffffff 	.word	0xffffffff
    471c:	ffffffff 	.word	0xffffffff
    4720:	ffffffff 	.word	0xffffffff
    4724:	ffffffff 	.word	0xffffffff
    4728:	ffffffff 	.word	0xffffffff
    472c:	ffffffff 	.word	0xffffffff
    4730:	ffffffff 	.word	0xffffffff
    4734:	ffffffff 	.word	0xffffffff
    4738:	ffffffff 	.word	0xffffffff
    473c:	ffffffff 	.word	0xffffffff
    4740:	ffffffff 	.word	0xffffffff
    4744:	ffffffff 	.word	0xffffffff
    4748:	ffffffff 	.word	0xffffffff
    474c:	ffffffff 	.word	0xffffffff
    4750:	ffffffff 	.word	0xffffffff
    4754:	ffffffff 	.word	0xffffffff
    4758:	ffffffff 	.word	0xffffffff
    475c:	ffffffff 	.word	0xffffffff
    4760:	ffffffff 	.word	0xffffffff
    4764:	ffffffff 	.word	0xffffffff
    4768:	ffffffff 	.word	0xffffffff
    476c:	ffffffff 	.word	0xffffffff
    4770:	ffffffff 	.word	0xffffffff
    4774:	ffffffff 	.word	0xffffffff
    4778:	ffffffff 	.word	0xffffffff
    477c:	ffffffff 	.word	0xffffffff
    4780:	ffffffff 	.word	0xffffffff
    4784:	ffffffff 	.word	0xffffffff
    4788:	ffffffff 	.word	0xffffffff
    478c:	ffffffff 	.word	0xffffffff
    4790:	ffffffff 	.word	0xffffffff
    4794:	ffffffff 	.word	0xffffffff
    4798:	ffffffff 	.word	0xffffffff
    479c:	ffffffff 	.word	0xffffffff
    47a0:	ffffffff 	.word	0xffffffff
    47a4:	ffffffff 	.word	0xffffffff
    47a8:	ffffffff 	.word	0xffffffff
    47ac:	ffffffff 	.word	0xffffffff
    47b0:	ffffffff 	.word	0xffffffff
    47b4:	ffffffff 	.word	0xffffffff
    47b8:	ffffffff 	.word	0xffffffff
    47bc:	ffffffff 	.word	0xffffffff
    47c0:	ffffffff 	.word	0xffffffff
    47c4:	ffffffff 	.word	0xffffffff
    47c8:	ffffffff 	.word	0xffffffff
    47cc:	ffffffff 	.word	0xffffffff
    47d0:	ffffffff 	.word	0xffffffff
    47d4:	ffffffff 	.word	0xffffffff
    47d8:	ffffffff 	.word	0xffffffff
    47dc:	ffffffff 	.word	0xffffffff
    47e0:	ffffffff 	.word	0xffffffff
    47e4:	ffffffff 	.word	0xffffffff
    47e8:	ffffffff 	.word	0xffffffff
    47ec:	ffffffff 	.word	0xffffffff
    47f0:	ffffffff 	.word	0xffffffff
    47f4:	ffffffff 	.word	0xffffffff
    47f8:	ffffffff 	.word	0xffffffff
    47fc:	ffffffff 	.word	0xffffffff
    4800:	ffffffff 	.word	0xffffffff
    4804:	ffffffff 	.word	0xffffffff
    4808:	ffffffff 	.word	0xffffffff
    480c:	ffffffff 	.word	0xffffffff
    4810:	ffffffff 	.word	0xffffffff
    4814:	ffffffff 	.word	0xffffffff
    4818:	ffffffff 	.word	0xffffffff
    481c:	ffffffff 	.word	0xffffffff
    4820:	ffffffff 	.word	0xffffffff
    4824:	ffffffff 	.word	0xffffffff
    4828:	ffffffff 	.word	0xffffffff
    482c:	ffffffff 	.word	0xffffffff
    4830:	ffffffff 	.word	0xffffffff
    4834:	ffffffff 	.word	0xffffffff
    4838:	ffffffff 	.word	0xffffffff
    483c:	ffffffff 	.word	0xffffffff
    4840:	ffffffff 	.word	0xffffffff
    4844:	ffffffff 	.word	0xffffffff
    4848:	ffffffff 	.word	0xffffffff
    484c:	ffffffff 	.word	0xffffffff
    4850:	ffffffff 	.word	0xffffffff
    4854:	ffffffff 	.word	0xffffffff
    4858:	ffffffff 	.word	0xffffffff
    485c:	ffffffff 	.word	0xffffffff
    4860:	ffffffff 	.word	0xffffffff
    4864:	ffffffff 	.word	0xffffffff
    4868:	ffffffff 	.word	0xffffffff
    486c:	ffffffff 	.word	0xffffffff
    4870:	ffffffff 	.word	0xffffffff
    4874:	ffffffff 	.word	0xffffffff
    4878:	ffffffff 	.word	0xffffffff
    487c:	ffffffff 	.word	0xffffffff
    4880:	ffffffff 	.word	0xffffffff
    4884:	ffffffff 	.word	0xffffffff
    4888:	ffffffff 	.word	0xffffffff
    488c:	ffffffff 	.word	0xffffffff
    4890:	ffffffff 	.word	0xffffffff
    4894:	ffffffff 	.word	0xffffffff
    4898:	ffffffff 	.word	0xffffffff
    489c:	ffffffff 	.word	0xffffffff
    48a0:	ffffffff 	.word	0xffffffff
    48a4:	ffffffff 	.word	0xffffffff
    48a8:	ffffffff 	.word	0xffffffff
    48ac:	ffffffff 	.word	0xffffffff
    48b0:	ffffffff 	.word	0xffffffff
    48b4:	ffffffff 	.word	0xffffffff
    48b8:	ffffffff 	.word	0xffffffff
    48bc:	ffffffff 	.word	0xffffffff
    48c0:	ffffffff 	.word	0xffffffff
    48c4:	ffffffff 	.word	0xffffffff
    48c8:	ffffffff 	.word	0xffffffff
    48cc:	ffffffff 	.word	0xffffffff
    48d0:	ffffffff 	.word	0xffffffff
    48d4:	ffffffff 	.word	0xffffffff
    48d8:	ffffffff 	.word	0xffffffff
    48dc:	ffffffff 	.word	0xffffffff
    48e0:	ffffffff 	.word	0xffffffff
    48e4:	ffffffff 	.word	0xffffffff
    48e8:	ffffffff 	.word	0xffffffff
    48ec:	ffffffff 	.word	0xffffffff
    48f0:	ffffffff 	.word	0xffffffff
    48f4:	ffffffff 	.word	0xffffffff
    48f8:	ffffffff 	.word	0xffffffff
    48fc:	ffffffff 	.word	0xffffffff
    4900:	ffffffff 	.word	0xffffffff
    4904:	ffffffff 	.word	0xffffffff
    4908:	ffffffff 	.word	0xffffffff
    490c:	ffffffff 	.word	0xffffffff
    4910:	ffffffff 	.word	0xffffffff
    4914:	ffffffff 	.word	0xffffffff
    4918:	ffffffff 	.word	0xffffffff
    491c:	ffffffff 	.word	0xffffffff
    4920:	ffffffff 	.word	0xffffffff
    4924:	ffffffff 	.word	0xffffffff
    4928:	ffffffff 	.word	0xffffffff
    492c:	ffffffff 	.word	0xffffffff
    4930:	ffffffff 	.word	0xffffffff
    4934:	ffffffff 	.word	0xffffffff
    4938:	ffffffff 	.word	0xffffffff
    493c:	ffffffff 	.word	0xffffffff
    4940:	ffffffff 	.word	0xffffffff
    4944:	ffffffff 	.word	0xffffffff
    4948:	ffffffff 	.word	0xffffffff
    494c:	ffffffff 	.word	0xffffffff
    4950:	ffffffff 	.word	0xffffffff
    4954:	ffffffff 	.word	0xffffffff
    4958:	ffffffff 	.word	0xffffffff
    495c:	ffffffff 	.word	0xffffffff
    4960:	ffffffff 	.word	0xffffffff
    4964:	ffffffff 	.word	0xffffffff
    4968:	ffffffff 	.word	0xffffffff
    496c:	ffffffff 	.word	0xffffffff
    4970:	ffffffff 	.word	0xffffffff
    4974:	ffffffff 	.word	0xffffffff
    4978:	ffffffff 	.word	0xffffffff
    497c:	ffffffff 	.word	0xffffffff
    4980:	ffffffff 	.word	0xffffffff
    4984:	ffffffff 	.word	0xffffffff
    4988:	ffffffff 	.word	0xffffffff
    498c:	ffffffff 	.word	0xffffffff
    4990:	ffffffff 	.word	0xffffffff
    4994:	ffffffff 	.word	0xffffffff
    4998:	ffffffff 	.word	0xffffffff
    499c:	ffffffff 	.word	0xffffffff
    49a0:	ffffffff 	.word	0xffffffff
    49a4:	ffffffff 	.word	0xffffffff
    49a8:	ffffffff 	.word	0xffffffff
    49ac:	ffffffff 	.word	0xffffffff
    49b0:	ffffffff 	.word	0xffffffff
    49b4:	ffffffff 	.word	0xffffffff
    49b8:	ffffffff 	.word	0xffffffff
    49bc:	ffffffff 	.word	0xffffffff
    49c0:	ffffffff 	.word	0xffffffff
    49c4:	ffffffff 	.word	0xffffffff
    49c8:	ffffffff 	.word	0xffffffff
    49cc:	ffffffff 	.word	0xffffffff
    49d0:	ffffffff 	.word	0xffffffff
    49d4:	ffffffff 	.word	0xffffffff
    49d8:	ffffffff 	.word	0xffffffff
    49dc:	ffffffff 	.word	0xffffffff
    49e0:	ffffffff 	.word	0xffffffff
    49e4:	ffffffff 	.word	0xffffffff
    49e8:	ffffffff 	.word	0xffffffff
    49ec:	ffffffff 	.word	0xffffffff
    49f0:	ffffffff 	.word	0xffffffff
    49f4:	ffffffff 	.word	0xffffffff
    49f8:	ffffffff 	.word	0xffffffff
    49fc:	ffffffff 	.word	0xffffffff
    4a00:	ffffffff 	.word	0xffffffff
    4a04:	ffffffff 	.word	0xffffffff
    4a08:	ffffffff 	.word	0xffffffff
    4a0c:	ffffffff 	.word	0xffffffff
    4a10:	ffffffff 	.word	0xffffffff
    4a14:	ffffffff 	.word	0xffffffff
    4a18:	ffffffff 	.word	0xffffffff
    4a1c:	ffffffff 	.word	0xffffffff
    4a20:	ffffffff 	.word	0xffffffff
    4a24:	ffffffff 	.word	0xffffffff
    4a28:	ffffffff 	.word	0xffffffff
    4a2c:	ffffffff 	.word	0xffffffff
    4a30:	ffffffff 	.word	0xffffffff
    4a34:	ffffffff 	.word	0xffffffff
    4a38:	ffffffff 	.word	0xffffffff
    4a3c:	ffffffff 	.word	0xffffffff
    4a40:	ffffffff 	.word	0xffffffff
    4a44:	ffffffff 	.word	0xffffffff
    4a48:	ffffffff 	.word	0xffffffff
    4a4c:	ffffffff 	.word	0xffffffff
    4a50:	ffffffff 	.word	0xffffffff
    4a54:	ffffffff 	.word	0xffffffff
    4a58:	ffffffff 	.word	0xffffffff
    4a5c:	ffffffff 	.word	0xffffffff
    4a60:	ffffffff 	.word	0xffffffff
    4a64:	ffffffff 	.word	0xffffffff
    4a68:	ffffffff 	.word	0xffffffff
    4a6c:	ffffffff 	.word	0xffffffff
    4a70:	ffffffff 	.word	0xffffffff
    4a74:	ffffffff 	.word	0xffffffff
    4a78:	ffffffff 	.word	0xffffffff
    4a7c:	ffffffff 	.word	0xffffffff
    4a80:	ffffffff 	.word	0xffffffff
    4a84:	ffffffff 	.word	0xffffffff
    4a88:	ffffffff 	.word	0xffffffff
    4a8c:	ffffffff 	.word	0xffffffff
    4a90:	ffffffff 	.word	0xffffffff
    4a94:	ffffffff 	.word	0xffffffff
    4a98:	ffffffff 	.word	0xffffffff
    4a9c:	ffffffff 	.word	0xffffffff
    4aa0:	ffffffff 	.word	0xffffffff
    4aa4:	ffffffff 	.word	0xffffffff
    4aa8:	ffffffff 	.word	0xffffffff
    4aac:	ffffffff 	.word	0xffffffff
    4ab0:	ffffffff 	.word	0xffffffff
    4ab4:	ffffffff 	.word	0xffffffff
    4ab8:	ffffffff 	.word	0xffffffff
    4abc:	ffffffff 	.word	0xffffffff
    4ac0:	ffffffff 	.word	0xffffffff
    4ac4:	ffffffff 	.word	0xffffffff
    4ac8:	ffffffff 	.word	0xffffffff
    4acc:	ffffffff 	.word	0xffffffff
    4ad0:	ffffffff 	.word	0xffffffff
    4ad4:	ffffffff 	.word	0xffffffff
    4ad8:	ffffffff 	.word	0xffffffff
    4adc:	ffffffff 	.word	0xffffffff
    4ae0:	ffffffff 	.word	0xffffffff
    4ae4:	ffffffff 	.word	0xffffffff
    4ae8:	ffffffff 	.word	0xffffffff
    4aec:	ffffffff 	.word	0xffffffff
    4af0:	ffffffff 	.word	0xffffffff
    4af4:	ffffffff 	.word	0xffffffff
    4af8:	ffffffff 	.word	0xffffffff
    4afc:	ffffffff 	.word	0xffffffff
    4b00:	ffffffff 	.word	0xffffffff
    4b04:	ffffffff 	.word	0xffffffff
    4b08:	ffffffff 	.word	0xffffffff
    4b0c:	ffffffff 	.word	0xffffffff
    4b10:	ffffffff 	.word	0xffffffff
    4b14:	ffffffff 	.word	0xffffffff
    4b18:	ffffffff 	.word	0xffffffff
    4b1c:	ffffffff 	.word	0xffffffff
    4b20:	ffffffff 	.word	0xffffffff
    4b24:	ffffffff 	.word	0xffffffff
    4b28:	ffffffff 	.word	0xffffffff
    4b2c:	ffffffff 	.word	0xffffffff
    4b30:	ffffffff 	.word	0xffffffff
    4b34:	ffffffff 	.word	0xffffffff
    4b38:	ffffffff 	.word	0xffffffff
    4b3c:	ffffffff 	.word	0xffffffff
    4b40:	ffffffff 	.word	0xffffffff
    4b44:	ffffffff 	.word	0xffffffff
    4b48:	ffffffff 	.word	0xffffffff
    4b4c:	ffffffff 	.word	0xffffffff
    4b50:	ffffffff 	.word	0xffffffff
    4b54:	ffffffff 	.word	0xffffffff
    4b58:	ffffffff 	.word	0xffffffff
    4b5c:	ffffffff 	.word	0xffffffff
    4b60:	ffffffff 	.word	0xffffffff
    4b64:	ffffffff 	.word	0xffffffff
    4b68:	ffffffff 	.word	0xffffffff
    4b6c:	ffffffff 	.word	0xffffffff
    4b70:	ffffffff 	.word	0xffffffff
    4b74:	ffffffff 	.word	0xffffffff
    4b78:	ffffffff 	.word	0xffffffff
    4b7c:	ffffffff 	.word	0xffffffff
    4b80:	ffffffff 	.word	0xffffffff
    4b84:	ffffffff 	.word	0xffffffff
    4b88:	ffffffff 	.word	0xffffffff
    4b8c:	ffffffff 	.word	0xffffffff
    4b90:	ffffffff 	.word	0xffffffff
    4b94:	ffffffff 	.word	0xffffffff
    4b98:	ffffffff 	.word	0xffffffff
    4b9c:	ffffffff 	.word	0xffffffff
    4ba0:	ffffffff 	.word	0xffffffff
    4ba4:	ffffffff 	.word	0xffffffff
    4ba8:	ffffffff 	.word	0xffffffff
    4bac:	ffffffff 	.word	0xffffffff
    4bb0:	ffffffff 	.word	0xffffffff
    4bb4:	ffffffff 	.word	0xffffffff
    4bb8:	ffffffff 	.word	0xffffffff
    4bbc:	ffffffff 	.word	0xffffffff
    4bc0:	ffffffff 	.word	0xffffffff
    4bc4:	ffffffff 	.word	0xffffffff
    4bc8:	ffffffff 	.word	0xffffffff
    4bcc:	ffffffff 	.word	0xffffffff
    4bd0:	ffffffff 	.word	0xffffffff
    4bd4:	ffffffff 	.word	0xffffffff
    4bd8:	ffffffff 	.word	0xffffffff
    4bdc:	ffffffff 	.word	0xffffffff
    4be0:	ffffffff 	.word	0xffffffff
    4be4:	ffffffff 	.word	0xffffffff
    4be8:	ffffffff 	.word	0xffffffff
    4bec:	ffffffff 	.word	0xffffffff
    4bf0:	ffffffff 	.word	0xffffffff
    4bf4:	ffffffff 	.word	0xffffffff
    4bf8:	ffffffff 	.word	0xffffffff
    4bfc:	ffffffff 	.word	0xffffffff
    4c00:	ffffffff 	.word	0xffffffff
    4c04:	ffffffff 	.word	0xffffffff
    4c08:	ffffffff 	.word	0xffffffff
    4c0c:	ffffffff 	.word	0xffffffff
    4c10:	ffffffff 	.word	0xffffffff
    4c14:	ffffffff 	.word	0xffffffff
    4c18:	ffffffff 	.word	0xffffffff
    4c1c:	ffffffff 	.word	0xffffffff
    4c20:	ffffffff 	.word	0xffffffff
    4c24:	ffffffff 	.word	0xffffffff
    4c28:	ffffffff 	.word	0xffffffff
    4c2c:	ffffffff 	.word	0xffffffff
    4c30:	ffffffff 	.word	0xffffffff
    4c34:	ffffffff 	.word	0xffffffff
    4c38:	ffffffff 	.word	0xffffffff
    4c3c:	ffffffff 	.word	0xffffffff
    4c40:	ffffffff 	.word	0xffffffff
    4c44:	ffffffff 	.word	0xffffffff
    4c48:	ffffffff 	.word	0xffffffff
    4c4c:	ffffffff 	.word	0xffffffff
    4c50:	ffffffff 	.word	0xffffffff
    4c54:	ffffffff 	.word	0xffffffff
    4c58:	ffffffff 	.word	0xffffffff
    4c5c:	ffffffff 	.word	0xffffffff
    4c60:	ffffffff 	.word	0xffffffff
    4c64:	ffffffff 	.word	0xffffffff
    4c68:	ffffffff 	.word	0xffffffff
    4c6c:	ffffffff 	.word	0xffffffff
    4c70:	ffffffff 	.word	0xffffffff
    4c74:	ffffffff 	.word	0xffffffff
    4c78:	ffffffff 	.word	0xffffffff
    4c7c:	ffffffff 	.word	0xffffffff
    4c80:	ffffffff 	.word	0xffffffff
    4c84:	ffffffff 	.word	0xffffffff
    4c88:	ffffffff 	.word	0xffffffff
    4c8c:	ffffffff 	.word	0xffffffff
    4c90:	ffffffff 	.word	0xffffffff
    4c94:	ffffffff 	.word	0xffffffff
    4c98:	ffffffff 	.word	0xffffffff
    4c9c:	ffffffff 	.word	0xffffffff
    4ca0:	ffffffff 	.word	0xffffffff
    4ca4:	ffffffff 	.word	0xffffffff
    4ca8:	ffffffff 	.word	0xffffffff
    4cac:	ffffffff 	.word	0xffffffff
    4cb0:	ffffffff 	.word	0xffffffff
    4cb4:	ffffffff 	.word	0xffffffff
    4cb8:	ffffffff 	.word	0xffffffff
    4cbc:	ffffffff 	.word	0xffffffff
    4cc0:	ffffffff 	.word	0xffffffff
    4cc4:	ffffffff 	.word	0xffffffff
    4cc8:	ffffffff 	.word	0xffffffff
    4ccc:	ffffffff 	.word	0xffffffff
    4cd0:	ffffffff 	.word	0xffffffff
    4cd4:	ffffffff 	.word	0xffffffff
    4cd8:	ffffffff 	.word	0xffffffff
    4cdc:	ffffffff 	.word	0xffffffff
    4ce0:	ffffffff 	.word	0xffffffff
    4ce4:	ffffffff 	.word	0xffffffff
    4ce8:	ffffffff 	.word	0xffffffff
    4cec:	ffffffff 	.word	0xffffffff
    4cf0:	ffffffff 	.word	0xffffffff
    4cf4:	ffffffff 	.word	0xffffffff
    4cf8:	ffffffff 	.word	0xffffffff
    4cfc:	ffffffff 	.word	0xffffffff
    4d00:	ffffffff 	.word	0xffffffff
    4d04:	ffffffff 	.word	0xffffffff
    4d08:	ffffffff 	.word	0xffffffff
    4d0c:	ffffffff 	.word	0xffffffff
    4d10:	ffffffff 	.word	0xffffffff
    4d14:	ffffffff 	.word	0xffffffff
    4d18:	ffffffff 	.word	0xffffffff
    4d1c:	ffffffff 	.word	0xffffffff
    4d20:	ffffffff 	.word	0xffffffff
    4d24:	ffffffff 	.word	0xffffffff
    4d28:	ffffffff 	.word	0xffffffff
    4d2c:	ffffffff 	.word	0xffffffff
    4d30:	ffffffff 	.word	0xffffffff
    4d34:	ffffffff 	.word	0xffffffff
    4d38:	ffffffff 	.word	0xffffffff
    4d3c:	ffffffff 	.word	0xffffffff
    4d40:	ffffffff 	.word	0xffffffff
    4d44:	ffffffff 	.word	0xffffffff
    4d48:	ffffffff 	.word	0xffffffff
    4d4c:	ffffffff 	.word	0xffffffff
    4d50:	ffffffff 	.word	0xffffffff
    4d54:	ffffffff 	.word	0xffffffff
    4d58:	ffffffff 	.word	0xffffffff
    4d5c:	ffffffff 	.word	0xffffffff
    4d60:	ffffffff 	.word	0xffffffff
    4d64:	ffffffff 	.word	0xffffffff
    4d68:	ffffffff 	.word	0xffffffff
    4d6c:	ffffffff 	.word	0xffffffff
    4d70:	ffffffff 	.word	0xffffffff
    4d74:	ffffffff 	.word	0xffffffff
    4d78:	ffffffff 	.word	0xffffffff
    4d7c:	ffffffff 	.word	0xffffffff
    4d80:	ffffffff 	.word	0xffffffff
    4d84:	ffffffff 	.word	0xffffffff
    4d88:	ffffffff 	.word	0xffffffff
    4d8c:	ffffffff 	.word	0xffffffff
    4d90:	ffffffff 	.word	0xffffffff
    4d94:	ffffffff 	.word	0xffffffff
    4d98:	ffffffff 	.word	0xffffffff
    4d9c:	ffffffff 	.word	0xffffffff
    4da0:	ffffffff 	.word	0xffffffff
    4da4:	ffffffff 	.word	0xffffffff
    4da8:	ffffffff 	.word	0xffffffff
    4dac:	ffffffff 	.word	0xffffffff
    4db0:	ffffffff 	.word	0xffffffff
    4db4:	ffffffff 	.word	0xffffffff
    4db8:	ffffffff 	.word	0xffffffff
    4dbc:	ffffffff 	.word	0xffffffff
    4dc0:	ffffffff 	.word	0xffffffff
    4dc4:	ffffffff 	.word	0xffffffff
    4dc8:	ffffffff 	.word	0xffffffff
    4dcc:	ffffffff 	.word	0xffffffff
    4dd0:	ffffffff 	.word	0xffffffff
    4dd4:	ffffffff 	.word	0xffffffff
    4dd8:	ffffffff 	.word	0xffffffff
    4ddc:	ffffffff 	.word	0xffffffff
    4de0:	ffffffff 	.word	0xffffffff
    4de4:	ffffffff 	.word	0xffffffff
    4de8:	ffffffff 	.word	0xffffffff
    4dec:	ffffffff 	.word	0xffffffff
    4df0:	ffffffff 	.word	0xffffffff
    4df4:	ffffffff 	.word	0xffffffff
    4df8:	ffffffff 	.word	0xffffffff
    4dfc:	ffffffff 	.word	0xffffffff
    4e00:	ffffffff 	.word	0xffffffff
    4e04:	ffffffff 	.word	0xffffffff
    4e08:	ffffffff 	.word	0xffffffff
    4e0c:	ffffffff 	.word	0xffffffff
    4e10:	ffffffff 	.word	0xffffffff
    4e14:	ffffffff 	.word	0xffffffff
    4e18:	ffffffff 	.word	0xffffffff
    4e1c:	ffffffff 	.word	0xffffffff
    4e20:	ffffffff 	.word	0xffffffff
    4e24:	ffffffff 	.word	0xffffffff
    4e28:	ffffffff 	.word	0xffffffff
    4e2c:	ffffffff 	.word	0xffffffff
    4e30:	ffffffff 	.word	0xffffffff
    4e34:	ffffffff 	.word	0xffffffff
    4e38:	ffffffff 	.word	0xffffffff
    4e3c:	ffffffff 	.word	0xffffffff
    4e40:	ffffffff 	.word	0xffffffff
    4e44:	ffffffff 	.word	0xffffffff
    4e48:	ffffffff 	.word	0xffffffff
    4e4c:	ffffffff 	.word	0xffffffff
    4e50:	ffffffff 	.word	0xffffffff
    4e54:	ffffffff 	.word	0xffffffff
    4e58:	ffffffff 	.word	0xffffffff
    4e5c:	ffffffff 	.word	0xffffffff
    4e60:	ffffffff 	.word	0xffffffff
    4e64:	ffffffff 	.word	0xffffffff
    4e68:	ffffffff 	.word	0xffffffff
    4e6c:	ffffffff 	.word	0xffffffff
    4e70:	ffffffff 	.word	0xffffffff
    4e74:	ffffffff 	.word	0xffffffff
    4e78:	ffffffff 	.word	0xffffffff
    4e7c:	ffffffff 	.word	0xffffffff
    4e80:	ffffffff 	.word	0xffffffff
    4e84:	ffffffff 	.word	0xffffffff
    4e88:	ffffffff 	.word	0xffffffff
    4e8c:	ffffffff 	.word	0xffffffff
    4e90:	ffffffff 	.word	0xffffffff
    4e94:	ffffffff 	.word	0xffffffff
    4e98:	ffffffff 	.word	0xffffffff
    4e9c:	ffffffff 	.word	0xffffffff
    4ea0:	ffffffff 	.word	0xffffffff
    4ea4:	ffffffff 	.word	0xffffffff
    4ea8:	ffffffff 	.word	0xffffffff
    4eac:	ffffffff 	.word	0xffffffff
    4eb0:	ffffffff 	.word	0xffffffff
    4eb4:	ffffffff 	.word	0xffffffff
    4eb8:	ffffffff 	.word	0xffffffff
    4ebc:	ffffffff 	.word	0xffffffff
    4ec0:	ffffffff 	.word	0xffffffff
    4ec4:	ffffffff 	.word	0xffffffff
    4ec8:	ffffffff 	.word	0xffffffff
    4ecc:	ffffffff 	.word	0xffffffff
    4ed0:	ffffffff 	.word	0xffffffff
    4ed4:	ffffffff 	.word	0xffffffff
    4ed8:	ffffffff 	.word	0xffffffff
    4edc:	ffffffff 	.word	0xffffffff
    4ee0:	ffffffff 	.word	0xffffffff
    4ee4:	ffffffff 	.word	0xffffffff
    4ee8:	ffffffff 	.word	0xffffffff
    4eec:	ffffffff 	.word	0xffffffff
    4ef0:	ffffffff 	.word	0xffffffff
    4ef4:	ffffffff 	.word	0xffffffff
    4ef8:	ffffffff 	.word	0xffffffff
    4efc:	ffffffff 	.word	0xffffffff
    4f00:	ffffffff 	.word	0xffffffff
    4f04:	ffffffff 	.word	0xffffffff
    4f08:	ffffffff 	.word	0xffffffff
    4f0c:	ffffffff 	.word	0xffffffff
    4f10:	ffffffff 	.word	0xffffffff
    4f14:	ffffffff 	.word	0xffffffff
    4f18:	ffffffff 	.word	0xffffffff
    4f1c:	ffffffff 	.word	0xffffffff
    4f20:	ffffffff 	.word	0xffffffff
    4f24:	ffffffff 	.word	0xffffffff
    4f28:	ffffffff 	.word	0xffffffff
    4f2c:	ffffffff 	.word	0xffffffff
    4f30:	ffffffff 	.word	0xffffffff
    4f34:	ffffffff 	.word	0xffffffff
    4f38:	ffffffff 	.word	0xffffffff
    4f3c:	ffffffff 	.word	0xffffffff
    4f40:	ffffffff 	.word	0xffffffff
    4f44:	ffffffff 	.word	0xffffffff
    4f48:	ffffffff 	.word	0xffffffff
    4f4c:	ffffffff 	.word	0xffffffff
    4f50:	ffffffff 	.word	0xffffffff
    4f54:	ffffffff 	.word	0xffffffff
    4f58:	ffffffff 	.word	0xffffffff
    4f5c:	ffffffff 	.word	0xffffffff
    4f60:	ffffffff 	.word	0xffffffff
    4f64:	ffffffff 	.word	0xffffffff
    4f68:	ffffffff 	.word	0xffffffff
    4f6c:	ffffffff 	.word	0xffffffff
    4f70:	ffffffff 	.word	0xffffffff
    4f74:	ffffffff 	.word	0xffffffff
    4f78:	ffffffff 	.word	0xffffffff
    4f7c:	ffffffff 	.word	0xffffffff
    4f80:	ffffffff 	.word	0xffffffff
    4f84:	ffffffff 	.word	0xffffffff
    4f88:	ffffffff 	.word	0xffffffff
    4f8c:	ffffffff 	.word	0xffffffff
    4f90:	ffffffff 	.word	0xffffffff
    4f94:	ffffffff 	.word	0xffffffff
    4f98:	ffffffff 	.word	0xffffffff
    4f9c:	ffffffff 	.word	0xffffffff
    4fa0:	ffffffff 	.word	0xffffffff
    4fa4:	ffffffff 	.word	0xffffffff
    4fa8:	ffffffff 	.word	0xffffffff
    4fac:	ffffffff 	.word	0xffffffff
    4fb0:	ffffffff 	.word	0xffffffff
    4fb4:	ffffffff 	.word	0xffffffff
    4fb8:	ffffffff 	.word	0xffffffff
    4fbc:	ffffffff 	.word	0xffffffff
    4fc0:	ffffffff 	.word	0xffffffff
    4fc4:	ffffffff 	.word	0xffffffff
    4fc8:	ffffffff 	.word	0xffffffff
    4fcc:	ffffffff 	.word	0xffffffff
    4fd0:	ffffffff 	.word	0xffffffff
    4fd4:	ffffffff 	.word	0xffffffff
    4fd8:	ffffffff 	.word	0xffffffff
    4fdc:	ffffffff 	.word	0xffffffff
    4fe0:	ffffffff 	.word	0xffffffff
    4fe4:	ffffffff 	.word	0xffffffff
    4fe8:	ffffffff 	.word	0xffffffff
    4fec:	ffffffff 	.word	0xffffffff
    4ff0:	ffffffff 	.word	0xffffffff
    4ff4:	ffffffff 	.word	0xffffffff
    4ff8:	ffffffff 	.word	0xffffffff
    4ffc:	ffffffff 	.word	0xffffffff
    5000:	ffffffff 	.word	0xffffffff
    5004:	ffffffff 	.word	0xffffffff
    5008:	ffffffff 	.word	0xffffffff
    500c:	ffffffff 	.word	0xffffffff
    5010:	ffffffff 	.word	0xffffffff
    5014:	ffffffff 	.word	0xffffffff
    5018:	ffffffff 	.word	0xffffffff
    501c:	ffffffff 	.word	0xffffffff
    5020:	ffffffff 	.word	0xffffffff
    5024:	ffffffff 	.word	0xffffffff
    5028:	ffffffff 	.word	0xffffffff
    502c:	ffffffff 	.word	0xffffffff
    5030:	ffffffff 	.word	0xffffffff
    5034:	ffffffff 	.word	0xffffffff
    5038:	ffffffff 	.word	0xffffffff
    503c:	ffffffff 	.word	0xffffffff
    5040:	ffffffff 	.word	0xffffffff
    5044:	ffffffff 	.word	0xffffffff
    5048:	ffffffff 	.word	0xffffffff
    504c:	ffffffff 	.word	0xffffffff
    5050:	ffffffff 	.word	0xffffffff
    5054:	ffffffff 	.word	0xffffffff
    5058:	ffffffff 	.word	0xffffffff
    505c:	ffffffff 	.word	0xffffffff
    5060:	ffffffff 	.word	0xffffffff
    5064:	ffffffff 	.word	0xffffffff
    5068:	ffffffff 	.word	0xffffffff
    506c:	ffffffff 	.word	0xffffffff
    5070:	ffffffff 	.word	0xffffffff
    5074:	ffffffff 	.word	0xffffffff
    5078:	ffffffff 	.word	0xffffffff
    507c:	ffffffff 	.word	0xffffffff
    5080:	ffffffff 	.word	0xffffffff
    5084:	ffffffff 	.word	0xffffffff
    5088:	ffffffff 	.word	0xffffffff
    508c:	ffffffff 	.word	0xffffffff
    5090:	ffffffff 	.word	0xffffffff
    5094:	ffffffff 	.word	0xffffffff
    5098:	ffffffff 	.word	0xffffffff
    509c:	ffffffff 	.word	0xffffffff
    50a0:	ffffffff 	.word	0xffffffff
    50a4:	ffffffff 	.word	0xffffffff
    50a8:	ffffffff 	.word	0xffffffff
    50ac:	ffffffff 	.word	0xffffffff
    50b0:	ffffffff 	.word	0xffffffff
    50b4:	ffffffff 	.word	0xffffffff
    50b8:	ffffffff 	.word	0xffffffff
    50bc:	ffffffff 	.word	0xffffffff
    50c0:	ffffffff 	.word	0xffffffff
    50c4:	ffffffff 	.word	0xffffffff
    50c8:	ffffffff 	.word	0xffffffff
    50cc:	ffffffff 	.word	0xffffffff
    50d0:	ffffffff 	.word	0xffffffff
    50d4:	ffffffff 	.word	0xffffffff
    50d8:	ffffffff 	.word	0xffffffff
    50dc:	ffffffff 	.word	0xffffffff
    50e0:	ffffffff 	.word	0xffffffff
    50e4:	ffffffff 	.word	0xffffffff
    50e8:	ffffffff 	.word	0xffffffff
    50ec:	ffffffff 	.word	0xffffffff
    50f0:	ffffffff 	.word	0xffffffff
    50f4:	ffffffff 	.word	0xffffffff
    50f8:	ffffffff 	.word	0xffffffff
    50fc:	ffffffff 	.word	0xffffffff
    5100:	ffffffff 	.word	0xffffffff
    5104:	ffffffff 	.word	0xffffffff
    5108:	ffffffff 	.word	0xffffffff
    510c:	ffffffff 	.word	0xffffffff
    5110:	ffffffff 	.word	0xffffffff
    5114:	ffffffff 	.word	0xffffffff
    5118:	ffffffff 	.word	0xffffffff
    511c:	ffffffff 	.word	0xffffffff
    5120:	ffffffff 	.word	0xffffffff
    5124:	ffffffff 	.word	0xffffffff
    5128:	ffffffff 	.word	0xffffffff
    512c:	ffffffff 	.word	0xffffffff
    5130:	ffffffff 	.word	0xffffffff
    5134:	ffffffff 	.word	0xffffffff
    5138:	ffffffff 	.word	0xffffffff
    513c:	ffffffff 	.word	0xffffffff
    5140:	ffffffff 	.word	0xffffffff
    5144:	ffffffff 	.word	0xffffffff
    5148:	ffffffff 	.word	0xffffffff
    514c:	ffffffff 	.word	0xffffffff
    5150:	ffffffff 	.word	0xffffffff
    5154:	ffffffff 	.word	0xffffffff
    5158:	ffffffff 	.word	0xffffffff
    515c:	ffffffff 	.word	0xffffffff
    5160:	ffffffff 	.word	0xffffffff
    5164:	ffffffff 	.word	0xffffffff
    5168:	ffffffff 	.word	0xffffffff
    516c:	ffffffff 	.word	0xffffffff
    5170:	ffffffff 	.word	0xffffffff
    5174:	ffffffff 	.word	0xffffffff
    5178:	ffffffff 	.word	0xffffffff
    517c:	ffffffff 	.word	0xffffffff
    5180:	ffffffff 	.word	0xffffffff
    5184:	ffffffff 	.word	0xffffffff
    5188:	ffffffff 	.word	0xffffffff
    518c:	ffffffff 	.word	0xffffffff
    5190:	ffffffff 	.word	0xffffffff
    5194:	ffffffff 	.word	0xffffffff
    5198:	ffffffff 	.word	0xffffffff
    519c:	ffffffff 	.word	0xffffffff
    51a0:	ffffffff 	.word	0xffffffff
    51a4:	ffffffff 	.word	0xffffffff
    51a8:	ffffffff 	.word	0xffffffff
    51ac:	ffffffff 	.word	0xffffffff
    51b0:	ffffffff 	.word	0xffffffff
    51b4:	ffffffff 	.word	0xffffffff
    51b8:	ffffffff 	.word	0xffffffff
    51bc:	ffffffff 	.word	0xffffffff
    51c0:	ffffffff 	.word	0xffffffff
    51c4:	ffffffff 	.word	0xffffffff
    51c8:	ffffffff 	.word	0xffffffff
    51cc:	ffffffff 	.word	0xffffffff
    51d0:	ffffffff 	.word	0xffffffff
    51d4:	ffffffff 	.word	0xffffffff
    51d8:	ffffffff 	.word	0xffffffff
    51dc:	ffffffff 	.word	0xffffffff
    51e0:	ffffffff 	.word	0xffffffff
    51e4:	ffffffff 	.word	0xffffffff
    51e8:	ffffffff 	.word	0xffffffff
    51ec:	ffffffff 	.word	0xffffffff
    51f0:	ffffffff 	.word	0xffffffff
    51f4:	ffffffff 	.word	0xffffffff
    51f8:	ffffffff 	.word	0xffffffff
    51fc:	ffffffff 	.word	0xffffffff
    5200:	ffffffff 	.word	0xffffffff
    5204:	ffffffff 	.word	0xffffffff
    5208:	ffffffff 	.word	0xffffffff
    520c:	ffffffff 	.word	0xffffffff
    5210:	ffffffff 	.word	0xffffffff
    5214:	ffffffff 	.word	0xffffffff
    5218:	ffffffff 	.word	0xffffffff
    521c:	ffffffff 	.word	0xffffffff
    5220:	ffffffff 	.word	0xffffffff
    5224:	ffffffff 	.word	0xffffffff
    5228:	ffffffff 	.word	0xffffffff
    522c:	ffffffff 	.word	0xffffffff
    5230:	ffffffff 	.word	0xffffffff
    5234:	ffffffff 	.word	0xffffffff
    5238:	ffffffff 	.word	0xffffffff
    523c:	ffffffff 	.word	0xffffffff
    5240:	ffffffff 	.word	0xffffffff
    5244:	ffffffff 	.word	0xffffffff
    5248:	ffffffff 	.word	0xffffffff
    524c:	ffffffff 	.word	0xffffffff
    5250:	ffffffff 	.word	0xffffffff
    5254:	ffffffff 	.word	0xffffffff
    5258:	ffffffff 	.word	0xffffffff
    525c:	ffffffff 	.word	0xffffffff
    5260:	ffffffff 	.word	0xffffffff
    5264:	ffffffff 	.word	0xffffffff
    5268:	ffffffff 	.word	0xffffffff
    526c:	ffffffff 	.word	0xffffffff
    5270:	ffffffff 	.word	0xffffffff
    5274:	ffffffff 	.word	0xffffffff
    5278:	ffffffff 	.word	0xffffffff
    527c:	ffffffff 	.word	0xffffffff
    5280:	ffffffff 	.word	0xffffffff
    5284:	ffffffff 	.word	0xffffffff
    5288:	ffffffff 	.word	0xffffffff
    528c:	ffffffff 	.word	0xffffffff
    5290:	ffffffff 	.word	0xffffffff
    5294:	ffffffff 	.word	0xffffffff
    5298:	ffffffff 	.word	0xffffffff
    529c:	ffffffff 	.word	0xffffffff
    52a0:	ffffffff 	.word	0xffffffff
    52a4:	ffffffff 	.word	0xffffffff
    52a8:	ffffffff 	.word	0xffffffff
    52ac:	ffffffff 	.word	0xffffffff
    52b0:	ffffffff 	.word	0xffffffff
    52b4:	ffffffff 	.word	0xffffffff
    52b8:	ffffffff 	.word	0xffffffff
    52bc:	ffffffff 	.word	0xffffffff
    52c0:	ffffffff 	.word	0xffffffff
    52c4:	ffffffff 	.word	0xffffffff
    52c8:	ffffffff 	.word	0xffffffff
    52cc:	ffffffff 	.word	0xffffffff
    52d0:	ffffffff 	.word	0xffffffff
    52d4:	ffffffff 	.word	0xffffffff
    52d8:	ffffffff 	.word	0xffffffff
    52dc:	ffffffff 	.word	0xffffffff
    52e0:	ffffffff 	.word	0xffffffff
    52e4:	ffffffff 	.word	0xffffffff
    52e8:	ffffffff 	.word	0xffffffff
    52ec:	ffffffff 	.word	0xffffffff
    52f0:	ffffffff 	.word	0xffffffff
    52f4:	ffffffff 	.word	0xffffffff
    52f8:	ffffffff 	.word	0xffffffff
    52fc:	ffffffff 	.word	0xffffffff
    5300:	ffffffff 	.word	0xffffffff
    5304:	ffffffff 	.word	0xffffffff
    5308:	ffffffff 	.word	0xffffffff
    530c:	ffffffff 	.word	0xffffffff
    5310:	ffffffff 	.word	0xffffffff
    5314:	ffffffff 	.word	0xffffffff
    5318:	ffffffff 	.word	0xffffffff
    531c:	ffffffff 	.word	0xffffffff
    5320:	ffffffff 	.word	0xffffffff
    5324:	ffffffff 	.word	0xffffffff
    5328:	ffffffff 	.word	0xffffffff
    532c:	ffffffff 	.word	0xffffffff
    5330:	ffffffff 	.word	0xffffffff
    5334:	ffffffff 	.word	0xffffffff
    5338:	ffffffff 	.word	0xffffffff
    533c:	ffffffff 	.word	0xffffffff
    5340:	ffffffff 	.word	0xffffffff
    5344:	ffffffff 	.word	0xffffffff
    5348:	ffffffff 	.word	0xffffffff
    534c:	ffffffff 	.word	0xffffffff
    5350:	ffffffff 	.word	0xffffffff
    5354:	ffffffff 	.word	0xffffffff
    5358:	ffffffff 	.word	0xffffffff
    535c:	ffffffff 	.word	0xffffffff
    5360:	ffffffff 	.word	0xffffffff
    5364:	ffffffff 	.word	0xffffffff
    5368:	ffffffff 	.word	0xffffffff
    536c:	ffffffff 	.word	0xffffffff
    5370:	ffffffff 	.word	0xffffffff
    5374:	ffffffff 	.word	0xffffffff
    5378:	ffffffff 	.word	0xffffffff
    537c:	ffffffff 	.word	0xffffffff
    5380:	ffffffff 	.word	0xffffffff
    5384:	ffffffff 	.word	0xffffffff
    5388:	ffffffff 	.word	0xffffffff
    538c:	ffffffff 	.word	0xffffffff
    5390:	ffffffff 	.word	0xffffffff
    5394:	ffffffff 	.word	0xffffffff
    5398:	ffffffff 	.word	0xffffffff
    539c:	ffffffff 	.word	0xffffffff
    53a0:	ffffffff 	.word	0xffffffff
    53a4:	ffffffff 	.word	0xffffffff
    53a8:	ffffffff 	.word	0xffffffff
    53ac:	ffffffff 	.word	0xffffffff
    53b0:	ffffffff 	.word	0xffffffff
    53b4:	ffffffff 	.word	0xffffffff
    53b8:	ffffffff 	.word	0xffffffff
    53bc:	ffffffff 	.word	0xffffffff
    53c0:	ffffffff 	.word	0xffffffff
    53c4:	ffffffff 	.word	0xffffffff
    53c8:	ffffffff 	.word	0xffffffff
    53cc:	ffffffff 	.word	0xffffffff
    53d0:	ffffffff 	.word	0xffffffff
    53d4:	ffffffff 	.word	0xffffffff
    53d8:	ffffffff 	.word	0xffffffff
    53dc:	ffffffff 	.word	0xffffffff
    53e0:	ffffffff 	.word	0xffffffff
    53e4:	ffffffff 	.word	0xffffffff
    53e8:	ffffffff 	.word	0xffffffff
    53ec:	ffffffff 	.word	0xffffffff
    53f0:	ffffffff 	.word	0xffffffff
    53f4:	ffffffff 	.word	0xffffffff
    53f8:	ffffffff 	.word	0xffffffff
    53fc:	ffffffff 	.word	0xffffffff
    5400:	ffffffff 	.word	0xffffffff
    5404:	ffffffff 	.word	0xffffffff
    5408:	ffffffff 	.word	0xffffffff
    540c:	ffffffff 	.word	0xffffffff
    5410:	ffffffff 	.word	0xffffffff
    5414:	ffffffff 	.word	0xffffffff
    5418:	ffffffff 	.word	0xffffffff
    541c:	ffffffff 	.word	0xffffffff
    5420:	ffffffff 	.word	0xffffffff
    5424:	ffffffff 	.word	0xffffffff
    5428:	ffffffff 	.word	0xffffffff
    542c:	ffffffff 	.word	0xffffffff
    5430:	ffffffff 	.word	0xffffffff
    5434:	ffffffff 	.word	0xffffffff
    5438:	ffffffff 	.word	0xffffffff
    543c:	ffffffff 	.word	0xffffffff
    5440:	ffffffff 	.word	0xffffffff
    5444:	ffffffff 	.word	0xffffffff
    5448:	ffffffff 	.word	0xffffffff
    544c:	ffffffff 	.word	0xffffffff
    5450:	ffffffff 	.word	0xffffffff
    5454:	ffffffff 	.word	0xffffffff
    5458:	ffffffff 	.word	0xffffffff
    545c:	ffffffff 	.word	0xffffffff
    5460:	ffffffff 	.word	0xffffffff
    5464:	ffffffff 	.word	0xffffffff
    5468:	ffffffff 	.word	0xffffffff
    546c:	ffffffff 	.word	0xffffffff
    5470:	ffffffff 	.word	0xffffffff
    5474:	ffffffff 	.word	0xffffffff
    5478:	ffffffff 	.word	0xffffffff
    547c:	ffffffff 	.word	0xffffffff
    5480:	ffffffff 	.word	0xffffffff
    5484:	ffffffff 	.word	0xffffffff
    5488:	ffffffff 	.word	0xffffffff
    548c:	ffffffff 	.word	0xffffffff
    5490:	ffffffff 	.word	0xffffffff
    5494:	ffffffff 	.word	0xffffffff
    5498:	ffffffff 	.word	0xffffffff
    549c:	ffffffff 	.word	0xffffffff
    54a0:	ffffffff 	.word	0xffffffff
    54a4:	ffffffff 	.word	0xffffffff
    54a8:	ffffffff 	.word	0xffffffff
    54ac:	ffffffff 	.word	0xffffffff
    54b0:	ffffffff 	.word	0xffffffff
    54b4:	ffffffff 	.word	0xffffffff
    54b8:	ffffffff 	.word	0xffffffff
    54bc:	ffffffff 	.word	0xffffffff
    54c0:	ffffffff 	.word	0xffffffff
    54c4:	ffffffff 	.word	0xffffffff
    54c8:	ffffffff 	.word	0xffffffff
    54cc:	ffffffff 	.word	0xffffffff
    54d0:	ffffffff 	.word	0xffffffff
    54d4:	ffffffff 	.word	0xffffffff
    54d8:	ffffffff 	.word	0xffffffff
    54dc:	ffffffff 	.word	0xffffffff
    54e0:	ffffffff 	.word	0xffffffff
    54e4:	ffffffff 	.word	0xffffffff
    54e8:	ffffffff 	.word	0xffffffff
    54ec:	ffffffff 	.word	0xffffffff
    54f0:	ffffffff 	.word	0xffffffff
    54f4:	ffffffff 	.word	0xffffffff
    54f8:	ffffffff 	.word	0xffffffff
    54fc:	ffffffff 	.word	0xffffffff
    5500:	ffffffff 	.word	0xffffffff
    5504:	ffffffff 	.word	0xffffffff
    5508:	ffffffff 	.word	0xffffffff
    550c:	ffffffff 	.word	0xffffffff
    5510:	ffffffff 	.word	0xffffffff
    5514:	ffffffff 	.word	0xffffffff
    5518:	ffffffff 	.word	0xffffffff
    551c:	ffffffff 	.word	0xffffffff
    5520:	ffffffff 	.word	0xffffffff
    5524:	ffffffff 	.word	0xffffffff
    5528:	ffffffff 	.word	0xffffffff
    552c:	ffffffff 	.word	0xffffffff
    5530:	ffffffff 	.word	0xffffffff
    5534:	ffffffff 	.word	0xffffffff
    5538:	ffffffff 	.word	0xffffffff
    553c:	ffffffff 	.word	0xffffffff
    5540:	ffffffff 	.word	0xffffffff
    5544:	ffffffff 	.word	0xffffffff
    5548:	ffffffff 	.word	0xffffffff
    554c:	ffffffff 	.word	0xffffffff
    5550:	ffffffff 	.word	0xffffffff
    5554:	ffffffff 	.word	0xffffffff
    5558:	ffffffff 	.word	0xffffffff
    555c:	ffffffff 	.word	0xffffffff
    5560:	ffffffff 	.word	0xffffffff
    5564:	ffffffff 	.word	0xffffffff
    5568:	ffffffff 	.word	0xffffffff
    556c:	ffffffff 	.word	0xffffffff
    5570:	ffffffff 	.word	0xffffffff
    5574:	ffffffff 	.word	0xffffffff
    5578:	ffffffff 	.word	0xffffffff
    557c:	ffffffff 	.word	0xffffffff
    5580:	ffffffff 	.word	0xffffffff
    5584:	ffffffff 	.word	0xffffffff
    5588:	ffffffff 	.word	0xffffffff
    558c:	ffffffff 	.word	0xffffffff
    5590:	ffffffff 	.word	0xffffffff
    5594:	ffffffff 	.word	0xffffffff
    5598:	ffffffff 	.word	0xffffffff
    559c:	ffffffff 	.word	0xffffffff
    55a0:	ffffffff 	.word	0xffffffff
    55a4:	ffffffff 	.word	0xffffffff
    55a8:	ffffffff 	.word	0xffffffff
    55ac:	ffffffff 	.word	0xffffffff
    55b0:	ffffffff 	.word	0xffffffff
    55b4:	ffffffff 	.word	0xffffffff
    55b8:	ffffffff 	.word	0xffffffff
    55bc:	ffffffff 	.word	0xffffffff
    55c0:	ffffffff 	.word	0xffffffff
    55c4:	ffffffff 	.word	0xffffffff
    55c8:	ffffffff 	.word	0xffffffff
    55cc:	ffffffff 	.word	0xffffffff
    55d0:	ffffffff 	.word	0xffffffff
    55d4:	ffffffff 	.word	0xffffffff
    55d8:	ffffffff 	.word	0xffffffff
    55dc:	ffffffff 	.word	0xffffffff
    55e0:	ffffffff 	.word	0xffffffff
    55e4:	ffffffff 	.word	0xffffffff
    55e8:	ffffffff 	.word	0xffffffff
    55ec:	ffffffff 	.word	0xffffffff
    55f0:	ffffffff 	.word	0xffffffff
    55f4:	ffffffff 	.word	0xffffffff
    55f8:	ffffffff 	.word	0xffffffff
    55fc:	ffffffff 	.word	0xffffffff
    5600:	ffffffff 	.word	0xffffffff
    5604:	ffffffff 	.word	0xffffffff
    5608:	ffffffff 	.word	0xffffffff
    560c:	ffffffff 	.word	0xffffffff
    5610:	ffffffff 	.word	0xffffffff
    5614:	ffffffff 	.word	0xffffffff
    5618:	ffffffff 	.word	0xffffffff
    561c:	ffffffff 	.word	0xffffffff
    5620:	ffffffff 	.word	0xffffffff
    5624:	ffffffff 	.word	0xffffffff
    5628:	ffffffff 	.word	0xffffffff
    562c:	ffffffff 	.word	0xffffffff
    5630:	ffffffff 	.word	0xffffffff
    5634:	ffffffff 	.word	0xffffffff
    5638:	ffffffff 	.word	0xffffffff
    563c:	ffffffff 	.word	0xffffffff
    5640:	ffffffff 	.word	0xffffffff
    5644:	ffffffff 	.word	0xffffffff
    5648:	ffffffff 	.word	0xffffffff
    564c:	ffffffff 	.word	0xffffffff
    5650:	ffffffff 	.word	0xffffffff
    5654:	ffffffff 	.word	0xffffffff
    5658:	ffffffff 	.word	0xffffffff
    565c:	ffffffff 	.word	0xffffffff
    5660:	ffffffff 	.word	0xffffffff
    5664:	ffffffff 	.word	0xffffffff
    5668:	ffffffff 	.word	0xffffffff
    566c:	ffffffff 	.word	0xffffffff
    5670:	ffffffff 	.word	0xffffffff
    5674:	ffffffff 	.word	0xffffffff
    5678:	ffffffff 	.word	0xffffffff
    567c:	ffffffff 	.word	0xffffffff
    5680:	ffffffff 	.word	0xffffffff
    5684:	ffffffff 	.word	0xffffffff
    5688:	ffffffff 	.word	0xffffffff
    568c:	ffffffff 	.word	0xffffffff
    5690:	ffffffff 	.word	0xffffffff
    5694:	ffffffff 	.word	0xffffffff
    5698:	ffffffff 	.word	0xffffffff
    569c:	ffffffff 	.word	0xffffffff
    56a0:	ffffffff 	.word	0xffffffff
    56a4:	ffffffff 	.word	0xffffffff
    56a8:	ffffffff 	.word	0xffffffff
    56ac:	ffffffff 	.word	0xffffffff
    56b0:	ffffffff 	.word	0xffffffff
    56b4:	ffffffff 	.word	0xffffffff
    56b8:	ffffffff 	.word	0xffffffff
    56bc:	ffffffff 	.word	0xffffffff
    56c0:	ffffffff 	.word	0xffffffff
    56c4:	ffffffff 	.word	0xffffffff
    56c8:	ffffffff 	.word	0xffffffff
    56cc:	ffffffff 	.word	0xffffffff
    56d0:	ffffffff 	.word	0xffffffff
    56d4:	ffffffff 	.word	0xffffffff
    56d8:	ffffffff 	.word	0xffffffff
    56dc:	ffffffff 	.word	0xffffffff
    56e0:	ffffffff 	.word	0xffffffff
    56e4:	ffffffff 	.word	0xffffffff
    56e8:	ffffffff 	.word	0xffffffff
    56ec:	ffffffff 	.word	0xffffffff
    56f0:	ffffffff 	.word	0xffffffff
    56f4:	ffffffff 	.word	0xffffffff
    56f8:	ffffffff 	.word	0xffffffff
    56fc:	ffffffff 	.word	0xffffffff
    5700:	ffffffff 	.word	0xffffffff
    5704:	ffffffff 	.word	0xffffffff
    5708:	ffffffff 	.word	0xffffffff
    570c:	ffffffff 	.word	0xffffffff
    5710:	ffffffff 	.word	0xffffffff
    5714:	ffffffff 	.word	0xffffffff
    5718:	ffffffff 	.word	0xffffffff
    571c:	ffffffff 	.word	0xffffffff
    5720:	ffffffff 	.word	0xffffffff
    5724:	ffffffff 	.word	0xffffffff
    5728:	ffffffff 	.word	0xffffffff
    572c:	ffffffff 	.word	0xffffffff
    5730:	ffffffff 	.word	0xffffffff
    5734:	ffffffff 	.word	0xffffffff
    5738:	ffffffff 	.word	0xffffffff
    573c:	ffffffff 	.word	0xffffffff
    5740:	ffffffff 	.word	0xffffffff
    5744:	ffffffff 	.word	0xffffffff
    5748:	ffffffff 	.word	0xffffffff
    574c:	ffffffff 	.word	0xffffffff
    5750:	ffffffff 	.word	0xffffffff
    5754:	ffffffff 	.word	0xffffffff
    5758:	ffffffff 	.word	0xffffffff
    575c:	ffffffff 	.word	0xffffffff
    5760:	ffffffff 	.word	0xffffffff
    5764:	ffffffff 	.word	0xffffffff
    5768:	ffffffff 	.word	0xffffffff
    576c:	ffffffff 	.word	0xffffffff
    5770:	ffffffff 	.word	0xffffffff
    5774:	ffffffff 	.word	0xffffffff
    5778:	ffffffff 	.word	0xffffffff
    577c:	ffffffff 	.word	0xffffffff
    5780:	ffffffff 	.word	0xffffffff
    5784:	ffffffff 	.word	0xffffffff
    5788:	ffffffff 	.word	0xffffffff
    578c:	ffffffff 	.word	0xffffffff
    5790:	ffffffff 	.word	0xffffffff
    5794:	ffffffff 	.word	0xffffffff
    5798:	ffffffff 	.word	0xffffffff
    579c:	ffffffff 	.word	0xffffffff
    57a0:	ffffffff 	.word	0xffffffff
    57a4:	ffffffff 	.word	0xffffffff
    57a8:	ffffffff 	.word	0xffffffff
    57ac:	ffffffff 	.word	0xffffffff
    57b0:	ffffffff 	.word	0xffffffff
    57b4:	ffffffff 	.word	0xffffffff
    57b8:	ffffffff 	.word	0xffffffff
    57bc:	ffffffff 	.word	0xffffffff
    57c0:	ffffffff 	.word	0xffffffff
    57c4:	ffffffff 	.word	0xffffffff
    57c8:	ffffffff 	.word	0xffffffff
    57cc:	ffffffff 	.word	0xffffffff
    57d0:	ffffffff 	.word	0xffffffff
    57d4:	ffffffff 	.word	0xffffffff
    57d8:	ffffffff 	.word	0xffffffff
    57dc:	ffffffff 	.word	0xffffffff
    57e0:	ffffffff 	.word	0xffffffff
    57e4:	ffffffff 	.word	0xffffffff
    57e8:	ffffffff 	.word	0xffffffff
    57ec:	ffffffff 	.word	0xffffffff
    57f0:	ffffffff 	.word	0xffffffff
    57f4:	ffffffff 	.word	0xffffffff
    57f8:	ffffffff 	.word	0xffffffff
    57fc:	ffffffff 	.word	0xffffffff
    5800:	ffffffff 	.word	0xffffffff
    5804:	ffffffff 	.word	0xffffffff
    5808:	ffffffff 	.word	0xffffffff
    580c:	ffffffff 	.word	0xffffffff
    5810:	ffffffff 	.word	0xffffffff
    5814:	ffffffff 	.word	0xffffffff
    5818:	ffffffff 	.word	0xffffffff
    581c:	ffffffff 	.word	0xffffffff
    5820:	ffffffff 	.word	0xffffffff
    5824:	ffffffff 	.word	0xffffffff
    5828:	ffffffff 	.word	0xffffffff
    582c:	ffffffff 	.word	0xffffffff
    5830:	ffffffff 	.word	0xffffffff
    5834:	ffffffff 	.word	0xffffffff
    5838:	ffffffff 	.word	0xffffffff
    583c:	ffffffff 	.word	0xffffffff
    5840:	ffffffff 	.word	0xffffffff
    5844:	ffffffff 	.word	0xffffffff
    5848:	ffffffff 	.word	0xffffffff
    584c:	ffffffff 	.word	0xffffffff
    5850:	ffffffff 	.word	0xffffffff
    5854:	ffffffff 	.word	0xffffffff
    5858:	ffffffff 	.word	0xffffffff
    585c:	ffffffff 	.word	0xffffffff
    5860:	ffffffff 	.word	0xffffffff
    5864:	ffffffff 	.word	0xffffffff
    5868:	ffffffff 	.word	0xffffffff
    586c:	ffffffff 	.word	0xffffffff
    5870:	ffffffff 	.word	0xffffffff
    5874:	ffffffff 	.word	0xffffffff
    5878:	ffffffff 	.word	0xffffffff
    587c:	ffffffff 	.word	0xffffffff
    5880:	ffffffff 	.word	0xffffffff
    5884:	ffffffff 	.word	0xffffffff
    5888:	ffffffff 	.word	0xffffffff
    588c:	ffffffff 	.word	0xffffffff
    5890:	ffffffff 	.word	0xffffffff
    5894:	ffffffff 	.word	0xffffffff
    5898:	ffffffff 	.word	0xffffffff
    589c:	ffffffff 	.word	0xffffffff
    58a0:	ffffffff 	.word	0xffffffff
    58a4:	ffffffff 	.word	0xffffffff
    58a8:	ffffffff 	.word	0xffffffff
    58ac:	ffffffff 	.word	0xffffffff
    58b0:	ffffffff 	.word	0xffffffff
    58b4:	ffffffff 	.word	0xffffffff
    58b8:	ffffffff 	.word	0xffffffff
    58bc:	ffffffff 	.word	0xffffffff
    58c0:	ffffffff 	.word	0xffffffff
    58c4:	ffffffff 	.word	0xffffffff
    58c8:	ffffffff 	.word	0xffffffff
    58cc:	ffffffff 	.word	0xffffffff
    58d0:	ffffffff 	.word	0xffffffff
    58d4:	ffffffff 	.word	0xffffffff
    58d8:	ffffffff 	.word	0xffffffff
    58dc:	ffffffff 	.word	0xffffffff
    58e0:	ffffffff 	.word	0xffffffff
    58e4:	ffffffff 	.word	0xffffffff
    58e8:	ffffffff 	.word	0xffffffff
    58ec:	ffffffff 	.word	0xffffffff
    58f0:	ffffffff 	.word	0xffffffff
    58f4:	ffffffff 	.word	0xffffffff
    58f8:	ffffffff 	.word	0xffffffff
    58fc:	ffffffff 	.word	0xffffffff
    5900:	ffffffff 	.word	0xffffffff
    5904:	ffffffff 	.word	0xffffffff
    5908:	ffffffff 	.word	0xffffffff
    590c:	ffffffff 	.word	0xffffffff
    5910:	ffffffff 	.word	0xffffffff
    5914:	ffffffff 	.word	0xffffffff
    5918:	ffffffff 	.word	0xffffffff
    591c:	ffffffff 	.word	0xffffffff
    5920:	ffffffff 	.word	0xffffffff
    5924:	ffffffff 	.word	0xffffffff
    5928:	ffffffff 	.word	0xffffffff
    592c:	ffffffff 	.word	0xffffffff
    5930:	ffffffff 	.word	0xffffffff
    5934:	ffffffff 	.word	0xffffffff
    5938:	ffffffff 	.word	0xffffffff
    593c:	ffffffff 	.word	0xffffffff
    5940:	ffffffff 	.word	0xffffffff
    5944:	ffffffff 	.word	0xffffffff
    5948:	ffffffff 	.word	0xffffffff
    594c:	ffffffff 	.word	0xffffffff
    5950:	ffffffff 	.word	0xffffffff
    5954:	ffffffff 	.word	0xffffffff
    5958:	ffffffff 	.word	0xffffffff
    595c:	ffffffff 	.word	0xffffffff
    5960:	ffffffff 	.word	0xffffffff
    5964:	ffffffff 	.word	0xffffffff
    5968:	ffffffff 	.word	0xffffffff
    596c:	ffffffff 	.word	0xffffffff
    5970:	ffffffff 	.word	0xffffffff
    5974:	ffffffff 	.word	0xffffffff
    5978:	ffffffff 	.word	0xffffffff
    597c:	ffffffff 	.word	0xffffffff
    5980:	ffffffff 	.word	0xffffffff
    5984:	ffffffff 	.word	0xffffffff
    5988:	ffffffff 	.word	0xffffffff
    598c:	ffffffff 	.word	0xffffffff
    5990:	ffffffff 	.word	0xffffffff
    5994:	ffffffff 	.word	0xffffffff
    5998:	ffffffff 	.word	0xffffffff
    599c:	ffffffff 	.word	0xffffffff
    59a0:	ffffffff 	.word	0xffffffff
    59a4:	ffffffff 	.word	0xffffffff
    59a8:	ffffffff 	.word	0xffffffff
    59ac:	ffffffff 	.word	0xffffffff
    59b0:	ffffffff 	.word	0xffffffff
    59b4:	ffffffff 	.word	0xffffffff
    59b8:	ffffffff 	.word	0xffffffff
    59bc:	ffffffff 	.word	0xffffffff
    59c0:	ffffffff 	.word	0xffffffff
    59c4:	ffffffff 	.word	0xffffffff
    59c8:	ffffffff 	.word	0xffffffff
    59cc:	ffffffff 	.word	0xffffffff
    59d0:	ffffffff 	.word	0xffffffff
    59d4:	ffffffff 	.word	0xffffffff
    59d8:	ffffffff 	.word	0xffffffff
    59dc:	ffffffff 	.word	0xffffffff
    59e0:	ffffffff 	.word	0xffffffff
    59e4:	ffffffff 	.word	0xffffffff
    59e8:	ffffffff 	.word	0xffffffff
    59ec:	ffffffff 	.word	0xffffffff
    59f0:	ffffffff 	.word	0xffffffff
    59f4:	ffffffff 	.word	0xffffffff
    59f8:	ffffffff 	.word	0xffffffff
    59fc:	ffffffff 	.word	0xffffffff
    5a00:	ffffffff 	.word	0xffffffff
    5a04:	ffffffff 	.word	0xffffffff
    5a08:	ffffffff 	.word	0xffffffff
    5a0c:	ffffffff 	.word	0xffffffff
    5a10:	ffffffff 	.word	0xffffffff
    5a14:	ffffffff 	.word	0xffffffff
    5a18:	ffffffff 	.word	0xffffffff
    5a1c:	ffffffff 	.word	0xffffffff
    5a20:	ffffffff 	.word	0xffffffff
    5a24:	ffffffff 	.word	0xffffffff
    5a28:	ffffffff 	.word	0xffffffff
    5a2c:	ffffffff 	.word	0xffffffff
    5a30:	ffffffff 	.word	0xffffffff
    5a34:	ffffffff 	.word	0xffffffff
    5a38:	ffffffff 	.word	0xffffffff
    5a3c:	ffffffff 	.word	0xffffffff
    5a40:	ffffffff 	.word	0xffffffff
    5a44:	ffffffff 	.word	0xffffffff
    5a48:	ffffffff 	.word	0xffffffff
    5a4c:	ffffffff 	.word	0xffffffff
    5a50:	ffffffff 	.word	0xffffffff
    5a54:	ffffffff 	.word	0xffffffff
    5a58:	ffffffff 	.word	0xffffffff
    5a5c:	ffffffff 	.word	0xffffffff
    5a60:	ffffffff 	.word	0xffffffff
    5a64:	ffffffff 	.word	0xffffffff
    5a68:	ffffffff 	.word	0xffffffff
    5a6c:	ffffffff 	.word	0xffffffff
    5a70:	ffffffff 	.word	0xffffffff
    5a74:	ffffffff 	.word	0xffffffff
    5a78:	ffffffff 	.word	0xffffffff
    5a7c:	ffffffff 	.word	0xffffffff
    5a80:	ffffffff 	.word	0xffffffff
    5a84:	ffffffff 	.word	0xffffffff
    5a88:	ffffffff 	.word	0xffffffff
    5a8c:	ffffffff 	.word	0xffffffff
    5a90:	ffffffff 	.word	0xffffffff
    5a94:	ffffffff 	.word	0xffffffff
    5a98:	ffffffff 	.word	0xffffffff
    5a9c:	ffffffff 	.word	0xffffffff
    5aa0:	ffffffff 	.word	0xffffffff
    5aa4:	ffffffff 	.word	0xffffffff
    5aa8:	ffffffff 	.word	0xffffffff
    5aac:	ffffffff 	.word	0xffffffff
    5ab0:	ffffffff 	.word	0xffffffff
    5ab4:	ffffffff 	.word	0xffffffff
    5ab8:	ffffffff 	.word	0xffffffff
    5abc:	ffffffff 	.word	0xffffffff
    5ac0:	ffffffff 	.word	0xffffffff
    5ac4:	ffffffff 	.word	0xffffffff
    5ac8:	ffffffff 	.word	0xffffffff
    5acc:	ffffffff 	.word	0xffffffff
    5ad0:	ffffffff 	.word	0xffffffff
    5ad4:	ffffffff 	.word	0xffffffff
    5ad8:	ffffffff 	.word	0xffffffff
    5adc:	ffffffff 	.word	0xffffffff
    5ae0:	ffffffff 	.word	0xffffffff
    5ae4:	ffffffff 	.word	0xffffffff
    5ae8:	ffffffff 	.word	0xffffffff
    5aec:	ffffffff 	.word	0xffffffff
    5af0:	ffffffff 	.word	0xffffffff
    5af4:	ffffffff 	.word	0xffffffff
    5af8:	ffffffff 	.word	0xffffffff
    5afc:	ffffffff 	.word	0xffffffff
    5b00:	ffffffff 	.word	0xffffffff
    5b04:	ffffffff 	.word	0xffffffff
    5b08:	ffffffff 	.word	0xffffffff
    5b0c:	ffffffff 	.word	0xffffffff
    5b10:	ffffffff 	.word	0xffffffff
    5b14:	ffffffff 	.word	0xffffffff
    5b18:	ffffffff 	.word	0xffffffff
    5b1c:	ffffffff 	.word	0xffffffff
    5b20:	ffffffff 	.word	0xffffffff
    5b24:	ffffffff 	.word	0xffffffff
    5b28:	ffffffff 	.word	0xffffffff
    5b2c:	ffffffff 	.word	0xffffffff
    5b30:	ffffffff 	.word	0xffffffff
    5b34:	ffffffff 	.word	0xffffffff
    5b38:	ffffffff 	.word	0xffffffff
    5b3c:	ffffffff 	.word	0xffffffff
    5b40:	ffffffff 	.word	0xffffffff
    5b44:	ffffffff 	.word	0xffffffff
    5b48:	ffffffff 	.word	0xffffffff
    5b4c:	ffffffff 	.word	0xffffffff
    5b50:	ffffffff 	.word	0xffffffff
    5b54:	ffffffff 	.word	0xffffffff
    5b58:	ffffffff 	.word	0xffffffff
    5b5c:	ffffffff 	.word	0xffffffff
    5b60:	ffffffff 	.word	0xffffffff
    5b64:	ffffffff 	.word	0xffffffff
    5b68:	ffffffff 	.word	0xffffffff
    5b6c:	ffffffff 	.word	0xffffffff
    5b70:	ffffffff 	.word	0xffffffff
    5b74:	ffffffff 	.word	0xffffffff
    5b78:	ffffffff 	.word	0xffffffff
    5b7c:	ffffffff 	.word	0xffffffff
    5b80:	ffffffff 	.word	0xffffffff
    5b84:	ffffffff 	.word	0xffffffff
    5b88:	ffffffff 	.word	0xffffffff
    5b8c:	ffffffff 	.word	0xffffffff
    5b90:	ffffffff 	.word	0xffffffff
    5b94:	ffffffff 	.word	0xffffffff
    5b98:	ffffffff 	.word	0xffffffff
    5b9c:	ffffffff 	.word	0xffffffff
    5ba0:	ffffffff 	.word	0xffffffff
    5ba4:	ffffffff 	.word	0xffffffff
    5ba8:	ffffffff 	.word	0xffffffff
    5bac:	ffffffff 	.word	0xffffffff
    5bb0:	ffffffff 	.word	0xffffffff
    5bb4:	ffffffff 	.word	0xffffffff
    5bb8:	ffffffff 	.word	0xffffffff
    5bbc:	ffffffff 	.word	0xffffffff
    5bc0:	ffffffff 	.word	0xffffffff
    5bc4:	ffffffff 	.word	0xffffffff
    5bc8:	ffffffff 	.word	0xffffffff
    5bcc:	ffffffff 	.word	0xffffffff
    5bd0:	ffffffff 	.word	0xffffffff
    5bd4:	ffffffff 	.word	0xffffffff
    5bd8:	ffffffff 	.word	0xffffffff
    5bdc:	ffffffff 	.word	0xffffffff
    5be0:	ffffffff 	.word	0xffffffff
    5be4:	ffffffff 	.word	0xffffffff
    5be8:	ffffffff 	.word	0xffffffff
    5bec:	ffffffff 	.word	0xffffffff
    5bf0:	ffffffff 	.word	0xffffffff
    5bf4:	ffffffff 	.word	0xffffffff
    5bf8:	ffffffff 	.word	0xffffffff
    5bfc:	ffffffff 	.word	0xffffffff
    5c00:	ffffffff 	.word	0xffffffff
    5c04:	ffffffff 	.word	0xffffffff
    5c08:	ffffffff 	.word	0xffffffff
    5c0c:	ffffffff 	.word	0xffffffff
    5c10:	ffffffff 	.word	0xffffffff
    5c14:	ffffffff 	.word	0xffffffff
    5c18:	ffffffff 	.word	0xffffffff
    5c1c:	ffffffff 	.word	0xffffffff
    5c20:	ffffffff 	.word	0xffffffff
    5c24:	ffffffff 	.word	0xffffffff
    5c28:	ffffffff 	.word	0xffffffff
    5c2c:	ffffffff 	.word	0xffffffff
    5c30:	ffffffff 	.word	0xffffffff
    5c34:	ffffffff 	.word	0xffffffff
    5c38:	ffffffff 	.word	0xffffffff
    5c3c:	ffffffff 	.word	0xffffffff
    5c40:	ffffffff 	.word	0xffffffff
    5c44:	ffffffff 	.word	0xffffffff
    5c48:	ffffffff 	.word	0xffffffff
    5c4c:	ffffffff 	.word	0xffffffff
    5c50:	ffffffff 	.word	0xffffffff
    5c54:	ffffffff 	.word	0xffffffff
    5c58:	ffffffff 	.word	0xffffffff
    5c5c:	ffffffff 	.word	0xffffffff
    5c60:	ffffffff 	.word	0xffffffff
    5c64:	ffffffff 	.word	0xffffffff
    5c68:	ffffffff 	.word	0xffffffff
    5c6c:	ffffffff 	.word	0xffffffff
    5c70:	ffffffff 	.word	0xffffffff
    5c74:	ffffffff 	.word	0xffffffff
    5c78:	ffffffff 	.word	0xffffffff
    5c7c:	ffffffff 	.word	0xffffffff
    5c80:	ffffffff 	.word	0xffffffff
    5c84:	ffffffff 	.word	0xffffffff
    5c88:	ffffffff 	.word	0xffffffff
    5c8c:	ffffffff 	.word	0xffffffff
    5c90:	ffffffff 	.word	0xffffffff
    5c94:	ffffffff 	.word	0xffffffff
    5c98:	ffffffff 	.word	0xffffffff
    5c9c:	ffffffff 	.word	0xffffffff
    5ca0:	ffffffff 	.word	0xffffffff
    5ca4:	ffffffff 	.word	0xffffffff
    5ca8:	ffffffff 	.word	0xffffffff
    5cac:	ffffffff 	.word	0xffffffff
    5cb0:	ffffffff 	.word	0xffffffff
    5cb4:	ffffffff 	.word	0xffffffff
    5cb8:	ffffffff 	.word	0xffffffff
    5cbc:	ffffffff 	.word	0xffffffff
    5cc0:	ffffffff 	.word	0xffffffff
    5cc4:	ffffffff 	.word	0xffffffff
    5cc8:	ffffffff 	.word	0xffffffff
    5ccc:	ffffffff 	.word	0xffffffff
    5cd0:	ffffffff 	.word	0xffffffff
    5cd4:	ffffffff 	.word	0xffffffff
    5cd8:	ffffffff 	.word	0xffffffff
    5cdc:	ffffffff 	.word	0xffffffff
    5ce0:	ffffffff 	.word	0xffffffff
    5ce4:	ffffffff 	.word	0xffffffff
    5ce8:	ffffffff 	.word	0xffffffff
    5cec:	ffffffff 	.word	0xffffffff
    5cf0:	ffffffff 	.word	0xffffffff
    5cf4:	ffffffff 	.word	0xffffffff
    5cf8:	ffffffff 	.word	0xffffffff
    5cfc:	ffffffff 	.word	0xffffffff
    5d00:	ffffffff 	.word	0xffffffff
    5d04:	ffffffff 	.word	0xffffffff
    5d08:	ffffffff 	.word	0xffffffff
    5d0c:	ffffffff 	.word	0xffffffff
    5d10:	ffffffff 	.word	0xffffffff
    5d14:	ffffffff 	.word	0xffffffff
    5d18:	ffffffff 	.word	0xffffffff
    5d1c:	ffffffff 	.word	0xffffffff
    5d20:	ffffffff 	.word	0xffffffff
    5d24:	ffffffff 	.word	0xffffffff
    5d28:	ffffffff 	.word	0xffffffff
    5d2c:	ffffffff 	.word	0xffffffff
    5d30:	ffffffff 	.word	0xffffffff
    5d34:	ffffffff 	.word	0xffffffff
    5d38:	ffffffff 	.word	0xffffffff
    5d3c:	ffffffff 	.word	0xffffffff
    5d40:	ffffffff 	.word	0xffffffff
    5d44:	ffffffff 	.word	0xffffffff
    5d48:	ffffffff 	.word	0xffffffff
    5d4c:	ffffffff 	.word	0xffffffff
    5d50:	ffffffff 	.word	0xffffffff
    5d54:	ffffffff 	.word	0xffffffff
    5d58:	ffffffff 	.word	0xffffffff
    5d5c:	ffffffff 	.word	0xffffffff
    5d60:	ffffffff 	.word	0xffffffff
    5d64:	ffffffff 	.word	0xffffffff
    5d68:	ffffffff 	.word	0xffffffff
    5d6c:	ffffffff 	.word	0xffffffff
    5d70:	ffffffff 	.word	0xffffffff
    5d74:	ffffffff 	.word	0xffffffff
    5d78:	ffffffff 	.word	0xffffffff
    5d7c:	ffffffff 	.word	0xffffffff
    5d80:	ffffffff 	.word	0xffffffff
    5d84:	ffffffff 	.word	0xffffffff
    5d88:	ffffffff 	.word	0xffffffff
    5d8c:	ffffffff 	.word	0xffffffff
    5d90:	ffffffff 	.word	0xffffffff
    5d94:	ffffffff 	.word	0xffffffff
    5d98:	ffffffff 	.word	0xffffffff
    5d9c:	ffffffff 	.word	0xffffffff
    5da0:	ffffffff 	.word	0xffffffff
    5da4:	ffffffff 	.word	0xffffffff
    5da8:	ffffffff 	.word	0xffffffff
    5dac:	ffffffff 	.word	0xffffffff
    5db0:	ffffffff 	.word	0xffffffff
    5db4:	ffffffff 	.word	0xffffffff
    5db8:	ffffffff 	.word	0xffffffff
    5dbc:	ffffffff 	.word	0xffffffff
    5dc0:	ffffffff 	.word	0xffffffff
    5dc4:	ffffffff 	.word	0xffffffff
    5dc8:	ffffffff 	.word	0xffffffff
    5dcc:	ffffffff 	.word	0xffffffff
    5dd0:	ffffffff 	.word	0xffffffff
    5dd4:	ffffffff 	.word	0xffffffff
    5dd8:	ffffffff 	.word	0xffffffff
    5ddc:	ffffffff 	.word	0xffffffff
    5de0:	ffffffff 	.word	0xffffffff
    5de4:	ffffffff 	.word	0xffffffff
    5de8:	ffffffff 	.word	0xffffffff
    5dec:	ffffffff 	.word	0xffffffff
    5df0:	ffffffff 	.word	0xffffffff
    5df4:	ffffffff 	.word	0xffffffff
    5df8:	ffffffff 	.word	0xffffffff
    5dfc:	ffffffff 	.word	0xffffffff
    5e00:	ffffffff 	.word	0xffffffff
    5e04:	ffffffff 	.word	0xffffffff
    5e08:	ffffffff 	.word	0xffffffff
    5e0c:	ffffffff 	.word	0xffffffff
    5e10:	ffffffff 	.word	0xffffffff
    5e14:	ffffffff 	.word	0xffffffff
    5e18:	ffffffff 	.word	0xffffffff
    5e1c:	ffffffff 	.word	0xffffffff
    5e20:	ffffffff 	.word	0xffffffff
    5e24:	ffffffff 	.word	0xffffffff
    5e28:	ffffffff 	.word	0xffffffff
    5e2c:	ffffffff 	.word	0xffffffff
    5e30:	ffffffff 	.word	0xffffffff
    5e34:	ffffffff 	.word	0xffffffff
    5e38:	ffffffff 	.word	0xffffffff
    5e3c:	ffffffff 	.word	0xffffffff
    5e40:	ffffffff 	.word	0xffffffff
    5e44:	ffffffff 	.word	0xffffffff
    5e48:	ffffffff 	.word	0xffffffff
    5e4c:	ffffffff 	.word	0xffffffff
    5e50:	ffffffff 	.word	0xffffffff
    5e54:	ffffffff 	.word	0xffffffff
    5e58:	ffffffff 	.word	0xffffffff
    5e5c:	ffffffff 	.word	0xffffffff
    5e60:	ffffffff 	.word	0xffffffff
    5e64:	ffffffff 	.word	0xffffffff
    5e68:	ffffffff 	.word	0xffffffff
    5e6c:	ffffffff 	.word	0xffffffff
    5e70:	ffffffff 	.word	0xffffffff
    5e74:	ffffffff 	.word	0xffffffff
    5e78:	ffffffff 	.word	0xffffffff
    5e7c:	ffffffff 	.word	0xffffffff
    5e80:	ffffffff 	.word	0xffffffff
    5e84:	ffffffff 	.word	0xffffffff
    5e88:	ffffffff 	.word	0xffffffff
    5e8c:	ffffffff 	.word	0xffffffff
    5e90:	ffffffff 	.word	0xffffffff
    5e94:	ffffffff 	.word	0xffffffff
    5e98:	ffffffff 	.word	0xffffffff
    5e9c:	ffffffff 	.word	0xffffffff
    5ea0:	ffffffff 	.word	0xffffffff
    5ea4:	ffffffff 	.word	0xffffffff
    5ea8:	ffffffff 	.word	0xffffffff
    5eac:	ffffffff 	.word	0xffffffff
    5eb0:	ffffffff 	.word	0xffffffff
    5eb4:	ffffffff 	.word	0xffffffff
    5eb8:	ffffffff 	.word	0xffffffff
    5ebc:	ffffffff 	.word	0xffffffff
    5ec0:	ffffffff 	.word	0xffffffff
    5ec4:	ffffffff 	.word	0xffffffff
    5ec8:	ffffffff 	.word	0xffffffff
    5ecc:	ffffffff 	.word	0xffffffff
    5ed0:	ffffffff 	.word	0xffffffff
    5ed4:	ffffffff 	.word	0xffffffff
    5ed8:	ffffffff 	.word	0xffffffff
    5edc:	ffffffff 	.word	0xffffffff
    5ee0:	ffffffff 	.word	0xffffffff
    5ee4:	ffffffff 	.word	0xffffffff
    5ee8:	ffffffff 	.word	0xffffffff
    5eec:	ffffffff 	.word	0xffffffff
    5ef0:	ffffffff 	.word	0xffffffff
    5ef4:	ffffffff 	.word	0xffffffff
    5ef8:	ffffffff 	.word	0xffffffff
    5efc:	ffffffff 	.word	0xffffffff
    5f00:	ffffffff 	.word	0xffffffff
    5f04:	ffffffff 	.word	0xffffffff
    5f08:	ffffffff 	.word	0xffffffff
    5f0c:	ffffffff 	.word	0xffffffff
    5f10:	ffffffff 	.word	0xffffffff
    5f14:	ffffffff 	.word	0xffffffff
    5f18:	ffffffff 	.word	0xffffffff
    5f1c:	ffffffff 	.word	0xffffffff
    5f20:	ffffffff 	.word	0xffffffff
    5f24:	ffffffff 	.word	0xffffffff
    5f28:	ffffffff 	.word	0xffffffff
    5f2c:	ffffffff 	.word	0xffffffff
    5f30:	ffffffff 	.word	0xffffffff
    5f34:	ffffffff 	.word	0xffffffff
    5f38:	ffffffff 	.word	0xffffffff
    5f3c:	ffffffff 	.word	0xffffffff
    5f40:	ffffffff 	.word	0xffffffff
    5f44:	ffffffff 	.word	0xffffffff
    5f48:	ffffffff 	.word	0xffffffff
    5f4c:	ffffffff 	.word	0xffffffff
    5f50:	ffffffff 	.word	0xffffffff
    5f54:	ffffffff 	.word	0xffffffff
    5f58:	ffffffff 	.word	0xffffffff
    5f5c:	ffffffff 	.word	0xffffffff
    5f60:	ffffffff 	.word	0xffffffff
    5f64:	ffffffff 	.word	0xffffffff
    5f68:	ffffffff 	.word	0xffffffff
    5f6c:	ffffffff 	.word	0xffffffff
    5f70:	ffffffff 	.word	0xffffffff
    5f74:	ffffffff 	.word	0xffffffff
    5f78:	ffffffff 	.word	0xffffffff
    5f7c:	ffffffff 	.word	0xffffffff
    5f80:	ffffffff 	.word	0xffffffff
    5f84:	ffffffff 	.word	0xffffffff
    5f88:	ffffffff 	.word	0xffffffff
    5f8c:	ffffffff 	.word	0xffffffff
    5f90:	ffffffff 	.word	0xffffffff
    5f94:	ffffffff 	.word	0xffffffff
    5f98:	ffffffff 	.word	0xffffffff
    5f9c:	ffffffff 	.word	0xffffffff
    5fa0:	ffffffff 	.word	0xffffffff
    5fa4:	ffffffff 	.word	0xffffffff
    5fa8:	ffffffff 	.word	0xffffffff
    5fac:	ffffffff 	.word	0xffffffff
    5fb0:	ffffffff 	.word	0xffffffff
    5fb4:	ffffffff 	.word	0xffffffff
    5fb8:	ffffffff 	.word	0xffffffff
    5fbc:	ffffffff 	.word	0xffffffff
    5fc0:	ffffffff 	.word	0xffffffff
    5fc4:	ffffffff 	.word	0xffffffff
    5fc8:	ffffffff 	.word	0xffffffff
    5fcc:	ffffffff 	.word	0xffffffff
    5fd0:	ffffffff 	.word	0xffffffff
    5fd4:	ffffffff 	.word	0xffffffff
    5fd8:	ffffffff 	.word	0xffffffff
    5fdc:	ffffffff 	.word	0xffffffff
    5fe0:	ffffffff 	.word	0xffffffff
    5fe4:	ffffffff 	.word	0xffffffff
    5fe8:	ffffffff 	.word	0xffffffff
    5fec:	ffffffff 	.word	0xffffffff
    5ff0:	ffffffff 	.word	0xffffffff
    5ff4:	ffffffff 	.word	0xffffffff
    5ff8:	ffffffff 	.word	0xffffffff
    5ffc:	ffffffff 	.word	0xffffffff
    6000:	ffffffff 	.word	0xffffffff
    6004:	ffffffff 	.word	0xffffffff
    6008:	ffffffff 	.word	0xffffffff
    600c:	ffffffff 	.word	0xffffffff
    6010:	ffffffff 	.word	0xffffffff
    6014:	ffffffff 	.word	0xffffffff
    6018:	ffffffff 	.word	0xffffffff
    601c:	ffffffff 	.word	0xffffffff
    6020:	ffffffff 	.word	0xffffffff
    6024:	ffffffff 	.word	0xffffffff
    6028:	ffffffff 	.word	0xffffffff
    602c:	ffffffff 	.word	0xffffffff
    6030:	ffffffff 	.word	0xffffffff
    6034:	ffffffff 	.word	0xffffffff
    6038:	ffffffff 	.word	0xffffffff
    603c:	ffffffff 	.word	0xffffffff
    6040:	ffffffff 	.word	0xffffffff
    6044:	ffffffff 	.word	0xffffffff
    6048:	ffffffff 	.word	0xffffffff
    604c:	ffffffff 	.word	0xffffffff
    6050:	ffffffff 	.word	0xffffffff
    6054:	ffffffff 	.word	0xffffffff
    6058:	ffffffff 	.word	0xffffffff
    605c:	ffffffff 	.word	0xffffffff
    6060:	ffffffff 	.word	0xffffffff
    6064:	ffffffff 	.word	0xffffffff
    6068:	ffffffff 	.word	0xffffffff
    606c:	ffffffff 	.word	0xffffffff
    6070:	ffffffff 	.word	0xffffffff
    6074:	ffffffff 	.word	0xffffffff
    6078:	ffffffff 	.word	0xffffffff
    607c:	ffffffff 	.word	0xffffffff
    6080:	ffffffff 	.word	0xffffffff
    6084:	ffffffff 	.word	0xffffffff
    6088:	ffffffff 	.word	0xffffffff
    608c:	ffffffff 	.word	0xffffffff
    6090:	ffffffff 	.word	0xffffffff
    6094:	ffffffff 	.word	0xffffffff
    6098:	ffffffff 	.word	0xffffffff
    609c:	ffffffff 	.word	0xffffffff
    60a0:	ffffffff 	.word	0xffffffff
    60a4:	ffffffff 	.word	0xffffffff
    60a8:	ffffffff 	.word	0xffffffff
    60ac:	ffffffff 	.word	0xffffffff
    60b0:	ffffffff 	.word	0xffffffff
    60b4:	ffffffff 	.word	0xffffffff
    60b8:	ffffffff 	.word	0xffffffff
    60bc:	ffffffff 	.word	0xffffffff
    60c0:	ffffffff 	.word	0xffffffff
    60c4:	ffffffff 	.word	0xffffffff
    60c8:	ffffffff 	.word	0xffffffff
    60cc:	ffffffff 	.word	0xffffffff
    60d0:	ffffffff 	.word	0xffffffff
    60d4:	ffffffff 	.word	0xffffffff
    60d8:	ffffffff 	.word	0xffffffff
    60dc:	ffffffff 	.word	0xffffffff
    60e0:	ffffffff 	.word	0xffffffff
    60e4:	ffffffff 	.word	0xffffffff
    60e8:	ffffffff 	.word	0xffffffff
    60ec:	ffffffff 	.word	0xffffffff
    60f0:	ffffffff 	.word	0xffffffff
    60f4:	ffffffff 	.word	0xffffffff
    60f8:	ffffffff 	.word	0xffffffff
    60fc:	ffffffff 	.word	0xffffffff

00006100 <pds_ff_PDS_MYINDEX_ID>:
    6100:	00010009 2000203c 00000000 00000000     ....< . ........

00006110 <pds_ff_PDS_ROLE_ID>:
    6110:	00010008 20002124 00000000 00000000     ....$!. ........

00006120 <pds_ff_PDS_EDC_ID>:
    6120:	00010007 200003f2 00000000 00000000     ....... ........

00006130 <pds_ff_PDS_CONNECTION_TABLE_ID>:
    6130:	01400006 200022a8 00000000 00000000     ..@..". ........

00006140 <pds_ff_PDS_CONNECTION_MODE_ID>:
    6140:	00010005 2000000b 00000000 00000000     ....... ........

00006150 <pds_ff_PDS_CURRENT_CHANNEL_ID>:
    6150:	00010004 2000000d 00000000 00000000     ....... ........

00006160 <pds_ff_PDS_LONGADDR_ID>:
    6160:	00080003 20000010 00000000 00000000     ....... ........

00006170 <pds_ff_PDS_PANID_ID>:
    6170:	00020002 20002044 00000000 00000000     ....D . ........

00006180 <pds_ff_PDS_OUTGOING_FRAME_COUNTER_ID>:
    6180:	00040001 20001df8 00000000 00000000     ....... ........

00006190 <MiWiFullParamsDirDescr>:
    6190:	00013860 40010009                       `8.....@

00006198 <__do_global_dtors_aux>:
    6198:	b510      	push	{r4, lr}
    619a:	4c06      	ldr	r4, [pc, #24]	; (61b4 <__do_global_dtors_aux+0x1c>)
    619c:	7823      	ldrb	r3, [r4, #0]
    619e:	2b00      	cmp	r3, #0
    61a0:	d107      	bne.n	61b2 <__do_global_dtors_aux+0x1a>
    61a2:	4b05      	ldr	r3, [pc, #20]	; (61b8 <__do_global_dtors_aux+0x20>)
    61a4:	2b00      	cmp	r3, #0
    61a6:	d002      	beq.n	61ae <__do_global_dtors_aux+0x16>
    61a8:	4804      	ldr	r0, [pc, #16]	; (61bc <__do_global_dtors_aux+0x24>)
    61aa:	e000      	b.n	61ae <__do_global_dtors_aux+0x16>
    61ac:	bf00      	nop
    61ae:	2301      	movs	r3, #1
    61b0:	7023      	strb	r3, [r4, #0]
    61b2:	bd10      	pop	{r4, pc}
    61b4:	20000098 	.word	0x20000098
    61b8:	00000000 	.word	0x00000000
    61bc:	00013fa0 	.word	0x00013fa0

000061c0 <frame_dummy>:
    61c0:	4b08      	ldr	r3, [pc, #32]	; (61e4 <frame_dummy+0x24>)
    61c2:	b510      	push	{r4, lr}
    61c4:	2b00      	cmp	r3, #0
    61c6:	d003      	beq.n	61d0 <frame_dummy+0x10>
    61c8:	4907      	ldr	r1, [pc, #28]	; (61e8 <frame_dummy+0x28>)
    61ca:	4808      	ldr	r0, [pc, #32]	; (61ec <frame_dummy+0x2c>)
    61cc:	e000      	b.n	61d0 <frame_dummy+0x10>
    61ce:	bf00      	nop
    61d0:	4807      	ldr	r0, [pc, #28]	; (61f0 <frame_dummy+0x30>)
    61d2:	6803      	ldr	r3, [r0, #0]
    61d4:	2b00      	cmp	r3, #0
    61d6:	d100      	bne.n	61da <frame_dummy+0x1a>
    61d8:	bd10      	pop	{r4, pc}
    61da:	4b06      	ldr	r3, [pc, #24]	; (61f4 <frame_dummy+0x34>)
    61dc:	2b00      	cmp	r3, #0
    61de:	d0fb      	beq.n	61d8 <frame_dummy+0x18>
    61e0:	4798      	blx	r3
    61e2:	e7f9      	b.n	61d8 <frame_dummy+0x18>
    61e4:	00000000 	.word	0x00000000
    61e8:	2000009c 	.word	0x2000009c
    61ec:	00013fa0 	.word	0x00013fa0
    61f0:	00013fa0 	.word	0x00013fa0
    61f4:	00000000 	.word	0x00000000

000061f8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    61f8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    61fa:	2000      	movs	r0, #0
    61fc:	4b08      	ldr	r3, [pc, #32]	; (6220 <delay_init+0x28>)
    61fe:	4798      	blx	r3
    6200:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    6202:	4c08      	ldr	r4, [pc, #32]	; (6224 <delay_init+0x2c>)
    6204:	21fa      	movs	r1, #250	; 0xfa
    6206:	0089      	lsls	r1, r1, #2
    6208:	47a0      	blx	r4
    620a:	4b07      	ldr	r3, [pc, #28]	; (6228 <delay_init+0x30>)
    620c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    620e:	4907      	ldr	r1, [pc, #28]	; (622c <delay_init+0x34>)
    6210:	0028      	movs	r0, r5
    6212:	47a0      	blx	r4
    6214:	4b06      	ldr	r3, [pc, #24]	; (6230 <delay_init+0x38>)
    6216:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    6218:	2205      	movs	r2, #5
    621a:	4b06      	ldr	r3, [pc, #24]	; (6234 <delay_init+0x3c>)
    621c:	601a      	str	r2, [r3, #0]
}
    621e:	bd70      	pop	{r4, r5, r6, pc}
    6220:	0000847d 	.word	0x0000847d
    6224:	0000f53d 	.word	0x0000f53d
    6228:	20000000 	.word	0x20000000
    622c:	000f4240 	.word	0x000f4240
    6230:	20000004 	.word	0x20000004
    6234:	e000e010 	.word	0xe000e010

00006238 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    6238:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    623a:	4b08      	ldr	r3, [pc, #32]	; (625c <delay_cycles_us+0x24>)
    623c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    623e:	4a08      	ldr	r2, [pc, #32]	; (6260 <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    6240:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6242:	2180      	movs	r1, #128	; 0x80
    6244:	0249      	lsls	r1, r1, #9
	while (n--) {
    6246:	3801      	subs	r0, #1
    6248:	d307      	bcc.n	625a <delay_cycles_us+0x22>
	if (n > 0) {
    624a:	2c00      	cmp	r4, #0
    624c:	d0fb      	beq.n	6246 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    624e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    6250:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6252:	6813      	ldr	r3, [r2, #0]
    6254:	420b      	tst	r3, r1
    6256:	d0fc      	beq.n	6252 <delay_cycles_us+0x1a>
    6258:	e7f5      	b.n	6246 <delay_cycles_us+0xe>
	}
}
    625a:	bd30      	pop	{r4, r5, pc}
    625c:	20000004 	.word	0x20000004
    6260:	e000e010 	.word	0xe000e010

00006264 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    6264:	4b0c      	ldr	r3, [pc, #48]	; (6298 <cpu_irq_enter_critical+0x34>)
    6266:	681b      	ldr	r3, [r3, #0]
    6268:	2b00      	cmp	r3, #0
    626a:	d106      	bne.n	627a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    626c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    6270:	2b00      	cmp	r3, #0
    6272:	d007      	beq.n	6284 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6274:	2200      	movs	r2, #0
    6276:	4b09      	ldr	r3, [pc, #36]	; (629c <cpu_irq_enter_critical+0x38>)
    6278:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    627a:	4a07      	ldr	r2, [pc, #28]	; (6298 <cpu_irq_enter_critical+0x34>)
    627c:	6813      	ldr	r3, [r2, #0]
    627e:	3301      	adds	r3, #1
    6280:	6013      	str	r3, [r2, #0]
}
    6282:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    6284:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6286:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    628a:	2200      	movs	r2, #0
    628c:	4b04      	ldr	r3, [pc, #16]	; (62a0 <cpu_irq_enter_critical+0x3c>)
    628e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6290:	3201      	adds	r2, #1
    6292:	4b02      	ldr	r3, [pc, #8]	; (629c <cpu_irq_enter_critical+0x38>)
    6294:	701a      	strb	r2, [r3, #0]
    6296:	e7f0      	b.n	627a <cpu_irq_enter_critical+0x16>
    6298:	200000b4 	.word	0x200000b4
    629c:	200000b8 	.word	0x200000b8
    62a0:	20000008 	.word	0x20000008

000062a4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    62a4:	4b08      	ldr	r3, [pc, #32]	; (62c8 <cpu_irq_leave_critical+0x24>)
    62a6:	681a      	ldr	r2, [r3, #0]
    62a8:	3a01      	subs	r2, #1
    62aa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    62ac:	681b      	ldr	r3, [r3, #0]
    62ae:	2b00      	cmp	r3, #0
    62b0:	d109      	bne.n	62c6 <cpu_irq_leave_critical+0x22>
    62b2:	4b06      	ldr	r3, [pc, #24]	; (62cc <cpu_irq_leave_critical+0x28>)
    62b4:	781b      	ldrb	r3, [r3, #0]
    62b6:	2b00      	cmp	r3, #0
    62b8:	d005      	beq.n	62c6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    62ba:	2201      	movs	r2, #1
    62bc:	4b04      	ldr	r3, [pc, #16]	; (62d0 <cpu_irq_leave_critical+0x2c>)
    62be:	701a      	strb	r2, [r3, #0]
    62c0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    62c4:	b662      	cpsie	i
	}
}
    62c6:	4770      	bx	lr
    62c8:	200000b4 	.word	0x200000b4
    62cc:	200000b8 	.word	0x200000b8
    62d0:	20000008 	.word	0x20000008

000062d4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    62d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    62d6:	46ce      	mov	lr, r9
    62d8:	4647      	mov	r7, r8
    62da:	b580      	push	{r7, lr}
    62dc:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    62de:	ac01      	add	r4, sp, #4
    62e0:	2601      	movs	r6, #1
    62e2:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    62e4:	2300      	movs	r3, #0
    62e6:	4698      	mov	r8, r3
    62e8:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    62ea:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    62ec:	0021      	movs	r1, r4
    62ee:	201b      	movs	r0, #27
    62f0:	4d27      	ldr	r5, [pc, #156]	; (6390 <system_board_init+0xbc>)
    62f2:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    62f4:	4b27      	ldr	r3, [pc, #156]	; (6394 <system_board_init+0xc0>)
    62f6:	4699      	mov	r9, r3
    62f8:	2380      	movs	r3, #128	; 0x80
    62fa:	051b      	lsls	r3, r3, #20
    62fc:	464a      	mov	r2, r9
    62fe:	6193      	str	r3, [r2, #24]
	//pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
	//port_pin_set_config(LED_1_PIN, &pin_conf);
	//port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6300:	4643      	mov	r3, r8
    6302:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    6304:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    6306:	0021      	movs	r1, r4
    6308:	201c      	movs	r0, #28
    630a:	47a8      	blx	r5
	
	/*
	Added two GPIO for TSS demo, Diffin-2021-7-27
	*/
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    630c:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(GPIO_0, &pin_conf);
    630e:	0021      	movs	r1, r4
    6310:	2006      	movs	r0, #6
    6312:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
    6314:	2340      	movs	r3, #64	; 0x40
    6316:	464a      	mov	r2, r9
    6318:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(GPIO_0, GPIO_LOW);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    631a:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(GPIO_1, &pin_conf);
    631c:	0021      	movs	r1, r4
    631e:	2007      	movs	r0, #7
    6320:	47a8      	blx	r5
    6322:	2780      	movs	r7, #128	; 0x80
    6324:	464b      	mov	r3, r9
    6326:	615f      	str	r7, [r3, #20]
	config->input_pull = PORT_PIN_PULL_UP;
    6328:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    632a:	4643      	mov	r3, r8
    632c:	70a3      	strb	r3, [r4, #2]
	port_pin_set_output_level(GPIO_1, GPIO_LOW);
	
#ifdef CONF_BOARD_AT86RFX
	port_get_config_defaults(&pin_conf);
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    632e:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_SCK, &pin_conf);
    6330:	0021      	movs	r1, r4
    6332:	2052      	movs	r0, #82	; 0x52
    6334:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_MOSI, &pin_conf);
    6336:	0021      	movs	r1, r4
    6338:	203e      	movs	r0, #62	; 0x3e
    633a:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SPI_CS, &pin_conf);
    633c:	0021      	movs	r1, r4
    633e:	203f      	movs	r0, #63	; 0x3f
    6340:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_RST_PIN, &pin_conf);
    6342:	0021      	movs	r1, r4
    6344:	202f      	movs	r0, #47	; 0x2f
    6346:	47a8      	blx	r5
	port_pin_set_config(AT86RFX_SLP_PIN, &pin_conf);
    6348:	0021      	movs	r1, r4
    634a:	2014      	movs	r0, #20
    634c:	47a8      	blx	r5
		port_base->OUTSET.reg = pin_mask;
    634e:	2280      	movs	r2, #128	; 0x80
    6350:	02d2      	lsls	r2, r2, #11
    6352:	4b11      	ldr	r3, [pc, #68]	; (6398 <system_board_init+0xc4>)
    6354:	619a      	str	r2, [r3, #24]
    6356:	444f      	add	r7, r9
    6358:	2280      	movs	r2, #128	; 0x80
    635a:	05d2      	lsls	r2, r2, #23
    635c:	61ba      	str	r2, [r7, #24]
    635e:	2280      	movs	r2, #128	; 0x80
    6360:	0612      	lsls	r2, r2, #24
    6362:	61ba      	str	r2, [r7, #24]
    6364:	2680      	movs	r6, #128	; 0x80
    6366:	0236      	lsls	r6, r6, #8
    6368:	61be      	str	r6, [r7, #24]
    636a:	2380      	movs	r3, #128	; 0x80
    636c:	035b      	lsls	r3, r3, #13
    636e:	464a      	mov	r2, r9
    6370:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(AT86RFX_SPI_SCK, true);
	port_pin_set_output_level(AT86RFX_SPI_MOSI, true);
	port_pin_set_output_level(AT86RFX_SPI_CS, true);
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    6372:	4643      	mov	r3, r8
    6374:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
    6376:	0021      	movs	r1, r4
    6378:	2053      	movs	r0, #83	; 0x53
    637a:	47a8      	blx	r5
	
	/* SAMR30 Antenna Diversity Configuration */

	MCLK->APBCMASK.reg |= (1<<MCLK_APBCMASK_RFCTRL_Pos);
    637c:	4b07      	ldr	r3, [pc, #28]	; (639c <system_board_init+0xc8>)
    637e:	69da      	ldr	r2, [r3, #28]
    6380:	4316      	orrs	r6, r2
    6382:	61de      	str	r6, [r3, #28]
// 	
// 	config_pinmux.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT;	
// 	system_pinmux_pin_set_config(PIN_RFCTRL1, &config_pinmux);
// 	system_pinmux_pin_set_config(PIN_RFCTRL2, &config_pinmux);
 #endif	
}
    6384:	b003      	add	sp, #12
    6386:	bc0c      	pop	{r2, r3}
    6388:	4690      	mov	r8, r2
    638a:	4699      	mov	r9, r3
    638c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    638e:	46c0      	nop			; (mov r8, r8)
    6390:	00006a99 	.word	0x00006a99
    6394:	40002800 	.word	0x40002800
    6398:	40002900 	.word	0x40002900
    639c:	40000400 	.word	0x40000400

000063a0 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
    63a0:	b510      	push	{r4, lr}
    63a2:	b08e      	sub	sp, #56	; 0x38
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    63a4:	aa01      	add	r2, sp, #4
    63a6:	2364      	movs	r3, #100	; 0x64
    63a8:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    63aa:	4b1d      	ldr	r3, [pc, #116]	; (6420 <at30tse_init+0x80>)
    63ac:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    63ae:	2300      	movs	r3, #0
    63b0:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    63b2:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    63b4:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    63b6:	2180      	movs	r1, #128	; 0x80
    63b8:	0389      	lsls	r1, r1, #14
    63ba:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    63bc:	2101      	movs	r1, #1
    63be:	4249      	negs	r1, r1
    63c0:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    63c2:	3125      	adds	r1, #37	; 0x25
    63c4:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    63c6:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    63c8:	3108      	adds	r1, #8
    63ca:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    63cc:	3101      	adds	r1, #1
    63ce:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    63d0:	3101      	adds	r1, #1
    63d2:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    63d4:	33d7      	adds	r3, #215	; 0xd7
    63d6:	8613      	strh	r3, [r2, #48]	; 0x30
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);

	/* Change buffer timeout to something longer. */
	conf.buffer_timeout = 10000;
    63d8:	4b12      	ldr	r3, [pc, #72]	; (6424 <at30tse_init+0x84>)
    63da:	82d3      	strh	r3, [r2, #22]

	conf.pinmux_pad0 = AT30TSE_PINMUX_PAD0;
    63dc:	4b12      	ldr	r3, [pc, #72]	; (6428 <at30tse_init+0x88>)
    63de:	61d3      	str	r3, [r2, #28]
	conf.pinmux_pad1 = AT30TSE_PINMUX_PAD1;
    63e0:	4b12      	ldr	r3, [pc, #72]	; (642c <at30tse_init+0x8c>)
    63e2:	6213      	str	r3, [r2, #32]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_SERCOM, &conf);
    63e4:	4c12      	ldr	r4, [pc, #72]	; (6430 <at30tse_init+0x90>)
    63e6:	2184      	movs	r1, #132	; 0x84
    63e8:	05c9      	lsls	r1, r1, #23
    63ea:	0020      	movs	r0, r4
    63ec:	4b11      	ldr	r3, [pc, #68]	; (6434 <at30tse_init+0x94>)
    63ee:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    63f0:	6822      	ldr	r2, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    63f2:	2107      	movs	r1, #7
    63f4:	69d3      	ldr	r3, [r2, #28]
	while (i2c_master_is_syncing(module)) {
    63f6:	4219      	tst	r1, r3
    63f8:	d1fc      	bne.n	63f4 <at30tse_init+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    63fa:	6813      	ldr	r3, [r2, #0]
    63fc:	2102      	movs	r1, #2
    63fe:	430b      	orrs	r3, r1
    6400:	6013      	str	r3, [r2, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    6402:	4b0b      	ldr	r3, [pc, #44]	; (6430 <at30tse_init+0x90>)
    6404:	88dc      	ldrh	r4, [r3, #6]
	uint32_t timeout_counter = 0;
    6406:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    6408:	2010      	movs	r0, #16
    640a:	8b51      	ldrh	r1, [r2, #26]
    640c:	4201      	tst	r1, r0
    640e:	d104      	bne.n	641a <at30tse_init+0x7a>
		timeout_counter++;
    6410:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    6412:	42a3      	cmp	r3, r4
    6414:	d3f9      	bcc.n	640a <at30tse_init+0x6a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    6416:	2310      	movs	r3, #16
    6418:	8353      	strh	r3, [r2, #26]
	i2c_master_enable(&dev_inst_at30tse75x);
}
    641a:	b00e      	add	sp, #56	; 0x38
    641c:	bd10      	pop	{r4, pc}
    641e:	46c0      	nop			; (mov r8, r8)
    6420:	00000d48 	.word	0x00000d48
    6424:	00002710 	.word	0x00002710
    6428:	00080002 	.word	0x00080002
    642c:	00090002 	.word	0x00090002
    6430:	20001cac 	.word	0x20001cac
    6434:	00006b8d 	.word	0x00006b8d

00006438 <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
    6438:	b570      	push	{r4, r5, r6, lr}
    643a:	b088      	sub	sp, #32
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
    643c:	ad07      	add	r5, sp, #28
    643e:	4308      	orrs	r0, r1
    6440:	7028      	strb	r0, [r5, #0]
	buffer[1] = 0;
    6442:	2300      	movs	r3, #0
    6444:	706b      	strb	r3, [r5, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
    6446:	a904      	add	r1, sp, #16
    6448:	2048      	movs	r0, #72	; 0x48
    644a:	8008      	strh	r0, [r1, #0]
    644c:	2401      	movs	r4, #1
    644e:	804c      	strh	r4, [r1, #2]
    6450:	604d      	str	r5, [r1, #4]
    6452:	720b      	strb	r3, [r1, #8]
    6454:	724b      	strb	r3, [r1, #9]
    6456:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
    6458:	ac01      	add	r4, sp, #4
    645a:	8020      	strh	r0, [r4, #0]
    645c:	8062      	strh	r2, [r4, #2]
    645e:	9502      	str	r5, [sp, #8]
    6460:	7223      	strb	r3, [r4, #8]
    6462:	7263      	strb	r3, [r4, #9]
    6464:	72a3      	strb	r3, [r4, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
    6466:	4e07      	ldr	r6, [pc, #28]	; (6484 <at30tse_read_register+0x4c>)
    6468:	0030      	movs	r0, r6
    646a:	4b07      	ldr	r3, [pc, #28]	; (6488 <at30tse_read_register+0x50>)
    646c:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
    646e:	0021      	movs	r1, r4
    6470:	0030      	movs	r0, r6
    6472:	4b06      	ldr	r3, [pc, #24]	; (648c <at30tse_read_register+0x54>)
    6474:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
    6476:	782b      	ldrb	r3, [r5, #0]
    6478:	021b      	lsls	r3, r3, #8
    647a:	7868      	ldrb	r0, [r5, #1]
    647c:	4318      	orrs	r0, r3
}
    647e:	b008      	add	sp, #32
    6480:	bd70      	pop	{r4, r5, r6, pc}
    6482:	46c0      	nop			; (mov r8, r8)
    6484:	20001cac 	.word	0x20001cac
    6488:	000071a1 	.word	0x000071a1
    648c:	00007179 	.word	0x00007179

00006490 <at30tse_write_register>:
 * \param[in] reg_type Type of the register (Volatile or Non-volatile).
 * \param[in] reg_size Register size.
 * \param[in] reg_value Value to be written to reg.
 */
void at30tse_write_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size, uint16_t reg_value)
{
    6490:	b510      	push	{r4, lr}
    6492:	b084      	sub	sp, #16
	uint8_t data[3];
	data[0] = reg | reg_type;
    6494:	ac03      	add	r4, sp, #12
    6496:	4308      	orrs	r0, r1
    6498:	7020      	strb	r0, [r4, #0]
	data[1] = 0x00FF & (reg_value >> 8);
    649a:	0a19      	lsrs	r1, r3, #8
    649c:	7061      	strb	r1, [r4, #1]
	data[2] = 0x00FF & reg_value;
    649e:	70a3      	strb	r3, [r4, #2]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet transfer = {
    64a0:	2348      	movs	r3, #72	; 0x48
    64a2:	4669      	mov	r1, sp
    64a4:	800b      	strh	r3, [r1, #0]
		.address     = AT30TSE_TEMPERATURE_TWI_ADDR,
		.data_length = 1 + reg_size,
    64a6:	3201      	adds	r2, #1
    struct i2c_master_packet transfer = {
    64a8:	804a      	strh	r2, [r1, #2]
    64aa:	9401      	str	r4, [sp, #4]
    64ac:	2300      	movs	r3, #0
    64ae:	720b      	strb	r3, [r1, #8]
    64b0:	724b      	strb	r3, [r1, #9]
    64b2:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait(&dev_inst_at30tse75x, &transfer);
    64b4:	4802      	ldr	r0, [pc, #8]	; (64c0 <at30tse_write_register+0x30>)
    64b6:	4b03      	ldr	r3, [pc, #12]	; (64c4 <at30tse_write_register+0x34>)
    64b8:	4798      	blx	r3
}
    64ba:	b004      	add	sp, #16
    64bc:	bd10      	pop	{r4, pc}
    64be:	46c0      	nop			; (mov r8, r8)
    64c0:	20001cac 	.word	0x20001cac
    64c4:	0000718d 	.word	0x0000718d

000064c8 <at30tse_write_config_register>:
 * \brief Writes the configuration register reg with the value passed
 *
 * \param[in] value Register value to be written.
 */
void at30tse_write_config_register(uint16_t value)
{
    64c8:	b570      	push	{r4, r5, r6, lr}
    64ca:	0004      	movs	r4, r0
	at30tse_write_register(AT30TSE_CONFIG_REG,
    64cc:	0003      	movs	r3, r0
    64ce:	2201      	movs	r2, #1
    64d0:	2100      	movs	r1, #0
    64d2:	2001      	movs	r0, #1
    64d4:	4d03      	ldr	r5, [pc, #12]	; (64e4 <at30tse_write_config_register+0x1c>)
    64d6:	47a8      	blx	r5
							AT30TSE_NON_VOLATILE_REG,
							AT30TSE_CONFIG_REG_SIZE-1,
							value);

	resolution = ( value >> AT30TSE_CONFIG_RES_Pos ) & ( AT30TSE_CONFIG_RES_Msk >> AT30TSE_CONFIG_RES_Pos);
    64d8:	0464      	lsls	r4, r4, #17
    64da:	0fa4      	lsrs	r4, r4, #30
    64dc:	4b02      	ldr	r3, [pc, #8]	; (64e8 <at30tse_write_config_register+0x20>)
    64de:	701c      	strb	r4, [r3, #0]

}
    64e0:	bd70      	pop	{r4, r5, r6, pc}
    64e2:	46c0      	nop			; (mov r8, r8)
    64e4:	00006491 	.word	0x00006491
    64e8:	200000b9 	.word	0x200000b9

000064ec <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature()
{
    64ec:	b5d0      	push	{r4, r6, r7, lr}
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
    64ee:	2202      	movs	r2, #2
    64f0:	2100      	movs	r1, #0
    64f2:	2000      	movs	r0, #0
    64f4:	4b1f      	ldr	r3, [pc, #124]	; (6574 <at30tse_read_temperature+0x88>)
    64f6:	4798      	blx	r3
    64f8:	0003      	movs	r3, r0
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
	int8_t sign = 1;
    64fa:	2701      	movs	r7, #1

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
    64fc:	0402      	lsls	r2, r0, #16
    64fe:	d40c      	bmi.n	651a <at30tse_read_temperature+0x2e>
		sign *= -1;
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
    6500:	4a1d      	ldr	r2, [pc, #116]	; (6578 <at30tse_read_temperature+0x8c>)
    6502:	7816      	ldrb	r6, [r2, #0]
    6504:	2e01      	cmp	r6, #1
    6506:	d016      	beq.n	6536 <at30tse_read_temperature+0x4a>
    6508:	2e00      	cmp	r6, #0
    650a:	d00a      	beq.n	6522 <at30tse_read_temperature+0x36>
    650c:	2e02      	cmp	r6, #2
    650e:	d01c      	beq.n	654a <at30tse_read_temperature+0x5e>
    6510:	2e03      	cmp	r6, #3
    6512:	d025      	beq.n	6560 <at30tse_read_temperature+0x74>
	double temperature = 0;
    6514:	2000      	movs	r0, #0
    6516:	2100      	movs	r1, #0
			temperature = data * sign * 0.0625;
			break;
		default:
			break;
	}
	return temperature;
    6518:	e00c      	b.n	6534 <at30tse_read_temperature+0x48>
		data &= ~(1 << 15);
    651a:	0440      	lsls	r0, r0, #17
    651c:	0c43      	lsrs	r3, r0, #17
		sign *= -1;
    651e:	3f02      	subs	r7, #2
    6520:	e7ee      	b.n	6500 <at30tse_read_temperature+0x14>
			data = (data >> 7);
    6522:	09db      	lsrs	r3, r3, #7
			temperature = data * sign * 0.5;
    6524:	b298      	uxth	r0, r3
    6526:	4378      	muls	r0, r7
    6528:	4b14      	ldr	r3, [pc, #80]	; (657c <at30tse_read_temperature+0x90>)
    652a:	4798      	blx	r3
    652c:	2200      	movs	r2, #0
    652e:	4b14      	ldr	r3, [pc, #80]	; (6580 <at30tse_read_temperature+0x94>)
    6530:	4c14      	ldr	r4, [pc, #80]	; (6584 <at30tse_read_temperature+0x98>)
    6532:	47a0      	blx	r4
}
    6534:	bdd0      	pop	{r4, r6, r7, pc}
			data = (data >> 6);
    6536:	099b      	lsrs	r3, r3, #6
			temperature = data * sign * 0.25;
    6538:	b298      	uxth	r0, r3
    653a:	4378      	muls	r0, r7
    653c:	4b0f      	ldr	r3, [pc, #60]	; (657c <at30tse_read_temperature+0x90>)
    653e:	4798      	blx	r3
    6540:	2200      	movs	r2, #0
    6542:	4b11      	ldr	r3, [pc, #68]	; (6588 <at30tse_read_temperature+0x9c>)
    6544:	4c0f      	ldr	r4, [pc, #60]	; (6584 <at30tse_read_temperature+0x98>)
    6546:	47a0      	blx	r4
			break;
    6548:	e7f4      	b.n	6534 <at30tse_read_temperature+0x48>
			data = (data >> 5);
    654a:	095b      	lsrs	r3, r3, #5
			temperature = data * sign * 0.125;
    654c:	b298      	uxth	r0, r3
    654e:	4378      	muls	r0, r7
    6550:	4b0a      	ldr	r3, [pc, #40]	; (657c <at30tse_read_temperature+0x90>)
    6552:	4798      	blx	r3
    6554:	2200      	movs	r2, #0
    6556:	23ff      	movs	r3, #255	; 0xff
    6558:	059b      	lsls	r3, r3, #22
    655a:	4c0a      	ldr	r4, [pc, #40]	; (6584 <at30tse_read_temperature+0x98>)
    655c:	47a0      	blx	r4
			break;
    655e:	e7e9      	b.n	6534 <at30tse_read_temperature+0x48>
			data = (data >> 4);
    6560:	091b      	lsrs	r3, r3, #4
			temperature = data * sign * 0.0625;
    6562:	b298      	uxth	r0, r3
    6564:	4378      	muls	r0, r7
    6566:	4b05      	ldr	r3, [pc, #20]	; (657c <at30tse_read_temperature+0x90>)
    6568:	4798      	blx	r3
    656a:	2200      	movs	r2, #0
    656c:	4b07      	ldr	r3, [pc, #28]	; (658c <at30tse_read_temperature+0xa0>)
    656e:	4c05      	ldr	r4, [pc, #20]	; (6584 <at30tse_read_temperature+0x98>)
    6570:	47a0      	blx	r4
			break;
    6572:	e7df      	b.n	6534 <at30tse_read_temperature+0x48>
    6574:	00006439 	.word	0x00006439
    6578:	200000b9 	.word	0x200000b9
    657c:	00011c45 	.word	0x00011c45
    6580:	3fe00000 	.word	0x3fe00000
    6584:	000110b1 	.word	0x000110b1
    6588:	3fd00000 	.word	0x3fd00000
    658c:	3fb00000 	.word	0x3fb00000

00006590 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6590:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    6592:	2a00      	cmp	r2, #0
    6594:	d001      	beq.n	659a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    6596:	0018      	movs	r0, r3
    6598:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    659a:	008b      	lsls	r3, r1, #2
    659c:	4a06      	ldr	r2, [pc, #24]	; (65b8 <extint_register_callback+0x28>)
    659e:	589b      	ldr	r3, [r3, r2]
    65a0:	2b00      	cmp	r3, #0
    65a2:	d003      	beq.n	65ac <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    65a4:	4283      	cmp	r3, r0
    65a6:	d005      	beq.n	65b4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    65a8:	231d      	movs	r3, #29
    65aa:	e7f4      	b.n	6596 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    65ac:	0089      	lsls	r1, r1, #2
    65ae:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    65b0:	2300      	movs	r3, #0
    65b2:	e7f0      	b.n	6596 <extint_register_callback+0x6>
		return STATUS_OK;
    65b4:	2300      	movs	r3, #0
    65b6:	e7ee      	b.n	6596 <extint_register_callback+0x6>
    65b8:	20001cbc 	.word	0x20001cbc

000065bc <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    65bc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    65be:	2900      	cmp	r1, #0
    65c0:	d001      	beq.n	65c6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    65c2:	0018      	movs	r0, r3
    65c4:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    65c6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    65c8:	281f      	cmp	r0, #31
    65ca:	d800      	bhi.n	65ce <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    65cc:	4a02      	ldr	r2, [pc, #8]	; (65d8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    65ce:	2301      	movs	r3, #1
    65d0:	4083      	lsls	r3, r0
    65d2:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    65d4:	2300      	movs	r3, #0
    65d6:	e7f4      	b.n	65c2 <extint_chan_enable_callback+0x6>
    65d8:	40002400 	.word	0x40002400

000065dc <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    65dc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    65de:	2900      	cmp	r1, #0
    65e0:	d001      	beq.n	65e6 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    65e2:	0018      	movs	r0, r3
    65e4:	4770      	bx	lr
		return NULL;
    65e6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    65e8:	281f      	cmp	r0, #31
    65ea:	d800      	bhi.n	65ee <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    65ec:	4a02      	ldr	r2, [pc, #8]	; (65f8 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    65ee:	2301      	movs	r3, #1
    65f0:	4083      	lsls	r3, r0
    65f2:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    65f4:	2300      	movs	r3, #0
    65f6:	e7f4      	b.n	65e2 <extint_chan_disable_callback+0x6>
    65f8:	40002400 	.word	0x40002400

000065fc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    65fc:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    65fe:	2200      	movs	r2, #0
    6600:	4b10      	ldr	r3, [pc, #64]	; (6644 <EIC_Handler+0x48>)
    6602:	701a      	strb	r2, [r3, #0]
    6604:	2300      	movs	r3, #0
    6606:	4910      	ldr	r1, [pc, #64]	; (6648 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    6608:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    660a:	4e10      	ldr	r6, [pc, #64]	; (664c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    660c:	4c0d      	ldr	r4, [pc, #52]	; (6644 <EIC_Handler+0x48>)
    660e:	e00a      	b.n	6626 <EIC_Handler+0x2a>
		return eics[eic_index];
    6610:	490d      	ldr	r1, [pc, #52]	; (6648 <EIC_Handler+0x4c>)
    6612:	e008      	b.n	6626 <EIC_Handler+0x2a>
    6614:	7823      	ldrb	r3, [r4, #0]
    6616:	3301      	adds	r3, #1
    6618:	b2db      	uxtb	r3, r3
    661a:	7023      	strb	r3, [r4, #0]
    661c:	2b0f      	cmp	r3, #15
    661e:	d810      	bhi.n	6642 <EIC_Handler+0x46>
		return NULL;
    6620:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    6622:	2b1f      	cmp	r3, #31
    6624:	d9f4      	bls.n	6610 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    6626:	0028      	movs	r0, r5
    6628:	4018      	ands	r0, r3
    662a:	2201      	movs	r2, #1
    662c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    662e:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    6630:	4210      	tst	r0, r2
    6632:	d0ef      	beq.n	6614 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    6634:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6636:	009b      	lsls	r3, r3, #2
    6638:	599b      	ldr	r3, [r3, r6]
    663a:	2b00      	cmp	r3, #0
    663c:	d0ea      	beq.n	6614 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    663e:	4798      	blx	r3
    6640:	e7e8      	b.n	6614 <EIC_Handler+0x18>
			}
		}
	}
}
    6642:	bd70      	pop	{r4, r5, r6, pc}
    6644:	20001cb8 	.word	0x20001cb8
    6648:	40002400 	.word	0x40002400
    664c:	20001cbc 	.word	0x20001cbc

00006650 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    6650:	4a06      	ldr	r2, [pc, #24]	; (666c <_extint_enable+0x1c>)
    6652:	7813      	ldrb	r3, [r2, #0]
    6654:	2102      	movs	r1, #2
    6656:	430b      	orrs	r3, r1
    6658:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    665a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    665c:	6853      	ldr	r3, [r2, #4]
    665e:	4219      	tst	r1, r3
    6660:	d1fc      	bne.n	665c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    6662:	6853      	ldr	r3, [r2, #4]
    6664:	4218      	tst	r0, r3
    6666:	d1f9      	bne.n	665c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6668:	4770      	bx	lr
    666a:	46c0      	nop			; (mov r8, r8)
    666c:	40002400 	.word	0x40002400

00006670 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    6670:	4a06      	ldr	r2, [pc, #24]	; (668c <_extint_disable+0x1c>)
    6672:	7813      	ldrb	r3, [r2, #0]
    6674:	2102      	movs	r1, #2
    6676:	438b      	bics	r3, r1
    6678:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    667a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    667c:	6853      	ldr	r3, [r2, #4]
    667e:	4219      	tst	r1, r3
    6680:	d1fc      	bne.n	667c <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    6682:	6853      	ldr	r3, [r2, #4]
    6684:	4218      	tst	r0, r3
    6686:	d1f9      	bne.n	667c <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6688:	4770      	bx	lr
    668a:	46c0      	nop			; (mov r8, r8)
    668c:	40002400 	.word	0x40002400

00006690 <_system_extint_init>:
{
    6690:	b500      	push	{lr}
    6692:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
    6694:	4a17      	ldr	r2, [pc, #92]	; (66f4 <_system_extint_init+0x64>)
    6696:	6951      	ldr	r1, [r2, #20]
    6698:	2380      	movs	r3, #128	; 0x80
    669a:	009b      	lsls	r3, r3, #2
    669c:	430b      	orrs	r3, r1
    669e:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    66a0:	a901      	add	r1, sp, #4
    66a2:	2300      	movs	r3, #0
    66a4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    66a6:	2003      	movs	r0, #3
    66a8:	4b13      	ldr	r3, [pc, #76]	; (66f8 <_system_extint_init+0x68>)
    66aa:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    66ac:	2003      	movs	r0, #3
    66ae:	4b13      	ldr	r3, [pc, #76]	; (66fc <_system_extint_init+0x6c>)
    66b0:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    66b2:	4a13      	ldr	r2, [pc, #76]	; (6700 <_system_extint_init+0x70>)
    66b4:	7813      	ldrb	r3, [r2, #0]
    66b6:	2101      	movs	r1, #1
    66b8:	430b      	orrs	r3, r1
    66ba:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    66bc:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    66be:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    66c0:	6853      	ldr	r3, [r2, #4]
    66c2:	4219      	tst	r1, r3
    66c4:	d1fc      	bne.n	66c0 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    66c6:	6853      	ldr	r3, [r2, #4]
    66c8:	4218      	tst	r0, r3
    66ca:	d1f9      	bne.n	66c0 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
    66cc:	4a0c      	ldr	r2, [pc, #48]	; (6700 <_system_extint_init+0x70>)
    66ce:	7813      	ldrb	r3, [r2, #0]
    66d0:	2110      	movs	r1, #16
    66d2:	438b      	bics	r3, r1
    66d4:	7013      	strb	r3, [r2, #0]
    66d6:	4b0b      	ldr	r3, [pc, #44]	; (6704 <_system_extint_init+0x74>)
    66d8:	0019      	movs	r1, r3
    66da:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    66dc:	2200      	movs	r2, #0
    66de:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    66e0:	428b      	cmp	r3, r1
    66e2:	d1fc      	bne.n	66de <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    66e4:	2208      	movs	r2, #8
    66e6:	4b08      	ldr	r3, [pc, #32]	; (6708 <_system_extint_init+0x78>)
    66e8:	601a      	str	r2, [r3, #0]
	_extint_enable();
    66ea:	4b08      	ldr	r3, [pc, #32]	; (670c <_system_extint_init+0x7c>)
    66ec:	4798      	blx	r3
}
    66ee:	b003      	add	sp, #12
    66f0:	bd00      	pop	{pc}
    66f2:	46c0      	nop			; (mov r8, r8)
    66f4:	40000400 	.word	0x40000400
    66f8:	00008559 	.word	0x00008559
    66fc:	000084e9 	.word	0x000084e9
    6700:	40002400 	.word	0x40002400
    6704:	20001cbc 	.word	0x20001cbc
    6708:	e000e100 	.word	0xe000e100
    670c:	00006651 	.word	0x00006651

00006710 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    6710:	2300      	movs	r3, #0
    6712:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    6714:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6716:	2201      	movs	r2, #1
    6718:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    671a:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    671c:	3201      	adds	r2, #1
    671e:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    6720:	7243      	strb	r3, [r0, #9]
}
    6722:	4770      	bx	lr

00006724 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    6724:	b5f0      	push	{r4, r5, r6, r7, lr}
    6726:	b083      	sub	sp, #12
    6728:	0005      	movs	r5, r0
    672a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    672c:	4b1c      	ldr	r3, [pc, #112]	; (67a0 <extint_chan_set_config+0x7c>)
    672e:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6730:	a901      	add	r1, sp, #4
    6732:	2300      	movs	r3, #0
    6734:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    6736:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    6738:	7923      	ldrb	r3, [r4, #4]
    673a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    673c:	7a23      	ldrb	r3, [r4, #8]
    673e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    6740:	7820      	ldrb	r0, [r4, #0]
    6742:	4b18      	ldr	r3, [pc, #96]	; (67a4 <extint_chan_set_config+0x80>)
    6744:	4798      	blx	r3
		return NULL;
    6746:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    6748:	2d1f      	cmp	r5, #31
    674a:	d800      	bhi.n	674e <extint_chan_set_config+0x2a>
		return eics[eic_index];
    674c:	4916      	ldr	r1, [pc, #88]	; (67a8 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    674e:	2207      	movs	r2, #7
    6750:	402a      	ands	r2, r5
    6752:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6754:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6756:	7aa3      	ldrb	r3, [r4, #10]
    6758:	2b00      	cmp	r3, #0
    675a:	d001      	beq.n	6760 <extint_chan_set_config+0x3c>
    675c:	2308      	movs	r3, #8
    675e:	431f      	orrs	r7, r3
    6760:	08eb      	lsrs	r3, r5, #3
    6762:	009b      	lsls	r3, r3, #2
    6764:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    6766:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6768:	260f      	movs	r6, #15
    676a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    676c:	43b0      	bics	r0, r6
			(new_config << config_pos);
    676e:	4097      	lsls	r7, r2
    6770:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6772:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    6774:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    6776:	7a63      	ldrb	r3, [r4, #9]
    6778:	2b00      	cmp	r3, #0
    677a:	d10b      	bne.n	6794 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    677c:	698a      	ldr	r2, [r1, #24]
    677e:	2301      	movs	r3, #1
    6780:	40ab      	lsls	r3, r5
    6782:	43db      	mvns	r3, r3
    6784:	041b      	lsls	r3, r3, #16
    6786:	0c1b      	lsrs	r3, r3, #16
    6788:	4013      	ands	r3, r2
    678a:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    678c:	4b07      	ldr	r3, [pc, #28]	; (67ac <extint_chan_set_config+0x88>)
    678e:	4798      	blx	r3
}
    6790:	b003      	add	sp, #12
    6792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    6794:	698a      	ldr	r2, [r1, #24]
    6796:	2301      	movs	r3, #1
    6798:	40ab      	lsls	r3, r5
    679a:	4313      	orrs	r3, r2
    679c:	618b      	str	r3, [r1, #24]
    679e:	e7f5      	b.n	678c <extint_chan_set_config+0x68>
    67a0:	00006671 	.word	0x00006671
    67a4:	00008655 	.word	0x00008655
    67a8:	40002400 	.word	0x40002400
    67ac:	00006651 	.word	0x00006651

000067b0 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    67b0:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
    67b2:	4a1e      	ldr	r2, [pc, #120]	; (682c <nvm_set_config+0x7c>)
    67b4:	6993      	ldr	r3, [r2, #24]
    67b6:	2104      	movs	r1, #4
    67b8:	430b      	orrs	r3, r1
    67ba:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    67bc:	4b1c      	ldr	r3, [pc, #112]	; (6830 <nvm_set_config+0x80>)
    67be:	2220      	movs	r2, #32
    67c0:	32ff      	adds	r2, #255	; 0xff
    67c2:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    67c4:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    67c6:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    67c8:	07d2      	lsls	r2, r2, #31
    67ca:	d401      	bmi.n	67d0 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    67cc:	0018      	movs	r0, r3
    67ce:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    67d0:	7803      	ldrb	r3, [r0, #0]
    67d2:	021b      	lsls	r3, r3, #8
    67d4:	22c0      	movs	r2, #192	; 0xc0
    67d6:	0092      	lsls	r2, r2, #2
    67d8:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    67da:	7841      	ldrb	r1, [r0, #1]
    67dc:	01c9      	lsls	r1, r1, #7
    67de:	22ff      	movs	r2, #255	; 0xff
    67e0:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    67e2:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    67e4:	7881      	ldrb	r1, [r0, #2]
    67e6:	0049      	lsls	r1, r1, #1
    67e8:	221e      	movs	r2, #30
    67ea:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    67ec:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    67ee:	78c2      	ldrb	r2, [r0, #3]
    67f0:	0492      	lsls	r2, r2, #18
    67f2:	2180      	movs	r1, #128	; 0x80
    67f4:	02c9      	lsls	r1, r1, #11
    67f6:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    67f8:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    67fa:	7902      	ldrb	r2, [r0, #4]
    67fc:	0412      	lsls	r2, r2, #16
    67fe:	21c0      	movs	r1, #192	; 0xc0
    6800:	0289      	lsls	r1, r1, #10
    6802:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    6804:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    6806:	4a0a      	ldr	r2, [pc, #40]	; (6830 <nvm_set_config+0x80>)
    6808:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    680a:	6893      	ldr	r3, [r2, #8]
    680c:	035b      	lsls	r3, r3, #13
    680e:	0f5b      	lsrs	r3, r3, #29
    6810:	4908      	ldr	r1, [pc, #32]	; (6834 <nvm_set_config+0x84>)
    6812:	2408      	movs	r4, #8
    6814:	409c      	lsls	r4, r3
    6816:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    6818:	6893      	ldr	r3, [r2, #8]
    681a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    681c:	7843      	ldrb	r3, [r0, #1]
    681e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    6820:	8b13      	ldrh	r3, [r2, #24]
    6822:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    6824:	0fdb      	lsrs	r3, r3, #31
    6826:	011b      	lsls	r3, r3, #4
    6828:	e7d0      	b.n	67cc <nvm_set_config+0x1c>
    682a:	46c0      	nop			; (mov r8, r8)
    682c:	40000400 	.word	0x40000400
    6830:	41004000 	.word	0x41004000
    6834:	200000bc 	.word	0x200000bc

00006838 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    6838:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    683a:	4a30      	ldr	r2, [pc, #192]	; (68fc <nvm_execute_command+0xc4>)
    683c:	8814      	ldrh	r4, [r2, #0]
    683e:	8853      	ldrh	r3, [r2, #2]
    6840:	4363      	muls	r3, r4
    6842:	428b      	cmp	r3, r1
    6844:	d20b      	bcs.n	685e <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    6846:	2280      	movs	r2, #128	; 0x80
    6848:	0192      	lsls	r2, r2, #6
    684a:	4b2d      	ldr	r3, [pc, #180]	; (6900 <nvm_execute_command+0xc8>)
    684c:	18cb      	adds	r3, r1, r3
    684e:	4293      	cmp	r3, r2
    6850:	d905      	bls.n	685e <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6852:	4c2c      	ldr	r4, [pc, #176]	; (6904 <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    6854:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6856:	4a2c      	ldr	r2, [pc, #176]	; (6908 <nvm_execute_command+0xd0>)
    6858:	188a      	adds	r2, r1, r2
    685a:	42a2      	cmp	r2, r4
    685c:	d80e      	bhi.n	687c <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    685e:	4b2b      	ldr	r3, [pc, #172]	; (690c <nvm_execute_command+0xd4>)
    6860:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    6862:	2280      	movs	r2, #128	; 0x80
    6864:	02d2      	lsls	r2, r2, #11
    6866:	4322      	orrs	r2, r4
    6868:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    686a:	2220      	movs	r2, #32
    686c:	32ff      	adds	r2, #255	; 0xff
    686e:	831a      	strh	r2, [r3, #24]
    6870:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    6872:	07db      	lsls	r3, r3, #31
    6874:	d404      	bmi.n	6880 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    6876:	4b25      	ldr	r3, [pc, #148]	; (690c <nvm_execute_command+0xd4>)
    6878:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
    687a:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    687c:	0018      	movs	r0, r3
    687e:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    6880:	2845      	cmp	r0, #69	; 0x45
    6882:	d829      	bhi.n	68d8 <nvm_execute_command+0xa0>
    6884:	0083      	lsls	r3, r0, #2
    6886:	4a22      	ldr	r2, [pc, #136]	; (6910 <nvm_execute_command+0xd8>)
    6888:	58d3      	ldr	r3, [r2, r3]
    688a:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    688c:	4b1f      	ldr	r3, [pc, #124]	; (690c <nvm_execute_command+0xd4>)
    688e:	8b1b      	ldrh	r3, [r3, #24]
    6890:	05db      	lsls	r3, r3, #23
    6892:	d503      	bpl.n	689c <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    6894:	4b1d      	ldr	r3, [pc, #116]	; (690c <nvm_execute_command+0xd4>)
    6896:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
    6898:	2310      	movs	r3, #16
    689a:	e7ef      	b.n	687c <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    689c:	0889      	lsrs	r1, r1, #2
    689e:	0049      	lsls	r1, r1, #1
    68a0:	4b1a      	ldr	r3, [pc, #104]	; (690c <nvm_execute_command+0xd4>)
    68a2:	61d9      	str	r1, [r3, #28]
			break;
    68a4:	e003      	b.n	68ae <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    68a6:	0889      	lsrs	r1, r1, #2
    68a8:	0049      	lsls	r1, r1, #1
    68aa:	4b18      	ldr	r3, [pc, #96]	; (690c <nvm_execute_command+0xd4>)
    68ac:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    68ae:	23fd      	movs	r3, #253	; 0xfd
    68b0:	0005      	movs	r5, r0
    68b2:	3d1a      	subs	r5, #26
    68b4:	401d      	ands	r5, r3
    68b6:	d013      	beq.n	68e0 <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    68b8:	23a5      	movs	r3, #165	; 0xa5
    68ba:	021b      	lsls	r3, r3, #8
    68bc:	4318      	orrs	r0, r3
    68be:	4b13      	ldr	r3, [pc, #76]	; (690c <nvm_execute_command+0xd4>)
    68c0:	8018      	strh	r0, [r3, #0]
    68c2:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    68c4:	2201      	movs	r2, #1
    68c6:	7d0b      	ldrb	r3, [r1, #20]
    68c8:	4213      	tst	r3, r2
    68ca:	d0fc      	beq.n	68c6 <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    68cc:	2d00      	cmp	r5, #0
    68ce:	d00f      	beq.n	68f0 <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
    68d0:	4b0e      	ldr	r3, [pc, #56]	; (690c <nvm_execute_command+0xd4>)
    68d2:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
    68d4:	2300      	movs	r3, #0
    68d6:	e7d1      	b.n	687c <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
    68d8:	4b0c      	ldr	r3, [pc, #48]	; (690c <nvm_execute_command+0xd4>)
    68da:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    68dc:	2317      	movs	r3, #23
    68de:	e7cd      	b.n	687c <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    68e0:	4b0a      	ldr	r3, [pc, #40]	; (690c <nvm_execute_command+0xd4>)
    68e2:	6859      	ldr	r1, [r3, #4]
    68e4:	2280      	movs	r2, #128	; 0x80
    68e6:	02d2      	lsls	r2, r2, #11
    68e8:	430a      	orrs	r2, r1
    68ea:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    68ec:	685b      	ldr	r3, [r3, #4]
    68ee:	e7e3      	b.n	68b8 <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    68f0:	4a06      	ldr	r2, [pc, #24]	; (690c <nvm_execute_command+0xd4>)
    68f2:	6853      	ldr	r3, [r2, #4]
    68f4:	4907      	ldr	r1, [pc, #28]	; (6914 <nvm_execute_command+0xdc>)
    68f6:	400b      	ands	r3, r1
    68f8:	6053      	str	r3, [r2, #4]
    68fa:	e7e9      	b.n	68d0 <nvm_execute_command+0x98>
    68fc:	200000bc 	.word	0x200000bc
    6900:	ff7fc000 	.word	0xff7fc000
    6904:	00001fff 	.word	0x00001fff
    6908:	ffc00000 	.word	0xffc00000
    690c:	41004000 	.word	0x41004000
    6910:	0001309c 	.word	0x0001309c
    6914:	fffbffff 	.word	0xfffbffff

00006918 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    6918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    691a:	4b2f      	ldr	r3, [pc, #188]	; (69d8 <nvm_write_buffer+0xc0>)
    691c:	881c      	ldrh	r4, [r3, #0]
    691e:	885b      	ldrh	r3, [r3, #2]
    6920:	4363      	muls	r3, r4
	if (destination_address >
    6922:	4283      	cmp	r3, r0
    6924:	d207      	bcs.n	6936 <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6926:	4e2d      	ldr	r6, [pc, #180]	; (69dc <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    6928:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    692a:	4b2d      	ldr	r3, [pc, #180]	; (69e0 <nvm_write_buffer+0xc8>)
    692c:	18c3      	adds	r3, r0, r3
    692e:	42b3      	cmp	r3, r6
    6930:	d806      	bhi.n	6940 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    6932:	2601      	movs	r6, #1
    6934:	e000      	b.n	6938 <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    6936:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    6938:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    693a:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    693c:	4218      	tst	r0, r3
    693e:	d001      	beq.n	6944 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    6940:	0028      	movs	r0, r5
    6942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    6944:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    6946:	4294      	cmp	r4, r2
    6948:	d3fa      	bcc.n	6940 <nvm_write_buffer+0x28>
    694a:	4b26      	ldr	r3, [pc, #152]	; (69e4 <nvm_write_buffer+0xcc>)
    694c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    694e:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    6950:	07db      	lsls	r3, r3, #31
    6952:	d5f5      	bpl.n	6940 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    6954:	4c24      	ldr	r4, [pc, #144]	; (69e8 <nvm_write_buffer+0xd0>)
    6956:	4b23      	ldr	r3, [pc, #140]	; (69e4 <nvm_write_buffer+0xcc>)
    6958:	801c      	strh	r4, [r3, #0]
    695a:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    695c:	2401      	movs	r4, #1
    695e:	7d2b      	ldrb	r3, [r5, #20]
    6960:	4223      	tst	r3, r4
    6962:	d0fc      	beq.n	695e <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6964:	2420      	movs	r4, #32
    6966:	34ff      	adds	r4, #255	; 0xff
    6968:	4b1e      	ldr	r3, [pc, #120]	; (69e4 <nvm_write_buffer+0xcc>)
    696a:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    696c:	2a00      	cmp	r2, #0
    696e:	d02c      	beq.n	69ca <nvm_write_buffer+0xb2>
    6970:	2301      	movs	r3, #1
    6972:	0005      	movs	r5, r0
    6974:	439d      	bics	r5, r3
    6976:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    6978:	1e54      	subs	r4, r2, #1
    697a:	46a4      	mov	ip, r4
    697c:	e009      	b.n	6992 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    697e:	18cf      	adds	r7, r1, r3
    6980:	787f      	ldrb	r7, [r7, #1]
    6982:	023f      	lsls	r7, r7, #8
    6984:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    6986:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    6988:	3302      	adds	r3, #2
    698a:	b29b      	uxth	r3, r3
    698c:	3502      	adds	r5, #2
    698e:	429a      	cmp	r2, r3
    6990:	d904      	bls.n	699c <nvm_write_buffer+0x84>
		data = buffer[i];
    6992:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    6994:	4563      	cmp	r3, ip
    6996:	dbf2      	blt.n	697e <nvm_write_buffer+0x66>
		data = buffer[i];
    6998:	b2a4      	uxth	r4, r4
    699a:	e7f4      	b.n	6986 <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    699c:	4b0e      	ldr	r3, [pc, #56]	; (69d8 <nvm_write_buffer+0xc0>)
    699e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    69a0:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    69a2:	2b00      	cmp	r3, #0
    69a4:	d1cc      	bne.n	6940 <nvm_write_buffer+0x28>
    69a6:	2a3f      	cmp	r2, #63	; 0x3f
    69a8:	d8ca      	bhi.n	6940 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    69aa:	2e00      	cmp	r6, #0
    69ac:	d106      	bne.n	69bc <nvm_write_buffer+0xa4>
    69ae:	2200      	movs	r2, #0
    69b0:	0001      	movs	r1, r0
    69b2:	2004      	movs	r0, #4
    69b4:	4b0d      	ldr	r3, [pc, #52]	; (69ec <nvm_write_buffer+0xd4>)
    69b6:	4798      	blx	r3
    69b8:	0005      	movs	r5, r0
    69ba:	e7c1      	b.n	6940 <nvm_write_buffer+0x28>
    69bc:	2200      	movs	r2, #0
    69be:	0001      	movs	r1, r0
    69c0:	201c      	movs	r0, #28
    69c2:	4b0a      	ldr	r3, [pc, #40]	; (69ec <nvm_write_buffer+0xd4>)
    69c4:	4798      	blx	r3
    69c6:	0005      	movs	r5, r0
    69c8:	e7ba      	b.n	6940 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    69ca:	4b03      	ldr	r3, [pc, #12]	; (69d8 <nvm_write_buffer+0xc0>)
    69cc:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    69ce:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    69d0:	2b00      	cmp	r3, #0
    69d2:	d0ea      	beq.n	69aa <nvm_write_buffer+0x92>
    69d4:	e7b4      	b.n	6940 <nvm_write_buffer+0x28>
    69d6:	46c0      	nop			; (mov r8, r8)
    69d8:	200000bc 	.word	0x200000bc
    69dc:	00001fff 	.word	0x00001fff
    69e0:	ffc00000 	.word	0xffc00000
    69e4:	41004000 	.word	0x41004000
    69e8:	ffffa544 	.word	0xffffa544
    69ec:	00006839 	.word	0x00006839

000069f0 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    69f0:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    69f2:	4a22      	ldr	r2, [pc, #136]	; (6a7c <nvm_erase_row+0x8c>)
    69f4:	8813      	ldrh	r3, [r2, #0]
    69f6:	8852      	ldrh	r2, [r2, #2]
    69f8:	435a      	muls	r2, r3
	if (row_address >
    69fa:	4282      	cmp	r2, r0
    69fc:	d207      	bcs.n	6a0e <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    69fe:	4c20      	ldr	r4, [pc, #128]	; (6a80 <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    6a00:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    6a02:	4920      	ldr	r1, [pc, #128]	; (6a84 <nvm_erase_row+0x94>)
    6a04:	1841      	adds	r1, r0, r1
    6a06:	42a1      	cmp	r1, r4
    6a08:	d807      	bhi.n	6a1a <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    6a0a:	2401      	movs	r4, #1
    6a0c:	e000      	b.n	6a10 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    6a0e:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    6a10:	009b      	lsls	r3, r3, #2
    6a12:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    6a14:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    6a16:	4218      	tst	r0, r3
    6a18:	d001      	beq.n	6a1e <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    6a1a:	0010      	movs	r0, r2
    6a1c:	bd10      	pop	{r4, pc}
    6a1e:	4b1a      	ldr	r3, [pc, #104]	; (6a88 <nvm_erase_row+0x98>)
    6a20:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    6a22:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    6a24:	07db      	lsls	r3, r3, #31
    6a26:	d5f8      	bpl.n	6a1a <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    6a28:	4b17      	ldr	r3, [pc, #92]	; (6a88 <nvm_erase_row+0x98>)
    6a2a:	2220      	movs	r2, #32
    6a2c:	32ff      	adds	r2, #255	; 0xff
    6a2e:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    6a30:	0880      	lsrs	r0, r0, #2
    6a32:	0040      	lsls	r0, r0, #1
    6a34:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
    6a36:	2c00      	cmp	r4, #0
    6a38:	d01b      	beq.n	6a72 <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    6a3a:	6859      	ldr	r1, [r3, #4]
    6a3c:	2280      	movs	r2, #128	; 0x80
    6a3e:	02d2      	lsls	r2, r2, #11
    6a40:	430a      	orrs	r2, r1
    6a42:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    6a44:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    6a46:	4a11      	ldr	r2, [pc, #68]	; (6a8c <nvm_erase_row+0x9c>)
    6a48:	801a      	strh	r2, [r3, #0]
    6a4a:	490f      	ldr	r1, [pc, #60]	; (6a88 <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
    6a4c:	2201      	movs	r2, #1
    6a4e:	7d0b      	ldrb	r3, [r1, #20]
    6a50:	4213      	tst	r3, r2
    6a52:	d0fc      	beq.n	6a4e <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
    6a54:	2c00      	cmp	r4, #0
    6a56:	d004      	beq.n	6a62 <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    6a58:	4a0b      	ldr	r2, [pc, #44]	; (6a88 <nvm_erase_row+0x98>)
    6a5a:	6853      	ldr	r3, [r2, #4]
    6a5c:	490c      	ldr	r1, [pc, #48]	; (6a90 <nvm_erase_row+0xa0>)
    6a5e:	400b      	ands	r3, r1
    6a60:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    6a62:	4b09      	ldr	r3, [pc, #36]	; (6a88 <nvm_erase_row+0x98>)
    6a64:	8b1a      	ldrh	r2, [r3, #24]
    6a66:	201c      	movs	r0, #28
    6a68:	4002      	ands	r2, r0
	return STATUS_OK;
    6a6a:	1e50      	subs	r0, r2, #1
    6a6c:	4182      	sbcs	r2, r0
    6a6e:	0092      	lsls	r2, r2, #2
    6a70:	e7d3      	b.n	6a1a <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    6a72:	4a08      	ldr	r2, [pc, #32]	; (6a94 <nvm_erase_row+0xa4>)
    6a74:	4b04      	ldr	r3, [pc, #16]	; (6a88 <nvm_erase_row+0x98>)
    6a76:	801a      	strh	r2, [r3, #0]
    6a78:	e7e7      	b.n	6a4a <nvm_erase_row+0x5a>
    6a7a:	46c0      	nop			; (mov r8, r8)
    6a7c:	200000bc 	.word	0x200000bc
    6a80:	00001fff 	.word	0x00001fff
    6a84:	ffc00000 	.word	0xffc00000
    6a88:	41004000 	.word	0x41004000
    6a8c:	ffffa51a 	.word	0xffffa51a
    6a90:	fffbffff 	.word	0xfffbffff
    6a94:	ffffa502 	.word	0xffffa502

00006a98 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    6a98:	b500      	push	{lr}
    6a9a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6a9c:	ab01      	add	r3, sp, #4
    6a9e:	2280      	movs	r2, #128	; 0x80
    6aa0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    6aa2:	780a      	ldrb	r2, [r1, #0]
    6aa4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    6aa6:	784a      	ldrb	r2, [r1, #1]
    6aa8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    6aaa:	788a      	ldrb	r2, [r1, #2]
    6aac:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    6aae:	0019      	movs	r1, r3
    6ab0:	4b01      	ldr	r3, [pc, #4]	; (6ab8 <port_pin_set_config+0x20>)
    6ab2:	4798      	blx	r3
}
    6ab4:	b003      	add	sp, #12
    6ab6:	bd00      	pop	{pc}
    6ab8:	00008655 	.word	0x00008655

00006abc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    6abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6abe:	46de      	mov	lr, fp
    6ac0:	4657      	mov	r7, sl
    6ac2:	464e      	mov	r6, r9
    6ac4:	4645      	mov	r5, r8
    6ac6:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    6ac8:	4b2b      	ldr	r3, [pc, #172]	; (6b78 <RTC_Handler+0xbc>)
    6aca:	681b      	ldr	r3, [r3, #0]
    6acc:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    6ace:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    6ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    6ad2:	4652      	mov	r2, sl
    6ad4:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    6ad6:	401a      	ands	r2, r3
    6ad8:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    6ada:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    6adc:	8973      	ldrh	r3, [r6, #10]
    6ade:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    6ae0:	b21a      	sxth	r2, r3
    6ae2:	2a00      	cmp	r2, #0
    6ae4:	db08      	blt.n	6af8 <RTC_Handler+0x3c>
    6ae6:	27ff      	movs	r7, #255	; 0xff
    6ae8:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    6aea:	d02a      	beq.n	6b42 <RTC_Handler+0x86>
    6aec:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    6aee:	2301      	movs	r3, #1
    6af0:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    6af2:	33fe      	adds	r3, #254	; 0xfe
    6af4:	469b      	mov	fp, r3
    6af6:	e014      	b.n	6b22 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    6af8:	4643      	mov	r3, r8
    6afa:	055b      	lsls	r3, r3, #21
    6afc:	d407      	bmi.n	6b0e <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    6afe:	4b1f      	ldr	r3, [pc, #124]	; (6b7c <RTC_Handler+0xc0>)
    6b00:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    6b02:	bc3c      	pop	{r2, r3, r4, r5}
    6b04:	4690      	mov	r8, r2
    6b06:	4699      	mov	r9, r3
    6b08:	46a2      	mov	sl, r4
    6b0a:	46ab      	mov	fp, r5
    6b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    6b0e:	4653      	mov	r3, sl
    6b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6b12:	4798      	blx	r3
    6b14:	e7f3      	b.n	6afe <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    6b16:	465b      	mov	r3, fp
    6b18:	401d      	ands	r5, r3
    6b1a:	81b5      	strh	r5, [r6, #12]
    6b1c:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    6b1e:	2c08      	cmp	r4, #8
    6b20:	d0ef      	beq.n	6b02 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    6b22:	0023      	movs	r3, r4
    6b24:	464d      	mov	r5, r9
    6b26:	40a5      	lsls	r5, r4
    6b28:	422f      	tst	r7, r5
    6b2a:	d0f4      	beq.n	6b16 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    6b2c:	4642      	mov	r2, r8
    6b2e:	4122      	asrs	r2, r4
    6b30:	4649      	mov	r1, r9
    6b32:	4211      	tst	r1, r2
    6b34:	d0ef      	beq.n	6b16 <RTC_Handler+0x5a>
				module->callbacks[i]();
    6b36:	3302      	adds	r3, #2
    6b38:	009b      	lsls	r3, r3, #2
    6b3a:	4652      	mov	r2, sl
    6b3c:	589b      	ldr	r3, [r3, r2]
    6b3e:	4798      	blx	r3
    6b40:	e7e9      	b.n	6b16 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    6b42:	05da      	lsls	r2, r3, #23
    6b44:	d50a      	bpl.n	6b5c <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    6b46:	4643      	mov	r3, r8
    6b48:	05db      	lsls	r3, r3, #23
    6b4a:	d403      	bmi.n	6b54 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    6b4c:	2380      	movs	r3, #128	; 0x80
    6b4e:	005b      	lsls	r3, r3, #1
    6b50:	81b3      	strh	r3, [r6, #12]
    6b52:	e7d6      	b.n	6b02 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    6b54:	4653      	mov	r3, sl
    6b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b58:	4798      	blx	r3
    6b5a:	e7f7      	b.n	6b4c <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    6b5c:	059b      	lsls	r3, r3, #22
    6b5e:	d5d0      	bpl.n	6b02 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    6b60:	4643      	mov	r3, r8
    6b62:	059b      	lsls	r3, r3, #22
    6b64:	d403      	bmi.n	6b6e <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    6b66:	2380      	movs	r3, #128	; 0x80
    6b68:	009b      	lsls	r3, r3, #2
    6b6a:	81b3      	strh	r3, [r6, #12]
}
    6b6c:	e7c9      	b.n	6b02 <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    6b6e:	4653      	mov	r3, sl
    6b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6b72:	4798      	blx	r3
    6b74:	e7f7      	b.n	6b66 <RTC_Handler+0xaa>
    6b76:	46c0      	nop			; (mov r8, r8)
    6b78:	20001cfc 	.word	0x20001cfc
    6b7c:	ffff8000 	.word	0xffff8000

00006b80 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    6b80:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    6b82:	2207      	movs	r2, #7
    6b84:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    6b86:	421a      	tst	r2, r3
    6b88:	d1fc      	bne.n	6b84 <_i2c_master_wait_for_sync+0x4>
}
    6b8a:	4770      	bx	lr

00006b8c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    6b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b8e:	46d6      	mov	lr, sl
    6b90:	464f      	mov	r7, r9
    6b92:	4646      	mov	r6, r8
    6b94:	b5c0      	push	{r6, r7, lr}
    6b96:	b08a      	sub	sp, #40	; 0x28
    6b98:	0007      	movs	r7, r0
    6b9a:	000e      	movs	r6, r1
    6b9c:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    6b9e:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6ba0:	0008      	movs	r0, r1
    6ba2:	4b9c      	ldr	r3, [pc, #624]	; (6e14 <i2c_master_init+0x288>)
    6ba4:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    6ba6:	2805      	cmp	r0, #5
    6ba8:	d100      	bne.n	6bac <i2c_master_init+0x20>
    6baa:	e12b      	b.n	6e04 <i2c_master_init+0x278>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6bac:	0005      	movs	r5, r0
    6bae:	3512      	adds	r5, #18
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    6bb0:	4a99      	ldr	r2, [pc, #612]	; (6e18 <i2c_master_init+0x28c>)
    6bb2:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6bb4:	2301      	movs	r3, #1
    6bb6:	4083      	lsls	r3, r0
    6bb8:	430b      	orrs	r3, r1
    6bba:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    6bbc:	a909      	add	r1, sp, #36	; 0x24
    6bbe:	7b23      	ldrb	r3, [r4, #12]
    6bc0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6bc2:	b2ed      	uxtb	r5, r5
    6bc4:	0028      	movs	r0, r5
    6bc6:	4b95      	ldr	r3, [pc, #596]	; (6e1c <i2c_master_init+0x290>)
    6bc8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6bca:	0028      	movs	r0, r5
    6bcc:	4b94      	ldr	r3, [pc, #592]	; (6e20 <i2c_master_init+0x294>)
    6bce:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    6bd0:	7b20      	ldrb	r0, [r4, #12]
    6bd2:	2100      	movs	r1, #0
    6bd4:	4b93      	ldr	r3, [pc, #588]	; (6e24 <i2c_master_init+0x298>)
    6bd6:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    6bd8:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    6bda:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    6bdc:	079b      	lsls	r3, r3, #30
    6bde:	d505      	bpl.n	6bec <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    6be0:	b00a      	add	sp, #40	; 0x28
    6be2:	bc1c      	pop	{r2, r3, r4}
    6be4:	4690      	mov	r8, r2
    6be6:	4699      	mov	r9, r3
    6be8:	46a2      	mov	sl, r4
    6bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    6bec:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    6bee:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    6bf0:	07db      	lsls	r3, r3, #31
    6bf2:	d4f5      	bmi.n	6be0 <i2c_master_init+0x54>
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    6bf4:	2314      	movs	r3, #20
    6bf6:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6bf8:	683b      	ldr	r3, [r7, #0]
    6bfa:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    6bfc:	0018      	movs	r0, r3
    6bfe:	4b85      	ldr	r3, [pc, #532]	; (6e14 <i2c_master_init+0x288>)
    6c00:	4798      	blx	r3
    6c02:	0005      	movs	r5, r0
    6c04:	2380      	movs	r3, #128	; 0x80
    6c06:	aa08      	add	r2, sp, #32
    6c08:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6c0a:	2300      	movs	r3, #0
    6c0c:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6c0e:	2201      	movs	r2, #1
    6c10:	a908      	add	r1, sp, #32
    6c12:	708a      	strb	r2, [r1, #2]
	config->powersave    = false;
    6c14:	70cb      	strb	r3, [r1, #3]
	uint32_t pad0 = config->pinmux_pad0;
    6c16:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    6c18:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    6c1a:	2800      	cmp	r0, #0
    6c1c:	d100      	bne.n	6c20 <i2c_master_init+0x94>
    6c1e:	e0ae      	b.n	6d7e <i2c_master_init+0x1f2>
	pin_conf.mux_position = pad0 & 0xFFFF;
    6c20:	ab08      	add	r3, sp, #32
    6c22:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    6c24:	2302      	movs	r3, #2
    6c26:	aa08      	add	r2, sp, #32
    6c28:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    6c2a:	0c00      	lsrs	r0, r0, #16
    6c2c:	b2c0      	uxtb	r0, r0
    6c2e:	0011      	movs	r1, r2
    6c30:	4b7d      	ldr	r3, [pc, #500]	; (6e28 <i2c_master_init+0x29c>)
    6c32:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    6c34:	2e00      	cmp	r6, #0
    6c36:	d100      	bne.n	6c3a <i2c_master_init+0xae>
    6c38:	e0a6      	b.n	6d88 <i2c_master_init+0x1fc>
	pin_conf.mux_position = pad1 & 0xFFFF;
    6c3a:	ab08      	add	r3, sp, #32
    6c3c:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    6c3e:	2302      	movs	r3, #2
    6c40:	aa08      	add	r2, sp, #32
    6c42:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    6c44:	0c36      	lsrs	r6, r6, #16
    6c46:	b2f0      	uxtb	r0, r6
    6c48:	0011      	movs	r1, r2
    6c4a:	4b77      	ldr	r3, [pc, #476]	; (6e28 <i2c_master_init+0x29c>)
    6c4c:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    6c4e:	8aa3      	ldrh	r3, [r4, #20]
    6c50:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    6c52:	8ae3      	ldrh	r3, [r4, #22]
    6c54:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    6c56:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    6c58:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    6c5a:	2b00      	cmp	r3, #0
    6c5c:	d104      	bne.n	6c68 <i2c_master_init+0xdc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    6c5e:	4b73      	ldr	r3, [pc, #460]	; (6e2c <i2c_master_init+0x2a0>)
    6c60:	789b      	ldrb	r3, [r3, #2]
    6c62:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    6c64:	0fdb      	lsrs	r3, r3, #31
    6c66:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    6c68:	68a1      	ldr	r1, [r4, #8]
    6c6a:	6923      	ldr	r3, [r4, #16]
    6c6c:	430b      	orrs	r3, r1
    6c6e:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    6c70:	2224      	movs	r2, #36	; 0x24
    6c72:	5ca2      	ldrb	r2, [r4, r2]
    6c74:	2a00      	cmp	r2, #0
    6c76:	d002      	beq.n	6c7e <i2c_master_init+0xf2>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    6c78:	2280      	movs	r2, #128	; 0x80
    6c7a:	05d2      	lsls	r2, r2, #23
    6c7c:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    6c7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6c80:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    6c82:	222c      	movs	r2, #44	; 0x2c
    6c84:	5ca2      	ldrb	r2, [r4, r2]
    6c86:	2a00      	cmp	r2, #0
    6c88:	d103      	bne.n	6c92 <i2c_master_init+0x106>
    6c8a:	2280      	movs	r2, #128	; 0x80
    6c8c:	0492      	lsls	r2, r2, #18
    6c8e:	4291      	cmp	r1, r2
    6c90:	d102      	bne.n	6c98 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    6c92:	2280      	movs	r2, #128	; 0x80
    6c94:	0512      	lsls	r2, r2, #20
    6c96:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    6c98:	222d      	movs	r2, #45	; 0x2d
    6c9a:	5ca2      	ldrb	r2, [r4, r2]
    6c9c:	2a00      	cmp	r2, #0
    6c9e:	d002      	beq.n	6ca6 <i2c_master_init+0x11a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    6ca0:	2280      	movs	r2, #128	; 0x80
    6ca2:	0412      	lsls	r2, r2, #16
    6ca4:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    6ca6:	222e      	movs	r2, #46	; 0x2e
    6ca8:	5ca2      	ldrb	r2, [r4, r2]
    6caa:	2a00      	cmp	r2, #0
    6cac:	d002      	beq.n	6cb4 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    6cae:	2280      	movs	r2, #128	; 0x80
    6cb0:	03d2      	lsls	r2, r2, #15
    6cb2:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    6cb4:	4642      	mov	r2, r8
    6cb6:	6812      	ldr	r2, [r2, #0]
    6cb8:	4313      	orrs	r3, r2
    6cba:	4642      	mov	r2, r8
    6cbc:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    6cbe:	2380      	movs	r3, #128	; 0x80
    6cc0:	005b      	lsls	r3, r3, #1
    6cc2:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    6cc4:	3512      	adds	r5, #18
    6cc6:	b2e8      	uxtb	r0, r5
    6cc8:	4b59      	ldr	r3, [pc, #356]	; (6e30 <i2c_master_init+0x2a4>)
    6cca:	4798      	blx	r3
    6ccc:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    6cce:	23fa      	movs	r3, #250	; 0xfa
    6cd0:	009b      	lsls	r3, r3, #2
    6cd2:	6822      	ldr	r2, [r4, #0]
    6cd4:	435a      	muls	r2, r3
    6cd6:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6cd8:	6863      	ldr	r3, [r4, #4]
    6cda:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    6cdc:	4d55      	ldr	r5, [pc, #340]	; (6e34 <i2c_master_init+0x2a8>)
    6cde:	47a8      	blx	r5
    6ce0:	9000      	str	r0, [sp, #0]
    6ce2:	9101      	str	r1, [sp, #4]
    6ce4:	464b      	mov	r3, r9
    6ce6:	0058      	lsls	r0, r3, #1
    6ce8:	47a8      	blx	r5
    6cea:	9002      	str	r0, [sp, #8]
    6cec:	9103      	str	r1, [sp, #12]
    6cee:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    6cf0:	47a8      	blx	r5
    6cf2:	9004      	str	r0, [sp, #16]
    6cf4:	9105      	str	r1, [sp, #20]
    6cf6:	4f50      	ldr	r7, [pc, #320]	; (6e38 <i2c_master_init+0x2ac>)
    6cf8:	4a50      	ldr	r2, [pc, #320]	; (6e3c <i2c_master_init+0x2b0>)
    6cfa:	4b51      	ldr	r3, [pc, #324]	; (6e40 <i2c_master_init+0x2b4>)
    6cfc:	9800      	ldr	r0, [sp, #0]
    6cfe:	9901      	ldr	r1, [sp, #4]
    6d00:	47b8      	blx	r7
    6d02:	0002      	movs	r2, r0
    6d04:	000b      	movs	r3, r1
    6d06:	9804      	ldr	r0, [sp, #16]
    6d08:	9905      	ldr	r1, [sp, #20]
    6d0a:	47b8      	blx	r7
    6d0c:	4e4d      	ldr	r6, [pc, #308]	; (6e44 <i2c_master_init+0x2b8>)
    6d0e:	2200      	movs	r2, #0
    6d10:	4b4d      	ldr	r3, [pc, #308]	; (6e48 <i2c_master_init+0x2bc>)
    6d12:	47b0      	blx	r6
    6d14:	9004      	str	r0, [sp, #16]
    6d16:	9105      	str	r1, [sp, #20]
    6d18:	4648      	mov	r0, r9
    6d1a:	47a8      	blx	r5
    6d1c:	0002      	movs	r2, r0
    6d1e:	000b      	movs	r3, r1
    6d20:	9804      	ldr	r0, [sp, #16]
    6d22:	9905      	ldr	r1, [sp, #20]
    6d24:	47b8      	blx	r7
    6d26:	0002      	movs	r2, r0
    6d28:	000b      	movs	r3, r1
    6d2a:	4d48      	ldr	r5, [pc, #288]	; (6e4c <i2c_master_init+0x2c0>)
    6d2c:	9800      	ldr	r0, [sp, #0]
    6d2e:	9901      	ldr	r1, [sp, #4]
    6d30:	47a8      	blx	r5
    6d32:	9a02      	ldr	r2, [sp, #8]
    6d34:	9b03      	ldr	r3, [sp, #12]
    6d36:	47b0      	blx	r6
    6d38:	2200      	movs	r2, #0
    6d3a:	4b45      	ldr	r3, [pc, #276]	; (6e50 <i2c_master_init+0x2c4>)
    6d3c:	47a8      	blx	r5
    6d3e:	9a02      	ldr	r2, [sp, #8]
    6d40:	9b03      	ldr	r3, [sp, #12]
    6d42:	4d44      	ldr	r5, [pc, #272]	; (6e54 <i2c_master_init+0x2c8>)
    6d44:	47a8      	blx	r5
    6d46:	4b44      	ldr	r3, [pc, #272]	; (6e58 <i2c_master_init+0x2cc>)
    6d48:	4798      	blx	r3
    6d4a:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    6d4c:	2380      	movs	r3, #128	; 0x80
    6d4e:	049b      	lsls	r3, r3, #18
    6d50:	68a2      	ldr	r2, [r4, #8]
    6d52:	429a      	cmp	r2, r3
    6d54:	d01e      	beq.n	6d94 <i2c_master_init+0x208>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6d56:	0003      	movs	r3, r0
    6d58:	2040      	movs	r0, #64	; 0x40
    6d5a:	2dff      	cmp	r5, #255	; 0xff
    6d5c:	d900      	bls.n	6d60 <i2c_master_init+0x1d4>
    6d5e:	e73f      	b.n	6be0 <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    6d60:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    6d62:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6d64:	25ff      	movs	r5, #255	; 0xff
    6d66:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    6d68:	0624      	lsls	r4, r4, #24
    6d6a:	4325      	orrs	r5, r4
    6d6c:	0400      	lsls	r0, r0, #16
    6d6e:	23ff      	movs	r3, #255	; 0xff
    6d70:	041b      	lsls	r3, r3, #16
    6d72:	4018      	ands	r0, r3
    6d74:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    6d76:	4643      	mov	r3, r8
    6d78:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    6d7a:	2000      	movs	r0, #0
    6d7c:	e730      	b.n	6be0 <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    6d7e:	2100      	movs	r1, #0
    6d80:	4640      	mov	r0, r8
    6d82:	4b36      	ldr	r3, [pc, #216]	; (6e5c <i2c_master_init+0x2d0>)
    6d84:	4798      	blx	r3
    6d86:	e74b      	b.n	6c20 <i2c_master_init+0x94>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    6d88:	2101      	movs	r1, #1
    6d8a:	4640      	mov	r0, r8
    6d8c:	4b33      	ldr	r3, [pc, #204]	; (6e5c <i2c_master_init+0x2d0>)
    6d8e:	4798      	blx	r3
    6d90:	0006      	movs	r6, r0
    6d92:	e752      	b.n	6c3a <i2c_master_init+0xae>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    6d94:	26fa      	movs	r6, #250	; 0xfa
    6d96:	00b6      	lsls	r6, r6, #2
    6d98:	4653      	mov	r3, sl
    6d9a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    6d9c:	9800      	ldr	r0, [sp, #0]
    6d9e:	9901      	ldr	r1, [sp, #4]
    6da0:	0002      	movs	r2, r0
    6da2:	000b      	movs	r3, r1
    6da4:	4c27      	ldr	r4, [pc, #156]	; (6e44 <i2c_master_init+0x2b8>)
    6da6:	47a0      	blx	r4
    6da8:	9000      	str	r0, [sp, #0]
    6daa:	9101      	str	r1, [sp, #4]
    6dac:	0030      	movs	r0, r6
    6dae:	4b21      	ldr	r3, [pc, #132]	; (6e34 <i2c_master_init+0x2a8>)
    6db0:	4798      	blx	r3
    6db2:	2200      	movs	r2, #0
    6db4:	4b2a      	ldr	r3, [pc, #168]	; (6e60 <i2c_master_init+0x2d4>)
    6db6:	47b8      	blx	r7
    6db8:	0002      	movs	r2, r0
    6dba:	000b      	movs	r3, r1
    6dbc:	9800      	ldr	r0, [sp, #0]
    6dbe:	9901      	ldr	r1, [sp, #4]
    6dc0:	4c24      	ldr	r4, [pc, #144]	; (6e54 <i2c_master_init+0x2c8>)
    6dc2:	47a0      	blx	r4
    6dc4:	2200      	movs	r2, #0
    6dc6:	4b22      	ldr	r3, [pc, #136]	; (6e50 <i2c_master_init+0x2c4>)
    6dc8:	4c20      	ldr	r4, [pc, #128]	; (6e4c <i2c_master_init+0x2c0>)
    6dca:	47a0      	blx	r4
    6dcc:	4b22      	ldr	r3, [pc, #136]	; (6e58 <i2c_master_init+0x2cc>)
    6dce:	4798      	blx	r3
    6dd0:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    6dd2:	d00c      	beq.n	6dee <i2c_master_init+0x262>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    6dd4:	0031      	movs	r1, r6
    6dd6:	9807      	ldr	r0, [sp, #28]
    6dd8:	4b22      	ldr	r3, [pc, #136]	; (6e64 <i2c_master_init+0x2d8>)
    6dda:	4798      	blx	r3
    6ddc:	3802      	subs	r0, #2
    6dde:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6de0:	002b      	movs	r3, r5
    6de2:	2dff      	cmp	r5, #255	; 0xff
    6de4:	d80c      	bhi.n	6e00 <i2c_master_init+0x274>
    6de6:	28ff      	cmp	r0, #255	; 0xff
    6de8:	d9bc      	bls.n	6d64 <i2c_master_init+0x1d8>
    6dea:	2040      	movs	r0, #64	; 0x40
    6dec:	e6f8      	b.n	6be0 <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    6dee:	0071      	lsls	r1, r6, #1
    6df0:	1e48      	subs	r0, r1, #1
    6df2:	9b07      	ldr	r3, [sp, #28]
    6df4:	469c      	mov	ip, r3
    6df6:	4460      	add	r0, ip
    6df8:	4b1a      	ldr	r3, [pc, #104]	; (6e64 <i2c_master_init+0x2d8>)
    6dfa:	4798      	blx	r3
    6dfc:	3801      	subs	r0, #1
    6dfe:	e7ef      	b.n	6de0 <i2c_master_init+0x254>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    6e00:	2040      	movs	r0, #64	; 0x40
    6e02:	e6ed      	b.n	6be0 <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    6e04:	4a04      	ldr	r2, [pc, #16]	; (6e18 <i2c_master_init+0x28c>)
    6e06:	6a13      	ldr	r3, [r2, #32]
    6e08:	2102      	movs	r1, #2
    6e0a:	430b      	orrs	r3, r1
    6e0c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    6e0e:	2518      	movs	r5, #24
    6e10:	e6d4      	b.n	6bbc <i2c_master_init+0x30>
    6e12:	46c0      	nop			; (mov r8, r8)
    6e14:	00007479 	.word	0x00007479
    6e18:	40000400 	.word	0x40000400
    6e1c:	00008559 	.word	0x00008559
    6e20:	000084e9 	.word	0x000084e9
    6e24:	0000732d 	.word	0x0000732d
    6e28:	00008655 	.word	0x00008655
    6e2c:	41002000 	.word	0x41002000
    6e30:	0000857d 	.word	0x0000857d
    6e34:	00011cc9 	.word	0x00011cc9
    6e38:	000110b1 	.word	0x000110b1
    6e3c:	e826d695 	.word	0xe826d695
    6e40:	3e112e0b 	.word	0x3e112e0b
    6e44:	00010429 	.word	0x00010429
    6e48:	40240000 	.word	0x40240000
    6e4c:	000115b1 	.word	0x000115b1
    6e50:	3ff00000 	.word	0x3ff00000
    6e54:	00010a49 	.word	0x00010a49
    6e58:	00011bdd 	.word	0x00011bdd
    6e5c:	00007379 	.word	0x00007379
    6e60:	40080000 	.word	0x40080000
    6e64:	0000f53d 	.word	0x0000f53d

00006e68 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6e68:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    6e6a:	7e1a      	ldrb	r2, [r3, #24]
    6e6c:	0792      	lsls	r2, r2, #30
    6e6e:	d507      	bpl.n	6e80 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    6e70:	2202      	movs	r2, #2
    6e72:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    6e74:	8b5b      	ldrh	r3, [r3, #26]
    6e76:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    6e78:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    6e7a:	17db      	asrs	r3, r3, #31
    6e7c:	4018      	ands	r0, r3
}
    6e7e:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    6e80:	8b5a      	ldrh	r2, [r3, #26]
    6e82:	0752      	lsls	r2, r2, #29
    6e84:	d506      	bpl.n	6e94 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    6e86:	6859      	ldr	r1, [r3, #4]
    6e88:	22c0      	movs	r2, #192	; 0xc0
    6e8a:	0292      	lsls	r2, r2, #10
    6e8c:	430a      	orrs	r2, r1
    6e8e:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    6e90:	2018      	movs	r0, #24
    6e92:	e7f4      	b.n	6e7e <_i2c_master_address_response+0x16>
	return STATUS_OK;
    6e94:	2000      	movs	r0, #0
    6e96:	e7f2      	b.n	6e7e <_i2c_master_address_response+0x16>

00006e98 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    6e98:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6e9a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    6e9c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6e9e:	2401      	movs	r4, #1
    6ea0:	2502      	movs	r5, #2
    6ea2:	7e11      	ldrb	r1, [r2, #24]
    6ea4:	4221      	tst	r1, r4
    6ea6:	d10b      	bne.n	6ec0 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    6ea8:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    6eaa:	4229      	tst	r1, r5
    6eac:	d106      	bne.n	6ebc <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    6eae:	3301      	adds	r3, #1
    6eb0:	b29b      	uxth	r3, r3
    6eb2:	8901      	ldrh	r1, [r0, #8]
    6eb4:	4299      	cmp	r1, r3
    6eb6:	d8f4      	bhi.n	6ea2 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    6eb8:	2012      	movs	r0, #18
    6eba:	e002      	b.n	6ec2 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    6ebc:	2000      	movs	r0, #0
    6ebe:	e000      	b.n	6ec2 <_i2c_master_wait_for_bus+0x2a>
    6ec0:	2000      	movs	r0, #0
}
    6ec2:	bd30      	pop	{r4, r5, pc}

00006ec4 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    6ec4:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6ec6:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6ec8:	6862      	ldr	r2, [r4, #4]
    6eca:	2380      	movs	r3, #128	; 0x80
    6ecc:	02db      	lsls	r3, r3, #11
    6ece:	4313      	orrs	r3, r2
    6ed0:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    6ed2:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6ed4:	4b02      	ldr	r3, [pc, #8]	; (6ee0 <_i2c_master_send_hs_master_code+0x1c>)
    6ed6:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    6ed8:	2301      	movs	r3, #1
    6eda:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    6edc:	bd10      	pop	{r4, pc}
    6ede:	46c0      	nop			; (mov r8, r8)
    6ee0:	00006e99 	.word	0x00006e99

00006ee4 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    6ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6ee6:	46de      	mov	lr, fp
    6ee8:	4657      	mov	r7, sl
    6eea:	464e      	mov	r6, r9
    6eec:	4645      	mov	r5, r8
    6eee:	b5e0      	push	{r5, r6, r7, lr}
    6ef0:	b083      	sub	sp, #12
    6ef2:	0006      	movs	r6, r0
    6ef4:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    6ef6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    6ef8:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    6efa:	682b      	ldr	r3, [r5, #0]
    6efc:	011b      	lsls	r3, r3, #4
    6efe:	0fdb      	lsrs	r3, r3, #31
    6f00:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    6f02:	7a4b      	ldrb	r3, [r1, #9]
    6f04:	2b00      	cmp	r3, #0
    6f06:	d12b      	bne.n	6f60 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6f08:	686b      	ldr	r3, [r5, #4]
    6f0a:	4a58      	ldr	r2, [pc, #352]	; (706c <_i2c_master_read_packet+0x188>)
    6f0c:	4013      	ands	r3, r2
    6f0e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    6f10:	464b      	mov	r3, r9
    6f12:	7a1b      	ldrb	r3, [r3, #8]
    6f14:	2b00      	cmp	r3, #0
    6f16:	d127      	bne.n	6f68 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    6f18:	464b      	mov	r3, r9
    6f1a:	881b      	ldrh	r3, [r3, #0]
    6f1c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    6f1e:	464a      	mov	r2, r9
    6f20:	7a52      	ldrb	r2, [r2, #9]
    6f22:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    6f24:	4313      	orrs	r3, r2
    6f26:	2201      	movs	r2, #1
    6f28:	4313      	orrs	r3, r2
    6f2a:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    6f2c:	0030      	movs	r0, r6
    6f2e:	4b50      	ldr	r3, [pc, #320]	; (7070 <_i2c_master_read_packet+0x18c>)
    6f30:	4798      	blx	r3
    6f32:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    6f34:	4653      	mov	r3, sl
    6f36:	2b00      	cmp	r3, #0
    6f38:	d003      	beq.n	6f42 <_i2c_master_read_packet+0x5e>
    6f3a:	464b      	mov	r3, r9
    6f3c:	885b      	ldrh	r3, [r3, #2]
    6f3e:	2b01      	cmp	r3, #1
    6f40:	d03b      	beq.n	6fba <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    6f42:	686b      	ldr	r3, [r5, #4]
    6f44:	4a49      	ldr	r2, [pc, #292]	; (706c <_i2c_master_read_packet+0x188>)
    6f46:	4013      	ands	r3, r2
    6f48:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    6f4a:	9b01      	ldr	r3, [sp, #4]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d03a      	beq.n	6fc6 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    6f50:	9801      	ldr	r0, [sp, #4]
    6f52:	b003      	add	sp, #12
    6f54:	bc3c      	pop	{r2, r3, r4, r5}
    6f56:	4690      	mov	r8, r2
    6f58:	4699      	mov	r9, r3
    6f5a:	46a2      	mov	sl, r4
    6f5c:	46ab      	mov	fp, r5
    6f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    6f60:	7a89      	ldrb	r1, [r1, #10]
    6f62:	4b44      	ldr	r3, [pc, #272]	; (7074 <_i2c_master_read_packet+0x190>)
    6f64:	4798      	blx	r3
    6f66:	e7cf      	b.n	6f08 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    6f68:	464b      	mov	r3, r9
    6f6a:	881b      	ldrh	r3, [r3, #0]
    6f6c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6f6e:	464a      	mov	r2, r9
    6f70:	7a52      	ldrb	r2, [r2, #9]
    6f72:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    6f74:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6f76:	2280      	movs	r2, #128	; 0x80
    6f78:	0212      	lsls	r2, r2, #8
    6f7a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    6f7c:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    6f7e:	0030      	movs	r0, r6
    6f80:	4b3b      	ldr	r3, [pc, #236]	; (7070 <_i2c_master_read_packet+0x18c>)
    6f82:	4798      	blx	r3
    6f84:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    6f86:	686b      	ldr	r3, [r5, #4]
    6f88:	4a38      	ldr	r2, [pc, #224]	; (706c <_i2c_master_read_packet+0x188>)
    6f8a:	4013      	ands	r3, r2
    6f8c:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    6f8e:	2800      	cmp	r0, #0
    6f90:	d1de      	bne.n	6f50 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    6f92:	0030      	movs	r0, r6
    6f94:	4b38      	ldr	r3, [pc, #224]	; (7078 <_i2c_master_read_packet+0x194>)
    6f96:	4798      	blx	r3
    6f98:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    6f9a:	2800      	cmp	r0, #0
    6f9c:	d1d8      	bne.n	6f50 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    6f9e:	464b      	mov	r3, r9
    6fa0:	881b      	ldrh	r3, [r3, #0]
    6fa2:	0a1b      	lsrs	r3, r3, #8
    6fa4:	2278      	movs	r2, #120	; 0x78
    6fa6:	4313      	orrs	r3, r2
    6fa8:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    6faa:	464a      	mov	r2, r9
    6fac:	7a52      	ldrb	r2, [r2, #9]
    6fae:	0392      	lsls	r2, r2, #14
    6fb0:	2101      	movs	r1, #1
    6fb2:	430a      	orrs	r2, r1
    6fb4:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    6fb6:	626b      	str	r3, [r5, #36]	; 0x24
    6fb8:	e7b8      	b.n	6f2c <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    6fba:	686a      	ldr	r2, [r5, #4]
    6fbc:	2380      	movs	r3, #128	; 0x80
    6fbe:	02db      	lsls	r3, r3, #11
    6fc0:	4313      	orrs	r3, r2
    6fc2:	606b      	str	r3, [r5, #4]
    6fc4:	e7c1      	b.n	6f4a <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    6fc6:	0030      	movs	r0, r6
    6fc8:	4b2b      	ldr	r3, [pc, #172]	; (7078 <_i2c_master_read_packet+0x194>)
    6fca:	4798      	blx	r3
    6fcc:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    6fce:	2800      	cmp	r0, #0
    6fd0:	d1be      	bne.n	6f50 <_i2c_master_read_packet+0x6c>
    6fd2:	3c01      	subs	r4, #1
    6fd4:	b2a4      	uxth	r4, r4
    6fd6:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    6fd8:	4b28      	ldr	r3, [pc, #160]	; (707c <_i2c_master_read_packet+0x198>)
    6fda:	469b      	mov	fp, r3
    6fdc:	e015      	b.n	700a <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    6fde:	2c01      	cmp	r4, #1
    6fe0:	d020      	beq.n	7024 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    6fe2:	0030      	movs	r0, r6
    6fe4:	4b26      	ldr	r3, [pc, #152]	; (7080 <_i2c_master_read_packet+0x19c>)
    6fe6:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    6fe8:	4643      	mov	r3, r8
    6fea:	1c5f      	adds	r7, r3, #1
    6fec:	b2bf      	uxth	r7, r7
    6fee:	2328      	movs	r3, #40	; 0x28
    6ff0:	5ceb      	ldrb	r3, [r5, r3]
    6ff2:	464a      	mov	r2, r9
    6ff4:	6852      	ldr	r2, [r2, #4]
    6ff6:	4641      	mov	r1, r8
    6ff8:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    6ffa:	0030      	movs	r0, r6
    6ffc:	4b1c      	ldr	r3, [pc, #112]	; (7070 <_i2c_master_read_packet+0x18c>)
    6ffe:	4798      	blx	r3
    7000:	3c01      	subs	r4, #1
    7002:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    7004:	2800      	cmp	r0, #0
    7006:	d115      	bne.n	7034 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    7008:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    700a:	455c      	cmp	r4, fp
    700c:	d014      	beq.n	7038 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    700e:	8b6b      	ldrh	r3, [r5, #26]
    7010:	069b      	lsls	r3, r3, #26
    7012:	d527      	bpl.n	7064 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    7014:	7af3      	ldrb	r3, [r6, #11]
    7016:	2b00      	cmp	r3, #0
    7018:	d0e3      	beq.n	6fe2 <_i2c_master_read_packet+0xfe>
    701a:	4653      	mov	r3, sl
    701c:	2b00      	cmp	r3, #0
    701e:	d1de      	bne.n	6fde <_i2c_master_read_packet+0xfa>
    7020:	2c00      	cmp	r4, #0
    7022:	d1de      	bne.n	6fe2 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    7024:	686a      	ldr	r2, [r5, #4]
    7026:	2380      	movs	r3, #128	; 0x80
    7028:	02db      	lsls	r3, r3, #11
    702a:	4313      	orrs	r3, r2
    702c:	606b      	str	r3, [r5, #4]
    702e:	3c01      	subs	r4, #1
    7030:	b2a4      	uxth	r4, r4
    7032:	e7ea      	b.n	700a <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    7034:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    7036:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    7038:	7ab3      	ldrb	r3, [r6, #10]
    703a:	2b00      	cmp	r3, #0
    703c:	d109      	bne.n	7052 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    703e:	0030      	movs	r0, r6
    7040:	4b0f      	ldr	r3, [pc, #60]	; (7080 <_i2c_master_read_packet+0x19c>)
    7042:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    7044:	2328      	movs	r3, #40	; 0x28
    7046:	5cea      	ldrb	r2, [r5, r3]
    7048:	464b      	mov	r3, r9
    704a:	685b      	ldr	r3, [r3, #4]
    704c:	4641      	mov	r1, r8
    704e:	545a      	strb	r2, [r3, r1]
    7050:	e77e      	b.n	6f50 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    7052:	0030      	movs	r0, r6
    7054:	4b0a      	ldr	r3, [pc, #40]	; (7080 <_i2c_master_read_packet+0x19c>)
    7056:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7058:	686a      	ldr	r2, [r5, #4]
    705a:	23c0      	movs	r3, #192	; 0xc0
    705c:	029b      	lsls	r3, r3, #10
    705e:	4313      	orrs	r3, r2
    7060:	606b      	str	r3, [r5, #4]
    7062:	e7ec      	b.n	703e <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    7064:	2341      	movs	r3, #65	; 0x41
    7066:	9301      	str	r3, [sp, #4]
    7068:	e772      	b.n	6f50 <_i2c_master_read_packet+0x6c>
    706a:	46c0      	nop			; (mov r8, r8)
    706c:	fffbffff 	.word	0xfffbffff
    7070:	00006e99 	.word	0x00006e99
    7074:	00006ec5 	.word	0x00006ec5
    7078:	00006e69 	.word	0x00006e69
    707c:	0000ffff 	.word	0x0000ffff
    7080:	00006b81 	.word	0x00006b81

00007084 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    7084:	b5f0      	push	{r4, r5, r6, r7, lr}
    7086:	46de      	mov	lr, fp
    7088:	4657      	mov	r7, sl
    708a:	464e      	mov	r6, r9
    708c:	4645      	mov	r5, r8
    708e:	b5e0      	push	{r5, r6, r7, lr}
    7090:	b083      	sub	sp, #12
    7092:	0006      	movs	r6, r0
    7094:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    7096:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    7098:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    709a:	4b32      	ldr	r3, [pc, #200]	; (7164 <_i2c_master_write_packet+0xe0>)
    709c:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    709e:	7a7b      	ldrb	r3, [r7, #9]
    70a0:	2b00      	cmp	r3, #0
    70a2:	d11d      	bne.n	70e0 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    70a4:	686b      	ldr	r3, [r5, #4]
    70a6:	4a30      	ldr	r2, [pc, #192]	; (7168 <_i2c_master_write_packet+0xe4>)
    70a8:	4013      	ands	r3, r2
    70aa:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    70ac:	7a3b      	ldrb	r3, [r7, #8]
    70ae:	2b00      	cmp	r3, #0
    70b0:	d01b      	beq.n	70ea <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    70b2:	883b      	ldrh	r3, [r7, #0]
    70b4:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    70b6:	7a7a      	ldrb	r2, [r7, #9]
    70b8:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    70ba:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    70bc:	2280      	movs	r2, #128	; 0x80
    70be:	0212      	lsls	r2, r2, #8
    70c0:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    70c2:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    70c4:	0030      	movs	r0, r6
    70c6:	4b29      	ldr	r3, [pc, #164]	; (716c <_i2c_master_write_packet+0xe8>)
    70c8:	4798      	blx	r3
    70ca:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    70cc:	2800      	cmp	r0, #0
    70ce:	d013      	beq.n	70f8 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    70d0:	9801      	ldr	r0, [sp, #4]
    70d2:	b003      	add	sp, #12
    70d4:	bc3c      	pop	{r2, r3, r4, r5}
    70d6:	4690      	mov	r8, r2
    70d8:	4699      	mov	r9, r3
    70da:	46a2      	mov	sl, r4
    70dc:	46ab      	mov	fp, r5
    70de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    70e0:	7ab9      	ldrb	r1, [r7, #10]
    70e2:	0030      	movs	r0, r6
    70e4:	4b22      	ldr	r3, [pc, #136]	; (7170 <_i2c_master_write_packet+0xec>)
    70e6:	4798      	blx	r3
    70e8:	e7dc      	b.n	70a4 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    70ea:	883b      	ldrh	r3, [r7, #0]
    70ec:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    70ee:	7a7a      	ldrb	r2, [r7, #9]
    70f0:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    70f2:	4313      	orrs	r3, r2
    70f4:	626b      	str	r3, [r5, #36]	; 0x24
    70f6:	e7e5      	b.n	70c4 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    70f8:	0030      	movs	r0, r6
    70fa:	4b1e      	ldr	r3, [pc, #120]	; (7174 <_i2c_master_write_packet+0xf0>)
    70fc:	4798      	blx	r3
    70fe:	1e03      	subs	r3, r0, #0
    7100:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    7102:	d1e5      	bne.n	70d0 <_i2c_master_write_packet+0x4c>
    7104:	46a0      	mov	r8, r4
    7106:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    7108:	3320      	adds	r3, #32
    710a:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    710c:	4b15      	ldr	r3, [pc, #84]	; (7164 <_i2c_master_write_packet+0xe0>)
    710e:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    7110:	4b16      	ldr	r3, [pc, #88]	; (716c <_i2c_master_write_packet+0xe8>)
    7112:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    7114:	4544      	cmp	r4, r8
    7116:	d015      	beq.n	7144 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    7118:	8b6b      	ldrh	r3, [r5, #26]
    711a:	464a      	mov	r2, r9
    711c:	4213      	tst	r3, r2
    711e:	d01d      	beq.n	715c <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    7120:	0030      	movs	r0, r6
    7122:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    7124:	687b      	ldr	r3, [r7, #4]
    7126:	5d1a      	ldrb	r2, [r3, r4]
    7128:	2328      	movs	r3, #40	; 0x28
    712a:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    712c:	0030      	movs	r0, r6
    712e:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    7130:	2800      	cmp	r0, #0
    7132:	d106      	bne.n	7142 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    7134:	8b6b      	ldrh	r3, [r5, #26]
    7136:	3401      	adds	r4, #1
    7138:	075b      	lsls	r3, r3, #29
    713a:	d5eb      	bpl.n	7114 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    713c:	231e      	movs	r3, #30
    713e:	9301      	str	r3, [sp, #4]
    7140:	e000      	b.n	7144 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    7142:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    7144:	7ab3      	ldrb	r3, [r6, #10]
    7146:	2b00      	cmp	r3, #0
    7148:	d0c2      	beq.n	70d0 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    714a:	0030      	movs	r0, r6
    714c:	4b05      	ldr	r3, [pc, #20]	; (7164 <_i2c_master_write_packet+0xe0>)
    714e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    7150:	686a      	ldr	r2, [r5, #4]
    7152:	23c0      	movs	r3, #192	; 0xc0
    7154:	029b      	lsls	r3, r3, #10
    7156:	4313      	orrs	r3, r2
    7158:	606b      	str	r3, [r5, #4]
    715a:	e7b9      	b.n	70d0 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    715c:	2341      	movs	r3, #65	; 0x41
    715e:	9301      	str	r3, [sp, #4]
    7160:	e7b6      	b.n	70d0 <_i2c_master_write_packet+0x4c>
    7162:	46c0      	nop			; (mov r8, r8)
    7164:	00006b81 	.word	0x00006b81
    7168:	fffbffff 	.word	0xfffbffff
    716c:	00006e99 	.word	0x00006e99
    7170:	00006ec5 	.word	0x00006ec5
    7174:	00006e69 	.word	0x00006e69

00007178 <i2c_master_read_packet_wait>:
{
    7178:	b510      	push	{r4, lr}
	module->send_stop = true;
    717a:	2301      	movs	r3, #1
    717c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    717e:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    7180:	4b01      	ldr	r3, [pc, #4]	; (7188 <i2c_master_read_packet_wait+0x10>)
    7182:	4798      	blx	r3
}
    7184:	bd10      	pop	{r4, pc}
    7186:	46c0      	nop			; (mov r8, r8)
    7188:	00006ee5 	.word	0x00006ee5

0000718c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    718c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    718e:	2301      	movs	r3, #1
    7190:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    7192:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    7194:	4b01      	ldr	r3, [pc, #4]	; (719c <i2c_master_write_packet_wait+0x10>)
    7196:	4798      	blx	r3
}
    7198:	bd10      	pop	{r4, pc}
    719a:	46c0      	nop			; (mov r8, r8)
    719c:	00007085 	.word	0x00007085

000071a0 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    71a0:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    71a2:	2300      	movs	r3, #0
    71a4:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    71a6:	3301      	adds	r3, #1
    71a8:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    71aa:	4b01      	ldr	r3, [pc, #4]	; (71b0 <i2c_master_write_packet_wait_no_stop+0x10>)
    71ac:	4798      	blx	r3
}
    71ae:	bd10      	pop	{r4, pc}
    71b0:	00007085 	.word	0x00007085

000071b4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    71b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    71b6:	46de      	mov	lr, fp
    71b8:	4657      	mov	r7, sl
    71ba:	464e      	mov	r6, r9
    71bc:	4645      	mov	r5, r8
    71be:	b5e0      	push	{r5, r6, r7, lr}
    71c0:	b087      	sub	sp, #28
    71c2:	4680      	mov	r8, r0
    71c4:	9104      	str	r1, [sp, #16]
    71c6:	0016      	movs	r6, r2
    71c8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    71ca:	2200      	movs	r2, #0
    71cc:	2300      	movs	r3, #0
    71ce:	2100      	movs	r1, #0
    71d0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    71d2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    71d4:	2001      	movs	r0, #1
    71d6:	0021      	movs	r1, r4
    71d8:	9600      	str	r6, [sp, #0]
    71da:	9701      	str	r7, [sp, #4]
    71dc:	465c      	mov	r4, fp
    71de:	9403      	str	r4, [sp, #12]
    71e0:	4644      	mov	r4, r8
    71e2:	9405      	str	r4, [sp, #20]
    71e4:	e013      	b.n	720e <long_division+0x5a>
    71e6:	2420      	movs	r4, #32
    71e8:	1a64      	subs	r4, r4, r1
    71ea:	0005      	movs	r5, r0
    71ec:	40e5      	lsrs	r5, r4
    71ee:	46a8      	mov	r8, r5
    71f0:	e014      	b.n	721c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    71f2:	9c00      	ldr	r4, [sp, #0]
    71f4:	9d01      	ldr	r5, [sp, #4]
    71f6:	1b12      	subs	r2, r2, r4
    71f8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    71fa:	465c      	mov	r4, fp
    71fc:	464d      	mov	r5, r9
    71fe:	432c      	orrs	r4, r5
    7200:	46a3      	mov	fp, r4
    7202:	9c03      	ldr	r4, [sp, #12]
    7204:	4645      	mov	r5, r8
    7206:	432c      	orrs	r4, r5
    7208:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    720a:	3901      	subs	r1, #1
    720c:	d325      	bcc.n	725a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    720e:	2420      	movs	r4, #32
    7210:	4264      	negs	r4, r4
    7212:	190c      	adds	r4, r1, r4
    7214:	d4e7      	bmi.n	71e6 <long_division+0x32>
    7216:	0005      	movs	r5, r0
    7218:	40a5      	lsls	r5, r4
    721a:	46a8      	mov	r8, r5
    721c:	0004      	movs	r4, r0
    721e:	408c      	lsls	r4, r1
    7220:	46a1      	mov	r9, r4
		r = r << 1;
    7222:	1892      	adds	r2, r2, r2
    7224:	415b      	adcs	r3, r3
    7226:	0014      	movs	r4, r2
    7228:	001d      	movs	r5, r3
		if (n & bit_shift) {
    722a:	9e05      	ldr	r6, [sp, #20]
    722c:	464f      	mov	r7, r9
    722e:	403e      	ands	r6, r7
    7230:	46b4      	mov	ip, r6
    7232:	9e04      	ldr	r6, [sp, #16]
    7234:	4647      	mov	r7, r8
    7236:	403e      	ands	r6, r7
    7238:	46b2      	mov	sl, r6
    723a:	4666      	mov	r6, ip
    723c:	4657      	mov	r7, sl
    723e:	433e      	orrs	r6, r7
    7240:	d003      	beq.n	724a <long_division+0x96>
			r |= 0x01;
    7242:	0006      	movs	r6, r0
    7244:	4326      	orrs	r6, r4
    7246:	0032      	movs	r2, r6
    7248:	002b      	movs	r3, r5
		if (r >= d) {
    724a:	9c00      	ldr	r4, [sp, #0]
    724c:	9d01      	ldr	r5, [sp, #4]
    724e:	429d      	cmp	r5, r3
    7250:	d8db      	bhi.n	720a <long_division+0x56>
    7252:	d1ce      	bne.n	71f2 <long_division+0x3e>
    7254:	4294      	cmp	r4, r2
    7256:	d8d8      	bhi.n	720a <long_division+0x56>
    7258:	e7cb      	b.n	71f2 <long_division+0x3e>
    725a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    725c:	4658      	mov	r0, fp
    725e:	0019      	movs	r1, r3
    7260:	b007      	add	sp, #28
    7262:	bc3c      	pop	{r2, r3, r4, r5}
    7264:	4690      	mov	r8, r2
    7266:	4699      	mov	r9, r3
    7268:	46a2      	mov	sl, r4
    726a:	46ab      	mov	fp, r5
    726c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000726e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    726e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7270:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7272:	2340      	movs	r3, #64	; 0x40
    7274:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    7276:	4281      	cmp	r1, r0
    7278:	d202      	bcs.n	7280 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    727a:	0018      	movs	r0, r3
    727c:	bd10      	pop	{r4, pc}
		baud_calculated++;
    727e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    7280:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    7282:	1c63      	adds	r3, r4, #1
    7284:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    7286:	4288      	cmp	r0, r1
    7288:	d9f9      	bls.n	727e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    728a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    728c:	2cff      	cmp	r4, #255	; 0xff
    728e:	d8f4      	bhi.n	727a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    7290:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    7292:	2300      	movs	r3, #0
    7294:	e7f1      	b.n	727a <_sercom_get_sync_baud_val+0xc>
    7296:	Address 0x00007296 is out of bounds.


00007298 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    7298:	b5f0      	push	{r4, r5, r6, r7, lr}
    729a:	b083      	sub	sp, #12
    729c:	000f      	movs	r7, r1
    729e:	0016      	movs	r6, r2
    72a0:	aa08      	add	r2, sp, #32
    72a2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    72a4:	0004      	movs	r4, r0
    72a6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    72a8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    72aa:	42bc      	cmp	r4, r7
    72ac:	d902      	bls.n	72b4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    72ae:	0010      	movs	r0, r2
    72b0:	b003      	add	sp, #12
    72b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    72b4:	2b00      	cmp	r3, #0
    72b6:	d114      	bne.n	72e2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    72b8:	0002      	movs	r2, r0
    72ba:	0008      	movs	r0, r1
    72bc:	2100      	movs	r1, #0
    72be:	4c19      	ldr	r4, [pc, #100]	; (7324 <_sercom_get_async_baud_val+0x8c>)
    72c0:	47a0      	blx	r4
    72c2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    72c4:	003a      	movs	r2, r7
    72c6:	2300      	movs	r3, #0
    72c8:	2000      	movs	r0, #0
    72ca:	4c17      	ldr	r4, [pc, #92]	; (7328 <_sercom_get_async_baud_val+0x90>)
    72cc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    72ce:	2200      	movs	r2, #0
    72d0:	2301      	movs	r3, #1
    72d2:	1a12      	subs	r2, r2, r0
    72d4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    72d6:	0c12      	lsrs	r2, r2, #16
    72d8:	041b      	lsls	r3, r3, #16
    72da:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    72dc:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    72de:	2200      	movs	r2, #0
    72e0:	e7e5      	b.n	72ae <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    72e2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    72e4:	2b01      	cmp	r3, #1
    72e6:	d1f9      	bne.n	72dc <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    72e8:	000a      	movs	r2, r1
    72ea:	2300      	movs	r3, #0
    72ec:	2100      	movs	r1, #0
    72ee:	4c0d      	ldr	r4, [pc, #52]	; (7324 <_sercom_get_async_baud_val+0x8c>)
    72f0:	47a0      	blx	r4
    72f2:	0002      	movs	r2, r0
    72f4:	000b      	movs	r3, r1
    72f6:	9200      	str	r2, [sp, #0]
    72f8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    72fa:	0038      	movs	r0, r7
    72fc:	2100      	movs	r1, #0
    72fe:	4c0a      	ldr	r4, [pc, #40]	; (7328 <_sercom_get_async_baud_val+0x90>)
    7300:	47a0      	blx	r4
    7302:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    7304:	2380      	movs	r3, #128	; 0x80
    7306:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7308:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    730a:	4298      	cmp	r0, r3
    730c:	d8cf      	bhi.n	72ae <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    730e:	0f79      	lsrs	r1, r7, #29
    7310:	00f8      	lsls	r0, r7, #3
    7312:	9a00      	ldr	r2, [sp, #0]
    7314:	9b01      	ldr	r3, [sp, #4]
    7316:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    7318:	00ea      	lsls	r2, r5, #3
    731a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    731c:	b2d2      	uxtb	r2, r2
    731e:	0352      	lsls	r2, r2, #13
    7320:	432a      	orrs	r2, r5
    7322:	e7db      	b.n	72dc <_sercom_get_async_baud_val+0x44>
    7324:	0000f89d 	.word	0x0000f89d
    7328:	000071b5 	.word	0x000071b5

0000732c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    732c:	b510      	push	{r4, lr}
    732e:	b082      	sub	sp, #8
    7330:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7332:	4b0e      	ldr	r3, [pc, #56]	; (736c <sercom_set_gclk_generator+0x40>)
    7334:	781b      	ldrb	r3, [r3, #0]
    7336:	2b00      	cmp	r3, #0
    7338:	d007      	beq.n	734a <sercom_set_gclk_generator+0x1e>
    733a:	2900      	cmp	r1, #0
    733c:	d105      	bne.n	734a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    733e:	4b0b      	ldr	r3, [pc, #44]	; (736c <sercom_set_gclk_generator+0x40>)
    7340:	785b      	ldrb	r3, [r3, #1]
    7342:	4283      	cmp	r3, r0
    7344:	d010      	beq.n	7368 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    7346:	201d      	movs	r0, #29
    7348:	e00c      	b.n	7364 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    734a:	a901      	add	r1, sp, #4
    734c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    734e:	2011      	movs	r0, #17
    7350:	4b07      	ldr	r3, [pc, #28]	; (7370 <sercom_set_gclk_generator+0x44>)
    7352:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7354:	2011      	movs	r0, #17
    7356:	4b07      	ldr	r3, [pc, #28]	; (7374 <sercom_set_gclk_generator+0x48>)
    7358:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    735a:	4b04      	ldr	r3, [pc, #16]	; (736c <sercom_set_gclk_generator+0x40>)
    735c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    735e:	2201      	movs	r2, #1
    7360:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    7362:	2000      	movs	r0, #0
}
    7364:	b002      	add	sp, #8
    7366:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    7368:	2000      	movs	r0, #0
    736a:	e7fb      	b.n	7364 <sercom_set_gclk_generator+0x38>
    736c:	200000c4 	.word	0x200000c4
    7370:	00008559 	.word	0x00008559
    7374:	000084e9 	.word	0x000084e9

00007378 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    7378:	4b2c      	ldr	r3, [pc, #176]	; (742c <_sercom_get_default_pad+0xb4>)
    737a:	4298      	cmp	r0, r3
    737c:	d026      	beq.n	73cc <_sercom_get_default_pad+0x54>
    737e:	d90a      	bls.n	7396 <_sercom_get_default_pad+0x1e>
    7380:	4b2b      	ldr	r3, [pc, #172]	; (7430 <_sercom_get_default_pad+0xb8>)
    7382:	4298      	cmp	r0, r3
    7384:	d03a      	beq.n	73fc <_sercom_get_default_pad+0x84>
    7386:	4b2b      	ldr	r3, [pc, #172]	; (7434 <_sercom_get_default_pad+0xbc>)
    7388:	4298      	cmp	r0, r3
    738a:	d041      	beq.n	7410 <_sercom_get_default_pad+0x98>
    738c:	4b2a      	ldr	r3, [pc, #168]	; (7438 <_sercom_get_default_pad+0xc0>)
    738e:	4298      	cmp	r0, r3
    7390:	d024      	beq.n	73dc <_sercom_get_default_pad+0x64>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    7392:	2000      	movs	r0, #0
}
    7394:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    7396:	2384      	movs	r3, #132	; 0x84
    7398:	05db      	lsls	r3, r3, #23
    739a:	4298      	cmp	r0, r3
    739c:	d008      	beq.n	73b0 <_sercom_get_default_pad+0x38>
    739e:	4b27      	ldr	r3, [pc, #156]	; (743c <_sercom_get_default_pad+0xc4>)
    73a0:	4298      	cmp	r0, r3
    73a2:	d1f6      	bne.n	7392 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73a4:	2902      	cmp	r1, #2
    73a6:	d00d      	beq.n	73c4 <_sercom_get_default_pad+0x4c>
    73a8:	2903      	cmp	r1, #3
    73aa:	d00d      	beq.n	73c8 <_sercom_get_default_pad+0x50>
    73ac:	2000      	movs	r0, #0
    73ae:	e7f1      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73b0:	2902      	cmp	r1, #2
    73b2:	d003      	beq.n	73bc <_sercom_get_default_pad+0x44>
    73b4:	2903      	cmp	r1, #3
    73b6:	d003      	beq.n	73c0 <_sercom_get_default_pad+0x48>
    73b8:	2000      	movs	r0, #0
    73ba:	e7eb      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73bc:	4820      	ldr	r0, [pc, #128]	; (7440 <_sercom_get_default_pad+0xc8>)
    73be:	e7e9      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73c0:	4820      	ldr	r0, [pc, #128]	; (7444 <_sercom_get_default_pad+0xcc>)
    73c2:	e7e7      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73c4:	4820      	ldr	r0, [pc, #128]	; (7448 <_sercom_get_default_pad+0xd0>)
    73c6:	e7e5      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73c8:	4820      	ldr	r0, [pc, #128]	; (744c <_sercom_get_default_pad+0xd4>)
    73ca:	e7e3      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73cc:	2901      	cmp	r1, #1
    73ce:	d003      	beq.n	73d8 <_sercom_get_default_pad+0x60>
    73d0:	2900      	cmp	r1, #0
    73d2:	d027      	beq.n	7424 <_sercom_get_default_pad+0xac>
    73d4:	2000      	movs	r0, #0
    73d6:	e7dd      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73d8:	481d      	ldr	r0, [pc, #116]	; (7450 <_sercom_get_default_pad+0xd8>)
    73da:	e7db      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73dc:	2901      	cmp	r1, #1
    73de:	d007      	beq.n	73f0 <_sercom_get_default_pad+0x78>
    73e0:	2900      	cmp	r1, #0
    73e2:	d021      	beq.n	7428 <_sercom_get_default_pad+0xb0>
    73e4:	2902      	cmp	r1, #2
    73e6:	d005      	beq.n	73f4 <_sercom_get_default_pad+0x7c>
    73e8:	2903      	cmp	r1, #3
    73ea:	d005      	beq.n	73f8 <_sercom_get_default_pad+0x80>
	return 0;
    73ec:	2000      	movs	r0, #0
    73ee:	e7d1      	b.n	7394 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    73f0:	4818      	ldr	r0, [pc, #96]	; (7454 <_sercom_get_default_pad+0xdc>)
    73f2:	e7cf      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73f4:	4818      	ldr	r0, [pc, #96]	; (7458 <_sercom_get_default_pad+0xe0>)
    73f6:	e7cd      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73f8:	4818      	ldr	r0, [pc, #96]	; (745c <_sercom_get_default_pad+0xe4>)
    73fa:	e7cb      	b.n	7394 <_sercom_get_default_pad+0x1c>
    73fc:	2902      	cmp	r1, #2
    73fe:	d003      	beq.n	7408 <_sercom_get_default_pad+0x90>
    7400:	2903      	cmp	r1, #3
    7402:	d003      	beq.n	740c <_sercom_get_default_pad+0x94>
    7404:	2000      	movs	r0, #0
    7406:	e7c5      	b.n	7394 <_sercom_get_default_pad+0x1c>
    7408:	4815      	ldr	r0, [pc, #84]	; (7460 <_sercom_get_default_pad+0xe8>)
    740a:	e7c3      	b.n	7394 <_sercom_get_default_pad+0x1c>
    740c:	4815      	ldr	r0, [pc, #84]	; (7464 <_sercom_get_default_pad+0xec>)
    740e:	e7c1      	b.n	7394 <_sercom_get_default_pad+0x1c>
    7410:	2902      	cmp	r1, #2
    7412:	d003      	beq.n	741c <_sercom_get_default_pad+0xa4>
    7414:	2903      	cmp	r1, #3
    7416:	d003      	beq.n	7420 <_sercom_get_default_pad+0xa8>
    7418:	2000      	movs	r0, #0
    741a:	e7bb      	b.n	7394 <_sercom_get_default_pad+0x1c>
    741c:	4812      	ldr	r0, [pc, #72]	; (7468 <_sercom_get_default_pad+0xf0>)
    741e:	e7b9      	b.n	7394 <_sercom_get_default_pad+0x1c>
    7420:	4812      	ldr	r0, [pc, #72]	; (746c <_sercom_get_default_pad+0xf4>)
    7422:	e7b7      	b.n	7394 <_sercom_get_default_pad+0x1c>
    7424:	4812      	ldr	r0, [pc, #72]	; (7470 <_sercom_get_default_pad+0xf8>)
    7426:	e7b5      	b.n	7394 <_sercom_get_default_pad+0x1c>
    7428:	4812      	ldr	r0, [pc, #72]	; (7474 <_sercom_get_default_pad+0xfc>)
    742a:	e7b3      	b.n	7394 <_sercom_get_default_pad+0x1c>
    742c:	42000800 	.word	0x42000800
    7430:	42001000 	.word	0x42001000
    7434:	43000400 	.word	0x43000400
    7438:	42000c00 	.word	0x42000c00
    743c:	42000400 	.word	0x42000400
    7440:	00060003 	.word	0x00060003
    7444:	00070003 	.word	0x00070003
    7448:	001e0003 	.word	0x001e0003
    744c:	001f0003 	.word	0x001f0003
    7450:	00090003 	.word	0x00090003
    7454:	00110003 	.word	0x00110003
    7458:	00120003 	.word	0x00120003
    745c:	00130003 	.word	0x00130003
    7460:	000e0003 	.word	0x000e0003
    7464:	000f0003 	.word	0x000f0003
    7468:	00180003 	.word	0x00180003
    746c:	00190003 	.word	0x00190003
    7470:	00080003 	.word	0x00080003
    7474:	00100003 	.word	0x00100003

00007478 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7478:	b530      	push	{r4, r5, lr}
    747a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    747c:	4b0b      	ldr	r3, [pc, #44]	; (74ac <_sercom_get_sercom_inst_index+0x34>)
    747e:	466a      	mov	r2, sp
    7480:	cb32      	ldmia	r3!, {r1, r4, r5}
    7482:	c232      	stmia	r2!, {r1, r4, r5}
    7484:	cb32      	ldmia	r3!, {r1, r4, r5}
    7486:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7488:	9b00      	ldr	r3, [sp, #0]
    748a:	4283      	cmp	r3, r0
    748c:	d00b      	beq.n	74a6 <_sercom_get_sercom_inst_index+0x2e>
    748e:	2301      	movs	r3, #1
    7490:	009a      	lsls	r2, r3, #2
    7492:	4669      	mov	r1, sp
    7494:	5852      	ldr	r2, [r2, r1]
    7496:	4282      	cmp	r2, r0
    7498:	d006      	beq.n	74a8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    749a:	3301      	adds	r3, #1
    749c:	2b06      	cmp	r3, #6
    749e:	d1f7      	bne.n	7490 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    74a0:	2000      	movs	r0, #0
}
    74a2:	b007      	add	sp, #28
    74a4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    74a6:	2300      	movs	r3, #0
			return i;
    74a8:	b2d8      	uxtb	r0, r3
    74aa:	e7fa      	b.n	74a2 <_sercom_get_sercom_inst_index+0x2a>
    74ac:	000131b4 	.word	0x000131b4

000074b0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    74b0:	4770      	bx	lr
    74b2:	Address 0x000074b2 is out of bounds.


000074b4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    74b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    74b6:	4b0a      	ldr	r3, [pc, #40]	; (74e0 <_sercom_set_handler+0x2c>)
    74b8:	781b      	ldrb	r3, [r3, #0]
    74ba:	2b00      	cmp	r3, #0
    74bc:	d10c      	bne.n	74d8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    74be:	4f09      	ldr	r7, [pc, #36]	; (74e4 <_sercom_set_handler+0x30>)
    74c0:	4e09      	ldr	r6, [pc, #36]	; (74e8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    74c2:	4d0a      	ldr	r5, [pc, #40]	; (74ec <_sercom_set_handler+0x38>)
    74c4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    74c6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    74c8:	195a      	adds	r2, r3, r5
    74ca:	6014      	str	r4, [r2, #0]
    74cc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    74ce:	2b18      	cmp	r3, #24
    74d0:	d1f9      	bne.n	74c6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    74d2:	2201      	movs	r2, #1
    74d4:	4b02      	ldr	r3, [pc, #8]	; (74e0 <_sercom_set_handler+0x2c>)
    74d6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    74d8:	0080      	lsls	r0, r0, #2
    74da:	4b02      	ldr	r3, [pc, #8]	; (74e4 <_sercom_set_handler+0x30>)
    74dc:	50c1      	str	r1, [r0, r3]
}
    74de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74e0:	200000c6 	.word	0x200000c6
    74e4:	200000c8 	.word	0x200000c8
    74e8:	000074b1 	.word	0x000074b1
    74ec:	20001d00 	.word	0x20001d00

000074f0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    74f0:	b500      	push	{lr}
    74f2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    74f4:	2308      	movs	r3, #8
    74f6:	466a      	mov	r2, sp
    74f8:	7013      	strb	r3, [r2, #0]
    74fa:	3301      	adds	r3, #1
    74fc:	7053      	strb	r3, [r2, #1]
    74fe:	3301      	adds	r3, #1
    7500:	7093      	strb	r3, [r2, #2]
    7502:	3301      	adds	r3, #1
    7504:	70d3      	strb	r3, [r2, #3]
    7506:	3301      	adds	r3, #1
    7508:	7113      	strb	r3, [r2, #4]
    750a:	3301      	adds	r3, #1
    750c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    750e:	4b03      	ldr	r3, [pc, #12]	; (751c <_sercom_get_interrupt_vector+0x2c>)
    7510:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    7512:	466b      	mov	r3, sp
    7514:	5618      	ldrsb	r0, [r3, r0]
}
    7516:	b003      	add	sp, #12
    7518:	bd00      	pop	{pc}
    751a:	46c0      	nop			; (mov r8, r8)
    751c:	00007479 	.word	0x00007479

00007520 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7520:	b510      	push	{r4, lr}
    7522:	4b02      	ldr	r3, [pc, #8]	; (752c <SERCOM0_Handler+0xc>)
    7524:	681b      	ldr	r3, [r3, #0]
    7526:	2000      	movs	r0, #0
    7528:	4798      	blx	r3
    752a:	bd10      	pop	{r4, pc}
    752c:	200000c8 	.word	0x200000c8

00007530 <SERCOM1_Handler>:
    7530:	b510      	push	{r4, lr}
    7532:	4b02      	ldr	r3, [pc, #8]	; (753c <SERCOM1_Handler+0xc>)
    7534:	685b      	ldr	r3, [r3, #4]
    7536:	2001      	movs	r0, #1
    7538:	4798      	blx	r3
    753a:	bd10      	pop	{r4, pc}
    753c:	200000c8 	.word	0x200000c8

00007540 <SERCOM2_Handler>:
    7540:	b510      	push	{r4, lr}
    7542:	4b02      	ldr	r3, [pc, #8]	; (754c <SERCOM2_Handler+0xc>)
    7544:	689b      	ldr	r3, [r3, #8]
    7546:	2002      	movs	r0, #2
    7548:	4798      	blx	r3
    754a:	bd10      	pop	{r4, pc}
    754c:	200000c8 	.word	0x200000c8

00007550 <SERCOM3_Handler>:
    7550:	b510      	push	{r4, lr}
    7552:	4b02      	ldr	r3, [pc, #8]	; (755c <SERCOM3_Handler+0xc>)
    7554:	68db      	ldr	r3, [r3, #12]
    7556:	2003      	movs	r0, #3
    7558:	4798      	blx	r3
    755a:	bd10      	pop	{r4, pc}
    755c:	200000c8 	.word	0x200000c8

00007560 <SERCOM4_Handler>:
    7560:	b510      	push	{r4, lr}
    7562:	4b02      	ldr	r3, [pc, #8]	; (756c <SERCOM4_Handler+0xc>)
    7564:	691b      	ldr	r3, [r3, #16]
    7566:	2004      	movs	r0, #4
    7568:	4798      	blx	r3
    756a:	bd10      	pop	{r4, pc}
    756c:	200000c8 	.word	0x200000c8

00007570 <SERCOM5_Handler>:
    7570:	b510      	push	{r4, lr}
    7572:	4b02      	ldr	r3, [pc, #8]	; (757c <SERCOM5_Handler+0xc>)
    7574:	695b      	ldr	r3, [r3, #20]
    7576:	2005      	movs	r0, #5
    7578:	4798      	blx	r3
    757a:	bd10      	pop	{r4, pc}
    757c:	200000c8 	.word	0x200000c8

00007580 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7580:	b5f0      	push	{r4, r5, r6, r7, lr}
    7582:	46d6      	mov	lr, sl
    7584:	464f      	mov	r7, r9
    7586:	4646      	mov	r6, r8
    7588:	b5c0      	push	{r6, r7, lr}
    758a:	b08a      	sub	sp, #40	; 0x28
    758c:	0006      	movs	r6, r0
    758e:	000f      	movs	r7, r1
    7590:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7592:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7594:	680b      	ldr	r3, [r1, #0]
    7596:	079b      	lsls	r3, r3, #30
    7598:	d40a      	bmi.n	75b0 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    759a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    759c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    759e:	07db      	lsls	r3, r3, #31
    75a0:	d400      	bmi.n	75a4 <spi_init+0x24>
    75a2:	e097      	b.n	76d4 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    75a4:	b00a      	add	sp, #40	; 0x28
    75a6:	bc1c      	pop	{r2, r3, r4}
    75a8:	4690      	mov	r8, r2
    75aa:	4699      	mov	r9, r3
    75ac:	46a2      	mov	sl, r4
    75ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    75b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    75b2:	9305      	str	r3, [sp, #20]
    75b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    75b6:	9306      	str	r3, [sp, #24]
    75b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    75ba:	9307      	str	r3, [sp, #28]
    75bc:	6b53      	ldr	r3, [r2, #52]	; 0x34
    75be:	9308      	str	r3, [sp, #32]
    75c0:	2500      	movs	r5, #0
    75c2:	e00a      	b.n	75da <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    75c4:	0038      	movs	r0, r7
    75c6:	4b9a      	ldr	r3, [pc, #616]	; (7830 <spi_init+0x2b0>)
    75c8:	4798      	blx	r3
    75ca:	e00e      	b.n	75ea <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    75cc:	230f      	movs	r3, #15
    75ce:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    75d0:	4581      	cmp	r9, r0
    75d2:	d130      	bne.n	7636 <spi_init+0xb6>
    75d4:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    75d6:	2d04      	cmp	r5, #4
    75d8:	d031      	beq.n	763e <spi_init+0xbe>
    75da:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    75dc:	00ab      	lsls	r3, r5, #2
    75de:	aa02      	add	r2, sp, #8
    75e0:	200c      	movs	r0, #12
    75e2:	1812      	adds	r2, r2, r0
    75e4:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    75e6:	2800      	cmp	r0, #0
    75e8:	d0ec      	beq.n	75c4 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    75ea:	1c43      	adds	r3, r0, #1
    75ec:	d0f2      	beq.n	75d4 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    75ee:	0401      	lsls	r1, r0, #16
    75f0:	0c0b      	lsrs	r3, r1, #16
    75f2:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    75f4:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    75f6:	b2c3      	uxtb	r3, r0
    75f8:	469c      	mov	ip, r3
		return NULL;
    75fa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    75fc:	0602      	lsls	r2, r0, #24
    75fe:	d405      	bmi.n	760c <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    7600:	4663      	mov	r3, ip
    7602:	095b      	lsrs	r3, r3, #5
    7604:	01db      	lsls	r3, r3, #7
    7606:	4a8b      	ldr	r2, [pc, #556]	; (7834 <spi_init+0x2b4>)
    7608:	4690      	mov	r8, r2
    760a:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    760c:	221f      	movs	r2, #31
    760e:	4660      	mov	r0, ip
    7610:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    7612:	1898      	adds	r0, r3, r2
    7614:	3040      	adds	r0, #64	; 0x40
    7616:	7800      	ldrb	r0, [r0, #0]
    7618:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    761a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    761c:	4651      	mov	r1, sl
    761e:	07c9      	lsls	r1, r1, #31
    7620:	d5d6      	bpl.n	75d0 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    7622:	0852      	lsrs	r2, r2, #1
    7624:	189b      	adds	r3, r3, r2
    7626:	3330      	adds	r3, #48	; 0x30
    7628:	7818      	ldrb	r0, [r3, #0]
    762a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    762c:	4663      	mov	r3, ip
    762e:	07db      	lsls	r3, r3, #31
    7630:	d5cc      	bpl.n	75cc <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    7632:	0900      	lsrs	r0, r0, #4
    7634:	e7cc      	b.n	75d0 <spi_init+0x50>
			module->hw = NULL;
    7636:	2300      	movs	r3, #0
    7638:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    763a:	201c      	movs	r0, #28
    763c:	e7b2      	b.n	75a4 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    763e:	2011      	movs	r0, #17
    7640:	4b7d      	ldr	r3, [pc, #500]	; (7838 <spi_init+0x2b8>)
    7642:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7644:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    7646:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    7648:	2a01      	cmp	r2, #1
    764a:	d026      	beq.n	769a <spi_init+0x11a>
	ctrla |= config->mux_setting;
    764c:	6863      	ldr	r3, [r4, #4]
    764e:	68a2      	ldr	r2, [r4, #8]
    7650:	4313      	orrs	r3, r2
    7652:	68e2      	ldr	r2, [r4, #12]
    7654:	4313      	orrs	r3, r2
    7656:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    7658:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    765a:	7c61      	ldrb	r1, [r4, #17]
    765c:	2900      	cmp	r1, #0
    765e:	d001      	beq.n	7664 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7660:	2180      	movs	r1, #128	; 0x80
    7662:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    7664:	7ca1      	ldrb	r1, [r4, #18]
    7666:	2900      	cmp	r1, #0
    7668:	d002      	beq.n	7670 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    766a:	2180      	movs	r1, #128	; 0x80
    766c:	0289      	lsls	r1, r1, #10
    766e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    7670:	7ce1      	ldrb	r1, [r4, #19]
    7672:	2900      	cmp	r1, #0
    7674:	d002      	beq.n	767c <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7676:	2180      	movs	r1, #128	; 0x80
    7678:	0089      	lsls	r1, r1, #2
    767a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    767c:	7d21      	ldrb	r1, [r4, #20]
    767e:	2900      	cmp	r1, #0
    7680:	d002      	beq.n	7688 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7682:	2180      	movs	r1, #128	; 0x80
    7684:	0189      	lsls	r1, r1, #6
    7686:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    7688:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    768a:	2002      	movs	r0, #2
    768c:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    768e:	428b      	cmp	r3, r1
    7690:	d017      	beq.n	76c2 <spi_init+0x142>
	module->hw = NULL;
    7692:	2300      	movs	r3, #0
    7694:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    7696:	201c      	movs	r0, #28
    7698:	e784      	b.n	75a4 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    769a:	aa04      	add	r2, sp, #16
    769c:	0001      	movs	r1, r0
    769e:	69a0      	ldr	r0, [r4, #24]
    76a0:	4b66      	ldr	r3, [pc, #408]	; (783c <spi_init+0x2bc>)
    76a2:	4798      	blx	r3
    76a4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    76a6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    76a8:	2b00      	cmp	r3, #0
    76aa:	d000      	beq.n	76ae <spi_init+0x12e>
    76ac:	e77a      	b.n	75a4 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    76ae:	7b3b      	ldrb	r3, [r7, #12]
    76b0:	b2db      	uxtb	r3, r3
    76b2:	aa04      	add	r2, sp, #16
    76b4:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    76b6:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    76b8:	429a      	cmp	r2, r3
    76ba:	d000      	beq.n	76be <spi_init+0x13e>
    76bc:	e772      	b.n	75a4 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    76be:	350c      	adds	r5, #12
    76c0:	e7c4      	b.n	764c <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    76c2:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    76c4:	4293      	cmp	r3, r2
    76c6:	d1e4      	bne.n	7692 <spi_init+0x112>
		module->mode           = config->mode;
    76c8:	7823      	ldrb	r3, [r4, #0]
    76ca:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    76cc:	7c23      	ldrb	r3, [r4, #16]
    76ce:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    76d0:	2000      	movs	r0, #0
    76d2:	e767      	b.n	75a4 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    76d4:	0008      	movs	r0, r1
    76d6:	4b5a      	ldr	r3, [pc, #360]	; (7840 <spi_init+0x2c0>)
    76d8:	4798      	blx	r3
	if (sercom_index == 5) {
    76da:	2805      	cmp	r0, #5
    76dc:	d100      	bne.n	76e0 <spi_init+0x160>
    76de:	e09f      	b.n	7820 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    76e0:	0003      	movs	r3, r0
    76e2:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    76e4:	4957      	ldr	r1, [pc, #348]	; (7844 <spi_init+0x2c4>)
    76e6:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    76e8:	2201      	movs	r2, #1
    76ea:	4082      	lsls	r2, r0
    76ec:	432a      	orrs	r2, r5
    76ee:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    76f0:	a909      	add	r1, sp, #36	; 0x24
    76f2:	2524      	movs	r5, #36	; 0x24
    76f4:	5d62      	ldrb	r2, [r4, r5]
    76f6:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    76f8:	b2db      	uxtb	r3, r3
    76fa:	9301      	str	r3, [sp, #4]
    76fc:	0018      	movs	r0, r3
    76fe:	4b52      	ldr	r3, [pc, #328]	; (7848 <spi_init+0x2c8>)
    7700:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7702:	9801      	ldr	r0, [sp, #4]
    7704:	4b51      	ldr	r3, [pc, #324]	; (784c <spi_init+0x2cc>)
    7706:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7708:	5d60      	ldrb	r0, [r4, r5]
    770a:	2100      	movs	r1, #0
    770c:	4b50      	ldr	r3, [pc, #320]	; (7850 <spi_init+0x2d0>)
    770e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    7710:	7823      	ldrb	r3, [r4, #0]
    7712:	2b01      	cmp	r3, #1
    7714:	d019      	beq.n	774a <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    7716:	6833      	ldr	r3, [r6, #0]
    7718:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    771a:	ab04      	add	r3, sp, #16
    771c:	2280      	movs	r2, #128	; 0x80
    771e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7720:	2200      	movs	r2, #0
    7722:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7724:	2101      	movs	r1, #1
    7726:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    7728:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    772a:	7823      	ldrb	r3, [r4, #0]
    772c:	2b00      	cmp	r3, #0
    772e:	d101      	bne.n	7734 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7730:	ab04      	add	r3, sp, #16
    7732:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7736:	9305      	str	r3, [sp, #20]
    7738:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    773a:	9306      	str	r3, [sp, #24]
    773c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    773e:	9307      	str	r3, [sp, #28]
    7740:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7742:	9308      	str	r3, [sp, #32]
    7744:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7746:	ad05      	add	r5, sp, #20
    7748:	e011      	b.n	776e <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    774a:	683b      	ldr	r3, [r7, #0]
    774c:	220c      	movs	r2, #12
    774e:	4313      	orrs	r3, r2
    7750:	603b      	str	r3, [r7, #0]
    7752:	e7e0      	b.n	7716 <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7754:	4640      	mov	r0, r8
    7756:	4b36      	ldr	r3, [pc, #216]	; (7830 <spi_init+0x2b0>)
    7758:	4798      	blx	r3
    775a:	e00d      	b.n	7778 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    775c:	a904      	add	r1, sp, #16
    775e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7760:	0c00      	lsrs	r0, r0, #16
    7762:	b2c0      	uxtb	r0, r0
    7764:	4b3b      	ldr	r3, [pc, #236]	; (7854 <spi_init+0x2d4>)
    7766:	4798      	blx	r3
    7768:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    776a:	2f04      	cmp	r7, #4
    776c:	d007      	beq.n	777e <spi_init+0x1fe>
    776e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7770:	00bb      	lsls	r3, r7, #2
    7772:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    7774:	2800      	cmp	r0, #0
    7776:	d0ed      	beq.n	7754 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    7778:	1c43      	adds	r3, r0, #1
    777a:	d1ef      	bne.n	775c <spi_init+0x1dc>
    777c:	e7f4      	b.n	7768 <spi_init+0x1e8>
	module->mode             = config->mode;
    777e:	7823      	ldrb	r3, [r4, #0]
    7780:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    7782:	7c23      	ldrb	r3, [r4, #16]
    7784:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    7786:	7ca3      	ldrb	r3, [r4, #18]
    7788:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    778a:	7d23      	ldrb	r3, [r4, #20]
    778c:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    778e:	2200      	movs	r2, #0
    7790:	ab02      	add	r3, sp, #8
    7792:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    7794:	7823      	ldrb	r3, [r4, #0]
    7796:	2b01      	cmp	r3, #1
    7798:	d02a      	beq.n	77f0 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    779a:	6863      	ldr	r3, [r4, #4]
    779c:	68a2      	ldr	r2, [r4, #8]
    779e:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    77a0:	68e2      	ldr	r2, [r4, #12]
    77a2:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    77a4:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    77a6:	7c62      	ldrb	r2, [r4, #17]
    77a8:	2a00      	cmp	r2, #0
    77aa:	d103      	bne.n	77b4 <spi_init+0x234>
    77ac:	4a2a      	ldr	r2, [pc, #168]	; (7858 <spi_init+0x2d8>)
    77ae:	7892      	ldrb	r2, [r2, #2]
    77b0:	0792      	lsls	r2, r2, #30
    77b2:	d501      	bpl.n	77b8 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    77b4:	2280      	movs	r2, #128	; 0x80
    77b6:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    77b8:	7ca2      	ldrb	r2, [r4, #18]
    77ba:	2a00      	cmp	r2, #0
    77bc:	d002      	beq.n	77c4 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    77be:	2280      	movs	r2, #128	; 0x80
    77c0:	0292      	lsls	r2, r2, #10
    77c2:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    77c4:	7ce2      	ldrb	r2, [r4, #19]
    77c6:	2a00      	cmp	r2, #0
    77c8:	d002      	beq.n	77d0 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    77ca:	2280      	movs	r2, #128	; 0x80
    77cc:	0092      	lsls	r2, r2, #2
    77ce:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    77d0:	7d22      	ldrb	r2, [r4, #20]
    77d2:	2a00      	cmp	r2, #0
    77d4:	d002      	beq.n	77dc <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    77d6:	2280      	movs	r2, #128	; 0x80
    77d8:	0192      	lsls	r2, r2, #6
    77da:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    77dc:	4642      	mov	r2, r8
    77de:	6812      	ldr	r2, [r2, #0]
    77e0:	4313      	orrs	r3, r2
    77e2:	4642      	mov	r2, r8
    77e4:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    77e6:	6853      	ldr	r3, [r2, #4]
    77e8:	430b      	orrs	r3, r1
    77ea:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    77ec:	2000      	movs	r0, #0
    77ee:	e6d9      	b.n	75a4 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    77f0:	6830      	ldr	r0, [r6, #0]
    77f2:	4b13      	ldr	r3, [pc, #76]	; (7840 <spi_init+0x2c0>)
    77f4:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    77f6:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    77f8:	b2c0      	uxtb	r0, r0
    77fa:	4b0f      	ldr	r3, [pc, #60]	; (7838 <spi_init+0x2b8>)
    77fc:	4798      	blx	r3
    77fe:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    7800:	ab02      	add	r3, sp, #8
    7802:	1d9a      	adds	r2, r3, #6
    7804:	69a0      	ldr	r0, [r4, #24]
    7806:	4b0d      	ldr	r3, [pc, #52]	; (783c <spi_init+0x2bc>)
    7808:	4798      	blx	r3
    780a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    780c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    780e:	2b00      	cmp	r3, #0
    7810:	d000      	beq.n	7814 <spi_init+0x294>
    7812:	e6c7      	b.n	75a4 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    7814:	ab02      	add	r3, sp, #8
    7816:	3306      	adds	r3, #6
    7818:	781b      	ldrb	r3, [r3, #0]
    781a:	4642      	mov	r2, r8
    781c:	7313      	strb	r3, [r2, #12]
    781e:	e7bc      	b.n	779a <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    7820:	4a08      	ldr	r2, [pc, #32]	; (7844 <spi_init+0x2c4>)
    7822:	6a13      	ldr	r3, [r2, #32]
    7824:	2102      	movs	r1, #2
    7826:	430b      	orrs	r3, r1
    7828:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    782a:	2318      	movs	r3, #24
    782c:	e760      	b.n	76f0 <spi_init+0x170>
    782e:	46c0      	nop			; (mov r8, r8)
    7830:	00007379 	.word	0x00007379
    7834:	40002800 	.word	0x40002800
    7838:	0000857d 	.word	0x0000857d
    783c:	0000726f 	.word	0x0000726f
    7840:	00007479 	.word	0x00007479
    7844:	40000400 	.word	0x40000400
    7848:	00008559 	.word	0x00008559
    784c:	000084e9 	.word	0x000084e9
    7850:	0000732d 	.word	0x0000732d
    7854:	00008655 	.word	0x00008655
    7858:	41002000 	.word	0x41002000

0000785c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    785c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    785e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    7860:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    7862:	2c01      	cmp	r4, #1
    7864:	d001      	beq.n	786a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    7866:	0018      	movs	r0, r3
    7868:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    786a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    786c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    786e:	2c00      	cmp	r4, #0
    7870:	d1f9      	bne.n	7866 <spi_select_slave+0xa>
		if (select) {
    7872:	2a00      	cmp	r2, #0
    7874:	d058      	beq.n	7928 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    7876:	784b      	ldrb	r3, [r1, #1]
    7878:	2b00      	cmp	r3, #0
    787a:	d044      	beq.n	7906 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    787c:	6803      	ldr	r3, [r0, #0]
    787e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    7880:	07db      	lsls	r3, r3, #31
    7882:	d410      	bmi.n	78a6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    7884:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7886:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7888:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    788a:	2900      	cmp	r1, #0
    788c:	d104      	bne.n	7898 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    788e:	0953      	lsrs	r3, r2, #5
    7890:	01db      	lsls	r3, r3, #7
    7892:	492e      	ldr	r1, [pc, #184]	; (794c <spi_select_slave+0xf0>)
    7894:	468c      	mov	ip, r1
    7896:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7898:	211f      	movs	r1, #31
    789a:	4011      	ands	r1, r2
    789c:	2201      	movs	r2, #1
    789e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    78a0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    78a2:	2305      	movs	r3, #5
    78a4:	e7df      	b.n	7866 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    78a6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    78a8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    78aa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    78ac:	2c00      	cmp	r4, #0
    78ae:	d104      	bne.n	78ba <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    78b0:	0953      	lsrs	r3, r2, #5
    78b2:	01db      	lsls	r3, r3, #7
    78b4:	4c25      	ldr	r4, [pc, #148]	; (794c <spi_select_slave+0xf0>)
    78b6:	46a4      	mov	ip, r4
    78b8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    78ba:	241f      	movs	r4, #31
    78bc:	4014      	ands	r4, r2
    78be:	2201      	movs	r2, #1
    78c0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    78c2:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    78c4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    78c6:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    78c8:	07d2      	lsls	r2, r2, #31
    78ca:	d501      	bpl.n	78d0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    78cc:	788a      	ldrb	r2, [r1, #2]
    78ce:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    78d0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    78d2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    78d4:	2a00      	cmp	r2, #0
    78d6:	d1c6      	bne.n	7866 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    78d8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    78da:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    78dc:	7e13      	ldrb	r3, [r2, #24]
    78de:	420b      	tst	r3, r1
    78e0:	d0fc      	beq.n	78dc <spi_select_slave+0x80>
    78e2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    78e4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    78e6:	0749      	lsls	r1, r1, #29
    78e8:	d5bd      	bpl.n	7866 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    78ea:	8b53      	ldrh	r3, [r2, #26]
    78ec:	075b      	lsls	r3, r3, #29
    78ee:	d501      	bpl.n	78f4 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    78f0:	2304      	movs	r3, #4
    78f2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    78f4:	7983      	ldrb	r3, [r0, #6]
    78f6:	2b01      	cmp	r3, #1
    78f8:	d002      	beq.n	7900 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    78fa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    78fc:	2300      	movs	r3, #0
    78fe:	e7b2      	b.n	7866 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7900:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7902:	2300      	movs	r3, #0
    7904:	e7af      	b.n	7866 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    7906:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    7908:	09d1      	lsrs	r1, r2, #7
		return NULL;
    790a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    790c:	2900      	cmp	r1, #0
    790e:	d104      	bne.n	791a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    7910:	0953      	lsrs	r3, r2, #5
    7912:	01db      	lsls	r3, r3, #7
    7914:	490d      	ldr	r1, [pc, #52]	; (794c <spi_select_slave+0xf0>)
    7916:	468c      	mov	ip, r1
    7918:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    791a:	211f      	movs	r1, #31
    791c:	4011      	ands	r1, r2
    791e:	2201      	movs	r2, #1
    7920:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    7922:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    7924:	2300      	movs	r3, #0
    7926:	e79e      	b.n	7866 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    7928:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    792a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    792c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    792e:	2900      	cmp	r1, #0
    7930:	d104      	bne.n	793c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    7932:	0953      	lsrs	r3, r2, #5
    7934:	01db      	lsls	r3, r3, #7
    7936:	4905      	ldr	r1, [pc, #20]	; (794c <spi_select_slave+0xf0>)
    7938:	468c      	mov	ip, r1
    793a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    793c:	211f      	movs	r1, #31
    793e:	4011      	ands	r1, r2
    7940:	2201      	movs	r2, #1
    7942:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    7944:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    7946:	2300      	movs	r3, #0
    7948:	e78d      	b.n	7866 <spi_select_slave+0xa>
    794a:	46c0      	nop			; (mov r8, r8)
    794c:	40002800 	.word	0x40002800

00007950 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    7950:	b5f0      	push	{r4, r5, r6, r7, lr}
    7952:	46de      	mov	lr, fp
    7954:	4657      	mov	r7, sl
    7956:	464e      	mov	r6, r9
    7958:	4645      	mov	r5, r8
    795a:	b5e0      	push	{r5, r6, r7, lr}
    795c:	b091      	sub	sp, #68	; 0x44
    795e:	0005      	movs	r5, r0
    7960:	000c      	movs	r4, r1
    7962:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    7964:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7966:	0008      	movs	r0, r1
    7968:	4bc4      	ldr	r3, [pc, #784]	; (7c7c <usart_init+0x32c>)
    796a:	4798      	blx	r3
    796c:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    796e:	2805      	cmp	r0, #5
    7970:	d00d      	beq.n	798e <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7972:	0007      	movs	r7, r0
    7974:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    7976:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    7978:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    797a:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    797c:	07c9      	lsls	r1, r1, #31
    797e:	d509      	bpl.n	7994 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    7980:	b011      	add	sp, #68	; 0x44
    7982:	bc3c      	pop	{r2, r3, r4, r5}
    7984:	4690      	mov	r8, r2
    7986:	4699      	mov	r9, r3
    7988:	46a2      	mov	sl, r4
    798a:	46ab      	mov	fp, r5
    798c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    798e:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    7990:	2301      	movs	r3, #1
    7992:	e7f1      	b.n	7978 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7994:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    7996:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    7998:	0789      	lsls	r1, r1, #30
    799a:	d4f1      	bmi.n	7980 <usart_init+0x30>
	if (sercom_index == 5) {
    799c:	2a05      	cmp	r2, #5
    799e:	d049      	beq.n	7a34 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    79a0:	49b7      	ldr	r1, [pc, #732]	; (7c80 <usart_init+0x330>)
    79a2:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    79a4:	2201      	movs	r2, #1
    79a6:	409a      	lsls	r2, r3
    79a8:	0013      	movs	r3, r2
    79aa:	4303      	orrs	r3, r0
    79ac:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    79ae:	a90f      	add	r1, sp, #60	; 0x3c
    79b0:	232d      	movs	r3, #45	; 0x2d
    79b2:	4698      	mov	r8, r3
    79b4:	5cf3      	ldrb	r3, [r6, r3]
    79b6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    79b8:	b2ff      	uxtb	r7, r7
    79ba:	0038      	movs	r0, r7
    79bc:	4bb1      	ldr	r3, [pc, #708]	; (7c84 <usart_init+0x334>)
    79be:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    79c0:	0038      	movs	r0, r7
    79c2:	4bb1      	ldr	r3, [pc, #708]	; (7c88 <usart_init+0x338>)
    79c4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    79c6:	4643      	mov	r3, r8
    79c8:	5cf0      	ldrb	r0, [r6, r3]
    79ca:	2100      	movs	r1, #0
    79cc:	4baf      	ldr	r3, [pc, #700]	; (7c8c <usart_init+0x33c>)
    79ce:	4798      	blx	r3
	module->character_size = config->character_size;
    79d0:	7af3      	ldrb	r3, [r6, #11]
    79d2:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    79d4:	2324      	movs	r3, #36	; 0x24
    79d6:	5cf3      	ldrb	r3, [r6, r3]
    79d8:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    79da:	2325      	movs	r3, #37	; 0x25
    79dc:	5cf3      	ldrb	r3, [r6, r3]
    79de:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    79e0:	7ef3      	ldrb	r3, [r6, #27]
    79e2:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    79e4:	7f33      	ldrb	r3, [r6, #28]
    79e6:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    79e8:	682b      	ldr	r3, [r5, #0]
    79ea:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    79ec:	0018      	movs	r0, r3
    79ee:	4ba3      	ldr	r3, [pc, #652]	; (7c7c <usart_init+0x32c>)
    79f0:	4798      	blx	r3
	if (sercom_index == 5) {
    79f2:	2805      	cmp	r0, #5
    79f4:	d026      	beq.n	7a44 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    79f6:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    79f8:	2200      	movs	r2, #0
    79fa:	230e      	movs	r3, #14
    79fc:	a906      	add	r1, sp, #24
    79fe:	468c      	mov	ip, r1
    7a00:	4463      	add	r3, ip
    7a02:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    7a04:	8a32      	ldrh	r2, [r6, #16]
    7a06:	9202      	str	r2, [sp, #8]
    7a08:	2380      	movs	r3, #128	; 0x80
    7a0a:	01db      	lsls	r3, r3, #7
    7a0c:	429a      	cmp	r2, r3
    7a0e:	d100      	bne.n	7a12 <usart_init+0xc2>
    7a10:	e0a7      	b.n	7b62 <usart_init+0x212>
    7a12:	d919      	bls.n	7a48 <usart_init+0xf8>
    7a14:	23c0      	movs	r3, #192	; 0xc0
    7a16:	01db      	lsls	r3, r3, #7
    7a18:	9a02      	ldr	r2, [sp, #8]
    7a1a:	429a      	cmp	r2, r3
    7a1c:	d100      	bne.n	7a20 <usart_init+0xd0>
    7a1e:	e09b      	b.n	7b58 <usart_init+0x208>
    7a20:	2380      	movs	r3, #128	; 0x80
    7a22:	021b      	lsls	r3, r3, #8
    7a24:	429a      	cmp	r2, r3
    7a26:	d000      	beq.n	7a2a <usart_init+0xda>
    7a28:	e123      	b.n	7c72 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    7a2a:	2303      	movs	r3, #3
    7a2c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7a2e:	2300      	movs	r3, #0
    7a30:	9307      	str	r3, [sp, #28]
    7a32:	e012      	b.n	7a5a <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    7a34:	4992      	ldr	r1, [pc, #584]	; (7c80 <usart_init+0x330>)
    7a36:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    7a38:	3a04      	subs	r2, #4
    7a3a:	409a      	lsls	r2, r3
    7a3c:	0013      	movs	r3, r2
    7a3e:	4303      	orrs	r3, r0
    7a40:	620b      	str	r3, [r1, #32]
    7a42:	e7b4      	b.n	79ae <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    7a44:	2018      	movs	r0, #24
    7a46:	e7d7      	b.n	79f8 <usart_init+0xa8>
	switch (config->sample_rate) {
    7a48:	2380      	movs	r3, #128	; 0x80
    7a4a:	019b      	lsls	r3, r3, #6
    7a4c:	429a      	cmp	r2, r3
    7a4e:	d000      	beq.n	7a52 <usart_init+0x102>
    7a50:	e10f      	b.n	7c72 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7a52:	2310      	movs	r3, #16
    7a54:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7a56:	3b0f      	subs	r3, #15
    7a58:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    7a5a:	6833      	ldr	r3, [r6, #0]
    7a5c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    7a5e:	68f3      	ldr	r3, [r6, #12]
    7a60:	469b      	mov	fp, r3
		config->sample_adjustment |
    7a62:	6973      	ldr	r3, [r6, #20]
    7a64:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7a66:	7e33      	ldrb	r3, [r6, #24]
    7a68:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7a6a:	2326      	movs	r3, #38	; 0x26
    7a6c:	5cf3      	ldrb	r3, [r6, r3]
    7a6e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7a70:	6873      	ldr	r3, [r6, #4]
    7a72:	4699      	mov	r9, r3
	switch (transfer_mode)
    7a74:	2b00      	cmp	r3, #0
    7a76:	d100      	bne.n	7a7a <usart_init+0x12a>
    7a78:	e09b      	b.n	7bb2 <usart_init+0x262>
    7a7a:	2380      	movs	r3, #128	; 0x80
    7a7c:	055b      	lsls	r3, r3, #21
    7a7e:	4599      	cmp	r9, r3
    7a80:	d104      	bne.n	7a8c <usart_init+0x13c>
			if (!config->use_external_clock) {
    7a82:	2327      	movs	r3, #39	; 0x27
    7a84:	5cf3      	ldrb	r3, [r6, r3]
    7a86:	2b00      	cmp	r3, #0
    7a88:	d100      	bne.n	7a8c <usart_init+0x13c>
    7a8a:	e080      	b.n	7b8e <usart_init+0x23e>
	if(config->encoding_format_enable) {
    7a8c:	7e73      	ldrb	r3, [r6, #25]
    7a8e:	2b00      	cmp	r3, #0
    7a90:	d002      	beq.n	7a98 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    7a92:	7eb3      	ldrb	r3, [r6, #26]
    7a94:	4642      	mov	r2, r8
    7a96:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    7a98:	230e      	movs	r3, #14
    7a9a:	aa06      	add	r2, sp, #24
    7a9c:	4694      	mov	ip, r2
    7a9e:	4463      	add	r3, ip
    7aa0:	881b      	ldrh	r3, [r3, #0]
    7aa2:	4642      	mov	r2, r8
    7aa4:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    7aa6:	9b05      	ldr	r3, [sp, #20]
    7aa8:	465a      	mov	r2, fp
    7aaa:	4313      	orrs	r3, r2
    7aac:	9a03      	ldr	r2, [sp, #12]
    7aae:	4313      	orrs	r3, r2
    7ab0:	464a      	mov	r2, r9
    7ab2:	4313      	orrs	r3, r2
    7ab4:	9f02      	ldr	r7, [sp, #8]
    7ab6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7ab8:	9b04      	ldr	r3, [sp, #16]
    7aba:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    7abc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7abe:	4653      	mov	r3, sl
    7ac0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    7ac2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    7ac4:	2327      	movs	r3, #39	; 0x27
    7ac6:	5cf3      	ldrb	r3, [r6, r3]
    7ac8:	2b00      	cmp	r3, #0
    7aca:	d101      	bne.n	7ad0 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    7acc:	3304      	adds	r3, #4
    7ace:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    7ad0:	7e73      	ldrb	r3, [r6, #25]
    7ad2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7ad4:	7f32      	ldrb	r2, [r6, #28]
    7ad6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    7ad8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    7ada:	7f72      	ldrb	r2, [r6, #29]
    7adc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    7ade:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7ae0:	2224      	movs	r2, #36	; 0x24
    7ae2:	5cb2      	ldrb	r2, [r6, r2]
    7ae4:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    7ae6:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    7ae8:	2225      	movs	r2, #37	; 0x25
    7aea:	5cb2      	ldrb	r2, [r6, r2]
    7aec:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    7aee:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    7af0:	7ab1      	ldrb	r1, [r6, #10]
    7af2:	7af2      	ldrb	r2, [r6, #11]
    7af4:	4311      	orrs	r1, r2
    7af6:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    7af8:	8933      	ldrh	r3, [r6, #8]
    7afa:	2bff      	cmp	r3, #255	; 0xff
    7afc:	d07d      	beq.n	7bfa <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    7afe:	2280      	movs	r2, #128	; 0x80
    7b00:	0452      	lsls	r2, r2, #17
    7b02:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    7b04:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    7b06:	232c      	movs	r3, #44	; 0x2c
    7b08:	5cf3      	ldrb	r3, [r6, r3]
    7b0a:	2b00      	cmp	r3, #0
    7b0c:	d103      	bne.n	7b16 <usart_init+0x1c6>
    7b0e:	4b60      	ldr	r3, [pc, #384]	; (7c90 <usart_init+0x340>)
    7b10:	789b      	ldrb	r3, [r3, #2]
    7b12:	079b      	lsls	r3, r3, #30
    7b14:	d501      	bpl.n	7b1a <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    7b16:	2380      	movs	r3, #128	; 0x80
    7b18:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    7b1a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    7b1c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    7b1e:	2b00      	cmp	r3, #0
    7b20:	d1fc      	bne.n	7b1c <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    7b22:	4643      	mov	r3, r8
    7b24:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7b26:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7b28:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7b2a:	2b00      	cmp	r3, #0
    7b2c:	d1fc      	bne.n	7b28 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    7b2e:	4643      	mov	r3, r8
    7b30:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7b32:	ab0e      	add	r3, sp, #56	; 0x38
    7b34:	2280      	movs	r2, #128	; 0x80
    7b36:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7b38:	2200      	movs	r2, #0
    7b3a:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    7b3c:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7b3e:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    7b40:	6b33      	ldr	r3, [r6, #48]	; 0x30
    7b42:	930a      	str	r3, [sp, #40]	; 0x28
    7b44:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7b46:	930b      	str	r3, [sp, #44]	; 0x2c
    7b48:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    7b4a:	930c      	str	r3, [sp, #48]	; 0x30
    7b4c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    7b4e:	9302      	str	r3, [sp, #8]
    7b50:	930d      	str	r3, [sp, #52]	; 0x34
    7b52:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7b54:	ae0a      	add	r6, sp, #40	; 0x28
    7b56:	e05e      	b.n	7c16 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7b58:	2308      	movs	r3, #8
    7b5a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    7b5c:	3b07      	subs	r3, #7
    7b5e:	9307      	str	r3, [sp, #28]
    7b60:	e77b      	b.n	7a5a <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    7b62:	6833      	ldr	r3, [r6, #0]
    7b64:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    7b66:	68f3      	ldr	r3, [r6, #12]
    7b68:	469b      	mov	fp, r3
		config->sample_adjustment |
    7b6a:	6973      	ldr	r3, [r6, #20]
    7b6c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    7b6e:	7e33      	ldrb	r3, [r6, #24]
    7b70:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    7b72:	2326      	movs	r3, #38	; 0x26
    7b74:	5cf3      	ldrb	r3, [r6, r3]
    7b76:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    7b78:	6873      	ldr	r3, [r6, #4]
    7b7a:	4699      	mov	r9, r3
	switch (transfer_mode)
    7b7c:	2b00      	cmp	r3, #0
    7b7e:	d014      	beq.n	7baa <usart_init+0x25a>
    7b80:	2380      	movs	r3, #128	; 0x80
    7b82:	055b      	lsls	r3, r3, #21
    7b84:	4599      	cmp	r9, r3
    7b86:	d100      	bne.n	7b8a <usart_init+0x23a>
    7b88:	e77b      	b.n	7a82 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    7b8a:	2000      	movs	r0, #0
    7b8c:	e020      	b.n	7bd0 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    7b8e:	6a33      	ldr	r3, [r6, #32]
    7b90:	001f      	movs	r7, r3
    7b92:	b2c0      	uxtb	r0, r0
    7b94:	4b3f      	ldr	r3, [pc, #252]	; (7c94 <usart_init+0x344>)
    7b96:	4798      	blx	r3
    7b98:	0001      	movs	r1, r0
    7b9a:	220e      	movs	r2, #14
    7b9c:	ab06      	add	r3, sp, #24
    7b9e:	469c      	mov	ip, r3
    7ba0:	4462      	add	r2, ip
    7ba2:	0038      	movs	r0, r7
    7ba4:	4b3c      	ldr	r3, [pc, #240]	; (7c98 <usart_init+0x348>)
    7ba6:	4798      	blx	r3
    7ba8:	e012      	b.n	7bd0 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    7baa:	2308      	movs	r3, #8
    7bac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7bae:	2300      	movs	r3, #0
    7bb0:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    7bb2:	2327      	movs	r3, #39	; 0x27
    7bb4:	5cf3      	ldrb	r3, [r6, r3]
    7bb6:	2b00      	cmp	r3, #0
    7bb8:	d00e      	beq.n	7bd8 <usart_init+0x288>
				status_code =
    7bba:	9b06      	ldr	r3, [sp, #24]
    7bbc:	9300      	str	r3, [sp, #0]
    7bbe:	9b07      	ldr	r3, [sp, #28]
    7bc0:	220e      	movs	r2, #14
    7bc2:	a906      	add	r1, sp, #24
    7bc4:	468c      	mov	ip, r1
    7bc6:	4462      	add	r2, ip
    7bc8:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    7bca:	6a30      	ldr	r0, [r6, #32]
    7bcc:	4f33      	ldr	r7, [pc, #204]	; (7c9c <usart_init+0x34c>)
    7bce:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    7bd0:	2800      	cmp	r0, #0
    7bd2:	d000      	beq.n	7bd6 <usart_init+0x286>
    7bd4:	e6d4      	b.n	7980 <usart_init+0x30>
    7bd6:	e759      	b.n	7a8c <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    7bd8:	6a33      	ldr	r3, [r6, #32]
    7bda:	001f      	movs	r7, r3
    7bdc:	b2c0      	uxtb	r0, r0
    7bde:	4b2d      	ldr	r3, [pc, #180]	; (7c94 <usart_init+0x344>)
    7be0:	4798      	blx	r3
    7be2:	0001      	movs	r1, r0
				status_code =
    7be4:	9b06      	ldr	r3, [sp, #24]
    7be6:	9300      	str	r3, [sp, #0]
    7be8:	9b07      	ldr	r3, [sp, #28]
    7bea:	220e      	movs	r2, #14
    7bec:	a806      	add	r0, sp, #24
    7bee:	4684      	mov	ip, r0
    7bf0:	4462      	add	r2, ip
    7bf2:	0038      	movs	r0, r7
    7bf4:	4f29      	ldr	r7, [pc, #164]	; (7c9c <usart_init+0x34c>)
    7bf6:	47b8      	blx	r7
    7bf8:	e7ea      	b.n	7bd0 <usart_init+0x280>
		if(config->lin_slave_enable) {
    7bfa:	7ef3      	ldrb	r3, [r6, #27]
    7bfc:	2b00      	cmp	r3, #0
    7bfe:	d082      	beq.n	7b06 <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    7c00:	2380      	movs	r3, #128	; 0x80
    7c02:	04db      	lsls	r3, r3, #19
    7c04:	431f      	orrs	r7, r3
    7c06:	e77e      	b.n	7b06 <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7c08:	0020      	movs	r0, r4
    7c0a:	4b25      	ldr	r3, [pc, #148]	; (7ca0 <usart_init+0x350>)
    7c0c:	4798      	blx	r3
    7c0e:	e007      	b.n	7c20 <usart_init+0x2d0>
    7c10:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    7c12:	2f04      	cmp	r7, #4
    7c14:	d00d      	beq.n	7c32 <usart_init+0x2e2>
    7c16:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7c18:	00bb      	lsls	r3, r7, #2
    7c1a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    7c1c:	2800      	cmp	r0, #0
    7c1e:	d0f3      	beq.n	7c08 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    7c20:	1c43      	adds	r3, r0, #1
    7c22:	d0f5      	beq.n	7c10 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7c24:	a90e      	add	r1, sp, #56	; 0x38
    7c26:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7c28:	0c00      	lsrs	r0, r0, #16
    7c2a:	b2c0      	uxtb	r0, r0
    7c2c:	4b1d      	ldr	r3, [pc, #116]	; (7ca4 <usart_init+0x354>)
    7c2e:	4798      	blx	r3
    7c30:	e7ee      	b.n	7c10 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    7c32:	2300      	movs	r3, #0
    7c34:	60eb      	str	r3, [r5, #12]
    7c36:	612b      	str	r3, [r5, #16]
    7c38:	616b      	str	r3, [r5, #20]
    7c3a:	61ab      	str	r3, [r5, #24]
    7c3c:	61eb      	str	r3, [r5, #28]
    7c3e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    7c40:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    7c42:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    7c44:	2200      	movs	r2, #0
    7c46:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    7c48:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    7c4a:	3330      	adds	r3, #48	; 0x30
    7c4c:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    7c4e:	3301      	adds	r3, #1
    7c50:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    7c52:	3301      	adds	r3, #1
    7c54:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    7c56:	3301      	adds	r3, #1
    7c58:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    7c5a:	6828      	ldr	r0, [r5, #0]
    7c5c:	4b07      	ldr	r3, [pc, #28]	; (7c7c <usart_init+0x32c>)
    7c5e:	4798      	blx	r3
    7c60:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    7c62:	4911      	ldr	r1, [pc, #68]	; (7ca8 <usart_init+0x358>)
    7c64:	4b11      	ldr	r3, [pc, #68]	; (7cac <usart_init+0x35c>)
    7c66:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    7c68:	00a4      	lsls	r4, r4, #2
    7c6a:	4b11      	ldr	r3, [pc, #68]	; (7cb0 <usart_init+0x360>)
    7c6c:	50e5      	str	r5, [r4, r3]
	return status_code;
    7c6e:	2000      	movs	r0, #0
    7c70:	e686      	b.n	7980 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    7c72:	2310      	movs	r3, #16
    7c74:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    7c76:	2300      	movs	r3, #0
    7c78:	9307      	str	r3, [sp, #28]
    7c7a:	e6ee      	b.n	7a5a <usart_init+0x10a>
    7c7c:	00007479 	.word	0x00007479
    7c80:	40000400 	.word	0x40000400
    7c84:	00008559 	.word	0x00008559
    7c88:	000084e9 	.word	0x000084e9
    7c8c:	0000732d 	.word	0x0000732d
    7c90:	41002000 	.word	0x41002000
    7c94:	0000857d 	.word	0x0000857d
    7c98:	0000726f 	.word	0x0000726f
    7c9c:	00007299 	.word	0x00007299
    7ca0:	00007379 	.word	0x00007379
    7ca4:	00008655 	.word	0x00008655
    7ca8:	00007e99 	.word	0x00007e99
    7cac:	000074b5 	.word	0x000074b5
    7cb0:	20001d00 	.word	0x20001d00

00007cb4 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    7cb4:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    7cb6:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    7cb8:	2a00      	cmp	r2, #0
    7cba:	d101      	bne.n	7cc0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    7cbc:	0018      	movs	r0, r3
    7cbe:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    7cc0:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    7cc2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    7cc4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    7cc6:	2a00      	cmp	r2, #0
    7cc8:	d1f8      	bne.n	7cbc <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7cca:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    7ccc:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    7cce:	2102      	movs	r1, #2
    7cd0:	7e13      	ldrb	r3, [r2, #24]
    7cd2:	420b      	tst	r3, r1
    7cd4:	d0fc      	beq.n	7cd0 <usart_write_wait+0x1c>
	return STATUS_OK;
    7cd6:	2300      	movs	r3, #0
    7cd8:	e7f0      	b.n	7cbc <usart_write_wait+0x8>

00007cda <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    7cda:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    7cdc:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    7cde:	2a00      	cmp	r2, #0
    7ce0:	d101      	bne.n	7ce6 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    7ce2:	0018      	movs	r0, r3
    7ce4:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    7ce6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    7ce8:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    7cea:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    7cec:	2a00      	cmp	r2, #0
    7cee:	d1f8      	bne.n	7ce2 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7cf0:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    7cf2:	7e10      	ldrb	r0, [r2, #24]
    7cf4:	0740      	lsls	r0, r0, #29
    7cf6:	d5f4      	bpl.n	7ce2 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7cf8:	8b53      	ldrh	r3, [r2, #26]
    7cfa:	b2db      	uxtb	r3, r3
	if (error_code) {
    7cfc:	0698      	lsls	r0, r3, #26
    7cfe:	d01d      	beq.n	7d3c <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    7d00:	0798      	lsls	r0, r3, #30
    7d02:	d503      	bpl.n	7d0c <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7d04:	2302      	movs	r3, #2
    7d06:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    7d08:	3318      	adds	r3, #24
    7d0a:	e7ea      	b.n	7ce2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7d0c:	0758      	lsls	r0, r3, #29
    7d0e:	d503      	bpl.n	7d18 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7d10:	2304      	movs	r3, #4
    7d12:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    7d14:	331a      	adds	r3, #26
    7d16:	e7e4      	b.n	7ce2 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7d18:	07d8      	lsls	r0, r3, #31
    7d1a:	d503      	bpl.n	7d24 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7d1c:	2301      	movs	r3, #1
    7d1e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    7d20:	3312      	adds	r3, #18
    7d22:	e7de      	b.n	7ce2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    7d24:	06d8      	lsls	r0, r3, #27
    7d26:	d503      	bpl.n	7d30 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7d28:	2310      	movs	r3, #16
    7d2a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    7d2c:	3332      	adds	r3, #50	; 0x32
    7d2e:	e7d8      	b.n	7ce2 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    7d30:	069b      	lsls	r3, r3, #26
    7d32:	d503      	bpl.n	7d3c <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7d34:	2320      	movs	r3, #32
    7d36:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    7d38:	3321      	adds	r3, #33	; 0x21
    7d3a:	e7d2      	b.n	7ce2 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    7d3c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    7d3e:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    7d40:	2300      	movs	r3, #0
    7d42:	e7ce      	b.n	7ce2 <usart_read_wait+0x8>

00007d44 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    7d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    7d46:	46ce      	mov	lr, r9
    7d48:	4647      	mov	r7, r8
    7d4a:	b580      	push	{r7, lr}
    7d4c:	b083      	sub	sp, #12
    7d4e:	0005      	movs	r5, r0
    7d50:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7d52:	2017      	movs	r0, #23
	if (length == 0) {
    7d54:	2a00      	cmp	r2, #0
    7d56:	d104      	bne.n	7d62 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    7d58:	b003      	add	sp, #12
    7d5a:	bc0c      	pop	{r2, r3}
    7d5c:	4690      	mov	r8, r2
    7d5e:	4699      	mov	r9, r3
    7d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    7d62:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    7d64:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    7d66:	2b00      	cmp	r3, #0
    7d68:	d0f6      	beq.n	7d58 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7d6a:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    7d6c:	3a01      	subs	r2, #1
    7d6e:	b293      	uxth	r3, r2
    7d70:	4699      	mov	r9, r3
    7d72:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    7d74:	2701      	movs	r7, #1
	while (length--) {
    7d76:	4b20      	ldr	r3, [pc, #128]	; (7df8 <usart_write_buffer_wait+0xb4>)
    7d78:	4698      	mov	r8, r3
    7d7a:	e011      	b.n	7da0 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    7d7c:	1c73      	adds	r3, r6, #1
    7d7e:	b29b      	uxth	r3, r3
    7d80:	9a01      	ldr	r2, [sp, #4]
    7d82:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7d84:	796a      	ldrb	r2, [r5, #5]
    7d86:	2a01      	cmp	r2, #1
    7d88:	d017      	beq.n	7dba <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    7d8a:	b289      	uxth	r1, r1
    7d8c:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    7d8e:	0028      	movs	r0, r5
    7d90:	4b1a      	ldr	r3, [pc, #104]	; (7dfc <usart_write_buffer_wait+0xb8>)
    7d92:	4798      	blx	r3
	while (length--) {
    7d94:	464b      	mov	r3, r9
    7d96:	3b01      	subs	r3, #1
    7d98:	b29b      	uxth	r3, r3
    7d9a:	4699      	mov	r9, r3
    7d9c:	4543      	cmp	r3, r8
    7d9e:	d013      	beq.n	7dc8 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    7da0:	7e23      	ldrb	r3, [r4, #24]
    7da2:	423b      	tst	r3, r7
    7da4:	d1ea      	bne.n	7d7c <usart_write_buffer_wait+0x38>
    7da6:	4b14      	ldr	r3, [pc, #80]	; (7df8 <usart_write_buffer_wait+0xb4>)
    7da8:	7e22      	ldrb	r2, [r4, #24]
    7daa:	423a      	tst	r2, r7
    7dac:	d1e6      	bne.n	7d7c <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    7dae:	2b01      	cmp	r3, #1
    7db0:	d019      	beq.n	7de6 <usart_write_buffer_wait+0xa2>
    7db2:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7db4:	2b00      	cmp	r3, #0
    7db6:	d1f7      	bne.n	7da8 <usart_write_buffer_wait+0x64>
    7db8:	e7e0      	b.n	7d7c <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    7dba:	3602      	adds	r6, #2
    7dbc:	b2b6      	uxth	r6, r6
    7dbe:	9a01      	ldr	r2, [sp, #4]
    7dc0:	5cd3      	ldrb	r3, [r2, r3]
    7dc2:	021b      	lsls	r3, r3, #8
    7dc4:	4319      	orrs	r1, r3
    7dc6:	e7e2      	b.n	7d8e <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    7dc8:	7e23      	ldrb	r3, [r4, #24]
    7dca:	079b      	lsls	r3, r3, #30
    7dcc:	d40d      	bmi.n	7dea <usart_write_buffer_wait+0xa6>
    7dce:	4b0a      	ldr	r3, [pc, #40]	; (7df8 <usart_write_buffer_wait+0xb4>)
    7dd0:	2102      	movs	r1, #2
    7dd2:	7e22      	ldrb	r2, [r4, #24]
    7dd4:	420a      	tst	r2, r1
    7dd6:	d10a      	bne.n	7dee <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    7dd8:	2b01      	cmp	r3, #1
    7dda:	d00a      	beq.n	7df2 <usart_write_buffer_wait+0xae>
    7ddc:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7dde:	2b00      	cmp	r3, #0
    7de0:	d1f7      	bne.n	7dd2 <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    7de2:	2000      	movs	r0, #0
    7de4:	e7b8      	b.n	7d58 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    7de6:	2012      	movs	r0, #18
    7de8:	e7b6      	b.n	7d58 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    7dea:	2000      	movs	r0, #0
    7dec:	e7b4      	b.n	7d58 <usart_write_buffer_wait+0x14>
    7dee:	2000      	movs	r0, #0
    7df0:	e7b2      	b.n	7d58 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    7df2:	2012      	movs	r0, #18
    7df4:	e7b0      	b.n	7d58 <usart_write_buffer_wait+0x14>
    7df6:	46c0      	nop			; (mov r8, r8)
    7df8:	0000ffff 	.word	0x0000ffff
    7dfc:	00007cb5 	.word	0x00007cb5

00007e00 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    7e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e02:	46d6      	mov	lr, sl
    7e04:	b500      	push	{lr}
    7e06:	b084      	sub	sp, #16
    7e08:	0004      	movs	r4, r0
    7e0a:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    7e0c:	2017      	movs	r0, #23
	if (length == 0) {
    7e0e:	2a00      	cmp	r2, #0
    7e10:	d103      	bne.n	7e1a <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    7e12:	b004      	add	sp, #16
    7e14:	bc04      	pop	{r2}
    7e16:	4692      	mov	sl, r2
    7e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    7e1a:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    7e1c:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    7e1e:	2b00      	cmp	r3, #0
    7e20:	d0f7      	beq.n	7e12 <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    7e22:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    7e24:	3a01      	subs	r2, #1
    7e26:	b293      	uxth	r3, r2
    7e28:	469a      	mov	sl, r3
    7e2a:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    7e2c:	2704      	movs	r7, #4
    7e2e:	e019      	b.n	7e64 <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    7e30:	2300      	movs	r3, #0
    7e32:	aa02      	add	r2, sp, #8
    7e34:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    7e36:	1d91      	adds	r1, r2, #6
    7e38:	0020      	movs	r0, r4
    7e3a:	4b15      	ldr	r3, [pc, #84]	; (7e90 <usart_read_buffer_wait+0x90>)
    7e3c:	4798      	blx	r3
		if (retval != STATUS_OK) {
    7e3e:	2800      	cmp	r0, #0
    7e40:	d1e7      	bne.n	7e12 <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    7e42:	1c69      	adds	r1, r5, #1
    7e44:	b289      	uxth	r1, r1
    7e46:	ab02      	add	r3, sp, #8
    7e48:	88db      	ldrh	r3, [r3, #6]
    7e4a:	9a01      	ldr	r2, [sp, #4]
    7e4c:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7e4e:	7962      	ldrb	r2, [r4, #5]
    7e50:	2a01      	cmp	r2, #1
    7e52:	d014      	beq.n	7e7e <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    7e54:	000d      	movs	r5, r1
	while (length--) {
    7e56:	4653      	mov	r3, sl
    7e58:	3b01      	subs	r3, #1
    7e5a:	b29b      	uxth	r3, r3
    7e5c:	469a      	mov	sl, r3
    7e5e:	4b0d      	ldr	r3, [pc, #52]	; (7e94 <usart_read_buffer_wait+0x94>)
    7e60:	459a      	cmp	sl, r3
    7e62:	d0d6      	beq.n	7e12 <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    7e64:	7e33      	ldrb	r3, [r6, #24]
    7e66:	423b      	tst	r3, r7
    7e68:	d1e2      	bne.n	7e30 <usart_read_buffer_wait+0x30>
    7e6a:	4b0a      	ldr	r3, [pc, #40]	; (7e94 <usart_read_buffer_wait+0x94>)
    7e6c:	7e32      	ldrb	r2, [r6, #24]
    7e6e:	423a      	tst	r2, r7
    7e70:	d1de      	bne.n	7e30 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    7e72:	2b01      	cmp	r3, #1
    7e74:	d009      	beq.n	7e8a <usart_read_buffer_wait+0x8a>
    7e76:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    7e78:	2b00      	cmp	r3, #0
    7e7a:	d1f7      	bne.n	7e6c <usart_read_buffer_wait+0x6c>
    7e7c:	e7d8      	b.n	7e30 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    7e7e:	3502      	adds	r5, #2
    7e80:	b2ad      	uxth	r5, r5
    7e82:	0a1b      	lsrs	r3, r3, #8
    7e84:	9a01      	ldr	r2, [sp, #4]
    7e86:	5453      	strb	r3, [r2, r1]
    7e88:	e7e5      	b.n	7e56 <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    7e8a:	2012      	movs	r0, #18
    7e8c:	e7c1      	b.n	7e12 <usart_read_buffer_wait+0x12>
    7e8e:	46c0      	nop			; (mov r8, r8)
    7e90:	00007cdb 	.word	0x00007cdb
    7e94:	0000ffff 	.word	0x0000ffff

00007e98 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    7e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    7e9a:	0080      	lsls	r0, r0, #2
    7e9c:	4b62      	ldr	r3, [pc, #392]	; (8028 <_usart_interrupt_handler+0x190>)
    7e9e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    7ea0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7ea2:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d1fc      	bne.n	7ea2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    7ea8:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    7eaa:	7da6      	ldrb	r6, [r4, #22]
    7eac:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    7eae:	2330      	movs	r3, #48	; 0x30
    7eb0:	5ceb      	ldrb	r3, [r5, r3]
    7eb2:	2231      	movs	r2, #49	; 0x31
    7eb4:	5caf      	ldrb	r7, [r5, r2]
    7eb6:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    7eb8:	07f3      	lsls	r3, r6, #31
    7eba:	d522      	bpl.n	7f02 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    7ebc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7ebe:	b29b      	uxth	r3, r3
    7ec0:	2b00      	cmp	r3, #0
    7ec2:	d01c      	beq.n	7efe <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7ec4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7ec6:	7813      	ldrb	r3, [r2, #0]
    7ec8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    7eca:	1c51      	adds	r1, r2, #1
    7ecc:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7ece:	7969      	ldrb	r1, [r5, #5]
    7ed0:	2901      	cmp	r1, #1
    7ed2:	d00e      	beq.n	7ef2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    7ed4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    7ed6:	05db      	lsls	r3, r3, #23
    7ed8:	0ddb      	lsrs	r3, r3, #23
    7eda:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    7edc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    7ede:	3b01      	subs	r3, #1
    7ee0:	b29b      	uxth	r3, r3
    7ee2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    7ee4:	2b00      	cmp	r3, #0
    7ee6:	d10c      	bne.n	7f02 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7ee8:	3301      	adds	r3, #1
    7eea:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    7eec:	3301      	adds	r3, #1
    7eee:	75a3      	strb	r3, [r4, #22]
    7ef0:	e007      	b.n	7f02 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    7ef2:	7851      	ldrb	r1, [r2, #1]
    7ef4:	0209      	lsls	r1, r1, #8
    7ef6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    7ef8:	3202      	adds	r2, #2
    7efa:	62aa      	str	r2, [r5, #40]	; 0x28
    7efc:	e7eb      	b.n	7ed6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    7efe:	2301      	movs	r3, #1
    7f00:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    7f02:	07b3      	lsls	r3, r6, #30
    7f04:	d506      	bpl.n	7f14 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    7f06:	2302      	movs	r3, #2
    7f08:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    7f0a:	2200      	movs	r2, #0
    7f0c:	3331      	adds	r3, #49	; 0x31
    7f0e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    7f10:	07fb      	lsls	r3, r7, #31
    7f12:	d41a      	bmi.n	7f4a <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    7f14:	0773      	lsls	r3, r6, #29
    7f16:	d565      	bpl.n	7fe4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    7f18:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7f1a:	b29b      	uxth	r3, r3
    7f1c:	2b00      	cmp	r3, #0
    7f1e:	d05f      	beq.n	7fe0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7f20:	8b63      	ldrh	r3, [r4, #26]
    7f22:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    7f24:	071a      	lsls	r2, r3, #28
    7f26:	d414      	bmi.n	7f52 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    7f28:	223f      	movs	r2, #63	; 0x3f
    7f2a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    7f2c:	2b00      	cmp	r3, #0
    7f2e:	d034      	beq.n	7f9a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    7f30:	079a      	lsls	r2, r3, #30
    7f32:	d511      	bpl.n	7f58 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    7f34:	221a      	movs	r2, #26
    7f36:	2332      	movs	r3, #50	; 0x32
    7f38:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    7f3a:	3b30      	subs	r3, #48	; 0x30
    7f3c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    7f3e:	077b      	lsls	r3, r7, #29
    7f40:	d550      	bpl.n	7fe4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    7f42:	0028      	movs	r0, r5
    7f44:	696b      	ldr	r3, [r5, #20]
    7f46:	4798      	blx	r3
    7f48:	e04c      	b.n	7fe4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    7f4a:	0028      	movs	r0, r5
    7f4c:	68eb      	ldr	r3, [r5, #12]
    7f4e:	4798      	blx	r3
    7f50:	e7e0      	b.n	7f14 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    7f52:	2237      	movs	r2, #55	; 0x37
    7f54:	4013      	ands	r3, r2
    7f56:	e7e9      	b.n	7f2c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    7f58:	075a      	lsls	r2, r3, #29
    7f5a:	d505      	bpl.n	7f68 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    7f5c:	221e      	movs	r2, #30
    7f5e:	2332      	movs	r3, #50	; 0x32
    7f60:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    7f62:	3b2e      	subs	r3, #46	; 0x2e
    7f64:	8363      	strh	r3, [r4, #26]
    7f66:	e7ea      	b.n	7f3e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    7f68:	07da      	lsls	r2, r3, #31
    7f6a:	d505      	bpl.n	7f78 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    7f6c:	2213      	movs	r2, #19
    7f6e:	2332      	movs	r3, #50	; 0x32
    7f70:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    7f72:	3b31      	subs	r3, #49	; 0x31
    7f74:	8363      	strh	r3, [r4, #26]
    7f76:	e7e2      	b.n	7f3e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    7f78:	06da      	lsls	r2, r3, #27
    7f7a:	d505      	bpl.n	7f88 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    7f7c:	2242      	movs	r2, #66	; 0x42
    7f7e:	2332      	movs	r3, #50	; 0x32
    7f80:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    7f82:	3b22      	subs	r3, #34	; 0x22
    7f84:	8363      	strh	r3, [r4, #26]
    7f86:	e7da      	b.n	7f3e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    7f88:	2220      	movs	r2, #32
    7f8a:	421a      	tst	r2, r3
    7f8c:	d0d7      	beq.n	7f3e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    7f8e:	3221      	adds	r2, #33	; 0x21
    7f90:	2332      	movs	r3, #50	; 0x32
    7f92:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    7f94:	3b12      	subs	r3, #18
    7f96:	8363      	strh	r3, [r4, #26]
    7f98:	e7d1      	b.n	7f3e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    7f9a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    7f9c:	05db      	lsls	r3, r3, #23
    7f9e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    7fa0:	b2da      	uxtb	r2, r3
    7fa2:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7fa4:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    7fa6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7fa8:	1c51      	adds	r1, r2, #1
    7faa:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    7fac:	7969      	ldrb	r1, [r5, #5]
    7fae:	2901      	cmp	r1, #1
    7fb0:	d010      	beq.n	7fd4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    7fb2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    7fb4:	3b01      	subs	r3, #1
    7fb6:	b29b      	uxth	r3, r3
    7fb8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    7fba:	2b00      	cmp	r3, #0
    7fbc:	d112      	bne.n	7fe4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7fbe:	3304      	adds	r3, #4
    7fc0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    7fc2:	2200      	movs	r2, #0
    7fc4:	332e      	adds	r3, #46	; 0x2e
    7fc6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    7fc8:	07bb      	lsls	r3, r7, #30
    7fca:	d50b      	bpl.n	7fe4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    7fcc:	0028      	movs	r0, r5
    7fce:	692b      	ldr	r3, [r5, #16]
    7fd0:	4798      	blx	r3
    7fd2:	e007      	b.n	7fe4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    7fd4:	0a1b      	lsrs	r3, r3, #8
    7fd6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    7fd8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7fda:	3301      	adds	r3, #1
    7fdc:	626b      	str	r3, [r5, #36]	; 0x24
    7fde:	e7e8      	b.n	7fb2 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    7fe0:	2304      	movs	r3, #4
    7fe2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    7fe4:	06f3      	lsls	r3, r6, #27
    7fe6:	d504      	bpl.n	7ff2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    7fe8:	2310      	movs	r3, #16
    7fea:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    7fec:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    7fee:	06fb      	lsls	r3, r7, #27
    7ff0:	d40e      	bmi.n	8010 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    7ff2:	06b3      	lsls	r3, r6, #26
    7ff4:	d504      	bpl.n	8000 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    7ff6:	2320      	movs	r3, #32
    7ff8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    7ffa:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    7ffc:	073b      	lsls	r3, r7, #28
    7ffe:	d40b      	bmi.n	8018 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    8000:	0733      	lsls	r3, r6, #28
    8002:	d504      	bpl.n	800e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    8004:	2308      	movs	r3, #8
    8006:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    8008:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    800a:	06bb      	lsls	r3, r7, #26
    800c:	d408      	bmi.n	8020 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    800e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    8010:	0028      	movs	r0, r5
    8012:	69eb      	ldr	r3, [r5, #28]
    8014:	4798      	blx	r3
    8016:	e7ec      	b.n	7ff2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    8018:	0028      	movs	r0, r5
    801a:	69ab      	ldr	r3, [r5, #24]
    801c:	4798      	blx	r3
    801e:	e7ef      	b.n	8000 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    8020:	6a2b      	ldr	r3, [r5, #32]
    8022:	0028      	movs	r0, r5
    8024:	4798      	blx	r3
}
    8026:	e7f2      	b.n	800e <_usart_interrupt_handler+0x176>
    8028:	20001d00 	.word	0x20001d00

0000802c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    802c:	b510      	push	{r4, lr}
	switch (clock_source) {
    802e:	2808      	cmp	r0, #8
    8030:	d803      	bhi.n	803a <system_clock_source_get_hz+0xe>
    8032:	0080      	lsls	r0, r0, #2
    8034:	4b1d      	ldr	r3, [pc, #116]	; (80ac <system_clock_source_get_hz+0x80>)
    8036:	581b      	ldr	r3, [r3, r0]
    8038:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    803a:	2000      	movs	r0, #0
    803c:	e034      	b.n	80a8 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
    803e:	4b1c      	ldr	r3, [pc, #112]	; (80b0 <system_clock_source_get_hz+0x84>)
    8040:	6918      	ldr	r0, [r3, #16]
    8042:	e031      	b.n	80a8 <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    8044:	4b1b      	ldr	r3, [pc, #108]	; (80b4 <system_clock_source_get_hz+0x88>)
    8046:	7d18      	ldrb	r0, [r3, #20]
    8048:	0700      	lsls	r0, r0, #28
    804a:	0f80      	lsrs	r0, r0, #30
    804c:	1c43      	adds	r3, r0, #1
    804e:	481a      	ldr	r0, [pc, #104]	; (80b8 <system_clock_source_get_hz+0x8c>)
    8050:	4358      	muls	r0, r3
    8052:	e029      	b.n	80a8 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
    8054:	4b16      	ldr	r3, [pc, #88]	; (80b0 <system_clock_source_get_hz+0x84>)
    8056:	6958      	ldr	r0, [r3, #20]
    8058:	e026      	b.n	80a8 <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    805a:	4b15      	ldr	r3, [pc, #84]	; (80b0 <system_clock_source_get_hz+0x84>)
    805c:	681b      	ldr	r3, [r3, #0]
			return 0;
    805e:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    8060:	079b      	lsls	r3, r3, #30
    8062:	d521      	bpl.n	80a8 <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    8064:	4913      	ldr	r1, [pc, #76]	; (80b4 <system_clock_source_get_hz+0x88>)
    8066:	2280      	movs	r2, #128	; 0x80
    8068:	0052      	lsls	r2, r2, #1
    806a:	68cb      	ldr	r3, [r1, #12]
    806c:	4213      	tst	r3, r2
    806e:	d0fc      	beq.n	806a <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    8070:	4b0f      	ldr	r3, [pc, #60]	; (80b0 <system_clock_source_get_hz+0x84>)
    8072:	681a      	ldr	r2, [r3, #0]
    8074:	2324      	movs	r3, #36	; 0x24
    8076:	4013      	ands	r3, r2
    8078:	2b04      	cmp	r3, #4
    807a:	d001      	beq.n	8080 <system_clock_source_get_hz+0x54>
			return 48000000UL;
    807c:	480f      	ldr	r0, [pc, #60]	; (80bc <system_clock_source_get_hz+0x90>)
    807e:	e013      	b.n	80a8 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    8080:	2000      	movs	r0, #0
    8082:	4b0f      	ldr	r3, [pc, #60]	; (80c0 <system_clock_source_get_hz+0x94>)
    8084:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    8086:	4b0a      	ldr	r3, [pc, #40]	; (80b0 <system_clock_source_get_hz+0x84>)
    8088:	689b      	ldr	r3, [r3, #8]
    808a:	041b      	lsls	r3, r3, #16
    808c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    808e:	4358      	muls	r0, r3
    8090:	e00a      	b.n	80a8 <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    8092:	2328      	movs	r3, #40	; 0x28
    8094:	4a07      	ldr	r2, [pc, #28]	; (80b4 <system_clock_source_get_hz+0x88>)
    8096:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    8098:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    809a:	079b      	lsls	r3, r3, #30
    809c:	d504      	bpl.n	80a8 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
    809e:	4b04      	ldr	r3, [pc, #16]	; (80b0 <system_clock_source_get_hz+0x84>)
    80a0:	68d8      	ldr	r0, [r3, #12]
    80a2:	e001      	b.n	80a8 <system_clock_source_get_hz+0x7c>
		return 32768UL;
    80a4:	2080      	movs	r0, #128	; 0x80
    80a6:	0200      	lsls	r0, r0, #8
	}
}
    80a8:	bd10      	pop	{r4, pc}
    80aa:	46c0      	nop			; (mov r8, r8)
    80ac:	000131cc 	.word	0x000131cc
    80b0:	200000e0 	.word	0x200000e0
    80b4:	40000c00 	.word	0x40000c00
    80b8:	003d0900 	.word	0x003d0900
    80bc:	02dc6c00 	.word	0x02dc6c00
    80c0:	0000857d 	.word	0x0000857d

000080c4 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    80c4:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    80c6:	4c0b      	ldr	r4, [pc, #44]	; (80f4 <system_clock_source_osc16m_set_config+0x30>)
    80c8:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    80ca:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    80cc:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    80ce:	7802      	ldrb	r2, [r0, #0]
    80d0:	2103      	movs	r1, #3
    80d2:	4011      	ands	r1, r2
    80d4:	0089      	lsls	r1, r1, #2
    80d6:	220c      	movs	r2, #12
    80d8:	4393      	bics	r3, r2
    80da:	430b      	orrs	r3, r1
    80dc:	3a0b      	subs	r2, #11
    80de:	4032      	ands	r2, r6
    80e0:	0192      	lsls	r2, r2, #6
    80e2:	2140      	movs	r1, #64	; 0x40
    80e4:	438b      	bics	r3, r1
    80e6:	4313      	orrs	r3, r2
    80e8:	01ed      	lsls	r5, r5, #7
    80ea:	227f      	movs	r2, #127	; 0x7f
    80ec:	4013      	ands	r3, r2
    80ee:	432b      	orrs	r3, r5
    80f0:	7523      	strb	r3, [r4, #20]
}
    80f2:	bd70      	pop	{r4, r5, r6, pc}
    80f4:	40000c00 	.word	0x40000c00

000080f8 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    80f8:	2808      	cmp	r0, #8
    80fa:	d803      	bhi.n	8104 <system_clock_source_enable+0xc>
    80fc:	0080      	lsls	r0, r0, #2
    80fe:	4b29      	ldr	r3, [pc, #164]	; (81a4 <system_clock_source_enable+0xac>)
    8100:	581b      	ldr	r3, [r3, r0]
    8102:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8104:	2017      	movs	r0, #23
    8106:	e04b      	b.n	81a0 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    8108:	4a27      	ldr	r2, [pc, #156]	; (81a8 <system_clock_source_enable+0xb0>)
    810a:	7d13      	ldrb	r3, [r2, #20]
    810c:	2102      	movs	r1, #2
    810e:	430b      	orrs	r3, r1
    8110:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    8112:	2000      	movs	r0, #0
    8114:	e044      	b.n	81a0 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    8116:	4a25      	ldr	r2, [pc, #148]	; (81ac <system_clock_source_enable+0xb4>)
    8118:	6993      	ldr	r3, [r2, #24]
    811a:	2102      	movs	r1, #2
    811c:	430b      	orrs	r3, r1
    811e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    8120:	2000      	movs	r0, #0
		break;
    8122:	e03d      	b.n	81a0 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    8124:	4a20      	ldr	r2, [pc, #128]	; (81a8 <system_clock_source_enable+0xb0>)
    8126:	8a13      	ldrh	r3, [r2, #16]
    8128:	2102      	movs	r1, #2
    812a:	430b      	orrs	r3, r1
    812c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    812e:	2000      	movs	r0, #0
		break;
    8130:	e036      	b.n	81a0 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    8132:	4a1e      	ldr	r2, [pc, #120]	; (81ac <system_clock_source_enable+0xb4>)
    8134:	6953      	ldr	r3, [r2, #20]
    8136:	2102      	movs	r1, #2
    8138:	430b      	orrs	r3, r1
    813a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    813c:	2000      	movs	r0, #0
		break;
    813e:	e02f      	b.n	81a0 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    8140:	491b      	ldr	r1, [pc, #108]	; (81b0 <system_clock_source_enable+0xb8>)
    8142:	680b      	ldr	r3, [r1, #0]
    8144:	2202      	movs	r2, #2
    8146:	4313      	orrs	r3, r2
    8148:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    814a:	4b17      	ldr	r3, [pc, #92]	; (81a8 <system_clock_source_enable+0xb0>)
    814c:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    814e:	0019      	movs	r1, r3
    8150:	32fe      	adds	r2, #254	; 0xfe
    8152:	68cb      	ldr	r3, [r1, #12]
    8154:	4213      	tst	r3, r2
    8156:	d0fc      	beq.n	8152 <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    8158:	4a15      	ldr	r2, [pc, #84]	; (81b0 <system_clock_source_enable+0xb8>)
    815a:	6891      	ldr	r1, [r2, #8]
    815c:	4b12      	ldr	r3, [pc, #72]	; (81a8 <system_clock_source_enable+0xb0>)
    815e:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    8160:	6852      	ldr	r2, [r2, #4]
    8162:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    8164:	2200      	movs	r2, #0
    8166:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    8168:	0019      	movs	r1, r3
    816a:	3201      	adds	r2, #1
    816c:	32ff      	adds	r2, #255	; 0xff
    816e:	68cb      	ldr	r3, [r1, #12]
    8170:	4213      	tst	r3, r2
    8172:	d0fc      	beq.n	816e <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    8174:	4b0e      	ldr	r3, [pc, #56]	; (81b0 <system_clock_source_enable+0xb8>)
    8176:	681b      	ldr	r3, [r3, #0]
    8178:	b29b      	uxth	r3, r3
    817a:	4a0b      	ldr	r2, [pc, #44]	; (81a8 <system_clock_source_enable+0xb0>)
    817c:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    817e:	2000      	movs	r0, #0
    8180:	e00e      	b.n	81a0 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    8182:	4909      	ldr	r1, [pc, #36]	; (81a8 <system_clock_source_enable+0xb0>)
    8184:	2228      	movs	r2, #40	; 0x28
    8186:	5c8b      	ldrb	r3, [r1, r2]
    8188:	2002      	movs	r0, #2
    818a:	4303      	orrs	r3, r0
    818c:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    818e:	0008      	movs	r0, r1
    8190:	2138      	movs	r1, #56	; 0x38
    8192:	3a26      	subs	r2, #38	; 0x26
    8194:	5c43      	ldrb	r3, [r0, r1]
    8196:	4213      	tst	r3, r2
    8198:	d1fc      	bne.n	8194 <system_clock_source_enable+0x9c>
	return STATUS_OK;
    819a:	2000      	movs	r0, #0
    819c:	e000      	b.n	81a0 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    819e:	2000      	movs	r0, #0
}
    81a0:	4770      	bx	lr
    81a2:	46c0      	nop			; (mov r8, r8)
    81a4:	000131f0 	.word	0x000131f0
    81a8:	40000c00 	.word	0x40000c00
    81ac:	40001000 	.word	0x40001000
    81b0:	200000e0 	.word	0x200000e0

000081b4 <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    81b4:	2808      	cmp	r0, #8
    81b6:	d832      	bhi.n	821e <system_clock_source_disable+0x6a>
    81b8:	0080      	lsls	r0, r0, #2
    81ba:	4b1a      	ldr	r3, [pc, #104]	; (8224 <system_clock_source_disable+0x70>)
    81bc:	581b      	ldr	r3, [r3, r0]
    81be:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    81c0:	4a19      	ldr	r2, [pc, #100]	; (8228 <system_clock_source_disable+0x74>)
    81c2:	7d13      	ldrb	r3, [r2, #20]
    81c4:	2102      	movs	r1, #2
    81c6:	438b      	bics	r3, r1
    81c8:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    81ca:	2000      	movs	r0, #0
}
    81cc:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    81ce:	4a17      	ldr	r2, [pc, #92]	; (822c <system_clock_source_disable+0x78>)
    81d0:	6993      	ldr	r3, [r2, #24]
    81d2:	2102      	movs	r1, #2
    81d4:	438b      	bics	r3, r1
    81d6:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    81d8:	2000      	movs	r0, #0
		break;
    81da:	e7f7      	b.n	81cc <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    81dc:	4a12      	ldr	r2, [pc, #72]	; (8228 <system_clock_source_disable+0x74>)
    81de:	8a13      	ldrh	r3, [r2, #16]
    81e0:	2102      	movs	r1, #2
    81e2:	438b      	bics	r3, r1
    81e4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    81e6:	2000      	movs	r0, #0
		break;
    81e8:	e7f0      	b.n	81cc <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    81ea:	4a10      	ldr	r2, [pc, #64]	; (822c <system_clock_source_disable+0x78>)
    81ec:	6953      	ldr	r3, [r2, #20]
    81ee:	2102      	movs	r1, #2
    81f0:	438b      	bics	r3, r1
    81f2:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    81f4:	2000      	movs	r0, #0
		break;
    81f6:	e7e9      	b.n	81cc <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    81f8:	4b0d      	ldr	r3, [pc, #52]	; (8230 <system_clock_source_disable+0x7c>)
    81fa:	681a      	ldr	r2, [r3, #0]
    81fc:	2102      	movs	r1, #2
    81fe:	438a      	bics	r2, r1
    8200:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    8202:	681b      	ldr	r3, [r3, #0]
    8204:	b29b      	uxth	r3, r3
    8206:	4a08      	ldr	r2, [pc, #32]	; (8228 <system_clock_source_disable+0x74>)
    8208:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    820a:	2000      	movs	r0, #0
		break;
    820c:	e7de      	b.n	81cc <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    820e:	4906      	ldr	r1, [pc, #24]	; (8228 <system_clock_source_disable+0x74>)
    8210:	2228      	movs	r2, #40	; 0x28
    8212:	5c8b      	ldrb	r3, [r1, r2]
    8214:	2002      	movs	r0, #2
    8216:	4383      	bics	r3, r0
    8218:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    821a:	2000      	movs	r0, #0
		break;
    821c:	e7d6      	b.n	81cc <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    821e:	2017      	movs	r0, #23
    8220:	e7d4      	b.n	81cc <system_clock_source_disable+0x18>
    8222:	46c0      	nop			; (mov r8, r8)
    8224:	00013214 	.word	0x00013214
    8228:	40000c00 	.word	0x40000c00
    822c:	40001000 	.word	0x40001000
    8230:	200000e0 	.word	0x200000e0

00008234 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8234:	b5f0      	push	{r4, r5, r6, r7, lr}
    8236:	46ce      	mov	lr, r9
    8238:	4647      	mov	r7, r8
    823a:	b580      	push	{r7, lr}
    823c:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    823e:	2280      	movs	r2, #128	; 0x80
    8240:	0052      	lsls	r2, r2, #1
    8242:	4b3d      	ldr	r3, [pc, #244]	; (8338 <system_clock_init+0x104>)
    8244:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    8246:	3afd      	subs	r2, #253	; 0xfd
    8248:	4b3c      	ldr	r3, [pc, #240]	; (833c <system_clock_init+0x108>)
    824a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    824c:	4a3c      	ldr	r2, [pc, #240]	; (8340 <system_clock_init+0x10c>)
    824e:	6853      	ldr	r3, [r2, #4]
    8250:	211e      	movs	r1, #30
    8252:	438b      	bics	r3, r1
    8254:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    8256:	2380      	movs	r3, #128	; 0x80
    8258:	05db      	lsls	r3, r3, #23
    825a:	789b      	ldrb	r3, [r3, #2]
    825c:	2b02      	cmp	r3, #2
    825e:	d009      	beq.n	8274 <system_clock_init+0x40>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    8260:	2380      	movs	r3, #128	; 0x80
    8262:	05db      	lsls	r3, r3, #23
    8264:	2201      	movs	r2, #1
    8266:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    8268:	3201      	adds	r2, #1
    826a:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    826c:	001a      	movs	r2, r3
    826e:	7993      	ldrb	r3, [r2, #6]
    8270:	2b00      	cmp	r3, #0
    8272:	d0fc      	beq.n	826e <system_clock_init+0x3a>
	config->division_factor    = 1;
    8274:	a901      	add	r1, sp, #4
    8276:	2501      	movs	r5, #1
    8278:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    827a:	2400      	movs	r4, #0
    827c:	704c      	strb	r4, [r1, #1]
	config->run_in_standby     = false;
    827e:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    8280:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    8282:	2303      	movs	r3, #3
    8284:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    8286:	2000      	movs	r0, #0
    8288:	4b2e      	ldr	r3, [pc, #184]	; (8344 <system_clock_init+0x110>)
    828a:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    828c:	2006      	movs	r0, #6
    828e:	4b2e      	ldr	r3, [pc, #184]	; (8348 <system_clock_init+0x114>)
    8290:	4798      	blx	r3
	config->run_in_standby  = false;
    8292:	466b      	mov	r3, sp
    8294:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    8296:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    8298:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    829a:	4668      	mov	r0, sp
    829c:	4b2b      	ldr	r3, [pc, #172]	; (834c <system_clock_init+0x118>)
    829e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    82a0:	2006      	movs	r0, #6
    82a2:	4b2b      	ldr	r3, [pc, #172]	; (8350 <system_clock_init+0x11c>)
    82a4:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    82a6:	4924      	ldr	r1, [pc, #144]	; (8338 <system_clock_init+0x104>)
    82a8:	2210      	movs	r2, #16
    82aa:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    82ac:	421a      	tst	r2, r3
    82ae:	d0fc      	beq.n	82aa <system_clock_init+0x76>
	config->division_factor    = 1;
    82b0:	ac01      	add	r4, sp, #4
    82b2:	2601      	movs	r6, #1
    82b4:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    82b6:	2500      	movs	r5, #0
    82b8:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    82ba:	2306      	movs	r3, #6
    82bc:	4699      	mov	r9, r3
    82be:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    82c0:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    82c2:	7265      	strb	r5, [r4, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    82c4:	0021      	movs	r1, r4
    82c6:	2000      	movs	r0, #0
    82c8:	4b1e      	ldr	r3, [pc, #120]	; (8344 <system_clock_init+0x110>)
    82ca:	4698      	mov	r8, r3
    82cc:	4798      	blx	r3
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
    82ce:	4a1a      	ldr	r2, [pc, #104]	; (8338 <system_clock_init+0x104>)
    82d0:	7d13      	ldrb	r3, [r2, #20]
    82d2:	2180      	movs	r1, #128	; 0x80
    82d4:	430b      	orrs	r3, r1
    82d6:	7513      	strb	r3, [r2, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    82d8:	4b1e      	ldr	r3, [pc, #120]	; (8354 <system_clock_init+0x120>)
    82da:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    82dc:	4f1e      	ldr	r7, [pc, #120]	; (8358 <system_clock_init+0x124>)
    82de:	71be      	strb	r6, [r7, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    82e0:	717e      	strb	r6, [r7, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    82e2:	713e      	strb	r6, [r7, #4]
	config->division_factor    = 1;
    82e4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    82e6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    82e8:	464b      	mov	r3, r9
    82ea:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    82ec:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    82ee:	7265      	strb	r5, [r4, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    82f0:	0021      	movs	r1, r4
    82f2:	2000      	movs	r0, #0
    82f4:	47c0      	blx	r8
    82f6:	2000      	movs	r0, #0
    82f8:	4b18      	ldr	r3, [pc, #96]	; (835c <system_clock_init+0x128>)
    82fa:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    82fc:	2000      	movs	r0, #0
    82fe:	4b18      	ldr	r3, [pc, #96]	; (8360 <system_clock_init+0x12c>)
    8300:	4798      	blx	r3
    8302:	7939      	ldrb	r1, [r7, #4]
    8304:	b2c9      	uxtb	r1, r1
    8306:	4b17      	ldr	r3, [pc, #92]	; (8364 <system_clock_init+0x130>)
    8308:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    830a:	4b17      	ldr	r3, [pc, #92]	; (8368 <system_clock_init+0x134>)
    830c:	4298      	cmp	r0, r3
    830e:	d80e      	bhi.n	832e <system_clock_init+0xfa>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    8310:	2380      	movs	r3, #128	; 0x80
    8312:	05db      	lsls	r3, r3, #23
    8314:	789b      	ldrb	r3, [r3, #2]
    8316:	2b00      	cmp	r3, #0
    8318:	d009      	beq.n	832e <system_clock_init+0xfa>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    831a:	2380      	movs	r3, #128	; 0x80
    831c:	05db      	lsls	r3, r3, #23
    831e:	2201      	movs	r2, #1
    8320:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    8322:	2200      	movs	r2, #0
    8324:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    8326:	001a      	movs	r2, r3
    8328:	7993      	ldrb	r3, [r2, #6]
    832a:	2b00      	cmp	r3, #0
    832c:	d0fc      	beq.n	8328 <system_clock_init+0xf4>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    832e:	b005      	add	sp, #20
    8330:	bc0c      	pop	{r2, r3}
    8332:	4690      	mov	r8, r2
    8334:	4699      	mov	r9, r3
    8336:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8338:	40000c00 	.word	0x40000c00
    833c:	40001400 	.word	0x40001400
    8340:	41004000 	.word	0x41004000
    8344:	00008391 	.word	0x00008391
    8348:	000081b5 	.word	0x000081b5
    834c:	000080c5 	.word	0x000080c5
    8350:	000080f9 	.word	0x000080f9
    8354:	0000836d 	.word	0x0000836d
    8358:	40000400 	.word	0x40000400
    835c:	0000843d 	.word	0x0000843d
    8360:	0000847d 	.word	0x0000847d
    8364:	0000f53d 	.word	0x0000f53d
    8368:	00b71b00 	.word	0x00b71b00

0000836c <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    836c:	4a06      	ldr	r2, [pc, #24]	; (8388 <system_gclk_init+0x1c>)
    836e:	6953      	ldr	r3, [r2, #20]
    8370:	2140      	movs	r1, #64	; 0x40
    8372:	430b      	orrs	r3, r1
    8374:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    8376:	2201      	movs	r2, #1
    8378:	4b04      	ldr	r3, [pc, #16]	; (838c <system_gclk_init+0x20>)
    837a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    837c:	0019      	movs	r1, r3
    837e:	780b      	ldrb	r3, [r1, #0]
    8380:	4213      	tst	r3, r2
    8382:	d1fc      	bne.n	837e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    8384:	4770      	bx	lr
    8386:	46c0      	nop			; (mov r8, r8)
    8388:	40000400 	.word	0x40000400
    838c:	40001800 	.word	0x40001800

00008390 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    8390:	b570      	push	{r4, r5, r6, lr}
    8392:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    8394:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    8396:	784b      	ldrb	r3, [r1, #1]
    8398:	2b00      	cmp	r3, #0
    839a:	d002      	beq.n	83a2 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    839c:	2380      	movs	r3, #128	; 0x80
    839e:	00db      	lsls	r3, r3, #3
    83a0:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    83a2:	7a4b      	ldrb	r3, [r1, #9]
    83a4:	2b00      	cmp	r3, #0
    83a6:	d002      	beq.n	83ae <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    83a8:	2380      	movs	r3, #128	; 0x80
    83aa:	011b      	lsls	r3, r3, #4
    83ac:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    83ae:	6848      	ldr	r0, [r1, #4]
    83b0:	2801      	cmp	r0, #1
    83b2:	d90f      	bls.n	83d4 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    83b4:	1e43      	subs	r3, r0, #1
    83b6:	4218      	tst	r0, r3
    83b8:	d131      	bne.n	841e <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    83ba:	2802      	cmp	r0, #2
    83bc:	d92d      	bls.n	841a <system_gclk_gen_set_config+0x8a>
    83be:	2302      	movs	r3, #2
    83c0:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    83c2:	3201      	adds	r2, #1
						mask <<= 1) {
    83c4:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    83c6:	4298      	cmp	r0, r3
    83c8:	d8fb      	bhi.n	83c2 <system_gclk_gen_set_config+0x32>
    83ca:	2380      	movs	r3, #128	; 0x80
    83cc:	015b      	lsls	r3, r3, #5
    83ce:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    83d0:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    83d2:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    83d4:	7a0b      	ldrb	r3, [r1, #8]
    83d6:	2b00      	cmp	r3, #0
    83d8:	d002      	beq.n	83e0 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    83da:	2380      	movs	r3, #128	; 0x80
    83dc:	019b      	lsls	r3, r3, #6
    83de:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    83e0:	2604      	movs	r6, #4
    83e2:	40a6      	lsls	r6, r4
    83e4:	4911      	ldr	r1, [pc, #68]	; (842c <system_gclk_gen_set_config+0x9c>)
    83e6:	4a12      	ldr	r2, [pc, #72]	; (8430 <system_gclk_gen_set_config+0xa0>)
    83e8:	684b      	ldr	r3, [r1, #4]
    83ea:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    83ec:	421e      	tst	r6, r3
    83ee:	d1fb      	bne.n	83e8 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    83f0:	4b10      	ldr	r3, [pc, #64]	; (8434 <system_gclk_gen_set_config+0xa4>)
    83f2:	4798      	blx	r3
    83f4:	00a4      	lsls	r4, r4, #2
    83f6:	4b0d      	ldr	r3, [pc, #52]	; (842c <system_gclk_gen_set_config+0x9c>)
    83f8:	469c      	mov	ip, r3
    83fa:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    83fc:	6a22      	ldr	r2, [r4, #32]
    83fe:	2380      	movs	r3, #128	; 0x80
    8400:	005b      	lsls	r3, r3, #1
    8402:	401a      	ands	r2, r3
    8404:	432a      	orrs	r2, r5
    8406:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    8408:	4661      	mov	r1, ip
    840a:	4a09      	ldr	r2, [pc, #36]	; (8430 <system_gclk_gen_set_config+0xa0>)
    840c:	684b      	ldr	r3, [r1, #4]
    840e:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    8410:	421e      	tst	r6, r3
    8412:	d1fb      	bne.n	840c <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    8414:	4b08      	ldr	r3, [pc, #32]	; (8438 <system_gclk_gen_set_config+0xa8>)
    8416:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    8418:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    841a:	2200      	movs	r2, #0
    841c:	e7d5      	b.n	83ca <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    841e:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    8420:	2380      	movs	r3, #128	; 0x80
    8422:	009b      	lsls	r3, r3, #2
    8424:	4318      	orrs	r0, r3
    8426:	4305      	orrs	r5, r0
    8428:	e7d4      	b.n	83d4 <system_gclk_gen_set_config+0x44>
    842a:	46c0      	nop			; (mov r8, r8)
    842c:	40001800 	.word	0x40001800
    8430:	000007fc 	.word	0x000007fc
    8434:	00006265 	.word	0x00006265
    8438:	000062a5 	.word	0x000062a5

0000843c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    843c:	b510      	push	{r4, lr}
    843e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    8440:	2204      	movs	r2, #4
    8442:	4082      	lsls	r2, r0
    8444:	4809      	ldr	r0, [pc, #36]	; (846c <system_gclk_gen_enable+0x30>)
    8446:	490a      	ldr	r1, [pc, #40]	; (8470 <system_gclk_gen_enable+0x34>)
    8448:	6843      	ldr	r3, [r0, #4]
    844a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    844c:	421a      	tst	r2, r3
    844e:	d1fb      	bne.n	8448 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    8450:	4b08      	ldr	r3, [pc, #32]	; (8474 <system_gclk_gen_enable+0x38>)
    8452:	4798      	blx	r3
    8454:	00a4      	lsls	r4, r4, #2
    8456:	4b05      	ldr	r3, [pc, #20]	; (846c <system_gclk_gen_enable+0x30>)
    8458:	469c      	mov	ip, r3
    845a:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    845c:	6a22      	ldr	r2, [r4, #32]
    845e:	2380      	movs	r3, #128	; 0x80
    8460:	005b      	lsls	r3, r3, #1
    8462:	4313      	orrs	r3, r2
    8464:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    8466:	4b04      	ldr	r3, [pc, #16]	; (8478 <system_gclk_gen_enable+0x3c>)
    8468:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    846a:	bd10      	pop	{r4, pc}
    846c:	40001800 	.word	0x40001800
    8470:	000007fc 	.word	0x000007fc
    8474:	00006265 	.word	0x00006265
    8478:	000062a5 	.word	0x000062a5

0000847c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    847e:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    8480:	2204      	movs	r2, #4
    8482:	4082      	lsls	r2, r0
    8484:	4812      	ldr	r0, [pc, #72]	; (84d0 <system_gclk_gen_get_hz+0x54>)
    8486:	4913      	ldr	r1, [pc, #76]	; (84d4 <system_gclk_gen_get_hz+0x58>)
    8488:	6843      	ldr	r3, [r0, #4]
    848a:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    848c:	421a      	tst	r2, r3
    848e:	d1fb      	bne.n	8488 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    8490:	4b11      	ldr	r3, [pc, #68]	; (84d8 <system_gclk_gen_get_hz+0x5c>)
    8492:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    8494:	4f0e      	ldr	r7, [pc, #56]	; (84d0 <system_gclk_gen_get_hz+0x54>)
    8496:	3408      	adds	r4, #8
    8498:	00a4      	lsls	r4, r4, #2
    849a:	59e0      	ldr	r0, [r4, r7]
    849c:	0700      	lsls	r0, r0, #28
    849e:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    84a0:	4b0e      	ldr	r3, [pc, #56]	; (84dc <system_gclk_gen_get_hz+0x60>)
    84a2:	4798      	blx	r3
    84a4:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    84a6:	59e5      	ldr	r5, [r4, r7]
    84a8:	04ed      	lsls	r5, r5, #19
    84aa:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    84ac:	59e4      	ldr	r4, [r4, r7]
    84ae:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    84b0:	4b0b      	ldr	r3, [pc, #44]	; (84e0 <system_gclk_gen_get_hz+0x64>)
    84b2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    84b4:	2d00      	cmp	r5, #0
    84b6:	d107      	bne.n	84c8 <system_gclk_gen_get_hz+0x4c>
    84b8:	2c01      	cmp	r4, #1
    84ba:	d907      	bls.n	84cc <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    84bc:	0021      	movs	r1, r4
    84be:	0030      	movs	r0, r6
    84c0:	4b08      	ldr	r3, [pc, #32]	; (84e4 <system_gclk_gen_get_hz+0x68>)
    84c2:	4798      	blx	r3
    84c4:	0006      	movs	r6, r0
    84c6:	e001      	b.n	84cc <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    84c8:	3401      	adds	r4, #1
    84ca:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    84cc:	0030      	movs	r0, r6
    84ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    84d0:	40001800 	.word	0x40001800
    84d4:	000007fc 	.word	0x000007fc
    84d8:	00006265 	.word	0x00006265
    84dc:	0000802d 	.word	0x0000802d
    84e0:	000062a5 	.word	0x000062a5
    84e4:	0000f53d 	.word	0x0000f53d

000084e8 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    84e8:	b510      	push	{r4, lr}
    84ea:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    84ec:	4b09      	ldr	r3, [pc, #36]	; (8514 <system_gclk_chan_enable+0x2c>)
    84ee:	4798      	blx	r3
    84f0:	00a0      	lsls	r0, r4, #2
    84f2:	4b09      	ldr	r3, [pc, #36]	; (8518 <system_gclk_chan_enable+0x30>)
    84f4:	469c      	mov	ip, r3
    84f6:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    84f8:	2280      	movs	r2, #128	; 0x80
    84fa:	5883      	ldr	r3, [r0, r2]
    84fc:	2140      	movs	r1, #64	; 0x40
    84fe:	430b      	orrs	r3, r1
    8500:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    8502:	3140      	adds	r1, #64	; 0x40
    8504:	3a40      	subs	r2, #64	; 0x40
    8506:	5843      	ldr	r3, [r0, r1]
    8508:	421a      	tst	r2, r3
    850a:	d0fc      	beq.n	8506 <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    850c:	4b03      	ldr	r3, [pc, #12]	; (851c <system_gclk_chan_enable+0x34>)
    850e:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    8510:	bd10      	pop	{r4, pc}
    8512:	46c0      	nop			; (mov r8, r8)
    8514:	00006265 	.word	0x00006265
    8518:	40001800 	.word	0x40001800
    851c:	000062a5 	.word	0x000062a5

00008520 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    8520:	b510      	push	{r4, lr}
    8522:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8524:	4b09      	ldr	r3, [pc, #36]	; (854c <system_gclk_chan_disable+0x2c>)
    8526:	4798      	blx	r3
    8528:	00a0      	lsls	r0, r4, #2
    852a:	4b09      	ldr	r3, [pc, #36]	; (8550 <system_gclk_chan_disable+0x30>)
    852c:	469c      	mov	ip, r3
    852e:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    8530:	2280      	movs	r2, #128	; 0x80
    8532:	5883      	ldr	r3, [r0, r2]
    8534:	2140      	movs	r1, #64	; 0x40
    8536:	438b      	bics	r3, r1
    8538:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    853a:	3140      	adds	r1, #64	; 0x40
    853c:	3a40      	subs	r2, #64	; 0x40
    853e:	5843      	ldr	r3, [r0, r1]
    8540:	421a      	tst	r2, r3
    8542:	d1fc      	bne.n	853e <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    8544:	4b03      	ldr	r3, [pc, #12]	; (8554 <system_gclk_chan_disable+0x34>)
    8546:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    8548:	bd10      	pop	{r4, pc}
    854a:	46c0      	nop			; (mov r8, r8)
    854c:	00006265 	.word	0x00006265
    8550:	40001800 	.word	0x40001800
    8554:	000062a5 	.word	0x000062a5

00008558 <system_gclk_chan_set_config>:
{
    8558:	b570      	push	{r4, r5, r6, lr}
    855a:	0004      	movs	r4, r0
    855c:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    855e:	4b05      	ldr	r3, [pc, #20]	; (8574 <system_gclk_chan_set_config+0x1c>)
    8560:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    8562:	782a      	ldrb	r2, [r5, #0]
    8564:	230f      	movs	r3, #15
    8566:	4013      	ands	r3, r2
    8568:	3420      	adds	r4, #32
    856a:	00a4      	lsls	r4, r4, #2
    856c:	4a02      	ldr	r2, [pc, #8]	; (8578 <system_gclk_chan_set_config+0x20>)
    856e:	50a3      	str	r3, [r4, r2]
}
    8570:	bd70      	pop	{r4, r5, r6, pc}
    8572:	46c0      	nop			; (mov r8, r8)
    8574:	00008521 	.word	0x00008521
    8578:	40001800 	.word	0x40001800

0000857c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    857c:	b510      	push	{r4, lr}
    857e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    8580:	4b06      	ldr	r3, [pc, #24]	; (859c <system_gclk_chan_get_hz+0x20>)
    8582:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    8584:	3420      	adds	r4, #32
    8586:	00a4      	lsls	r4, r4, #2
    8588:	4b05      	ldr	r3, [pc, #20]	; (85a0 <system_gclk_chan_get_hz+0x24>)
    858a:	58e4      	ldr	r4, [r4, r3]
    858c:	0724      	lsls	r4, r4, #28
    858e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    8590:	4b04      	ldr	r3, [pc, #16]	; (85a4 <system_gclk_chan_get_hz+0x28>)
    8592:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    8594:	0020      	movs	r0, r4
    8596:	4b04      	ldr	r3, [pc, #16]	; (85a8 <system_gclk_chan_get_hz+0x2c>)
    8598:	4798      	blx	r3
}
    859a:	bd10      	pop	{r4, pc}
    859c:	00006265 	.word	0x00006265
    85a0:	40001800 	.word	0x40001800
    85a4:	000062a5 	.word	0x000062a5
    85a8:	0000847d 	.word	0x0000847d

000085ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    85ac:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    85ae:	78d3      	ldrb	r3, [r2, #3]
    85b0:	2b00      	cmp	r3, #0
    85b2:	d135      	bne.n	8620 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    85b4:	7813      	ldrb	r3, [r2, #0]
    85b6:	2b80      	cmp	r3, #128	; 0x80
    85b8:	d029      	beq.n	860e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    85ba:	061b      	lsls	r3, r3, #24
    85bc:	2480      	movs	r4, #128	; 0x80
    85be:	0264      	lsls	r4, r4, #9
    85c0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    85c2:	7854      	ldrb	r4, [r2, #1]
    85c4:	2502      	movs	r5, #2
    85c6:	43ac      	bics	r4, r5
    85c8:	d106      	bne.n	85d8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    85ca:	7894      	ldrb	r4, [r2, #2]
    85cc:	2c00      	cmp	r4, #0
    85ce:	d120      	bne.n	8612 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    85d0:	2480      	movs	r4, #128	; 0x80
    85d2:	02a4      	lsls	r4, r4, #10
    85d4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    85d6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    85d8:	7854      	ldrb	r4, [r2, #1]
    85da:	3c01      	subs	r4, #1
    85dc:	2c01      	cmp	r4, #1
    85de:	d91c      	bls.n	861a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    85e0:	040d      	lsls	r5, r1, #16
    85e2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    85e4:	24a0      	movs	r4, #160	; 0xa0
    85e6:	05e4      	lsls	r4, r4, #23
    85e8:	432c      	orrs	r4, r5
    85ea:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    85ec:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    85ee:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    85f0:	24d0      	movs	r4, #208	; 0xd0
    85f2:	0624      	lsls	r4, r4, #24
    85f4:	432c      	orrs	r4, r5
    85f6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    85f8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    85fa:	78d4      	ldrb	r4, [r2, #3]
    85fc:	2c00      	cmp	r4, #0
    85fe:	d122      	bne.n	8646 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    8600:	035b      	lsls	r3, r3, #13
    8602:	d51c      	bpl.n	863e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    8604:	7893      	ldrb	r3, [r2, #2]
    8606:	2b01      	cmp	r3, #1
    8608:	d01e      	beq.n	8648 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    860a:	6141      	str	r1, [r0, #20]
    860c:	e017      	b.n	863e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    860e:	2300      	movs	r3, #0
    8610:	e7d7      	b.n	85c2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    8612:	24c0      	movs	r4, #192	; 0xc0
    8614:	02e4      	lsls	r4, r4, #11
    8616:	4323      	orrs	r3, r4
    8618:	e7dd      	b.n	85d6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    861a:	4c0d      	ldr	r4, [pc, #52]	; (8650 <_system_pinmux_config+0xa4>)
    861c:	4023      	ands	r3, r4
    861e:	e7df      	b.n	85e0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    8620:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    8622:	040c      	lsls	r4, r1, #16
    8624:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    8626:	23a0      	movs	r3, #160	; 0xa0
    8628:	05db      	lsls	r3, r3, #23
    862a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    862c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    862e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    8630:	23d0      	movs	r3, #208	; 0xd0
    8632:	061b      	lsls	r3, r3, #24
    8634:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    8636:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    8638:	78d3      	ldrb	r3, [r2, #3]
    863a:	2b00      	cmp	r3, #0
    863c:	d103      	bne.n	8646 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    863e:	7853      	ldrb	r3, [r2, #1]
    8640:	3b01      	subs	r3, #1
    8642:	2b01      	cmp	r3, #1
    8644:	d902      	bls.n	864c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    8646:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    8648:	6181      	str	r1, [r0, #24]
    864a:	e7f8      	b.n	863e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    864c:	6081      	str	r1, [r0, #8]
}
    864e:	e7fa      	b.n	8646 <_system_pinmux_config+0x9a>
    8650:	fffbffff 	.word	0xfffbffff

00008654 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    8654:	b510      	push	{r4, lr}
    8656:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    8658:	09c1      	lsrs	r1, r0, #7
		return NULL;
    865a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    865c:	2900      	cmp	r1, #0
    865e:	d104      	bne.n	866a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    8660:	0943      	lsrs	r3, r0, #5
    8662:	01db      	lsls	r3, r3, #7
    8664:	4905      	ldr	r1, [pc, #20]	; (867c <system_pinmux_pin_set_config+0x28>)
    8666:	468c      	mov	ip, r1
    8668:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    866a:	241f      	movs	r4, #31
    866c:	4020      	ands	r0, r4
    866e:	2101      	movs	r1, #1
    8670:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    8672:	0018      	movs	r0, r3
    8674:	4b02      	ldr	r3, [pc, #8]	; (8680 <system_pinmux_pin_set_config+0x2c>)
    8676:	4798      	blx	r3
}
    8678:	bd10      	pop	{r4, pc}
    867a:	46c0      	nop			; (mov r8, r8)
    867c:	40002800 	.word	0x40002800
    8680:	000085ad 	.word	0x000085ad

00008684 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    8684:	4770      	bx	lr
    8686:	Address 0x00008686 is out of bounds.


00008688 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    8688:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    868a:	4b05      	ldr	r3, [pc, #20]	; (86a0 <system_init+0x18>)
    868c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    868e:	4b05      	ldr	r3, [pc, #20]	; (86a4 <system_init+0x1c>)
    8690:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    8692:	4b05      	ldr	r3, [pc, #20]	; (86a8 <system_init+0x20>)
    8694:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    8696:	4b05      	ldr	r3, [pc, #20]	; (86ac <system_init+0x24>)
    8698:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    869a:	4b05      	ldr	r3, [pc, #20]	; (86b0 <system_init+0x28>)
    869c:	4798      	blx	r3
}
    869e:	bd10      	pop	{r4, pc}
    86a0:	00008235 	.word	0x00008235
    86a4:	000062d5 	.word	0x000062d5
    86a8:	00008685 	.word	0x00008685
    86ac:	00006691 	.word	0x00006691
    86b0:	00008685 	.word	0x00008685

000086b4 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    86b4:	1c93      	adds	r3, r2, #2
    86b6:	009b      	lsls	r3, r3, #2
    86b8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    86ba:	2a02      	cmp	r2, #2
    86bc:	d009      	beq.n	86d2 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    86be:	2a03      	cmp	r2, #3
    86c0:	d00c      	beq.n	86dc <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    86c2:	2301      	movs	r3, #1
    86c4:	4093      	lsls	r3, r2
    86c6:	001a      	movs	r2, r3
    86c8:	7e03      	ldrb	r3, [r0, #24]
    86ca:	4313      	orrs	r3, r2
    86cc:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    86ce:	2000      	movs	r0, #0
    86d0:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    86d2:	7e03      	ldrb	r3, [r0, #24]
    86d4:	2210      	movs	r2, #16
    86d6:	4313      	orrs	r3, r2
    86d8:	7603      	strb	r3, [r0, #24]
    86da:	e7f8      	b.n	86ce <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    86dc:	7e03      	ldrb	r3, [r0, #24]
    86de:	2220      	movs	r2, #32
    86e0:	4313      	orrs	r3, r2
    86e2:	7603      	strb	r3, [r0, #24]
    86e4:	e7f3      	b.n	86ce <tc_register_callback+0x1a>
    86e6:	Address 0x000086e6 is out of bounds.


000086e8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    86e8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    86ea:	0080      	lsls	r0, r0, #2
    86ec:	4b16      	ldr	r3, [pc, #88]	; (8748 <_tc_interrupt_handler+0x60>)
    86ee:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    86f0:	6823      	ldr	r3, [r4, #0]
    86f2:	7a9d      	ldrb	r5, [r3, #10]
    86f4:	7e22      	ldrb	r2, [r4, #24]
    86f6:	7e63      	ldrb	r3, [r4, #25]
    86f8:	4013      	ands	r3, r2
    86fa:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    86fc:	07eb      	lsls	r3, r5, #31
    86fe:	d406      	bmi.n	870e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    8700:	07ab      	lsls	r3, r5, #30
    8702:	d40b      	bmi.n	871c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    8704:	06eb      	lsls	r3, r5, #27
    8706:	d410      	bmi.n	872a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    8708:	06ab      	lsls	r3, r5, #26
    870a:	d415      	bmi.n	8738 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    870c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    870e:	0020      	movs	r0, r4
    8710:	68a3      	ldr	r3, [r4, #8]
    8712:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    8714:	2301      	movs	r3, #1
    8716:	6822      	ldr	r2, [r4, #0]
    8718:	7293      	strb	r3, [r2, #10]
    871a:	e7f1      	b.n	8700 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    871c:	0020      	movs	r0, r4
    871e:	68e3      	ldr	r3, [r4, #12]
    8720:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    8722:	2302      	movs	r3, #2
    8724:	6822      	ldr	r2, [r4, #0]
    8726:	7293      	strb	r3, [r2, #10]
    8728:	e7ec      	b.n	8704 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    872a:	0020      	movs	r0, r4
    872c:	6923      	ldr	r3, [r4, #16]
    872e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    8730:	2310      	movs	r3, #16
    8732:	6822      	ldr	r2, [r4, #0]
    8734:	7293      	strb	r3, [r2, #10]
    8736:	e7e7      	b.n	8708 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    8738:	0020      	movs	r0, r4
    873a:	6963      	ldr	r3, [r4, #20]
    873c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    873e:	6823      	ldr	r3, [r4, #0]
    8740:	2220      	movs	r2, #32
    8742:	729a      	strb	r2, [r3, #10]
}
    8744:	e7e2      	b.n	870c <_tc_interrupt_handler+0x24>
    8746:	46c0      	nop			; (mov r8, r8)
    8748:	20001d18 	.word	0x20001d18

0000874c <TC0_Handler>:
	_TC_INTERRUPT_HANDLER(0,0)
    874c:	b510      	push	{r4, lr}
    874e:	2000      	movs	r0, #0
    8750:	4b01      	ldr	r3, [pc, #4]	; (8758 <TC0_Handler+0xc>)
    8752:	4798      	blx	r3
    8754:	bd10      	pop	{r4, pc}
    8756:	46c0      	nop			; (mov r8, r8)
    8758:	000086e9 	.word	0x000086e9

0000875c <TC1_Handler>:
	_TC_INTERRUPT_HANDLER(1,1)
    875c:	b510      	push	{r4, lr}
    875e:	2001      	movs	r0, #1
    8760:	4b01      	ldr	r3, [pc, #4]	; (8768 <TC1_Handler+0xc>)
    8762:	4798      	blx	r3
    8764:	bd10      	pop	{r4, pc}
    8766:	46c0      	nop			; (mov r8, r8)
    8768:	000086e9 	.word	0x000086e9

0000876c <TC4_Handler>:
	_TC_INTERRUPT_HANDLER(4,2)
    876c:	b510      	push	{r4, lr}
    876e:	2002      	movs	r0, #2
    8770:	4b01      	ldr	r3, [pc, #4]	; (8778 <TC4_Handler+0xc>)
    8772:	4798      	blx	r3
    8774:	bd10      	pop	{r4, pc}
    8776:	46c0      	nop			; (mov r8, r8)
    8778:	000086e9 	.word	0x000086e9

0000877c <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    877c:	b530      	push	{r4, r5, lr}
    877e:	b085      	sub	sp, #20
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    8780:	aa01      	add	r2, sp, #4
    8782:	4b0b      	ldr	r3, [pc, #44]	; (87b0 <_tc_get_inst_index+0x34>)
    8784:	cb32      	ldmia	r3!, {r1, r4, r5}
    8786:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    8788:	9b01      	ldr	r3, [sp, #4]
    878a:	4298      	cmp	r0, r3
    878c:	d00d      	beq.n	87aa <_tc_get_inst_index+0x2e>
    878e:	9b02      	ldr	r3, [sp, #8]
    8790:	4298      	cmp	r0, r3
    8792:	d008      	beq.n	87a6 <_tc_get_inst_index+0x2a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    8794:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    8796:	9a03      	ldr	r2, [sp, #12]
    8798:	4282      	cmp	r2, r0
    879a:	d002      	beq.n	87a2 <_tc_get_inst_index+0x26>
}
    879c:	0018      	movs	r0, r3
    879e:	b005      	add	sp, #20
    87a0:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    87a2:	3302      	adds	r3, #2
    87a4:	e002      	b.n	87ac <_tc_get_inst_index+0x30>
    87a6:	2301      	movs	r3, #1
    87a8:	e000      	b.n	87ac <_tc_get_inst_index+0x30>
    87aa:	2300      	movs	r3, #0
			return i;
    87ac:	b2db      	uxtb	r3, r3
    87ae:	e7f5      	b.n	879c <_tc_get_inst_index+0x20>
    87b0:	00013260 	.word	0x00013260

000087b4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    87b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    87b6:	46c6      	mov	lr, r8
    87b8:	b500      	push	{lr}
    87ba:	b08a      	sub	sp, #40	; 0x28
    87bc:	0004      	movs	r4, r0
    87be:	000d      	movs	r5, r1
    87c0:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    87c2:	0008      	movs	r0, r1
    87c4:	4baa      	ldr	r3, [pc, #680]	; (8a70 <tc_init+0x2bc>)
    87c6:	4798      	blx	r3
    87c8:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC1,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3};
#else
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC4_GCLK_ID};
    87ca:	ab09      	add	r3, sp, #36	; 0x24
    87cc:	221b      	movs	r2, #27
    87ce:	701a      	strb	r2, [r3, #0]
    87d0:	705a      	strb	r2, [r3, #1]
    87d2:	3202      	adds	r2, #2
    87d4:	709a      	strb	r2, [r3, #2]
	/* Array of PM APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    87d6:	a903      	add	r1, sp, #12
    87d8:	4ba6      	ldr	r3, [pc, #664]	; (8a74 <tc_init+0x2c0>)
    87da:	330c      	adds	r3, #12
    87dc:	000a      	movs	r2, r1
    87de:	cb83      	ldmia	r3!, {r0, r1, r7}
    87e0:	c283      	stmia	r2!, {r0, r1, r7}
    87e2:	cb83      	ldmia	r3!, {r0, r1, r7}
    87e4:	c283      	stmia	r2!, {r0, r1, r7}
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    87e6:	2300      	movs	r3, #0
    87e8:	60a3      	str	r3, [r4, #8]
    87ea:	60e3      	str	r3, [r4, #12]
    87ec:	6123      	str	r3, [r4, #16]
    87ee:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    87f0:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    87f2:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    87f4:	4643      	mov	r3, r8
    87f6:	009a      	lsls	r2, r3, #2
    87f8:	4b9f      	ldr	r3, [pc, #636]	; (8a78 <tc_init+0x2c4>)
    87fa:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    87fc:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    87fe:	2334      	movs	r3, #52	; 0x34
    8800:	5cf3      	ldrb	r3, [r6, r3]
    8802:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    8804:	78f3      	ldrb	r3, [r6, #3]
    8806:	2b08      	cmp	r3, #8
    8808:	d008      	beq.n	881c <tc_init+0x68>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    880a:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    880c:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    880e:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    8810:	07db      	lsls	r3, r3, #31
    8812:	d508      	bpl.n	8826 <tc_init+0x72>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    8814:	b00a      	add	sp, #40	; 0x28
    8816:	bc04      	pop	{r2}
    8818:	4690      	mov	r8, r2
    881a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    881c:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    881e:	4642      	mov	r2, r8
    8820:	07d2      	lsls	r2, r2, #31
    8822:	d4f7      	bmi.n	8814 <tc_init+0x60>
    8824:	e7f1      	b.n	880a <tc_init+0x56>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    8826:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    8828:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    882a:	079b      	lsls	r3, r3, #30
    882c:	d4f2      	bmi.n	8814 <tc_init+0x60>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    882e:	682b      	ldr	r3, [r5, #0]
    8830:	079b      	lsls	r3, r3, #30
    8832:	d4ef      	bmi.n	8814 <tc_init+0x60>
	if (config->pwm_channel[0].enabled) {
    8834:	7c33      	ldrb	r3, [r6, #16]
    8836:	2b00      	cmp	r3, #0
    8838:	d112      	bne.n	8860 <tc_init+0xac>
	if (config->pwm_channel[1].enabled) {
    883a:	7f33      	ldrb	r3, [r6, #28]
    883c:	2b00      	cmp	r3, #0
    883e:	d11b      	bne.n	8878 <tc_init+0xc4>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    8840:	4643      	mov	r3, r8
    8842:	005a      	lsls	r2, r3, #1
    8844:	a903      	add	r1, sp, #12
    8846:	1c53      	adds	r3, r2, #1
    8848:	009b      	lsls	r3, r3, #2
    884a:	5858      	ldr	r0, [r3, r1]
    884c:	4643      	mov	r3, r8
    884e:	00db      	lsls	r3, r3, #3
    8850:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    8852:	b2d9      	uxtb	r1, r3
    8854:	2904      	cmp	r1, #4
    8856:	d823      	bhi.n	88a0 <tc_init+0xec>
    8858:	008b      	lsls	r3, r1, #2
    885a:	4988      	ldr	r1, [pc, #544]	; (8a7c <tc_init+0x2c8>)
    885c:	58cb      	ldr	r3, [r1, r3]
    885e:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8860:	a902      	add	r1, sp, #8
    8862:	2301      	movs	r3, #1
    8864:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    8866:	2200      	movs	r2, #0
    8868:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    886a:	7e32      	ldrb	r2, [r6, #24]
    886c:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    886e:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    8870:	7d30      	ldrb	r0, [r6, #20]
    8872:	4b83      	ldr	r3, [pc, #524]	; (8a80 <tc_init+0x2cc>)
    8874:	4798      	blx	r3
    8876:	e7e0      	b.n	883a <tc_init+0x86>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8878:	a902      	add	r1, sp, #8
    887a:	2301      	movs	r3, #1
    887c:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    887e:	2200      	movs	r2, #0
    8880:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    8882:	3224      	adds	r2, #36	; 0x24
    8884:	18b2      	adds	r2, r6, r2
    8886:	7812      	ldrb	r2, [r2, #0]
    8888:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    888a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    888c:	331f      	adds	r3, #31
    888e:	18f3      	adds	r3, r6, r3
    8890:	7818      	ldrb	r0, [r3, #0]
    8892:	4b7b      	ldr	r3, [pc, #492]	; (8a80 <tc_init+0x2cc>)
    8894:	4798      	blx	r3
    8896:	e7d3      	b.n	8840 <tc_init+0x8c>
			MCLK->APBAMASK.reg |= mask;
    8898:	497a      	ldr	r1, [pc, #488]	; (8a84 <tc_init+0x2d0>)
    889a:	694b      	ldr	r3, [r1, #20]
    889c:	4318      	orrs	r0, r3
    889e:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    88a0:	78f3      	ldrb	r3, [r6, #3]
    88a2:	2b08      	cmp	r3, #8
    88a4:	d100      	bne.n	88a8 <tc_init+0xf4>
    88a6:	e085      	b.n	89b4 <tc_init+0x200>
	gclk_chan_config.source_generator = config->clock_source;
    88a8:	a901      	add	r1, sp, #4
    88aa:	7833      	ldrb	r3, [r6, #0]
    88ac:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    88ae:	ab09      	add	r3, sp, #36	; 0x24
    88b0:	4642      	mov	r2, r8
    88b2:	5c9f      	ldrb	r7, [r3, r2]
    88b4:	0038      	movs	r0, r7
    88b6:	4b74      	ldr	r3, [pc, #464]	; (8a88 <tc_init+0x2d4>)
    88b8:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    88ba:	0038      	movs	r0, r7
    88bc:	4b73      	ldr	r3, [pc, #460]	; (8a8c <tc_init+0x2d8>)
    88be:	4798      	blx	r3
			(uint32_t)config->counter_size |
    88c0:	78f3      	ldrb	r3, [r6, #3]
    88c2:	79f2      	ldrb	r2, [r6, #7]
    88c4:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    88c6:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    88c8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    88ca:	7a72      	ldrb	r2, [r6, #9]
    88cc:	2a00      	cmp	r2, #0
    88ce:	d002      	beq.n	88d6 <tc_init+0x122>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    88d0:	2280      	movs	r2, #128	; 0x80
    88d2:	0252      	lsls	r2, r2, #9
    88d4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    88d6:	7ab2      	ldrb	r2, [r6, #10]
    88d8:	2a00      	cmp	r2, #0
    88da:	d002      	beq.n	88e2 <tc_init+0x12e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    88dc:	2280      	movs	r2, #128	; 0x80
    88de:	0292      	lsls	r2, r2, #10
    88e0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    88e2:	7af2      	ldrb	r2, [r6, #11]
    88e4:	2a00      	cmp	r2, #0
    88e6:	d002      	beq.n	88ee <tc_init+0x13a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    88e8:	2280      	movs	r2, #128	; 0x80
    88ea:	0352      	lsls	r2, r2, #13
    88ec:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    88ee:	7b32      	ldrb	r2, [r6, #12]
    88f0:	2a00      	cmp	r2, #0
    88f2:	d002      	beq.n	88fa <tc_init+0x146>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    88f4:	2280      	movs	r2, #128	; 0x80
    88f6:	0392      	lsls	r2, r2, #14
    88f8:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    88fa:	7871      	ldrb	r1, [r6, #1]
    88fc:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    88fe:	78b2      	ldrb	r2, [r6, #2]
    8900:	01d2      	lsls	r2, r2, #7
    8902:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    8904:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8906:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    8908:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    890a:	2b00      	cmp	r3, #0
    890c:	d1fc      	bne.n	8908 <tc_init+0x154>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    890e:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8910:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8912:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    8914:	2b00      	cmp	r3, #0
    8916:	d1fc      	bne.n	8912 <tc_init+0x15e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    8918:	79b3      	ldrb	r3, [r6, #6]
    891a:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    891c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    891e:	1e4b      	subs	r3, r1, #1
    8920:	4199      	sbcs	r1, r3
    8922:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    8924:	7bb3      	ldrb	r3, [r6, #14]
    8926:	2b00      	cmp	r3, #0
    8928:	d001      	beq.n	892e <tc_init+0x17a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    892a:	2301      	movs	r3, #1
    892c:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    892e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8930:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    8932:	2b00      	cmp	r3, #0
    8934:	d1fc      	bne.n	8930 <tc_init+0x17c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    8936:	33ff      	adds	r3, #255	; 0xff
    8938:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    893a:	2900      	cmp	r1, #0
    893c:	d004      	beq.n	8948 <tc_init+0x194>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    893e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8940:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    8942:	2b00      	cmp	r3, #0
    8944:	d1fc      	bne.n	8940 <tc_init+0x18c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    8946:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    8948:	7a33      	ldrb	r3, [r6, #8]
    894a:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    894c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    894e:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    8950:	2b00      	cmp	r3, #0
    8952:	d1fc      	bne.n	894e <tc_init+0x19a>
	switch (module_inst->counter_size) {
    8954:	7923      	ldrb	r3, [r4, #4]
    8956:	2b04      	cmp	r3, #4
    8958:	d059      	beq.n	8a0e <tc_init+0x25a>
    895a:	2b08      	cmp	r3, #8
    895c:	d074      	beq.n	8a48 <tc_init+0x294>
	return STATUS_ERR_INVALID_ARG;
    895e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    8960:	2b00      	cmp	r3, #0
    8962:	d000      	beq.n	8966 <tc_init+0x1b2>
    8964:	e756      	b.n	8814 <tc_init+0x60>
    8966:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8968:	2b00      	cmp	r3, #0
    896a:	d1fc      	bne.n	8966 <tc_init+0x1b2>
				= config->counter_16_bit.value;
    896c:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    896e:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8970:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8972:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8974:	2b00      	cmp	r3, #0
    8976:	d1fc      	bne.n	8972 <tc_init+0x1be>
					config->counter_16_bit.compare_capture_channel[0];
    8978:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    897a:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    897c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    897e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8980:	2b00      	cmp	r3, #0
    8982:	d1fc      	bne.n	897e <tc_init+0x1ca>
					config->counter_16_bit.compare_capture_channel[1];
    8984:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    8986:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    8988:	2000      	movs	r0, #0
    898a:	e743      	b.n	8814 <tc_init+0x60>
			MCLK->APBBMASK.reg |= mask;
    898c:	493d      	ldr	r1, [pc, #244]	; (8a84 <tc_init+0x2d0>)
    898e:	698b      	ldr	r3, [r1, #24]
    8990:	4318      	orrs	r0, r3
    8992:	6188      	str	r0, [r1, #24]
    8994:	e784      	b.n	88a0 <tc_init+0xec>
			MCLK->APBCMASK.reg |= mask;
    8996:	493b      	ldr	r1, [pc, #236]	; (8a84 <tc_init+0x2d0>)
    8998:	69cb      	ldr	r3, [r1, #28]
    899a:	4318      	orrs	r0, r3
    899c:	61c8      	str	r0, [r1, #28]
    899e:	e77f      	b.n	88a0 <tc_init+0xec>
			MCLK->APBDMASK.reg |= mask;
    89a0:	4938      	ldr	r1, [pc, #224]	; (8a84 <tc_init+0x2d0>)
    89a2:	6a0b      	ldr	r3, [r1, #32]
    89a4:	4318      	orrs	r0, r3
    89a6:	6208      	str	r0, [r1, #32]
    89a8:	e77a      	b.n	88a0 <tc_init+0xec>
			MCLK->APBEMASK.reg |= mask;
    89aa:	4b36      	ldr	r3, [pc, #216]	; (8a84 <tc_init+0x2d0>)
    89ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
    89ae:	4308      	orrs	r0, r1
    89b0:	6258      	str	r0, [r3, #36]	; 0x24
    89b2:	e775      	b.n	88a0 <tc_init+0xec>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    89b4:	4643      	mov	r3, r8
    89b6:	3301      	adds	r3, #1
    89b8:	2b02      	cmp	r3, #2
    89ba:	dd00      	ble.n	89be <tc_init+0x20a>
    89bc:	e774      	b.n	88a8 <tc_init+0xf4>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    89be:	ab03      	add	r3, sp, #12
    89c0:	1cd1      	adds	r1, r2, #3
    89c2:	0089      	lsls	r1, r1, #2
    89c4:	58c9      	ldr	r1, [r1, r3]
    89c6:	3202      	adds	r2, #2
    89c8:	0092      	lsls	r2, r2, #2
    89ca:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    89cc:	b2da      	uxtb	r2, r3
    89ce:	2a04      	cmp	r2, #4
    89d0:	d900      	bls.n	89d4 <tc_init+0x220>
    89d2:	e769      	b.n	88a8 <tc_init+0xf4>
    89d4:	0093      	lsls	r3, r2, #2
    89d6:	4a2e      	ldr	r2, [pc, #184]	; (8a90 <tc_init+0x2dc>)
    89d8:	58d3      	ldr	r3, [r2, r3]
    89da:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    89dc:	4a29      	ldr	r2, [pc, #164]	; (8a84 <tc_init+0x2d0>)
    89de:	6953      	ldr	r3, [r2, #20]
    89e0:	4319      	orrs	r1, r3
    89e2:	6151      	str	r1, [r2, #20]
    89e4:	e760      	b.n	88a8 <tc_init+0xf4>
			MCLK->APBBMASK.reg |= mask;
    89e6:	4a27      	ldr	r2, [pc, #156]	; (8a84 <tc_init+0x2d0>)
    89e8:	6993      	ldr	r3, [r2, #24]
    89ea:	4319      	orrs	r1, r3
    89ec:	6191      	str	r1, [r2, #24]
    89ee:	e75b      	b.n	88a8 <tc_init+0xf4>
			MCLK->APBCMASK.reg |= mask;
    89f0:	4a24      	ldr	r2, [pc, #144]	; (8a84 <tc_init+0x2d0>)
    89f2:	69d3      	ldr	r3, [r2, #28]
    89f4:	4319      	orrs	r1, r3
    89f6:	61d1      	str	r1, [r2, #28]
    89f8:	e756      	b.n	88a8 <tc_init+0xf4>
			MCLK->APBDMASK.reg |= mask;
    89fa:	4a22      	ldr	r2, [pc, #136]	; (8a84 <tc_init+0x2d0>)
    89fc:	6a13      	ldr	r3, [r2, #32]
    89fe:	4319      	orrs	r1, r3
    8a00:	6211      	str	r1, [r2, #32]
    8a02:	e751      	b.n	88a8 <tc_init+0xf4>
			MCLK->APBEMASK.reg |= mask;
    8a04:	4b1f      	ldr	r3, [pc, #124]	; (8a84 <tc_init+0x2d0>)
    8a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8a08:	4311      	orrs	r1, r2
    8a0a:	6259      	str	r1, [r3, #36]	; 0x24
    8a0c:	e74c      	b.n	88a8 <tc_init+0xf4>
    8a0e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8a10:	2b00      	cmp	r3, #0
    8a12:	d1fc      	bne.n	8a0e <tc_init+0x25a>
					config->counter_8_bit.value;
    8a14:	3328      	adds	r3, #40	; 0x28
    8a16:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    8a18:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a1a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8a1c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8a1e:	2b00      	cmp	r3, #0
    8a20:	d1fc      	bne.n	8a1c <tc_init+0x268>
					config->counter_8_bit.period;
    8a22:	3329      	adds	r3, #41	; 0x29
    8a24:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    8a26:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a28:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8a2a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8a2c:	2b00      	cmp	r3, #0
    8a2e:	d1fc      	bne.n	8a2a <tc_init+0x276>
					config->counter_8_bit.compare_capture_channel[0];
    8a30:	332a      	adds	r3, #42	; 0x2a
    8a32:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    8a34:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a36:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8a38:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8a3a:	2b00      	cmp	r3, #0
    8a3c:	d1fc      	bne.n	8a38 <tc_init+0x284>
					config->counter_8_bit.compare_capture_channel[1];
    8a3e:	332b      	adds	r3, #43	; 0x2b
    8a40:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    8a42:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    8a44:	2000      	movs	r0, #0
    8a46:	e6e5      	b.n	8814 <tc_init+0x60>
    8a48:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8a4a:	2b00      	cmp	r3, #0
    8a4c:	d1fc      	bne.n	8a48 <tc_init+0x294>
				= config->counter_32_bit.value;
    8a4e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    8a50:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a52:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8a54:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8a56:	2b00      	cmp	r3, #0
    8a58:	d1fc      	bne.n	8a54 <tc_init+0x2a0>
			hw->COUNT32.CC[0].reg =
    8a5a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    8a5c:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a5e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    8a60:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    8a62:	2b00      	cmp	r3, #0
    8a64:	d1fc      	bne.n	8a60 <tc_init+0x2ac>
					config->counter_32_bit.compare_capture_channel[1];
    8a66:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    8a68:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    8a6a:	2000      	movs	r0, #0
    8a6c:	e6d2      	b.n	8814 <tc_init+0x60>
    8a6e:	46c0      	nop			; (mov r8, r8)
    8a70:	0000877d 	.word	0x0000877d
    8a74:	00013260 	.word	0x00013260
    8a78:	20001d18 	.word	0x20001d18
    8a7c:	00013238 	.word	0x00013238
    8a80:	00008655 	.word	0x00008655
    8a84:	40000400 	.word	0x40000400
    8a88:	00008559 	.word	0x00008559
    8a8c:	000084e9 	.word	0x000084e9
    8a90:	0001324c 	.word	0x0001324c

00008a94 <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a94:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    8a96:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    8a98:	2b00      	cmp	r3, #0
    8a9a:	d1fc      	bne.n	8a96 <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    8a9c:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    8a9e:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    8aa0:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	d1fc      	bne.n	8aa0 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    8aa6:	3380      	adds	r3, #128	; 0x80
    8aa8:	7153      	strb	r3, [r2, #5]
#if (SAMC20) || (SAMC21) || (SAML21) || (SAML22) || (SAMR30)
	/* wait for the CMD bits in CTRLBSET to be cleared, meaning the CMD has been executed */
	while(tc_module->CTRLBSET.reg & TC_CTRLBSET_CMD_READSYNC);	
    8aaa:	7953      	ldrb	r3, [r2, #5]
    8aac:	b25b      	sxtb	r3, r3
    8aae:	2b00      	cmp	r3, #0
    8ab0:	dbfb      	blt.n	8aaa <tc_get_count_value+0x16>

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    8ab2:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    8ab4:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    8ab6:	2b00      	cmp	r3, #0
    8ab8:	d1fc      	bne.n	8ab4 <tc_get_count_value+0x20>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    8aba:	7903      	ldrb	r3, [r0, #4]
    8abc:	2b04      	cmp	r3, #4
    8abe:	d005      	beq.n	8acc <tc_get_count_value+0x38>
    8ac0:	2b08      	cmp	r3, #8
    8ac2:	d009      	beq.n	8ad8 <tc_get_count_value+0x44>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    8ac4:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d003      	beq.n	8ad2 <tc_get_count_value+0x3e>
}
    8aca:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    8acc:	7d10      	ldrb	r0, [r2, #20]
    8ace:	b2c0      	uxtb	r0, r0
    8ad0:	e7fb      	b.n	8aca <tc_get_count_value+0x36>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    8ad2:	8a90      	ldrh	r0, [r2, #20]
    8ad4:	b280      	uxth	r0, r0
    8ad6:	e7f8      	b.n	8aca <tc_get_count_value+0x36>
			return tc_module->COUNT32.COUNT.reg;
    8ad8:	6950      	ldr	r0, [r2, #20]
    8ada:	e7f6      	b.n	8aca <tc_get_count_value+0x36>

00008adc <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    8adc:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    8ade:	6804      	ldr	r4, [r0, #0]
    8ae0:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    8ae2:	2b00      	cmp	r3, #0
    8ae4:	d1fc      	bne.n	8ae0 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    8ae6:	7903      	ldrb	r3, [r0, #4]
    8ae8:	2b04      	cmp	r3, #4
    8aea:	d006      	beq.n	8afa <tc_set_compare_value+0x1e>
    8aec:	2b08      	cmp	r3, #8
    8aee:	d028      	beq.n	8b42 <tc_set_compare_value+0x66>
    8af0:	2b00      	cmp	r3, #0
    8af2:	d013      	beq.n	8b1c <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    8af4:	2317      	movs	r3, #23
}
    8af6:	0018      	movs	r0, r3
    8af8:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    8afa:	2317      	movs	r3, #23
			if (channel_index <
    8afc:	2901      	cmp	r1, #1
    8afe:	d8fa      	bhi.n	8af6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    8b00:	7e83      	ldrb	r3, [r0, #26]
    8b02:	2b00      	cmp	r3, #0
    8b04:	d005      	beq.n	8b12 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    8b06:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    8b08:	1861      	adds	r1, r4, r1
    8b0a:	3130      	adds	r1, #48	; 0x30
    8b0c:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    8b0e:	2300      	movs	r3, #0
    8b10:	e7f1      	b.n	8af6 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    8b12:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    8b14:	1864      	adds	r4, r4, r1
    8b16:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    8b18:	2300      	movs	r3, #0
    8b1a:	e7ec      	b.n	8af6 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    8b1c:	2317      	movs	r3, #23
			if (channel_index <
    8b1e:	2901      	cmp	r1, #1
    8b20:	d8e9      	bhi.n	8af6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    8b22:	7e83      	ldrb	r3, [r0, #26]
    8b24:	2b00      	cmp	r3, #0
    8b26:	d005      	beq.n	8b34 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    8b28:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    8b2a:	3118      	adds	r1, #24
    8b2c:	0049      	lsls	r1, r1, #1
    8b2e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    8b30:	2300      	movs	r3, #0
    8b32:	e7e0      	b.n	8af6 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    8b34:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    8b36:	310c      	adds	r1, #12
    8b38:	0049      	lsls	r1, r1, #1
    8b3a:	1864      	adds	r4, r4, r1
    8b3c:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    8b3e:	2300      	movs	r3, #0
    8b40:	e7d9      	b.n	8af6 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    8b42:	2317      	movs	r3, #23
			if (channel_index <
    8b44:	2901      	cmp	r1, #1
    8b46:	d8d6      	bhi.n	8af6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    8b48:	7e83      	ldrb	r3, [r0, #26]
    8b4a:	2b00      	cmp	r3, #0
    8b4c:	d105      	bne.n	8b5a <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    8b4e:	3106      	adds	r1, #6
    8b50:	0089      	lsls	r1, r1, #2
    8b52:	1864      	adds	r4, r4, r1
    8b54:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    8b56:	2300      	movs	r3, #0
    8b58:	e7cd      	b.n	8af6 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    8b5a:	310c      	adds	r1, #12
    8b5c:	0089      	lsls	r1, r1, #2
    8b5e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    8b60:	2300      	movs	r3, #0
    8b62:	e7c8      	b.n	8af6 <tc_set_compare_value+0x1a>

00008b64 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8b64:	e7fe      	b.n	8b64 <Dummy_Handler>
    8b66:	Address 0x00008b66 is out of bounds.


00008b68 <Reset_Handler>:
{
    8b68:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    8b6a:	4a1a      	ldr	r2, [pc, #104]	; (8bd4 <Reset_Handler+0x6c>)
    8b6c:	4b1a      	ldr	r3, [pc, #104]	; (8bd8 <Reset_Handler+0x70>)
    8b6e:	429a      	cmp	r2, r3
    8b70:	d011      	beq.n	8b96 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    8b72:	001a      	movs	r2, r3
    8b74:	4b19      	ldr	r3, [pc, #100]	; (8bdc <Reset_Handler+0x74>)
    8b76:	429a      	cmp	r2, r3
    8b78:	d20d      	bcs.n	8b96 <Reset_Handler+0x2e>
    8b7a:	4a19      	ldr	r2, [pc, #100]	; (8be0 <Reset_Handler+0x78>)
    8b7c:	3303      	adds	r3, #3
    8b7e:	1a9b      	subs	r3, r3, r2
    8b80:	089b      	lsrs	r3, r3, #2
    8b82:	3301      	adds	r3, #1
    8b84:	009b      	lsls	r3, r3, #2
    8b86:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    8b88:	4813      	ldr	r0, [pc, #76]	; (8bd8 <Reset_Handler+0x70>)
    8b8a:	4912      	ldr	r1, [pc, #72]	; (8bd4 <Reset_Handler+0x6c>)
    8b8c:	588c      	ldr	r4, [r1, r2]
    8b8e:	5084      	str	r4, [r0, r2]
    8b90:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    8b92:	429a      	cmp	r2, r3
    8b94:	d1fa      	bne.n	8b8c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    8b96:	4a13      	ldr	r2, [pc, #76]	; (8be4 <Reset_Handler+0x7c>)
    8b98:	4b13      	ldr	r3, [pc, #76]	; (8be8 <Reset_Handler+0x80>)
    8b9a:	429a      	cmp	r2, r3
    8b9c:	d20a      	bcs.n	8bb4 <Reset_Handler+0x4c>
    8b9e:	43d3      	mvns	r3, r2
    8ba0:	4911      	ldr	r1, [pc, #68]	; (8be8 <Reset_Handler+0x80>)
    8ba2:	185b      	adds	r3, r3, r1
    8ba4:	2103      	movs	r1, #3
    8ba6:	438b      	bics	r3, r1
    8ba8:	3304      	adds	r3, #4
    8baa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    8bac:	2100      	movs	r1, #0
    8bae:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    8bb0:	4293      	cmp	r3, r2
    8bb2:	d1fc      	bne.n	8bae <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    8bb4:	4a0d      	ldr	r2, [pc, #52]	; (8bec <Reset_Handler+0x84>)
    8bb6:	21ff      	movs	r1, #255	; 0xff
    8bb8:	4b0d      	ldr	r3, [pc, #52]	; (8bf0 <Reset_Handler+0x88>)
    8bba:	438b      	bics	r3, r1
    8bbc:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    8bbe:	4a0d      	ldr	r2, [pc, #52]	; (8bf4 <Reset_Handler+0x8c>)
    8bc0:	6853      	ldr	r3, [r2, #4]
    8bc2:	397f      	subs	r1, #127	; 0x7f
    8bc4:	430b      	orrs	r3, r1
    8bc6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    8bc8:	4b0b      	ldr	r3, [pc, #44]	; (8bf8 <Reset_Handler+0x90>)
    8bca:	4798      	blx	r3
        main();
    8bcc:	4b0b      	ldr	r3, [pc, #44]	; (8bfc <Reset_Handler+0x94>)
    8bce:	4798      	blx	r3
    8bd0:	e7fe      	b.n	8bd0 <Reset_Handler+0x68>
    8bd2:	46c0      	nop			; (mov r8, r8)
    8bd4:	00013fa0 	.word	0x00013fa0
    8bd8:	20000000 	.word	0x20000000
    8bdc:	20000098 	.word	0x20000098
    8be0:	20000004 	.word	0x20000004
    8be4:	20000098 	.word	0x20000098
    8be8:	200023f0 	.word	0x200023f0
    8bec:	e000ed00 	.word	0xe000ed00
    8bf0:	00000000 	.word	0x00000000
    8bf4:	41004000 	.word	0x41004000
    8bf8:	00011dd1 	.word	0x00011dd1
    8bfc:	0000ea01 	.word	0x0000ea01

00008c00 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    8c00:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c02:	46c6      	mov	lr, r8
    8c04:	b500      	push	{lr}
    8c06:	000c      	movs	r4, r1
    8c08:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    8c0a:	2800      	cmp	r0, #0
    8c0c:	d10f      	bne.n	8c2e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    8c0e:	2a00      	cmp	r2, #0
    8c10:	dd11      	ble.n	8c36 <_read+0x36>
    8c12:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    8c14:	4e09      	ldr	r6, [pc, #36]	; (8c3c <_read+0x3c>)
    8c16:	4d0a      	ldr	r5, [pc, #40]	; (8c40 <_read+0x40>)
    8c18:	6830      	ldr	r0, [r6, #0]
    8c1a:	0021      	movs	r1, r4
    8c1c:	682b      	ldr	r3, [r5, #0]
    8c1e:	4798      	blx	r3
		ptr++;
    8c20:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    8c22:	42bc      	cmp	r4, r7
    8c24:	d1f8      	bne.n	8c18 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    8c26:	4640      	mov	r0, r8
    8c28:	bc04      	pop	{r2}
    8c2a:	4690      	mov	r8, r2
    8c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    8c2e:	2301      	movs	r3, #1
    8c30:	425b      	negs	r3, r3
    8c32:	4698      	mov	r8, r3
    8c34:	e7f7      	b.n	8c26 <_read+0x26>
	for (; len > 0; --len) {
    8c36:	4680      	mov	r8, r0
    8c38:	e7f5      	b.n	8c26 <_read+0x26>
    8c3a:	46c0      	nop			; (mov r8, r8)
    8c3c:	20001d2c 	.word	0x20001d2c
    8c40:	20001d24 	.word	0x20001d24

00008c44 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    8c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c46:	46c6      	mov	lr, r8
    8c48:	b500      	push	{lr}
    8c4a:	000e      	movs	r6, r1
    8c4c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    8c4e:	3801      	subs	r0, #1
    8c50:	2802      	cmp	r0, #2
    8c52:	d810      	bhi.n	8c76 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    8c54:	2a00      	cmp	r2, #0
    8c56:	d011      	beq.n	8c7c <_write+0x38>
    8c58:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    8c5a:	4b0c      	ldr	r3, [pc, #48]	; (8c8c <_write+0x48>)
    8c5c:	4698      	mov	r8, r3
    8c5e:	4f0c      	ldr	r7, [pc, #48]	; (8c90 <_write+0x4c>)
    8c60:	4643      	mov	r3, r8
    8c62:	6818      	ldr	r0, [r3, #0]
    8c64:	5d31      	ldrb	r1, [r6, r4]
    8c66:	683b      	ldr	r3, [r7, #0]
    8c68:	4798      	blx	r3
    8c6a:	2800      	cmp	r0, #0
    8c6c:	db08      	blt.n	8c80 <_write+0x3c>
			return -1;
		}
		++nChars;
    8c6e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    8c70:	42a5      	cmp	r5, r4
    8c72:	d1f5      	bne.n	8c60 <_write+0x1c>
    8c74:	e006      	b.n	8c84 <_write+0x40>
		return -1;
    8c76:	2401      	movs	r4, #1
    8c78:	4264      	negs	r4, r4
    8c7a:	e003      	b.n	8c84 <_write+0x40>
	for (; len != 0; --len) {
    8c7c:	0014      	movs	r4, r2
    8c7e:	e001      	b.n	8c84 <_write+0x40>
			return -1;
    8c80:	2401      	movs	r4, #1
    8c82:	4264      	negs	r4, r4
	}
	return nChars;
}
    8c84:	0020      	movs	r0, r4
    8c86:	bc04      	pop	{r2}
    8c88:	4690      	mov	r8, r2
    8c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c8c:	20001d2c 	.word	0x20001d2c
    8c90:	20001d28 	.word	0x20001d28

00008c94 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    8c94:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    8c96:	4a06      	ldr	r2, [pc, #24]	; (8cb0 <_sbrk+0x1c>)
    8c98:	6812      	ldr	r2, [r2, #0]
    8c9a:	2a00      	cmp	r2, #0
    8c9c:	d004      	beq.n	8ca8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    8c9e:	4a04      	ldr	r2, [pc, #16]	; (8cb0 <_sbrk+0x1c>)
    8ca0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    8ca2:	18c3      	adds	r3, r0, r3
    8ca4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    8ca6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    8ca8:	4902      	ldr	r1, [pc, #8]	; (8cb4 <_sbrk+0x20>)
    8caa:	4a01      	ldr	r2, [pc, #4]	; (8cb0 <_sbrk+0x1c>)
    8cac:	6011      	str	r1, [r2, #0]
    8cae:	e7f6      	b.n	8c9e <_sbrk+0xa>
    8cb0:	200000f8 	.word	0x200000f8
    8cb4:	200043f0 	.word	0x200043f0

00008cb8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    8cb8:	2001      	movs	r0, #1
    8cba:	4240      	negs	r0, r0
    8cbc:	4770      	bx	lr

00008cbe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8cbe:	2380      	movs	r3, #128	; 0x80
    8cc0:	019b      	lsls	r3, r3, #6
    8cc2:	604b      	str	r3, [r1, #4]

	return 0;
}
    8cc4:	2000      	movs	r0, #0
    8cc6:	4770      	bx	lr

00008cc8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    8cc8:	2001      	movs	r0, #1
    8cca:	4770      	bx	lr

00008ccc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    8ccc:	2000      	movs	r0, #0
    8cce:	4770      	bx	lr

00008cd0 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
    8cd0:	be00      	bkpt	0x0000
    8cd2:	e7fe      	b.n	8cd2 <_exit+0x2>

00008cd4 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
    8cd4:	4770      	bx	lr

00008cd6 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
    8cd6:	2001      	movs	r0, #1
    8cd8:	4240      	negs	r0, r0
    8cda:	4770      	bx	lr

00008cdc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    8cdc:	b570      	push	{r4, r5, r6, lr}
    8cde:	b082      	sub	sp, #8
    8ce0:	0005      	movs	r5, r0
    8ce2:	000e      	movs	r6, r1
	uint16_t temp = 0;
    8ce4:	2200      	movs	r2, #0
    8ce6:	466b      	mov	r3, sp
    8ce8:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    8cea:	4c06      	ldr	r4, [pc, #24]	; (8d04 <usart_serial_getchar+0x28>)
    8cec:	466b      	mov	r3, sp
    8cee:	1d99      	adds	r1, r3, #6
    8cf0:	0028      	movs	r0, r5
    8cf2:	47a0      	blx	r4
    8cf4:	2800      	cmp	r0, #0
    8cf6:	d1f9      	bne.n	8cec <usart_serial_getchar+0x10>

	*c = temp;
    8cf8:	466b      	mov	r3, sp
    8cfa:	3306      	adds	r3, #6
    8cfc:	881b      	ldrh	r3, [r3, #0]
    8cfe:	7033      	strb	r3, [r6, #0]
}
    8d00:	b002      	add	sp, #8
    8d02:	bd70      	pop	{r4, r5, r6, pc}
    8d04:	00007cdb 	.word	0x00007cdb

00008d08 <usart_serial_putchar>:
{
    8d08:	b570      	push	{r4, r5, r6, lr}
    8d0a:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    8d0c:	b28c      	uxth	r4, r1
    8d0e:	4e03      	ldr	r6, [pc, #12]	; (8d1c <usart_serial_putchar+0x14>)
    8d10:	0021      	movs	r1, r4
    8d12:	0028      	movs	r0, r5
    8d14:	47b0      	blx	r6
    8d16:	2800      	cmp	r0, #0
    8d18:	d1fa      	bne.n	8d10 <usart_serial_putchar+0x8>
}
    8d1a:	bd70      	pop	{r4, r5, r6, pc}
    8d1c:	00007cb5 	.word	0x00007cb5

00008d20 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    8d20:	b510      	push	{r4, lr}
    8d22:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    8d24:	466b      	mov	r3, sp
    8d26:	1ddc      	adds	r4, r3, #7
    8d28:	2201      	movs	r2, #1
    8d2a:	0021      	movs	r1, r4
    8d2c:	480f      	ldr	r0, [pc, #60]	; (8d6c <USART_HOST_ISR_VECT+0x4c>)
    8d2e:	4b10      	ldr	r3, [pc, #64]	; (8d70 <USART_HOST_ISR_VECT+0x50>)
    8d30:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    8d32:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    8d34:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    8d38:	2200      	movs	r2, #0
    8d3a:	4b0e      	ldr	r3, [pc, #56]	; (8d74 <USART_HOST_ISR_VECT+0x54>)
    8d3c:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    8d3e:	4b0e      	ldr	r3, [pc, #56]	; (8d78 <USART_HOST_ISR_VECT+0x58>)
    8d40:	781b      	ldrb	r3, [r3, #0]
    8d42:	7821      	ldrb	r1, [r4, #0]
    8d44:	4a0d      	ldr	r2, [pc, #52]	; (8d7c <USART_HOST_ISR_VECT+0x5c>)
    8d46:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    8d48:	2b9b      	cmp	r3, #155	; 0x9b
    8d4a:	d00a      	beq.n	8d62 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    8d4c:	3301      	adds	r3, #1
    8d4e:	4a0a      	ldr	r2, [pc, #40]	; (8d78 <USART_HOST_ISR_VECT+0x58>)
    8d50:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    8d52:	2201      	movs	r2, #1
    8d54:	4b07      	ldr	r3, [pc, #28]	; (8d74 <USART_HOST_ISR_VECT+0x54>)
    8d56:	701a      	strb	r2, [r3, #0]
    8d58:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    8d5c:	b662      	cpsie	i
}
    8d5e:	b002      	add	sp, #8
    8d60:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    8d62:	2200      	movs	r2, #0
    8d64:	4b04      	ldr	r3, [pc, #16]	; (8d78 <USART_HOST_ISR_VECT+0x58>)
    8d66:	701a      	strb	r2, [r3, #0]
    8d68:	e7f3      	b.n	8d52 <USART_HOST_ISR_VECT+0x32>
    8d6a:	46c0      	nop			; (mov r8, r8)
    8d6c:	200000fc 	.word	0x200000fc
    8d70:	00007e01 	.word	0x00007e01
    8d74:	20000008 	.word	0x20000008
    8d78:	200001cc 	.word	0x200001cc
    8d7c:	20000130 	.word	0x20000130

00008d80 <sio2host_init>:
{
    8d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d82:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    8d84:	2380      	movs	r3, #128	; 0x80
    8d86:	05db      	lsls	r3, r3, #23
    8d88:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    8d8a:	2300      	movs	r3, #0
    8d8c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    8d8e:	22ff      	movs	r2, #255	; 0xff
    8d90:	4669      	mov	r1, sp
    8d92:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    8d94:	2200      	movs	r2, #0
    8d96:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    8d98:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    8d9a:	2401      	movs	r4, #1
    8d9c:	2124      	movs	r1, #36	; 0x24
    8d9e:	4668      	mov	r0, sp
    8da0:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    8da2:	3101      	adds	r1, #1
    8da4:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    8da6:	3101      	adds	r1, #1
    8da8:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    8daa:	3101      	adds	r1, #1
    8dac:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    8dae:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    8db0:	3105      	adds	r1, #5
    8db2:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    8db4:	3101      	adds	r1, #1
    8db6:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    8db8:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    8dba:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    8dbc:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    8dbe:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    8dc0:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    8dc2:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    8dc4:	2313      	movs	r3, #19
    8dc6:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    8dc8:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    8dca:	23c4      	movs	r3, #196	; 0xc4
    8dcc:	039b      	lsls	r3, r3, #14
    8dce:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    8dd0:	2301      	movs	r3, #1
    8dd2:	425b      	negs	r3, r3
    8dd4:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    8dd6:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    8dd8:	4b2d      	ldr	r3, [pc, #180]	; (8e90 <sio2host_init+0x110>)
    8dda:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    8ddc:	4b2d      	ldr	r3, [pc, #180]	; (8e94 <sio2host_init+0x114>)
    8dde:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    8de0:	2396      	movs	r3, #150	; 0x96
    8de2:	021b      	lsls	r3, r3, #8
    8de4:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    8de6:	4d2c      	ldr	r5, [pc, #176]	; (8e98 <sio2host_init+0x118>)
    8de8:	4b2c      	ldr	r3, [pc, #176]	; (8e9c <sio2host_init+0x11c>)
    8dea:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    8dec:	4a2c      	ldr	r2, [pc, #176]	; (8ea0 <sio2host_init+0x120>)
    8dee:	4b2d      	ldr	r3, [pc, #180]	; (8ea4 <sio2host_init+0x124>)
    8df0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    8df2:	4a2d      	ldr	r2, [pc, #180]	; (8ea8 <sio2host_init+0x128>)
    8df4:	4b2d      	ldr	r3, [pc, #180]	; (8eac <sio2host_init+0x12c>)
    8df6:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    8df8:	466a      	mov	r2, sp
    8dfa:	492d      	ldr	r1, [pc, #180]	; (8eb0 <sio2host_init+0x130>)
    8dfc:	0028      	movs	r0, r5
    8dfe:	4b2d      	ldr	r3, [pc, #180]	; (8eb4 <sio2host_init+0x134>)
    8e00:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    8e02:	4f2d      	ldr	r7, [pc, #180]	; (8eb8 <sio2host_init+0x138>)
    8e04:	683b      	ldr	r3, [r7, #0]
    8e06:	6898      	ldr	r0, [r3, #8]
    8e08:	2100      	movs	r1, #0
    8e0a:	4e2c      	ldr	r6, [pc, #176]	; (8ebc <sio2host_init+0x13c>)
    8e0c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    8e0e:	683b      	ldr	r3, [r7, #0]
    8e10:	6858      	ldr	r0, [r3, #4]
    8e12:	2100      	movs	r1, #0
    8e14:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8e16:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    8e18:	0030      	movs	r0, r6
    8e1a:	4b29      	ldr	r3, [pc, #164]	; (8ec0 <sio2host_init+0x140>)
    8e1c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8e1e:	231f      	movs	r3, #31
    8e20:	4018      	ands	r0, r3
    8e22:	4084      	lsls	r4, r0
    8e24:	4b27      	ldr	r3, [pc, #156]	; (8ec4 <sio2host_init+0x144>)
    8e26:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8e28:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8e2a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8e2c:	2b00      	cmp	r3, #0
    8e2e:	d1fc      	bne.n	8e2a <sio2host_init+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8e30:	6833      	ldr	r3, [r6, #0]
    8e32:	2202      	movs	r2, #2
    8e34:	4313      	orrs	r3, r2
    8e36:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8e38:	4b17      	ldr	r3, [pc, #92]	; (8e98 <sio2host_init+0x118>)
    8e3a:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    8e3c:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e3e:	2a00      	cmp	r2, #0
    8e40:	d1fc      	bne.n	8e3c <sio2host_init+0xbc>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    8e42:	6859      	ldr	r1, [r3, #4]
    8e44:	2280      	movs	r2, #128	; 0x80
    8e46:	0252      	lsls	r2, r2, #9
    8e48:	430a      	orrs	r2, r1
    8e4a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    8e4c:	2101      	movs	r1, #1
    8e4e:	4a12      	ldr	r2, [pc, #72]	; (8e98 <sio2host_init+0x118>)
    8e50:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    8e52:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e54:	2a00      	cmp	r2, #0
    8e56:	d1fc      	bne.n	8e52 <sio2host_init+0xd2>
	return (usart_hw->SYNCBUSY.reg);
    8e58:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e5a:	2a00      	cmp	r2, #0
    8e5c:	d1fc      	bne.n	8e58 <sio2host_init+0xd8>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    8e5e:	6859      	ldr	r1, [r3, #4]
    8e60:	2280      	movs	r2, #128	; 0x80
    8e62:	0292      	lsls	r2, r2, #10
    8e64:	430a      	orrs	r2, r1
    8e66:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    8e68:	2101      	movs	r1, #1
    8e6a:	4a0b      	ldr	r2, [pc, #44]	; (8e98 <sio2host_init+0x118>)
    8e6c:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    8e6e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    8e70:	2a00      	cmp	r2, #0
    8e72:	d1fc      	bne.n	8e6e <sio2host_init+0xee>
	USART_HOST_RX_ISR_ENABLE();
    8e74:	4914      	ldr	r1, [pc, #80]	; (8ec8 <sio2host_init+0x148>)
    8e76:	2003      	movs	r0, #3
    8e78:	4b14      	ldr	r3, [pc, #80]	; (8ecc <sio2host_init+0x14c>)
    8e7a:	4798      	blx	r3
    8e7c:	2204      	movs	r2, #4
    8e7e:	4b0c      	ldr	r3, [pc, #48]	; (8eb0 <sio2host_init+0x130>)
    8e80:	759a      	strb	r2, [r3, #22]
    8e82:	2280      	movs	r2, #128	; 0x80
    8e84:	0112      	lsls	r2, r2, #4
    8e86:	4b0f      	ldr	r3, [pc, #60]	; (8ec4 <sio2host_init+0x144>)
    8e88:	601a      	str	r2, [r3, #0]
}
    8e8a:	b011      	add	sp, #68	; 0x44
    8e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e8e:	46c0      	nop			; (mov r8, r8)
    8e90:	00180002 	.word	0x00180002
    8e94:	00190002 	.word	0x00190002
    8e98:	200000fc 	.word	0x200000fc
    8e9c:	20001d2c 	.word	0x20001d2c
    8ea0:	00008d09 	.word	0x00008d09
    8ea4:	20001d28 	.word	0x20001d28
    8ea8:	00008cdd 	.word	0x00008cdd
    8eac:	20001d24 	.word	0x20001d24
    8eb0:	42000c00 	.word	0x42000c00
    8eb4:	00007951 	.word	0x00007951
    8eb8:	20000034 	.word	0x20000034
    8ebc:	000125cd 	.word	0x000125cd
    8ec0:	000074f1 	.word	0x000074f1
    8ec4:	e000e100 	.word	0xe000e100
    8ec8:	00008d21 	.word	0x00008d21
    8ecc:	000074b5 	.word	0x000074b5

00008ed0 <sio2host_tx>:
{
    8ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ed2:	b083      	sub	sp, #12
    8ed4:	0006      	movs	r6, r0
    8ed6:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    8ed8:	466b      	mov	r3, sp
    8eda:	889d      	ldrh	r5, [r3, #4]
    8edc:	4c05      	ldr	r4, [pc, #20]	; (8ef4 <sio2host_tx+0x24>)
    8ede:	4f06      	ldr	r7, [pc, #24]	; (8ef8 <sio2host_tx+0x28>)
    8ee0:	002a      	movs	r2, r5
    8ee2:	0031      	movs	r1, r6
    8ee4:	0020      	movs	r0, r4
    8ee6:	47b8      	blx	r7
	} while (status != STATUS_OK);
    8ee8:	2800      	cmp	r0, #0
    8eea:	d1f9      	bne.n	8ee0 <sio2host_tx+0x10>
}
    8eec:	9801      	ldr	r0, [sp, #4]
    8eee:	b003      	add	sp, #12
    8ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8ef2:	46c0      	nop			; (mov r8, r8)
    8ef4:	200000fc 	.word	0x200000fc
    8ef8:	00007d45 	.word	0x00007d45

00008efc <sio2host_putchar>:
{
    8efc:	b500      	push	{lr}
    8efe:	b083      	sub	sp, #12
    8f00:	466b      	mov	r3, sp
    8f02:	71d8      	strb	r0, [r3, #7]
    8f04:	3307      	adds	r3, #7
	sio2host_tx(&ch, 1);
    8f06:	2101      	movs	r1, #1
    8f08:	0018      	movs	r0, r3
    8f0a:	4b02      	ldr	r3, [pc, #8]	; (8f14 <sio2host_putchar+0x18>)
    8f0c:	4798      	blx	r3
}
    8f0e:	b003      	add	sp, #12
    8f10:	bd00      	pop	{pc}
    8f12:	46c0      	nop			; (mov r8, r8)
    8f14:	00008ed1 	.word	0x00008ed1

00008f18 <sio2host_disable>:

void sio2host_disable(void)
{
    8f18:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    8f1a:	4d0a      	ldr	r5, [pc, #40]	; (8f44 <sio2host_disable+0x2c>)
    8f1c:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    8f1e:	0020      	movs	r0, r4
    8f20:	4b09      	ldr	r3, [pc, #36]	; (8f48 <sio2host_disable+0x30>)
    8f22:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    8f24:	231f      	movs	r3, #31
    8f26:	4018      	ands	r0, r3
    8f28:	3b1e      	subs	r3, #30
    8f2a:	4083      	lsls	r3, r0
    8f2c:	2280      	movs	r2, #128	; 0x80
    8f2e:	4907      	ldr	r1, [pc, #28]	; (8f4c <sio2host_disable+0x34>)
    8f30:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    8f32:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    8f34:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8f36:	2b00      	cmp	r3, #0
    8f38:	d1fc      	bne.n	8f34 <sio2host_disable+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    8f3a:	6823      	ldr	r3, [r4, #0]
    8f3c:	2202      	movs	r2, #2
    8f3e:	4393      	bics	r3, r2
    8f40:	6023      	str	r3, [r4, #0]
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
	usart_disable(&host_uart_module);
#endif
}
    8f42:	bd70      	pop	{r4, r5, r6, pc}
    8f44:	200000fc 	.word	0x200000fc
    8f48:	000074f1 	.word	0x000074f1
    8f4c:	e000e100 	.word	0xe000e100

00008f50 <CompareData>:
     Otherwise it is the start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
static bool CompareData(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    8f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f52:	46c6      	mov	lr, r8
    8f54:	b500      	push	{lr}
    8f56:	b084      	sub	sp, #16
    8f58:	0014      	movs	r4, r2
    8f5a:	001f      	movs	r7, r3
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    8f5c:	4b29      	ldr	r3, [pc, #164]	; (9004 <CompareData+0xb4>)
    8f5e:	18cb      	adds	r3, r1, r3
    8f60:	0340      	lsls	r0, r0, #13
    8f62:	181d      	adds	r5, r3, r0
  uint8_t  buffer[16U];

  assert(numberOfBytes);
    8f64:	2f00      	cmp	r7, #0
    8f66:	d01a      	beq.n	8f9e <CompareData+0x4e>
  assert(address <= D_NV_MEMORY_END);
    8f68:	4b27      	ldr	r3, [pc, #156]	; (9008 <CompareData+0xb8>)
    8f6a:	1e5a      	subs	r2, r3, #1
    8f6c:	4295      	cmp	r5, r2
    8f6e:	d81c      	bhi.n	8faa <CompareData+0x5a>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8f70:	197a      	adds	r2, r7, r5
    8f72:	4293      	cmp	r3, r2
    8f74:	d31f      	bcc.n	8fb6 <CompareData+0x66>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8f76:	19c9      	adds	r1, r1, r7
    8f78:	2380      	movs	r3, #128	; 0x80
    8f7a:	019b      	lsls	r3, r3, #6
    8f7c:	4299      	cmp	r1, r3
    8f7e:	d820      	bhi.n	8fc2 <CompareData+0x72>

  while(numberOfBytes)
  {
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);

    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8f80:	4b22      	ldr	r3, [pc, #136]	; (900c <CompareData+0xbc>)
    8f82:	4698      	mov	r8, r3
    uint16_t bytesToRead = MIN(sizeof(buffer), numberOfBytes);
    8f84:	1c3e      	adds	r6, r7, #0
    8f86:	2f10      	cmp	r7, #16
    8f88:	d900      	bls.n	8f8c <CompareData+0x3c>
    8f8a:	2610      	movs	r6, #16
    8f8c:	b2b6      	uxth	r6, r6
    memcpy(buffer, (uint8_t FLASH_PTR *)address, bytesToRead);
    8f8e:	0032      	movs	r2, r6
    8f90:	0029      	movs	r1, r5
    8f92:	4668      	mov	r0, sp
    8f94:	47c0      	blx	r8
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8f96:	2e00      	cmp	r6, #0
    8f98:	d028      	beq.n	8fec <CompareData+0x9c>
    8f9a:	2300      	movs	r3, #0
    8f9c:	e01f      	b.n	8fde <CompareData+0x8e>
  assert(numberOfBytes);
    8f9e:	4b1c      	ldr	r3, [pc, #112]	; (9010 <CompareData+0xc0>)
    8fa0:	4a1c      	ldr	r2, [pc, #112]	; (9014 <CompareData+0xc4>)
    8fa2:	21d9      	movs	r1, #217	; 0xd9
    8fa4:	481c      	ldr	r0, [pc, #112]	; (9018 <CompareData+0xc8>)
    8fa6:	4c1d      	ldr	r4, [pc, #116]	; (901c <CompareData+0xcc>)
    8fa8:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    8faa:	4b1d      	ldr	r3, [pc, #116]	; (9020 <CompareData+0xd0>)
    8fac:	4a19      	ldr	r2, [pc, #100]	; (9014 <CompareData+0xc4>)
    8fae:	21da      	movs	r1, #218	; 0xda
    8fb0:	4819      	ldr	r0, [pc, #100]	; (9018 <CompareData+0xc8>)
    8fb2:	4c1a      	ldr	r4, [pc, #104]	; (901c <CompareData+0xcc>)
    8fb4:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    8fb6:	4b1b      	ldr	r3, [pc, #108]	; (9024 <CompareData+0xd4>)
    8fb8:	4a16      	ldr	r2, [pc, #88]	; (9014 <CompareData+0xc4>)
    8fba:	21db      	movs	r1, #219	; 0xdb
    8fbc:	4816      	ldr	r0, [pc, #88]	; (9018 <CompareData+0xc8>)
    8fbe:	4c17      	ldr	r4, [pc, #92]	; (901c <CompareData+0xcc>)
    8fc0:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    8fc2:	4b19      	ldr	r3, [pc, #100]	; (9028 <CompareData+0xd8>)
    8fc4:	4a13      	ldr	r2, [pc, #76]	; (9014 <CompareData+0xc4>)
    8fc6:	21dc      	movs	r1, #220	; 0xdc
    8fc8:	4813      	ldr	r0, [pc, #76]	; (9018 <CompareData+0xc8>)
    8fca:	4c14      	ldr	r4, [pc, #80]	; (901c <CompareData+0xcc>)
    8fcc:	47a0      	blx	r4
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    8fce:	21ff      	movs	r1, #255	; 0xff
    8fd0:	4291      	cmp	r1, r2
    8fd2:	d112      	bne.n	8ffa <CompareData+0xaa>
    for (uint8_t i = 0U; i < bytesToRead; i++)
    8fd4:	3301      	adds	r3, #1
    8fd6:	b2db      	uxtb	r3, r3
    8fd8:	b29a      	uxth	r2, r3
    8fda:	4296      	cmp	r6, r2
    8fdc:	d906      	bls.n	8fec <CompareData+0x9c>
      if (buffer[i] != ((pBuffer != NULL) ? *(pBuffer++) : 0xFF))
    8fde:	466a      	mov	r2, sp
    8fe0:	5cd2      	ldrb	r2, [r2, r3]
    8fe2:	2c00      	cmp	r4, #0
    8fe4:	d0f3      	beq.n	8fce <CompareData+0x7e>
    8fe6:	7821      	ldrb	r1, [r4, #0]
    8fe8:	3401      	adds	r4, #1
    8fea:	e7f1      	b.n	8fd0 <CompareData+0x80>
        return false;

    numberOfBytes -= bytesToRead;
    8fec:	1bbf      	subs	r7, r7, r6
    8fee:	b2bf      	uxth	r7, r7
    address += bytesToRead;
    8ff0:	19ad      	adds	r5, r5, r6
  while(numberOfBytes)
    8ff2:	2f00      	cmp	r7, #0
    8ff4:	d1c6      	bne.n	8f84 <CompareData+0x34>
  }

  return true;
    8ff6:	2001      	movs	r0, #1
    8ff8:	e000      	b.n	8ffc <CompareData+0xac>
        return false;
    8ffa:	2000      	movs	r0, #0
}
    8ffc:	b004      	add	sp, #16
    8ffe:	bc04      	pop	{r2}
    9000:	4690      	mov	r8, r2
    9002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9004:	00002100 	.word	0x00002100
    9008:	00006100 	.word	0x00006100
    900c:	00011e37 	.word	0x00011e37
    9010:	00013284 	.word	0x00013284
    9014:	00013408 	.word	0x00013408
    9018:	00013294 	.word	0x00013294
    901c:	00011d75 	.word	0x00011d75
    9020:	000132d4 	.word	0x000132d4
    9024:	000132f0 	.word	0x000132f0
    9028:	00013324 	.word	0x00013324

0000902c <D_Nv_Init>:
{
    902c:	b510      	push	{r4, lr}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    902e:	4a0b      	ldr	r2, [pc, #44]	; (905c <D_Nv_Init+0x30>)
    9030:	23ff      	movs	r3, #255	; 0xff
    9032:	421a      	tst	r2, r3
    9034:	d106      	bne.n	9044 <D_Nv_Init+0x18>
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    9036:	4b0a      	ldr	r3, [pc, #40]	; (9060 <D_Nv_Init+0x34>)
    9038:	490a      	ldr	r1, [pc, #40]	; (9064 <D_Nv_Init+0x38>)
    903a:	468c      	mov	ip, r1
    903c:	4463      	add	r3, ip
    903e:	4293      	cmp	r3, r2
    9040:	d106      	bne.n	9050 <D_Nv_Init+0x24>
}
    9042:	bd10      	pop	{r4, pc}
  assert ((D_NV_MEMORY_START % NVMCTRL_ROW_SIZE) == 0U);
    9044:	4b08      	ldr	r3, [pc, #32]	; (9068 <D_Nv_Init+0x3c>)
    9046:	4a09      	ldr	r2, [pc, #36]	; (906c <D_Nv_Init+0x40>)
    9048:	2159      	movs	r1, #89	; 0x59
    904a:	4809      	ldr	r0, [pc, #36]	; (9070 <D_Nv_Init+0x44>)
    904c:	4c09      	ldr	r4, [pc, #36]	; (9074 <D_Nv_Init+0x48>)
    904e:	47a0      	blx	r4
  assert((D_NV_MEMORY_END - D_NV_MEMORY_START + 1U) == D_NV_MEMORY_SIZE);
    9050:	4b09      	ldr	r3, [pc, #36]	; (9078 <D_Nv_Init+0x4c>)
    9052:	4a06      	ldr	r2, [pc, #24]	; (906c <D_Nv_Init+0x40>)
    9054:	215d      	movs	r1, #93	; 0x5d
    9056:	4806      	ldr	r0, [pc, #24]	; (9070 <D_Nv_Init+0x44>)
    9058:	4c06      	ldr	r4, [pc, #24]	; (9074 <D_Nv_Init+0x48>)
    905a:	47a0      	blx	r4
    905c:	00002100 	.word	0x00002100
    9060:	00006100 	.word	0x00006100
    9064:	ffffc000 	.word	0xffffc000
    9068:	00013354 	.word	0x00013354
    906c:	000133c4 	.word	0x000133c4
    9070:	00013294 	.word	0x00013294
    9074:	00011d75 	.word	0x00011d75
    9078:	00013384 	.word	0x00013384

0000907c <D_Nv_Read_Impl>:
{
    907c:	b570      	push	{r4, r5, r6, lr}
    907e:	0015      	movs	r5, r2
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    9080:	0344      	lsls	r4, r0, #13
    9082:	4813      	ldr	r0, [pc, #76]	; (90d0 <D_Nv_Read_Impl+0x54>)
    9084:	1808      	adds	r0, r1, r0
    9086:	1824      	adds	r4, r4, r0
  assert(address <= D_NV_MEMORY_END);
    9088:	4a12      	ldr	r2, [pc, #72]	; (90d4 <D_Nv_Read_Impl+0x58>)
    908a:	1e50      	subs	r0, r2, #1
    908c:	4284      	cmp	r4, r0
    908e:	d80d      	bhi.n	90ac <D_Nv_Read_Impl+0x30>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    9090:	18e0      	adds	r0, r4, r3
    9092:	4282      	cmp	r2, r0
    9094:	d310      	bcc.n	90b8 <D_Nv_Read_Impl+0x3c>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    9096:	18c9      	adds	r1, r1, r3
    9098:	2280      	movs	r2, #128	; 0x80
    909a:	0192      	lsls	r2, r2, #6
    909c:	4291      	cmp	r1, r2
    909e:	d811      	bhi.n	90c4 <D_Nv_Read_Impl+0x48>
  memcpy(pBuffer, (uint8_t FLASH_PTR *)address, numberOfBytes);
    90a0:	001a      	movs	r2, r3
    90a2:	0021      	movs	r1, r4
    90a4:	0028      	movs	r0, r5
    90a6:	4b0c      	ldr	r3, [pc, #48]	; (90d8 <D_Nv_Read_Impl+0x5c>)
    90a8:	4798      	blx	r3
}
    90aa:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    90ac:	4b0b      	ldr	r3, [pc, #44]	; (90dc <D_Nv_Read_Impl+0x60>)
    90ae:	4a0c      	ldr	r2, [pc, #48]	; (90e0 <D_Nv_Read_Impl+0x64>)
    90b0:	2172      	movs	r1, #114	; 0x72
    90b2:	480c      	ldr	r0, [pc, #48]	; (90e4 <D_Nv_Read_Impl+0x68>)
    90b4:	4c0c      	ldr	r4, [pc, #48]	; (90e8 <D_Nv_Read_Impl+0x6c>)
    90b6:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    90b8:	4b0c      	ldr	r3, [pc, #48]	; (90ec <D_Nv_Read_Impl+0x70>)
    90ba:	4a09      	ldr	r2, [pc, #36]	; (90e0 <D_Nv_Read_Impl+0x64>)
    90bc:	2173      	movs	r1, #115	; 0x73
    90be:	4809      	ldr	r0, [pc, #36]	; (90e4 <D_Nv_Read_Impl+0x68>)
    90c0:	4c09      	ldr	r4, [pc, #36]	; (90e8 <D_Nv_Read_Impl+0x6c>)
    90c2:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    90c4:	4b0a      	ldr	r3, [pc, #40]	; (90f0 <D_Nv_Read_Impl+0x74>)
    90c6:	4a06      	ldr	r2, [pc, #24]	; (90e0 <D_Nv_Read_Impl+0x64>)
    90c8:	2174      	movs	r1, #116	; 0x74
    90ca:	4806      	ldr	r0, [pc, #24]	; (90e4 <D_Nv_Read_Impl+0x68>)
    90cc:	4c06      	ldr	r4, [pc, #24]	; (90e8 <D_Nv_Read_Impl+0x6c>)
    90ce:	47a0      	blx	r4
    90d0:	00002100 	.word	0x00002100
    90d4:	00006100 	.word	0x00006100
    90d8:	00011e37 	.word	0x00011e37
    90dc:	000132d4 	.word	0x000132d4
    90e0:	000133d0 	.word	0x000133d0
    90e4:	00013294 	.word	0x00013294
    90e8:	00011d75 	.word	0x00011d75
    90ec:	000132f0 	.word	0x000132f0
    90f0:	00013324 	.word	0x00013324

000090f4 <D_Nv_Write_Impl>:
{
    90f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    90f6:	46de      	mov	lr, fp
    90f8:	4657      	mov	r7, sl
    90fa:	464e      	mov	r6, r9
    90fc:	4645      	mov	r5, r8
    90fe:	b5e0      	push	{r5, r6, r7, lr}
    9100:	b093      	sub	sp, #76	; 0x4c
    9102:	9201      	str	r2, [sp, #4]
    9104:	469a      	mov	sl, r3
  uint32_t  address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE + offset;
    9106:	4c46      	ldr	r4, [pc, #280]	; (9220 <D_Nv_Write_Impl+0x12c>)
    9108:	190c      	adds	r4, r1, r4
    910a:	0340      	lsls	r0, r0, #13
    910c:	1825      	adds	r5, r4, r0
  assert(numberOfBytes);
    910e:	2b00      	cmp	r3, #0
    9110:	d047      	beq.n	91a2 <D_Nv_Write_Impl+0xae>
  assert(address <= D_NV_MEMORY_END);
    9112:	4b44      	ldr	r3, [pc, #272]	; (9224 <D_Nv_Write_Impl+0x130>)
    9114:	1e5a      	subs	r2, r3, #1
    9116:	4295      	cmp	r5, r2
    9118:	d849      	bhi.n	91ae <D_Nv_Write_Impl+0xba>
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    911a:	4652      	mov	r2, sl
    911c:	1952      	adds	r2, r2, r5
    911e:	4293      	cmp	r3, r2
    9120:	d34b      	bcc.n	91ba <D_Nv_Write_Impl+0xc6>
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    9122:	46d3      	mov	fp, sl
    9124:	4451      	add	r1, sl
    9126:	2380      	movs	r3, #128	; 0x80
    9128:	019b      	lsls	r3, r3, #6
    912a:	4299      	cmp	r1, r3
    912c:	d84b      	bhi.n	91c6 <D_Nv_Write_Impl+0xd2>
  if (s_pfSystemCheckCallback != NULL)
    912e:	4b3e      	ldr	r3, [pc, #248]	; (9228 <D_Nv_Write_Impl+0x134>)
    9130:	681b      	ldr	r3, [r3, #0]
    9132:	2b00      	cmp	r3, #0
    9134:	d000      	beq.n	9138 <D_Nv_Write_Impl+0x44>
    s_pfSystemCheckCallback();
    9136:	4798      	blx	r3
  pageOffset = address % NVMCTRL_PAGE_SIZE;
    9138:	273f      	movs	r7, #63	; 0x3f
    913a:	402f      	ands	r7, r5
  pageStart = address - pageOffset;
    913c:	1bec      	subs	r4, r5, r7
  numberOfPageBytes = MIN((NVMCTRL_PAGE_SIZE - pageOffset), numberOfBytes);
    913e:	2640      	movs	r6, #64	; 0x40
    9140:	1bf6      	subs	r6, r6, r7
    9142:	455e      	cmp	r6, fp
    9144:	dd00      	ble.n	9148 <D_Nv_Write_Impl+0x54>
    9146:	4656      	mov	r6, sl
    9148:	b2b3      	uxth	r3, r6
    914a:	469b      	mov	fp, r3
  memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    914c:	2240      	movs	r2, #64	; 0x40
    914e:	21ff      	movs	r1, #255	; 0xff
    9150:	a802      	add	r0, sp, #8
    9152:	4b36      	ldr	r3, [pc, #216]	; (922c <D_Nv_Write_Impl+0x138>)
    9154:	4798      	blx	r3
  memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    9156:	003b      	movs	r3, r7
    9158:	aa02      	add	r2, sp, #8
    915a:	4694      	mov	ip, r2
    915c:	4463      	add	r3, ip
    915e:	9300      	str	r3, [sp, #0]
    9160:	0436      	lsls	r6, r6, #16
    9162:	0c37      	lsrs	r7, r6, #16
    9164:	003a      	movs	r2, r7
    9166:	9901      	ldr	r1, [sp, #4]
    9168:	0018      	movs	r0, r3
    916a:	4b31      	ldr	r3, [pc, #196]	; (9230 <D_Nv_Write_Impl+0x13c>)
    916c:	4798      	blx	r3
	cpu_irq_enter_critical();
    916e:	4b31      	ldr	r3, [pc, #196]	; (9234 <D_Nv_Write_Impl+0x140>)
    9170:	4798      	blx	r3
    error_code = nvm_write_buffer(pageStart, page_buf, NVMCTRL_PAGE_SIZE);
    9172:	4e31      	ldr	r6, [pc, #196]	; (9238 <D_Nv_Write_Impl+0x144>)
    9174:	2240      	movs	r2, #64	; 0x40
    9176:	a902      	add	r1, sp, #8
    9178:	0020      	movs	r0, r4
    917a:	47b0      	blx	r6
  } while (error_code == STATUS_BUSY);
    917c:	2805      	cmp	r0, #5
    917e:	d0f9      	beq.n	9174 <D_Nv_Write_Impl+0x80>
	cpu_irq_leave_critical();
    9180:	4b2e      	ldr	r3, [pc, #184]	; (923c <D_Nv_Write_Impl+0x148>)
    9182:	4798      	blx	r3
  numberOfBytes -= numberOfPageBytes;
    9184:	4653      	mov	r3, sl
    9186:	465a      	mov	r2, fp
    9188:	1a9e      	subs	r6, r3, r2
    918a:	b2b6      	uxth	r6, r6
  address += numberOfPageBytes;
    918c:	19ec      	adds	r4, r5, r7
  pBuffer += numberOfPageBytes;
    918e:	9b01      	ldr	r3, [sp, #4]
    9190:	4699      	mov	r9, r3
    9192:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    9194:	2e00      	cmp	r6, #0
    9196:	d03b      	beq.n	9210 <D_Nv_Write_Impl+0x11c>
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    9198:	4b24      	ldr	r3, [pc, #144]	; (922c <D_Nv_Write_Impl+0x138>)
    919a:	469b      	mov	fp, r3
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    919c:	4b24      	ldr	r3, [pc, #144]	; (9230 <D_Nv_Write_Impl+0x13c>)
    919e:	4698      	mov	r8, r3
    91a0:	e031      	b.n	9206 <D_Nv_Write_Impl+0x112>
  assert(numberOfBytes);
    91a2:	4b27      	ldr	r3, [pc, #156]	; (9240 <D_Nv_Write_Impl+0x14c>)
    91a4:	4a27      	ldr	r2, [pc, #156]	; (9244 <D_Nv_Write_Impl+0x150>)
    91a6:	218a      	movs	r1, #138	; 0x8a
    91a8:	4827      	ldr	r0, [pc, #156]	; (9248 <D_Nv_Write_Impl+0x154>)
    91aa:	4c28      	ldr	r4, [pc, #160]	; (924c <D_Nv_Write_Impl+0x158>)
    91ac:	47a0      	blx	r4
  assert(address <= D_NV_MEMORY_END);
    91ae:	4b28      	ldr	r3, [pc, #160]	; (9250 <D_Nv_Write_Impl+0x15c>)
    91b0:	4a24      	ldr	r2, [pc, #144]	; (9244 <D_Nv_Write_Impl+0x150>)
    91b2:	218b      	movs	r1, #139	; 0x8b
    91b4:	4824      	ldr	r0, [pc, #144]	; (9248 <D_Nv_Write_Impl+0x154>)
    91b6:	4c25      	ldr	r4, [pc, #148]	; (924c <D_Nv_Write_Impl+0x158>)
    91b8:	47a0      	blx	r4
  assert((address + numberOfBytes) <= (D_NV_MEMORY_END + 1U));
    91ba:	4b26      	ldr	r3, [pc, #152]	; (9254 <D_Nv_Write_Impl+0x160>)
    91bc:	4a21      	ldr	r2, [pc, #132]	; (9244 <D_Nv_Write_Impl+0x150>)
    91be:	218c      	movs	r1, #140	; 0x8c
    91c0:	4821      	ldr	r0, [pc, #132]	; (9248 <D_Nv_Write_Impl+0x154>)
    91c2:	4c22      	ldr	r4, [pc, #136]	; (924c <D_Nv_Write_Impl+0x158>)
    91c4:	47a0      	blx	r4
  assert((offset + numberOfBytes) <= D_NV_SECTOR_SIZE);
    91c6:	4b24      	ldr	r3, [pc, #144]	; (9258 <D_Nv_Write_Impl+0x164>)
    91c8:	4a1e      	ldr	r2, [pc, #120]	; (9244 <D_Nv_Write_Impl+0x150>)
    91ca:	218d      	movs	r1, #141	; 0x8d
    91cc:	481e      	ldr	r0, [pc, #120]	; (9248 <D_Nv_Write_Impl+0x154>)
    91ce:	4c1f      	ldr	r4, [pc, #124]	; (924c <D_Nv_Write_Impl+0x158>)
    91d0:	47a0      	blx	r4
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    91d2:	b29f      	uxth	r7, r3
    memset (page_buf, 0xFF, NVMCTRL_PAGE_SIZE);
    91d4:	2240      	movs	r2, #64	; 0x40
    91d6:	21ff      	movs	r1, #255	; 0xff
    91d8:	a802      	add	r0, sp, #8
    91da:	47d8      	blx	fp
    memcpy (&page_buf[pageOffset], pBuffer, numberOfPageBytes);
    91dc:	003a      	movs	r2, r7
    91de:	4649      	mov	r1, r9
    91e0:	9800      	ldr	r0, [sp, #0]
    91e2:	47c0      	blx	r8
	cpu_irq_enter_critical();
    91e4:	4b13      	ldr	r3, [pc, #76]	; (9234 <D_Nv_Write_Impl+0x140>)
    91e6:	4798      	blx	r3
      error_code = nvm_write_buffer(address, page_buf, NVMCTRL_PAGE_SIZE);
    91e8:	4d13      	ldr	r5, [pc, #76]	; (9238 <D_Nv_Write_Impl+0x144>)
    91ea:	2240      	movs	r2, #64	; 0x40
    91ec:	a902      	add	r1, sp, #8
    91ee:	0020      	movs	r0, r4
    91f0:	47a8      	blx	r5
    } while (error_code == STATUS_BUSY);
    91f2:	2805      	cmp	r0, #5
    91f4:	d0f9      	beq.n	91ea <D_Nv_Write_Impl+0xf6>
	cpu_irq_leave_critical();
    91f6:	4b11      	ldr	r3, [pc, #68]	; (923c <D_Nv_Write_Impl+0x148>)
    91f8:	4798      	blx	r3
    numberOfBytes -= numberOfPageBytes;
    91fa:	1bf6      	subs	r6, r6, r7
    91fc:	b2b6      	uxth	r6, r6
    address += numberOfPageBytes;
    91fe:	19e4      	adds	r4, r4, r7
    pBuffer += numberOfPageBytes;
    9200:	44b9      	add	r9, r7
  while (0U < numberOfBytes)
    9202:	2e00      	cmp	r6, #0
    9204:	d004      	beq.n	9210 <D_Nv_Write_Impl+0x11c>
    numberOfPageBytes = MIN(NVMCTRL_PAGE_SIZE, numberOfBytes);
    9206:	1c33      	adds	r3, r6, #0
    9208:	2e40      	cmp	r6, #64	; 0x40
    920a:	d9e2      	bls.n	91d2 <D_Nv_Write_Impl+0xde>
    920c:	2340      	movs	r3, #64	; 0x40
    920e:	e7e0      	b.n	91d2 <D_Nv_Write_Impl+0xde>
}
    9210:	b013      	add	sp, #76	; 0x4c
    9212:	bc3c      	pop	{r2, r3, r4, r5}
    9214:	4690      	mov	r8, r2
    9216:	4699      	mov	r9, r3
    9218:	46a2      	mov	sl, r4
    921a:	46ab      	mov	fp, r5
    921c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    921e:	46c0      	nop			; (mov r8, r8)
    9220:	00002100 	.word	0x00002100
    9224:	00006100 	.word	0x00006100
    9228:	200001d0 	.word	0x200001d0
    922c:	00011e49 	.word	0x00011e49
    9230:	00011e37 	.word	0x00011e37
    9234:	00006265 	.word	0x00006265
    9238:	00006919 	.word	0x00006919
    923c:	000062a5 	.word	0x000062a5
    9240:	00013284 	.word	0x00013284
    9244:	000133e0 	.word	0x000133e0
    9248:	00013294 	.word	0x00013294
    924c:	00011d75 	.word	0x00011d75
    9250:	000132d4 	.word	0x000132d4
    9254:	000132f0 	.word	0x000132f0
    9258:	00013324 	.word	0x00013324

0000925c <D_Nv_EraseSector_Impl>:
{
    925c:	b570      	push	{r4, r5, r6, lr}
  uint32_t address = D_NV_MEMORY_START + (uint32_t)(sector - D_NV_FIRST_SECTOR) * D_NV_SECTOR_SIZE;
    925e:	0344      	lsls	r4, r0, #13
    9260:	480c      	ldr	r0, [pc, #48]	; (9294 <D_Nv_EraseSector_Impl+0x38>)
    9262:	1824      	adds	r4, r4, r0
  address &= ~(NVMCTRL_ROW_SIZE - 1);
    9264:	23ff      	movs	r3, #255	; 0xff
    9266:	439c      	bics	r4, r3
  assert(address <= D_NV_MEMORY_END);
    9268:	4b0b      	ldr	r3, [pc, #44]	; (9298 <D_Nv_EraseSector_Impl+0x3c>)
    926a:	3b01      	subs	r3, #1
    926c:	2280      	movs	r2, #128	; 0x80
    926e:	0192      	lsls	r2, r2, #6
    9270:	18a6      	adds	r6, r4, r2
    9272:	429c      	cmp	r4, r3
    9274:	d807      	bhi.n	9286 <D_Nv_EraseSector_Impl+0x2a>
    nvm_erase_row (address);
    9276:	4d09      	ldr	r5, [pc, #36]	; (929c <D_Nv_EraseSector_Impl+0x40>)
    9278:	0020      	movs	r0, r4
    927a:	47a8      	blx	r5
    address += NVMCTRL_ROW_SIZE;
    927c:	3401      	adds	r4, #1
    927e:	34ff      	adds	r4, #255	; 0xff
  for (uint8_t i = 0U; i < (D_NV_SECTOR_SIZE / NVMCTRL_ROW_SIZE); i++)
    9280:	42b4      	cmp	r4, r6
    9282:	d1f9      	bne.n	9278 <D_Nv_EraseSector_Impl+0x1c>
}
    9284:	bd70      	pop	{r4, r5, r6, pc}
  assert(address <= D_NV_MEMORY_END);
    9286:	4b06      	ldr	r3, [pc, #24]	; (92a0 <D_Nv_EraseSector_Impl+0x44>)
    9288:	4a06      	ldr	r2, [pc, #24]	; (92a4 <D_Nv_EraseSector_Impl+0x48>)
    928a:	21c2      	movs	r1, #194	; 0xc2
    928c:	4806      	ldr	r0, [pc, #24]	; (92a8 <D_Nv_EraseSector_Impl+0x4c>)
    928e:	4c07      	ldr	r4, [pc, #28]	; (92ac <D_Nv_EraseSector_Impl+0x50>)
    9290:	47a0      	blx	r4
    9292:	46c0      	nop			; (mov r8, r8)
    9294:	00002100 	.word	0x00002100
    9298:	00006100 	.word	0x00006100
    929c:	000069f1 	.word	0x000069f1
    92a0:	000132d4 	.word	0x000132d4
    92a4:	000133f0 	.word	0x000133f0
    92a8:	00013294 	.word	0x00013294
    92ac:	00011d75 	.word	0x00011d75

000092b0 <D_Nv_IsEmpty_Impl>:
    \param numberOfBytes The number of bytes to check
    \returns true if the range is empty, FALSE otherwise.
    \note Sector crossing is not permitted
*/
bool D_Nv_IsEmpty(uint8_t sector, uint16_t offset, D_Nv_Size_t numberOfBytes)
{
    92b0:	b510      	push	{r4, lr}
    92b2:	0013      	movs	r3, r2
  return CompareData(sector, offset, NULL, numberOfBytes);
    92b4:	2200      	movs	r2, #0
    92b6:	4c01      	ldr	r4, [pc, #4]	; (92bc <D_Nv_IsEmpty_Impl+0xc>)
    92b8:	47a0      	blx	r4
}
    92ba:	bd10      	pop	{r4, pc}
    92bc:	00008f51 	.word	0x00008f51

000092c0 <D_Nv_IsEqual_Impl>:
    \param[in] pBuffer The start address of the buffer that contains the data to compare with
    \param numberOfBytes The number of bytes to compare
    \note offset+numberOfBytes must be <= D_NV_SECTOR_SIZE (meaning sector crossing is not permitted)
*/
bool D_Nv_IsEqual(uint8_t sector, uint16_t offset, uint8_t *pBuffer, D_Nv_Size_t numberOfBytes)
{
    92c0:	b510      	push	{r4, lr}
  return CompareData(sector, offset, pBuffer, numberOfBytes);
    92c2:	4c01      	ldr	r4, [pc, #4]	; (92c8 <D_Nv_IsEqual_Impl+0x8>)
    92c4:	47a0      	blx	r4
}
    92c6:	bd10      	pop	{r4, pc}
    92c8:	00008f51 	.word	0x00008f51

000092cc <PowerSupplyTooLow>:
/** Check the power supply.
    \returns TRUE if the power supply is too low, FALSE when the the power
             supply is OK or when there is no callback installed.
*/
static bool PowerSupplyTooLow()
{
    92cc:	b510      	push	{r4, lr}
    bool result = false;
    if ( s_powerSupplyCheckingFunction != NULL )
    92ce:	4b05      	ldr	r3, [pc, #20]	; (92e4 <PowerSupplyTooLow+0x18>)
    92d0:	681b      	ldr	r3, [r3, #0]
    92d2:	2b00      	cmp	r3, #0
    92d4:	d004      	beq.n	92e0 <PowerSupplyTooLow+0x14>
    {
        if ( !s_powerSupplyCheckingFunction() )
    92d6:	4798      	blx	r3
    92d8:	2301      	movs	r3, #1
    92da:	4058      	eors	r0, r3
    92dc:	b2c0      	uxtb	r0, r0
        {
            result = true;
        }
    }
    return result;
}
    92de:	bd10      	pop	{r4, pc}
    bool result = false;
    92e0:	2000      	movs	r0, #0
    92e2:	e7fc      	b.n	92de <PowerSupplyTooLow+0x12>
    92e4:	2000034c 	.word	0x2000034c

000092e8 <UpdateSectorHead>:
*/

static void UpdateSectorHead(uint16_t increment, ItemAlignment_t itemAlignment )
{
    // Adjust the sector head according to the increment and alignment given
    switch(itemAlignment)
    92e8:	2901      	cmp	r1, #1
    92ea:	d009      	beq.n	9300 <UpdateSectorHead+0x18>
    92ec:	2900      	cmp	r1, #0
    92ee:	d002      	beq.n	92f6 <UpdateSectorHead+0xe>
    92f0:	2902      	cmp	r1, #2
    92f2:	d00d      	beq.n	9310 <UpdateSectorHead+0x28>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
           break;
        default:
           break;
    }
}
    92f4:	4770      	bx	lr
           s_sectorHead = (s_sectorHead + increment);
    92f6:	4b0a      	ldr	r3, [pc, #40]	; (9320 <UpdateSectorHead+0x38>)
    92f8:	881a      	ldrh	r2, [r3, #0]
    92fa:	1880      	adds	r0, r0, r2
    92fc:	8018      	strh	r0, [r3, #0]
           break;
    92fe:	e7f9      	b.n	92f4 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x000Fu) & 0xFFF0u;
    9300:	4a07      	ldr	r2, [pc, #28]	; (9320 <UpdateSectorHead+0x38>)
    9302:	8813      	ldrh	r3, [r2, #0]
    9304:	330f      	adds	r3, #15
    9306:	18c0      	adds	r0, r0, r3
    9308:	230f      	movs	r3, #15
    930a:	4398      	bics	r0, r3
    930c:	8010      	strh	r0, [r2, #0]
           break;
    930e:	e7f1      	b.n	92f4 <UpdateSectorHead+0xc>
           s_sectorHead = (s_sectorHead + increment + 0x003Fu) & 0xFFC0u;
    9310:	4a03      	ldr	r2, [pc, #12]	; (9320 <UpdateSectorHead+0x38>)
    9312:	8813      	ldrh	r3, [r2, #0]
    9314:	333f      	adds	r3, #63	; 0x3f
    9316:	18c0      	adds	r0, r0, r3
    9318:	233f      	movs	r3, #63	; 0x3f
    931a:	4398      	bics	r0, r3
    931c:	8010      	strh	r0, [r2, #0]
}
    931e:	e7e9      	b.n	92f4 <UpdateSectorHead+0xc>
    9320:	20000352 	.word	0x20000352

00009324 <ComputeCrc>:
    // item not found
    return 0x0000u;
}

static uint16_t ComputeCrc(uint8_t* pData, uint16_t length, uint16_t crc)
{
    9324:	b530      	push	{r4, r5, lr}
    for ( /* empty */ ; length != 0u; length-- )
    9326:	2900      	cmp	r1, #0
    9328:	d019      	beq.n	935e <ComputeCrc+0x3a>
    {
        uint8_t x;
        uint8_t data;

        if (pData == NULL)
            data = 0xFF;
    932a:	24ff      	movs	r4, #255	; 0xff
    932c:	e013      	b.n	9356 <ComputeCrc+0x32>
    932e:	0023      	movs	r3, r4
        else
            data = *pData;

        x = (uint8_t) ((crc >> 8) ^ data);
    9330:	0a15      	lsrs	r5, r2, #8
    9332:	406b      	eors	r3, r5
        x = x ^ (x >> 4);
    9334:	091d      	lsrs	r5, r3, #4
    9336:	406b      	eors	r3, r5
        crc = (crc << 8) ^ ((uint16_t) x << 12) ^ ((uint16_t) x << 5) ^ (uint16_t) x;
    9338:	0212      	lsls	r2, r2, #8
    933a:	405a      	eors	r2, r3
    933c:	031d      	lsls	r5, r3, #12
    933e:	406a      	eors	r2, r5
    9340:	015b      	lsls	r3, r3, #5
    9342:	405a      	eors	r2, r3
    9344:	b292      	uxth	r2, r2

        if ( pData != NULL )
          pData++;
    9346:	0003      	movs	r3, r0
    9348:	1e5d      	subs	r5, r3, #1
    934a:	41ab      	sbcs	r3, r5
    934c:	18c0      	adds	r0, r0, r3
    for ( /* empty */ ; length != 0u; length-- )
    934e:	3901      	subs	r1, #1
    9350:	b289      	uxth	r1, r1
    9352:	2900      	cmp	r1, #0
    9354:	d003      	beq.n	935e <ComputeCrc+0x3a>
        if (pData == NULL)
    9356:	2800      	cmp	r0, #0
    9358:	d0e9      	beq.n	932e <ComputeCrc+0xa>
            data = *pData;
    935a:	7803      	ldrb	r3, [r0, #0]
    935c:	e7e8      	b.n	9330 <ComputeCrc+0xc>
    }

    return crc;
}
    935e:	0010      	movs	r0, r2
    9360:	bd30      	pop	{r4, r5, pc}
    9362:	Address 0x00009362 is out of bounds.


00009364 <GatherData>:
       be copied to the flash memory \ref s_sectorHead in sector \ref s_sector.

*/

static bool GatherData(uint8_t sourceSector, uint16_t lastBlockPointer, uint16_t offset, uint16_t length, void* pData)
{
    9364:	b5f0      	push	{r4, r5, r6, r7, lr}
    9366:	46de      	mov	lr, fp
    9368:	4657      	mov	r7, sl
    936a:	b580      	push	{r7, lr}
    936c:	b089      	sub	sp, #36	; 0x24
    936e:	9001      	str	r0, [sp, #4]
    9370:	9102      	str	r1, [sp, #8]
    9372:	4693      	mov	fp, r2
    uint16_t blockStart;
    uint16_t blockEnd;
    uint16_t count;

    // prepare the correct pointer
    if ( pData != NULL )
    9374:	9a10      	ldr	r2, [sp, #64]	; 0x40
    9376:	2a00      	cmp	r2, #0
    9378:	d00d      	beq.n	9396 <GatherData+0x32>
    {
        pDestination = (uint8_t*) pData + length;
    937a:	4692      	mov	sl, r2
    937c:	449a      	add	sl, r3

    // [readStart, readEnd> is the range of data that can be read during the current
    // pass over the blocks (the range includes readStart, but not readEnd).
    // it is initialized with the requested range
    uint16_t readStart = offset;
    uint16_t readEnd = offset + length;
    937e:	445b      	add	r3, fp
    9380:	b29d      	uxth	r5, r3

    // continue until we have all the data that was requested
    while ( readStart != readEnd )
    9382:	465e      	mov	r6, fp
    9384:	9c02      	ldr	r4, [sp, #8]
            sourcePointer -= count;
            pDestination -= count;
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
        }
    }
    return true;
    9386:	2001      	movs	r0, #1
    while ( readStart != readEnd )
    9388:	45ab      	cmp	fp, r5
    938a:	d03e      	beq.n	940a <GatherData+0xa6>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    938c:	4f22      	ldr	r7, [pc, #136]	; (9418 <GatherData+0xb4>)
            if ( currentBlockPointer == 0x0000u )
    938e:	2c00      	cmp	r4, #0
    9390:	d108      	bne.n	93a4 <GatherData+0x40>
                return false;
    9392:	2000      	movs	r0, #0
    9394:	e039      	b.n	940a <GatherData+0xa6>
    uint8_t* pDestination = NULL;
    9396:	2200      	movs	r2, #0
    9398:	4692      	mov	sl, r2
    939a:	e7f0      	b.n	937e <GatherData+0x1a>
            currentBlockPointer = blockHeader.previousBlock;
    939c:	ab04      	add	r3, sp, #16
    939e:	895c      	ldrh	r4, [r3, #10]
            if ( currentBlockPointer == 0x0000u )
    93a0:	2c00      	cmp	r4, #0
    93a2:	d031      	beq.n	9408 <GatherData+0xa4>
            D_Nv_Read(sourceSector, currentBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    93a4:	2310      	movs	r3, #16
    93a6:	aa04      	add	r2, sp, #16
    93a8:	0021      	movs	r1, r4
    93aa:	9801      	ldr	r0, [sp, #4]
    93ac:	47b8      	blx	r7
            blockStart = blockHeader.blockOffset;
    93ae:	ab04      	add	r3, sp, #16
    93b0:	889a      	ldrh	r2, [r3, #4]
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    93b2:	42aa      	cmp	r2, r5
    93b4:	d2f2      	bcs.n	939c <GatherData+0x38>
            blockEnd = blockHeader.blockOffset + blockHeader.blockLength;
    93b6:	88db      	ldrh	r3, [r3, #6]
    93b8:	18d3      	adds	r3, r2, r3
    93ba:	b29b      	uxth	r3, r3
            if ( (readEnd <= blockStart) || (readStart >= blockEnd) )
    93bc:	42b3      	cmp	r3, r6
    93be:	d9ed      	bls.n	939c <GatherData+0x38>
            else if ( readEnd > blockEnd )
    93c0:	42ab      	cmp	r3, r5
    93c2:	d201      	bcs.n	93c8 <GatherData+0x64>
                readStart = blockEnd;
    93c4:	001e      	movs	r6, r3
    93c6:	e7e9      	b.n	939c <GatherData+0x38>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    93c8:	1aa9      	subs	r1, r5, r2
    93ca:	b289      	uxth	r1, r1
        if ( readStart < blockStart )
    93cc:	42b2      	cmp	r2, r6
    93ce:	d915      	bls.n	93fc <GatherData+0x98>
            currentBlockPointer = blockHeader.previousBlock;
    93d0:	ab04      	add	r3, sp, #16
    93d2:	895b      	ldrh	r3, [r3, #10]
    93d4:	9303      	str	r3, [sp, #12]
            count = readEnd - blockStart;
    93d6:	000b      	movs	r3, r1
        readEnd -= count;
    93d8:	1aed      	subs	r5, r5, r3
    93da:	b2ad      	uxth	r5, r5
        if ( pDestination != NULL)
    93dc:	4652      	mov	r2, sl
    93de:	2a00      	cmp	r2, #0
    93e0:	d008      	beq.n	93f4 <GatherData+0x90>
        uint16_t sourcePointer = (currentBlockPointer + BLOCK_HEADER_SIZE) + (readEnd - blockStart);
    93e2:	3410      	adds	r4, #16
    93e4:	1909      	adds	r1, r1, r4
            pDestination -= count;
    93e6:	1ad2      	subs	r2, r2, r3
    93e8:	4692      	mov	sl, r2
            sourcePointer -= count;
    93ea:	1ac9      	subs	r1, r1, r3
            D_Nv_Read(sourceSector, sourcePointer, (uint8_t*)pDestination, count);
    93ec:	b289      	uxth	r1, r1
    93ee:	9801      	ldr	r0, [sp, #4]
    93f0:	4c09      	ldr	r4, [pc, #36]	; (9418 <GatherData+0xb4>)
    93f2:	47a0      	blx	r4
    while ( readStart != readEnd )
    93f4:	42ae      	cmp	r6, r5
    93f6:	d00d      	beq.n	9414 <GatherData+0xb0>
    93f8:	9c03      	ldr	r4, [sp, #12]
    93fa:	e7c8      	b.n	938e <GatherData+0x2a>
            count = readEnd - readStart;
    93fc:	1bab      	subs	r3, r5, r6
    93fe:	b29b      	uxth	r3, r3
            readStart = offset;
    9400:	465e      	mov	r6, fp
            currentBlockPointer = lastBlockPointer;
    9402:	9a02      	ldr	r2, [sp, #8]
    9404:	9203      	str	r2, [sp, #12]
    9406:	e7e7      	b.n	93d8 <GatherData+0x74>
                return false;
    9408:	2000      	movs	r0, #0
}
    940a:	b009      	add	sp, #36	; 0x24
    940c:	bc0c      	pop	{r2, r3}
    940e:	4692      	mov	sl, r2
    9410:	469b      	mov	fp, r3
    9412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return true;
    9414:	2001      	movs	r0, #1
    9416:	e7f8      	b.n	940a <GatherData+0xa6>
    9418:	0000907d 	.word	0x0000907d

0000941c <ComputeDataCrc>:
{
    941c:	b5f0      	push	{r4, r5, r6, r7, lr}
    941e:	46de      	mov	lr, fp
    9420:	4647      	mov	r7, r8
    9422:	b580      	push	{r7, lr}
    9424:	b087      	sub	sp, #28
    9426:	9004      	str	r0, [sp, #16]
    9428:	9105      	str	r1, [sp, #20]
    length = pBlockHeader->blockLength;
    942a:	7995      	ldrb	r5, [r2, #6]
    942c:	79d3      	ldrb	r3, [r2, #7]
    942e:	021b      	lsls	r3, r3, #8
    9430:	431d      	orrs	r5, r3
    offset = pBlockHeader->blockOffset;
    9432:	7917      	ldrb	r7, [r2, #4]
    9434:	7953      	ldrb	r3, [r2, #5]
    9436:	021b      	lsls	r3, r3, #8
    9438:	431f      	orrs	r7, r3
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    943a:	0a2c      	lsrs	r4, r5, #8
    943c:	b264      	sxtb	r4, r4
    943e:	2c00      	cmp	r4, #0
    9440:	db2f      	blt.n	94a2 <ComputeDataCrc+0x86>
    9442:	4b1c      	ldr	r3, [pc, #112]	; (94b4 <ComputeDataCrc+0x98>)
    9444:	9303      	str	r3, [sp, #12]
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    9446:	4b1c      	ldr	r3, [pc, #112]	; (94b8 <ComputeDataCrc+0x9c>)
    9448:	4698      	mov	r8, r3
    944a:	e011      	b.n	9470 <ComputeDataCrc+0x54>
        if (dataLength == 0)
    944c:	2d00      	cmp	r5, #0
    944e:	d02a      	beq.n	94a6 <ComputeDataCrc+0x8a>
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    9450:	4b1a      	ldr	r3, [pc, #104]	; (94bc <ComputeDataCrc+0xa0>)
    9452:	9300      	str	r3, [sp, #0]
    9454:	002b      	movs	r3, r5
    9456:	003a      	movs	r2, r7
    9458:	9905      	ldr	r1, [sp, #20]
    945a:	9804      	ldr	r0, [sp, #16]
    945c:	4e18      	ldr	r6, [pc, #96]	; (94c0 <ComputeDataCrc+0xa4>)
    945e:	47b0      	blx	r6
    9460:	2800      	cmp	r0, #0
    9462:	d020      	beq.n	94a6 <ComputeDataCrc+0x8a>
    9464:	0029      	movs	r1, r5
    9466:	e015      	b.n	9494 <ComputeDataCrc+0x78>
    9468:	3c01      	subs	r4, #1
    946a:	b264      	sxtb	r4, r4
    for(int8_t i= (length/sizeof(dataBlock)); i>=0; i--)
    946c:	1c63      	adds	r3, r4, #1
    946e:	d01a      	beq.n	94a6 <ComputeDataCrc+0x8a>
        if (i)
    9470:	2c00      	cmp	r4, #0
    9472:	d0eb      	beq.n	944c <ComputeDataCrc+0x30>
            length = length - sizeof(dataBlock);
    9474:	3d01      	subs	r5, #1
    9476:	3dff      	subs	r5, #255	; 0xff
    9478:	b2ad      	uxth	r5, r5
        if (GatherData(sourceSector, blockPointer, offset, dataLength, dataBlock))
    947a:	4b10      	ldr	r3, [pc, #64]	; (94bc <ComputeDataCrc+0xa0>)
    947c:	9300      	str	r3, [sp, #0]
    947e:	2380      	movs	r3, #128	; 0x80
    9480:	005b      	lsls	r3, r3, #1
    9482:	003a      	movs	r2, r7
    9484:	9905      	ldr	r1, [sp, #20]
    9486:	9804      	ldr	r0, [sp, #16]
    9488:	4e0d      	ldr	r6, [pc, #52]	; (94c0 <ComputeDataCrc+0xa4>)
    948a:	47b0      	blx	r6
    948c:	2800      	cmp	r0, #0
    948e:	d0eb      	beq.n	9468 <ComputeDataCrc+0x4c>
            dataLength = sizeof(dataBlock);
    9490:	2180      	movs	r1, #128	; 0x80
    9492:	0049      	lsls	r1, r1, #1
            offset = offset+dataLength;
    9494:	187f      	adds	r7, r7, r1
    9496:	b2bf      	uxth	r7, r7
            crc = ComputeCrc(((uint8_t*) &dataBlock), dataLength, crc);
    9498:	9a03      	ldr	r2, [sp, #12]
    949a:	4808      	ldr	r0, [pc, #32]	; (94bc <ComputeDataCrc+0xa0>)
    949c:	47c0      	blx	r8
    949e:	9003      	str	r0, [sp, #12]
    94a0:	e7e2      	b.n	9468 <ComputeDataCrc+0x4c>
    uint16_t crc = 0xFFFFu;
    94a2:	4b04      	ldr	r3, [pc, #16]	; (94b4 <ComputeDataCrc+0x98>)
    94a4:	9303      	str	r3, [sp, #12]
}
    94a6:	9803      	ldr	r0, [sp, #12]
    94a8:	b007      	add	sp, #28
    94aa:	bc0c      	pop	{r2, r3}
    94ac:	4690      	mov	r8, r2
    94ae:	469b      	mov	fp, r3
    94b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94b2:	46c0      	nop			; (mov r8, r8)
    94b4:	0000ffff 	.word	0x0000ffff
    94b8:	00009325 	.word	0x00009325
    94bc:	20000204 	.word	0x20000204
    94c0:	00009365 	.word	0x00009365

000094c4 <FindItemCache>:
{
    94c4:	b570      	push	{r4, r5, r6, lr}
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    94c6:	4b16      	ldr	r3, [pc, #88]	; (9520 <FindItemCache+0x5c>)
    94c8:	781c      	ldrb	r4, [r3, #0]
    94ca:	2c00      	cmp	r4, #0
    94cc:	d026      	beq.n	951c <FindItemCache+0x58>
        if ( cache->id == id )
    94ce:	4b15      	ldr	r3, [pc, #84]	; (9524 <FindItemCache+0x60>)
    94d0:	881b      	ldrh	r3, [r3, #0]
    94d2:	4283      	cmp	r3, r0
    94d4:	d016      	beq.n	9504 <FindItemCache+0x40>
    94d6:	2301      	movs	r3, #1
    94d8:	4e12      	ldr	r6, [pc, #72]	; (9524 <FindItemCache+0x60>)
    for ( uint8_t cacheIndex = 0u; cacheIndex < s_itemCount; cacheIndex++ )
    94da:	b2da      	uxtb	r2, r3
    94dc:	4294      	cmp	r4, r2
    94de:	d91b      	bls.n	9518 <FindItemCache+0x54>
        Item_t *cache = &s_itemCache[cacheIndex];
    94e0:	001d      	movs	r5, r3
        if ( cache->id == id )
    94e2:	1c59      	adds	r1, r3, #1
    94e4:	009a      	lsls	r2, r3, #2
    94e6:	5ab2      	ldrh	r2, [r6, r2]
    94e8:	4282      	cmp	r2, r0
    94ea:	d001      	beq.n	94f0 <FindItemCache+0x2c>
    94ec:	000b      	movs	r3, r1
    94ee:	e7f4      	b.n	94da <FindItemCache+0x16>
        Item_t *cache = &s_itemCache[cacheIndex];
    94f0:	009b      	lsls	r3, r3, #2
    94f2:	480c      	ldr	r0, [pc, #48]	; (9524 <FindItemCache+0x60>)
    94f4:	18c0      	adds	r0, r0, r3
            assert(cache->lastBlock != 0x0000);
    94f6:	00ad      	lsls	r5, r5, #2
    94f8:	4b0a      	ldr	r3, [pc, #40]	; (9524 <FindItemCache+0x60>)
    94fa:	195d      	adds	r5, r3, r5
    94fc:	886b      	ldrh	r3, [r5, #2]
    94fe:	2b00      	cmp	r3, #0
    9500:	d003      	beq.n	950a <FindItemCache+0x46>
}
    9502:	bd70      	pop	{r4, r5, r6, pc}
        Item_t *cache = &s_itemCache[cacheIndex];
    9504:	4807      	ldr	r0, [pc, #28]	; (9524 <FindItemCache+0x60>)
    9506:	2500      	movs	r5, #0
    9508:	e7f5      	b.n	94f6 <FindItemCache+0x32>
            assert(cache->lastBlock != 0x0000);
    950a:	4b07      	ldr	r3, [pc, #28]	; (9528 <FindItemCache+0x64>)
    950c:	4a07      	ldr	r2, [pc, #28]	; (952c <FindItemCache+0x68>)
    950e:	218c      	movs	r1, #140	; 0x8c
    9510:	31ff      	adds	r1, #255	; 0xff
    9512:	4807      	ldr	r0, [pc, #28]	; (9530 <FindItemCache+0x6c>)
    9514:	4c07      	ldr	r4, [pc, #28]	; (9534 <FindItemCache+0x70>)
    9516:	47a0      	blx	r4
    return NULL;
    9518:	2000      	movs	r0, #0
    951a:	e7f2      	b.n	9502 <FindItemCache+0x3e>
    951c:	2000      	movs	r0, #0
    951e:	e7f0      	b.n	9502 <FindItemCache+0x3e>
    9520:	20000348 	.word	0x20000348
    9524:	20000320 	.word	0x20000320
    9528:	00013484 	.word	0x00013484
    952c:	0001356c 	.word	0x0001356c
    9530:	000134a0 	.word	0x000134a0
    9534:	00011d75 	.word	0x00011d75

00009538 <FindItem>:
{
    9538:	b510      	push	{r4, lr}
    Item_t *cache = FindItemCache(id);
    953a:	4b05      	ldr	r3, [pc, #20]	; (9550 <FindItem+0x18>)
    953c:	4798      	blx	r3
    if (cache)
    953e:	2800      	cmp	r0, #0
    9540:	d004      	beq.n	954c <FindItem+0x14>
        return cache->lastBlock;
    9542:	7883      	ldrb	r3, [r0, #2]
    9544:	78c0      	ldrb	r0, [r0, #3]
    9546:	0200      	lsls	r0, r0, #8
    9548:	4318      	orrs	r0, r3
}
    954a:	bd10      	pop	{r4, pc}
    return 0x0000u;
    954c:	2000      	movs	r0, #0
    954e:	e7fc      	b.n	954a <FindItem+0x12>
    9550:	000094c5 	.word	0x000094c5

00009554 <CreateItemCache>:
{
    9554:	b510      	push	{r4, lr}
    9556:	0004      	movs	r4, r0
    assert(FindItemCache(id) == NULL);
    9558:	4b0e      	ldr	r3, [pc, #56]	; (9594 <CreateItemCache+0x40>)
    955a:	4798      	blx	r3
    955c:	2800      	cmp	r0, #0
    955e:	d10b      	bne.n	9578 <CreateItemCache+0x24>
    assert(s_itemCount < MAX_ITEM_COUNT);
    9560:	4b0d      	ldr	r3, [pc, #52]	; (9598 <CreateItemCache+0x44>)
    9562:	781b      	ldrb	r3, [r3, #0]
    9564:	2b09      	cmp	r3, #9
    9566:	d80e      	bhi.n	9586 <CreateItemCache+0x32>
    Item_t *cache = &s_itemCache[s_itemCount++];
    9568:	1c59      	adds	r1, r3, #1
    956a:	4a0b      	ldr	r2, [pc, #44]	; (9598 <CreateItemCache+0x44>)
    956c:	7011      	strb	r1, [r2, #0]
    cache->id = id;
    956e:	480b      	ldr	r0, [pc, #44]	; (959c <CreateItemCache+0x48>)
    9570:	009b      	lsls	r3, r3, #2
    9572:	521c      	strh	r4, [r3, r0]
    Item_t *cache = &s_itemCache[s_itemCount++];
    9574:	18c0      	adds	r0, r0, r3
}
    9576:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) == NULL);
    9578:	4b09      	ldr	r3, [pc, #36]	; (95a0 <CreateItemCache+0x4c>)
    957a:	4a0a      	ldr	r2, [pc, #40]	; (95a4 <CreateItemCache+0x50>)
    957c:	21cc      	movs	r1, #204	; 0xcc
    957e:	0049      	lsls	r1, r1, #1
    9580:	4809      	ldr	r0, [pc, #36]	; (95a8 <CreateItemCache+0x54>)
    9582:	4c0a      	ldr	r4, [pc, #40]	; (95ac <CreateItemCache+0x58>)
    9584:	47a0      	blx	r4
    assert(s_itemCount < MAX_ITEM_COUNT);
    9586:	4b0a      	ldr	r3, [pc, #40]	; (95b0 <CreateItemCache+0x5c>)
    9588:	4a06      	ldr	r2, [pc, #24]	; (95a4 <CreateItemCache+0x50>)
    958a:	219a      	movs	r1, #154	; 0x9a
    958c:	31ff      	adds	r1, #255	; 0xff
    958e:	4806      	ldr	r0, [pc, #24]	; (95a8 <CreateItemCache+0x54>)
    9590:	4c06      	ldr	r4, [pc, #24]	; (95ac <CreateItemCache+0x58>)
    9592:	47a0      	blx	r4
    9594:	000094c5 	.word	0x000094c5
    9598:	20000348 	.word	0x20000348
    959c:	20000320 	.word	0x20000320
    95a0:	0001342c 	.word	0x0001342c
    95a4:	0001357c 	.word	0x0001357c
    95a8:	000134a0 	.word	0x000134a0
    95ac:	00011d75 	.word	0x00011d75
    95b0:	00013448 	.word	0x00013448

000095b4 <DeleteItemCache>:
{
    95b4:	b510      	push	{r4, lr}
    assert(FindItemCache(id) != NULL);
    95b6:	4b0b      	ldr	r3, [pc, #44]	; (95e4 <DeleteItemCache+0x30>)
    95b8:	4798      	blx	r3
    95ba:	2800      	cmp	r0, #0
    95bc:	d00b      	beq.n	95d6 <DeleteItemCache+0x22>
    *cache = s_itemCache[--s_itemCount];
    95be:	4b0a      	ldr	r3, [pc, #40]	; (95e8 <DeleteItemCache+0x34>)
    95c0:	7819      	ldrb	r1, [r3, #0]
    95c2:	3901      	subs	r1, #1
    95c4:	b2c9      	uxtb	r1, r1
    95c6:	7019      	strb	r1, [r3, #0]
    95c8:	0089      	lsls	r1, r1, #2
    95ca:	4b08      	ldr	r3, [pc, #32]	; (95ec <DeleteItemCache+0x38>)
    95cc:	1859      	adds	r1, r3, r1
    95ce:	2204      	movs	r2, #4
    95d0:	4b07      	ldr	r3, [pc, #28]	; (95f0 <DeleteItemCache+0x3c>)
    95d2:	4798      	blx	r3
}
    95d4:	bd10      	pop	{r4, pc}
    assert(FindItemCache(id) != NULL);
    95d6:	4b07      	ldr	r3, [pc, #28]	; (95f4 <DeleteItemCache+0x40>)
    95d8:	4a07      	ldr	r2, [pc, #28]	; (95f8 <DeleteItemCache+0x44>)
    95da:	21d3      	movs	r1, #211	; 0xd3
    95dc:	0049      	lsls	r1, r1, #1
    95de:	4807      	ldr	r0, [pc, #28]	; (95fc <DeleteItemCache+0x48>)
    95e0:	4c07      	ldr	r4, [pc, #28]	; (9600 <DeleteItemCache+0x4c>)
    95e2:	47a0      	blx	r4
    95e4:	000094c5 	.word	0x000094c5
    95e8:	20000348 	.word	0x20000348
    95ec:	20000320 	.word	0x20000320
    95f0:	00011e37 	.word	0x00011e37
    95f4:	00013468 	.word	0x00013468
    95f8:	0001358c 	.word	0x0001358c
    95fc:	000134a0 	.word	0x000134a0
    9600:	00011d75 	.word	0x00011d75

00009604 <eraseSectorTimerFired>:
{
    9604:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow())
    9606:	4b05      	ldr	r3, [pc, #20]	; (961c <eraseSectorTimerFired+0x18>)
    9608:	4798      	blx	r3
    960a:	2800      	cmp	r0, #0
    960c:	d000      	beq.n	9610 <eraseSectorTimerFired+0xc>
}
    960e:	bd10      	pop	{r4, pc}
        D_Nv_EraseSector(s_sectorToErase);
    9610:	4b03      	ldr	r3, [pc, #12]	; (9620 <eraseSectorTimerFired+0x1c>)
    9612:	7818      	ldrb	r0, [r3, #0]
    9614:	4b03      	ldr	r3, [pc, #12]	; (9624 <eraseSectorTimerFired+0x20>)
    9616:	4798      	blx	r3
}
    9618:	e7f9      	b.n	960e <eraseSectorTimerFired+0xa>
    961a:	46c0      	nop			; (mov r8, r8)
    961c:	000092cd 	.word	0x000092cd
    9620:	20000009 	.word	0x20000009
    9624:	0000925d 	.word	0x0000925d

00009628 <EraseSector>:

static bool EraseSector(void)
{
    9628:	b510      	push	{r4, lr}
    // Erase the sector
    D_Nv_EraseSector(s_sector);
    962a:	4c08      	ldr	r4, [pc, #32]	; (964c <EraseSector+0x24>)
    962c:	7820      	ldrb	r0, [r4, #0]
    962e:	4b08      	ldr	r3, [pc, #32]	; (9650 <EraseSector+0x28>)
    9630:	4798      	blx	r3
    // check if the erase succeeded
    if ( !D_Nv_IsEmpty(s_sector, 0u, SECTOR_SIZE) )
    9632:	7820      	ldrb	r0, [r4, #0]
    9634:	2280      	movs	r2, #128	; 0x80
    9636:	0192      	lsls	r2, r2, #6
    9638:	2100      	movs	r1, #0
    963a:	4b06      	ldr	r3, [pc, #24]	; (9654 <EraseSector+0x2c>)
    963c:	4798      	blx	r3
    963e:	2800      	cmp	r0, #0
    9640:	d003      	beq.n	964a <EraseSector+0x22>
    {
        return false;
    }
    s_sectorHead =  ITEMS_AREA_START_ADDRESS;
    9642:	2280      	movs	r2, #128	; 0x80
    9644:	0052      	lsls	r2, r2, #1
    9646:	4b04      	ldr	r3, [pc, #16]	; (9658 <EraseSector+0x30>)
    9648:	801a      	strh	r2, [r3, #0]

    return true;
}
    964a:	bd10      	pop	{r4, pc}
    964c:	20000350 	.word	0x20000350
    9650:	0000925d 	.word	0x0000925d
    9654:	000092b1 	.word	0x000092b1
    9658:	20000352 	.word	0x20000352

0000965c <WriteAndCheck>:
{
    965c:	b5f0      	push	{r4, r5, r6, r7, lr}
    965e:	b083      	sub	sp, #12
    9660:	9001      	str	r0, [sp, #4]
    9662:	000d      	movs	r5, r1
    9664:	0016      	movs	r6, r2
    D_Nv_Write(s_sector, offset, pData, length);
    9666:	4f07      	ldr	r7, [pc, #28]	; (9684 <WriteAndCheck+0x28>)
    9668:	7838      	ldrb	r0, [r7, #0]
    966a:	0013      	movs	r3, r2
    966c:	000a      	movs	r2, r1
    966e:	9901      	ldr	r1, [sp, #4]
    9670:	4c05      	ldr	r4, [pc, #20]	; (9688 <WriteAndCheck+0x2c>)
    9672:	47a0      	blx	r4
    return D_Nv_IsEqual(s_sector, offset, pData, length);
    9674:	7838      	ldrb	r0, [r7, #0]
    9676:	0033      	movs	r3, r6
    9678:	002a      	movs	r2, r5
    967a:	9901      	ldr	r1, [sp, #4]
    967c:	4c03      	ldr	r4, [pc, #12]	; (968c <WriteAndCheck+0x30>)
    967e:	47a0      	blx	r4
}
    9680:	b003      	add	sp, #12
    9682:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9684:	20000350 	.word	0x20000350
    9688:	000090f5 	.word	0x000090f5
    968c:	000092c1 	.word	0x000092c1

00009690 <WriteSectorHeader>:

static bool WriteSectorHeader(uint32_t sequenceNumber)
{
    9690:	b510      	push	{r4, lr}
    9692:	b086      	sub	sp, #24
    // write sector header
    SectorHeader_t sectorHeader;
    sectorHeader.signature[0] = (uint8_t) 'A';
    9694:	ac01      	add	r4, sp, #4
    9696:	2341      	movs	r3, #65	; 0x41
    9698:	70a3      	strb	r3, [r4, #2]
    sectorHeader.signature[1] = (uint8_t) 'T';
    969a:	3313      	adds	r3, #19
    969c:	70e3      	strb	r3, [r4, #3]
    sectorHeader.signature[2] = (uint8_t) 'S';
    969e:	3b01      	subs	r3, #1
    96a0:	7123      	strb	r3, [r4, #4]
    sectorHeader.signature[3] = (uint8_t) 'N';
    96a2:	3b05      	subs	r3, #5
    96a4:	7163      	strb	r3, [r4, #5]
    sectorHeader.signature[4] = (uint8_t) 'v';
    96a6:	3328      	adds	r3, #40	; 0x28
    96a8:	71a3      	strb	r3, [r4, #6]
    sectorHeader.signature[5] = (uint8_t) '2';
    96aa:	3b44      	subs	r3, #68	; 0x44
    96ac:	71e3      	strb	r3, [r4, #7]
    sectorHeader.sequenceNumber = sequenceNumber;
    96ae:	9003      	str	r0, [sp, #12]
    sectorHeader.sequenceParity = sequenceNumber ^ 0xFFFFFFFFuL;
    96b0:	43c0      	mvns	r0, r0
    96b2:	9004      	str	r0, [sp, #16]
    sectorHeader.nextPageAddressAfterCompact = s_nextPageAddressAfterCompact;
    96b4:	4b08      	ldr	r3, [pc, #32]	; (96d8 <WriteSectorHeader+0x48>)
    96b6:	881b      	ldrh	r3, [r3, #0]
    96b8:	8223      	strh	r3, [r4, #16]
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    96ba:	4a08      	ldr	r2, [pc, #32]	; (96dc <WriteSectorHeader+0x4c>)
    96bc:	2110      	movs	r1, #16
    96be:	466b      	mov	r3, sp
    96c0:	1d98      	adds	r0, r3, #6
    96c2:	4b07      	ldr	r3, [pc, #28]	; (96e0 <WriteSectorHeader+0x50>)
    96c4:	4798      	blx	r3
    sectorHeader.headerCrc = ComputeSectorHeaderCrc(&sectorHeader);
    96c6:	8020      	strh	r0, [r4, #0]
    if ( !WriteAndCheck(0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE) )
    96c8:	2212      	movs	r2, #18
    96ca:	0021      	movs	r1, r4
    96cc:	2000      	movs	r0, #0
    96ce:	4b05      	ldr	r3, [pc, #20]	; (96e4 <WriteSectorHeader+0x54>)
    96d0:	4798      	blx	r3
    {
        return false;
    }
    return true;
}
    96d2:	b006      	add	sp, #24
    96d4:	bd10      	pop	{r4, pc}
    96d6:	46c0      	nop			; (mov r8, r8)
    96d8:	2000034a 	.word	0x2000034a
    96dc:	0000ffff 	.word	0x0000ffff
    96e0:	00009325 	.word	0x00009325
    96e4:	0000965d 	.word	0x0000965d

000096e8 <SmartCompacting>:
 * without following any alignements as normal item updates.Items are filled into
  256 byte buffer(= row size), committed in shot which takes 4 page writs maximum
 */

static bool SmartCompacting(uint8_t* compactBlock, uint16_t curItemLength)
{
    96e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96ea:	0004      	movs	r4, r0
    96ec:	000d      	movs	r5, r1
    //manupulate the current compact length
    currentCompactLength += curItemLength;
    96ee:	4a21      	ldr	r2, [pc, #132]	; (9774 <SmartCompacting+0x8c>)
    96f0:	8813      	ldrh	r3, [r2, #0]
    96f2:	18cb      	adds	r3, r1, r3
    96f4:	b29b      	uxth	r3, r3
    96f6:	8013      	strh	r3, [r2, #0]

    // if the complete buffer cannot be filled with the current item
    if ( currentCompactLength < ROW_SIZE)
    96f8:	2bff      	cmp	r3, #255	; 0xff
    96fa:	d92e      	bls.n	975a <SmartCompacting+0x72>
    else  //(currentCompactLength >= ROW_SIZE) cases
    {
        uint16_t dataBlockOffset = 0;


        memcpy(compactBlock + compactBlockOffset, dataBlock, (ROW_SIZE - compactBlockOffset));
    96fc:	4b1e      	ldr	r3, [pc, #120]	; (9778 <SmartCompacting+0x90>)
    96fe:	881a      	ldrh	r2, [r3, #0]
    9700:	1880      	adds	r0, r0, r2
    9702:	2580      	movs	r5, #128	; 0x80
    9704:	006d      	lsls	r5, r5, #1
    9706:	1aaa      	subs	r2, r5, r2
    9708:	491c      	ldr	r1, [pc, #112]	; (977c <SmartCompacting+0x94>)
    970a:	4b1d      	ldr	r3, [pc, #116]	; (9780 <SmartCompacting+0x98>)
    970c:	4798      	blx	r3
        if ( !WriteAndCheck(s_sectorHead, compactBlock, ROW_SIZE ))
    970e:	4b1d      	ldr	r3, [pc, #116]	; (9784 <SmartCompacting+0x9c>)
    9710:	8818      	ldrh	r0, [r3, #0]
    9712:	002a      	movs	r2, r5
    9714:	0021      	movs	r1, r4
    9716:	4b1c      	ldr	r3, [pc, #112]	; (9788 <SmartCompacting+0xa0>)
    9718:	4798      	blx	r3
    971a:	1e05      	subs	r5, r0, #0
    971c:	d027      	beq.n	976e <SmartCompacting+0x86>
        {
            return false;
        }
        UpdateSectorHead(ROW_SIZE, ITEM_NO_ALIGNMENT);
    971e:	2100      	movs	r1, #0
    9720:	2080      	movs	r0, #128	; 0x80
    9722:	0040      	lsls	r0, r0, #1
    9724:	4b19      	ldr	r3, [pc, #100]	; (978c <SmartCompacting+0xa4>)
    9726:	4798      	blx	r3
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    9728:	4b13      	ldr	r3, [pc, #76]	; (9778 <SmartCompacting+0x90>)
    972a:	8818      	ldrh	r0, [r3, #0]
        compactBlockOffset = 0;
    972c:	2200      	movs	r2, #0
    972e:	801a      	strh	r2, [r3, #0]
        currentCompactLength -= ROW_SIZE;
    9730:	4b10      	ldr	r3, [pc, #64]	; (9774 <SmartCompacting+0x8c>)
    9732:	881e      	ldrh	r6, [r3, #0]
    9734:	3e01      	subs	r6, #1
    9736:	3eff      	subs	r6, #255	; 0xff
    9738:	b2b6      	uxth	r6, r6
    973a:	801e      	strh	r6, [r3, #0]
        if (currentCompactLength)
    973c:	2e00      	cmp	r6, #0
    973e:	d016      	beq.n	976e <SmartCompacting+0x86>
        dataBlockOffset += (ROW_SIZE - compactBlockOffset);
    9740:	2180      	movs	r1, #128	; 0x80
    9742:	0049      	lsls	r1, r1, #1
    9744:	1a09      	subs	r1, r1, r0
        {
            memcpy(compactBlock, dataBlock + dataBlockOffset, currentCompactLength);
    9746:	b289      	uxth	r1, r1
    9748:	4b0c      	ldr	r3, [pc, #48]	; (977c <SmartCompacting+0x94>)
    974a:	1859      	adds	r1, r3, r1
    974c:	0032      	movs	r2, r6
    974e:	0020      	movs	r0, r4
    9750:	4b0b      	ldr	r3, [pc, #44]	; (9780 <SmartCompacting+0x98>)
    9752:	4798      	blx	r3
            compactBlockOffset = currentCompactLength;
    9754:	4b08      	ldr	r3, [pc, #32]	; (9778 <SmartCompacting+0x90>)
    9756:	801e      	strh	r6, [r3, #0]
    9758:	e009      	b.n	976e <SmartCompacting+0x86>
        memcpy(compactBlock + compactBlockOffset, dataBlock, curItemLength);
    975a:	4e07      	ldr	r6, [pc, #28]	; (9778 <SmartCompacting+0x90>)
    975c:	8837      	ldrh	r7, [r6, #0]
    975e:	19c0      	adds	r0, r0, r7
    9760:	000a      	movs	r2, r1
    9762:	4906      	ldr	r1, [pc, #24]	; (977c <SmartCompacting+0x94>)
    9764:	4b06      	ldr	r3, [pc, #24]	; (9780 <SmartCompacting+0x98>)
    9766:	4798      	blx	r3
        compactBlockOffset += curItemLength;
    9768:	19ed      	adds	r5, r5, r7
    976a:	8035      	strh	r5, [r6, #0]
        return true;
    976c:	2501      	movs	r5, #1
        }
    }

    return true;

}
    976e:	0028      	movs	r0, r5
    9770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9772:	46c0      	nop			; (mov r8, r8)
    9774:	20000200 	.word	0x20000200
    9778:	200001d4 	.word	0x200001d4
    977c:	20000204 	.word	0x20000204
    9780:	00011e37 	.word	0x00011e37
    9784:	20000352 	.word	0x20000352
    9788:	0000965d 	.word	0x0000965d
    978c:	000092e9 	.word	0x000092e9

00009790 <CompactSector>:
 * This is because the itemCache, sector head and sector selector will
 * be messed up.
 */

static bool CompactSector(void)
{
    9790:	b5f0      	push	{r4, r5, r6, r7, lr}
    9792:	46de      	mov	lr, fp
    9794:	4657      	mov	r7, sl
    9796:	464e      	mov	r6, r9
    9798:	4645      	mov	r5, r8
    979a:	b5e0      	push	{r5, r6, r7, lr}
    979c:	b0d5      	sub	sp, #340	; 0x154
    PRINTA(("CompactSector(s=%X)", s_sector));
#endif
    uint8_t compactBlock[ROW_SIZE];

    // stop timer for preemptive compact sector as this will not be needed any more
    SYS_TimerStop(&compactSectorTimer);
    979e:	487b      	ldr	r0, [pc, #492]	; (998c <CompactSector+0x1fc>)
    97a0:	4b7b      	ldr	r3, [pc, #492]	; (9990 <CompactSector+0x200>)
    97a2:	4798      	blx	r3

    // stop the compact item as a compact sector will compact all items
    s_compactItemId = 0u;
    97a4:	2300      	movs	r3, #0
    97a6:	4a7b      	ldr	r2, [pc, #492]	; (9994 <CompactSector+0x204>)
    97a8:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    97aa:	4a7b      	ldr	r2, [pc, #492]	; (9998 <CompactSector+0x208>)
    97ac:	8013      	strh	r3, [r2, #0]

    compactBlockOffset = 0;
    97ae:	4a7b      	ldr	r2, [pc, #492]	; (999c <CompactSector+0x20c>)
    97b0:	8013      	strh	r3, [r2, #0]
    currentCompactLength = 0;
    97b2:	4a7b      	ldr	r2, [pc, #492]	; (99a0 <CompactSector+0x210>)
    97b4:	8013      	strh	r3, [r2, #0]

    uint8_t sourceSector = s_sector;
    97b6:	4b7b      	ldr	r3, [pc, #492]	; (99a4 <CompactSector+0x214>)
    97b8:	781b      	ldrb	r3, [r3, #0]
    97ba:	001f      	movs	r7, r3
    97bc:	9303      	str	r3, [sp, #12]

    // get the sector header for the source sector
    SectorHeader_t sectorHeader;
    D_Nv_Read(sourceSector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    97be:	2312      	movs	r3, #18
    97c0:	aa0f      	add	r2, sp, #60	; 0x3c
    97c2:	2100      	movs	r1, #0
    97c4:	0038      	movs	r0, r7
    97c6:	4c78      	ldr	r4, [pc, #480]	; (99a8 <CompactSector+0x218>)
    97c8:	47a0      	blx	r4

    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    97ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    97cc:	9309      	str	r3, [sp, #36]	; 0x24

    // find and prepare a destination sector
    do
    {
        s_sector++;
    97ce:	4c75      	ldr	r4, [pc, #468]	; (99a4 <CompactSector+0x214>)
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
        {
            s_sector = FIRST_SECTOR;
    97d0:	0025      	movs	r5, r4
        s_sector++;
    97d2:	0026      	movs	r6, r4
    97d4:	e008      	b.n	97e8 <CompactSector+0x58>
    97d6:	7033      	strb	r3, [r6, #0]
        }

        if ( s_sector == sourceSector )
    97d8:	4b72      	ldr	r3, [pc, #456]	; (99a4 <CompactSector+0x214>)
    97da:	781b      	ldrb	r3, [r3, #0]
    97dc:	42bb      	cmp	r3, r7
    97de:	d00b      	beq.n	97f8 <CompactSector+0x68>
        {
            // all sector failed to initialize
            assert(false);
        }
    }
    while ( !EraseSector());
    97e0:	4b72      	ldr	r3, [pc, #456]	; (99ac <CompactSector+0x21c>)
    97e2:	4798      	blx	r3
    97e4:	2800      	cmp	r0, #0
    97e6:	d10d      	bne.n	9804 <CompactSector+0x74>
        s_sector++;
    97e8:	7823      	ldrb	r3, [r4, #0]
    97ea:	3301      	adds	r3, #1
    97ec:	b2db      	uxtb	r3, r3
        if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    97ee:	2b01      	cmp	r3, #1
    97f0:	d9f1      	bls.n	97d6 <CompactSector+0x46>
            s_sector = FIRST_SECTOR;
    97f2:	2300      	movs	r3, #0
    97f4:	702b      	strb	r3, [r5, #0]
    97f6:	e7ef      	b.n	97d8 <CompactSector+0x48>
            assert(false);
    97f8:	4b6d      	ldr	r3, [pc, #436]	; (99b0 <CompactSector+0x220>)
    97fa:	4a6e      	ldr	r2, [pc, #440]	; (99b4 <CompactSector+0x224>)
    97fc:	496e      	ldr	r1, [pc, #440]	; (99b8 <CompactSector+0x228>)
    97fe:	486f      	ldr	r0, [pc, #444]	; (99bc <CompactSector+0x22c>)
    9800:	4c6f      	ldr	r4, [pc, #444]	; (99c0 <CompactSector+0x230>)
    9802:	47a0      	blx	r4

    // Traverse the item cache, writing all items to the new sector
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    9804:	4b6f      	ldr	r3, [pc, #444]	; (99c4 <CompactSector+0x234>)
    9806:	781b      	ldrb	r3, [r3, #0]
    9808:	2b00      	cmp	r3, #0
    980a:	d06a      	beq.n	98e2 <CompactSector+0x152>
    980c:	2300      	movs	r3, #0
    980e:	9306      	str	r3, [sp, #24]

        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);

        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);

        memset(dataBlock, 0xFF, sizeof(dataBlock));
    9810:	3301      	adds	r3, #1
    9812:	33ff      	adds	r3, #255	; 0xff
    9814:	4699      	mov	r9, r3
            uint16_t bytesToGather;
            uint16_t inDataOffset = 0;

            do
            {
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    9816:	466a      	mov	r2, sp
    9818:	82d3      	strh	r3, [r2, #22]
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    981a:	4b6b      	ldr	r3, [pc, #428]	; (99c8 <CompactSector+0x238>)
    981c:	3310      	adds	r3, #16
    981e:	9308      	str	r3, [sp, #32]
        Item_t *cache = &s_itemCache[cacheIndex];
    9820:	9b06      	ldr	r3, [sp, #24]
    9822:	9307      	str	r3, [sp, #28]
        uint16_t lastBlockPointer = cache->lastBlock;
    9824:	009f      	lsls	r7, r3, #2
    9826:	4b69      	ldr	r3, [pc, #420]	; (99cc <CompactSector+0x23c>)
    9828:	469c      	mov	ip, r3
    982a:	4467      	add	r7, ip
    982c:	887b      	ldrh	r3, [r7, #2]
    982e:	001d      	movs	r5, r3
    9830:	9304      	str	r3, [sp, #16]
        D_Nv_Read(sourceSector, lastBlockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9832:	2310      	movs	r3, #16
    9834:	aa0b      	add	r2, sp, #44	; 0x2c
    9836:	0029      	movs	r1, r5
    9838:	9803      	ldr	r0, [sp, #12]
    983a:	4680      	mov	r8, r0
    983c:	4c5a      	ldr	r4, [pc, #360]	; (99a8 <CompactSector+0x218>)
    983e:	47a0      	blx	r4
        blockHeader.blockOffset = 0x0000u;
    9840:	ae0b      	add	r6, sp, #44	; 0x2c
    9842:	2300      	movs	r3, #0
    9844:	80b3      	strh	r3, [r6, #4]
        blockHeader.blockLength = blockHeader.itemLength;
    9846:	8934      	ldrh	r4, [r6, #8]
    9848:	80f4      	strh	r4, [r6, #6]
        blockHeader.previousBlock = 0x0000u;
    984a:	8173      	strh	r3, [r6, #10]
        blockHeader.writeCount = 0u;
    984c:	81b3      	strh	r3, [r6, #12]
        uint16_t currLength = BLOCK_HEADER_SIZE + blockHeader.itemLength;
    984e:	3410      	adds	r4, #16
    9850:	b2a4      	uxth	r4, r4
        blockHeader.dataCrc =  ComputeDataCrc(sourceSector, lastBlockPointer, &blockHeader);
    9852:	0032      	movs	r2, r6
    9854:	0029      	movs	r1, r5
    9856:	4640      	mov	r0, r8
    9858:	4b5d      	ldr	r3, [pc, #372]	; (99d0 <CompactSector+0x240>)
    985a:	4798      	blx	r3
    985c:	8030      	strh	r0, [r6, #0]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    985e:	4a5d      	ldr	r2, [pc, #372]	; (99d4 <CompactSector+0x244>)
    9860:	210e      	movs	r1, #14
    9862:	a80b      	add	r0, sp, #44	; 0x2c
    9864:	4b5c      	ldr	r3, [pc, #368]	; (99d8 <CompactSector+0x248>)
    9866:	4798      	blx	r3
        blockHeader.headerCrc = ComputeHeaderCrc(&blockHeader);
    9868:	81f0      	strh	r0, [r6, #14]
        memset(dataBlock, 0xFF, sizeof(dataBlock));
    986a:	4d57      	ldr	r5, [pc, #348]	; (99c8 <CompactSector+0x238>)
    986c:	464a      	mov	r2, r9
    986e:	21ff      	movs	r1, #255	; 0xff
    9870:	0028      	movs	r0, r5
    9872:	4b5a      	ldr	r3, [pc, #360]	; (99dc <CompactSector+0x24c>)
    9874:	4798      	blx	r3
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9876:	002b      	movs	r3, r5
    9878:	ce07      	ldmia	r6!, {r0, r1, r2}
    987a:	c307      	stmia	r3!, {r0, r1, r2}
    987c:	6832      	ldr	r2, [r6, #0]
    987e:	601a      	str	r2, [r3, #0]
        cache->lastBlock = s_sectorHead  + compactBlockOffset;
    9880:	4b57      	ldr	r3, [pc, #348]	; (99e0 <CompactSector+0x250>)
    9882:	881b      	ldrh	r3, [r3, #0]
    9884:	4a45      	ldr	r2, [pc, #276]	; (999c <CompactSector+0x20c>)
    9886:	8812      	ldrh	r2, [r2, #0]
    9888:	189b      	adds	r3, r3, r2
    988a:	807b      	strh	r3, [r7, #2]
        if (currLength <= ROW_SIZE)
    988c:	454c      	cmp	r4, r9
    988e:	d904      	bls.n	989a <CompactSector+0x10a>
    9890:	2600      	movs	r6, #0
    9892:	2310      	movs	r3, #16
              
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    9894:	4a4c      	ldr	r2, [pc, #304]	; (99c8 <CompactSector+0x238>)
    9896:	4690      	mov	r8, r2
    9898:	e068      	b.n	996c <CompactSector+0x1dc>
            if (!GatherData(sourceSector, lastBlockPointer, 0u, blockHeader.itemLength, (dataBlock + BLOCK_HEADER_SIZE )))
    989a:	ab0b      	add	r3, sp, #44	; 0x2c
    989c:	891b      	ldrh	r3, [r3, #8]
    989e:	9a08      	ldr	r2, [sp, #32]
    98a0:	9200      	str	r2, [sp, #0]
    98a2:	2200      	movs	r2, #0
    98a4:	9904      	ldr	r1, [sp, #16]
    98a6:	9803      	ldr	r0, [sp, #12]
    98a8:	4e4e      	ldr	r6, [pc, #312]	; (99e4 <CompactSector+0x254>)
    98aa:	47b0      	blx	r6
    98ac:	2800      	cmp	r0, #0
    98ae:	d063      	beq.n	9978 <CompactSector+0x1e8>
            cache->lastBlock = s_sectorHead  + compactBlockOffset;
    98b0:	9b07      	ldr	r3, [sp, #28]
    98b2:	009d      	lsls	r5, r3, #2
    98b4:	4b45      	ldr	r3, [pc, #276]	; (99cc <CompactSector+0x23c>)
    98b6:	195d      	adds	r5, r3, r5
    98b8:	4b49      	ldr	r3, [pc, #292]	; (99e0 <CompactSector+0x250>)
    98ba:	881b      	ldrh	r3, [r3, #0]
    98bc:	4a37      	ldr	r2, [pc, #220]	; (999c <CompactSector+0x20c>)
    98be:	8812      	ldrh	r2, [r2, #0]
    98c0:	189b      	adds	r3, r3, r2
    98c2:	806b      	strh	r3, [r5, #2]
            if (!SmartCompacting(compactBlock, currLength))
    98c4:	0021      	movs	r1, r4
    98c6:	a814      	add	r0, sp, #80	; 0x50
    98c8:	4b47      	ldr	r3, [pc, #284]	; (99e8 <CompactSector+0x258>)
    98ca:	4798      	blx	r3
    98cc:	2800      	cmp	r0, #0
    98ce:	d053      	beq.n	9978 <CompactSector+0x1e8>
    for (uint8_t cacheIndex = 0; cacheIndex < s_itemCount; cacheIndex++) {
    98d0:	9b06      	ldr	r3, [sp, #24]
    98d2:	3301      	adds	r3, #1
    98d4:	b2db      	uxtb	r3, r3
    98d6:	001a      	movs	r2, r3
    98d8:	9306      	str	r3, [sp, #24]
    98da:	4b3a      	ldr	r3, [pc, #232]	; (99c4 <CompactSector+0x234>)
    98dc:	781b      	ldrb	r3, [r3, #0]
    98de:	4293      	cmp	r3, r2
    98e0:	d89e      	bhi.n	9820 <CompactSector+0x90>

            } while(currLength > 0);
        }
    }
    // if some uncommitted data avaialble, committ it
    if ( currentCompactLength)
    98e2:	4b2f      	ldr	r3, [pc, #188]	; (99a0 <CompactSector+0x210>)
    98e4:	881a      	ldrh	r2, [r3, #0]
    98e6:	2a00      	cmp	r2, #0
    98e8:	d006      	beq.n	98f8 <CompactSector+0x168>
    {
        if ( !WriteAndCheck(s_sectorHead, compactBlock, currentCompactLength) )
    98ea:	4b3d      	ldr	r3, [pc, #244]	; (99e0 <CompactSector+0x250>)
    98ec:	8818      	ldrh	r0, [r3, #0]
    98ee:	a914      	add	r1, sp, #80	; 0x50
    98f0:	4b3e      	ldr	r3, [pc, #248]	; (99ec <CompactSector+0x25c>)
    98f2:	4798      	blx	r3
    98f4:	1e04      	subs	r4, r0, #0
    98f6:	d040      	beq.n	997a <CompactSector+0x1ea>
        {
            return false;
        }
    }
    // Just update sector header as per the the length of the data committed, no alignments
    UpdateSectorHead(currentCompactLength, ITEM_NO_ALIGNMENT);
    98f8:	4b29      	ldr	r3, [pc, #164]	; (99a0 <CompactSector+0x210>)
    98fa:	8818      	ldrh	r0, [r3, #0]
    98fc:	2100      	movs	r1, #0
    98fe:	4b3c      	ldr	r3, [pc, #240]	; (99f0 <CompactSector+0x260>)
    9900:	4798      	blx	r3

    s_nextPageAddressAfterCompact = s_sectorHead;
    9902:	4b37      	ldr	r3, [pc, #220]	; (99e0 <CompactSector+0x250>)
    9904:	881a      	ldrh	r2, [r3, #0]
    9906:	4b3b      	ldr	r3, [pc, #236]	; (99f4 <CompactSector+0x264>)
    9908:	801a      	strh	r2, [r3, #0]
    uint32_t nextSequenceNumber = sectorHeader.sequenceNumber - 1uL;
    990a:	9809      	ldr	r0, [sp, #36]	; 0x24
    990c:	3801      	subs	r0, #1
    //SYS_PostEvent(BC_EVENT_UPGRADE_STRUCT_CHANGED_ITEMS, 0U);

    // update nextPageAddressAfterCompact in the sector header
    // All items moved, so now we just need to Write the Sector Header with 
    // nextPageAddressAfterCompact at the end of compact sector operation
    if ( !WriteSectorHeader(nextSequenceNumber))
    990e:	4b3a      	ldr	r3, [pc, #232]	; (99f8 <CompactSector+0x268>)
    9910:	4798      	blx	r3
    9912:	1e04      	subs	r4, r0, #0
    9914:	d031      	beq.n	997a <CompactSector+0x1ea>
    {
        return false;
    }
    // Done with compact sector opration, Set the Sector Head to next page address for normal item update 
    UpdateSectorHead(0, ITEM_64BYTE_ALIGNMENT);
    9916:	2102      	movs	r1, #2
    9918:	2000      	movs	r0, #0
    991a:	4b35      	ldr	r3, [pc, #212]	; (99f0 <CompactSector+0x260>)
    991c:	4798      	blx	r3

    // schedule an erase of the source sector,Restart the timer if it is already running.
    s_sectorToErase = sourceSector;
    991e:	4b37      	ldr	r3, [pc, #220]	; (99fc <CompactSector+0x26c>)
    9920:	466a      	mov	r2, sp
    9922:	7b12      	ldrb	r2, [r2, #12]
    9924:	701a      	strb	r2, [r3, #0]
    SYS_TimerStop(&eraseSectorTimer);
    9926:	4d36      	ldr	r5, [pc, #216]	; (9a00 <CompactSector+0x270>)
    9928:	0028      	movs	r0, r5
    992a:	4b19      	ldr	r3, [pc, #100]	; (9990 <CompactSector+0x200>)
    992c:	4798      	blx	r3
    SYS_TimerStart(&eraseSectorTimer);
    992e:	0028      	movs	r0, r5
    9930:	4b34      	ldr	r3, [pc, #208]	; (9a04 <CompactSector+0x274>)
    9932:	4798      	blx	r3

    return true;
    9934:	e021      	b.n	997a <CompactSector+0x1ea>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    9936:	b2ad      	uxth	r5, r5
              if (!GatherData(sourceSector, lastBlockPointer, inDataOffset, (bytesToGather - dataBlockOffset) , (dataBlock + dataBlockOffset)))
    9938:	1aef      	subs	r7, r5, r3
    993a:	b2ba      	uxth	r2, r7
    993c:	4693      	mov	fp, r2
    993e:	4443      	add	r3, r8
    9940:	9300      	str	r3, [sp, #0]
    9942:	0013      	movs	r3, r2
    9944:	0032      	movs	r2, r6
    9946:	9904      	ldr	r1, [sp, #16]
    9948:	9803      	ldr	r0, [sp, #12]
    994a:	4f26      	ldr	r7, [pc, #152]	; (99e4 <CompactSector+0x254>)
    994c:	47b8      	blx	r7
    994e:	2800      	cmp	r0, #0
    9950:	d012      	beq.n	9978 <CompactSector+0x1e8>
              if (!SmartCompacting(compactBlock, bytesToGather))
    9952:	0029      	movs	r1, r5
    9954:	a814      	add	r0, sp, #80	; 0x50
    9956:	4b24      	ldr	r3, [pc, #144]	; (99e8 <CompactSector+0x258>)
    9958:	4798      	blx	r3
    995a:	2800      	cmp	r0, #0
    995c:	d00c      	beq.n	9978 <CompactSector+0x1e8>
              currLength -= bytesToGather;
    995e:	1b64      	subs	r4, r4, r5
    9960:	b2a4      	uxth	r4, r4
              inDataOffset += (bytesToGather - dataBlockOffset);
    9962:	445e      	add	r6, fp
    9964:	b2b6      	uxth	r6, r6
              dataBlockOffset = 0;
    9966:	2300      	movs	r3, #0
            } while(currLength > 0);
    9968:	2c00      	cmp	r4, #0
    996a:	d0b1      	beq.n	98d0 <CompactSector+0x140>
              bytesToGather =  (currLength > ROW_SIZE) ? ROW_SIZE : currLength; 
    996c:	1c25      	adds	r5, r4, #0
    996e:	454c      	cmp	r4, r9
    9970:	d9e1      	bls.n	9936 <CompactSector+0x1a6>
    9972:	466a      	mov	r2, sp
    9974:	8ad5      	ldrh	r5, [r2, #22]
    9976:	e7de      	b.n	9936 <CompactSector+0x1a6>
                return false;
    9978:	2400      	movs	r4, #0
}
    997a:	0020      	movs	r0, r4
    997c:	b055      	add	sp, #340	; 0x154
    997e:	bc3c      	pop	{r2, r3, r4, r5}
    9980:	4690      	mov	r8, r2
    9982:	4699      	mov	r9, r3
    9984:	46a2      	mov	sl, r4
    9986:	46ab      	mov	fp, r5
    9988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    998a:	46c0      	nop			; (mov r8, r8)
    998c:	200001ec 	.word	0x200001ec
    9990:	0000d769 	.word	0x0000d769
    9994:	20000318 	.word	0x20000318
    9998:	2000031a 	.word	0x2000031a
    999c:	200001d4 	.word	0x200001d4
    99a0:	20000200 	.word	0x20000200
    99a4:	20000350 	.word	0x20000350
    99a8:	0000907d 	.word	0x0000907d
    99ac:	00009629 	.word	0x00009629
    99b0:	00013424 	.word	0x00013424
    99b4:	000135a8 	.word	0x000135a8
    99b8:	000003d5 	.word	0x000003d5
    99bc:	000134a0 	.word	0x000134a0
    99c0:	00011d75 	.word	0x00011d75
    99c4:	20000348 	.word	0x20000348
    99c8:	20000204 	.word	0x20000204
    99cc:	20000320 	.word	0x20000320
    99d0:	0000941d 	.word	0x0000941d
    99d4:	0000ffff 	.word	0x0000ffff
    99d8:	00009325 	.word	0x00009325
    99dc:	00011e49 	.word	0x00011e49
    99e0:	20000352 	.word	0x20000352
    99e4:	00009365 	.word	0x00009365
    99e8:	000096e9 	.word	0x000096e9
    99ec:	0000965d 	.word	0x0000965d
    99f0:	000092e9 	.word	0x000092e9
    99f4:	2000034a 	.word	0x2000034a
    99f8:	00009691 	.word	0x00009691
    99fc:	20000009 	.word	0x20000009
    9a00:	20000304 	.word	0x20000304
    9a04:	0000d7d5 	.word	0x0000d7d5

00009a08 <compactSectorTimerFired>:
{
    9a08:	b510      	push	{r4, lr}
    if (!PowerSupplyTooLow()) {
    9a0a:	4b07      	ldr	r3, [pc, #28]	; (9a28 <compactSectorTimerFired+0x20>)
    9a0c:	4798      	blx	r3
    9a0e:	2800      	cmp	r0, #0
    9a10:	d000      	beq.n	9a14 <compactSectorTimerFired+0xc>
}
    9a12:	bd10      	pop	{r4, pc}
      status = CompactSector();
    9a14:	4b05      	ldr	r3, [pc, #20]	; (9a2c <compactSectorTimerFired+0x24>)
    9a16:	4798      	blx	r3
      assert(false);
    9a18:	4b05      	ldr	r3, [pc, #20]	; (9a30 <compactSectorTimerFired+0x28>)
    9a1a:	4a06      	ldr	r2, [pc, #24]	; (9a34 <compactSectorTimerFired+0x2c>)
    9a1c:	212c      	movs	r1, #44	; 0x2c
    9a1e:	31ff      	adds	r1, #255	; 0xff
    9a20:	4805      	ldr	r0, [pc, #20]	; (9a38 <compactSectorTimerFired+0x30>)
    9a22:	4c06      	ldr	r4, [pc, #24]	; (9a3c <compactSectorTimerFired+0x34>)
    9a24:	47a0      	blx	r4
    9a26:	46c0      	nop			; (mov r8, r8)
    9a28:	000092cd 	.word	0x000092cd
    9a2c:	00009791 	.word	0x00009791
    9a30:	00013424 	.word	0x00013424
    9a34:	00013554 	.word	0x00013554
    9a38:	000134a0 	.word	0x000134a0
    9a3c:	00011d75 	.word	0x00011d75

00009a40 <CompactSectorIfNeeded>:

static void CompactSectorIfNeeded(uint16_t immediateThreshold)
{
    9a40:	b510      	push	{r4, lr}
    uint16_t freeSpace = SECTOR_SIZE - s_sectorHead;
    9a42:	4b12      	ldr	r3, [pc, #72]	; (9a8c <CompactSectorIfNeeded+0x4c>)
    9a44:	881a      	ldrh	r2, [r3, #0]
    9a46:	2380      	movs	r3, #128	; 0x80
    9a48:	019b      	lsls	r3, r3, #6
    9a4a:	1a9b      	subs	r3, r3, r2
    9a4c:	b29b      	uxth	r3, r3

    if ( freeSpace < immediateThreshold )
    9a4e:	4283      	cmp	r3, r0
    9a50:	d303      	bcc.n	9a5a <CompactSectorIfNeeded+0x1a>
        {
            assert(false);
        }
        return;
    }
    if ( freeSpace < PREEMPTIVE_COMPACT_SECTOR_THRESHOLD )
    9a52:	4a0f      	ldr	r2, [pc, #60]	; (9a90 <CompactSectorIfNeeded+0x50>)
    9a54:	4293      	cmp	r3, r2
    9a56:	d90a      	bls.n	9a6e <CompactSectorIfNeeded+0x2e>
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
        //TODO: check timer to be started or not
        //SYS_StartTimer(&compactSectorTimer);
        }
    }
}
    9a58:	bd10      	pop	{r4, pc}
        if ( !CompactSector() )
    9a5a:	4b0e      	ldr	r3, [pc, #56]	; (9a94 <CompactSectorIfNeeded+0x54>)
    9a5c:	4798      	blx	r3
    9a5e:	2800      	cmp	r0, #0
    9a60:	d1fa      	bne.n	9a58 <CompactSectorIfNeeded+0x18>
            assert(false);
    9a62:	4b0d      	ldr	r3, [pc, #52]	; (9a98 <CompactSectorIfNeeded+0x58>)
    9a64:	4a0d      	ldr	r2, [pc, #52]	; (9a9c <CompactSectorIfNeeded+0x5c>)
    9a66:	490e      	ldr	r1, [pc, #56]	; (9aa0 <CompactSectorIfNeeded+0x60>)
    9a68:	480e      	ldr	r0, [pc, #56]	; (9aa4 <CompactSectorIfNeeded+0x64>)
    9a6a:	4c0f      	ldr	r4, [pc, #60]	; (9aa8 <CompactSectorIfNeeded+0x68>)
    9a6c:	47a0      	blx	r4
        if (!SYS_TimerStarted(&compactSectorTimer))
    9a6e:	480f      	ldr	r0, [pc, #60]	; (9aac <CompactSectorIfNeeded+0x6c>)
    9a70:	4b0f      	ldr	r3, [pc, #60]	; (9ab0 <CompactSectorIfNeeded+0x70>)
    9a72:	4798      	blx	r3
    9a74:	2800      	cmp	r0, #0
    9a76:	d1ef      	bne.n	9a58 <CompactSectorIfNeeded+0x18>
        compactSectorTimer.handler = compactSectorTimerFired;
    9a78:	4b0c      	ldr	r3, [pc, #48]	; (9aac <CompactSectorIfNeeded+0x6c>)
    9a7a:	4a0e      	ldr	r2, [pc, #56]	; (9ab4 <CompactSectorIfNeeded+0x74>)
    9a7c:	611a      	str	r2, [r3, #16]
        compactSectorTimer.timeout = COMPACT_SECTOR_DELAY_MS;
    9a7e:	4a0e      	ldr	r2, [pc, #56]	; (9ab8 <CompactSectorIfNeeded+0x78>)
    9a80:	605a      	str	r2, [r3, #4]
        compactSectorTimer.interval = COMPACT_SECTOR_DELAY_MS;
    9a82:	609a      	str	r2, [r3, #8]
        compactSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    9a84:	2200      	movs	r2, #0
    9a86:	731a      	strb	r2, [r3, #12]
    9a88:	e7e6      	b.n	9a58 <CompactSectorIfNeeded+0x18>
    9a8a:	46c0      	nop			; (mov r8, r8)
    9a8c:	20000352 	.word	0x20000352
    9a90:	0000080f 	.word	0x0000080f
    9a94:	00009791 	.word	0x00009791
    9a98:	00013424 	.word	0x00013424
    9a9c:	000135b8 	.word	0x000135b8
    9aa0:	0000044e 	.word	0x0000044e
    9aa4:	000134a0 	.word	0x000134a0
    9aa8:	00011d75 	.word	0x00011d75
    9aac:	200001ec 	.word	0x200001ec
    9ab0:	0000d7a9 	.word	0x0000d7a9
    9ab4:	00009a09 	.word	0x00009a09
    9ab8:	00002710 	.word	0x00002710

00009abc <CompactItem>:

static S_Nv_ReturnValue_t CompactItem(void)
{
    9abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9abe:	46de      	mov	lr, fp
    9ac0:	4657      	mov	r7, sl
    9ac2:	464e      	mov	r6, r9
    9ac4:	4645      	mov	r5, r8
    9ac6:	b5e0      	push	{r5, r6, r7, lr}
    9ac8:	b08b      	sub	sp, #44	; 0x2c
#if defined(ENABLE_NV_COMPACT_LOGGING)
    PRINTA(("CompactItem(id=%X)", s_compactItemId));
#endif

    if ( PowerSupplyTooLow() )
    9aca:	4b77      	ldr	r3, [pc, #476]	; (9ca8 <CompactItem+0x1ec>)
    9acc:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    9ace:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    9ad0:	2800      	cmp	r0, #0
    9ad2:	d007      	beq.n	9ae4 <CompactItem+0x28>
    s_compactItemLength = 0u;

    cache->lastBlock = lastBlock;

    return S_Nv_ReturnValue_Ok;
}
    9ad4:	0018      	movs	r0, r3
    9ad6:	b00b      	add	sp, #44	; 0x2c
    9ad8:	bc3c      	pop	{r2, r3, r4, r5}
    9ada:	4690      	mov	r8, r2
    9adc:	4699      	mov	r9, r3
    9ade:	46a2      	mov	sl, r4
    9ae0:	46ab      	mov	fp, r5
    9ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ( (s_compactItemLength == 0u) && ( s_compactItemId == 0u ) )
    9ae4:	4b71      	ldr	r3, [pc, #452]	; (9cac <CompactItem+0x1f0>)
    9ae6:	8818      	ldrh	r0, [r3, #0]
    9ae8:	2800      	cmp	r0, #0
    9aea:	d146      	bne.n	9b7a <CompactItem+0xbe>
    9aec:	4b70      	ldr	r3, [pc, #448]	; (9cb0 <CompactItem+0x1f4>)
    9aee:	881b      	ldrh	r3, [r3, #0]
    9af0:	2b00      	cmp	r3, #0
    9af2:	d100      	bne.n	9af6 <CompactItem+0x3a>
    9af4:	e0d0      	b.n	9c98 <CompactItem+0x1dc>
    Item_t *cache = FindItemCache(s_compactItemId);
    9af6:	4b6e      	ldr	r3, [pc, #440]	; (9cb0 <CompactItem+0x1f4>)
    9af8:	8818      	ldrh	r0, [r3, #0]
    9afa:	4b6e      	ldr	r3, [pc, #440]	; (9cb4 <CompactItem+0x1f8>)
    9afc:	4798      	blx	r3
    9afe:	4683      	mov	fp, r0
    if ( cache == NULL )
    9b00:	2800      	cmp	r0, #0
    9b02:	d100      	bne.n	9b06 <CompactItem+0x4a>
    9b04:	e0ca      	b.n	9c9c <CompactItem+0x1e0>
    uint16_t blockPointer = cache->lastBlock;
    9b06:	7882      	ldrb	r2, [r0, #2]
    9b08:	78c3      	ldrb	r3, [r0, #3]
    9b0a:	021b      	lsls	r3, r3, #8
    9b0c:	4313      	orrs	r3, r2
    9b0e:	0019      	movs	r1, r3
    9b10:	9303      	str	r3, [sp, #12]
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9b12:	4b69      	ldr	r3, [pc, #420]	; (9cb8 <CompactItem+0x1fc>)
    9b14:	7818      	ldrb	r0, [r3, #0]
    9b16:	2310      	movs	r3, #16
    9b18:	aa06      	add	r2, sp, #24
    9b1a:	4c68      	ldr	r4, [pc, #416]	; (9cbc <CompactItem+0x200>)
    9b1c:	47a0      	blx	r4
    if (s_compactItemLength == 0)
    9b1e:	4b63      	ldr	r3, [pc, #396]	; (9cac <CompactItem+0x1f0>)
    9b20:	881a      	ldrh	r2, [r3, #0]
    9b22:	2a00      	cmp	r2, #0
    9b24:	d02e      	beq.n	9b84 <CompactItem+0xc8>
    uint16_t lastBlock = s_sectorHead;
    9b26:	4b66      	ldr	r3, [pc, #408]	; (9cc0 <CompactItem+0x204>)
    9b28:	881b      	ldrh	r3, [r3, #0]
    9b2a:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    9b2c:	ab06      	add	r3, sp, #24
    9b2e:	891b      	ldrh	r3, [r3, #8]
        blockHeader.itemLength = s_compactItemLength;
    9b30:	a906      	add	r1, sp, #24
    9b32:	810a      	strh	r2, [r1, #8]
    9b34:	1c19      	adds	r1, r3, #0
    9b36:	4293      	cmp	r3, r2
    9b38:	d900      	bls.n	9b3c <CompactItem+0x80>
    9b3a:	1c11      	adds	r1, r2, #0
    9b3c:	b28b      	uxth	r3, r1
    blockHeader.blockOffset = 0u;
    9b3e:	aa06      	add	r2, sp, #24
    9b40:	2100      	movs	r1, #0
    9b42:	8091      	strh	r1, [r2, #4]
    blockHeader.blockLength = blockHeader.itemLength;
    9b44:	8910      	ldrh	r0, [r2, #8]
    9b46:	80d0      	strh	r0, [r2, #6]
    blockHeader.previousBlock = 0x0000u;
    9b48:	8151      	strh	r1, [r2, #10]
    blockHeader.writeCount = 0u;
    9b4a:	8191      	strh	r1, [r2, #12]
    uint16_t currLength = BLOCK_HEADER_SIZE + bytesToGather;
    9b4c:	001c      	movs	r4, r3
    9b4e:	3410      	adds	r4, #16
    9b50:	b2a4      	uxth	r4, r4
    memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9b52:	495c      	ldr	r1, [pc, #368]	; (9cc4 <CompactItem+0x208>)
    9b54:	ca61      	ldmia	r2!, {r0, r5, r6}
    9b56:	c161      	stmia	r1!, {r0, r5, r6}
    9b58:	6812      	ldr	r2, [r2, #0]
    9b5a:	600a      	str	r2, [r1, #0]
    if (currLength <= ROW_SIZE)
    9b5c:	2280      	movs	r2, #128	; 0x80
    9b5e:	0052      	lsls	r2, r2, #1
    9b60:	4294      	cmp	r4, r2
    9b62:	d939      	bls.n	9bd8 <CompactItem+0x11c>
    9b64:	2600      	movs	r6, #0
    9b66:	2310      	movs	r3, #16
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9b68:	2280      	movs	r2, #128	; 0x80
    9b6a:	0052      	lsls	r2, r2, #1
    9b6c:	4691      	mov	r9, r2
    9b6e:	4669      	mov	r1, sp
    9b70:	824a      	strh	r2, [r1, #18]
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9b72:	4a51      	ldr	r2, [pc, #324]	; (9cb8 <CompactItem+0x1fc>)
    9b74:	4692      	mov	sl, r2
    9b76:	001a      	movs	r2, r3
    9b78:	e088      	b.n	9c8c <CompactItem+0x1d0>
        CompactSectorIfNeeded(s_compactItemLength + BLOCK_HEADER_SIZE);
    9b7a:	3010      	adds	r0, #16
    9b7c:	b280      	uxth	r0, r0
    9b7e:	4b52      	ldr	r3, [pc, #328]	; (9cc8 <CompactItem+0x20c>)
    9b80:	4798      	blx	r3
    9b82:	e7b8      	b.n	9af6 <CompactItem+0x3a>
        CompactSectorIfNeeded(blockHeader.itemLength + BLOCK_HEADER_SIZE);
    9b84:	ab06      	add	r3, sp, #24
    9b86:	8918      	ldrh	r0, [r3, #8]
    9b88:	3010      	adds	r0, #16
    9b8a:	b280      	uxth	r0, r0
    9b8c:	4b4e      	ldr	r3, [pc, #312]	; (9cc8 <CompactItem+0x20c>)
    9b8e:	4798      	blx	r3
        cache = FindItemCache(s_compactItemId);
    9b90:	4b47      	ldr	r3, [pc, #284]	; (9cb0 <CompactItem+0x1f4>)
    9b92:	8818      	ldrh	r0, [r3, #0]
    9b94:	4b47      	ldr	r3, [pc, #284]	; (9cb4 <CompactItem+0x1f8>)
    9b96:	4798      	blx	r3
    9b98:	4683      	mov	fp, r0
        assert(cache != NULL);
    9b9a:	2800      	cmp	r0, #0
    9b9c:	d015      	beq.n	9bca <CompactItem+0x10e>
        blockPointer = cache->lastBlock;
    9b9e:	7882      	ldrb	r2, [r0, #2]
    9ba0:	78c3      	ldrb	r3, [r0, #3]
    9ba2:	021b      	lsls	r3, r3, #8
    9ba4:	4313      	orrs	r3, r2
    9ba6:	0019      	movs	r1, r3
    9ba8:	9303      	str	r3, [sp, #12]
        D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9baa:	ac06      	add	r4, sp, #24
    9bac:	4b42      	ldr	r3, [pc, #264]	; (9cb8 <CompactItem+0x1fc>)
    9bae:	7818      	ldrb	r0, [r3, #0]
    9bb0:	2310      	movs	r3, #16
    9bb2:	0022      	movs	r2, r4
    9bb4:	4d41      	ldr	r5, [pc, #260]	; (9cbc <CompactItem+0x200>)
    9bb6:	47a8      	blx	r5
    uint16_t lastBlock = s_sectorHead;
    9bb8:	4b41      	ldr	r3, [pc, #260]	; (9cc0 <CompactItem+0x204>)
    9bba:	881b      	ldrh	r3, [r3, #0]
    9bbc:	9305      	str	r3, [sp, #20]
    uint16_t bytesToGather = blockHeader.itemLength;
    9bbe:	8923      	ldrh	r3, [r4, #8]
    if ( s_compactItemLength != 0u )
    9bc0:	4a3a      	ldr	r2, [pc, #232]	; (9cac <CompactItem+0x1f0>)
    9bc2:	8812      	ldrh	r2, [r2, #0]
    9bc4:	2a00      	cmp	r2, #0
    9bc6:	d0ba      	beq.n	9b3e <CompactItem+0x82>
    9bc8:	e7b2      	b.n	9b30 <CompactItem+0x74>
        assert(cache != NULL);
    9bca:	4b40      	ldr	r3, [pc, #256]	; (9ccc <CompactItem+0x210>)
    9bcc:	4a40      	ldr	r2, [pc, #256]	; (9cd0 <CompactItem+0x214>)
    9bce:	2191      	movs	r1, #145	; 0x91
    9bd0:	00c9      	lsls	r1, r1, #3
    9bd2:	4840      	ldr	r0, [pc, #256]	; (9cd4 <CompactItem+0x218>)
    9bd4:	4c40      	ldr	r4, [pc, #256]	; (9cd8 <CompactItem+0x21c>)
    9bd6:	47a0      	blx	r4
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    9bd8:	4a37      	ldr	r2, [pc, #220]	; (9cb8 <CompactItem+0x1fc>)
    9bda:	7810      	ldrb	r0, [r2, #0]
    9bdc:	4a39      	ldr	r2, [pc, #228]	; (9cc4 <CompactItem+0x208>)
    9bde:	3210      	adds	r2, #16
    9be0:	9200      	str	r2, [sp, #0]
    9be2:	2200      	movs	r2, #0
    9be4:	9903      	ldr	r1, [sp, #12]
    9be6:	4c3d      	ldr	r4, [pc, #244]	; (9cdc <CompactItem+0x220>)
    9be8:	47a0      	blx	r4
            return S_Nv_ReturnValue_Failure;
    9bea:	2301      	movs	r3, #1
        if (!GatherData(s_sector, blockPointer, 0u, bytesToGather, (dataBlock + BLOCK_HEADER_SIZE )))
    9bec:	2800      	cmp	r0, #0
    9bee:	d100      	bne.n	9bf2 <CompactItem+0x136>
    9bf0:	e770      	b.n	9ad4 <CompactItem+0x18>
        memcpy(dataBlock, &blockHeader, BLOCK_HEADER_SIZE);
    9bf2:	4934      	ldr	r1, [pc, #208]	; (9cc4 <CompactItem+0x208>)
    9bf4:	ab06      	add	r3, sp, #24
    9bf6:	000a      	movs	r2, r1
    9bf8:	0018      	movs	r0, r3
    9bfa:	c870      	ldmia	r0!, {r4, r5, r6}
    9bfc:	c270      	stmia	r2!, {r4, r5, r6}
    9bfe:	6800      	ldr	r0, [r0, #0]
    9c00:	6010      	str	r0, [r2, #0]
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9c02:	88da      	ldrh	r2, [r3, #6]
    9c04:	3210      	adds	r2, #16
    9c06:	b292      	uxth	r2, r2
    9c08:	4b2d      	ldr	r3, [pc, #180]	; (9cc0 <CompactItem+0x204>)
    9c0a:	8818      	ldrh	r0, [r3, #0]
    9c0c:	4b34      	ldr	r3, [pc, #208]	; (9ce0 <CompactItem+0x224>)
    9c0e:	4798      	blx	r3
            return false;
    9c10:	2300      	movs	r3, #0
        if ( !WriteAndCheck(s_sectorHead, dataBlock, blockHeader.blockLength + BLOCK_HEADER_SIZE) )
    9c12:	2800      	cmp	r0, #0
    9c14:	d100      	bne.n	9c18 <CompactItem+0x15c>
    9c16:	e75d      	b.n	9ad4 <CompactItem+0x18>
        UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_64BYTE_ALIGNMENT);
    9c18:	ab06      	add	r3, sp, #24
    9c1a:	88d8      	ldrh	r0, [r3, #6]
    9c1c:	3010      	adds	r0, #16
    9c1e:	b280      	uxth	r0, r0
    9c20:	2102      	movs	r1, #2
    9c22:	4b30      	ldr	r3, [pc, #192]	; (9ce4 <CompactItem+0x228>)
    9c24:	4798      	blx	r3
    s_compactItemId = 0u;
    9c26:	2300      	movs	r3, #0
    9c28:	4a21      	ldr	r2, [pc, #132]	; (9cb0 <CompactItem+0x1f4>)
    9c2a:	8013      	strh	r3, [r2, #0]
    s_compactItemLength = 0u;
    9c2c:	4a1f      	ldr	r2, [pc, #124]	; (9cac <CompactItem+0x1f0>)
    9c2e:	8013      	strh	r3, [r2, #0]
    cache->lastBlock = lastBlock;
    9c30:	465b      	mov	r3, fp
    9c32:	9905      	ldr	r1, [sp, #20]
    9c34:	7099      	strb	r1, [r3, #2]
    9c36:	0a0b      	lsrs	r3, r1, #8
    9c38:	465a      	mov	r2, fp
    9c3a:	70d3      	strb	r3, [r2, #3]
    return S_Nv_ReturnValue_Ok;
    9c3c:	2300      	movs	r3, #0
    9c3e:	e749      	b.n	9ad4 <CompactItem+0x18>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9c40:	b2ad      	uxth	r5, r5
            if (!GatherData(s_sector, blockPointer, inDataOffset, bytesToGatherAndCommit - dataBlockOffset , (dataBlock + dataBlockOffset)))
    9c42:	1aaf      	subs	r7, r5, r2
    9c44:	b2bb      	uxth	r3, r7
    9c46:	0019      	movs	r1, r3
    9c48:	4653      	mov	r3, sl
    9c4a:	7818      	ldrb	r0, [r3, #0]
    9c4c:	4b1d      	ldr	r3, [pc, #116]	; (9cc4 <CompactItem+0x208>)
    9c4e:	189b      	adds	r3, r3, r2
    9c50:	9300      	str	r3, [sp, #0]
    9c52:	9102      	str	r1, [sp, #8]
    9c54:	000b      	movs	r3, r1
    9c56:	0032      	movs	r2, r6
    9c58:	9903      	ldr	r1, [sp, #12]
    9c5a:	4f20      	ldr	r7, [pc, #128]	; (9cdc <CompactItem+0x220>)
    9c5c:	47b8      	blx	r7
    9c5e:	2800      	cmp	r0, #0
    9c60:	d01e      	beq.n	9ca0 <CompactItem+0x1e4>
            if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToGatherAndCommit) )
    9c62:	4b17      	ldr	r3, [pc, #92]	; (9cc0 <CompactItem+0x204>)
    9c64:	8818      	ldrh	r0, [r3, #0]
    9c66:	002a      	movs	r2, r5
    9c68:	4916      	ldr	r1, [pc, #88]	; (9cc4 <CompactItem+0x208>)
    9c6a:	4b1d      	ldr	r3, [pc, #116]	; (9ce0 <CompactItem+0x224>)
    9c6c:	4798      	blx	r3
    9c6e:	2800      	cmp	r0, #0
    9c70:	d018      	beq.n	9ca4 <CompactItem+0x1e8>
            UpdateSectorHead(bytesToGatherAndCommit, ITEM_64BYTE_ALIGNMENT);
    9c72:	2102      	movs	r1, #2
    9c74:	0028      	movs	r0, r5
    9c76:	4b1b      	ldr	r3, [pc, #108]	; (9ce4 <CompactItem+0x228>)
    9c78:	4798      	blx	r3
            currLength -= bytesToGatherAndCommit;
    9c7a:	1b64      	subs	r4, r4, r5
    9c7c:	b2a4      	uxth	r4, r4
            inDataOffset += (bytesToGatherAndCommit - dataBlockOffset);
    9c7e:	9902      	ldr	r1, [sp, #8]
    9c80:	468c      	mov	ip, r1
    9c82:	4466      	add	r6, ip
    9c84:	b2b6      	uxth	r6, r6
            dataBlockOffset = 0;
    9c86:	2200      	movs	r2, #0
        } while(currLength > 0);
    9c88:	2c00      	cmp	r4, #0
    9c8a:	d0cc      	beq.n	9c26 <CompactItem+0x16a>
            bytesToGatherAndCommit = (currLength > ROW_SIZE) ? ROW_SIZE : currLength;
    9c8c:	1c25      	adds	r5, r4, #0
    9c8e:	454c      	cmp	r4, r9
    9c90:	d9d6      	bls.n	9c40 <CompactItem+0x184>
    9c92:	466b      	mov	r3, sp
    9c94:	8a5d      	ldrh	r5, [r3, #18]
    9c96:	e7d3      	b.n	9c40 <CompactItem+0x184>
        return S_Nv_ReturnValue_Ok;
    9c98:	2300      	movs	r3, #0
    9c9a:	e71b      	b.n	9ad4 <CompactItem+0x18>
        return S_Nv_ReturnValue_Ok;
    9c9c:	2300      	movs	r3, #0
    9c9e:	e719      	b.n	9ad4 <CompactItem+0x18>
                return S_Nv_ReturnValue_Failure;
    9ca0:	2301      	movs	r3, #1
    9ca2:	e717      	b.n	9ad4 <CompactItem+0x18>
                return false;
    9ca4:	2300      	movs	r3, #0
    9ca6:	e715      	b.n	9ad4 <CompactItem+0x18>
    9ca8:	000092cd 	.word	0x000092cd
    9cac:	2000031a 	.word	0x2000031a
    9cb0:	20000318 	.word	0x20000318
    9cb4:	000094c5 	.word	0x000094c5
    9cb8:	20000350 	.word	0x20000350
    9cbc:	0000907d 	.word	0x0000907d
    9cc0:	20000352 	.word	0x20000352
    9cc4:	20000204 	.word	0x20000204
    9cc8:	00009a41 	.word	0x00009a41
    9ccc:	00013414 	.word	0x00013414
    9cd0:	000135d0 	.word	0x000135d0
    9cd4:	000134a0 	.word	0x000134a0
    9cd8:	00011d75 	.word	0x00011d75
    9cdc:	00009365 	.word	0x00009365
    9ce0:	0000965d 	.word	0x0000965d
    9ce4:	000092e9 	.word	0x000092e9

00009ce8 <compactItemTimerFired>:
{
    9ce8:	b510      	push	{r4, lr}
    (void)CompactItem();
    9cea:	4b01      	ldr	r3, [pc, #4]	; (9cf0 <compactItemTimerFired+0x8>)
    9cec:	4798      	blx	r3
}
    9cee:	bd10      	pop	{r4, pc}
    9cf0:	00009abd 	.word	0x00009abd

00009cf4 <WriteDataBlockAndHeader>:
{
    9cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cf6:	46de      	mov	lr, fp
    9cf8:	4657      	mov	r7, sl
    9cfa:	464e      	mov	r6, r9
    9cfc:	4645      	mov	r5, r8
    9cfe:	b5e0      	push	{r5, r6, r7, lr}
    9d00:	b083      	sub	sp, #12
    9d02:	0004      	movs	r4, r0
    9d04:	468a      	mov	sl, r1
    memset(dataBlock, 0xFF, sizeof(dataBlock));
    9d06:	4d46      	ldr	r5, [pc, #280]	; (9e20 <WriteDataBlockAndHeader+0x12c>)
    9d08:	2280      	movs	r2, #128	; 0x80
    9d0a:	0052      	lsls	r2, r2, #1
    9d0c:	21ff      	movs	r1, #255	; 0xff
    9d0e:	0028      	movs	r0, r5
    9d10:	4b44      	ldr	r3, [pc, #272]	; (9e24 <WriteDataBlockAndHeader+0x130>)
    9d12:	4798      	blx	r3
    pBlockHeader->dataCrc = ComputeCrc(pData, pBlockHeader->blockLength, 0xFFFF);
    9d14:	4e44      	ldr	r6, [pc, #272]	; (9e28 <WriteDataBlockAndHeader+0x134>)
    9d16:	79a3      	ldrb	r3, [r4, #6]
    9d18:	79e1      	ldrb	r1, [r4, #7]
    9d1a:	0209      	lsls	r1, r1, #8
    9d1c:	4319      	orrs	r1, r3
    9d1e:	0032      	movs	r2, r6
    9d20:	4650      	mov	r0, sl
    9d22:	4f42      	ldr	r7, [pc, #264]	; (9e2c <WriteDataBlockAndHeader+0x138>)
    9d24:	47b8      	blx	r7
    9d26:	7020      	strb	r0, [r4, #0]
    9d28:	0a00      	lsrs	r0, r0, #8
    9d2a:	7060      	strb	r0, [r4, #1]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9d2c:	0032      	movs	r2, r6
    9d2e:	210e      	movs	r1, #14
    9d30:	0020      	movs	r0, r4
    9d32:	47b8      	blx	r7
    pBlockHeader->headerCrc = ComputeHeaderCrc(pBlockHeader);
    9d34:	73a0      	strb	r0, [r4, #14]
    9d36:	0a00      	lsrs	r0, r0, #8
    9d38:	73e0      	strb	r0, [r4, #15]
    memcpy(dataBlock, pBlockHeader, BLOCK_HEADER_SIZE);
    9d3a:	2210      	movs	r2, #16
    9d3c:	0021      	movs	r1, r4
    9d3e:	0028      	movs	r0, r5
    9d40:	4b3b      	ldr	r3, [pc, #236]	; (9e30 <WriteDataBlockAndHeader+0x13c>)
    9d42:	4798      	blx	r3
    currentLength = pBlockHeader->blockLength + BLOCK_HEADER_SIZE;
    9d44:	79a3      	ldrb	r3, [r4, #6]
    9d46:	79e2      	ldrb	r2, [r4, #7]
    9d48:	0212      	lsls	r2, r2, #8
    9d4a:	431a      	orrs	r2, r3
    9d4c:	0015      	movs	r5, r2
    9d4e:	3510      	adds	r5, #16
    9d50:	b2ad      	uxth	r5, r5
    if (pData != NULL )
    9d52:	4653      	mov	r3, sl
    9d54:	2b00      	cmp	r3, #0
    9d56:	d012      	beq.n	9d7e <WriteDataBlockAndHeader+0x8a>
        if(currentLength <= ROW_SIZE)
    9d58:	2380      	movs	r3, #128	; 0x80
    9d5a:	005b      	lsls	r3, r3, #1
    9d5c:	429d      	cmp	r5, r3
    9d5e:	d909      	bls.n	9d74 <WriteDataBlockAndHeader+0x80>
    9d60:	2600      	movs	r6, #0
    9d62:	2710      	movs	r7, #16
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9d64:	2380      	movs	r3, #128	; 0x80
    9d66:	005b      	lsls	r3, r3, #1
    9d68:	469b      	mov	fp, r3
    9d6a:	466a      	mov	r2, sp
    9d6c:	80d3      	strh	r3, [r2, #6]
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9d6e:	4b2c      	ldr	r3, [pc, #176]	; (9e20 <WriteDataBlockAndHeader+0x12c>)
    9d70:	4699      	mov	r9, r3
    9d72:	e045      	b.n	9e00 <WriteDataBlockAndHeader+0x10c>
            memcpy(dataBlock + BLOCK_HEADER_SIZE , pData, pBlockHeader->blockLength);
    9d74:	4651      	mov	r1, sl
    9d76:	482a      	ldr	r0, [pc, #168]	; (9e20 <WriteDataBlockAndHeader+0x12c>)
    9d78:	3010      	adds	r0, #16
    9d7a:	4b2d      	ldr	r3, [pc, #180]	; (9e30 <WriteDataBlockAndHeader+0x13c>)
    9d7c:	4798      	blx	r3
    if ( !WriteAndCheck(s_sectorHead, dataBlock, MIN((BLOCK_HEADER_SIZE + pBlockHeader->blockLength), ROW_SIZE)) )
    9d7e:	79a3      	ldrb	r3, [r4, #6]
    9d80:	79e2      	ldrb	r2, [r4, #7]
    9d82:	0212      	lsls	r2, r2, #8
    9d84:	431a      	orrs	r2, r3
    9d86:	3210      	adds	r2, #16
    9d88:	2380      	movs	r3, #128	; 0x80
    9d8a:	005b      	lsls	r3, r3, #1
    9d8c:	429a      	cmp	r2, r3
    9d8e:	dd00      	ble.n	9d92 <WriteDataBlockAndHeader+0x9e>
    9d90:	001a      	movs	r2, r3
    9d92:	b292      	uxth	r2, r2
    9d94:	4b27      	ldr	r3, [pc, #156]	; (9e34 <WriteDataBlockAndHeader+0x140>)
    9d96:	8818      	ldrh	r0, [r3, #0]
    9d98:	4921      	ldr	r1, [pc, #132]	; (9e20 <WriteDataBlockAndHeader+0x12c>)
    9d9a:	4b27      	ldr	r3, [pc, #156]	; (9e38 <WriteDataBlockAndHeader+0x144>)
    9d9c:	4798      	blx	r3
    9d9e:	4680      	mov	r8, r0
    9da0:	2800      	cmp	r0, #0
    9da2:	d033      	beq.n	9e0c <WriteDataBlockAndHeader+0x118>
    UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT );
    9da4:	79a3      	ldrb	r3, [r4, #6]
    9da6:	79e0      	ldrb	r0, [r4, #7]
    9da8:	0200      	lsls	r0, r0, #8
    9daa:	4318      	orrs	r0, r3
    9dac:	3010      	adds	r0, #16
    9dae:	b280      	uxth	r0, r0
    9db0:	2102      	movs	r1, #2
    9db2:	4b22      	ldr	r3, [pc, #136]	; (9e3c <WriteDataBlockAndHeader+0x148>)
    9db4:	4798      	blx	r3
}
    9db6:	4640      	mov	r0, r8
    9db8:	b003      	add	sp, #12
    9dba:	bc3c      	pop	{r2, r3, r4, r5}
    9dbc:	4690      	mov	r8, r2
    9dbe:	4699      	mov	r9, r3
    9dc0:	46a2      	mov	sl, r4
    9dc2:	46ab      	mov	fp, r5
    9dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9dc6:	b2a4      	uxth	r4, r4
                memcpy(dataBlock + dataBlockOffset, pData + inDataOffset, bytesToCommit - dataBlockOffset);
    9dc8:	464b      	mov	r3, r9
    9dca:	19d8      	adds	r0, r3, r7
    9dcc:	1be2      	subs	r2, r4, r7
    9dce:	4653      	mov	r3, sl
    9dd0:	1999      	adds	r1, r3, r6
    9dd2:	4b17      	ldr	r3, [pc, #92]	; (9e30 <WriteDataBlockAndHeader+0x13c>)
    9dd4:	4798      	blx	r3
                if ( !WriteAndCheck(s_sectorHead, dataBlock, bytesToCommit))
    9dd6:	4b17      	ldr	r3, [pc, #92]	; (9e34 <WriteDataBlockAndHeader+0x140>)
    9dd8:	8818      	ldrh	r0, [r3, #0]
    9dda:	0022      	movs	r2, r4
    9ddc:	4649      	mov	r1, r9
    9dde:	4b16      	ldr	r3, [pc, #88]	; (9e38 <WriteDataBlockAndHeader+0x144>)
    9de0:	4798      	blx	r3
    9de2:	4680      	mov	r8, r0
    9de4:	2800      	cmp	r0, #0
    9de6:	d0e6      	beq.n	9db6 <WriteDataBlockAndHeader+0xc2>
                UpdateSectorHead(bytesToCommit, ITEM_64BYTE_ALIGNMENT);
    9de8:	2102      	movs	r1, #2
    9dea:	0020      	movs	r0, r4
    9dec:	4b13      	ldr	r3, [pc, #76]	; (9e3c <WriteDataBlockAndHeader+0x148>)
    9dee:	4798      	blx	r3
                currentLength -= bytesToCommit;
    9df0:	1b2d      	subs	r5, r5, r4
    9df2:	b2ad      	uxth	r5, r5
                inDataOffset += (bytesToCommit - dataBlockOffset);
    9df4:	1be4      	subs	r4, r4, r7
    9df6:	1936      	adds	r6, r6, r4
    9df8:	b2b6      	uxth	r6, r6
                dataBlockOffset = 0;
    9dfa:	2700      	movs	r7, #0
            } while(currentLength > 0);
    9dfc:	2d00      	cmp	r5, #0
    9dfe:	d0da      	beq.n	9db6 <WriteDataBlockAndHeader+0xc2>
                bytesToCommit = (currentLength > ROW_SIZE) ? ROW_SIZE : currentLength;
    9e00:	1c2c      	adds	r4, r5, #0
    9e02:	455d      	cmp	r5, fp
    9e04:	d9df      	bls.n	9dc6 <WriteDataBlockAndHeader+0xd2>
    9e06:	466b      	mov	r3, sp
    9e08:	88dc      	ldrh	r4, [r3, #6]
    9e0a:	e7dc      	b.n	9dc6 <WriteDataBlockAndHeader+0xd2>
        UpdateSectorHead((pBlockHeader->blockLength + BLOCK_HEADER_SIZE), ITEM_64BYTE_ALIGNMENT);
    9e0c:	79a3      	ldrb	r3, [r4, #6]
    9e0e:	79e0      	ldrb	r0, [r4, #7]
    9e10:	0200      	lsls	r0, r0, #8
    9e12:	4318      	orrs	r0, r3
    9e14:	3010      	adds	r0, #16
    9e16:	b280      	uxth	r0, r0
    9e18:	2102      	movs	r1, #2
    9e1a:	4b08      	ldr	r3, [pc, #32]	; (9e3c <WriteDataBlockAndHeader+0x148>)
    9e1c:	4798      	blx	r3
        return false;
    9e1e:	e7ca      	b.n	9db6 <WriteDataBlockAndHeader+0xc2>
    9e20:	20000204 	.word	0x20000204
    9e24:	00011e49 	.word	0x00011e49
    9e28:	0000ffff 	.word	0x0000ffff
    9e2c:	00009325 	.word	0x00009325
    9e30:	00011e37 	.word	0x00011e37
    9e34:	20000352 	.word	0x20000352
    9e38:	0000965d 	.word	0x0000965d
    9e3c:	000092e9 	.word	0x000092e9

00009e40 <S_Nv_EarlyInit>:
/***************************************************************************************************
* EXPORTED FUNCTIONS
***************************************************************************************************/

void S_Nv_EarlyInit(void)
{
    9e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e42:	46ce      	mov	lr, r9
    9e44:	4647      	mov	r7, r8
    9e46:	b580      	push	{r7, lr}
    9e48:	b091      	sub	sp, #68	; 0x44
    SnvRevisioin_t revisionNumber;
    s_itemCount = 0u;
    9e4a:	2200      	movs	r2, #0
    9e4c:	4bb3      	ldr	r3, [pc, #716]	; (a11c <S_Nv_EarlyInit+0x2dc>)
    9e4e:	701a      	strb	r2, [r3, #0]
    SectorHeader_t sectorHeader;

    uint8_t lastSector = 0xFFu;
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;

    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9e50:	2400      	movs	r4, #0
    uint32_t lastSectorSequence = 0xFFFFFFFFuL;
    9e52:	2301      	movs	r3, #1
    9e54:	425b      	negs	r3, r3
    9e56:	4699      	mov	r9, r3
    uint8_t lastSector = 0xFFu;
    9e58:	27ff      	movs	r7, #255	; 0xff
    {
        D_Nv_Read(sector, 0u, (uint8_t*) &sectorHeader, SECTOR_HEADER_SIZE);
    9e5a:	4eb1      	ldr	r6, [pc, #708]	; (a120 <S_Nv_EarlyInit+0x2e0>)
    9e5c:	2312      	movs	r3, #18
    9e5e:	aa0b      	add	r2, sp, #44	; 0x2c
    9e60:	2100      	movs	r1, #0
    9e62:	0020      	movs	r0, r4
    9e64:	47b0      	blx	r6
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    9e66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9e6a:	9301      	str	r3, [sp, #4]
    9e6c:	406b      	eors	r3, r5
    9e6e:	3301      	adds	r3, #1
    9e70:	d01d      	beq.n	9eae <S_Nv_EarlyInit+0x6e>
    for ( uint8_t sector = FIRST_SECTOR; sector < (FIRST_SECTOR + SECTOR_COUNT); sector++ )
    9e72:	3401      	adds	r4, #1
    9e74:	b2e4      	uxtb	r4, r4
    9e76:	2c02      	cmp	r4, #2
    9e78:	d1f0      	bne.n	9e5c <S_Nv_EarlyInit+0x1c>
                lastSectorSequence = sectorHeader.sequenceNumber;
            }
        }
    }

    if ( lastSector == 0xFFu )
    9e7a:	2fff      	cmp	r7, #255	; 0xff
    9e7c:	d057      	beq.n	9f2e <S_Nv_EarlyInit+0xee>
        s_itemCount = 0u;
    }
    else
    {
        // load active sector
        s_sector = lastSector;
    9e7e:	4ba9      	ldr	r3, [pc, #676]	; (a124 <S_Nv_EarlyInit+0x2e4>)
    9e80:	701f      	strb	r7, [r3, #0]
    if (SNV_REV_1 == revisionNumber)
    9e82:	4643      	mov	r3, r8
    9e84:	2b01      	cmp	r3, #1
    9e86:	d100      	bne.n	9e8a <S_Nv_EarlyInit+0x4a>
    9e88:	e07b      	b.n	9f82 <S_Nv_EarlyInit+0x142>
    else if (SNV_REV_2 == revisionNumber)
    9e8a:	4643      	mov	r3, r8
    9e8c:	2b02      	cmp	r3, #2
    9e8e:	d16a      	bne.n	9f66 <S_Nv_EarlyInit+0x126>
        s_sectorHead = ITEMS_AREA_START_ADDRESS;
    9e90:	2280      	movs	r2, #128	; 0x80
    9e92:	0052      	lsls	r2, r2, #1
    9e94:	4ba4      	ldr	r3, [pc, #656]	; (a128 <S_Nv_EarlyInit+0x2e8>)
    9e96:	801a      	strh	r2, [r3, #0]
        D_Nv_Read(s_sector, 0, (uint8_t*) &sectorHeader, sizeof(SectorHeader_t));
    9e98:	2312      	movs	r3, #18
    9e9a:	aa06      	add	r2, sp, #24
    9e9c:	2100      	movs	r1, #0
    9e9e:	0038      	movs	r0, r7
    9ea0:	4c9f      	ldr	r4, [pc, #636]	; (a120 <S_Nv_EarlyInit+0x2e0>)
    9ea2:	47a0      	blx	r4
        while ( s_sectorHead < SECTOR_SIZE )
    9ea4:	4da0      	ldr	r5, [pc, #640]	; (a128 <S_Nv_EarlyInit+0x2e8>)
                UpdateSectorHead(0, itemAlignment);
    9ea6:	4ba1      	ldr	r3, [pc, #644]	; (a12c <S_Nv_EarlyInit+0x2ec>)
    9ea8:	4698      	mov	r8, r3
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9eaa:	002e      	movs	r6, r5
    9eac:	e10f      	b.n	a0ce <S_Nv_EarlyInit+0x28e>
        if (((sectorHeader.sequenceNumber ^ sectorHeader.sequenceParity) == 0xFFFFFFFFuL) &&
    9eae:	ab02      	add	r3, sp, #8
    9eb0:	2226      	movs	r2, #38	; 0x26
    9eb2:	189b      	adds	r3, r3, r2
    9eb4:	781b      	ldrb	r3, [r3, #0]
    9eb6:	2b41      	cmp	r3, #65	; 0x41
    9eb8:	d1db      	bne.n	9e72 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[0] == (uint8_t) 'A') &&
    9eba:	ab02      	add	r3, sp, #8
    9ebc:	3201      	adds	r2, #1
    9ebe:	189b      	adds	r3, r3, r2
    9ec0:	781b      	ldrb	r3, [r3, #0]
    9ec2:	2b54      	cmp	r3, #84	; 0x54
    9ec4:	d1d5      	bne.n	9e72 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[1] == (uint8_t) 'T') &&
    9ec6:	ab02      	add	r3, sp, #8
    9ec8:	3201      	adds	r2, #1
    9eca:	189b      	adds	r3, r3, r2
    9ecc:	781b      	ldrb	r3, [r3, #0]
    9ece:	2b53      	cmp	r3, #83	; 0x53
    9ed0:	d1cf      	bne.n	9e72 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[2] == (uint8_t) 'S') &&
    9ed2:	ab02      	add	r3, sp, #8
    9ed4:	3201      	adds	r2, #1
    9ed6:	189b      	adds	r3, r3, r2
    9ed8:	781b      	ldrb	r3, [r3, #0]
    9eda:	2b4e      	cmp	r3, #78	; 0x4e
    9edc:	d1c9      	bne.n	9e72 <S_Nv_EarlyInit+0x32>
            (sectorHeader.signature[3] == (uint8_t) 'N') &&
    9ede:	ab02      	add	r3, sp, #8
    9ee0:	3201      	adds	r2, #1
    9ee2:	189b      	adds	r3, r3, r2
    9ee4:	781b      	ldrb	r3, [r3, #0]
    9ee6:	2b76      	cmp	r3, #118	; 0x76
    9ee8:	d1c3      	bne.n	9e72 <S_Nv_EarlyInit+0x32>
            if ( sectorHeader.signature[5] == (uint8_t) '1')
    9eea:	ab02      	add	r3, sp, #8
    9eec:	3201      	adds	r2, #1
    9eee:	189b      	adds	r3, r3, r2
    9ef0:	781b      	ldrb	r3, [r3, #0]
    9ef2:	2b31      	cmp	r3, #49	; 0x31
    9ef4:	d106      	bne.n	9f04 <S_Nv_EarlyInit+0xc4>
                if (pSectorHeaderSnv1->isActive == 0x0000u)
    9ef6:	ab02      	add	r3, sp, #8
    9ef8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9efa:	2b00      	cmp	r3, #0
    9efc:	d1b9      	bne.n	9e72 <S_Nv_EarlyInit+0x32>
                    revisionNumber = SNV_REV_1;
    9efe:	2301      	movs	r3, #1
    9f00:	4698      	mov	r8, r3
    9f02:	e00f      	b.n	9f24 <S_Nv_EarlyInit+0xe4>
            else if (sectorHeader.signature[5] == (uint8_t) '2')
    9f04:	2b32      	cmp	r3, #50	; 0x32
    9f06:	d1b4      	bne.n	9e72 <S_Nv_EarlyInit+0x32>
    return ComputeCrc(((uint8_t*) pSectorHeader) + sizeof(pSectorHeader->headerCrc), (sizeof(SectorHeader_t)- sizeof(pSectorHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    9f08:	4a89      	ldr	r2, [pc, #548]	; (a130 <S_Nv_EarlyInit+0x2f0>)
    9f0a:	2110      	movs	r1, #16
    9f0c:	2026      	movs	r0, #38	; 0x26
    9f0e:	ab02      	add	r3, sp, #8
    9f10:	469c      	mov	ip, r3
    9f12:	4460      	add	r0, ip
    9f14:	4b87      	ldr	r3, [pc, #540]	; (a134 <S_Nv_EarlyInit+0x2f4>)
    9f16:	4798      	blx	r3
              if (headerCrc == sectorHeader.headerCrc)
    9f18:	ab02      	add	r3, sp, #8
    9f1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9f1c:	4283      	cmp	r3, r0
    9f1e:	d1a8      	bne.n	9e72 <S_Nv_EarlyInit+0x32>
                  revisionNumber = SNV_REV_2;
    9f20:	2302      	movs	r3, #2
    9f22:	4698      	mov	r8, r3
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    9f24:	454d      	cmp	r5, r9
    9f26:	d2a4      	bcs.n	9e72 <S_Nv_EarlyInit+0x32>
                lastSectorSequence = sectorHeader.sequenceNumber;
    9f28:	46a9      	mov	r9, r5
            if ( sectorHeader.sequenceNumber < lastSectorSequence )
    9f2a:	0027      	movs	r7, r4
    9f2c:	e7a1      	b.n	9e72 <S_Nv_EarlyInit+0x32>
        s_sector = FIRST_SECTOR;
    9f2e:	2200      	movs	r2, #0
    9f30:	4b7c      	ldr	r3, [pc, #496]	; (a124 <S_Nv_EarlyInit+0x2e4>)
    9f32:	701a      	strb	r2, [r3, #0]
            if ( EraseSector())
    9f34:	4c80      	ldr	r4, [pc, #512]	; (a138 <S_Nv_EarlyInit+0x2f8>)
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9f36:	4e81      	ldr	r6, [pc, #516]	; (a13c <S_Nv_EarlyInit+0x2fc>)
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9f38:	4d81      	ldr	r5, [pc, #516]	; (a140 <S_Nv_EarlyInit+0x300>)
    9f3a:	e006      	b.n	9f4a <S_Nv_EarlyInit+0x10a>
            s_sector++;
    9f3c:	4a79      	ldr	r2, [pc, #484]	; (a124 <S_Nv_EarlyInit+0x2e4>)
    9f3e:	7813      	ldrb	r3, [r2, #0]
    9f40:	3301      	adds	r3, #1
    9f42:	b2db      	uxtb	r3, r3
    9f44:	7013      	strb	r3, [r2, #0]
            if ( s_sector >= (FIRST_SECTOR + SECTOR_COUNT) )
    9f46:	2b01      	cmp	r3, #1
    9f48:	d815      	bhi.n	9f76 <S_Nv_EarlyInit+0x136>
            if ( EraseSector())
    9f4a:	47a0      	blx	r4
    9f4c:	2800      	cmp	r0, #0
    9f4e:	d0f5      	beq.n	9f3c <S_Nv_EarlyInit+0xfc>
                s_nextPageAddressAfterCompact = 0xFFFFu;
    9f50:	2301      	movs	r3, #1
    9f52:	425b      	negs	r3, r3
    9f54:	8033      	strh	r3, [r6, #0]
                if ( WriteSectorHeader(INITIAL_SECTOR_SEQUENCE_NUMBER))
    9f56:	2002      	movs	r0, #2
    9f58:	4240      	negs	r0, r0
    9f5a:	47a8      	blx	r5
    9f5c:	2800      	cmp	r0, #0
    9f5e:	d0ed      	beq.n	9f3c <S_Nv_EarlyInit+0xfc>
        s_itemCount = 0u;
    9f60:	2200      	movs	r2, #0
    9f62:	4b6e      	ldr	r3, [pc, #440]	; (a11c <S_Nv_EarlyInit+0x2dc>)
    9f64:	701a      	strb	r2, [r3, #0]

        LoadSector(revisionNumber);
    }
    s_earlyInitDone = true;
    9f66:	2201      	movs	r2, #1
    9f68:	4b76      	ldr	r3, [pc, #472]	; (a144 <S_Nv_EarlyInit+0x304>)
    9f6a:	701a      	strb	r2, [r3, #0]
}
    9f6c:	b011      	add	sp, #68	; 0x44
    9f6e:	bc0c      	pop	{r2, r3}
    9f70:	4690      	mov	r8, r2
    9f72:	4699      	mov	r9, r3
    9f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
                assert(false);
    9f76:	4b74      	ldr	r3, [pc, #464]	; (a148 <S_Nv_EarlyInit+0x308>)
    9f78:	4a74      	ldr	r2, [pc, #464]	; (a14c <S_Nv_EarlyInit+0x30c>)
    9f7a:	4975      	ldr	r1, [pc, #468]	; (a150 <S_Nv_EarlyInit+0x310>)
    9f7c:	4875      	ldr	r0, [pc, #468]	; (a154 <S_Nv_EarlyInit+0x314>)
    9f7e:	4c76      	ldr	r4, [pc, #472]	; (a158 <S_Nv_EarlyInit+0x318>)
    9f80:	47a0      	blx	r4
        s_sectorHead = sizeof(SectorHeaderSnv1_t);
    9f82:	2210      	movs	r2, #16
    9f84:	4b68      	ldr	r3, [pc, #416]	; (a128 <S_Nv_EarlyInit+0x2e8>)
    9f86:	801a      	strh	r2, [r3, #0]
    9f88:	2110      	movs	r1, #16
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    9f8a:	4e66      	ldr	r6, [pc, #408]	; (a124 <S_Nv_EarlyInit+0x2e4>)
    9f8c:	4d64      	ldr	r5, [pc, #400]	; (a120 <S_Nv_EarlyInit+0x2e0>)
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    9f8e:	4f69      	ldr	r7, [pc, #420]	; (a134 <S_Nv_EarlyInit+0x2f4>)
    9f90:	e072      	b.n	a078 <S_Nv_EarlyInit+0x238>
            else if ( blockHeader.isActive != 0x0000u )
    9f92:	ab06      	add	r3, sp, #24
    9f94:	881b      	ldrh	r3, [r3, #0]
    9f96:	2b00      	cmp	r3, #0
    9f98:	d007      	beq.n	9faa <S_Nv_EarlyInit+0x16a>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    9f9a:	ab06      	add	r3, sp, #24
    9f9c:	88d8      	ldrh	r0, [r3, #6]
    9f9e:	3010      	adds	r0, #16
    9fa0:	b280      	uxth	r0, r0
    9fa2:	2101      	movs	r1, #1
    9fa4:	4b61      	ldr	r3, [pc, #388]	; (a12c <S_Nv_EarlyInit+0x2ec>)
    9fa6:	4798      	blx	r3
    9fa8:	e061      	b.n	a06e <S_Nv_EarlyInit+0x22e>
                uint16_t id = blockHeader.id;
    9faa:	ab06      	add	r3, sp, #24
    9fac:	885c      	ldrh	r4, [r3, #2]
                Item_t *cache = FindItemCache(id);
    9fae:	0020      	movs	r0, r4
    9fb0:	4b6a      	ldr	r3, [pc, #424]	; (a15c <S_Nv_EarlyInit+0x31c>)
    9fb2:	4798      	blx	r3
                if (cache == NULL)
    9fb4:	2800      	cmp	r0, #0
    9fb6:	d010      	beq.n	9fda <S_Nv_EarlyInit+0x19a>
                cache->lastBlock = s_sectorHead;
    9fb8:	4b5b      	ldr	r3, [pc, #364]	; (a128 <S_Nv_EarlyInit+0x2e8>)
    9fba:	781a      	ldrb	r2, [r3, #0]
    9fbc:	7082      	strb	r2, [r0, #2]
    9fbe:	785b      	ldrb	r3, [r3, #1]
    9fc0:	70c3      	strb	r3, [r0, #3]
                if ( blockHeader.itemLength == 0u )
    9fc2:	ab06      	add	r3, sp, #24
    9fc4:	891b      	ldrh	r3, [r3, #8]
    9fc6:	2b00      	cmp	r3, #0
    9fc8:	d00b      	beq.n	9fe2 <S_Nv_EarlyInit+0x1a2>
                UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), ITEM_16BYTE_ALIGNMENT);
    9fca:	ab06      	add	r3, sp, #24
    9fcc:	88d8      	ldrh	r0, [r3, #6]
    9fce:	3010      	adds	r0, #16
    9fd0:	b280      	uxth	r0, r0
    9fd2:	2101      	movs	r1, #1
    9fd4:	4b55      	ldr	r3, [pc, #340]	; (a12c <S_Nv_EarlyInit+0x2ec>)
    9fd6:	4798      	blx	r3
    9fd8:	e049      	b.n	a06e <S_Nv_EarlyInit+0x22e>
                    cache = CreateItemCache(id);
    9fda:	0020      	movs	r0, r4
    9fdc:	4b60      	ldr	r3, [pc, #384]	; (a160 <S_Nv_EarlyInit+0x320>)
    9fde:	4798      	blx	r3
    9fe0:	e7ea      	b.n	9fb8 <S_Nv_EarlyInit+0x178>
                    DeleteItemCache(id);
    9fe2:	0020      	movs	r0, r4
    9fe4:	4b5f      	ldr	r3, [pc, #380]	; (a164 <S_Nv_EarlyInit+0x324>)
    9fe6:	4798      	blx	r3
    9fe8:	e7ef      	b.n	9fca <S_Nv_EarlyInit+0x18a>
                uint16_t crc = ComputeDataCrc(s_sector, s_sectorHead, &blockHeader);
    9fea:	4b4f      	ldr	r3, [pc, #316]	; (a128 <S_Nv_EarlyInit+0x2e8>)
    9fec:	8819      	ldrh	r1, [r3, #0]
    9fee:	4b4d      	ldr	r3, [pc, #308]	; (a124 <S_Nv_EarlyInit+0x2e4>)
    9ff0:	7818      	ldrb	r0, [r3, #0]
    9ff2:	aa02      	add	r2, sp, #8
    9ff4:	4b5c      	ldr	r3, [pc, #368]	; (a168 <S_Nv_EarlyInit+0x328>)
    9ff6:	4798      	blx	r3
                if (crc != blockHeader.dataCrc)
    9ff8:	ab02      	add	r3, sp, #8
    9ffa:	881b      	ldrh	r3, [r3, #0]
    9ffc:	4283      	cmp	r3, r0
    9ffe:	d007      	beq.n	a010 <S_Nv_EarlyInit+0x1d0>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    a000:	ab02      	add	r3, sp, #8
    a002:	88d8      	ldrh	r0, [r3, #6]
    a004:	3010      	adds	r0, #16
    a006:	b280      	uxth	r0, r0
    a008:	0021      	movs	r1, r4
    a00a:	4b48      	ldr	r3, [pc, #288]	; (a12c <S_Nv_EarlyInit+0x2ec>)
    a00c:	4798      	blx	r3
    a00e:	e05e      	b.n	a0ce <S_Nv_EarlyInit+0x28e>
                    uint16_t id = blockHeader.id;
    a010:	ab02      	add	r3, sp, #8
    a012:	885f      	ldrh	r7, [r3, #2]
                    Item_t *cache = FindItemCache(id);
    a014:	0038      	movs	r0, r7
    a016:	4b51      	ldr	r3, [pc, #324]	; (a15c <S_Nv_EarlyInit+0x31c>)
    a018:	4798      	blx	r3
                    if (cache == NULL)
    a01a:	2800      	cmp	r0, #0
    a01c:	d010      	beq.n	a040 <S_Nv_EarlyInit+0x200>
                    cache->lastBlock = s_sectorHead;
    a01e:	4b42      	ldr	r3, [pc, #264]	; (a128 <S_Nv_EarlyInit+0x2e8>)
    a020:	781a      	ldrb	r2, [r3, #0]
    a022:	7082      	strb	r2, [r0, #2]
    a024:	785b      	ldrb	r3, [r3, #1]
    a026:	70c3      	strb	r3, [r0, #3]
                    if ( blockHeader.itemLength == 0u )
    a028:	ab02      	add	r3, sp, #8
    a02a:	891b      	ldrh	r3, [r3, #8]
    a02c:	2b00      	cmp	r3, #0
    a02e:	d00b      	beq.n	a048 <S_Nv_EarlyInit+0x208>
                    UpdateSectorHead((BLOCK_HEADER_SIZE + blockHeader.blockLength), itemAlignment);
    a030:	ab02      	add	r3, sp, #8
    a032:	88d8      	ldrh	r0, [r3, #6]
    a034:	3010      	adds	r0, #16
    a036:	b280      	uxth	r0, r0
    a038:	0021      	movs	r1, r4
    a03a:	4b3c      	ldr	r3, [pc, #240]	; (a12c <S_Nv_EarlyInit+0x2ec>)
    a03c:	4798      	blx	r3
    a03e:	e046      	b.n	a0ce <S_Nv_EarlyInit+0x28e>
                        cache = CreateItemCache(id);
    a040:	0038      	movs	r0, r7
    a042:	4b47      	ldr	r3, [pc, #284]	; (a160 <S_Nv_EarlyInit+0x320>)
    a044:	4798      	blx	r3
    a046:	e7ea      	b.n	a01e <S_Nv_EarlyInit+0x1de>
                        DeleteItemCache(id);
    a048:	0038      	movs	r0, r7
    a04a:	4b46      	ldr	r3, [pc, #280]	; (a164 <S_Nv_EarlyInit+0x324>)
    a04c:	4798      	blx	r3
    a04e:	e7ef      	b.n	a030 <S_Nv_EarlyInit+0x1f0>
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    a050:	ab06      	add	r3, sp, #24
    a052:	89dc      	ldrh	r4, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader) + sizeof(pBlockHeader->isActive), sizeof(BlockHeaderSNv1_t) - (sizeof(pBlockHeader->isActive)  + sizeof(pBlockHeader->headerCrc)), 0xFFFF); // skip is Active and headerCrc fields
    a054:	4a36      	ldr	r2, [pc, #216]	; (a130 <S_Nv_EarlyInit+0x2f0>)
    a056:	210c      	movs	r1, #12
    a058:	2012      	movs	r0, #18
    a05a:	ab02      	add	r3, sp, #8
    a05c:	469c      	mov	ip, r3
    a05e:	4460      	add	r0, ip
    a060:	47b8      	blx	r7
            else if ( blockHeader.headerCrc != ComputeHeaderCrcSnv1(&blockHeader) )
    a062:	4284      	cmp	r4, r0
    a064:	d095      	beq.n	9f92 <S_Nv_EarlyInit+0x152>
                UpdateSectorHead(BLOCK_HEADER_SIZE, ITEM_16BYTE_ALIGNMENT);
    a066:	2101      	movs	r1, #1
    a068:	2010      	movs	r0, #16
    a06a:	4b30      	ldr	r3, [pc, #192]	; (a12c <S_Nv_EarlyInit+0x2ec>)
    a06c:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    a06e:	4b2e      	ldr	r3, [pc, #184]	; (a128 <S_Nv_EarlyInit+0x2e8>)
    a070:	8819      	ldrh	r1, [r3, #0]
    a072:	4b3e      	ldr	r3, [pc, #248]	; (a16c <S_Nv_EarlyInit+0x32c>)
    a074:	4299      	cmp	r1, r3
    a076:	d812      	bhi.n	a09e <S_Nv_EarlyInit+0x25e>
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a078:	ac06      	add	r4, sp, #24
    a07a:	7830      	ldrb	r0, [r6, #0]
    a07c:	2310      	movs	r3, #16
    a07e:	0022      	movs	r2, r4
    a080:	47a8      	blx	r5
        if ( pData[i] != 0xFFu )
    a082:	7823      	ldrb	r3, [r4, #0]
    a084:	2bff      	cmp	r3, #255	; 0xff
    a086:	d1e3      	bne.n	a050 <S_Nv_EarlyInit+0x210>
    a088:	ab06      	add	r3, sp, #24
    a08a:	211f      	movs	r1, #31
    a08c:	aa02      	add	r2, sp, #8
    a08e:	4694      	mov	ip, r2
    a090:	4461      	add	r1, ip
    a092:	785a      	ldrb	r2, [r3, #1]
    a094:	2aff      	cmp	r2, #255	; 0xff
    a096:	d1db      	bne.n	a050 <S_Nv_EarlyInit+0x210>
    a098:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    a09a:	428b      	cmp	r3, r1
    a09c:	d1f9      	bne.n	a092 <S_Nv_EarlyInit+0x252>
        if ( !CompactSector() )
    a09e:	4b34      	ldr	r3, [pc, #208]	; (a170 <S_Nv_EarlyInit+0x330>)
    a0a0:	4798      	blx	r3
    a0a2:	2800      	cmp	r0, #0
    a0a4:	d000      	beq.n	a0a8 <S_Nv_EarlyInit+0x268>
    a0a6:	e75e      	b.n	9f66 <S_Nv_EarlyInit+0x126>
            assert(false);
    a0a8:	4b27      	ldr	r3, [pc, #156]	; (a148 <S_Nv_EarlyInit+0x308>)
    a0aa:	4a32      	ldr	r2, [pc, #200]	; (a174 <S_Nv_EarlyInit+0x334>)
    a0ac:	4932      	ldr	r1, [pc, #200]	; (a178 <S_Nv_EarlyInit+0x338>)
    a0ae:	4829      	ldr	r0, [pc, #164]	; (a154 <S_Nv_EarlyInit+0x314>)
    a0b0:	4c29      	ldr	r4, [pc, #164]	; (a158 <S_Nv_EarlyInit+0x318>)
    a0b2:	47a0      	blx	r4
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    a0b4:	ab02      	add	r3, sp, #8
    a0b6:	89df      	ldrh	r7, [r3, #14]
    return ComputeCrc(((uint8_t*) pBlockHeader), (sizeof(BlockHeader_t) - sizeof(pBlockHeader->headerCrc)), 0xFFFFu); // skip headerCrc field
    a0b8:	4a1d      	ldr	r2, [pc, #116]	; (a130 <S_Nv_EarlyInit+0x2f0>)
    a0ba:	210e      	movs	r1, #14
    a0bc:	0018      	movs	r0, r3
    a0be:	4b1d      	ldr	r3, [pc, #116]	; (a134 <S_Nv_EarlyInit+0x2f4>)
    a0c0:	4798      	blx	r3
            else if ( blockHeader.headerCrc != ComputeHeaderCrc(&blockHeader) )
    a0c2:	4287      	cmp	r7, r0
    a0c4:	d091      	beq.n	9fea <S_Nv_EarlyInit+0x1aa>
                UpdateSectorHead(BLOCK_HEADER_SIZE, itemAlignment);
    a0c6:	0021      	movs	r1, r4
    a0c8:	2010      	movs	r0, #16
    a0ca:	4b18      	ldr	r3, [pc, #96]	; (a12c <S_Nv_EarlyInit+0x2ec>)
    a0cc:	4798      	blx	r3
        while ( s_sectorHead < SECTOR_SIZE )
    a0ce:	882b      	ldrh	r3, [r5, #0]
    a0d0:	4a26      	ldr	r2, [pc, #152]	; (a16c <S_Nv_EarlyInit+0x32c>)
    a0d2:	4293      	cmp	r3, r2
    a0d4:	d900      	bls.n	a0d8 <S_Nv_EarlyInit+0x298>
    a0d6:	e746      	b.n	9f66 <S_Nv_EarlyInit+0x126>
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    a0d8:	aa06      	add	r2, sp, #24
    a0da:	8a12      	ldrh	r2, [r2, #16]
    a0dc:	4914      	ldr	r1, [pc, #80]	; (a130 <S_Nv_EarlyInit+0x2f0>)
    a0de:	428a      	cmp	r2, r1
    a0e0:	d002      	beq.n	a0e8 <S_Nv_EarlyInit+0x2a8>
                itemAlignment = ITEM_NO_ALIGNMENT;
    a0e2:	2400      	movs	r4, #0
            if ((sectorHeader.nextPageAddressAfterCompact != 0xFFFFu)  && (s_sectorHead < sectorHeader.nextPageAddressAfterCompact))
    a0e4:	429a      	cmp	r2, r3
    a0e6:	d803      	bhi.n	a0f0 <S_Nv_EarlyInit+0x2b0>
                UpdateSectorHead(0, itemAlignment);
    a0e8:	2102      	movs	r1, #2
    a0ea:	2000      	movs	r0, #0
    a0ec:	47c0      	blx	r8
                itemAlignment = ITEM_64BYTE_ALIGNMENT;
    a0ee:	2402      	movs	r4, #2
            D_Nv_Read(s_sector, s_sectorHead, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a0f0:	8831      	ldrh	r1, [r6, #0]
    a0f2:	4b0c      	ldr	r3, [pc, #48]	; (a124 <S_Nv_EarlyInit+0x2e4>)
    a0f4:	7818      	ldrb	r0, [r3, #0]
    a0f6:	2310      	movs	r3, #16
    a0f8:	aa02      	add	r2, sp, #8
    a0fa:	4f09      	ldr	r7, [pc, #36]	; (a120 <S_Nv_EarlyInit+0x2e0>)
    a0fc:	47b8      	blx	r7
        if ( pData[i] != 0xFFu )
    a0fe:	ab02      	add	r3, sp, #8
    a100:	781b      	ldrb	r3, [r3, #0]
    a102:	2bff      	cmp	r3, #255	; 0xff
    a104:	d1d6      	bne.n	a0b4 <S_Nv_EarlyInit+0x274>
    a106:	ab02      	add	r3, sp, #8
    a108:	210f      	movs	r1, #15
    a10a:	469c      	mov	ip, r3
    a10c:	4461      	add	r1, ip
    a10e:	785a      	ldrb	r2, [r3, #1]
    a110:	2aff      	cmp	r2, #255	; 0xff
    a112:	d1cf      	bne.n	a0b4 <S_Nv_EarlyInit+0x274>
    a114:	3301      	adds	r3, #1
    for ( uint16_t i = 0u; i < length; i++ )
    a116:	428b      	cmp	r3, r1
    a118:	d1f9      	bne.n	a10e <S_Nv_EarlyInit+0x2ce>
    a11a:	e724      	b.n	9f66 <S_Nv_EarlyInit+0x126>
    a11c:	20000348 	.word	0x20000348
    a120:	0000907d 	.word	0x0000907d
    a124:	20000350 	.word	0x20000350
    a128:	20000352 	.word	0x20000352
    a12c:	000092e9 	.word	0x000092e9
    a130:	0000ffff 	.word	0x0000ffff
    a134:	00009325 	.word	0x00009325
    a138:	00009629 	.word	0x00009629
    a13c:	2000034a 	.word	0x2000034a
    a140:	00009691 	.word	0x00009691
    a144:	2000031c 	.word	0x2000031c
    a148:	00013424 	.word	0x00013424
    a14c:	000135dc 	.word	0x000135dc
    a150:	0000052b 	.word	0x0000052b
    a154:	000134a0 	.word	0x000134a0
    a158:	00011d75 	.word	0x00011d75
    a15c:	000094c5 	.word	0x000094c5
    a160:	00009555 	.word	0x00009555
    a164:	000095b5 	.word	0x000095b5
    a168:	0000941d 	.word	0x0000941d
    a16c:	00001fff 	.word	0x00001fff
    a170:	00009791 	.word	0x00009791
    a174:	0001359c 	.word	0x0001359c
    a178:	00000336 	.word	0x00000336

0000a17c <S_Nv_Init>:


void S_Nv_Init(void)
{
    a17c:	b510      	push	{r4, lr}
    if (!s_earlyInitDone)
    a17e:	4b08      	ldr	r3, [pc, #32]	; (a1a0 <S_Nv_Init+0x24>)
    a180:	781b      	ldrb	r3, [r3, #0]
    a182:	2b00      	cmp	r3, #0
    a184:	d008      	beq.n	a198 <S_Nv_Init+0x1c>
    {
        S_Nv_EarlyInit();
    }

    eraseSectorTimer.handler = eraseSectorTimerFired;
    a186:	4b07      	ldr	r3, [pc, #28]	; (a1a4 <S_Nv_Init+0x28>)
    a188:	4a07      	ldr	r2, [pc, #28]	; (a1a8 <S_Nv_Init+0x2c>)
    a18a:	611a      	str	r2, [r3, #16]
    eraseSectorTimer.timeout = ERASE_SECTOR_DELAY_MS;
    a18c:	4a07      	ldr	r2, [pc, #28]	; (a1ac <S_Nv_Init+0x30>)
    a18e:	605a      	str	r2, [r3, #4]
    eraseSectorTimer.interval = ERASE_SECTOR_DELAY_MS;
    a190:	609a      	str	r2, [r3, #8]
    eraseSectorTimer.mode = SYS_TIMER_INTERVAL_MODE;
    a192:	2200      	movs	r2, #0
    a194:	731a      	strb	r2, [r3, #12]
}
    a196:	bd10      	pop	{r4, pc}
        S_Nv_EarlyInit();
    a198:	4b05      	ldr	r3, [pc, #20]	; (a1b0 <S_Nv_Init+0x34>)
    a19a:	4798      	blx	r3
    a19c:	e7f3      	b.n	a186 <S_Nv_Init+0xa>
    a19e:	46c0      	nop			; (mov r8, r8)
    a1a0:	2000031c 	.word	0x2000031c
    a1a4:	20000304 	.word	0x20000304
    a1a8:	00009605 	.word	0x00009605
    a1ac:	00001b58 	.word	0x00001b58
    a1b0:	00009e41 	.word	0x00009e41

0000a1b4 <S_Nv_Write_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Write_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Write_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    a1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a1b6:	46ce      	mov	lr, r9
    a1b8:	4647      	mov	r7, r8
    a1ba:	b580      	push	{r7, lr}
    a1bc:	b087      	sub	sp, #28
    a1be:	0004      	movs	r4, r0
    a1c0:	9101      	str	r1, [sp, #4]
    a1c2:	0015      	movs	r5, r2
    a1c4:	001f      	movs	r7, r3
    assert((id != 0u) && (pData != NULL));
    a1c6:	2800      	cmp	r0, #0
    a1c8:	d00c      	beq.n	a1e4 <S_Nv_Write_Impl+0x30>
    a1ca:	2b00      	cmp	r3, #0
    a1cc:	d00a      	beq.n	a1e4 <S_Nv_Write_Impl+0x30>

    if ( PowerSupplyTooLow() )
    a1ce:	4b35      	ldr	r3, [pc, #212]	; (a2a4 <S_Nv_Write_Impl+0xf0>)
    a1d0:	4798      	blx	r3
    {
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    a1d2:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    a1d4:	2800      	cmp	r0, #0
    a1d6:	d00b      	beq.n	a1f0 <S_Nv_Write_Impl+0x3c>
        //SYS_StartTimer(&compactItemTimer);
        }
    }

    return S_Nv_ReturnValue_Ok;
}
    a1d8:	0018      	movs	r0, r3
    a1da:	b007      	add	sp, #28
    a1dc:	bc0c      	pop	{r2, r3}
    a1de:	4690      	mov	r8, r2
    a1e0:	4699      	mov	r9, r3
    a1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    a1e4:	4b30      	ldr	r3, [pc, #192]	; (a2a8 <S_Nv_Write_Impl+0xf4>)
    a1e6:	4a31      	ldr	r2, [pc, #196]	; (a2ac <S_Nv_Write_Impl+0xf8>)
    a1e8:	4931      	ldr	r1, [pc, #196]	; (a2b0 <S_Nv_Write_Impl+0xfc>)
    a1ea:	4832      	ldr	r0, [pc, #200]	; (a2b4 <S_Nv_Write_Impl+0x100>)
    a1ec:	4c32      	ldr	r4, [pc, #200]	; (a2b8 <S_Nv_Write_Impl+0x104>)
    a1ee:	47a0      	blx	r4
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + dataLength);
    a1f0:	0028      	movs	r0, r5
    a1f2:	3010      	adds	r0, #16
    a1f4:	b280      	uxth	r0, r0
    a1f6:	4b31      	ldr	r3, [pc, #196]	; (a2bc <S_Nv_Write_Impl+0x108>)
    a1f8:	4798      	blx	r3
    Item_t *cache = FindItemCache(id);
    a1fa:	0020      	movs	r0, r4
    a1fc:	4b30      	ldr	r3, [pc, #192]	; (a2c0 <S_Nv_Write_Impl+0x10c>)
    a1fe:	4798      	blx	r3
    a200:	0006      	movs	r6, r0
        return S_Nv_ReturnValue_DoesNotExist;
    a202:	2303      	movs	r3, #3
    if ( cache == NULL )
    a204:	2800      	cmp	r0, #0
    a206:	d0e7      	beq.n	a1d8 <S_Nv_Write_Impl+0x24>
    uint16_t blockPointer = cache->lastBlock;
    a208:	7883      	ldrb	r3, [r0, #2]
    a20a:	78c4      	ldrb	r4, [r0, #3]
    a20c:	0224      	lsls	r4, r4, #8
    a20e:	431c      	orrs	r4, r3
    a210:	46a0      	mov	r8, r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a212:	4b2c      	ldr	r3, [pc, #176]	; (a2c4 <S_Nv_Write_Impl+0x110>)
    a214:	7818      	ldrb	r0, [r3, #0]
    a216:	2310      	movs	r3, #16
    a218:	aa02      	add	r2, sp, #8
    a21a:	0021      	movs	r1, r4
    a21c:	4c2a      	ldr	r4, [pc, #168]	; (a2c8 <S_Nv_Write_Impl+0x114>)
    a21e:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    a220:	ab02      	add	r3, sp, #8
    a222:	8919      	ldrh	r1, [r3, #8]
    a224:	9b01      	ldr	r3, [sp, #4]
    a226:	195a      	adds	r2, r3, r5
        return S_Nv_ReturnValue_BeyondEnd;
    a228:	2304      	movs	r3, #4
    if ( ((uint32_t) offset + (uint32_t) dataLength) > (uint32_t) blockHeader.itemLength )
    a22a:	428a      	cmp	r2, r1
    a22c:	d8d4      	bhi.n	a1d8 <S_Nv_Write_Impl+0x24>
    blockHeader.blockOffset = offset;
    a22e:	ab02      	add	r3, sp, #8
    a230:	466a      	mov	r2, sp
    a232:	8892      	ldrh	r2, [r2, #4]
    a234:	809a      	strh	r2, [r3, #4]
    blockHeader.blockLength = dataLength;
    a236:	80dd      	strh	r5, [r3, #6]
    blockHeader.previousBlock = blockPointer;
    a238:	4642      	mov	r2, r8
    a23a:	815a      	strh	r2, [r3, #10]
    if ( blockHeader.blockLength == blockHeader.itemLength )
    a23c:	428d      	cmp	r5, r1
    a23e:	d02c      	beq.n	a29a <S_Nv_Write_Impl+0xe6>
        blockHeader.writeCount++;
    a240:	ab02      	add	r3, sp, #8
    a242:	899b      	ldrh	r3, [r3, #12]
    a244:	3301      	adds	r3, #1
    a246:	aa02      	add	r2, sp, #8
    a248:	8193      	strh	r3, [r2, #12]
    uint16_t newBlockPointer = s_sectorHead;
    a24a:	4b20      	ldr	r3, [pc, #128]	; (a2cc <S_Nv_Write_Impl+0x118>)
    a24c:	881c      	ldrh	r4, [r3, #0]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    a24e:	0039      	movs	r1, r7
    a250:	a802      	add	r0, sp, #8
    a252:	4b1f      	ldr	r3, [pc, #124]	; (a2d0 <S_Nv_Write_Impl+0x11c>)
    a254:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    a256:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pData) )
    a258:	2800      	cmp	r0, #0
    a25a:	d0bd      	beq.n	a1d8 <S_Nv_Write_Impl+0x24>
    cache->lastBlock = newBlockPointer;
    a25c:	70b4      	strb	r4, [r6, #2]
    a25e:	0a24      	lsrs	r4, r4, #8
    a260:	70f4      	strb	r4, [r6, #3]
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    a262:	ab02      	add	r3, sp, #8
    a264:	899a      	ldrh	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    a266:	2300      	movs	r3, #0
    if ( blockHeader.writeCount > COMPACT_ITEM_THRESHOLD )
    a268:	2a64      	cmp	r2, #100	; 0x64
    a26a:	d9b5      	bls.n	a1d8 <S_Nv_Write_Impl+0x24>
        s_compactItemId = blockHeader.id;
    a26c:	ab02      	add	r3, sp, #8
    a26e:	885a      	ldrh	r2, [r3, #2]
    a270:	4b18      	ldr	r3, [pc, #96]	; (a2d4 <S_Nv_Write_Impl+0x120>)
    a272:	801a      	strh	r2, [r3, #0]
        s_compactItemLength = 0u;           // no need to resize this item here
    a274:	2200      	movs	r2, #0
    a276:	4b18      	ldr	r3, [pc, #96]	; (a2d8 <S_Nv_Write_Impl+0x124>)
    a278:	801a      	strh	r2, [r3, #0]
        if (!SYS_TimerStarted(&compactItemTimer))
    a27a:	4818      	ldr	r0, [pc, #96]	; (a2dc <S_Nv_Write_Impl+0x128>)
    a27c:	4b18      	ldr	r3, [pc, #96]	; (a2e0 <S_Nv_Write_Impl+0x12c>)
    a27e:	4798      	blx	r3
    return S_Nv_ReturnValue_Ok;
    a280:	2300      	movs	r3, #0
        if (!SYS_TimerStarted(&compactItemTimer))
    a282:	2800      	cmp	r0, #0
    a284:	d1a8      	bne.n	a1d8 <S_Nv_Write_Impl+0x24>
        compactItemTimer.handler = compactItemTimerFired;
    a286:	4b15      	ldr	r3, [pc, #84]	; (a2dc <S_Nv_Write_Impl+0x128>)
    a288:	4a16      	ldr	r2, [pc, #88]	; (a2e4 <S_Nv_Write_Impl+0x130>)
    a28a:	611a      	str	r2, [r3, #16]
        compactItemTimer.timeout = COMPACT_ITEM_DELAY_MS;
    a28c:	4a16      	ldr	r2, [pc, #88]	; (a2e8 <S_Nv_Write_Impl+0x134>)
    a28e:	605a      	str	r2, [r3, #4]
        compactItemTimer.interval = COMPACT_ITEM_DELAY_MS;
    a290:	609a      	str	r2, [r3, #8]
        compactItemTimer.mode = SYS_TIMER_INTERVAL_MODE;
    a292:	2200      	movs	r2, #0
    a294:	731a      	strb	r2, [r3, #12]
    return S_Nv_ReturnValue_Ok;
    a296:	2300      	movs	r3, #0
    a298:	e79e      	b.n	a1d8 <S_Nv_Write_Impl+0x24>
        blockHeader.writeCount = 0u;
    a29a:	2300      	movs	r3, #0
    a29c:	aa02      	add	r2, sp, #8
    a29e:	8193      	strh	r3, [r2, #12]
    a2a0:	e7d3      	b.n	a24a <S_Nv_Write_Impl+0x96>
    a2a2:	46c0      	nop			; (mov r8, r8)
    a2a4:	000092cd 	.word	0x000092cd
    a2a8:	00013534 	.word	0x00013534
    a2ac:	00013600 	.word	0x00013600
    a2b0:	00000596 	.word	0x00000596
    a2b4:	000134a0 	.word	0x000134a0
    a2b8:	00011d75 	.word	0x00011d75
    a2bc:	00009a41 	.word	0x00009a41
    a2c0:	000094c5 	.word	0x000094c5
    a2c4:	20000350 	.word	0x20000350
    a2c8:	0000907d 	.word	0x0000907d
    a2cc:	20000352 	.word	0x20000352
    a2d0:	00009cf5 	.word	0x00009cf5
    a2d4:	20000318 	.word	0x20000318
    a2d8:	2000031a 	.word	0x2000031a
    a2dc:	200001d8 	.word	0x200001d8
    a2e0:	0000d7a9 	.word	0x0000d7a9
    a2e4:	00009ce9 	.word	0x00009ce9
    a2e8:	00000bb8 	.word	0x00000bb8

0000a2ec <S_Nv_Read_Impl>:
#if defined(S_XNV_LOGGING)
static S_Nv_ReturnValue_t S_Nv_Read_Original(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#else
S_Nv_ReturnValue_t S_Nv_Read_Impl(S_Nv_ItemId_t id, uint16_t offset, uint16_t dataLength, void* pData)
#endif
{
    a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2ee:	b083      	sub	sp, #12
    a2f0:	000c      	movs	r4, r1
    a2f2:	0015      	movs	r5, r2
    a2f4:	001e      	movs	r6, r3
    assert((id != 0u) && (pData != NULL));
    a2f6:	2800      	cmp	r0, #0
    a2f8:	d009      	beq.n	a30e <S_Nv_Read_Impl+0x22>
    a2fa:	2b00      	cmp	r3, #0
    a2fc:	d007      	beq.n	a30e <S_Nv_Read_Impl+0x22>

    // get the pointer to the last written block for the item
    uint16_t lastBlockPointer = FindItem(id);
    a2fe:	4b10      	ldr	r3, [pc, #64]	; (a340 <S_Nv_Read_Impl+0x54>)
    a300:	4798      	blx	r3
    if ( lastBlockPointer == 0x0000u )
    {
        // item does not exist
        return S_Nv_ReturnValue_DoesNotExist;
    a302:	2303      	movs	r3, #3
    if ( lastBlockPointer == 0x0000u )
    a304:	2800      	cmp	r0, #0
    a306:	d108      	bne.n	a31a <S_Nv_Read_Impl+0x2e>
    {
        return S_Nv_ReturnValue_BeyondEnd;
    }

    return S_Nv_ReturnValue_Ok;
}
    a308:	0018      	movs	r0, r3
    a30a:	b003      	add	sp, #12
    a30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((id != 0u) && (pData != NULL));
    a30e:	4b0d      	ldr	r3, [pc, #52]	; (a344 <S_Nv_Read_Impl+0x58>)
    a310:	4a0d      	ldr	r2, [pc, #52]	; (a348 <S_Nv_Read_Impl+0x5c>)
    a312:	490e      	ldr	r1, [pc, #56]	; (a34c <S_Nv_Read_Impl+0x60>)
    a314:	480e      	ldr	r0, [pc, #56]	; (a350 <S_Nv_Read_Impl+0x64>)
    a316:	4c0f      	ldr	r4, [pc, #60]	; (a354 <S_Nv_Read_Impl+0x68>)
    a318:	47a0      	blx	r4
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    a31a:	1962      	adds	r2, r4, r5
    a31c:	490e      	ldr	r1, [pc, #56]	; (a358 <S_Nv_Read_Impl+0x6c>)
        return S_Nv_ReturnValue_BeyondEnd;
    a31e:	3301      	adds	r3, #1
    if ( ((uint32_t) offset + (uint32_t) dataLength) >= 0x10000uL )
    a320:	428a      	cmp	r2, r1
    a322:	d8f1      	bhi.n	a308 <S_Nv_Read_Impl+0x1c>
    if ( !GatherData(s_sector, lastBlockPointer, offset, dataLength, pData ))
    a324:	4b0d      	ldr	r3, [pc, #52]	; (a35c <S_Nv_Read_Impl+0x70>)
    a326:	781f      	ldrb	r7, [r3, #0]
    a328:	9600      	str	r6, [sp, #0]
    a32a:	002b      	movs	r3, r5
    a32c:	0022      	movs	r2, r4
    a32e:	0001      	movs	r1, r0
    a330:	0038      	movs	r0, r7
    a332:	4c0b      	ldr	r4, [pc, #44]	; (a360 <S_Nv_Read_Impl+0x74>)
    a334:	47a0      	blx	r4
    return S_Nv_ReturnValue_Ok;
    a336:	4243      	negs	r3, r0
    a338:	4143      	adcs	r3, r0
    a33a:	009b      	lsls	r3, r3, #2
    a33c:	e7e4      	b.n	a308 <S_Nv_Read_Impl+0x1c>
    a33e:	46c0      	nop			; (mov r8, r8)
    a340:	00009539 	.word	0x00009539
    a344:	00013534 	.word	0x00013534
    a348:	00013610 	.word	0x00013610
    a34c:	000005ee 	.word	0x000005ee
    a350:	000134a0 	.word	0x000134a0
    a354:	00011d75 	.word	0x00011d75
    a358:	0000ffff 	.word	0x0000ffff
    a35c:	20000350 	.word	0x20000350
    a360:	00009365 	.word	0x00009365

0000a364 <S_Nv_ItemLength_Impl>:

/** Interface function, see \ref S_Nv_ItemLength. */
uint16_t S_Nv_ItemLength_Impl(S_Nv_ItemId_t id)
{
    a364:	b510      	push	{r4, lr}
    a366:	b084      	sub	sp, #16
    assert(id != 0u);
    a368:	2800      	cmp	r0, #0
    a36a:	d005      	beq.n	a378 <S_Nv_ItemLength_Impl+0x14>

    uint16_t blockPointer = FindItem(id);
    a36c:	4b0a      	ldr	r3, [pc, #40]	; (a398 <S_Nv_ItemLength_Impl+0x34>)
    a36e:	4798      	blx	r3
    a370:	1e01      	subs	r1, r0, #0
    if ( blockPointer == 0x0000u )
    a372:	d107      	bne.n	a384 <S_Nv_ItemLength_Impl+0x20>

    // read last written item block header
    BlockHeader_t blockHeader;
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    return blockHeader.itemLength;
}
    a374:	b004      	add	sp, #16
    a376:	bd10      	pop	{r4, pc}
    assert(id != 0u);
    a378:	4b08      	ldr	r3, [pc, #32]	; (a39c <S_Nv_ItemLength_Impl+0x38>)
    a37a:	4a09      	ldr	r2, [pc, #36]	; (a3a0 <S_Nv_ItemLength_Impl+0x3c>)
    a37c:	4909      	ldr	r1, [pc, #36]	; (a3a4 <S_Nv_ItemLength_Impl+0x40>)
    a37e:	480a      	ldr	r0, [pc, #40]	; (a3a8 <S_Nv_ItemLength_Impl+0x44>)
    a380:	4c0a      	ldr	r4, [pc, #40]	; (a3ac <S_Nv_ItemLength_Impl+0x48>)
    a382:	47a0      	blx	r4
    D_Nv_Read(s_sector, blockPointer, (uint8_t*) &blockHeader, BLOCK_HEADER_SIZE);
    a384:	4b0a      	ldr	r3, [pc, #40]	; (a3b0 <S_Nv_ItemLength_Impl+0x4c>)
    a386:	7818      	ldrb	r0, [r3, #0]
    a388:	2310      	movs	r3, #16
    a38a:	466a      	mov	r2, sp
    a38c:	4c09      	ldr	r4, [pc, #36]	; (a3b4 <S_Nv_ItemLength_Impl+0x50>)
    a38e:	47a0      	blx	r4
    return blockHeader.itemLength;
    a390:	466b      	mov	r3, sp
    a392:	8918      	ldrh	r0, [r3, #8]
    a394:	e7ee      	b.n	a374 <S_Nv_ItemLength_Impl+0x10>
    a396:	46c0      	nop			; (mov r8, r8)
    a398:	00009539 	.word	0x00009539
    a39c:	00013528 	.word	0x00013528
    a3a0:	00013620 	.word	0x00013620
    a3a4:	0000060b 	.word	0x0000060b
    a3a8:	000134a0 	.word	0x000134a0
    a3ac:	00011d75 	.word	0x00011d75
    a3b0:	20000350 	.word	0x20000350
    a3b4:	0000907d 	.word	0x0000907d

0000a3b8 <S_Nv_ItemInit_Impl>:
{
    a3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3ba:	b085      	sub	sp, #20
    a3bc:	0004      	movs	r4, r0
    a3be:	000e      	movs	r6, r1
    a3c0:	0015      	movs	r5, r2
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    a3c2:	1e43      	subs	r3, r0, #1
    a3c4:	b29b      	uxth	r3, r3
    a3c6:	4a2e      	ldr	r2, [pc, #184]	; (a480 <S_Nv_ItemInit_Impl+0xc8>)
    a3c8:	4293      	cmp	r3, r2
    a3ca:	d81e      	bhi.n	a40a <S_Nv_ItemInit_Impl+0x52>
    a3cc:	2380      	movs	r3, #128	; 0x80
    a3ce:	011b      	lsls	r3, r3, #4
    a3d0:	4299      	cmp	r1, r3
    a3d2:	d81a      	bhi.n	a40a <S_Nv_ItemInit_Impl+0x52>
    if ( FindItem(id) != 0x0000u )
    a3d4:	4b2b      	ldr	r3, [pc, #172]	; (a484 <S_Nv_ItemInit_Impl+0xcc>)
    a3d6:	4798      	blx	r3
    a3d8:	2800      	cmp	r0, #0
    a3da:	d01d      	beq.n	a418 <S_Nv_ItemInit_Impl+0x60>
        uint16_t oldItemLength = S_Nv_ItemLength(id);
    a3dc:	0020      	movs	r0, r4
    a3de:	4b2a      	ldr	r3, [pc, #168]	; (a488 <S_Nv_ItemInit_Impl+0xd0>)
    a3e0:	4798      	blx	r3
        if ( oldItemLength != itemLength )
    a3e2:	4286      	cmp	r6, r0
    a3e4:	d007      	beq.n	a3f6 <S_Nv_ItemInit_Impl+0x3e>
            s_compactItemId = id;
    a3e6:	4b29      	ldr	r3, [pc, #164]	; (a48c <S_Nv_ItemInit_Impl+0xd4>)
    a3e8:	801c      	strh	r4, [r3, #0]
            s_compactItemLength = itemLength;
    a3ea:	4b29      	ldr	r3, [pc, #164]	; (a490 <S_Nv_ItemInit_Impl+0xd8>)
    a3ec:	801e      	strh	r6, [r3, #0]
            S_Nv_ReturnValue_t resizeResult = CompactItem();
    a3ee:	4b29      	ldr	r3, [pc, #164]	; (a494 <S_Nv_ItemInit_Impl+0xdc>)
    a3f0:	4798      	blx	r3
    a3f2:	1e03      	subs	r3, r0, #0
            if ( resizeResult != S_Nv_ReturnValue_Ok )
    a3f4:	d115      	bne.n	a422 <S_Nv_ItemInit_Impl+0x6a>
        if (pDefaultData != NULL)
    a3f6:	2d00      	cmp	r5, #0
    a3f8:	d040      	beq.n	a47c <S_Nv_ItemInit_Impl+0xc4>
            return S_Nv_Read(id, 0u, itemLength, pDefaultData);
    a3fa:	002b      	movs	r3, r5
    a3fc:	0032      	movs	r2, r6
    a3fe:	2100      	movs	r1, #0
    a400:	0020      	movs	r0, r4
    a402:	4c25      	ldr	r4, [pc, #148]	; (a498 <S_Nv_ItemInit_Impl+0xe0>)
    a404:	47a0      	blx	r4
    a406:	0003      	movs	r3, r0
    a408:	e00b      	b.n	a422 <S_Nv_ItemInit_Impl+0x6a>
    assert((id != 0u) && (id < 0xF000u) && (itemLength <= MAX_ITEM_LENGTH));
    a40a:	4b24      	ldr	r3, [pc, #144]	; (a49c <S_Nv_ItemInit_Impl+0xe4>)
    a40c:	4a24      	ldr	r2, [pc, #144]	; (a4a0 <S_Nv_ItemInit_Impl+0xe8>)
    a40e:	21aa      	movs	r1, #170	; 0xaa
    a410:	00c9      	lsls	r1, r1, #3
    a412:	4824      	ldr	r0, [pc, #144]	; (a4a4 <S_Nv_ItemInit_Impl+0xec>)
    a414:	4c24      	ldr	r4, [pc, #144]	; (a4a8 <S_Nv_ItemInit_Impl+0xf0>)
    a416:	47a0      	blx	r4
    if ( PowerSupplyTooLow() )
    a418:	4b24      	ldr	r3, [pc, #144]	; (a4ac <S_Nv_ItemInit_Impl+0xf4>)
    a41a:	4798      	blx	r3
        return S_Nv_ReturnValue_PowerSupplyTooLow;
    a41c:	2305      	movs	r3, #5
    if ( PowerSupplyTooLow() )
    a41e:	2800      	cmp	r0, #0
    a420:	d002      	beq.n	a428 <S_Nv_ItemInit_Impl+0x70>
}
    a422:	0018      	movs	r0, r3
    a424:	b005      	add	sp, #20
    a426:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CompactSectorIfNeeded(BLOCK_HEADER_SIZE + itemLength);
    a428:	0030      	movs	r0, r6
    a42a:	3010      	adds	r0, #16
    a42c:	b280      	uxth	r0, r0
    a42e:	4b20      	ldr	r3, [pc, #128]	; (a4b0 <S_Nv_ItemInit_Impl+0xf8>)
    a430:	4798      	blx	r3
    assert(s_itemCount < MAX_ITEM_COUNT);
    a432:	4b20      	ldr	r3, [pc, #128]	; (a4b4 <S_Nv_ItemInit_Impl+0xfc>)
    a434:	781b      	ldrb	r3, [r3, #0]
    a436:	2b09      	cmp	r3, #9
    a438:	d819      	bhi.n	a46e <S_Nv_ItemInit_Impl+0xb6>
    uint16_t newItemPointer = s_sectorHead;
    a43a:	4b1f      	ldr	r3, [pc, #124]	; (a4b8 <S_Nv_ItemInit_Impl+0x100>)
    a43c:	881f      	ldrh	r7, [r3, #0]
    blockHeader.id = newItemId;
    a43e:	466b      	mov	r3, sp
    a440:	805c      	strh	r4, [r3, #2]
    blockHeader.blockOffset = 0x0000u;
    a442:	2300      	movs	r3, #0
    a444:	466a      	mov	r2, sp
    a446:	8093      	strh	r3, [r2, #4]
    blockHeader.blockLength = itemLength;
    a448:	80d6      	strh	r6, [r2, #6]
    blockHeader.itemLength = itemLength;
    a44a:	8116      	strh	r6, [r2, #8]
    blockHeader.previousBlock = 0x0000u;
    a44c:	8153      	strh	r3, [r2, #10]
    blockHeader.writeCount = 0u;
    a44e:	8193      	strh	r3, [r2, #12]
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    a450:	0029      	movs	r1, r5
    a452:	4668      	mov	r0, sp
    a454:	4b19      	ldr	r3, [pc, #100]	; (a4bc <S_Nv_ItemInit_Impl+0x104>)
    a456:	4798      	blx	r3
        return S_Nv_ReturnValue_Failure;
    a458:	2301      	movs	r3, #1
    if ( !WriteDataBlockAndHeader(&blockHeader, (uint8_t*) pDefaultData) )
    a45a:	2800      	cmp	r0, #0
    a45c:	d0e1      	beq.n	a422 <S_Nv_ItemInit_Impl+0x6a>
    Item_t *newItemCache = CreateItemCache(newItemId);
    a45e:	0020      	movs	r0, r4
    a460:	4b17      	ldr	r3, [pc, #92]	; (a4c0 <S_Nv_ItemInit_Impl+0x108>)
    a462:	4798      	blx	r3
    newItemCache->lastBlock = newItemPointer;
    a464:	7087      	strb	r7, [r0, #2]
    a466:	0a3f      	lsrs	r7, r7, #8
    a468:	70c7      	strb	r7, [r0, #3]
    return S_Nv_ReturnValue_DidNotExist;
    a46a:	2302      	movs	r3, #2
    a46c:	e7d9      	b.n	a422 <S_Nv_ItemInit_Impl+0x6a>
    assert(s_itemCount < MAX_ITEM_COUNT);
    a46e:	4b15      	ldr	r3, [pc, #84]	; (a4c4 <S_Nv_ItemInit_Impl+0x10c>)
    a470:	4a0b      	ldr	r2, [pc, #44]	; (a4a0 <S_Nv_ItemInit_Impl+0xe8>)
    a472:	21af      	movs	r1, #175	; 0xaf
    a474:	00c9      	lsls	r1, r1, #3
    a476:	480b      	ldr	r0, [pc, #44]	; (a4a4 <S_Nv_ItemInit_Impl+0xec>)
    a478:	4c0b      	ldr	r4, [pc, #44]	; (a4a8 <S_Nv_ItemInit_Impl+0xf0>)
    a47a:	47a0      	blx	r4
            return S_Nv_ReturnValue_Ok;
    a47c:	2300      	movs	r3, #0
    a47e:	e7d0      	b.n	a422 <S_Nv_ItemInit_Impl+0x6a>
    a480:	0000effe 	.word	0x0000effe
    a484:	00009539 	.word	0x00009539
    a488:	0000a365 	.word	0x0000a365
    a48c:	20000318 	.word	0x20000318
    a490:	2000031a 	.word	0x2000031a
    a494:	00009abd 	.word	0x00009abd
    a498:	0000a2ed 	.word	0x0000a2ed
    a49c:	000134e8 	.word	0x000134e8
    a4a0:	000135ec 	.word	0x000135ec
    a4a4:	000134a0 	.word	0x000134a0
    a4a8:	00011d75 	.word	0x00011d75
    a4ac:	000092cd 	.word	0x000092cd
    a4b0:	00009a41 	.word	0x00009a41
    a4b4:	20000348 	.word	0x20000348
    a4b8:	20000352 	.word	0x20000352
    a4bc:	00009cf5 	.word	0x00009cf5
    a4c0:	00009555 	.word	0x00009555
    a4c4:	00013448 	.word	0x00013448

0000a4c8 <S_Nv_IsItemAvailable_Impl>:
/** Interface function, see \ref S_Nv_IsItemAvailable.
 *
 * Important: This will check whether the item is found in the storage area
 */
bool S_Nv_IsItemAvailable_Impl(S_Nv_ItemId_t id)
{
    a4c8:	b510      	push	{r4, lr}
  return ( FindItem(id) != 0x0000u );
    a4ca:	4b03      	ldr	r3, [pc, #12]	; (a4d8 <S_Nv_IsItemAvailable_Impl+0x10>)
    a4cc:	4798      	blx	r3
    a4ce:	1e43      	subs	r3, r0, #1
    a4d0:	4198      	sbcs	r0, r3
    a4d2:	b2c0      	uxtb	r0, r0
}
    a4d4:	bd10      	pop	{r4, pc}
    a4d6:	46c0      	nop			; (mov r8, r8)
    a4d8:	00009539 	.word	0x00009539

0000a4dc <pdsInitItemMask>:
\param[in] itemMask - itemMask to be initialized

\return true itemMask is initialized, false otherwise
******************************************************************************/
static bool pdsInitItemMask(S_Nv_ItemId_t memoryId, uint8_t *itemMask)
{
    a4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4de:	46d6      	mov	lr, sl
    a4e0:	4647      	mov	r7, r8
    a4e2:	b580      	push	{r7, lr}
    a4e4:	b087      	sub	sp, #28
    a4e6:	000f      	movs	r7, r1
  if (PDS_ALL_EXISTENT_MEMORY == memoryId)
    a4e8:	4b24      	ldr	r3, [pc, #144]	; (a57c <pdsInitItemMask+0xa0>)
    a4ea:	4298      	cmp	r0, r3
    a4ec:	d012      	beq.n	a514 <pdsInitItemMask+0x38>
  {
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    itemMask[0] &= 0xFEU;
  }
  else if (PDS_DIRECTORY_MASK & memoryId)
    a4ee:	0443      	lsls	r3, r0, #17
    a4f0:	d41c      	bmi.n	a52c <pdsInitItemMask+0x50>
    else
      return false;
  }
  else
  {
    itemMask[memoryId / 8] |= 1 << (memoryId % 8);
    a4f2:	08c3      	lsrs	r3, r0, #3
    a4f4:	18cf      	adds	r7, r1, r3
    a4f6:	2307      	movs	r3, #7
    a4f8:	4018      	ands	r0, r3
    a4fa:	3b06      	subs	r3, #6
    a4fc:	4083      	lsls	r3, r0
    a4fe:	783a      	ldrb	r2, [r7, #0]
    a500:	4313      	orrs	r3, r2
    a502:	703b      	strb	r3, [r7, #0]
  }

  return true;
    a504:	2301      	movs	r3, #1
    a506:	9301      	str	r3, [sp, #4]
}
    a508:	9801      	ldr	r0, [sp, #4]
    a50a:	b007      	add	sp, #28
    a50c:	bc0c      	pop	{r2, r3}
    a50e:	4690      	mov	r8, r2
    a510:	469a      	mov	sl, r3
    a512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(itemMask, 0xFFU, PDS_ITEM_MASK_SIZE);
    a514:	2202      	movs	r2, #2
    a516:	21ff      	movs	r1, #255	; 0xff
    a518:	0038      	movs	r0, r7
    a51a:	4b19      	ldr	r3, [pc, #100]	; (a580 <pdsInitItemMask+0xa4>)
    a51c:	4798      	blx	r3
    itemMask[0] &= 0xFEU;
    a51e:	783b      	ldrb	r3, [r7, #0]
    a520:	2201      	movs	r2, #1
    a522:	4393      	bics	r3, r2
    a524:	703b      	strb	r3, [r7, #0]
  return true;
    a526:	2301      	movs	r3, #1
    a528:	9301      	str	r3, [sp, #4]
    a52a:	e7ed      	b.n	a508 <pdsInitItemMask+0x2c>
    if (pdsGetDirDescr(memoryId, &dirDescr))
    a52c:	a904      	add	r1, sp, #16
    a52e:	4b15      	ldr	r3, [pc, #84]	; (a584 <pdsInitItemMask+0xa8>)
    a530:	4798      	blx	r3
    a532:	9001      	str	r0, [sp, #4]
    a534:	2800      	cmp	r0, #0
    a536:	d0e7      	beq.n	a508 <pdsInitItemMask+0x2c>
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    a538:	ab04      	add	r3, sp, #16
    a53a:	889b      	ldrh	r3, [r3, #4]
    a53c:	4698      	mov	r8, r3
    a53e:	2b00      	cmp	r3, #0
    a540:	d0e2      	beq.n	a508 <pdsInitItemMask+0x2c>
    a542:	2400      	movs	r4, #0
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    a544:	ab02      	add	r3, sp, #8
    a546:	1d9d      	adds	r5, r3, #6
    a548:	4b0f      	ldr	r3, [pc, #60]	; (a588 <pdsInitItemMask+0xac>)
    a54a:	469a      	mov	sl, r3
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    a54c:	2607      	movs	r6, #7
        memcpy(&memId, (void const FLASH_PTR*)(dirDescr.list + index), sizeof(uint16_t));
    a54e:	0061      	lsls	r1, r4, #1
    a550:	9b04      	ldr	r3, [sp, #16]
    a552:	469c      	mov	ip, r3
    a554:	4461      	add	r1, ip
    a556:	2202      	movs	r2, #2
    a558:	0028      	movs	r0, r5
    a55a:	47d0      	blx	sl
        itemMask[memId / 8U] |= 1U << (memId % 8U);
    a55c:	8829      	ldrh	r1, [r5, #0]
    a55e:	08ca      	lsrs	r2, r1, #3
    a560:	18ba      	adds	r2, r7, r2
    a562:	4031      	ands	r1, r6
    a564:	2301      	movs	r3, #1
    a566:	408b      	lsls	r3, r1
    a568:	7811      	ldrb	r1, [r2, #0]
    a56a:	430b      	orrs	r3, r1
    a56c:	7013      	strb	r3, [r2, #0]
      for (uint8_t index=0U; index < dirDescr.filesCount; index++)
    a56e:	3401      	adds	r4, #1
    a570:	b2e4      	uxtb	r4, r4
    a572:	b2a3      	uxth	r3, r4
    a574:	4543      	cmp	r3, r8
    a576:	d3ea      	bcc.n	a54e <pdsInitItemMask+0x72>
    a578:	e7c6      	b.n	a508 <pdsInitItemMask+0x2c>
    a57a:	46c0      	nop			; (mov r8, r8)
    a57c:	00004002 	.word	0x00004002
    a580:	00011e49 	.word	0x00011e49
    a584:	0000a9f1 	.word	0x0000a9f1
    a588:	00011e37 	.word	0x00011e37

0000a58c <PDS_Restore>:
{
    a58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a58e:	b089      	sub	sp, #36	; 0x24
  uint8_t itemsToRestore[PDS_ITEM_MASK_SIZE] = {0U};
    a590:	a907      	add	r1, sp, #28
    a592:	2300      	movs	r3, #0
    a594:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToRestore))
    a596:	4b2b      	ldr	r3, [pc, #172]	; (a644 <PDS_Restore+0xb8>)
    a598:	4798      	blx	r3
    a59a:	9001      	str	r0, [sp, #4]
    a59c:	2600      	movs	r6, #0
    a59e:	2800      	cmp	r0, #0
    a5a0:	d148      	bne.n	a634 <PDS_Restore+0xa8>
    a5a2:	e041      	b.n	a628 <PDS_Restore+0x9c>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a5a4:	4b28      	ldr	r3, [pc, #160]	; (a648 <PDS_Restore+0xbc>)
    a5a6:	4a29      	ldr	r2, [pc, #164]	; (a64c <PDS_Restore+0xc0>)
    a5a8:	21ab      	movs	r1, #171	; 0xab
    a5aa:	0049      	lsls	r1, r1, #1
    a5ac:	4828      	ldr	r0, [pc, #160]	; (a650 <PDS_Restore+0xc4>)
    a5ae:	4c29      	ldr	r4, [pc, #164]	; (a654 <PDS_Restore+0xc8>)
    a5b0:	47a0      	blx	r4
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a5b2:	4b29      	ldr	r3, [pc, #164]	; (a658 <PDS_Restore+0xcc>)
    a5b4:	4a25      	ldr	r2, [pc, #148]	; (a64c <PDS_Restore+0xc0>)
    a5b6:	2168      	movs	r1, #104	; 0x68
    a5b8:	31ff      	adds	r1, #255	; 0xff
    a5ba:	4825      	ldr	r0, [pc, #148]	; (a650 <PDS_Restore+0xc4>)
    a5bc:	4c25      	ldr	r4, [pc, #148]	; (a654 <PDS_Restore+0xc8>)
    a5be:	47a0      	blx	r4
    a5c0:	3701      	adds	r7, #1
    a5c2:	3501      	adds	r5, #1
    a5c4:	b2ad      	uxth	r5, r5
    for (j = 0U; j < 8U; j++)
    a5c6:	2f08      	cmp	r7, #8
    a5c8:	d031      	beq.n	a62e <PDS_Restore+0xa2>
      if (itemsToRestore[i] & (1U << j))
    a5ca:	ab07      	add	r3, sp, #28
    a5cc:	5cf3      	ldrb	r3, [r6, r3]
    a5ce:	40fb      	lsrs	r3, r7
    a5d0:	07db      	lsls	r3, r3, #31
    a5d2:	d5f5      	bpl.n	a5c0 <PDS_Restore+0x34>
  if (pdsGetItemDescr(id, &itemDescr))
    a5d4:	a903      	add	r1, sp, #12
    a5d6:	0028      	movs	r0, r5
    a5d8:	4b20      	ldr	r3, [pc, #128]	; (a65c <PDS_Restore+0xd0>)
    a5da:	4798      	blx	r3
    a5dc:	2800      	cmp	r0, #0
    a5de:	d021      	beq.n	a624 <PDS_Restore+0x98>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a5e0:	ab03      	add	r3, sp, #12
    a5e2:	885b      	ldrh	r3, [r3, #2]
    a5e4:	2b00      	cmp	r3, #0
    a5e6:	d0dd      	beq.n	a5a4 <PDS_Restore+0x18>
    a5e8:	9b04      	ldr	r3, [sp, #16]
    a5ea:	2b00      	cmp	r3, #0
    a5ec:	d0da      	beq.n	a5a4 <PDS_Restore+0x18>
    if (itemDescr.filler)
    a5ee:	9b05      	ldr	r3, [sp, #20]
    a5f0:	2b00      	cmp	r3, #0
    a5f2:	d000      	beq.n	a5f6 <PDS_Restore+0x6a>
      itemDescr.filler();
    a5f4:	4798      	blx	r3
      oldSize = S_Nv_ItemLength(id);
    a5f6:	0028      	movs	r0, r5
    a5f8:	4b19      	ldr	r3, [pc, #100]	; (a660 <PDS_Restore+0xd4>)
    a5fa:	4798      	blx	r3
    a5fc:	0004      	movs	r4, r0
      S_Nv_ReturnValue_t ret = S_Nv_ItemInit(id, itemDescr.itemSize, itemDescr.itemData);
    a5fe:	ab03      	add	r3, sp, #12
    a600:	9a04      	ldr	r2, [sp, #16]
    a602:	8859      	ldrh	r1, [r3, #2]
    a604:	0028      	movs	r0, r5
    a606:	4b17      	ldr	r3, [pc, #92]	; (a664 <PDS_Restore+0xd8>)
    a608:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a60a:	2802      	cmp	r0, #2
    a60c:	d016      	beq.n	a63c <PDS_Restore+0xb0>
    a60e:	2800      	cmp	r0, #0
    a610:	d1cf      	bne.n	a5b2 <PDS_Restore+0x26>
        if (!pdsUpdateMemory(id, itemDescr.itemData, itemDescr.itemSize, oldSize))
    a612:	ab03      	add	r3, sp, #12
    a614:	885a      	ldrh	r2, [r3, #2]
    a616:	9904      	ldr	r1, [sp, #16]
    a618:	0023      	movs	r3, r4
    a61a:	0028      	movs	r0, r5
    a61c:	4c12      	ldr	r4, [pc, #72]	; (a668 <PDS_Restore+0xdc>)
    a61e:	47a0      	blx	r4
    a620:	2800      	cmp	r0, #0
    a622:	d1cd      	bne.n	a5c0 <PDS_Restore+0x34>
          return false;
    a624:	2300      	movs	r3, #0
    a626:	9301      	str	r3, [sp, #4]
}
    a628:	9801      	ldr	r0, [sp, #4]
    a62a:	b009      	add	sp, #36	; 0x24
    a62c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a62e:	3601      	adds	r6, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    a630:	2e02      	cmp	r6, #2
    a632:	d0f9      	beq.n	a628 <PDS_Restore+0x9c>
    a634:	00f5      	lsls	r5, r6, #3
    a636:	b2ad      	uxth	r5, r5
{
    a638:	2700      	movs	r7, #0
    a63a:	e7c6      	b.n	a5ca <PDS_Restore+0x3e>
          return false;
    a63c:	2300      	movs	r3, #0
    a63e:	9301      	str	r3, [sp, #4]
    a640:	e7f2      	b.n	a628 <PDS_Restore+0x9c>
    a642:	46c0      	nop			; (mov r8, r8)
    a644:	0000a4dd 	.word	0x0000a4dd
    a648:	00013638 	.word	0x00013638
    a64c:	00013730 	.word	0x00013730
    a650:	00013674 	.word	0x00013674
    a654:	00011d75 	.word	0x00011d75
    a658:	000136c0 	.word	0x000136c0
    a65c:	0000a94d 	.word	0x0000a94d
    a660:	0000a365 	.word	0x0000a365
    a664:	0000a3b9 	.word	0x0000a3b9
    a668:	0000a9ad 	.word	0x0000a9ad

0000a66c <PDS_Store>:
{
    a66c:	b510      	push	{r4, lr}
  if (!pdsInitItemMask(memoryId, itemsToStore))
    a66e:	4905      	ldr	r1, [pc, #20]	; (a684 <PDS_Store+0x18>)
    a670:	4b05      	ldr	r3, [pc, #20]	; (a688 <PDS_Store+0x1c>)
    a672:	4798      	blx	r3
    a674:	1e04      	subs	r4, r0, #0
    a676:	d101      	bne.n	a67c <PDS_Store+0x10>
}
    a678:	0020      	movs	r0, r4
    a67a:	bd10      	pop	{r4, pc}
  pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    a67c:	2000      	movs	r0, #0
    a67e:	4b03      	ldr	r3, [pc, #12]	; (a68c <PDS_Store+0x20>)
    a680:	4798      	blx	r3
  return true;
    a682:	e7f9      	b.n	a678 <PDS_Store+0xc>
    a684:	20000358 	.word	0x20000358
    a688:	0000a4dd 	.word	0x0000a4dd
    a68c:	0000a8f9 	.word	0x0000a8f9

0000a690 <pdsStoreItemTaskHandler>:
{
    a690:	b5f0      	push	{r4, r5, r6, r7, lr}
    a692:	46de      	mov	lr, fp
    a694:	4657      	mov	r7, sl
    a696:	464e      	mov	r6, r9
    a698:	4645      	mov	r5, r8
    a69a:	b5e0      	push	{r5, r6, r7, lr}
    a69c:	b089      	sub	sp, #36	; 0x24
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    a69e:	4b51      	ldr	r3, [pc, #324]	; (a7e4 <pdsStoreItemTaskHandler+0x154>)
    a6a0:	7818      	ldrb	r0, [r3, #0]
    a6a2:	3001      	adds	r0, #1
    a6a4:	b2c0      	uxtb	r0, r0
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a6a6:	4b50      	ldr	r3, [pc, #320]	; (a7e8 <pdsStoreItemTaskHandler+0x158>)
    a6a8:	781b      	ldrb	r3, [r3, #0]
    a6aa:	3301      	adds	r3, #1
      bit_index %= 8;
    a6ac:	2207      	movs	r2, #7
    a6ae:	4013      	ands	r3, r2
    a6b0:	4698      	mov	r8, r3
    a6b2:	2301      	movs	r3, #1
    a6b4:	4642      	mov	r2, r8
    a6b6:	4093      	lsls	r3, r2
    a6b8:	469a      	mov	sl, r3
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a6ba:	2302      	movs	r3, #2
    a6bc:	469c      	mov	ip, r3
    byte_index %= PDS_ITEM_MASK_SIZE;
    a6be:	2401      	movs	r4, #1
      if (itemsToStore[byte_index] & (1U << bit_index))
    a6c0:	4b4a      	ldr	r3, [pc, #296]	; (a7ec <pdsStoreItemTaskHandler+0x15c>)
    a6c2:	469b      	mov	fp, r3
    a6c4:	4643      	mov	r3, r8
    a6c6:	3301      	adds	r3, #1
    a6c8:	9302      	str	r3, [sp, #8]
    a6ca:	2507      	movs	r5, #7
    a6cc:	4667      	mov	r7, ip
    a6ce:	e035      	b.n	a73c <pdsStoreItemTaskHandler+0xac>
    a6d0:	464f      	mov	r7, r9
        itemsToStore[byte_index] &= ~(1U << bit_index);
    a6d2:	2201      	movs	r2, #1
    a6d4:	9901      	ldr	r1, [sp, #4]
    a6d6:	408a      	lsls	r2, r1
    a6d8:	4397      	bics	r7, r2
    a6da:	4944      	ldr	r1, [pc, #272]	; (a7ec <pdsStoreItemTaskHandler+0x15c>)
    a6dc:	9c03      	ldr	r4, [sp, #12]
    a6de:	550f      	strb	r7, [r1, r4]
        i_found = byte_index;
    a6e0:	4a40      	ldr	r2, [pc, #256]	; (a7e4 <pdsStoreItemTaskHandler+0x154>)
    a6e2:	7010      	strb	r0, [r2, #0]
        j_found = bit_index;
    a6e4:	4a40      	ldr	r2, [pc, #256]	; (a7e8 <pdsStoreItemTaskHandler+0x158>)
    a6e6:	7013      	strb	r3, [r2, #0]
  if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)byte_index << 3U) + bit_index))
    a6e8:	00c0      	lsls	r0, r0, #3
    a6ea:	18c4      	adds	r4, r0, r3
    a6ec:	0020      	movs	r0, r4
    a6ee:	4b40      	ldr	r3, [pc, #256]	; (a7f0 <pdsStoreItemTaskHandler+0x160>)
    a6f0:	4798      	blx	r3
    a6f2:	2800      	cmp	r0, #0
    a6f4:	d13a      	bne.n	a76c <pdsStoreItemTaskHandler+0xdc>
    if(pdsGetItemDescr(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, &itemDescr))
    a6f6:	a904      	add	r1, sp, #16
    a6f8:	0020      	movs	r0, r4
    a6fa:	4b3e      	ldr	r3, [pc, #248]	; (a7f4 <pdsStoreItemTaskHandler+0x164>)
    a6fc:	4798      	blx	r3
    a6fe:	2800      	cmp	r0, #0
    a700:	d04e      	beq.n	a7a0 <pdsStoreItemTaskHandler+0x110>
      if (itemDescr.filler)
    a702:	9b06      	ldr	r3, [sp, #24]
    a704:	2b00      	cmp	r3, #0
    a706:	d000      	beq.n	a70a <pdsStoreItemTaskHandler+0x7a>
        itemDescr.filler();
    a708:	4798      	blx	r3
      ret = S_Nv_ItemInit(((S_Nv_ItemId_t)byte_index << 3U) + bit_index, itemDescr.itemSize, itemDescr.itemData);
    a70a:	9a05      	ldr	r2, [sp, #20]
    a70c:	ab04      	add	r3, sp, #16
    a70e:	8859      	ldrh	r1, [r3, #2]
    a710:	0020      	movs	r0, r4
    a712:	4b39      	ldr	r3, [pc, #228]	; (a7f8 <pdsStoreItemTaskHandler+0x168>)
    a714:	4798      	blx	r3
      assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a716:	23fd      	movs	r3, #253	; 0xfd
    a718:	4218      	tst	r0, r3
    a71a:	d041      	beq.n	a7a0 <pdsStoreItemTaskHandler+0x110>
    a71c:	4b37      	ldr	r3, [pc, #220]	; (a7fc <pdsStoreItemTaskHandler+0x16c>)
    a71e:	4a38      	ldr	r2, [pc, #224]	; (a800 <pdsStoreItemTaskHandler+0x170>)
    a720:	21eb      	movs	r1, #235	; 0xeb
    a722:	4838      	ldr	r0, [pc, #224]	; (a804 <pdsStoreItemTaskHandler+0x174>)
    a724:	4c38      	ldr	r4, [pc, #224]	; (a808 <pdsStoreItemTaskHandler+0x178>)
    a726:	47a0      	blx	r4
    a728:	464f      	mov	r7, r9
      if (itemsToStore[byte_index] & (1U << bit_index))
    a72a:	4643      	mov	r3, r8
    a72c:	9301      	str	r3, [sp, #4]
    a72e:	e7d0      	b.n	a6d2 <pdsStoreItemTaskHandler+0x42>
  for (i = 0U, byte_index = i_found + 1; i < PDS_ITEM_MASK_SIZE; i++, byte_index++)
    a730:	3001      	adds	r0, #1
    a732:	b2c0      	uxtb	r0, r0
    a734:	3f01      	subs	r7, #1
    a736:	b2ff      	uxtb	r7, r7
    a738:	2f00      	cmp	r7, #0
    a73a:	d0d5      	beq.n	a6e8 <pdsStoreItemTaskHandler+0x58>
    byte_index %= PDS_ITEM_MASK_SIZE;
    a73c:	4020      	ands	r0, r4
      if (itemsToStore[byte_index] & (1U << bit_index))
    a73e:	9003      	str	r0, [sp, #12]
    a740:	465b      	mov	r3, fp
    a742:	5c1b      	ldrb	r3, [r3, r0]
    a744:	4699      	mov	r9, r3
    a746:	001e      	movs	r6, r3
    a748:	4653      	mov	r3, sl
    a74a:	4233      	tst	r3, r6
    a74c:	d1ec      	bne.n	a728 <pdsStoreItemTaskHandler+0x98>
    a74e:	9b02      	ldr	r3, [sp, #8]
    a750:	002a      	movs	r2, r5
      bit_index %= 8;
    a752:	402b      	ands	r3, r5
      if (itemsToStore[byte_index] & (1U << bit_index))
    a754:	9301      	str	r3, [sp, #4]
    a756:	0031      	movs	r1, r6
    a758:	40d9      	lsrs	r1, r3
    a75a:	420c      	tst	r4, r1
    a75c:	d1b8      	bne.n	a6d0 <pdsStoreItemTaskHandler+0x40>
    for (j = 0U, bit_index = j_found + 1; j < 8U; j++, bit_index++) {
    a75e:	3301      	adds	r3, #1
    a760:	b2db      	uxtb	r3, r3
    a762:	3a01      	subs	r2, #1
    a764:	b2d2      	uxtb	r2, r2
    a766:	2a00      	cmp	r2, #0
    a768:	d1f3      	bne.n	a752 <pdsStoreItemTaskHandler+0xc2>
    a76a:	e7e1      	b.n	a730 <pdsStoreItemTaskHandler+0xa0>
  if (pdsGetItemDescr(id, &itemDescr))
    a76c:	a904      	add	r1, sp, #16
    a76e:	0020      	movs	r0, r4
    a770:	4b20      	ldr	r3, [pc, #128]	; (a7f4 <pdsStoreItemTaskHandler+0x164>)
    a772:	4798      	blx	r3
    a774:	2800      	cmp	r0, #0
    a776:	d013      	beq.n	a7a0 <pdsStoreItemTaskHandler+0x110>
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a778:	ab04      	add	r3, sp, #16
    a77a:	885b      	ldrh	r3, [r3, #2]
    a77c:	2b00      	cmp	r3, #0
    a77e:	d01e      	beq.n	a7be <pdsStoreItemTaskHandler+0x12e>
    a780:	9b05      	ldr	r3, [sp, #20]
    a782:	2b00      	cmp	r3, #0
    a784:	d01b      	beq.n	a7be <pdsStoreItemTaskHandler+0x12e>
    if (itemDescr.filler)
    a786:	9b06      	ldr	r3, [sp, #24]
    a788:	2b00      	cmp	r3, #0
    a78a:	d000      	beq.n	a78e <pdsStoreItemTaskHandler+0xfe>
      itemDescr.filler();
    a78c:	4798      	blx	r3
      ret = S_Nv_Write(id, 0U, itemDescr.itemSize, itemDescr.itemData);
    a78e:	9b05      	ldr	r3, [sp, #20]
    a790:	aa04      	add	r2, sp, #16
    a792:	8852      	ldrh	r2, [r2, #2]
    a794:	2100      	movs	r1, #0
    a796:	0020      	movs	r0, r4
    a798:	4c1c      	ldr	r4, [pc, #112]	; (a80c <pdsStoreItemTaskHandler+0x17c>)
    a79a:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    a79c:	2800      	cmp	r0, #0
    a79e:	d115      	bne.n	a7cc <pdsStoreItemTaskHandler+0x13c>
    if (itemsToStore[i])
    a7a0:	4b12      	ldr	r3, [pc, #72]	; (a7ec <pdsStoreItemTaskHandler+0x15c>)
    a7a2:	781b      	ldrb	r3, [r3, #0]
    a7a4:	2b00      	cmp	r3, #0
    a7a6:	d118      	bne.n	a7da <pdsStoreItemTaskHandler+0x14a>
    a7a8:	4b10      	ldr	r3, [pc, #64]	; (a7ec <pdsStoreItemTaskHandler+0x15c>)
    a7aa:	785b      	ldrb	r3, [r3, #1]
    a7ac:	2b00      	cmp	r3, #0
    a7ae:	d114      	bne.n	a7da <pdsStoreItemTaskHandler+0x14a>
}
    a7b0:	b009      	add	sp, #36	; 0x24
    a7b2:	bc3c      	pop	{r2, r3, r4, r5}
    a7b4:	4690      	mov	r8, r2
    a7b6:	4699      	mov	r9, r3
    a7b8:	46a2      	mov	sl, r4
    a7ba:	46ab      	mov	fp, r5
    a7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert((0U != itemDescr.itemSize) && (NULL != itemDescr.itemData));
    a7be:	4b14      	ldr	r3, [pc, #80]	; (a810 <pdsStoreItemTaskHandler+0x180>)
    a7c0:	4a14      	ldr	r2, [pc, #80]	; (a814 <pdsStoreItemTaskHandler+0x184>)
    a7c2:	219a      	movs	r1, #154	; 0x9a
    a7c4:	0049      	lsls	r1, r1, #1
    a7c6:	480f      	ldr	r0, [pc, #60]	; (a804 <pdsStoreItemTaskHandler+0x174>)
    a7c8:	4c0f      	ldr	r4, [pc, #60]	; (a808 <pdsStoreItemTaskHandler+0x178>)
    a7ca:	47a0      	blx	r4
      assert(ret == S_Nv_ReturnValue_Ok);
    a7cc:	4b12      	ldr	r3, [pc, #72]	; (a818 <pdsStoreItemTaskHandler+0x188>)
    a7ce:	4a11      	ldr	r2, [pc, #68]	; (a814 <pdsStoreItemTaskHandler+0x184>)
    a7d0:	21a1      	movs	r1, #161	; 0xa1
    a7d2:	0049      	lsls	r1, r1, #1
    a7d4:	480b      	ldr	r0, [pc, #44]	; (a804 <pdsStoreItemTaskHandler+0x174>)
    a7d6:	4c0c      	ldr	r4, [pc, #48]	; (a808 <pdsStoreItemTaskHandler+0x178>)
    a7d8:	47a0      	blx	r4
      pdsPostTask(PDS_STORE_ITEM_TASK_ID);
    a7da:	2000      	movs	r0, #0
    a7dc:	4b0f      	ldr	r3, [pc, #60]	; (a81c <pdsStoreItemTaskHandler+0x18c>)
    a7de:	4798      	blx	r3
}
    a7e0:	e7e6      	b.n	a7b0 <pdsStoreItemTaskHandler+0x120>
    a7e2:	46c0      	nop			; (mov r8, r8)
    a7e4:	20000354 	.word	0x20000354
    a7e8:	2000035a 	.word	0x2000035a
    a7ec:	20000358 	.word	0x20000358
    a7f0:	0000a4c9 	.word	0x0000a4c9
    a7f4:	0000a94d 	.word	0x0000a94d
    a7f8:	0000a3b9 	.word	0x0000a3b9
    a7fc:	000136c0 	.word	0x000136c0
    a800:	00013708 	.word	0x00013708
    a804:	00013674 	.word	0x00013674
    a808:	00011d75 	.word	0x00011d75
    a80c:	0000a1b5 	.word	0x0000a1b5
    a810:	00013638 	.word	0x00013638
    a814:	00013720 	.word	0x00013720
    a818:	00013740 	.word	0x00013740
    a81c:	0000a8f9 	.word	0x0000a8f9

0000a820 <PDS_IsAbleToRestore>:
{
    a820:	b5f0      	push	{r4, r5, r6, r7, lr}
    a822:	b085      	sub	sp, #20
  uint8_t itemsToBeAbleRestore[PDS_ITEM_MASK_SIZE] = {0U};
    a824:	a903      	add	r1, sp, #12
    a826:	2300      	movs	r3, #0
    a828:	800b      	strh	r3, [r1, #0]
  if (!pdsInitItemMask(memoryId, itemsToBeAbleRestore))
    a82a:	4b11      	ldr	r3, [pc, #68]	; (a870 <PDS_IsAbleToRestore+0x50>)
    a82c:	4798      	blx	r3
    a82e:	9001      	str	r0, [sp, #4]
    a830:	2700      	movs	r7, #0
    a832:	2800      	cmp	r0, #0
    a834:	d116      	bne.n	a864 <PDS_IsAbleToRestore+0x44>
}
    a836:	9801      	ldr	r0, [sp, #4]
    a838:	b005      	add	sp, #20
    a83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a83c:	3501      	adds	r5, #1
    a83e:	3401      	adds	r4, #1
    a840:	b2a4      	uxth	r4, r4
    for (j = 0U; j < 8U; j++)
    a842:	2d08      	cmp	r5, #8
    a844:	d00b      	beq.n	a85e <PDS_IsAbleToRestore+0x3e>
      if (itemsToBeAbleRestore[i] & (1U << j))
    a846:	ab03      	add	r3, sp, #12
    a848:	5ddb      	ldrb	r3, [r3, r7]
    a84a:	40eb      	lsrs	r3, r5
    a84c:	421e      	tst	r6, r3
    a84e:	d0f5      	beq.n	a83c <PDS_IsAbleToRestore+0x1c>
      if (!S_Nv_IsItemAvailable(((S_Nv_ItemId_t)i << 3U) + j))
    a850:	0020      	movs	r0, r4
    a852:	4b08      	ldr	r3, [pc, #32]	; (a874 <PDS_IsAbleToRestore+0x54>)
    a854:	4798      	blx	r3
    a856:	2800      	cmp	r0, #0
    a858:	d1f0      	bne.n	a83c <PDS_IsAbleToRestore+0x1c>
          return false;
    a85a:	9001      	str	r0, [sp, #4]
    a85c:	e7eb      	b.n	a836 <PDS_IsAbleToRestore+0x16>
    a85e:	3701      	adds	r7, #1
  for (i = 0U; i < PDS_ITEM_MASK_SIZE; i++)
    a860:	2f02      	cmp	r7, #2
    a862:	d0e8      	beq.n	a836 <PDS_IsAbleToRestore+0x16>
    a864:	00fc      	lsls	r4, r7, #3
    a866:	b2a4      	uxth	r4, r4
{
    a868:	2500      	movs	r5, #0
      if (itemsToBeAbleRestore[i] & (1U << j))
    a86a:	2601      	movs	r6, #1
    a86c:	e7eb      	b.n	a846 <PDS_IsAbleToRestore+0x26>
    a86e:	46c0      	nop			; (mov r8, r8)
    a870:	0000a4dd 	.word	0x0000a4dd
    a874:	0000a4c9 	.word	0x0000a4c9

0000a878 <PDS_Init>:
\brief Persistent Data Server initialization routine.
******************************************************************************/


void PDS_Init (void)
{
    a878:	b510      	push	{r4, lr}
  D_Nv_Init();
    a87a:	4b02      	ldr	r3, [pc, #8]	; (a884 <PDS_Init+0xc>)
    a87c:	4798      	blx	r3
  S_Nv_Init();
    a87e:	4b02      	ldr	r3, [pc, #8]	; (a888 <PDS_Init+0x10>)
    a880:	4798      	blx	r3
}
    a882:	bd10      	pop	{r4, pc}
    a884:	0000902d 	.word	0x0000902d
    a888:	0000a17d 	.word	0x0000a17d

0000a88c <PDS_InitItems>:

/******************************************************************************
\brief PDS item initialization routine
******************************************************************************/
void PDS_InitItems(void)
{
    a88c:	b570      	push	{r4, r5, r6, lr}
    a88e:	b084      	sub	sp, #16
  S_Nv_ReturnValue_t ret;
  ItemIdToMemoryMapping_t itemDesc;

  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a890:	2401      	movs	r4, #1
  {
    if (pdsGetItemDescr(i, &itemDesc))
    a892:	4e12      	ldr	r6, [pc, #72]	; (a8dc <PDS_InitItems+0x50>)
        pdsSecureItemInit(i,itemDesc.itemSize);
      }
      else
#endif
      {
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a894:	4d12      	ldr	r5, [pc, #72]	; (a8e0 <PDS_InitItems+0x54>)
    a896:	e009      	b.n	a8ac <PDS_InitItems+0x20>
      assert(itemDesc.itemSize);
    a898:	4b12      	ldr	r3, [pc, #72]	; (a8e4 <PDS_InitItems+0x58>)
    a89a:	4a13      	ldr	r2, [pc, #76]	; (a8e8 <PDS_InitItems+0x5c>)
    a89c:	3150      	adds	r1, #80	; 0x50
    a89e:	4813      	ldr	r0, [pc, #76]	; (a8ec <PDS_InitItems+0x60>)
    a8a0:	4c13      	ldr	r4, [pc, #76]	; (a8f0 <PDS_InitItems+0x64>)
    a8a2:	47a0      	blx	r4
  for (S_Nv_ItemId_t i = 1U; i < PDS_ITEM_AMOUNT; i++)
    a8a4:	3401      	adds	r4, #1
    a8a6:	b2a4      	uxth	r4, r4
    a8a8:	2c0a      	cmp	r4, #10
    a8aa:	d014      	beq.n	a8d6 <PDS_InitItems+0x4a>
    if (pdsGetItemDescr(i, &itemDesc))
    a8ac:	4669      	mov	r1, sp
    a8ae:	0020      	movs	r0, r4
    a8b0:	47b0      	blx	r6
    a8b2:	2800      	cmp	r0, #0
    a8b4:	d0f6      	beq.n	a8a4 <PDS_InitItems+0x18>
      assert(itemDesc.itemSize);
    a8b6:	466b      	mov	r3, sp
    a8b8:	8859      	ldrh	r1, [r3, #2]
    a8ba:	2900      	cmp	r1, #0
    a8bc:	d0ec      	beq.n	a898 <PDS_InitItems+0xc>
        ret = S_Nv_ItemInit(i, itemDesc.itemSize, NULL);
    a8be:	2200      	movs	r2, #0
    a8c0:	0020      	movs	r0, r4
    a8c2:	47a8      	blx	r5
        assert((S_Nv_ReturnValue_DidNotExist == ret) || (S_Nv_ReturnValue_Ok == ret));
    a8c4:	23fd      	movs	r3, #253	; 0xfd
    a8c6:	4218      	tst	r0, r3
    a8c8:	d0ec      	beq.n	a8a4 <PDS_InitItems+0x18>
    a8ca:	4b0a      	ldr	r3, [pc, #40]	; (a8f4 <PDS_InitItems+0x68>)
    a8cc:	4a06      	ldr	r2, [pc, #24]	; (a8e8 <PDS_InitItems+0x5c>)
    a8ce:	215b      	movs	r1, #91	; 0x5b
    a8d0:	4806      	ldr	r0, [pc, #24]	; (a8ec <PDS_InitItems+0x60>)
    a8d2:	4c07      	ldr	r4, [pc, #28]	; (a8f0 <PDS_InitItems+0x64>)
    a8d4:	47a0      	blx	r4
      }
    }
  }
}
    a8d6:	b004      	add	sp, #16
    a8d8:	bd70      	pop	{r4, r5, r6, pc}
    a8da:	46c0      	nop			; (mov r8, r8)
    a8dc:	0000a94d 	.word	0x0000a94d
    a8e0:	0000a3b9 	.word	0x0000a3b9
    a8e4:	0001375c 	.word	0x0001375c
    a8e8:	000137b4 	.word	0x000137b4
    a8ec:	00013770 	.word	0x00013770
    a8f0:	00011d75 	.word	0x00011d75
    a8f4:	000136c0 	.word	0x000136c0

0000a8f8 <pdsPostTask>:
\param[in] taskId - id of a task
******************************************************************************/

void pdsPostTask(PdsTaskId_t taskId)
{
  pendingTasks |= (1U << taskId);
    a8f8:	4a03      	ldr	r2, [pc, #12]	; (a908 <pdsPostTask+0x10>)
    a8fa:	2301      	movs	r3, #1
    a8fc:	4083      	lsls	r3, r0
    a8fe:	7811      	ldrb	r1, [r2, #0]
    a900:	430b      	orrs	r3, r1
    a902:	7013      	strb	r3, [r2, #0]
//  SYS_PostTask(PDS_TASK_ID);
}
    a904:	4770      	bx	lr
    a906:	46c0      	nop			; (mov r8, r8)
    a908:	2000035b 	.word	0x2000035b

0000a90c <PDS_TaskHandler>:

/******************************************************************************
\brief General PDS task handler
******************************************************************************/
void PDS_TaskHandler(void)
{
    a90c:	b570      	push	{r4, r5, r6, lr}
  if (pendingTasks)
    a90e:	4b0d      	ldr	r3, [pc, #52]	; (a944 <PDS_TaskHandler+0x38>)
    a910:	781d      	ldrb	r5, [r3, #0]
    a912:	2d00      	cmp	r5, #0
    a914:	d012      	beq.n	a93c <PDS_TaskHandler+0x30>
  {
    uint8_t taskId = 0U;

    while (!(pendingTasks & (1U << taskId)))
    a916:	0028      	movs	r0, r5
    a918:	07eb      	lsls	r3, r5, #31
    a91a:	d410      	bmi.n	a93e <PDS_TaskHandler+0x32>
    a91c:	2300      	movs	r3, #0
    a91e:	2401      	movs	r4, #1
      taskId++;
    a920:	3301      	adds	r3, #1
    a922:	b2db      	uxtb	r3, r3
    while (!(pendingTasks & (1U << taskId)))
    a924:	0019      	movs	r1, r3
    a926:	0002      	movs	r2, r0
    a928:	40da      	lsrs	r2, r3
    a92a:	4214      	tst	r4, r2
    a92c:	d0f8      	beq.n	a920 <PDS_TaskHandler+0x14>

    pendingTasks ^= (1U << taskId);
    a92e:	2301      	movs	r3, #1
    a930:	408b      	lsls	r3, r1
    a932:	405d      	eors	r5, r3
    a934:	4b03      	ldr	r3, [pc, #12]	; (a944 <PDS_TaskHandler+0x38>)
    a936:	701d      	strb	r5, [r3, #0]
    pdsTaskHandlers[taskId]();
    a938:	4b03      	ldr	r3, [pc, #12]	; (a948 <PDS_TaskHandler+0x3c>)
    a93a:	4798      	blx	r3
   
  }
}
    a93c:	bd70      	pop	{r4, r5, r6, pc}
    while (!(pendingTasks & (1U << taskId)))
    a93e:	2100      	movs	r1, #0
    a940:	e7f5      	b.n	a92e <PDS_TaskHandler+0x22>
    a942:	46c0      	nop			; (mov r8, r8)
    a944:	2000035b 	.word	0x2000035b
    a948:	0000a691 	.word	0x0000a691

0000a94c <pdsGetItemDescr>:
\param[in] itemDescrToGet    - pointer to item descriptor to be loaded;

returns true if descriptor is found out for the given item ID, false - otherwise
******************************************************************************/
bool pdsGetItemDescr(S_Nv_ItemId_t itemId, ItemIdToMemoryMapping_t *itemDescrToGet )
{
    a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a94e:	b087      	sub	sp, #28
    a950:	9101      	str	r1, [sp, #4]
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
  {
    ItemIdToMemoryMapping_t itemDescr;

    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a952:	aa02      	add	r2, sp, #8
    a954:	4b11      	ldr	r3, [pc, #68]	; (a99c <pdsGetItemDescr+0x50>)
    a956:	0011      	movs	r1, r2
    a958:	cb70      	ldmia	r3!, {r4, r5, r6}
    a95a:	c170      	stmia	r1!, {r4, r5, r6}
    a95c:	681b      	ldr	r3, [r3, #0]
    a95e:	600b      	str	r3, [r1, #0]

    if(itemDescr.itemId == itemId)
    a960:	8813      	ldrh	r3, [r2, #0]
    a962:	4283      	cmp	r3, r0
    a964:	d012      	beq.n	a98c <pdsGetItemDescr+0x40>
    {
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
      return true;
    }
    itemDescrPtr++;
    a966:	4b0e      	ldr	r3, [pc, #56]	; (a9a0 <pdsGetItemDescr+0x54>)
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a968:	aa02      	add	r2, sp, #8
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a96a:	490e      	ldr	r1, [pc, #56]	; (a9a4 <pdsGetItemDescr+0x58>)
    a96c:	468c      	mov	ip, r1
    memcpy(&itemDescr, (void const *)itemDescrPtr, sizeof(ItemIdToMemoryMapping_t));
    a96e:	0011      	movs	r1, r2
    a970:	001c      	movs	r4, r3
    a972:	cce0      	ldmia	r4!, {r5, r6, r7}
    a974:	c1e0      	stmia	r1!, {r5, r6, r7}
    a976:	6824      	ldr	r4, [r4, #0]
    a978:	600c      	str	r4, [r1, #0]
    if(itemDescr.itemId == itemId)
    a97a:	8811      	ldrh	r1, [r2, #0]
    a97c:	4281      	cmp	r1, r0
    a97e:	d005      	beq.n	a98c <pdsGetItemDescr+0x40>
    itemDescrPtr++;
    a980:	3310      	adds	r3, #16
  for (uint8_t fileIdx = 0; fileIdx < PDS_ITEM_AMOUNT; fileIdx++)
    a982:	4563      	cmp	r3, ip
    a984:	d1f3      	bne.n	a96e <pdsGetItemDescr+0x22>

  }
  return false;
    a986:	2000      	movs	r0, #0
}
    a988:	b007      	add	sp, #28
    a98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      memcpy(itemDescrToGet, &itemDescr, sizeof(ItemIdToMemoryMapping_t));
    a98c:	2210      	movs	r2, #16
    a98e:	a902      	add	r1, sp, #8
    a990:	9801      	ldr	r0, [sp, #4]
    a992:	4b05      	ldr	r3, [pc, #20]	; (a9a8 <pdsGetItemDescr+0x5c>)
    a994:	4798      	blx	r3
      return true;
    a996:	2001      	movs	r0, #1
    a998:	e7f6      	b.n	a988 <pdsGetItemDescr+0x3c>
    a99a:	46c0      	nop			; (mov r8, r8)
    a99c:	00006100 	.word	0x00006100
    a9a0:	00006110 	.word	0x00006110
    a9a4:	000061a0 	.word	0x000061a0
    a9a8:	00011e37 	.word	0x00011e37

0000a9ac <pdsUpdateMemory>:
{
    a9ac:	b510      	push	{r4, lr}
    a9ae:	b084      	sub	sp, #16
  if (size == oldSize)
    a9b0:	429a      	cmp	r2, r3
    a9b2:	d008      	beq.n	a9c6 <pdsUpdateMemory+0x1a>
  if (pdsGetItemDescr(id, &mapItem))
    a9b4:	4669      	mov	r1, sp
    a9b6:	4b09      	ldr	r3, [pc, #36]	; (a9dc <pdsUpdateMemory+0x30>)
    a9b8:	4798      	blx	r3
    a9ba:	2800      	cmp	r0, #0
    a9bc:	d003      	beq.n	a9c6 <pdsUpdateMemory+0x1a>
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a9be:	466b      	mov	r3, sp
    a9c0:	7b1b      	ldrb	r3, [r3, #12]
    a9c2:	07db      	lsls	r3, r3, #31
    a9c4:	d502      	bpl.n	a9cc <pdsUpdateMemory+0x20>
}
    a9c6:	2001      	movs	r0, #1
    a9c8:	b004      	add	sp, #16
    a9ca:	bd10      	pop	{r4, pc}
    assert (mapItem.flags & SIZE_MODIFICATION_ALLOWED);
    a9cc:	4b04      	ldr	r3, [pc, #16]	; (a9e0 <pdsUpdateMemory+0x34>)
    a9ce:	4a05      	ldr	r2, [pc, #20]	; (a9e4 <pdsUpdateMemory+0x38>)
    a9d0:	21bc      	movs	r1, #188	; 0xbc
    a9d2:	31ff      	adds	r1, #255	; 0xff
    a9d4:	4804      	ldr	r0, [pc, #16]	; (a9e8 <pdsUpdateMemory+0x3c>)
    a9d6:	4c05      	ldr	r4, [pc, #20]	; (a9ec <pdsUpdateMemory+0x40>)
    a9d8:	47a0      	blx	r4
    a9da:	46c0      	nop			; (mov r8, r8)
    a9dc:	0000a94d 	.word	0x0000a94d
    a9e0:	000137d4 	.word	0x000137d4
    a9e4:	000137c4 	.word	0x000137c4
    a9e8:	00013800 	.word	0x00013800
    a9ec:	00011d75 	.word	0x00011d75

0000a9f0 <pdsGetDirDescr>:
\param[in] dirDescrToGet    - pointer to dir descriptor to be loaded;

returns true if descriptor is found out for the given dir ID, false - otherwise
******************************************************************************/
bool pdsGetDirDescr(S_Nv_ItemId_t itemId, PDS_DirDescr_t *dirDescrToGet )
{
    a9f0:	b570      	push	{r4, r5, r6, lr}
    a9f2:	b082      	sub	sp, #8
    a9f4:	000c      	movs	r4, r1
  /* Calculate raw data size */
  for (uint8_t fileIdx = 0; fileIdx < PDS_DIRECTORIES_AMOUNT; fileIdx++)
  {
    PDS_DirDescr_t dirDescr;

    memcpy(&dirDescr, (void const *)dirDescrPtr, sizeof(PDS_DirDescr_t));
    a9f6:	466b      	mov	r3, sp
    a9f8:	4a08      	ldr	r2, [pc, #32]	; (aa1c <pdsGetDirDescr+0x2c>)
    a9fa:	4669      	mov	r1, sp
    a9fc:	ca60      	ldmia	r2!, {r5, r6}
    a9fe:	c160      	stmia	r1!, {r5, r6}
    if(dirDescr.memoryId == itemId)
    aa00:	88da      	ldrh	r2, [r3, #6]
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
      return true;
    }
    dirDescrPtr++;
  }
  return false;
    aa02:	2300      	movs	r3, #0
    if(dirDescr.memoryId == itemId)
    aa04:	4282      	cmp	r2, r0
    aa06:	d002      	beq.n	aa0e <pdsGetDirDescr+0x1e>
}
    aa08:	0018      	movs	r0, r3
    aa0a:	b002      	add	sp, #8
    aa0c:	bd70      	pop	{r4, r5, r6, pc}
      memcpy(dirDescrToGet, &dirDescr, sizeof(PDS_DirDescr_t));
    aa0e:	2208      	movs	r2, #8
    aa10:	4669      	mov	r1, sp
    aa12:	0020      	movs	r0, r4
    aa14:	4b02      	ldr	r3, [pc, #8]	; (aa20 <pdsGetDirDescr+0x30>)
    aa16:	4798      	blx	r3
      return true;
    aa18:	2301      	movs	r3, #1
    aa1a:	e7f5      	b.n	aa08 <pdsGetDirDescr+0x18>
    aa1c:	00006190 	.word	0x00006190
    aa20:	00011e37 	.word	0x00011e37

0000aa24 <sleepMgr_sleepDirectly>:
    return true;
}

#ifdef ENABLE_MANUAL_SLEEP
bool sleepMgr_sleepDirectly( void )	//diffin
{
    aa24:	b530      	push	{r4, r5, lr}
    aa26:	b085      	sub	sp, #20
static inline void system_standby_set_config(
		struct system_standby_config *const config)
{
	Assert(config);
#if SAML21 || SAMR30 || (SAMR34) || (SAMR35)
	PM->STDBYCFG.reg = PM_STDBYCFG_PDCFG(config->power_domain)
    aa28:	2480      	movs	r4, #128	; 0x80
    aa2a:	05e4      	lsls	r4, r4, #23
    aa2c:	23a0      	movs	r3, #160	; 0xa0
    aa2e:	019b      	lsls	r3, r3, #6
    aa30:	8123      	strh	r3, [r4, #8]

	system_standby_set_config(&config);
#endif
	/* Preparing to go for sleep */
	/* Disable Transceiver SPI */
	trx_spi_disable();
    aa32:	4b0f      	ldr	r3, [pc, #60]	; (aa70 <sleepMgr_sleepDirectly+0x4c>)
    aa34:	4798      	blx	r3
	config->division_factor    = 1;
    aa36:	a901      	add	r1, sp, #4
    aa38:	2301      	movs	r3, #1
    aa3a:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    aa3c:	2300      	movs	r3, #0
    aa3e:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    aa40:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    aa42:	724b      	strb	r3, [r1, #9]
            break;

        case SYSTEM_CLOCK_SOURCE_ULP32K:
            /* Select OSCULP32K as new clock source for mainclock temporarily */
            system_gclk_gen_get_config_defaults(&gclk_conf);
            gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    aa44:	3303      	adds	r3, #3
    aa46:	700b      	strb	r3, [r1, #0]
            system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    aa48:	2000      	movs	r0, #0
    aa4a:	4b0a      	ldr	r3, [pc, #40]	; (aa74 <sleepMgr_sleepDirectly+0x50>)
    aa4c:	4798      	blx	r3

            /* Disable OSC16M clock*/
            system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    aa4e:	2006      	movs	r0, #6
    aa50:	4d09      	ldr	r5, [pc, #36]	; (aa78 <sleepMgr_sleepDirectly+0x54>)
    aa52:	47a8      	blx	r5
            system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC32K);
    aa54:	2004      	movs	r0, #4
    aa56:	47a8      	blx	r5
	PM->SLEEPCFG.reg = sleep_mode;
    aa58:	2305      	movs	r3, #5
    aa5a:	7063      	strb	r3, [r4, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    aa5c:	0022      	movs	r2, r4
    aa5e:	7853      	ldrb	r3, [r2, #1]
    aa60:	2b05      	cmp	r3, #5
    aa62:	d1fc      	bne.n	aa5e <sleepMgr_sleepDirectly+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
    aa64:	f3bf 8f4f 	dsb	sy
	__WFI();
    aa68:	bf30      	wfi
}
    aa6a:	2001      	movs	r0, #1
    aa6c:	b005      	add	sp, #20
    aa6e:	bd30      	pop	{r4, r5, pc}
    aa70:	0000e72d 	.word	0x0000e72d
    aa74:	00008391 	.word	0x00008391
    aa78:	000081b5 	.word	0x000081b5

0000aa7c <PHY_DataConf>:
 *      None
 *
 *****************************************************************************************/
void PHY_DataConf(uint8_t status)
{
	dataStatus = (miwi_status_t)status;
    aa7c:	4b02      	ldr	r3, [pc, #8]	; (aa88 <PHY_DataConf+0xc>)
    aa7e:	7018      	strb	r0, [r3, #0]
	dataConfAvailable = true;
    aa80:	2201      	movs	r2, #1
    aa82:	4b02      	ldr	r3, [pc, #8]	; (aa8c <PHY_DataConf+0x10>)
    aa84:	701a      	strb	r2, [r3, #0]
}
    aa86:	4770      	bx	lr
    aa88:	20001df4 	.word	0x20001df4
    aa8c:	2000035c 	.word	0x2000035c

0000aa90 <MiMAC_SetAltAddress>:
{
    aa90:	b510      	push	{r4, lr}
	myNetworkAddress.v[0] = Address[0];
    aa92:	7802      	ldrb	r2, [r0, #0]
    aa94:	4b08      	ldr	r3, [pc, #32]	; (aab8 <MiMAC_SetAltAddress+0x28>)
    aa96:	701a      	strb	r2, [r3, #0]
	myNetworkAddress.v[1] = Address[1];
    aa98:	7842      	ldrb	r2, [r0, #1]
    aa9a:	705a      	strb	r2, [r3, #1]
	MAC_PANID.v[0] = PanId[0];
    aa9c:	780a      	ldrb	r2, [r1, #0]
    aa9e:	4c07      	ldr	r4, [pc, #28]	; (aabc <MiMAC_SetAltAddress+0x2c>)
    aaa0:	7022      	strb	r2, [r4, #0]
	MAC_PANID.v[1] = PanId[1];
    aaa2:	784a      	ldrb	r2, [r1, #1]
    aaa4:	7062      	strb	r2, [r4, #1]
	PHY_SetShortAddr(myNetworkAddress.Val);
    aaa6:	8818      	ldrh	r0, [r3, #0]
    aaa8:	4b05      	ldr	r3, [pc, #20]	; (aac0 <MiMAC_SetAltAddress+0x30>)
    aaaa:	4798      	blx	r3
	PHY_SetPanId(MAC_PANID.Val);
    aaac:	8820      	ldrh	r0, [r4, #0]
    aaae:	4b05      	ldr	r3, [pc, #20]	; (aac4 <MiMAC_SetAltAddress+0x34>)
    aab0:	4798      	blx	r3
}
    aab2:	2001      	movs	r0, #1
    aab4:	bd10      	pop	{r4, pc}
    aab6:	46c0      	nop			; (mov r8, r8)
    aab8:	20001db4 	.word	0x20001db4
    aabc:	20001e10 	.word	0x20001e10
    aac0:	0000baa1 	.word	0x0000baa1
    aac4:	0000ba81 	.word	0x0000ba81

0000aac8 <mic_generator>:
{
    aac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaca:	46c6      	mov	lr, r8
    aacc:	b500      	push	{lr}
    aace:	b0a6      	sub	sp, #152	; 0x98
    aad0:	0006      	movs	r6, r0
    aad2:	000c      	movs	r4, r1
    aad4:	469c      	mov	ip, r3
    aad6:	992c      	ldr	r1, [sp, #176]	; 0xb0
	iterations = len/16;
    aad8:	0925      	lsrs	r5, r4, #4
	if (len % 16 != 0) iterations++;
    aada:	0723      	lsls	r3, r4, #28
    aadc:	d000      	beq.n	aae0 <mic_generator+0x18>
    aade:	3501      	adds	r5, #1
	InitVect_in[0] = 0x49;//frame_control;
    aae0:	2049      	movs	r0, #73	; 0x49
    aae2:	4b41      	ldr	r3, [pc, #260]	; (abe8 <mic_generator+0x120>)
    aae4:	7018      	strb	r0, [r3, #0]
	cbc_header_with_padding[0] = 0x00;  // l(a)
    aae6:	2300      	movs	r3, #0
    aae8:	a802      	add	r0, sp, #8
    aaea:	7003      	strb	r3, [r0, #0]
	cbc_header_with_padding[1] = 0x0d;  // l(a)Header Length
    aaec:	330d      	adds	r3, #13
    aaee:	7043      	strb	r3, [r0, #1]
	cbc_header_with_padding[2] = frame_control;  //frame_control;  //byte 1
    aaf0:	7082      	strb	r2, [r0, #2]
    aaf2:	2200      	movs	r2, #0
		InitVect_in[i+1] =  SourceIEEEAddress[i];
    aaf4:	4b3c      	ldr	r3, [pc, #240]	; (abe8 <mic_generator+0x120>)
    aaf6:	5c8f      	ldrb	r7, [r1, r2]
    aaf8:	18d0      	adds	r0, r2, r3
    aafa:	7047      	strb	r7, [r0, #1]
		cbc_header_with_padding[i+7] = SourceIEEEAddress[i];
    aafc:	0010      	movs	r0, r2
    aafe:	af02      	add	r7, sp, #8
    ab00:	46b8      	mov	r8, r7
    ab02:	4440      	add	r0, r8
    ab04:	5c8f      	ldrb	r7, [r1, r2]
    ab06:	71c7      	strb	r7, [r0, #7]
    ab08:	3201      	adds	r2, #1
	for (i=0;i<8;i++)
    ab0a:	2a08      	cmp	r2, #8
    ab0c:	d1f3      	bne.n	aaf6 <mic_generator+0x2e>
		InitVect_in[i+9] = FrameCounter.v[i];
    ab0e:	4663      	mov	r3, ip
    ab10:	466a      	mov	r2, sp
    ab12:	71d3      	strb	r3, [r2, #7]
    ab14:	79d3      	ldrb	r3, [r2, #7]
    ab16:	4834      	ldr	r0, [pc, #208]	; (abe8 <mic_generator+0x120>)
    ab18:	7243      	strb	r3, [r0, #9]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    ab1a:	4642      	mov	r2, r8
    ab1c:	70d3      	strb	r3, [r2, #3]
		InitVect_in[i+9] = FrameCounter.v[i];
    ab1e:	4663      	mov	r3, ip
    ab20:	041b      	lsls	r3, r3, #16
    ab22:	0e1b      	lsrs	r3, r3, #24
    ab24:	7283      	strb	r3, [r0, #10]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    ab26:	7113      	strb	r3, [r2, #4]
		InitVect_in[i+9] = FrameCounter.v[i];
    ab28:	4663      	mov	r3, ip
    ab2a:	021b      	lsls	r3, r3, #8
    ab2c:	0e1b      	lsrs	r3, r3, #24
    ab2e:	72c3      	strb	r3, [r0, #11]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    ab30:	7153      	strb	r3, [r2, #5]
		InitVect_in[i+9] = FrameCounter.v[i];
    ab32:	4663      	mov	r3, ip
    ab34:	0e1b      	lsrs	r3, r3, #24
    ab36:	7303      	strb	r3, [r0, #12]
		cbc_header_with_padding[i+3] = FrameCounter.v[i];
    ab38:	7193      	strb	r3, [r2, #6]
	cbc_header_with_padding[15] = 0x00;   // Padding
    ab3a:	2300      	movs	r3, #0
    ab3c:	73d3      	strb	r3, [r2, #15]
	InitVect_in[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    ab3e:	2204      	movs	r2, #4
    ab40:	7342      	strb	r2, [r0, #13]
	InitVect_in[14] = 0x00; // 15 th byte padded to zero
    ab42:	7383      	strb	r3, [r0, #14]
	InitVect_in[15] = len; // For MIC calculation All preceding blocks will be incremented by 1
    ab44:	73c4      	strb	r4, [r0, #15]
	PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    ab46:	4929      	ldr	r1, [pc, #164]	; (abec <mic_generator+0x124>)
    ab48:	4b29      	ldr	r3, [pc, #164]	; (abf0 <mic_generator+0x128>)
    ab4a:	4798      	blx	r3
    ab4c:	2300      	movs	r3, #0
		copy_packet1[i] = cbc_header_with_padding[i];
    ab4e:	a906      	add	r1, sp, #24
    ab50:	aa02      	add	r2, sp, #8
    ab52:	5c9a      	ldrb	r2, [r3, r2]
    ab54:	545a      	strb	r2, [r3, r1]
    ab56:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    ab58:	2b10      	cmp	r3, #16
    ab5a:	d1f9      	bne.n	ab50 <mic_generator+0x88>
	for (i=16;i<len+16;i++)
    ab5c:	0027      	movs	r7, r4
    ab5e:	3710      	adds	r7, #16
    ab60:	2f10      	cmp	r7, #16
    ab62:	dd0a      	ble.n	ab7a <mic_generator+0xb2>
    ab64:	2010      	movs	r0, #16
		copy_packet1[i]	= Payloadinfo[i-16];  // Copying the Payload
    ab66:	a906      	add	r1, sp, #24
    ab68:	18f2      	adds	r2, r6, r3
    ab6a:	3a10      	subs	r2, #16
    ab6c:	7812      	ldrb	r2, [r2, #0]
    ab6e:	540a      	strb	r2, [r1, r0]
	for (i=16;i<len+16;i++)
    ab70:	3301      	adds	r3, #1
    ab72:	b2db      	uxtb	r3, r3
    ab74:	0018      	movs	r0, r3
    ab76:	42bb      	cmp	r3, r7
    ab78:	dbf6      	blt.n	ab68 <mic_generator+0xa0>
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    ab7a:	0023      	movs	r3, r4
    ab7c:	3310      	adds	r3, #16
    ab7e:	b2db      	uxtb	r3, r3
    ab80:	001a      	movs	r2, r3
    ab82:	3501      	adds	r5, #1
    ab84:	0129      	lsls	r1, r5, #4
    ab86:	428b      	cmp	r3, r1
    ab88:	da07      	bge.n	ab9a <mic_generator+0xd2>
		copy_packet1[i] = 0; // Padding
    ab8a:	ac06      	add	r4, sp, #24
    ab8c:	2000      	movs	r0, #0
    ab8e:	54a0      	strb	r0, [r4, r2]
	for (i=len+16;i<(iterations *16) + 16 ; i++ )
    ab90:	3301      	adds	r3, #1
    ab92:	b2db      	uxtb	r3, r3
    ab94:	001a      	movs	r2, r3
    ab96:	428b      	cmp	r3, r1
    ab98:	dbf9      	blt.n	ab8e <mic_generator+0xc6>
	for (i=0;i<iterations+1;i++)
    ab9a:	2200      	movs	r2, #0
    ab9c:	2700      	movs	r7, #0
    ab9e:	2d00      	cmp	r5, #0
    aba0:	dd15      	ble.n	abce <mic_generator+0x106>
			InitVect_in[j]	= InitVect_in[j] ^ copy_packet1[j+(i*16)];
    aba2:	4e11      	ldr	r6, [pc, #68]	; (abe8 <mic_generator+0x120>)
    aba4:	0112      	lsls	r2, r2, #4
    aba6:	2300      	movs	r3, #0
    aba8:	a906      	add	r1, sp, #24
    abaa:	188c      	adds	r4, r1, r2
    abac:	1999      	adds	r1, r3, r6
    abae:	5ce2      	ldrb	r2, [r4, r3]
    abb0:	7808      	ldrb	r0, [r1, #0]
    abb2:	4042      	eors	r2, r0
    abb4:	700a      	strb	r2, [r1, #0]
    abb6:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    abb8:	2b10      	cmp	r3, #16
    abba:	d1f7      	bne.n	abac <mic_generator+0xe4>
		PHY_EncryptReq(&InitVect_in[0], (uint8_t *)mySecurityKey);
    abbc:	490b      	ldr	r1, [pc, #44]	; (abec <mic_generator+0x124>)
    abbe:	480a      	ldr	r0, [pc, #40]	; (abe8 <mic_generator+0x120>)
    abc0:	4b0b      	ldr	r3, [pc, #44]	; (abf0 <mic_generator+0x128>)
    abc2:	4798      	blx	r3
	for (i=0;i<iterations+1;i++)
    abc4:	3701      	adds	r7, #1
    abc6:	b2ff      	uxtb	r7, r7
    abc8:	003a      	movs	r2, r7
    abca:	42af      	cmp	r7, r5
    abcc:	dbea      	blt.n	aba4 <mic_generator+0xdc>
    abce:	2300      	movs	r3, #0
		CBC_mic[i] = InitVect_in[i];
    abd0:	4808      	ldr	r0, [pc, #32]	; (abf4 <mic_generator+0x12c>)
    abd2:	4905      	ldr	r1, [pc, #20]	; (abe8 <mic_generator+0x120>)
    abd4:	5cca      	ldrb	r2, [r1, r3]
    abd6:	54c2      	strb	r2, [r0, r3]
    abd8:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    abda:	2b10      	cmp	r3, #16
    abdc:	d1fa      	bne.n	abd4 <mic_generator+0x10c>
}
    abde:	b026      	add	sp, #152	; 0x98
    abe0:	bc04      	pop	{r2}
    abe2:	4690      	mov	r8, r2
    abe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    abe6:	46c0      	nop			; (mov r8, r8)
    abe8:	20001dc4 	.word	0x20001dc4
    abec:	00013850 	.word	0x00013850
    abf0:	0000bbc5 	.word	0x0000bbc5
    abf4:	20001dfc 	.word	0x20001dfc

0000abf8 <DataEncrypt>:
{
    abf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    abfa:	46de      	mov	lr, fp
    abfc:	4657      	mov	r7, sl
    abfe:	464e      	mov	r6, r9
    ac00:	4645      	mov	r5, r8
    ac02:	b5e0      	push	{r5, r6, r7, lr}
    ac04:	b0a1      	sub	sp, #132	; 0x84
    ac06:	9003      	str	r0, [sp, #12]
    ac08:	468a      	mov	sl, r1
    ac0a:	0014      	movs	r4, r2
    ac0c:	001d      	movs	r5, r3
	iterations = *Payload_len/16;
    ac0e:	780f      	ldrb	r7, [r1, #0]
    ac10:	093e      	lsrs	r6, r7, #4
	if (*Payload_len % 16 != 0) iterations++;
    ac12:	073b      	lsls	r3, r7, #28
    ac14:	d000      	beq.n	ac18 <DataEncrypt+0x20>
    ac16:	3601      	adds	r6, #1
	memcpy(CipheringData, Payloadinfo, *Payload_len);
    ac18:	003a      	movs	r2, r7
    ac1a:	9903      	ldr	r1, [sp, #12]
    ac1c:	a804      	add	r0, sp, #16
    ac1e:	4b3e      	ldr	r3, [pc, #248]	; (ad18 <DataEncrypt+0x120>)
    ac20:	4798      	blx	r3
	mic_generator(&Payloadinfo[0] , *Payload_len, FrameControl  , FrameCounter ,  MACInitParams.PAddress);
    ac22:	4b3e      	ldr	r3, [pc, #248]	; (ad1c <DataEncrypt+0x124>)
    ac24:	685b      	ldr	r3, [r3, #4]
    ac26:	9300      	str	r3, [sp, #0]
    ac28:	0023      	movs	r3, r4
    ac2a:	002a      	movs	r2, r5
    ac2c:	0039      	movs	r1, r7
    ac2e:	9803      	ldr	r0, [sp, #12]
    ac30:	4d3b      	ldr	r5, [pc, #236]	; (ad20 <DataEncrypt+0x128>)
    ac32:	47a8      	blx	r5
	for (i=*Payload_len;i<iterations *16 ; i++ )
    ac34:	4653      	mov	r3, sl
    ac36:	781b      	ldrb	r3, [r3, #0]
    ac38:	001a      	movs	r2, r3
    ac3a:	0035      	movs	r5, r6
    ac3c:	0131      	lsls	r1, r6, #4
    ac3e:	428b      	cmp	r3, r1
    ac40:	da07      	bge.n	ac52 <DataEncrypt+0x5a>
		CipheringData[i] = 0; // Padding
    ac42:	a804      	add	r0, sp, #16
    ac44:	2600      	movs	r6, #0
    ac46:	5486      	strb	r6, [r0, r2]
	for (i=*Payload_len;i<iterations *16 ; i++ )
    ac48:	3301      	adds	r3, #1
    ac4a:	b2db      	uxtb	r3, r3
    ac4c:	001a      	movs	r2, r3
    ac4e:	428b      	cmp	r3, r1
    ac50:	dbf9      	blt.n	ac46 <DataEncrypt+0x4e>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    ac52:	2201      	movs	r2, #1
    ac54:	ab18      	add	r3, sp, #96	; 0x60
    ac56:	701a      	strb	r2, [r3, #0]
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    ac58:	4b30      	ldr	r3, [pc, #192]	; (ad1c <DataEncrypt+0x124>)
    ac5a:	6858      	ldr	r0, [r3, #4]
    ac5c:	2300      	movs	r3, #0
    ac5e:	aa18      	add	r2, sp, #96	; 0x60
    ac60:	18d2      	adds	r2, r2, r3
    ac62:	5cc1      	ldrb	r1, [r0, r3]
    ac64:	7051      	strb	r1, [r2, #1]
    ac66:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    ac68:	2b08      	cmp	r3, #8
    ac6a:	d1f8      	bne.n	ac5e <DataEncrypt+0x66>
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    ac6c:	ab18      	add	r3, sp, #96	; 0x60
    ac6e:	725c      	strb	r4, [r3, #9]
    ac70:	0a22      	lsrs	r2, r4, #8
    ac72:	729a      	strb	r2, [r3, #10]
    ac74:	0c22      	lsrs	r2, r4, #16
    ac76:	72da      	strb	r2, [r3, #11]
    ac78:	0e24      	lsrs	r4, r4, #24
    ac7a:	731c      	strb	r4, [r3, #12]
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode // 0x04 --> CCM-32
    ac7c:	2204      	movs	r2, #4
    ac7e:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    ac80:	2200      	movs	r2, #0
    ac82:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    ac84:	73da      	strb	r2, [r3, #15]
	for (i=0;i<iterations+1;i++)
    ac86:	1c6b      	adds	r3, r5, #1
    ac88:	4698      	mov	r8, r3
    ac8a:	2300      	movs	r3, #0
    ac8c:	469b      	mov	fp, r3
    ac8e:	9302      	str	r3, [sp, #8]
    ac90:	4643      	mov	r3, r8
    ac92:	2b00      	cmp	r3, #0
    ac94:	dd31      	ble.n	acfa <DataEncrypt+0x102>
			block[j] = CTR_Nonce_and_Counter[j];
    ac96:	ac1c      	add	r4, sp, #112	; 0x70
    ac98:	ad18      	add	r5, sp, #96	; 0x60
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    ac9a:	4b22      	ldr	r3, [pc, #136]	; (ad24 <DataEncrypt+0x12c>)
    ac9c:	4699      	mov	r9, r3
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    ac9e:	4e22      	ldr	r6, [pc, #136]	; (ad28 <DataEncrypt+0x130>)
    aca0:	e017      	b.n	acd2 <DataEncrypt+0xda>
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    aca2:	5d1a      	ldrb	r2, [r3, r4]
    aca4:	5cc7      	ldrb	r7, [r0, r3]
    aca6:	407a      	eors	r2, r7
    aca8:	54c2      	strb	r2, [r0, r3]
    acaa:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    acac:	2b10      	cmp	r3, #16
    acae:	d007      	beq.n	acc0 <DataEncrypt+0xc8>
			if (CTR_Nonce_and_Counter[15] == 0)
    acb0:	2900      	cmp	r1, #0
    acb2:	d1f6      	bne.n	aca2 <DataEncrypt+0xaa>
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    acb4:	5d1a      	ldrb	r2, [r3, r4]
    acb6:	4667      	mov	r7, ip
    acb8:	5cff      	ldrb	r7, [r7, r3]
    acba:	407a      	eors	r2, r7
    acbc:	54f2      	strb	r2, [r6, r3]
    acbe:	e7f4      	b.n	acaa <DataEncrypt+0xb2>
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next operation
    acc0:	3101      	adds	r1, #1
    acc2:	73e9      	strb	r1, [r5, #15]
	for (i=0;i<iterations+1;i++)
    acc4:	9f02      	ldr	r7, [sp, #8]
    acc6:	3701      	adds	r7, #1
    acc8:	b2fb      	uxtb	r3, r7
    acca:	9302      	str	r3, [sp, #8]
    accc:	469b      	mov	fp, r3
    acce:	4543      	cmp	r3, r8
    acd0:	da13      	bge.n	acfa <DataEncrypt+0x102>
		CTR_Nonce_and_Counter[i+1] = MACInitParams.PAddress[i];
    acd2:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    acd4:	5d5a      	ldrb	r2, [r3, r5]
    acd6:	551a      	strb	r2, [r3, r4]
    acd8:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    acda:	2b10      	cmp	r3, #16
    acdc:	d1fa      	bne.n	acd4 <DataEncrypt+0xdc>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    acde:	4913      	ldr	r1, [pc, #76]	; (ad2c <DataEncrypt+0x134>)
    ace0:	0020      	movs	r0, r4
    ace2:	47c8      	blx	r9
			if (CTR_Nonce_and_Counter[15] == 0)
    ace4:	7be9      	ldrb	r1, [r5, #15]
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    ace6:	4658      	mov	r0, fp
    ace8:	3801      	subs	r0, #1
    acea:	0100      	lsls	r0, r0, #4
    acec:	2300      	movs	r3, #0
    acee:	aa04      	add	r2, sp, #16
    acf0:	4694      	mov	ip, r2
    acf2:	4460      	add	r0, ip
				final_mic_value[j] = block[j] ^ CBC_mic[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    acf4:	4a0e      	ldr	r2, [pc, #56]	; (ad30 <DataEncrypt+0x138>)
    acf6:	4694      	mov	ip, r2
    acf8:	e7da      	b.n	acb0 <DataEncrypt+0xb8>
	memcpy(Payloadinfo, CipheringData, *Payload_len);
    acfa:	4653      	mov	r3, sl
    acfc:	781a      	ldrb	r2, [r3, #0]
    acfe:	a904      	add	r1, sp, #16
    ad00:	9803      	ldr	r0, [sp, #12]
    ad02:	4b05      	ldr	r3, [pc, #20]	; (ad18 <DataEncrypt+0x120>)
    ad04:	4798      	blx	r3
}
    ad06:	2001      	movs	r0, #1
    ad08:	b021      	add	sp, #132	; 0x84
    ad0a:	bc3c      	pop	{r2, r3, r4, r5}
    ad0c:	4690      	mov	r8, r2
    ad0e:	4699      	mov	r9, r3
    ad10:	46a2      	mov	sl, r4
    ad12:	46ab      	mov	fp, r5
    ad14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad16:	46c0      	nop			; (mov r8, r8)
    ad18:	00011e37 	.word	0x00011e37
    ad1c:	20001dbc 	.word	0x20001dbc
    ad20:	0000aac9 	.word	0x0000aac9
    ad24:	0000bbc5 	.word	0x0000bbc5
    ad28:	20001de4 	.word	0x20001de4
    ad2c:	00013850 	.word	0x00013850
    ad30:	20001dfc 	.word	0x20001dfc

0000ad34 <validate_mic>:
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    ad34:	4b08      	ldr	r3, [pc, #32]	; (ad58 <validate_mic+0x24>)
    ad36:	781a      	ldrb	r2, [r3, #0]
    ad38:	4b08      	ldr	r3, [pc, #32]	; (ad5c <validate_mic+0x28>)
    ad3a:	781b      	ldrb	r3, [r3, #0]
		return false;
    ad3c:	2000      	movs	r0, #0
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    ad3e:	429a      	cmp	r2, r3
    ad40:	d000      	beq.n	ad44 <validate_mic+0x10>
}
    ad42:	4770      	bx	lr
	if (final_mic_value[0] != received_mic_values[0] || final_mic_value[1] != received_mic_values[1])
    ad44:	4b04      	ldr	r3, [pc, #16]	; (ad58 <validate_mic+0x24>)
    ad46:	7858      	ldrb	r0, [r3, #1]
    ad48:	4b04      	ldr	r3, [pc, #16]	; (ad5c <validate_mic+0x28>)
    ad4a:	785b      	ldrb	r3, [r3, #1]
    ad4c:	1ac0      	subs	r0, r0, r3
    ad4e:	4243      	negs	r3, r0
    ad50:	4158      	adcs	r0, r3
    ad52:	b2c0      	uxtb	r0, r0
    ad54:	e7f5      	b.n	ad42 <validate_mic+0xe>
    ad56:	46c0      	nop			; (mov r8, r8)
    ad58:	20001de4 	.word	0x20001de4
    ad5c:	20001e0c 	.word	0x20001e0c

0000ad60 <DataDecrypt>:
{
    ad60:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad62:	46de      	mov	lr, fp
    ad64:	4657      	mov	r7, sl
    ad66:	464e      	mov	r6, r9
    ad68:	4645      	mov	r5, r8
    ad6a:	b5e0      	push	{r5, r6, r7, lr}
    ad6c:	b0a5      	sub	sp, #148	; 0x94
    ad6e:	9004      	str	r0, [sp, #16]
    ad70:	9105      	str	r1, [sp, #20]
    ad72:	4693      	mov	fp, r2
    ad74:	9306      	str	r3, [sp, #24]
    ad76:	ab2e      	add	r3, sp, #184	; 0xb8
    ad78:	781b      	ldrb	r3, [r3, #0]
    ad7a:	9307      	str	r3, [sp, #28]
	iterations = *PayloadLen/16;
    ad7c:	780c      	ldrb	r4, [r1, #0]
    ad7e:	0925      	lsrs	r5, r4, #4
	if (*PayloadLen % 16 != 0) iterations++;
    ad80:	0723      	lsls	r3, r4, #28
    ad82:	d000      	beq.n	ad86 <DataDecrypt+0x26>
    ad84:	3501      	adds	r5, #1
	memcpy(CipheringData, Payload, *PayloadLen);
    ad86:	0022      	movs	r2, r4
    ad88:	9904      	ldr	r1, [sp, #16]
    ad8a:	a808      	add	r0, sp, #32
    ad8c:	4b43      	ldr	r3, [pc, #268]	; (ae9c <DataDecrypt+0x13c>)
    ad8e:	4798      	blx	r3
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    ad90:	0023      	movs	r3, r4
    ad92:	0028      	movs	r0, r5
    ad94:	012d      	lsls	r5, r5, #4
    ad96:	42ac      	cmp	r4, r5
    ad98:	da07      	bge.n	adaa <DataDecrypt+0x4a>
		CipheringData[i] = 0; // Padding
    ad9a:	aa08      	add	r2, sp, #32
    ad9c:	2100      	movs	r1, #0
    ad9e:	54d1      	strb	r1, [r2, r3]
	for (i=*PayloadLen;i<iterations *16 ; i++ )
    ada0:	3401      	adds	r4, #1
    ada2:	b2e4      	uxtb	r4, r4
    ada4:	0023      	movs	r3, r4
    ada6:	42ac      	cmp	r4, r5
    ada8:	dbf9      	blt.n	ad9e <DataDecrypt+0x3e>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    adaa:	2201      	movs	r2, #1
    adac:	ab1c      	add	r3, sp, #112	; 0x70
    adae:	701a      	strb	r2, [r3, #0]
    adb0:	2300      	movs	r3, #0
		CTR_Nonce_and_Counter[i+1] = SourceIEEEAddress[i];
    adb2:	465c      	mov	r4, fp
    adb4:	aa1c      	add	r2, sp, #112	; 0x70
    adb6:	18d2      	adds	r2, r2, r3
    adb8:	5ce1      	ldrb	r1, [r4, r3]
    adba:	7051      	strb	r1, [r2, #1]
    adbc:	3301      	adds	r3, #1
	for (i=0;i<8;i++)
    adbe:	2b08      	cmp	r3, #8
    adc0:	d1f8      	bne.n	adb4 <DataDecrypt+0x54>
    adc2:	46a3      	mov	fp, r4
		CTR_Nonce_and_Counter[i+9] = FrameCounter.v[i];
    adc4:	ab1c      	add	r3, sp, #112	; 0x70
    adc6:	9906      	ldr	r1, [sp, #24]
    adc8:	7259      	strb	r1, [r3, #9]
    adca:	0a0a      	lsrs	r2, r1, #8
    adcc:	729a      	strb	r2, [r3, #10]
    adce:	0c0a      	lsrs	r2, r1, #16
    add0:	72da      	strb	r2, [r3, #11]
    add2:	0e0a      	lsrs	r2, r1, #24
    add4:	731a      	strb	r2, [r3, #12]
	CTR_Nonce_and_Counter[13] = SECURITY_LEVEL; //Security Mode
    add6:	2204      	movs	r2, #4
    add8:	735a      	strb	r2, [r3, #13]
	CTR_Nonce_and_Counter[14] = 0x00; // 15 th byte padded to zero
    adda:	2200      	movs	r2, #0
    addc:	739a      	strb	r2, [r3, #14]
	CTR_Nonce_and_Counter[15] = 0x00; // For MIC calculation All preceding blocks will be incremented by 1
    adde:	73da      	strb	r2, [r3, #15]
	for (i=0;i<iterations+1;i++)
    ade0:	1c43      	adds	r3, r0, #1
    ade2:	4699      	mov	r9, r3
    ade4:	2500      	movs	r5, #0
    ade6:	2300      	movs	r3, #0
    ade8:	4698      	mov	r8, r3
    adea:	464b      	mov	r3, r9
    adec:	2b00      	cmp	r3, #0
    adee:	dd2e      	ble.n	ae4e <DataDecrypt+0xee>
			block[j] = CTR_Nonce_and_Counter[j];
    adf0:	ac20      	add	r4, sp, #128	; 0x80
    adf2:	ae1c      	add	r6, sp, #112	; 0x70
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    adf4:	4b2a      	ldr	r3, [pc, #168]	; (aea0 <DataDecrypt+0x140>)
    adf6:	469a      	mov	sl, r3
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    adf8:	4f2a      	ldr	r7, [pc, #168]	; (aea4 <DataDecrypt+0x144>)
    adfa:	4643      	mov	r3, r8
    adfc:	9303      	str	r3, [sp, #12]
    adfe:	46a8      	mov	r8, r5
    ae00:	e014      	b.n	ae2c <DataDecrypt+0xcc>
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    ae02:	5d1a      	ldrb	r2, [r3, r4]
    ae04:	5ce9      	ldrb	r1, [r5, r3]
    ae06:	404a      	eors	r2, r1
    ae08:	54ea      	strb	r2, [r5, r3]
    ae0a:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    ae0c:	2b10      	cmp	r3, #16
    ae0e:	d004      	beq.n	ae1a <DataDecrypt+0xba>
			if (CTR_Nonce_and_Counter[15] == 0)
    ae10:	2800      	cmp	r0, #0
    ae12:	d1f6      	bne.n	ae02 <DataDecrypt+0xa2>
				CTR_mic[j] = block[j]; // CTR_MIC XOR CBC_MIC gives final MIC values
    ae14:	5d1a      	ldrb	r2, [r3, r4]
    ae16:	54fa      	strb	r2, [r7, r3]
    ae18:	e7f7      	b.n	ae0a <DataDecrypt+0xaa>
		CTR_Nonce_and_Counter[15]++; // Increment Counter for next opration
    ae1a:	3001      	adds	r0, #1
    ae1c:	73f0      	strb	r0, [r6, #15]
	for (i=0;i<iterations+1;i++)
    ae1e:	9d03      	ldr	r5, [sp, #12]
    ae20:	3501      	adds	r5, #1
    ae22:	b2eb      	uxtb	r3, r5
    ae24:	9303      	str	r3, [sp, #12]
    ae26:	4698      	mov	r8, r3
    ae28:	454b      	cmp	r3, r9
    ae2a:	da10      	bge.n	ae4e <DataDecrypt+0xee>
	CTR_Nonce_and_Counter[0] = 0x01;  // L
    ae2c:	2300      	movs	r3, #0
			block[j] = CTR_Nonce_and_Counter[j];
    ae2e:	5d9a      	ldrb	r2, [r3, r6]
    ae30:	551a      	strb	r2, [r3, r4]
    ae32:	3301      	adds	r3, #1
		for (j=0;j<16;j++)
    ae34:	2b10      	cmp	r3, #16
    ae36:	d1fa      	bne.n	ae2e <DataDecrypt+0xce>
		PHY_EncryptReq(&block[0], (uint8_t *)mySecurityKey);
    ae38:	491b      	ldr	r1, [pc, #108]	; (aea8 <DataDecrypt+0x148>)
    ae3a:	0020      	movs	r0, r4
    ae3c:	47d0      	blx	sl
			if (CTR_Nonce_and_Counter[15] == 0)
    ae3e:	7bf0      	ldrb	r0, [r6, #15]
				CipheringData[j+(i-1)*16] = block[j] ^ CipheringData[j+(i-1)*16];
    ae40:	4642      	mov	r2, r8
    ae42:	3a01      	subs	r2, #1
    ae44:	0112      	lsls	r2, r2, #4
    ae46:	2300      	movs	r3, #0
    ae48:	a908      	add	r1, sp, #32
    ae4a:	188d      	adds	r5, r1, r2
    ae4c:	e7e0      	b.n	ae10 <DataDecrypt+0xb0>
	*PayloadLen = *PayloadLen-4;
    ae4e:	9b05      	ldr	r3, [sp, #20]
    ae50:	7819      	ldrb	r1, [r3, #0]
    ae52:	3904      	subs	r1, #4
    ae54:	b2c9      	uxtb	r1, r1
    ae56:	7019      	strb	r1, [r3, #0]
	mic_generator(&CipheringData[0] , *PayloadLen , FrameControl  , FrameCounter , SourceIEEEAddress);
    ae58:	465b      	mov	r3, fp
    ae5a:	9300      	str	r3, [sp, #0]
    ae5c:	9b06      	ldr	r3, [sp, #24]
    ae5e:	9a07      	ldr	r2, [sp, #28]
    ae60:	a808      	add	r0, sp, #32
    ae62:	4c12      	ldr	r4, [pc, #72]	; (aeac <DataDecrypt+0x14c>)
    ae64:	47a0      	blx	r4
    ae66:	2300      	movs	r3, #0
		final_mic_value[i] = CTR_mic[i] ^ CBC_mic[i];
    ae68:	4d11      	ldr	r5, [pc, #68]	; (aeb0 <DataDecrypt+0x150>)
    ae6a:	4c0e      	ldr	r4, [pc, #56]	; (aea4 <DataDecrypt+0x144>)
    ae6c:	4811      	ldr	r0, [pc, #68]	; (aeb4 <DataDecrypt+0x154>)
    ae6e:	5ce2      	ldrb	r2, [r4, r3]
    ae70:	5cc1      	ldrb	r1, [r0, r3]
    ae72:	404a      	eors	r2, r1
    ae74:	54ea      	strb	r2, [r5, r3]
    ae76:	3301      	adds	r3, #1
	for (i=0;i<16;i++)
    ae78:	2b10      	cmp	r3, #16
    ae7a:	d1f8      	bne.n	ae6e <DataDecrypt+0x10e>
	memcpy(Payload, CipheringData, *PayloadLen);
    ae7c:	9b05      	ldr	r3, [sp, #20]
    ae7e:	781a      	ldrb	r2, [r3, #0]
    ae80:	a908      	add	r1, sp, #32
    ae82:	9804      	ldr	r0, [sp, #16]
    ae84:	4b05      	ldr	r3, [pc, #20]	; (ae9c <DataDecrypt+0x13c>)
    ae86:	4798      	blx	r3
	return validate_mic();
    ae88:	4b0b      	ldr	r3, [pc, #44]	; (aeb8 <DataDecrypt+0x158>)
    ae8a:	4798      	blx	r3
}
    ae8c:	b025      	add	sp, #148	; 0x94
    ae8e:	bc3c      	pop	{r2, r3, r4, r5}
    ae90:	4690      	mov	r8, r2
    ae92:	4699      	mov	r9, r3
    ae94:	46a2      	mov	sl, r4
    ae96:	46ab      	mov	fp, r5
    ae98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae9a:	46c0      	nop			; (mov r8, r8)
    ae9c:	00011e37 	.word	0x00011e37
    aea0:	0000bbc5 	.word	0x0000bbc5
    aea4:	20001dd4 	.word	0x20001dd4
    aea8:	00013850 	.word	0x00013850
    aeac:	0000aac9 	.word	0x0000aac9
    aeb0:	20001de4 	.word	0x20001de4
    aeb4:	20001dfc 	.word	0x20001dfc
    aeb8:	0000ad35 	.word	0x0000ad35

0000aebc <MiMAC_PowerState>:
{
    aebc:	b510      	push	{r4, lr}
    switch (PowerState)
    aebe:	2800      	cmp	r0, #0
    aec0:	d003      	beq.n	aeca <MiMAC_PowerState+0xe>
    aec2:	28ff      	cmp	r0, #255	; 0xff
    aec4:	d005      	beq.n	aed2 <MiMAC_PowerState+0x16>
            return false;
    aec6:	2000      	movs	r0, #0
    aec8:	e002      	b.n	aed0 <MiMAC_PowerState+0x14>
			PHY_Sleep();
    aeca:	4b04      	ldr	r3, [pc, #16]	; (aedc <MiMAC_PowerState+0x20>)
    aecc:	4798      	blx	r3
    return true;
    aece:	2001      	movs	r0, #1
}
    aed0:	bd10      	pop	{r4, pc}
			PHY_Wakeup();
    aed2:	4b03      	ldr	r3, [pc, #12]	; (aee0 <MiMAC_PowerState+0x24>)
    aed4:	4798      	blx	r3
    return true;
    aed6:	2001      	movs	r0, #1
            break;
    aed8:	e7fa      	b.n	aed0 <MiMAC_PowerState+0x14>
    aeda:	46c0      	nop			; (mov r8, r8)
    aedc:	0000bacd 	.word	0x0000bacd
    aee0:	0000baf9 	.word	0x0000baf9

0000aee4 <MiMAC_Set>:
{
    aee4:	b510      	push	{r4, lr}
    switch(id)
    aee6:	2800      	cmp	r0, #0
    aee8:	d109      	bne.n	aefe <MiMAC_Set+0x1a>
         if(*value > 26) //TODO: this check is necessary here? as we may connect a sub-gig or a 2.4gig?
    aeea:	780b      	ldrb	r3, [r1, #0]
    aeec:	2b1a      	cmp	r3, #26
    aeee:	d807      	bhi.n	af00 <MiMAC_Set+0x1c>
          MACCurrentChannel = *value;
    aef0:	4a04      	ldr	r2, [pc, #16]	; (af04 <MiMAC_Set+0x20>)
    aef2:	7013      	strb	r3, [r2, #0]
          PHY_SetChannel(MACCurrentChannel);
    aef4:	0018      	movs	r0, r3
    aef6:	4b04      	ldr	r3, [pc, #16]	; (af08 <MiMAC_Set+0x24>)
    aef8:	4798      	blx	r3
          return true;
    aefa:	2001      	movs	r0, #1
    aefc:	e000      	b.n	af00 <MiMAC_Set+0x1c>
    return false;
    aefe:	2000      	movs	r0, #0
}
    af00:	bd10      	pop	{r4, pc}
    af02:	46c0      	nop			; (mov r8, r8)
    af04:	20001e12 	.word	0x20001e12
    af08:	0000bb25 	.word	0x0000bb25

0000af0c <MiMAC_Init>:
{
    af0c:	b570      	push	{r4, r5, r6, lr}
    af0e:	b082      	sub	sp, #8
    af10:	466c      	mov	r4, sp
    af12:	9000      	str	r0, [sp, #0]
    af14:	9101      	str	r1, [sp, #4]
	PHY_Init();
    af16:	4b1b      	ldr	r3, [pc, #108]	; (af84 <MiMAC_Init+0x78>)
    af18:	4798      	blx	r3
	MACInitParams = initValue;
    af1a:	4d1b      	ldr	r5, [pc, #108]	; (af88 <MiMAC_Init+0x7c>)
    af1c:	002b      	movs	r3, r5
    af1e:	466a      	mov	r2, sp
    af20:	ca03      	ldmia	r2!, {r0, r1}
    af22:	c303      	stmia	r3!, {r0, r1}
	uint16_t x =  PHY_RandomReq();
    af24:	4b19      	ldr	r3, [pc, #100]	; (af8c <MiMAC_Init+0x80>)
    af26:	4798      	blx	r3
    af28:	0006      	movs	r6, r0
	PHY_SetRxState(true);
    af2a:	2001      	movs	r0, #1
    af2c:	4b18      	ldr	r3, [pc, #96]	; (af90 <MiMAC_Init+0x84>)
    af2e:	4798      	blx	r3
	IEEESeqNum =   x & 0xff;
    af30:	4b18      	ldr	r3, [pc, #96]	; (af94 <MiMAC_Init+0x88>)
    af32:	701e      	strb	r6, [r3, #0]
	PHY_SetIEEEAddr(MACInitParams.PAddress);
    af34:	6868      	ldr	r0, [r5, #4]
    af36:	4b18      	ldr	r3, [pc, #96]	; (af98 <MiMAC_Init+0x8c>)
    af38:	4798      	blx	r3
		RxBuffer[i].PayloadLen = 0;
    af3a:	4b18      	ldr	r3, [pc, #96]	; (af9c <MiMAC_Init+0x90>)
    af3c:	2200      	movs	r2, #0
    af3e:	701a      	strb	r2, [r3, #0]
    af40:	2176      	movs	r1, #118	; 0x76
    af42:	545a      	strb	r2, [r3, r1]
    af44:	3176      	adds	r1, #118	; 0x76
    af46:	545a      	strb	r2, [r3, r1]
    af48:	3176      	adds	r1, #118	; 0x76
    af4a:	545a      	strb	r2, [r3, r1]
			if (initValue.actionFlags.bits.NetworkFreezer)
    af4c:	7823      	ldrb	r3, [r4, #0]
    af4e:	075b      	lsls	r3, r3, #29
    af50:	d40a      	bmi.n	af68 <MiMAC_Init+0x5c>
				OutgoingFrameCounter.Val = 0;
    af52:	4c13      	ldr	r4, [pc, #76]	; (afa0 <MiMAC_Init+0x94>)
    af54:	2300      	movs	r3, #0
    af56:	6023      	str	r3, [r4, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    af58:	2001      	movs	r0, #1
    af5a:	4b12      	ldr	r3, [pc, #72]	; (afa4 <MiMAC_Init+0x98>)
    af5c:	4798      	blx	r3
				OutgoingFrameCounter.Val = 1;
    af5e:	2301      	movs	r3, #1
    af60:	6023      	str	r3, [r4, #0]
}
    af62:	2001      	movs	r0, #1
    af64:	b002      	add	sp, #8
    af66:	bd70      	pop	{r4, r5, r6, pc}
				PDS_Restore(PDS_OUTGOING_FRAME_COUNTER_ID);
    af68:	2001      	movs	r0, #1
    af6a:	4b0f      	ldr	r3, [pc, #60]	; (afa8 <MiMAC_Init+0x9c>)
    af6c:	4798      	blx	r3
				OutgoingFrameCounter.Val += FRAME_COUNTER_UPDATE_INTERVAL;
    af6e:	4a0c      	ldr	r2, [pc, #48]	; (afa0 <MiMAC_Init+0x94>)
    af70:	6813      	ldr	r3, [r2, #0]
    af72:	2180      	movs	r1, #128	; 0x80
    af74:	00c9      	lsls	r1, r1, #3
    af76:	468c      	mov	ip, r1
    af78:	4463      	add	r3, ip
    af7a:	6013      	str	r3, [r2, #0]
				PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    af7c:	2001      	movs	r0, #1
    af7e:	4b09      	ldr	r3, [pc, #36]	; (afa4 <MiMAC_Init+0x98>)
    af80:	4798      	blx	r3
    af82:	e7ee      	b.n	af62 <MiMAC_Init+0x56>
    af84:	0000b9f1 	.word	0x0000b9f1
    af88:	20001dbc 	.word	0x20001dbc
    af8c:	0000bb51 	.word	0x0000bb51
    af90:	0000ba6d 	.word	0x0000ba6d
    af94:	20001d30 	.word	0x20001d30
    af98:	0000bbf1 	.word	0x0000bbf1
    af9c:	20001e2c 	.word	0x20001e2c
    afa0:	20001df8 	.word	0x20001df8
    afa4:	0000a66d 	.word	0x0000a66d
    afa8:	0000a58d 	.word	0x0000a58d

0000afac <MiMAC_SendPacket>:
{
    afac:	b5f0      	push	{r4, r5, r6, r7, lr}
    afae:	46de      	mov	lr, fp
    afb0:	4657      	mov	r7, sl
    afb2:	464e      	mov	r6, r9
    afb4:	4645      	mov	r5, r8
    afb6:	b5e0      	push	{r5, r6, r7, lr}
    afb8:	b08b      	sub	sp, #44	; 0x2c
    afba:	1c04      	adds	r4, r0, #0
    afbc:	9003      	str	r0, [sp, #12]
    afbe:	9104      	str	r1, [sp, #16]
    afc0:	0015      	movs	r5, r2
    afc2:	0a2d      	lsrs	r5, r5, #8
    afc4:	9205      	str	r2, [sp, #20]
    afc6:	9300      	str	r3, [sp, #0]
    afc8:	ab15      	add	r3, sp, #84	; 0x54
    afca:	781b      	ldrb	r3, [r3, #0]
    afcc:	469a      	mov	sl, r3
    afce:	b2e4      	uxtb	r4, r4
    afd0:	06a3      	lsls	r3, r4, #26
    afd2:	0fdb      	lsrs	r3, r3, #31
    afd4:	4698      	mov	r8, r3
    afd6:	9102      	str	r1, [sp, #8]
    afd8:	b2d7      	uxtb	r7, r2
    afda:	b2ed      	uxtb	r5, r5
    if (transParam.flags.bits.broadcast)
    afdc:	0763      	lsls	r3, r4, #29
    afde:	d500      	bpl.n	afe2 <MiMAC_SendPacket+0x36>
        transParam.altDestAddr = true;
    afe0:	2701      	movs	r7, #1
    if (transParam.flags.bits.secEn)
    afe2:	2308      	movs	r3, #8
    afe4:	4023      	ands	r3, r4
    afe6:	001a      	movs	r2, r3
        transParam.altSrcAddr = false;
    afe8:	4253      	negs	r3, r2
    afea:	4153      	adcs	r3, r2
    afec:	425b      	negs	r3, r3
    afee:	401d      	ands	r5, r3
    if (transParam.flags.bits.packetType == PACKET_TYPE_COMMAND)
    aff0:	2303      	movs	r3, #3
    aff2:	4023      	ands	r3, r4
    aff4:	2b01      	cmp	r3, #1
    aff6:	d03a      	beq.n	b06e <MiMAC_SendPacket+0xc2>
    } else if (transParam.flags.bits.packetType == PACKET_TYPE_DATA)
    aff8:	425a      	negs	r2, r3
    affa:	415a      	adcs	r2, r3
        frameControl = 0x03;
    affc:	b2d2      	uxtb	r2, r2
    affe:	4691      	mov	r9, r2
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    b000:	aa03      	add	r2, sp, #12
    b002:	8952      	ldrh	r2, [r2, #10]
    b004:	49a7      	ldr	r1, [pc, #668]	; (b2a4 <MiMAC_SendPacket+0x2f8>)
    b006:	8809      	ldrh	r1, [r1, #0]
    b008:	4291      	cmp	r1, r2
    b00a:	d033      	beq.n	b074 <MiMAC_SendPacket+0xc8>
        IntraPAN = false;
    b00c:	2200      	movs	r2, #0
    b00e:	4693      	mov	fp, r2
        headerLength = 7;
    b010:	3207      	adds	r2, #7
        headerLength += 8;
    b012:	0016      	movs	r6, r2
    b014:	3608      	adds	r6, #8
    if (transParam.altDestAddr)
    b016:	2f00      	cmp	r7, #0
    b018:	d000      	beq.n	b01c <MiMAC_SendPacket+0x70>
        headerLength += 2;
    b01a:	1c96      	adds	r6, r2, #2
    if (transParam.altSrcAddr)
    b01c:	2d00      	cmp	r5, #0
    b01e:	d038      	beq.n	b092 <MiMAC_SendPacket+0xe6>
        headerLength += 2;
    b020:	3602      	adds	r6, #2
    b022:	b2f2      	uxtb	r2, r6
    b024:	9201      	str	r2, [sp, #4]
    if (transParam.flags.bits.ackReq && transParam.flags.bits.broadcast == false)
    b026:	2224      	movs	r2, #36	; 0x24
    b028:	4014      	ands	r4, r2
    b02a:	2c20      	cmp	r4, #32
    b02c:	d035      	beq.n	b09a <MiMAC_SendPacket+0xee>
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    b02e:	2b03      	cmp	r3, #3
    b030:	d038      	beq.n	b0a4 <MiMAC_SendPacket+0xf8>
    if (transParam.flags.bits.secEn)
    b032:	ab03      	add	r3, sp, #12
    b034:	4642      	mov	r2, r8
    b036:	0152      	lsls	r2, r2, #5
    b038:	781c      	ldrb	r4, [r3, #0]
    b03a:	2120      	movs	r1, #32
    b03c:	438c      	bics	r4, r1
    b03e:	4314      	orrs	r4, r2
    b040:	701c      	strb	r4, [r3, #0]
    b042:	0723      	lsls	r3, r4, #28
    b044:	d436      	bmi.n	b0b4 <MiMAC_SendPacket+0x108>
		packet[loc++] = MACPayloadLen+headerLength;
    b046:	ab14      	add	r3, sp, #80	; 0x50
    b048:	781b      	ldrb	r3, [r3, #0]
    b04a:	9a01      	ldr	r2, [sp, #4]
    b04c:	18d6      	adds	r6, r2, r3
    b04e:	4b96      	ldr	r3, [pc, #600]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b050:	701e      	strb	r6, [r3, #0]
	packet[loc++] = frameControl;
    b052:	4b95      	ldr	r3, [pc, #596]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b054:	464a      	mov	r2, r9
    b056:	705a      	strb	r2, [r3, #1]
    if (transParam.flags.bits.packetType == PACKET_TYPE_RESERVE)
    b058:	43e3      	mvns	r3, r4
    b05a:	079b      	lsls	r3, r3, #30
    b05c:	d03d      	beq.n	b0da <MiMAC_SendPacket+0x12e>
        if (transParam.altDestAddr && transParam.altSrcAddr)
    b05e:	2f00      	cmp	r7, #0
    b060:	d05d      	beq.n	b11e <MiMAC_SendPacket+0x172>
    b062:	2d00      	cmp	r5, #0
    b064:	d043      	beq.n	b0ee <MiMAC_SendPacket+0x142>
			packet[loc++] = 0x88;
    b066:	2288      	movs	r2, #136	; 0x88
    b068:	4b8f      	ldr	r3, [pc, #572]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b06a:	709a      	strb	r2, [r3, #2]
    b06c:	e042      	b.n	b0f4 <MiMAC_SendPacket+0x148>
        frameControl = 0x03;
    b06e:	2203      	movs	r2, #3
    b070:	4691      	mov	r9, r2
    b072:	e7c5      	b.n	b000 <MiMAC_SendPacket+0x54>
    if ((transParam.DestPANID.Val == MAC_PANID.Val) && (MAC_PANID.Val != 0xFFFF)) // this is intraPAN
    b074:	498d      	ldr	r1, [pc, #564]	; (b2ac <MiMAC_SendPacket+0x300>)
    b076:	428a      	cmp	r2, r1
    b078:	d007      	beq.n	b08a <MiMAC_SendPacket+0xde>
        frameControl |= 0x40;
    b07a:	2240      	movs	r2, #64	; 0x40
    b07c:	4649      	mov	r1, r9
    b07e:	4311      	orrs	r1, r2
    b080:	4689      	mov	r9, r1
        IntraPAN = true;
    b082:	3a3f      	subs	r2, #63	; 0x3f
    b084:	4693      	mov	fp, r2
        headerLength = 5;
    b086:	3204      	adds	r2, #4
        IntraPAN = true;
    b088:	e7c3      	b.n	b012 <MiMAC_SendPacket+0x66>
        IntraPAN = false;
    b08a:	2200      	movs	r2, #0
    b08c:	4693      	mov	fp, r2
        headerLength = 7;
    b08e:	3207      	adds	r2, #7
    b090:	e7bf      	b.n	b012 <MiMAC_SendPacket+0x66>
        headerLength += 8;
    b092:	3608      	adds	r6, #8
    b094:	b2f2      	uxtb	r2, r6
    b096:	9201      	str	r2, [sp, #4]
    b098:	e7c5      	b.n	b026 <MiMAC_SendPacket+0x7a>
        frameControl |= 0x20;
    b09a:	3a04      	subs	r2, #4
    b09c:	4649      	mov	r1, r9
    b09e:	4311      	orrs	r1, r2
    b0a0:	4689      	mov	r9, r1
    b0a2:	e7c4      	b.n	b02e <MiMAC_SendPacket+0x82>
        transParam.altSrcAddr = true;
    b0a4:	2501      	movs	r5, #1
        transParam.flags.bits.ackReq = false;
    b0a6:	2300      	movs	r3, #0
    b0a8:	4698      	mov	r8, r3
        IntraPAN = false;
    b0aa:	469b      	mov	fp, r3
        frameControl = 0x00;
    b0ac:	4699      	mov	r9, r3
        headerLength = 7;
    b0ae:	3307      	adds	r3, #7
    b0b0:	9301      	str	r3, [sp, #4]
    b0b2:	e7be      	b.n	b032 <MiMAC_SendPacket+0x86>
        frameControl |= 0x08;
    b0b4:	2308      	movs	r3, #8
    b0b6:	464a      	mov	r2, r9
    b0b8:	431a      	orrs	r2, r3
    b0ba:	4691      	mov	r9, r2
		DataEncrypt(MACPayload, &MACPayloadLen, OutgoingFrameCounter, frameControl);
    b0bc:	4b7c      	ldr	r3, [pc, #496]	; (b2b0 <MiMAC_SendPacket+0x304>)
    b0be:	681a      	ldr	r2, [r3, #0]
    b0c0:	464b      	mov	r3, r9
    b0c2:	a914      	add	r1, sp, #80	; 0x50
    b0c4:	9800      	ldr	r0, [sp, #0]
    b0c6:	4e7b      	ldr	r6, [pc, #492]	; (b2b4 <MiMAC_SendPacket+0x308>)
    b0c8:	47b0      	blx	r6
		packet[loc++] = MACPayloadLen+headerLength+9;
    b0ca:	ab14      	add	r3, sp, #80	; 0x50
    b0cc:	781b      	ldrb	r3, [r3, #0]
    b0ce:	3309      	adds	r3, #9
    b0d0:	9a01      	ldr	r2, [sp, #4]
    b0d2:	18d6      	adds	r6, r2, r3
    b0d4:	4b74      	ldr	r3, [pc, #464]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b0d6:	701e      	strb	r6, [r3, #0]
    b0d8:	e7bb      	b.n	b052 <MiMAC_SendPacket+0xa6>
		packet[loc++] = 0x80;
    b0da:	4b73      	ldr	r3, [pc, #460]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b0dc:	2280      	movs	r2, #128	; 0x80
    b0de:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    b0e0:	4975      	ldr	r1, [pc, #468]	; (b2b8 <MiMAC_SendPacket+0x30c>)
    b0e2:	780a      	ldrb	r2, [r1, #0]
    b0e4:	1c50      	adds	r0, r2, #1
    b0e6:	7008      	strb	r0, [r1, #0]
    b0e8:	70da      	strb	r2, [r3, #3]
    b0ea:	2304      	movs	r3, #4
    b0ec:	e03e      	b.n	b16c <MiMAC_SendPacket+0x1c0>
			packet[loc++] = 0xC8;
    b0ee:	22c8      	movs	r2, #200	; 0xc8
    b0f0:	4b6d      	ldr	r3, [pc, #436]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b0f2:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    b0f4:	4b70      	ldr	r3, [pc, #448]	; (b2b8 <MiMAC_SendPacket+0x30c>)
    b0f6:	781a      	ldrb	r2, [r3, #0]
    b0f8:	1c51      	adds	r1, r2, #1
    b0fa:	7019      	strb	r1, [r3, #0]
    b0fc:	4b6a      	ldr	r3, [pc, #424]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b0fe:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    b100:	aa03      	add	r2, sp, #12
    b102:	7a91      	ldrb	r1, [r2, #10]
    b104:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    b106:	7ad2      	ldrb	r2, [r2, #11]
    b108:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    b10a:	0763      	lsls	r3, r4, #29
    b10c:	d429      	bmi.n	b162 <MiMAC_SendPacket+0x1b6>
				packet[loc++] = transParam.DestAddress[0];
    b10e:	9902      	ldr	r1, [sp, #8]
    b110:	780a      	ldrb	r2, [r1, #0]
    b112:	4b65      	ldr	r3, [pc, #404]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b114:	719a      	strb	r2, [r3, #6]
				packet[loc++] = transParam.DestAddress[1];
    b116:	784a      	ldrb	r2, [r1, #1]
    b118:	71da      	strb	r2, [r3, #7]
    b11a:	2308      	movs	r3, #8
    b11c:	e026      	b.n	b16c <MiMAC_SendPacket+0x1c0>
        } else if (transParam.altDestAddr == 0 && transParam.altSrcAddr == 1)
    b11e:	2d00      	cmp	r5, #0
    b120:	d00f      	beq.n	b142 <MiMAC_SendPacket+0x196>
			packet[loc++] = 0x8C;
    b122:	4b61      	ldr	r3, [pc, #388]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b124:	228c      	movs	r2, #140	; 0x8c
    b126:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    b128:	4963      	ldr	r1, [pc, #396]	; (b2b8 <MiMAC_SendPacket+0x30c>)
    b12a:	780a      	ldrb	r2, [r1, #0]
    b12c:	1c50      	adds	r0, r2, #1
    b12e:	7008      	strb	r0, [r1, #0]
    b130:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    b132:	aa03      	add	r2, sp, #12
    b134:	7a91      	ldrb	r1, [r2, #10]
    b136:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    b138:	7ad2      	ldrb	r2, [r2, #11]
    b13a:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    b13c:	0763      	lsls	r3, r4, #29
    b13e:	d410      	bmi.n	b162 <MiMAC_SendPacket+0x1b6>
    b140:	e08f      	b.n	b262 <MiMAC_SendPacket+0x2b6>
			packet[loc++] = 0xCC;
    b142:	4b59      	ldr	r3, [pc, #356]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b144:	22cc      	movs	r2, #204	; 0xcc
    b146:	709a      	strb	r2, [r3, #2]
		packet[loc++] = IEEESeqNum++;
    b148:	495b      	ldr	r1, [pc, #364]	; (b2b8 <MiMAC_SendPacket+0x30c>)
    b14a:	780a      	ldrb	r2, [r1, #0]
    b14c:	1c50      	adds	r0, r2, #1
    b14e:	7008      	strb	r0, [r1, #0]
    b150:	70da      	strb	r2, [r3, #3]
		packet[loc++] = transParam.DestPANID.v[0];
    b152:	aa03      	add	r2, sp, #12
    b154:	7a91      	ldrb	r1, [r2, #10]
    b156:	7119      	strb	r1, [r3, #4]
		packet[loc++] = transParam.DestPANID.v[1];
    b158:	7ad2      	ldrb	r2, [r2, #11]
    b15a:	715a      	strb	r2, [r3, #5]
        if (transParam.flags.bits.broadcast)
    b15c:	0763      	lsls	r3, r4, #29
    b15e:	d400      	bmi.n	b162 <MiMAC_SendPacket+0x1b6>
    b160:	e07c      	b.n	b25c <MiMAC_SendPacket+0x2b0>
			packet[loc++] = 0xFF;
    b162:	4b51      	ldr	r3, [pc, #324]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b164:	22ff      	movs	r2, #255	; 0xff
    b166:	719a      	strb	r2, [r3, #6]
			packet[loc++] = 0xFF;
    b168:	71da      	strb	r2, [r3, #7]
    b16a:	2308      	movs	r3, #8
    if (IntraPAN == false)
    b16c:	465a      	mov	r2, fp
    b16e:	2a00      	cmp	r2, #0
    b170:	d109      	bne.n	b186 <MiMAC_SendPacket+0x1da>
		packet[loc++] = MAC_PANID.v[0];
    b172:	1c5a      	adds	r2, r3, #1
    b174:	b2d2      	uxtb	r2, r2
    b176:	494c      	ldr	r1, [pc, #304]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b178:	484a      	ldr	r0, [pc, #296]	; (b2a4 <MiMAC_SendPacket+0x2f8>)
    b17a:	7804      	ldrb	r4, [r0, #0]
    b17c:	54cc      	strb	r4, [r1, r3]
		packet[loc++] = MAC_PANID.v[1];
    b17e:	3302      	adds	r3, #2
    b180:	b2db      	uxtb	r3, r3
    b182:	7840      	ldrb	r0, [r0, #1]
    b184:	5488      	strb	r0, [r1, r2]
    if (transParam.altSrcAddr)
    b186:	2d00      	cmp	r5, #0
    b188:	d100      	bne.n	b18c <MiMAC_SendPacket+0x1e0>
    b18a:	e075      	b.n	b278 <MiMAC_SendPacket+0x2cc>
		packet[loc++] = myNetworkAddress.v[0];
    b18c:	4a46      	ldr	r2, [pc, #280]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b18e:	494b      	ldr	r1, [pc, #300]	; (b2bc <MiMAC_SendPacket+0x310>)
    b190:	7808      	ldrb	r0, [r1, #0]
    b192:	54d0      	strb	r0, [r2, r3]
		packet[loc++] = myNetworkAddress.v[1];
    b194:	1c9c      	adds	r4, r3, #2
    b196:	b2e4      	uxtb	r4, r4
		packet[loc++] = myNetworkAddress.v[0];
    b198:	3301      	adds	r3, #1
		packet[loc++] = myNetworkAddress.v[1];
    b19a:	b2db      	uxtb	r3, r3
    b19c:	7849      	ldrb	r1, [r1, #1]
    b19e:	54d1      	strb	r1, [r2, r3]
if (transParam.flags.bits.secEn)
    b1a0:	aa03      	add	r2, sp, #12
    b1a2:	4643      	mov	r3, r8
    b1a4:	0159      	lsls	r1, r3, #5
    b1a6:	7813      	ldrb	r3, [r2, #0]
    b1a8:	2020      	movs	r0, #32
    b1aa:	4383      	bics	r3, r0
    b1ac:	430b      	orrs	r3, r1
    b1ae:	7013      	strb	r3, [r2, #0]
    b1b0:	071b      	lsls	r3, r3, #28
    b1b2:	d51b      	bpl.n	b1ec <MiMAC_SendPacket+0x240>
    b1b4:	0022      	movs	r2, r4
    b1b6:	2300      	movs	r3, #0
		packet[loc++] = OutgoingFrameCounter.v[i];
    b1b8:	4e3b      	ldr	r6, [pc, #236]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b1ba:	4d3d      	ldr	r5, [pc, #244]	; (b2b0 <MiMAC_SendPacket+0x304>)
    b1bc:	1c51      	adds	r1, r2, #1
    b1be:	5ce8      	ldrb	r0, [r5, r3]
    b1c0:	54b0      	strb	r0, [r6, r2]
    b1c2:	3301      	adds	r3, #1
    b1c4:	b2ca      	uxtb	r2, r1
	for (i = 0; i < 4; i++)
    b1c6:	2b04      	cmp	r3, #4
    b1c8:	d1f8      	bne.n	b1bc <MiMAC_SendPacket+0x210>
    b1ca:	1d25      	adds	r5, r4, #4
    b1cc:	b2ed      	uxtb	r5, r5
	OutgoingFrameCounter.Val++;
    b1ce:	4a38      	ldr	r2, [pc, #224]	; (b2b0 <MiMAC_SendPacket+0x304>)
    b1d0:	6813      	ldr	r3, [r2, #0]
    b1d2:	3301      	adds	r3, #1
    b1d4:	6013      	str	r3, [r2, #0]
	if ((OutgoingFrameCounter.v[0] == 0) && ((OutgoingFrameCounter.v[1] & 0x03) == 0))
    b1d6:	b2db      	uxtb	r3, r3
    b1d8:	2b00      	cmp	r3, #0
    b1da:	d102      	bne.n	b1e2 <MiMAC_SendPacket+0x236>
    b1dc:	7853      	ldrb	r3, [r2, #1]
    b1de:	079b      	lsls	r3, r3, #30
    b1e0:	d059      	beq.n	b296 <MiMAC_SendPacket+0x2ea>
	packet[loc++] = myKeySequenceNumber;
    b1e2:	3405      	adds	r4, #5
    b1e4:	b2e4      	uxtb	r4, r4
    b1e6:	2200      	movs	r2, #0
    b1e8:	4b2f      	ldr	r3, [pc, #188]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b1ea:	555a      	strb	r2, [r3, r5]
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    b1ec:	ab14      	add	r3, sp, #80	; 0x50
    b1ee:	781a      	ldrb	r2, [r3, #0]
    b1f0:	2a00      	cmp	r2, #0
    b1f2:	d054      	beq.n	b29e <MiMAC_SendPacket+0x2f2>
    b1f4:	9b00      	ldr	r3, [sp, #0]
    b1f6:	18a2      	adds	r2, r4, r2
    b1f8:	b2d2      	uxtb	r2, r2
	    packet[loc++] = MACPayload[i];
    b1fa:	4d2b      	ldr	r5, [pc, #172]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b1fc:	1c61      	adds	r1, r4, #1
    b1fe:	7818      	ldrb	r0, [r3, #0]
    b200:	5528      	strb	r0, [r5, r4]
    b202:	3301      	adds	r3, #1
    b204:	b2cc      	uxtb	r4, r1
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    b206:	4294      	cmp	r4, r2
    b208:	d1f8      	bne.n	b1fc <MiMAC_SendPacket+0x250>
	packet[loc++] = final_mic_value[0];
    b20a:	4b27      	ldr	r3, [pc, #156]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b20c:	492c      	ldr	r1, [pc, #176]	; (b2c0 <MiMAC_SendPacket+0x314>)
    b20e:	7808      	ldrb	r0, [r1, #0]
    b210:	5498      	strb	r0, [r3, r2]
    b212:	1c50      	adds	r0, r2, #1
	packet[loc++] = final_mic_value[1];
    b214:	b2c0      	uxtb	r0, r0
    b216:	784c      	ldrb	r4, [r1, #1]
    b218:	541c      	strb	r4, [r3, r0]
    b21a:	1c90      	adds	r0, r2, #2
	packet[loc++] = final_mic_value[2];
    b21c:	b2c0      	uxtb	r0, r0
    b21e:	788c      	ldrb	r4, [r1, #2]
    b220:	541c      	strb	r4, [r3, r0]
    b222:	3203      	adds	r2, #3
	packet[loc++] = final_mic_value[3];
    b224:	b2d2      	uxtb	r2, r2
    b226:	78c9      	ldrb	r1, [r1, #3]
    b228:	5499      	strb	r1, [r3, r2]
    dataPointer = MACPayload;
    b22a:	4a26      	ldr	r2, [pc, #152]	; (b2c4 <MiMAC_SendPacket+0x318>)
    b22c:	9900      	ldr	r1, [sp, #0]
    b22e:	6011      	str	r1, [r2, #0]
	dataConfCallback = ConfCallback;
    b230:	4a25      	ldr	r2, [pc, #148]	; (b2c8 <MiMAC_SendPacket+0x31c>)
    b232:	9916      	ldr	r1, [sp, #88]	; 0x58
    b234:	6011      	str	r1, [r2, #0]
    dataHandle = msghandle;
    b236:	4a25      	ldr	r2, [pc, #148]	; (b2cc <MiMAC_SendPacket+0x320>)
    b238:	4651      	mov	r1, sl
    b23a:	7011      	strb	r1, [r2, #0]
    phyDataRequest.polledConfirmation = false;
    b23c:	a807      	add	r0, sp, #28
    b23e:	2200      	movs	r2, #0
    b240:	7002      	strb	r2, [r0, #0]
    phyDataRequest.confirmCallback = PHY_DataConf;
    b242:	4a23      	ldr	r2, [pc, #140]	; (b2d0 <MiMAC_SendPacket+0x324>)
    b244:	6082      	str	r2, [r0, #8]
    phyDataRequest.data = packet;
    b246:	6043      	str	r3, [r0, #4]
    PHY_DataReq(&phyDataRequest);
    b248:	4b22      	ldr	r3, [pc, #136]	; (b2d4 <MiMAC_SendPacket+0x328>)
    b24a:	4798      	blx	r3
}
    b24c:	2001      	movs	r0, #1
    b24e:	b00b      	add	sp, #44	; 0x2c
    b250:	bc3c      	pop	{r2, r3, r4, r5}
    b252:	4690      	mov	r8, r2
    b254:	4699      	mov	r9, r3
    b256:	46a2      	mov	sl, r4
    b258:	46ab      	mov	fp, r5
    b25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (transParam.altDestAddr)
    b25c:	2f00      	cmp	r7, #0
    b25e:	d000      	beq.n	b262 <MiMAC_SendPacket+0x2b6>
    b260:	e755      	b.n	b10e <MiMAC_SendPacket+0x162>
        headerLength = 7;
    b262:	2300      	movs	r3, #0
					packet[loc++] = transParam.DestAddress[i];
    b264:	4810      	ldr	r0, [pc, #64]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b266:	9c02      	ldr	r4, [sp, #8]
    b268:	5ce1      	ldrb	r1, [r4, r3]
    b26a:	181a      	adds	r2, r3, r0
    b26c:	7191      	strb	r1, [r2, #6]
    b26e:	3301      	adds	r3, #1
                for (i = 0; i < 8; i++)
    b270:	2b08      	cmp	r3, #8
    b272:	d1f9      	bne.n	b268 <MiMAC_SendPacket+0x2bc>
					packet[loc++] = transParam.DestAddress[i];
    b274:	3306      	adds	r3, #6
    b276:	e779      	b.n	b16c <MiMAC_SendPacket+0x1c0>
			packet[loc++] = MACInitParams.PAddress[i];
    b278:	4a17      	ldr	r2, [pc, #92]	; (b2d8 <MiMAC_SendPacket+0x32c>)
    b27a:	6852      	ldr	r2, [r2, #4]
    b27c:	0018      	movs	r0, r3
    b27e:	3008      	adds	r0, #8
    b280:	b2c0      	uxtb	r0, r0
    b282:	4d09      	ldr	r5, [pc, #36]	; (b2a8 <MiMAC_SendPacket+0x2fc>)
    b284:	1c5c      	adds	r4, r3, #1
    b286:	b2e4      	uxtb	r4, r4
    b288:	7811      	ldrb	r1, [r2, #0]
    b28a:	54e9      	strb	r1, [r5, r3]
    b28c:	3201      	adds	r2, #1
    b28e:	0023      	movs	r3, r4
        for (i = 0; i < 8; i++)
    b290:	42a0      	cmp	r0, r4
    b292:	d1f7      	bne.n	b284 <MiMAC_SendPacket+0x2d8>
    b294:	e784      	b.n	b1a0 <MiMAC_SendPacket+0x1f4>
		PDS_Store(PDS_OUTGOING_FRAME_COUNTER_ID);
    b296:	2001      	movs	r0, #1
    b298:	4b10      	ldr	r3, [pc, #64]	; (b2dc <MiMAC_SendPacket+0x330>)
    b29a:	4798      	blx	r3
    b29c:	e7a1      	b.n	b1e2 <MiMAC_SendPacket+0x236>
    for (i = 0; i < MACPayloadLen; i++) // MIC added
    b29e:	0022      	movs	r2, r4
    b2a0:	e7b3      	b.n	b20a <MiMAC_SendPacket+0x25e>
    b2a2:	46c0      	nop			; (mov r8, r8)
    b2a4:	20001e10 	.word	0x20001e10
    b2a8:	20001d34 	.word	0x20001d34
    b2ac:	0000ffff 	.word	0x0000ffff
    b2b0:	20001df8 	.word	0x20001df8
    b2b4:	0000abf9 	.word	0x0000abf9
    b2b8:	20001d30 	.word	0x20001d30
    b2bc:	20001db4 	.word	0x20001db4
    b2c0:	20001de4 	.word	0x20001de4
    b2c4:	20000368 	.word	0x20000368
    b2c8:	20000360 	.word	0x20000360
    b2cc:	20000364 	.word	0x20000364
    b2d0:	0000aa7d 	.word	0x0000aa7d
    b2d4:	0000b915 	.word	0x0000b915
    b2d8:	20001dbc 	.word	0x20001dbc
    b2dc:	0000a66d 	.word	0x0000a66d

0000b2e0 <MiMAC_DiscardPacket>:
	if (BankIndex < BANK_SIZE)
    b2e0:	4b04      	ldr	r3, [pc, #16]	; (b2f4 <MiMAC_DiscardPacket+0x14>)
    b2e2:	781b      	ldrb	r3, [r3, #0]
    b2e4:	2b03      	cmp	r3, #3
    b2e6:	d804      	bhi.n	b2f2 <MiMAC_DiscardPacket+0x12>
		RxBuffer[BankIndex].PayloadLen = 0;
    b2e8:	2276      	movs	r2, #118	; 0x76
    b2ea:	4353      	muls	r3, r2
    b2ec:	2100      	movs	r1, #0
    b2ee:	4a02      	ldr	r2, [pc, #8]	; (b2f8 <MiMAC_DiscardPacket+0x18>)
    b2f0:	5499      	strb	r1, [r3, r2]
}
    b2f2:	4770      	bx	lr
    b2f4:	2000000a 	.word	0x2000000a
    b2f8:	20001e2c 	.word	0x20001e2c

0000b2fc <MiMAC_ReceivedPacket>:
{
    b2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2fe:	46ce      	mov	lr, r9
    b300:	b500      	push	{lr}
    b302:	b082      	sub	sp, #8
	BankIndex = 0xFF;
    b304:	22ff      	movs	r2, #255	; 0xff
    b306:	4bd5      	ldr	r3, [pc, #852]	; (b65c <MiMAC_ReceivedPacket+0x360>)
    b308:	701a      	strb	r2, [r3, #0]
		if (RxBuffer[i].PayloadLen > 0)
    b30a:	4bd5      	ldr	r3, [pc, #852]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b30c:	781b      	ldrb	r3, [r3, #0]
    b30e:	2b00      	cmp	r3, #0
    b310:	d000      	beq.n	b314 <MiMAC_ReceivedPacket+0x18>
    b312:	e22e      	b.n	b772 <MiMAC_ReceivedPacket+0x476>
    b314:	3376      	adds	r3, #118	; 0x76
    b316:	4ad2      	ldr	r2, [pc, #840]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b318:	5cd3      	ldrb	r3, [r2, r3]
    b31a:	2b00      	cmp	r3, #0
    b31c:	d10e      	bne.n	b33c <MiMAC_ReceivedPacket+0x40>
    b31e:	33ec      	adds	r3, #236	; 0xec
    b320:	5cd3      	ldrb	r3, [r2, r3]
    b322:	2b00      	cmp	r3, #0
    b324:	d133      	bne.n	b38e <MiMAC_ReceivedPacket+0x92>
    b326:	3363      	adds	r3, #99	; 0x63
    b328:	33ff      	adds	r3, #255	; 0xff
    b32a:	5cd3      	ldrb	r3, [r2, r3]
	return false;
    b32c:	2000      	movs	r0, #0
	for (i = 0; i < BANK_SIZE; i++)
    b32e:	2103      	movs	r1, #3
		if (RxBuffer[i].PayloadLen > 0)
    b330:	2b00      	cmp	r3, #0
    b332:	d104      	bne.n	b33e <MiMAC_ReceivedPacket+0x42>
}
    b334:	b002      	add	sp, #8
    b336:	bc04      	pop	{r2}
    b338:	4691      	mov	r9, r2
    b33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < BANK_SIZE; i++)
    b33c:	2101      	movs	r1, #1
			BankIndex = i;
    b33e:	4bc7      	ldr	r3, [pc, #796]	; (b65c <MiMAC_ReceivedPacket+0x360>)
    b340:	7019      	strb	r1, [r3, #0]
	return false;
    b342:	2000      	movs	r0, #0
	if (BankIndex < BANK_SIZE)
    b344:	2903      	cmp	r1, #3
    b346:	d8f5      	bhi.n	b334 <MiMAC_ReceivedPacket+0x38>
		if ((RxBuffer[BankIndex].Payload[0] & 0x40) == 0)
    b348:	000a      	movs	r2, r1
    b34a:	2076      	movs	r0, #118	; 0x76
    b34c:	4348      	muls	r0, r1
    b34e:	4bc4      	ldr	r3, [pc, #784]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b350:	181b      	adds	r3, r3, r0
    b352:	785d      	ldrb	r5, [r3, #1]
    b354:	2440      	movs	r4, #64	; 0x40
    b356:	4025      	ands	r5, r4
		MACRxPacket.flags.Val = 0;
    b358:	48c2      	ldr	r0, [pc, #776]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b35a:	2400      	movs	r4, #0
    b35c:	7004      	strb	r4, [r0, #0]
		MACRxPacket.altSourceAddress = false;
    b35e:	73c4      	strb	r4, [r0, #15]
		MACRxPacket.SourcePANID.Val = 0xFFFF;
    b360:	3c01      	subs	r4, #1
    b362:	8204      	strh	r4, [r0, #16]
		addrMode = RxBuffer[BankIndex].Payload[1] & 0xCC;
    b364:	789b      	ldrb	r3, [r3, #2]
    b366:	2033      	movs	r0, #51	; 0x33
    b368:	4383      	bics	r3, r0
		switch (addrMode)
    b36a:	b2d8      	uxtb	r0, r3
    b36c:	2888      	cmp	r0, #136	; 0x88
    b36e:	d100      	bne.n	b372 <MiMAC_ReceivedPacket+0x76>
    b370:	e0e4      	b.n	b53c <MiMAC_ReceivedPacket+0x240>
    b372:	d90e      	bls.n	b392 <MiMAC_ReceivedPacket+0x96>
    b374:	b2d8      	uxtb	r0, r3
    b376:	28c8      	cmp	r0, #200	; 0xc8
    b378:	d04c      	beq.n	b414 <MiMAC_ReceivedPacket+0x118>
    b37a:	28cc      	cmp	r0, #204	; 0xcc
    b37c:	d100      	bne.n	b380 <MiMAC_ReceivedPacket+0x84>
    b37e:	e0ac      	b.n	b4da <MiMAC_ReceivedPacket+0x1de>
    b380:	288c      	cmp	r0, #140	; 0x8c
    b382:	d100      	bne.n	b386 <MiMAC_ReceivedPacket+0x8a>
    b384:	e122      	b.n	b5cc <MiMAC_ReceivedPacket+0x2d0>
			MiMAC_DiscardPacket();
    b386:	4bb8      	ldr	r3, [pc, #736]	; (b668 <MiMAC_ReceivedPacket+0x36c>)
    b388:	4798      	blx	r3
			return false;
    b38a:	2000      	movs	r0, #0
    b38c:	e7d2      	b.n	b334 <MiMAC_ReceivedPacket+0x38>
	for (i = 0; i < BANK_SIZE; i++)
    b38e:	2102      	movs	r1, #2
    b390:	e7d5      	b.n	b33e <MiMAC_ReceivedPacket+0x42>
		switch (addrMode)
    b392:	2b08      	cmp	r3, #8
    b394:	d100      	bne.n	b398 <MiMAC_ReceivedPacket+0x9c>
    b396:	e14d      	b.n	b634 <MiMAC_ReceivedPacket+0x338>
    b398:	2880      	cmp	r0, #128	; 0x80
    b39a:	d1f4      	bne.n	b386 <MiMAC_ReceivedPacket+0x8a>
				MACRxPacket.flags.bits.broadcast = 1;
    b39c:	48b1      	ldr	r0, [pc, #708]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b39e:	7803      	ldrb	r3, [r0, #0]
    b3a0:	2404      	movs	r4, #4
    b3a2:	4323      	orrs	r3, r4
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b3a4:	2480      	movs	r4, #128	; 0x80
    b3a6:	4264      	negs	r4, r4
    b3a8:	4323      	orrs	r3, r4
    b3aa:	7003      	strb	r3, [r0, #0]
				MACRxPacket.altSourceAddress = true;
    b3ac:	2301      	movs	r3, #1
    b3ae:	73c3      	strb	r3, [r0, #15]
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b3b0:	4cab      	ldr	r4, [pc, #684]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b3b2:	3375      	adds	r3, #117	; 0x75
    b3b4:	435a      	muls	r2, r3
    b3b6:	18a5      	adds	r5, r4, r2
    b3b8:	792e      	ldrb	r6, [r5, #4]
    b3ba:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b3bc:	796d      	ldrb	r5, [r5, #5]
    b3be:	7445      	strb	r5, [r0, #17]
    b3c0:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[5]);
    b3c2:	1d8b      	adds	r3, r1, #6
    b3c4:	191b      	adds	r3, r3, r4
    b3c6:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 11;
    b3c8:	5d13      	ldrb	r3, [r2, r4]
    b3ca:	3b0b      	subs	r3, #11
    b3cc:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    b3ce:	3108      	adds	r1, #8
    b3d0:	1909      	adds	r1, r1, r4
    b3d2:	6081      	str	r1, [r0, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    b3d4:	4ba1      	ldr	r3, [pc, #644]	; (b65c <MiMAC_ReceivedPacket+0x360>)
    b3d6:	781a      	ldrb	r2, [r3, #0]
    b3d8:	2376      	movs	r3, #118	; 0x76
    b3da:	435a      	muls	r2, r3
    b3dc:	4ba0      	ldr	r3, [pc, #640]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b3de:	189b      	adds	r3, r3, r2
    b3e0:	785b      	ldrb	r3, [r3, #1]
    b3e2:	071b      	lsls	r3, r3, #28
    b3e4:	d500      	bpl.n	b3e8 <MiMAC_ReceivedPacket+0xec>
    b3e6:	e152      	b.n	b68e <MiMAC_ReceivedPacket+0x392>
		switch (RxBuffer[BankIndex].Payload[0] & 0x07) // check frame type
    b3e8:	4b9c      	ldr	r3, [pc, #624]	; (b65c <MiMAC_ReceivedPacket+0x360>)
    b3ea:	7818      	ldrb	r0, [r3, #0]
    b3ec:	2176      	movs	r1, #118	; 0x76
    b3ee:	4341      	muls	r1, r0
    b3f0:	4a9b      	ldr	r2, [pc, #620]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b3f2:	1852      	adds	r2, r2, r1
    b3f4:	7852      	ldrb	r2, [r2, #1]
    b3f6:	2307      	movs	r3, #7
    b3f8:	4013      	ands	r3, r2
    b3fa:	2b01      	cmp	r3, #1
    b3fc:	d100      	bne.n	b400 <MiMAC_ReceivedPacket+0x104>
    b3fe:	e197      	b.n	b730 <MiMAC_ReceivedPacket+0x434>
    b400:	2b00      	cmp	r3, #0
    b402:	d100      	bne.n	b406 <MiMAC_ReceivedPacket+0x10a>
    b404:	e1af      	b.n	b766 <MiMAC_ReceivedPacket+0x46a>
    b406:	2b03      	cmp	r3, #3
    b408:	d100      	bne.n	b40c <MiMAC_ReceivedPacket+0x110>
    b40a:	e1a4      	b.n	b756 <MiMAC_ReceivedPacket+0x45a>
			MiMAC_DiscardPacket();
    b40c:	4b96      	ldr	r3, [pc, #600]	; (b668 <MiMAC_ReceivedPacket+0x36c>)
    b40e:	4798      	blx	r3
			return false;
    b410:	2000      	movs	r0, #0
    b412:	e78f      	b.n	b334 <MiMAC_ReceivedPacket+0x38>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b414:	2076      	movs	r0, #118	; 0x76
    b416:	4348      	muls	r0, r1
    b418:	4b91      	ldr	r3, [pc, #580]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b41a:	181b      	adds	r3, r3, r0
    b41c:	799b      	ldrb	r3, [r3, #6]
    b41e:	2bff      	cmp	r3, #255	; 0xff
    b420:	d039      	beq.n	b496 <MiMAC_ReceivedPacket+0x19a>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    b422:	4890      	ldr	r0, [pc, #576]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b424:	7804      	ldrb	r4, [r0, #0]
    b426:	2380      	movs	r3, #128	; 0x80
    b428:	425b      	negs	r3, r3
    b42a:	4323      	orrs	r3, r4
    b42c:	7003      	strb	r3, [r0, #0]
			if (bIntraPAN) // check if it is intraPAN
    b42e:	2d00      	cmp	r5, #0
    b430:	d03e      	beq.n	b4b0 <MiMAC_ReceivedPacket+0x1b4>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b432:	4c8b      	ldr	r4, [pc, #556]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b434:	2376      	movs	r3, #118	; 0x76
    b436:	435a      	muls	r2, r3
    b438:	18a5      	adds	r5, r4, r2
    b43a:	792e      	ldrb	r6, [r5, #4]
    b43c:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b43e:	796d      	ldrb	r5, [r5, #5]
    b440:	7445      	strb	r5, [r0, #17]
    b442:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    b444:	000b      	movs	r3, r1
    b446:	3308      	adds	r3, #8
    b448:	191b      	adds	r3, r3, r4
    b44a:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    b44c:	5d13      	ldrb	r3, [r2, r4]
    b44e:	3b13      	subs	r3, #19
    b450:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    b452:	3110      	adds	r1, #16
    b454:	1909      	adds	r1, r1, r4
    b456:	6081      	str	r1, [r0, #8]
		if (RxBuffer[BankIndex].Payload[0] & 0x08)
    b458:	4b80      	ldr	r3, [pc, #512]	; (b65c <MiMAC_ReceivedPacket+0x360>)
    b45a:	781a      	ldrb	r2, [r3, #0]
    b45c:	2376      	movs	r3, #118	; 0x76
    b45e:	435a      	muls	r2, r3
    b460:	4b7f      	ldr	r3, [pc, #508]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b462:	189b      	adds	r3, r3, r2
    b464:	785b      	ldrb	r3, [r3, #1]
    b466:	071b      	lsls	r3, r3, #28
    b468:	d5be      	bpl.n	b3e8 <MiMAC_ReceivedPacket+0xec>
			FrameCounter.v[0] = MACRxPacket.Payload[0];
    b46a:	4b7e      	ldr	r3, [pc, #504]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b46c:	689b      	ldr	r3, [r3, #8]
			FrameCounter.v[1] = MACRxPacket.Payload[1];
    b46e:	785a      	ldrb	r2, [r3, #1]
    b470:	0212      	lsls	r2, r2, #8
    b472:	781d      	ldrb	r5, [r3, #0]
    b474:	4315      	orrs	r5, r2
			FrameCounter.v[2] = MACRxPacket.Payload[2];
    b476:	789a      	ldrb	r2, [r3, #2]
    b478:	0412      	lsls	r2, r2, #16
    b47a:	497c      	ldr	r1, [pc, #496]	; (b66c <MiMAC_ReceivedPacket+0x370>)
    b47c:	400d      	ands	r5, r1
    b47e:	4315      	orrs	r5, r2
			FrameCounter.v[3] = MACRxPacket.Payload[3];
    b480:	78db      	ldrb	r3, [r3, #3]
    b482:	061b      	lsls	r3, r3, #24
    b484:	022a      	lsls	r2, r5, #8
    b486:	0a12      	lsrs	r2, r2, #8
    b488:	431a      	orrs	r2, r3
    b48a:	0015      	movs	r5, r2
    b48c:	2400      	movs	r4, #0
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    b48e:	4e78      	ldr	r6, [pc, #480]	; (b670 <MiMAC_ReceivedPacket+0x374>)
				isSameAddress(defaultParamsRomOrRam.ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    b490:	4b74      	ldr	r3, [pc, #464]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b492:	4699      	mov	r9, r3
    b494:	e102      	b.n	b69c <MiMAC_ReceivedPacket+0x3a0>
			if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b496:	2076      	movs	r0, #118	; 0x76
    b498:	4348      	muls	r0, r1
    b49a:	4b71      	ldr	r3, [pc, #452]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b49c:	181b      	adds	r3, r3, r0
    b49e:	79db      	ldrb	r3, [r3, #7]
    b4a0:	2bff      	cmp	r3, #255	; 0xff
    b4a2:	d1be      	bne.n	b422 <MiMAC_ReceivedPacket+0x126>
				MACRxPacket.flags.bits.broadcast = 1;
    b4a4:	486f      	ldr	r0, [pc, #444]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b4a6:	7803      	ldrb	r3, [r0, #0]
    b4a8:	2404      	movs	r4, #4
    b4aa:	4323      	orrs	r3, r4
    b4ac:	7003      	strb	r3, [r0, #0]
    b4ae:	e7b8      	b.n	b422 <MiMAC_ReceivedPacket+0x126>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    b4b0:	486c      	ldr	r0, [pc, #432]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b4b2:	4c6b      	ldr	r4, [pc, #428]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b4b4:	2376      	movs	r3, #118	; 0x76
    b4b6:	435a      	muls	r2, r3
    b4b8:	18a5      	adds	r5, r4, r2
    b4ba:	7a2e      	ldrb	r6, [r5, #8]
    b4bc:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    b4be:	7a6d      	ldrb	r5, [r5, #9]
    b4c0:	7445      	strb	r5, [r0, #17]
    b4c2:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    b4c4:	000b      	movs	r3, r1
    b4c6:	330a      	adds	r3, #10
    b4c8:	191b      	adds	r3, r3, r4
    b4ca:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    b4cc:	5d13      	ldrb	r3, [r2, r4]
    b4ce:	3b15      	subs	r3, #21
    b4d0:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    b4d2:	3112      	adds	r1, #18
    b4d4:	1909      	adds	r1, r1, r4
    b4d6:	6081      	str	r1, [r0, #8]
    b4d8:	e7be      	b.n	b458 <MiMAC_ReceivedPacket+0x15c>
			MACRxPacket.flags.bits.sourcePrsnt = 1;
    b4da:	4862      	ldr	r0, [pc, #392]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b4dc:	7804      	ldrb	r4, [r0, #0]
    b4de:	2380      	movs	r3, #128	; 0x80
    b4e0:	425b      	negs	r3, r3
    b4e2:	4323      	orrs	r3, r4
    b4e4:	7003      	strb	r3, [r0, #0]
			if (bIntraPAN) // check if it is intraPAN
    b4e6:	2d00      	cmp	r5, #0
    b4e8:	d013      	beq.n	b512 <MiMAC_ReceivedPacket+0x216>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b4ea:	4c5d      	ldr	r4, [pc, #372]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b4ec:	2376      	movs	r3, #118	; 0x76
    b4ee:	435a      	muls	r2, r3
    b4f0:	18a5      	adds	r5, r4, r2
    b4f2:	792e      	ldrb	r6, [r5, #4]
    b4f4:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b4f6:	796d      	ldrb	r5, [r5, #5]
    b4f8:	7445      	strb	r5, [r0, #17]
    b4fa:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[13]);
    b4fc:	000b      	movs	r3, r1
    b4fe:	330e      	adds	r3, #14
    b500:	191b      	adds	r3, r3, r4
    b502:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 25;
    b504:	5d13      	ldrb	r3, [r2, r4]
    b506:	3b19      	subs	r3, #25
    b508:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[21]);
    b50a:	3116      	adds	r1, #22
    b50c:	1909      	adds	r1, r1, r4
    b50e:	6081      	str	r1, [r0, #8]
    b510:	e7a2      	b.n	b458 <MiMAC_ReceivedPacket+0x15c>
				MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[13];
    b512:	4854      	ldr	r0, [pc, #336]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b514:	4c52      	ldr	r4, [pc, #328]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b516:	2376      	movs	r3, #118	; 0x76
    b518:	435a      	muls	r2, r3
    b51a:	18a5      	adds	r5, r4, r2
    b51c:	7bae      	ldrb	r6, [r5, #14]
    b51e:	7406      	strb	r6, [r0, #16]
				MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[14];
    b520:	7bed      	ldrb	r5, [r5, #15]
    b522:	7445      	strb	r5, [r0, #17]
    b524:	4359      	muls	r1, r3
				MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[15]);
    b526:	000b      	movs	r3, r1
    b528:	3310      	adds	r3, #16
    b52a:	191b      	adds	r3, r3, r4
    b52c:	6043      	str	r3, [r0, #4]
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 27;
    b52e:	5d13      	ldrb	r3, [r2, r4]
    b530:	3b1b      	subs	r3, #27
    b532:	7303      	strb	r3, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[23]);
    b534:	3118      	adds	r1, #24
    b536:	1909      	adds	r1, r1, r4
    b538:	6081      	str	r1, [r0, #8]
    b53a:	e78d      	b.n	b458 <MiMAC_ReceivedPacket+0x15c>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b53c:	2076      	movs	r0, #118	; 0x76
    b53e:	4348      	muls	r0, r1
    b540:	4b47      	ldr	r3, [pc, #284]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b542:	181b      	adds	r3, r3, r0
    b544:	799b      	ldrb	r3, [r3, #6]
    b546:	2bff      	cmp	r3, #255	; 0xff
    b548:	d01e      	beq.n	b588 <MiMAC_ReceivedPacket+0x28c>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b54a:	4b46      	ldr	r3, [pc, #280]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b54c:	781c      	ldrb	r4, [r3, #0]
    b54e:	2080      	movs	r0, #128	; 0x80
    b550:	4240      	negs	r0, r0
    b552:	4320      	orrs	r0, r4
    b554:	7018      	strb	r0, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    b556:	2001      	movs	r0, #1
    b558:	73d8      	strb	r0, [r3, #15]
				if (bIntraPAN == false)
    b55a:	2d00      	cmp	r5, #0
    b55c:	d121      	bne.n	b5a2 <MiMAC_ReceivedPacket+0x2a6>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[7];
    b55e:	0018      	movs	r0, r3
    b560:	4c3f      	ldr	r4, [pc, #252]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b562:	2376      	movs	r3, #118	; 0x76
    b564:	435a      	muls	r2, r3
    b566:	18a5      	adds	r5, r4, r2
    b568:	7a2e      	ldrb	r6, [r5, #8]
    b56a:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[8];
    b56c:	7a6d      	ldrb	r5, [r5, #9]
    b56e:	7445      	strb	r5, [r0, #17]
    b570:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[9]);
    b572:	000b      	movs	r3, r1
    b574:	330a      	adds	r3, #10
    b576:	191b      	adds	r3, r3, r4
    b578:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 15;
    b57a:	5d13      	ldrb	r3, [r2, r4]
    b57c:	3b0f      	subs	r3, #15
    b57e:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[11]);
    b580:	310c      	adds	r1, #12
    b582:	1909      	adds	r1, r1, r4
    b584:	6081      	str	r1, [r0, #8]
    b586:	e725      	b.n	b3d4 <MiMAC_ReceivedPacket+0xd8>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b588:	2076      	movs	r0, #118	; 0x76
    b58a:	4348      	muls	r0, r1
    b58c:	4b34      	ldr	r3, [pc, #208]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b58e:	181b      	adds	r3, r3, r0
    b590:	79db      	ldrb	r3, [r3, #7]
    b592:	2bff      	cmp	r3, #255	; 0xff
    b594:	d1d9      	bne.n	b54a <MiMAC_ReceivedPacket+0x24e>
					MACRxPacket.flags.bits.broadcast = 1;
    b596:	4833      	ldr	r0, [pc, #204]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b598:	7803      	ldrb	r3, [r0, #0]
    b59a:	2404      	movs	r4, #4
    b59c:	4323      	orrs	r3, r4
    b59e:	7003      	strb	r3, [r0, #0]
    b5a0:	e7d3      	b.n	b54a <MiMAC_ReceivedPacket+0x24e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b5a2:	4830      	ldr	r0, [pc, #192]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b5a4:	4c2e      	ldr	r4, [pc, #184]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b5a6:	2376      	movs	r3, #118	; 0x76
    b5a8:	435a      	muls	r2, r3
    b5aa:	18a5      	adds	r5, r4, r2
    b5ac:	792e      	ldrb	r6, [r5, #4]
    b5ae:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b5b0:	796d      	ldrb	r5, [r5, #5]
    b5b2:	7445      	strb	r5, [r0, #17]
    b5b4:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[7]);
    b5b6:	000b      	movs	r3, r1
    b5b8:	3308      	adds	r3, #8
    b5ba:	191b      	adds	r3, r3, r4
    b5bc:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 13;
    b5be:	5d13      	ldrb	r3, [r2, r4]
    b5c0:	3b0d      	subs	r3, #13
    b5c2:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[9]);
    b5c4:	310a      	adds	r1, #10
    b5c6:	1909      	adds	r1, r1, r4
    b5c8:	6081      	str	r1, [r0, #8]
    b5ca:	e703      	b.n	b3d4 <MiMAC_ReceivedPacket+0xd8>
				MACRxPacket.flags.bits.sourcePrsnt = 1;
    b5cc:	4b25      	ldr	r3, [pc, #148]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b5ce:	781c      	ldrb	r4, [r3, #0]
    b5d0:	2080      	movs	r0, #128	; 0x80
    b5d2:	4240      	negs	r0, r0
    b5d4:	4320      	orrs	r0, r4
    b5d6:	7018      	strb	r0, [r3, #0]
				MACRxPacket.altSourceAddress = true;
    b5d8:	2001      	movs	r0, #1
    b5da:	73d8      	strb	r0, [r3, #15]
				if (bIntraPAN) // check if it is intraPAN
    b5dc:	2d00      	cmp	r5, #0
    b5de:	d014      	beq.n	b60a <MiMAC_ReceivedPacket+0x30e>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[3];
    b5e0:	0018      	movs	r0, r3
    b5e2:	4c1f      	ldr	r4, [pc, #124]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b5e4:	2376      	movs	r3, #118	; 0x76
    b5e6:	435a      	muls	r2, r3
    b5e8:	18a5      	adds	r5, r4, r2
    b5ea:	792e      	ldrb	r6, [r5, #4]
    b5ec:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[4];
    b5ee:	796d      	ldrb	r5, [r5, #5]
    b5f0:	7445      	strb	r5, [r0, #17]
    b5f2:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[12]);
    b5f4:	000b      	movs	r3, r1
    b5f6:	330d      	adds	r3, #13
    b5f8:	191b      	adds	r3, r3, r4
    b5fa:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 19;
    b5fc:	5d13      	ldrb	r3, [r2, r4]
    b5fe:	3b13      	subs	r3, #19
    b600:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[15]);
    b602:	3110      	adds	r1, #16
    b604:	1909      	adds	r1, r1, r4
    b606:	6081      	str	r1, [r0, #8]
    b608:	e6e4      	b.n	b3d4 <MiMAC_ReceivedPacket+0xd8>
					MACRxPacket.SourcePANID.v[0] = RxBuffer[BankIndex].Payload[12];
    b60a:	4816      	ldr	r0, [pc, #88]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b60c:	4c14      	ldr	r4, [pc, #80]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b60e:	2376      	movs	r3, #118	; 0x76
    b610:	435a      	muls	r2, r3
    b612:	18a5      	adds	r5, r4, r2
    b614:	7b6e      	ldrb	r6, [r5, #13]
    b616:	7406      	strb	r6, [r0, #16]
					MACRxPacket.SourcePANID.v[1] = RxBuffer[BankIndex].Payload[13];
    b618:	7bad      	ldrb	r5, [r5, #14]
    b61a:	7445      	strb	r5, [r0, #17]
    b61c:	4359      	muls	r1, r3
					MACRxPacket.SourceAddress = &(RxBuffer[BankIndex].Payload[14]);
    b61e:	000b      	movs	r3, r1
    b620:	330f      	adds	r3, #15
    b622:	191b      	adds	r3, r3, r4
    b624:	6043      	str	r3, [r0, #4]
					MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 21;
    b626:	5d13      	ldrb	r3, [r2, r4]
    b628:	3b15      	subs	r3, #21
    b62a:	7303      	strb	r3, [r0, #12]
					MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[17]);
    b62c:	3112      	adds	r1, #18
    b62e:	1909      	adds	r1, r1, r4
    b630:	6081      	str	r1, [r0, #8]
    b632:	e6cf      	b.n	b3d4 <MiMAC_ReceivedPacket+0xd8>
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b634:	2076      	movs	r0, #118	; 0x76
    b636:	4348      	muls	r0, r1
    b638:	4b09      	ldr	r3, [pc, #36]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b63a:	181b      	adds	r3, r3, r0
    b63c:	799b      	ldrb	r3, [r3, #6]
    b63e:	2bff      	cmp	r3, #255	; 0xff
    b640:	d018      	beq.n	b674 <MiMAC_ReceivedPacket+0x378>
				MACRxPacket.PayloadLen = RxBuffer[BankIndex].PayloadLen - 10;
    b642:	4808      	ldr	r0, [pc, #32]	; (b664 <MiMAC_ReceivedPacket+0x368>)
    b644:	4c06      	ldr	r4, [pc, #24]	; (b660 <MiMAC_ReceivedPacket+0x364>)
    b646:	2376      	movs	r3, #118	; 0x76
    b648:	435a      	muls	r2, r3
    b64a:	5d12      	ldrb	r2, [r2, r4]
    b64c:	3a0a      	subs	r2, #10
    b64e:	7302      	strb	r2, [r0, #12]
				MACRxPacket.Payload = &(RxBuffer[BankIndex].Payload[7]);
    b650:	434b      	muls	r3, r1
    b652:	3308      	adds	r3, #8
    b654:	191b      	adds	r3, r3, r4
    b656:	6083      	str	r3, [r0, #8]
			break;
    b658:	e6bc      	b.n	b3d4 <MiMAC_ReceivedPacket+0xd8>
    b65a:	46c0      	nop			; (mov r8, r8)
    b65c:	2000000a 	.word	0x2000000a
    b660:	20001e2c 	.word	0x20001e2c
    b664:	20002020 	.word	0x20002020
    b668:	0000b2e1 	.word	0x0000b2e1
    b66c:	ff00ffff 	.word	0xff00ffff
    b670:	20000020 	.word	0x20000020
				if (RxBuffer[BankIndex].Payload[5] == 0xFF && RxBuffer[BankIndex].Payload[6] == 0xFF)
    b674:	2076      	movs	r0, #118	; 0x76
    b676:	4348      	muls	r0, r1
    b678:	4b40      	ldr	r3, [pc, #256]	; (b77c <MiMAC_ReceivedPacket+0x480>)
    b67a:	181b      	adds	r3, r3, r0
    b67c:	79db      	ldrb	r3, [r3, #7]
    b67e:	2bff      	cmp	r3, #255	; 0xff
    b680:	d1df      	bne.n	b642 <MiMAC_ReceivedPacket+0x346>
					MACRxPacket.flags.bits.broadcast = 1;
    b682:	483f      	ldr	r0, [pc, #252]	; (b780 <MiMAC_ReceivedPacket+0x484>)
    b684:	7803      	ldrb	r3, [r0, #0]
    b686:	2404      	movs	r4, #4
    b688:	4323      	orrs	r3, r4
    b68a:	7003      	strb	r3, [r0, #0]
    b68c:	e7d9      	b.n	b642 <MiMAC_ReceivedPacket+0x346>
				MiMAC_DiscardPacket();
    b68e:	4b3d      	ldr	r3, [pc, #244]	; (b784 <MiMAC_ReceivedPacket+0x488>)
    b690:	4798      	blx	r3
				return false;
    b692:	2000      	movs	r0, #0
    b694:	e64e      	b.n	b334 <MiMAC_ReceivedPacket+0x38>
    b696:	3401      	adds	r4, #1
			for (i = 0; i < CONNECTION_SIZE; i++)
    b698:	2c14      	cmp	r4, #20
    b69a:	d01a      	beq.n	b6d2 <MiMAC_ReceivedPacket+0x3d6>
    b69c:	b2e7      	uxtb	r7, r4
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    b69e:	0120      	lsls	r0, r4, #4
    b6a0:	6833      	ldr	r3, [r6, #0]
    b6a2:	469c      	mov	ip, r3
    b6a4:	4460      	add	r0, ip
    b6a6:	7b03      	ldrb	r3, [r0, #12]
    b6a8:	2b7f      	cmp	r3, #127	; 0x7f
    b6aa:	d9f4      	bls.n	b696 <MiMAC_ReceivedPacket+0x39a>
				isSameAddress(defaultParamsRomOrRam.ConnectionTable[i].Address, MACRxPacket.SourceAddress))
    b6ac:	3004      	adds	r0, #4
    b6ae:	464b      	mov	r3, r9
    b6b0:	6859      	ldr	r1, [r3, #4]
    b6b2:	4b35      	ldr	r3, [pc, #212]	; (b788 <MiMAC_ReceivedPacket+0x48c>)
    b6b4:	4798      	blx	r3
				if ((defaultParamsRomOrRam.ConnectionTable[i].status.bits.isValid) &&
    b6b6:	2800      	cmp	r0, #0
    b6b8:	d0ed      	beq.n	b696 <MiMAC_ReceivedPacket+0x39a>
			if (i < CONNECTION_SIZE)
    b6ba:	2f13      	cmp	r7, #19
    b6bc:	d809      	bhi.n	b6d2 <MiMAC_ReceivedPacket+0x3d6>
				if (IncomingFrameCounter[i].Val > FrameCounter.Val)
    b6be:	23ff      	movs	r3, #255	; 0xff
    b6c0:	401c      	ands	r4, r3
    b6c2:	00a2      	lsls	r2, r4, #2
    b6c4:	4b31      	ldr	r3, [pc, #196]	; (b78c <MiMAC_ReceivedPacket+0x490>)
    b6c6:	58d3      	ldr	r3, [r2, r3]
    b6c8:	42ab      	cmp	r3, r5
    b6ca:	d82b      	bhi.n	b724 <MiMAC_ReceivedPacket+0x428>
					IncomingFrameCounter[i].Val = FrameCounter.Val;
    b6cc:	00a4      	lsls	r4, r4, #2
    b6ce:	4b2f      	ldr	r3, [pc, #188]	; (b78c <MiMAC_ReceivedPacket+0x490>)
    b6d0:	50e5      	str	r5, [r4, r3]
			MACRxPacket.PayloadLen -= 5;  // used to 5 for frame counter now -4 also added for MIC integrity
    b6d2:	492b      	ldr	r1, [pc, #172]	; (b780 <MiMAC_ReceivedPacket+0x484>)
    b6d4:	7b0b      	ldrb	r3, [r1, #12]
    b6d6:	3b05      	subs	r3, #5
    b6d8:	b2db      	uxtb	r3, r3
    b6da:	730b      	strb	r3, [r1, #12]
			received_mic_values[0] = MACRxPacket.Payload[MACRxPacket.PayloadLen+1];
    b6dc:	6888      	ldr	r0, [r1, #8]
    b6de:	18c3      	adds	r3, r0, r3
    b6e0:	785c      	ldrb	r4, [r3, #1]
    b6e2:	4a2b      	ldr	r2, [pc, #172]	; (b790 <MiMAC_ReceivedPacket+0x494>)
    b6e4:	7014      	strb	r4, [r2, #0]
			received_mic_values[1] = MACRxPacket.Payload[MACRxPacket.PayloadLen+2];
    b6e6:	789c      	ldrb	r4, [r3, #2]
    b6e8:	7054      	strb	r4, [r2, #1]
			received_mic_values[2] = MACRxPacket.Payload[MACRxPacket.PayloadLen+3];
    b6ea:	78dc      	ldrb	r4, [r3, #3]
    b6ec:	7094      	strb	r4, [r2, #2]
			received_mic_values[3] = MACRxPacket.Payload[MACRxPacket.PayloadLen+4];
    b6ee:	791b      	ldrb	r3, [r3, #4]
    b6f0:	70d3      	strb	r3, [r2, #3]
			if (false == DataDecrypt(&(MACRxPacket.Payload[5]), &(MACRxPacket.PayloadLen), MACRxPacket.SourceAddress, FrameCounter, RxBuffer[BankIndex].Payload[0]))
    b6f2:	684a      	ldr	r2, [r1, #4]
    b6f4:	310c      	adds	r1, #12
    b6f6:	3005      	adds	r0, #5
    b6f8:	4b26      	ldr	r3, [pc, #152]	; (b794 <MiMAC_ReceivedPacket+0x498>)
    b6fa:	781c      	ldrb	r4, [r3, #0]
    b6fc:	2376      	movs	r3, #118	; 0x76
    b6fe:	435c      	muls	r4, r3
    b700:	4b1e      	ldr	r3, [pc, #120]	; (b77c <MiMAC_ReceivedPacket+0x480>)
    b702:	191b      	adds	r3, r3, r4
    b704:	785b      	ldrb	r3, [r3, #1]
    b706:	9300      	str	r3, [sp, #0]
    b708:	002b      	movs	r3, r5
    b70a:	4c23      	ldr	r4, [pc, #140]	; (b798 <MiMAC_ReceivedPacket+0x49c>)
    b70c:	47a0      	blx	r4
    b70e:	2800      	cmp	r0, #0
    b710:	d00b      	beq.n	b72a <MiMAC_ReceivedPacket+0x42e>
			MACRxPacket.Payload = &(MACRxPacket.Payload[5]);
    b712:	4b1b      	ldr	r3, [pc, #108]	; (b780 <MiMAC_ReceivedPacket+0x484>)
    b714:	689a      	ldr	r2, [r3, #8]
    b716:	3205      	adds	r2, #5
    b718:	609a      	str	r2, [r3, #8]
			MACRxPacket.flags.bits.secEn = 1;
    b71a:	781a      	ldrb	r2, [r3, #0]
    b71c:	2108      	movs	r1, #8
    b71e:	430a      	orrs	r2, r1
    b720:	701a      	strb	r2, [r3, #0]
    b722:	e661      	b.n	b3e8 <MiMAC_ReceivedPacket+0xec>
					MiMAC_DiscardPacket();
    b724:	4b17      	ldr	r3, [pc, #92]	; (b784 <MiMAC_ReceivedPacket+0x488>)
    b726:	4798      	blx	r3
					return false;
    b728:	e7b3      	b.n	b692 <MiMAC_ReceivedPacket+0x396>
				MiMAC_DiscardPacket();
    b72a:	4b16      	ldr	r3, [pc, #88]	; (b784 <MiMAC_ReceivedPacket+0x488>)
    b72c:	4798      	blx	r3
				return false;
    b72e:	e7b0      	b.n	b692 <MiMAC_ReceivedPacket+0x396>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_DATA;
    b730:	4a13      	ldr	r2, [pc, #76]	; (b780 <MiMAC_ReceivedPacket+0x484>)
    b732:	7813      	ldrb	r3, [r2, #0]
    b734:	2103      	movs	r1, #3
    b736:	438b      	bics	r3, r1
    b738:	7013      	strb	r3, [r2, #0]
		MACRxPacket.LQIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 2];
    b73a:	4b10      	ldr	r3, [pc, #64]	; (b77c <MiMAC_ReceivedPacket+0x480>)
    b73c:	2276      	movs	r2, #118	; 0x76
    b73e:	4342      	muls	r2, r0
    b740:	5cd0      	ldrb	r0, [r2, r3]
    b742:	490f      	ldr	r1, [pc, #60]	; (b780 <MiMAC_ReceivedPacket+0x484>)
    b744:	189b      	adds	r3, r3, r2
    b746:	181a      	adds	r2, r3, r0
    b748:	3a01      	subs	r2, #1
    b74a:	7812      	ldrb	r2, [r2, #0]
    b74c:	738a      	strb	r2, [r1, #14]
		MACRxPacket.RSSIValue = RxBuffer[BankIndex].Payload[RxBuffer[BankIndex].PayloadLen - 1];
    b74e:	5c1b      	ldrb	r3, [r3, r0]
    b750:	734b      	strb	r3, [r1, #13]
		return true;
    b752:	2001      	movs	r0, #1
    b754:	e5ee      	b.n	b334 <MiMAC_ReceivedPacket+0x38>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_COMMAND;
    b756:	4a0a      	ldr	r2, [pc, #40]	; (b780 <MiMAC_ReceivedPacket+0x484>)
    b758:	7813      	ldrb	r3, [r2, #0]
    b75a:	2103      	movs	r1, #3
    b75c:	438b      	bics	r3, r1
    b75e:	2101      	movs	r1, #1
    b760:	430b      	orrs	r3, r1
    b762:	7013      	strb	r3, [r2, #0]
			break;
    b764:	e7e9      	b.n	b73a <MiMAC_ReceivedPacket+0x43e>
			MACRxPacket.flags.bits.packetType = PACKET_TYPE_RESERVE;
    b766:	4a06      	ldr	r2, [pc, #24]	; (b780 <MiMAC_ReceivedPacket+0x484>)
    b768:	7813      	ldrb	r3, [r2, #0]
    b76a:	2103      	movs	r1, #3
    b76c:	430b      	orrs	r3, r1
    b76e:	7013      	strb	r3, [r2, #0]
			break;
    b770:	e7e3      	b.n	b73a <MiMAC_ReceivedPacket+0x43e>
			BankIndex = i;
    b772:	2200      	movs	r2, #0
    b774:	4b07      	ldr	r3, [pc, #28]	; (b794 <MiMAC_ReceivedPacket+0x498>)
    b776:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BANK_SIZE; i++)
    b778:	2100      	movs	r1, #0
    b77a:	e5e5      	b.n	b348 <MiMAC_ReceivedPacket+0x4c>
    b77c:	20001e2c 	.word	0x20001e2c
    b780:	20002020 	.word	0x20002020
    b784:	0000b2e1 	.word	0x0000b2e1
    b788:	0000c145 	.word	0x0000c145
    b78c:	20002048 	.word	0x20002048
    b790:	20001e0c 	.word	0x20001e0c
    b794:	2000000a 	.word	0x2000000a
    b798:	0000ad61 	.word	0x0000ad61

0000b79c <MiMAC_SymbolToTicks>:
	return SYMBOLS_TO_TICKS(symbols);
    b79c:	4b05      	ldr	r3, [pc, #20]	; (b7b4 <MiMAC_SymbolToTicks+0x18>)
    b79e:	781b      	ldrb	r3, [r3, #0]
    b7a0:	2b00      	cmp	r3, #0
    b7a2:	d004      	beq.n	b7ae <MiMAC_SymbolToTicks+0x12>
    b7a4:	0083      	lsls	r3, r0, #2
    b7a6:	1818      	adds	r0, r3, r0
    b7a8:	0083      	lsls	r3, r0, #2
    b7aa:	18c0      	adds	r0, r0, r3
}
    b7ac:	4770      	bx	lr
	return SYMBOLS_TO_TICKS(symbols);
    b7ae:	3332      	adds	r3, #50	; 0x32
    b7b0:	4358      	muls	r0, r3
    b7b2:	e7fb      	b.n	b7ac <MiMAC_SymbolToTicks+0x10>
    b7b4:	2000000d 	.word	0x2000000d

0000b7b8 <MiMAC_Task>:

void MiMAC_Task(void)
{
    b7b8:	b510      	push	{r4, lr}
  PHY_TaskHandler();
    b7ba:	4b0b      	ldr	r3, [pc, #44]	; (b7e8 <MiMAC_Task+0x30>)
    b7bc:	4798      	blx	r3
  if(dataConfCallback && dataConfAvailable)
    b7be:	4b0b      	ldr	r3, [pc, #44]	; (b7ec <MiMAC_Task+0x34>)
    b7c0:	681b      	ldr	r3, [r3, #0]
    b7c2:	2b00      	cmp	r3, #0
    b7c4:	d003      	beq.n	b7ce <MiMAC_Task+0x16>
    b7c6:	4a0a      	ldr	r2, [pc, #40]	; (b7f0 <MiMAC_Task+0x38>)
    b7c8:	7812      	ldrb	r2, [r2, #0]
    b7ca:	2a00      	cmp	r2, #0
    b7cc:	d100      	bne.n	b7d0 <MiMAC_Task+0x18>
  {
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
	  dataConfAvailable = false;
  }
}
    b7ce:	bd10      	pop	{r4, pc}
	  dataConfCallback(dataHandle, dataStatus, dataPointer);
    b7d0:	4a08      	ldr	r2, [pc, #32]	; (b7f4 <MiMAC_Task+0x3c>)
    b7d2:	6812      	ldr	r2, [r2, #0]
    b7d4:	4908      	ldr	r1, [pc, #32]	; (b7f8 <MiMAC_Task+0x40>)
    b7d6:	7809      	ldrb	r1, [r1, #0]
    b7d8:	4808      	ldr	r0, [pc, #32]	; (b7fc <MiMAC_Task+0x44>)
    b7da:	7800      	ldrb	r0, [r0, #0]
    b7dc:	4798      	blx	r3
	  dataConfAvailable = false;
    b7de:	2200      	movs	r2, #0
    b7e0:	4b03      	ldr	r3, [pc, #12]	; (b7f0 <MiMAC_Task+0x38>)
    b7e2:	701a      	strb	r2, [r3, #0]
}
    b7e4:	e7f3      	b.n	b7ce <MiMAC_Task+0x16>
    b7e6:	46c0      	nop			; (mov r8, r8)
    b7e8:	0000bc11 	.word	0x0000bc11
    b7ec:	20000360 	.word	0x20000360
    b7f0:	2000035c 	.word	0x2000035c
    b7f4:	20000368 	.word	0x20000368
    b7f8:	20001df4 	.word	0x20001df4
    b7fc:	20000364 	.word	0x20000364

0000b800 <phyRssiBaseVal>:

/*************************************************************************//**
*****************************************************************************/
static int8_t phyRssiBaseVal(void)
{
	bool oqpsk = (phyModulation & (1 << BPSK_OQPSK));
    b800:	4b07      	ldr	r3, [pc, #28]	; (b820 <phyRssiBaseVal+0x20>)
    b802:	7818      	ldrb	r0, [r3, #0]
	bool sub   = (phyModulation & (1 << SUB_MODE));
	bool rc    = (phyModulation & (1 << 4 /*ALT_SPEC*/));

	if (0 == oqpsk) {
    b804:	0703      	lsls	r3, r0, #28
    b806:	d403      	bmi.n	b810 <phyRssiBaseVal+0x10>
		if (0 == sub) {
    b808:	0740      	lsls	r0, r0, #29
			return PHY_RSSI_BASE_VAL_BPSK_20;
		} else {
			return PHY_RSSI_BASE_VAL_BPSK_40;
    b80a:	0fc0      	lsrs	r0, r0, #31
    b80c:	3864      	subs	r0, #100	; 0x64
			} else {
				return PHY_RSSI_BASE_VAL_OQPSK_RC_250;
			}
		}
	}
}
    b80e:	4770      	bx	lr
			if (0 == rc) {
    b810:	2314      	movs	r3, #20
    b812:	4018      	ands	r0, r3
				return PHY_RSSI_BASE_VAL_OQPSK_RC_250;
    b814:	3814      	subs	r0, #20
    b816:	4243      	negs	r3, r0
    b818:	4158      	adcs	r0, r3
    b81a:	3862      	subs	r0, #98	; 0x62
    b81c:	e7f7      	b.n	b80e <phyRssiBaseVal+0xe>
    b81e:	46c0      	nop			; (mov r8, r8)
    b820:	2000036e 	.word	0x2000036e

0000b824 <phySetChannel>:
{
    b824:	b510      	push	{r4, lr}
	if(phyChannel == 0)
    b826:	4b13      	ldr	r3, [pc, #76]	; (b874 <phySetChannel+0x50>)
    b828:	781b      	ldrb	r3, [r3, #0]
    b82a:	2b00      	cmp	r3, #0
    b82c:	d110      	bne.n	b850 <phySetChannel+0x2c>
		phyModulation = PHY_MOD_BPSK20_CHAN_0;
    b82e:	2200      	movs	r2, #0
    b830:	4b11      	ldr	r3, [pc, #68]	; (b878 <phySetChannel+0x54>)
    b832:	701a      	strb	r2, [r3, #0]
	phyWriteRegister(CC_CTRL_1_REG, phyBand);
    b834:	4c11      	ldr	r4, [pc, #68]	; (b87c <phySetChannel+0x58>)
	trx_reg_write(reg, value);
    b836:	7821      	ldrb	r1, [r4, #0]
    b838:	2014      	movs	r0, #20
    b83a:	4b11      	ldr	r3, [pc, #68]	; (b880 <phySetChannel+0x5c>)
    b83c:	4798      	blx	r3
	if (0 == phyBand) {
    b83e:	7823      	ldrb	r3, [r4, #0]
    b840:	2b00      	cmp	r3, #0
    b842:	d009      	beq.n	b858 <phySetChannel+0x34>
		phyWriteRegister(CC_CTRL_0_REG, phyChannel);
    b844:	4b0b      	ldr	r3, [pc, #44]	; (b874 <phySetChannel+0x50>)
	trx_reg_write(reg, value);
    b846:	7819      	ldrb	r1, [r3, #0]
    b848:	2013      	movs	r0, #19
    b84a:	4b0d      	ldr	r3, [pc, #52]	; (b880 <phySetChannel+0x5c>)
    b84c:	4798      	blx	r3
}
    b84e:	bd10      	pop	{r4, pc}
		phyModulation = 0x0C;	//OQPSK-SIN-250
    b850:	220c      	movs	r2, #12
    b852:	4b09      	ldr	r3, [pc, #36]	; (b878 <phySetChannel+0x54>)
    b854:	701a      	strb	r2, [r3, #0]
    b856:	e7ed      	b.n	b834 <phySetChannel+0x10>
	value = trx_reg_read(reg);
    b858:	2008      	movs	r0, #8
    b85a:	4b0a      	ldr	r3, [pc, #40]	; (b884 <phySetChannel+0x60>)
    b85c:	4798      	blx	r3
		reg = phyReadRegister(PHY_CC_CCA_REG) & ~0x1f;
    b85e:	231f      	movs	r3, #31
    b860:	0001      	movs	r1, r0
    b862:	4399      	bics	r1, r3
		phyWriteRegister(PHY_CC_CCA_REG, reg | phyChannel);
    b864:	4b03      	ldr	r3, [pc, #12]	; (b874 <phySetChannel+0x50>)
    b866:	7818      	ldrb	r0, [r3, #0]
    b868:	4301      	orrs	r1, r0
	trx_reg_write(reg, value);
    b86a:	b2c9      	uxtb	r1, r1
    b86c:	2008      	movs	r0, #8
    b86e:	4b04      	ldr	r3, [pc, #16]	; (b880 <phySetChannel+0x5c>)
    b870:	4798      	blx	r3
    b872:	e7ec      	b.n	b84e <phySetChannel+0x2a>
    b874:	2000036d 	.word	0x2000036d
    b878:	2000036e 	.word	0x2000036e
    b87c:	2000036c 	.word	0x2000036c
    b880:	0000dee5 	.word	0x0000dee5
    b884:	0000dde9 	.word	0x0000dde9

0000b888 <phyTrxSetState>:
{
    b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b88a:	0004      	movs	r4, r0
    if (PHY_STATE_SLEEP == phyState)
    b88c:	4b0f      	ldr	r3, [pc, #60]	; (b8cc <phyTrxSetState+0x44>)
    b88e:	781b      	ldrb	r3, [r3, #0]
    b890:	2b02      	cmp	r3, #2
    b892:	d016      	beq.n	b8c2 <phyTrxSetState+0x3a>
	trx_reg_write(reg, value);
    b894:	4f0e      	ldr	r7, [pc, #56]	; (b8d0 <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    b896:	4e0f      	ldr	r6, [pc, #60]	; (b8d4 <phyTrxSetState+0x4c>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b898:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    b89a:	2103      	movs	r1, #3
    b89c:	2002      	movs	r0, #2
    b89e:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b8a0:	2001      	movs	r0, #1
    b8a2:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b8a4:	4028      	ands	r0, r5
    b8a6:	2808      	cmp	r0, #8
    b8a8:	d1f7      	bne.n	b89a <phyTrxSetState+0x12>
	trx_reg_write(reg, value);
    b8aa:	4f09      	ldr	r7, [pc, #36]	; (b8d0 <phyTrxSetState+0x48>)
	value = trx_reg_read(reg);
    b8ac:	4e09      	ldr	r6, [pc, #36]	; (b8d4 <phyTrxSetState+0x4c>)
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b8ae:	251f      	movs	r5, #31
	trx_reg_write(reg, value);
    b8b0:	0021      	movs	r1, r4
    b8b2:	2002      	movs	r0, #2
    b8b4:	47b8      	blx	r7
	value = trx_reg_read(reg);
    b8b6:	2001      	movs	r0, #1
    b8b8:	47b0      	blx	r6
			(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    b8ba:	4028      	ands	r0, r5
    b8bc:	4284      	cmp	r4, r0
    b8be:	d1f7      	bne.n	b8b0 <phyTrxSetState+0x28>
}
    b8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		port_base->OUTCLR.reg = pin_mask;
    b8c2:	2280      	movs	r2, #128	; 0x80
    b8c4:	0352      	lsls	r2, r2, #13
    b8c6:	4b04      	ldr	r3, [pc, #16]	; (b8d8 <phyTrxSetState+0x50>)
    b8c8:	615a      	str	r2, [r3, #20]
    b8ca:	e7e3      	b.n	b894 <phyTrxSetState+0xc>
    b8cc:	200003f1 	.word	0x200003f1
    b8d0:	0000dee5 	.word	0x0000dee5
    b8d4:	0000dde9 	.word	0x0000dde9
    b8d8:	40002800 	.word	0x40002800

0000b8dc <phySetRxState>:
{
    b8dc:	b510      	push	{r4, lr}
	phyTrxSetState(TRX_CMD_TRX_OFF);
    b8de:	2008      	movs	r0, #8
    b8e0:	4b08      	ldr	r3, [pc, #32]	; (b904 <phySetRxState+0x28>)
    b8e2:	4798      	blx	r3
	value = trx_reg_read(reg);
    b8e4:	200f      	movs	r0, #15
    b8e6:	4b08      	ldr	r3, [pc, #32]	; (b908 <phySetRxState+0x2c>)
    b8e8:	4798      	blx	r3
	if (phyRxState) {
    b8ea:	4b08      	ldr	r3, [pc, #32]	; (b90c <phySetRxState+0x30>)
    b8ec:	781b      	ldrb	r3, [r3, #0]
    b8ee:	2b00      	cmp	r3, #0
    b8f0:	d100      	bne.n	b8f4 <phySetRxState+0x18>
}
    b8f2:	bd10      	pop	{r4, pc}
		phyTrxSetState(TRX_CMD_RX_AACK_ON);
    b8f4:	2016      	movs	r0, #22
    b8f6:	4b03      	ldr	r3, [pc, #12]	; (b904 <phySetRxState+0x28>)
    b8f8:	4798      	blx	r3
		phyState = PHY_STATE_IDLE;
    b8fa:	2201      	movs	r2, #1
    b8fc:	4b04      	ldr	r3, [pc, #16]	; (b910 <phySetRxState+0x34>)
    b8fe:	701a      	strb	r2, [r3, #0]
}
    b900:	e7f7      	b.n	b8f2 <phySetRxState+0x16>
    b902:	46c0      	nop			; (mov r8, r8)
    b904:	0000b889 	.word	0x0000b889
    b908:	0000dde9 	.word	0x0000dde9
    b90c:	200003f0 	.word	0x200003f0
    b910:	200003f1 	.word	0x200003f1

0000b914 <PHY_DataReq>:
{
    b914:	b570      	push	{r4, r5, r6, lr}
    b916:	0005      	movs	r5, r0
    phyDataRequestPtr = (PhyTxFrame_t *) MiMem_Alloc(sizeof(PhyTxFrame_t));
    b918:	2010      	movs	r0, #16
    b91a:	4b09      	ldr	r3, [pc, #36]	; (b940 <PHY_DataReq+0x2c>)
    b91c:	4798      	blx	r3
    b91e:	1e04      	subs	r4, r0, #0
    if (NULL == phyDataRequestPtr)
    b920:	d009      	beq.n	b936 <PHY_DataReq+0x22>
    memcpy(&phyDataRequestPtr->phyDataReq, phyDataReq, sizeof(PHY_DataReq_t));
    b922:	3004      	adds	r0, #4
    b924:	220c      	movs	r2, #12
    b926:	0029      	movs	r1, r5
    b928:	4b06      	ldr	r3, [pc, #24]	; (b944 <PHY_DataReq+0x30>)
    b92a:	4798      	blx	r3
    miQueueAppend(&phyTxQueue, (miQueueBuffer_t *)phyDataRequestPtr);
    b92c:	0021      	movs	r1, r4
    b92e:	4806      	ldr	r0, [pc, #24]	; (b948 <PHY_DataReq+0x34>)
    b930:	4b06      	ldr	r3, [pc, #24]	; (b94c <PHY_DataReq+0x38>)
    b932:	4798      	blx	r3
}
    b934:	bd70      	pop	{r4, r5, r6, pc}
        phyDataReq->confirmCallback(PHY_STATUS_ERROR);
    b936:	68ab      	ldr	r3, [r5, #8]
    b938:	2001      	movs	r0, #1
    b93a:	4798      	blx	r3
        return;
    b93c:	e7fa      	b.n	b934 <PHY_DataReq+0x20>
    b93e:	46c0      	nop			; (mov r8, r8)
    b940:	0000d431 	.word	0x0000d431
    b944:	00011e37 	.word	0x00011e37
    b948:	20001e20 	.word	0x20001e20
    b94c:	0000d62d 	.word	0x0000d62d

0000b950 <PHY_TxHandler>:
{
    b950:	b510      	push	{r4, lr}
	if (phyTxQueue.size && ((phyState == PHY_STATE_IDLE) || (phyState == PHY_STATE_SLEEP)))
    b952:	4b1e      	ldr	r3, [pc, #120]	; (b9cc <PHY_TxHandler+0x7c>)
    b954:	7a1b      	ldrb	r3, [r3, #8]
    b956:	2b00      	cmp	r3, #0
    b958:	d004      	beq.n	b964 <PHY_TxHandler+0x14>
    b95a:	4b1d      	ldr	r3, [pc, #116]	; (b9d0 <PHY_TxHandler+0x80>)
    b95c:	781b      	ldrb	r3, [r3, #0]
    b95e:	3b01      	subs	r3, #1
    b960:	2b01      	cmp	r3, #1
    b962:	d900      	bls.n	b966 <PHY_TxHandler+0x16>
}
    b964:	bd10      	pop	{r4, pc}
        phyTxPtr =  (PhyTxFrame_t *)miQueueRemove(&phyTxQueue, NULL);
    b966:	2100      	movs	r1, #0
    b968:	4818      	ldr	r0, [pc, #96]	; (b9cc <PHY_TxHandler+0x7c>)
    b96a:	4b1a      	ldr	r3, [pc, #104]	; (b9d4 <PHY_TxHandler+0x84>)
    b96c:	4798      	blx	r3
    b96e:	1e04      	subs	r4, r0, #0
        if (NULL != phyTxPtr)
    b970:	d0f8      	beq.n	b964 <PHY_TxHandler+0x14>
			if (phyTxPtr->phyDataReq.data[0] > MAX_PSDU)
    b972:	6883      	ldr	r3, [r0, #8]
    b974:	781b      	ldrb	r3, [r3, #0]
    b976:	2b7f      	cmp	r3, #127	; 0x7f
    b978:	d823      	bhi.n	b9c2 <PHY_TxHandler+0x72>
			phyTrxSetState(TRX_CMD_TX_ARET_ON);
    b97a:	2019      	movs	r0, #25
    b97c:	4b16      	ldr	r3, [pc, #88]	; (b9d8 <PHY_TxHandler+0x88>)
    b97e:	4798      	blx	r3
	value = trx_reg_read(reg);
    b980:	200f      	movs	r0, #15
    b982:	4b16      	ldr	r3, [pc, #88]	; (b9dc <PHY_TxHandler+0x8c>)
    b984:	4798      	blx	r3
			phyTxPtr->phyDataReq.data[0] += 2;// 2
    b986:	68a2      	ldr	r2, [r4, #8]
    b988:	7813      	ldrb	r3, [r2, #0]
    b98a:	3302      	adds	r3, #2
    b98c:	7013      	strb	r3, [r2, #0]
			trx_frame_write(&phyTxPtr->phyDataReq.data[0], (phyTxPtr->phyDataReq.data[0]-1 ) /* length value*/);
    b98e:	68a3      	ldr	r3, [r4, #8]
    b990:	7819      	ldrb	r1, [r3, #0]
    b992:	3901      	subs	r1, #1
    b994:	b2c9      	uxtb	r1, r1
    b996:	0018      	movs	r0, r3
    b998:	4b11      	ldr	r3, [pc, #68]	; (b9e0 <PHY_TxHandler+0x90>)
    b99a:	4798      	blx	r3
			phyState = PHY_STATE_TX_WAIT_END;
    b99c:	2203      	movs	r2, #3
    b99e:	4b0c      	ldr	r3, [pc, #48]	; (b9d0 <PHY_TxHandler+0x80>)
    b9a0:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    b9a2:	4b10      	ldr	r3, [pc, #64]	; (b9e4 <PHY_TxHandler+0x94>)
    b9a4:	2280      	movs	r2, #128	; 0x80
    b9a6:	0352      	lsls	r2, r2, #13
    b9a8:	619a      	str	r2, [r3, #24]
			TRX_TRIG_DELAY();
    b9aa:	46c0      	nop			; (mov r8, r8)
    b9ac:	46c0      	nop			; (mov r8, r8)
		port_base->OUTCLR.reg = pin_mask;
    b9ae:	615a      	str	r2, [r3, #20]
			gPhyDataReq.polledConfirmation = phyTxPtr->phyDataReq.polledConfirmation;
    b9b0:	4b0d      	ldr	r3, [pc, #52]	; (b9e8 <PHY_TxHandler+0x98>)
    b9b2:	7922      	ldrb	r2, [r4, #4]
    b9b4:	701a      	strb	r2, [r3, #0]
			gPhyDataReq.confirmCallback = phyTxPtr->phyDataReq.confirmCallback;
    b9b6:	68e2      	ldr	r2, [r4, #12]
    b9b8:	609a      	str	r2, [r3, #8]
		    MiMem_Free((uint8_t *)phyTxPtr);
    b9ba:	0020      	movs	r0, r4
    b9bc:	4b0b      	ldr	r3, [pc, #44]	; (b9ec <PHY_TxHandler+0x9c>)
    b9be:	4798      	blx	r3
    b9c0:	e7d0      	b.n	b964 <PHY_TxHandler+0x14>
				phyTxPtr->phyDataReq.confirmCallback(PHY_STATUS_ERROR);
    b9c2:	68c3      	ldr	r3, [r0, #12]
    b9c4:	2001      	movs	r0, #1
    b9c6:	4798      	blx	r3
				return;
    b9c8:	e7cc      	b.n	b964 <PHY_TxHandler+0x14>
    b9ca:	46c0      	nop			; (mov r8, r8)
    b9cc:	20001e20 	.word	0x20001e20
    b9d0:	200003f1 	.word	0x200003f1
    b9d4:	0000d665 	.word	0x0000d665
    b9d8:	0000b889 	.word	0x0000b889
    b9dc:	0000dde9 	.word	0x0000dde9
    b9e0:	0000e115 	.word	0x0000e115
    b9e4:	40002800 	.word	0x40002800
    b9e8:	20001e14 	.word	0x20001e14
    b9ec:	0000d4ed 	.word	0x0000d4ed

0000b9f0 <PHY_Init>:
{
    b9f0:	b570      	push	{r4, r5, r6, lr}
	trx_spi_init();
    b9f2:	4b16      	ldr	r3, [pc, #88]	; (ba4c <PHY_Init+0x5c>)
    b9f4:	4798      	blx	r3
	PhyReset();
    b9f6:	4b16      	ldr	r3, [pc, #88]	; (ba50 <PHY_Init+0x60>)
    b9f8:	4798      	blx	r3
	phyRxState = false;
    b9fa:	2300      	movs	r3, #0
    b9fc:	4a15      	ldr	r2, [pc, #84]	; (ba54 <PHY_Init+0x64>)
    b9fe:	7013      	strb	r3, [r2, #0]
	phyBand = 0; // For RF212b-MiWi stack we fix the band to 0
    ba00:	4a15      	ldr	r2, [pc, #84]	; (ba58 <PHY_Init+0x68>)
    ba02:	7013      	strb	r3, [r2, #0]
	value = trx_reg_read(reg);
    ba04:	200c      	movs	r0, #12
    ba06:	4b15      	ldr	r3, [pc, #84]	; (ba5c <PHY_Init+0x6c>)
    ba08:	4798      	blx	r3
	phyModulation = phyReadRegister(TRX_CTRL_2_REG) & 0x3f;
    ba0a:	233f      	movs	r3, #63	; 0x3f
    ba0c:	4018      	ands	r0, r3
    ba0e:	4b14      	ldr	r3, [pc, #80]	; (ba60 <PHY_Init+0x70>)
    ba10:	7018      	strb	r0, [r3, #0]
	phyState = PHY_STATE_IDLE;
    ba12:	2201      	movs	r2, #1
    ba14:	4b13      	ldr	r3, [pc, #76]	; (ba64 <PHY_Init+0x74>)
    ba16:	701a      	strb	r2, [r3, #0]
	trx_reg_write(reg, value);
    ba18:	4e13      	ldr	r6, [pc, #76]	; (ba68 <PHY_Init+0x78>)
	value = trx_reg_read(reg);
    ba1a:	4d10      	ldr	r5, [pc, #64]	; (ba5c <PHY_Init+0x6c>)
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    ba1c:	241f      	movs	r4, #31
	trx_reg_write(reg, value);
    ba1e:	2108      	movs	r1, #8
    ba20:	2002      	movs	r0, #2
    ba22:	47b0      	blx	r6
	value = trx_reg_read(reg);
    ba24:	2001      	movs	r0, #1
    ba26:	47a8      	blx	r5
	(phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK));
    ba28:	4020      	ands	r0, r4
    ba2a:	2808      	cmp	r0, #8
    ba2c:	d1f7      	bne.n	ba1e <PHY_Init+0x2e>
	trx_reg_write(reg, value);
    ba2e:	212e      	movs	r1, #46	; 0x2e
    ba30:	3804      	subs	r0, #4
    ba32:	4c0d      	ldr	r4, [pc, #52]	; (ba68 <PHY_Init+0x78>)
    ba34:	47a0      	blx	r4
    ba36:	218c      	movs	r1, #140	; 0x8c
    ba38:	200c      	movs	r0, #12
    ba3a:	47a0      	blx	r4
    ba3c:	2103      	movs	r1, #3
    ba3e:	2016      	movs	r0, #22
    ba40:	47a0      	blx	r4
    ba42:	21c1      	movs	r1, #193	; 0xc1
    ba44:	2005      	movs	r0, #5
    ba46:	47a0      	blx	r4
}
    ba48:	bd70      	pop	{r4, r5, r6, pc}
    ba4a:	46c0      	nop			; (mov r8, r8)
    ba4c:	0000dc9d 	.word	0x0000dc9d
    ba50:	0000ddb9 	.word	0x0000ddb9
    ba54:	200003f0 	.word	0x200003f0
    ba58:	2000036c 	.word	0x2000036c
    ba5c:	0000dde9 	.word	0x0000dde9
    ba60:	2000036e 	.word	0x2000036e
    ba64:	200003f1 	.word	0x200003f1
    ba68:	0000dee5 	.word	0x0000dee5

0000ba6c <PHY_SetRxState>:
{
    ba6c:	b510      	push	{r4, lr}
	phyRxState = rx;
    ba6e:	4b02      	ldr	r3, [pc, #8]	; (ba78 <PHY_SetRxState+0xc>)
    ba70:	7018      	strb	r0, [r3, #0]
	phySetRxState();
    ba72:	4b02      	ldr	r3, [pc, #8]	; (ba7c <PHY_SetRxState+0x10>)
    ba74:	4798      	blx	r3
}
    ba76:	bd10      	pop	{r4, pc}
    ba78:	200003f0 	.word	0x200003f0
    ba7c:	0000b8dd 	.word	0x0000b8dd

0000ba80 <PHY_SetPanId>:
{
    ba80:	b530      	push	{r4, r5, lr}
    ba82:	b083      	sub	sp, #12
    ba84:	466b      	mov	r3, sp
    ba86:	1d9d      	adds	r5, r3, #6
    ba88:	80d8      	strh	r0, [r3, #6]
	trx_reg_write(reg, value);
    ba8a:	b2c1      	uxtb	r1, r0
    ba8c:	2022      	movs	r0, #34	; 0x22
    ba8e:	4c03      	ldr	r4, [pc, #12]	; (ba9c <PHY_SetPanId+0x1c>)
    ba90:	47a0      	blx	r4
    ba92:	7869      	ldrb	r1, [r5, #1]
    ba94:	2023      	movs	r0, #35	; 0x23
    ba96:	47a0      	blx	r4
}
    ba98:	b003      	add	sp, #12
    ba9a:	bd30      	pop	{r4, r5, pc}
    ba9c:	0000dee5 	.word	0x0000dee5

0000baa0 <PHY_SetShortAddr>:
{
    baa0:	b570      	push	{r4, r5, r6, lr}
    baa2:	b082      	sub	sp, #8
    baa4:	466b      	mov	r3, sp
    baa6:	1d9e      	adds	r6, r3, #6
    baa8:	80d8      	strh	r0, [r3, #6]
	phyWriteRegister(SHORT_ADDR_0_REG, d[0]);
    baaa:	b2c4      	uxtb	r4, r0
	trx_reg_write(reg, value);
    baac:	0021      	movs	r1, r4
    baae:	2020      	movs	r0, #32
    bab0:	4d05      	ldr	r5, [pc, #20]	; (bac8 <PHY_SetShortAddr+0x28>)
    bab2:	47a8      	blx	r5
	phyWriteRegister(SHORT_ADDR_1_REG, d[1]);
    bab4:	7876      	ldrb	r6, [r6, #1]
	trx_reg_write(reg, value);
    bab6:	0031      	movs	r1, r6
    bab8:	2021      	movs	r0, #33	; 0x21
    baba:	47a8      	blx	r5
	phyWriteRegister(CSMA_SEED_0_REG, d[0] + d[1]);
    babc:	19a4      	adds	r4, r4, r6
	trx_reg_write(reg, value);
    babe:	b2e1      	uxtb	r1, r4
    bac0:	202d      	movs	r0, #45	; 0x2d
    bac2:	47a8      	blx	r5
}
    bac4:	b002      	add	sp, #8
    bac6:	bd70      	pop	{r4, r5, r6, pc}
    bac8:	0000dee5 	.word	0x0000dee5

0000bacc <PHY_Sleep>:
{
    bacc:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP != phyState)
    bace:	4b07      	ldr	r3, [pc, #28]	; (baec <PHY_Sleep+0x20>)
    bad0:	781b      	ldrb	r3, [r3, #0]
    bad2:	2b02      	cmp	r3, #2
    bad4:	d009      	beq.n	baea <PHY_Sleep+0x1e>
		phyTrxSetState(TRX_CMD_TRX_OFF);
    bad6:	2008      	movs	r0, #8
    bad8:	4b05      	ldr	r3, [pc, #20]	; (baf0 <PHY_Sleep+0x24>)
    bada:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    badc:	2280      	movs	r2, #128	; 0x80
    bade:	0352      	lsls	r2, r2, #13
    bae0:	4b04      	ldr	r3, [pc, #16]	; (baf4 <PHY_Sleep+0x28>)
    bae2:	619a      	str	r2, [r3, #24]
		phyState = PHY_STATE_SLEEP;	
    bae4:	2202      	movs	r2, #2
    bae6:	4b01      	ldr	r3, [pc, #4]	; (baec <PHY_Sleep+0x20>)
    bae8:	701a      	strb	r2, [r3, #0]
}
    baea:	bd10      	pop	{r4, pc}
    baec:	200003f1 	.word	0x200003f1
    baf0:	0000b889 	.word	0x0000b889
    baf4:	40002800 	.word	0x40002800

0000baf8 <PHY_Wakeup>:
{
    baf8:	b510      	push	{r4, lr}
	if (PHY_STATE_SLEEP == phyState)
    bafa:	4b07      	ldr	r3, [pc, #28]	; (bb18 <PHY_Wakeup+0x20>)
    bafc:	781b      	ldrb	r3, [r3, #0]
    bafe:	2b02      	cmp	r3, #2
    bb00:	d000      	beq.n	bb04 <PHY_Wakeup+0xc>
}
    bb02:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
    bb04:	2280      	movs	r2, #128	; 0x80
    bb06:	0352      	lsls	r2, r2, #13
    bb08:	4b04      	ldr	r3, [pc, #16]	; (bb1c <PHY_Wakeup+0x24>)
    bb0a:	615a      	str	r2, [r3, #20]
	 	phySetRxState();
    bb0c:	4b04      	ldr	r3, [pc, #16]	; (bb20 <PHY_Wakeup+0x28>)
    bb0e:	4798      	blx	r3
	 	phyState = PHY_STATE_IDLE;
    bb10:	2201      	movs	r2, #1
    bb12:	4b01      	ldr	r3, [pc, #4]	; (bb18 <PHY_Wakeup+0x20>)
    bb14:	701a      	strb	r2, [r3, #0]
}
    bb16:	e7f4      	b.n	bb02 <PHY_Wakeup+0xa>
    bb18:	200003f1 	.word	0x200003f1
    bb1c:	40002800 	.word	0x40002800
    bb20:	0000b8dd 	.word	0x0000b8dd

0000bb24 <PHY_SetChannel>:
{
    bb24:	b510      	push	{r4, lr}
	phyChannel = channel;
    bb26:	4b06      	ldr	r3, [pc, #24]	; (bb40 <PHY_SetChannel+0x1c>)
    bb28:	7018      	strb	r0, [r3, #0]
	if (PHY_STATE_SLEEP == phyState)
    bb2a:	4b06      	ldr	r3, [pc, #24]	; (bb44 <PHY_SetChannel+0x20>)
    bb2c:	781b      	ldrb	r3, [r3, #0]
    bb2e:	2b02      	cmp	r3, #2
    bb30:	d002      	beq.n	bb38 <PHY_SetChannel+0x14>
	phySetChannel();
    bb32:	4b05      	ldr	r3, [pc, #20]	; (bb48 <PHY_SetChannel+0x24>)
    bb34:	4798      	blx	r3
}
    bb36:	bd10      	pop	{r4, pc}
		PHY_Wakeup();
    bb38:	4b04      	ldr	r3, [pc, #16]	; (bb4c <PHY_SetChannel+0x28>)
    bb3a:	4798      	blx	r3
    bb3c:	e7f9      	b.n	bb32 <PHY_SetChannel+0xe>
    bb3e:	46c0      	nop			; (mov r8, r8)
    bb40:	2000036d 	.word	0x2000036d
    bb44:	200003f1 	.word	0x200003f1
    bb48:	0000b825 	.word	0x0000b825
    bb4c:	0000baf9 	.word	0x0000baf9

0000bb50 <PHY_RandomReq>:
{
    bb50:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb52:	46c6      	mov	lr, r8
    bb54:	b500      	push	{lr}
    bb56:	b082      	sub	sp, #8
	value = trx_reg_read(reg);
    bb58:	2015      	movs	r0, #21
    bb5a:	4b15      	ldr	r3, [pc, #84]	; (bbb0 <PHY_RandomReq+0x60>)
    bb5c:	4798      	blx	r3
    bb5e:	9001      	str	r0, [sp, #4]
	phyWriteRegister(RX_SYN_REG, (prev_rx_pdt_dis | (1<<7)));
    bb60:	2180      	movs	r1, #128	; 0x80
    bb62:	4249      	negs	r1, r1
    bb64:	4301      	orrs	r1, r0
	trx_reg_write(reg, value);
    bb66:	b2c9      	uxtb	r1, r1
    bb68:	2015      	movs	r0, #21
    bb6a:	4b12      	ldr	r3, [pc, #72]	; (bbb4 <PHY_RandomReq+0x64>)
    bb6c:	4798      	blx	r3
	phyTrxSetState(TRX_CMD_RX_ON);
    bb6e:	2006      	movs	r0, #6
    bb70:	4b11      	ldr	r3, [pc, #68]	; (bbb8 <PHY_RandomReq+0x68>)
    bb72:	4798      	blx	r3
    bb74:	2500      	movs	r5, #0
	uint16_t rnd = 0;
    bb76:	2400      	movs	r4, #0
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    bb78:	4b10      	ldr	r3, [pc, #64]	; (bbbc <PHY_RandomReq+0x6c>)
    bb7a:	4698      	mov	r8, r3
	value = trx_reg_read(reg);
    bb7c:	4f0c      	ldr	r7, [pc, #48]	; (bbb0 <PHY_RandomReq+0x60>)
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    bb7e:	2603      	movs	r6, #3
		delay_us(RANDOM_NUMBER_UPDATE_INTERVAL);
    bb80:	2001      	movs	r0, #1
    bb82:	47c0      	blx	r8
	value = trx_reg_read(reg);
    bb84:	2006      	movs	r0, #6
    bb86:	47b8      	blx	r7
		rndValue = (phyReadRegister(PHY_RSSI_REG) >> RND_VALUE) & 3;
    bb88:	0940      	lsrs	r0, r0, #5
		rnd |= rndValue << i;
    bb8a:	4030      	ands	r0, r6
    bb8c:	40a8      	lsls	r0, r5
    bb8e:	4304      	orrs	r4, r0
    bb90:	b2a4      	uxth	r4, r4
    bb92:	3502      	adds	r5, #2
	for (uint8_t i = 0; i < 16; i += 2) {
    bb94:	2d10      	cmp	r5, #16
    bb96:	d1f3      	bne.n	bb80 <PHY_RandomReq+0x30>
	phySetRxState();
    bb98:	4b09      	ldr	r3, [pc, #36]	; (bbc0 <PHY_RandomReq+0x70>)
    bb9a:	4798      	blx	r3
	trx_reg_write(reg, value);
    bb9c:	9901      	ldr	r1, [sp, #4]
    bb9e:	2015      	movs	r0, #21
    bba0:	4b04      	ldr	r3, [pc, #16]	; (bbb4 <PHY_RandomReq+0x64>)
    bba2:	4798      	blx	r3
}
    bba4:	0020      	movs	r0, r4
    bba6:	b002      	add	sp, #8
    bba8:	bc04      	pop	{r2}
    bbaa:	4690      	mov	r8, r2
    bbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bbae:	46c0      	nop			; (mov r8, r8)
    bbb0:	0000dde9 	.word	0x0000dde9
    bbb4:	0000dee5 	.word	0x0000dee5
    bbb8:	0000b889 	.word	0x0000b889
    bbbc:	00006239 	.word	0x00006239
    bbc0:	0000b8dd 	.word	0x0000b8dd

0000bbc4 <PHY_EncryptReq>:
{
    bbc4:	b510      	push	{r4, lr}
    bbc6:	0004      	movs	r4, r0
    bbc8:	0008      	movs	r0, r1
	sal_aes_setup(key, AES_MODE_ECB, AES_DIR_ENCRYPT);
    bbca:	2200      	movs	r2, #0
    bbcc:	2100      	movs	r1, #0
    bbce:	4b05      	ldr	r3, [pc, #20]	; (bbe4 <PHY_EncryptReq+0x20>)
    bbd0:	4798      	blx	r3
	sal_aes_wrrd(text, NULL);
    bbd2:	2100      	movs	r1, #0
    bbd4:	0020      	movs	r0, r4
    bbd6:	4b04      	ldr	r3, [pc, #16]	; (bbe8 <PHY_EncryptReq+0x24>)
    bbd8:	4798      	blx	r3
	sal_aes_read(text);
    bbda:	0020      	movs	r0, r4
    bbdc:	4b03      	ldr	r3, [pc, #12]	; (bbec <PHY_EncryptReq+0x28>)
    bbde:	4798      	blx	r3
}
    bbe0:	bd10      	pop	{r4, pc}
    bbe2:	46c0      	nop			; (mov r8, r8)
    bbe4:	0000db35 	.word	0x0000db35
    bbe8:	0000dac9 	.word	0x0000dac9
    bbec:	0000dc6d 	.word	0x0000dc6d

0000bbf0 <PHY_SetIEEEAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetIEEEAddr(uint8_t *ieee_addr)
{
    bbf0:	b570      	push	{r4, r5, r6, lr}
    bbf2:	0005      	movs	r5, r0
    bbf4:	2424      	movs	r4, #36	; 0x24
	uint8_t *ptr_to_reg = ieee_addr;
	for (uint8_t i = 0; i < 8; i++) {
		trx_reg_write((IEEE_ADDR_0_REG + i), *ptr_to_reg);
    bbf6:	4e05      	ldr	r6, [pc, #20]	; (bc0c <PHY_SetIEEEAddr+0x1c>)
    bbf8:	7829      	ldrb	r1, [r5, #0]
    bbfa:	0020      	movs	r0, r4
    bbfc:	47b0      	blx	r6
		ptr_to_reg++;
    bbfe:	3501      	adds	r5, #1
    bc00:	3401      	adds	r4, #1
    bc02:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i < 8; i++) {
    bc04:	2c2c      	cmp	r4, #44	; 0x2c
    bc06:	d1f7      	bne.n	bbf8 <PHY_SetIEEEAddr+0x8>
	}
}
    bc08:	bd70      	pop	{r4, r5, r6, pc}
    bc0a:	46c0      	nop			; (mov r8, r8)
    bc0c:	0000dee5 	.word	0x0000dee5

0000bc10 <PHY_TaskHandler>:
	}
}
#else
// Handle Packet Received
void PHY_TaskHandler(void)
{
    bc10:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc12:	b085      	sub	sp, #20
    PHY_TxHandler();
    bc14:	4b40      	ldr	r3, [pc, #256]	; (bd18 <PHY_TaskHandler+0x108>)
    bc16:	4798      	blx	r3

    if (PHY_STATE_SLEEP == phyState)
    bc18:	4b40      	ldr	r3, [pc, #256]	; (bd1c <PHY_TaskHandler+0x10c>)
    bc1a:	781b      	ldrb	r3, [r3, #0]
    bc1c:	2b02      	cmp	r3, #2
    bc1e:	d00a      	beq.n	bc36 <PHY_TaskHandler+0x26>
	value = trx_reg_read(reg);
    bc20:	200f      	movs	r0, #15
    bc22:	4b3f      	ldr	r3, [pc, #252]	; (bd20 <PHY_TaskHandler+0x110>)
    bc24:	4798      	blx	r3
    {
        return;
    }

    if (phyReadRegister(IRQ_STATUS_REG) & (1 << TRX_END))
    bc26:	0703      	lsls	r3, r0, #28
    bc28:	d505      	bpl.n	bc36 <PHY_TaskHandler+0x26>
    {
        if (PHY_STATE_IDLE == phyState)
    bc2a:	4b3c      	ldr	r3, [pc, #240]	; (bd1c <PHY_TaskHandler+0x10c>)
    bc2c:	781b      	ldrb	r3, [r3, #0]
    bc2e:	2b01      	cmp	r3, #1
    bc30:	d003      	beq.n	bc3a <PHY_TaskHandler+0x2a>
					}
				}
				phyWaitState(TRX_STATUS_RX_AACK_ON);
			}
		}
		else if (PHY_STATE_TX_WAIT_END == phyState)
    bc32:	2b03      	cmp	r3, #3
    bc34:	d055      	beq.n	bce2 <PHY_TaskHandler+0xd2>
		    gPhyDataReq.confirmCallback = NULL;
			phySetRxState();
			phyState = PHY_STATE_IDLE;
		}
	}
}
    bc36:	b005      	add	sp, #20
    bc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
                if (RxBuffer[i].PayloadLen == 0)
    bc3a:	4b3a      	ldr	r3, [pc, #232]	; (bd24 <PHY_TaskHandler+0x114>)
    bc3c:	781d      	ldrb	r5, [r3, #0]
    bc3e:	2d00      	cmp	r5, #0
    bc40:	d010      	beq.n	bc64 <PHY_TaskHandler+0x54>
    bc42:	2376      	movs	r3, #118	; 0x76
    bc44:	4a37      	ldr	r2, [pc, #220]	; (bd24 <PHY_TaskHandler+0x114>)
    bc46:	5cd3      	ldrb	r3, [r2, r3]
    bc48:	2b00      	cmp	r3, #0
    bc4a:	d00a      	beq.n	bc62 <PHY_TaskHandler+0x52>
    bc4c:	23ec      	movs	r3, #236	; 0xec
    bc4e:	5cd3      	ldrb	r3, [r2, r3]
    bc50:	2b00      	cmp	r3, #0
    bc52:	d044      	beq.n	bcde <PHY_TaskHandler+0xce>
    bc54:	23b1      	movs	r3, #177	; 0xb1
    bc56:	005b      	lsls	r3, r3, #1
    bc58:	5cd3      	ldrb	r3, [r2, r3]
            for (i = 0; i < BANK_SIZE; i++)
    bc5a:	2503      	movs	r5, #3
                if (RxBuffer[i].PayloadLen == 0)
    bc5c:	2b00      	cmp	r3, #0
    bc5e:	d1ea      	bne.n	bc36 <PHY_TaskHandler+0x26>
    bc60:	e000      	b.n	bc64 <PHY_TaskHandler+0x54>
            for (i = 0; i < BANK_SIZE; i++)
    bc62:	2501      	movs	r5, #1
	value = trx_reg_read(reg);
    bc64:	2007      	movs	r0, #7
    bc66:	4b2e      	ldr	r3, [pc, #184]	; (bd20 <PHY_TaskHandler+0x110>)
    bc68:	4798      	blx	r3
    bc6a:	9001      	str	r0, [sp, #4]
                trx_frame_read(&size, 1);
    bc6c:	ab02      	add	r3, sp, #8
    bc6e:	1dde      	adds	r6, r3, #7
    bc70:	2101      	movs	r1, #1
    bc72:	0030      	movs	r0, r6
    bc74:	4b2c      	ldr	r3, [pc, #176]	; (bd28 <PHY_TaskHandler+0x118>)
    bc76:	4798      	blx	r3
				if(size <= MAX_PSDU)
    bc78:	7831      	ldrb	r1, [r6, #0]
    bc7a:	b24b      	sxtb	r3, r1
    bc7c:	2b00      	cmp	r3, #0
    bc7e:	db26      	blt.n	bcce <PHY_TaskHandler+0xbe>
					trx_frame_read(phyRxBuffer, size + 2);
    bc80:	3102      	adds	r1, #2
    bc82:	b2c9      	uxtb	r1, r1
    bc84:	4829      	ldr	r0, [pc, #164]	; (bd2c <PHY_TaskHandler+0x11c>)
    bc86:	4b28      	ldr	r3, [pc, #160]	; (bd28 <PHY_TaskHandler+0x118>)
    bc88:	4798      	blx	r3
					RxBuffer[RxBank].PayloadLen = size + 2;
    bc8a:	002f      	movs	r7, r5
    bc8c:	ab02      	add	r3, sp, #8
    bc8e:	79d8      	ldrb	r0, [r3, #7]
    bc90:	1c86      	adds	r6, r0, #2
    bc92:	b2f6      	uxtb	r6, r6
    bc94:	2376      	movs	r3, #118	; 0x76
    bc96:	435d      	muls	r5, r3
    bc98:	4b22      	ldr	r3, [pc, #136]	; (bd24 <PHY_TaskHandler+0x114>)
    bc9a:	54ee      	strb	r6, [r5, r3]
					if (RxBuffer[RxBank].PayloadLen < RX_PACKET_SIZE)
    bc9c:	2e74      	cmp	r6, #116	; 0x74
    bc9e:	d816      	bhi.n	bcce <PHY_TaskHandler+0xbe>
						for (i = 1; i <= size+2; i++)
    bca0:	3002      	adds	r0, #2
    bca2:	2201      	movs	r2, #1
    bca4:	2301      	movs	r3, #1
							RxBuffer[RxBank].Payload[i-1] = phyRxBuffer[i];
    bca6:	0029      	movs	r1, r5
    bca8:	4d1e      	ldr	r5, [pc, #120]	; (bd24 <PHY_TaskHandler+0x114>)
    bcaa:	186d      	adds	r5, r5, r1
    bcac:	4c1f      	ldr	r4, [pc, #124]	; (bd2c <PHY_TaskHandler+0x11c>)
    bcae:	5ca1      	ldrb	r1, [r4, r2]
    bcb0:	54a9      	strb	r1, [r5, r2]
						for (i = 1; i <= size+2; i++)
    bcb2:	3301      	adds	r3, #1
    bcb4:	b2db      	uxtb	r3, r3
    bcb6:	001a      	movs	r2, r3
    bcb8:	4298      	cmp	r0, r3
    bcba:	daf8      	bge.n	bcae <PHY_TaskHandler+0x9e>
						RxBuffer[RxBank].Payload[RxBuffer[RxBank].PayloadLen - 1] = rssi + phyRssiBaseVal();
    bcbc:	4b1c      	ldr	r3, [pc, #112]	; (bd30 <PHY_TaskHandler+0x120>)
    bcbe:	4798      	blx	r3
    bcc0:	2376      	movs	r3, #118	; 0x76
    bcc2:	437b      	muls	r3, r7
    bcc4:	4f17      	ldr	r7, [pc, #92]	; (bd24 <PHY_TaskHandler+0x114>)
    bcc6:	18ff      	adds	r7, r7, r3
    bcc8:	9b01      	ldr	r3, [sp, #4]
    bcca:	181c      	adds	r4, r3, r0
    bccc:	55bc      	strb	r4, [r7, r6]
	value = trx_reg_read(reg);
    bcce:	4d14      	ldr	r5, [pc, #80]	; (bd20 <PHY_TaskHandler+0x110>)
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    bcd0:	241f      	movs	r4, #31
	value = trx_reg_read(reg);
    bcd2:	2001      	movs	r0, #1
    bcd4:	47a8      	blx	r5
	while (state != (phyReadRegister(TRX_STATUS_REG) & TRX_STATUS_MASK)) {
    bcd6:	4020      	ands	r0, r4
    bcd8:	2816      	cmp	r0, #22
    bcda:	d1fa      	bne.n	bcd2 <PHY_TaskHandler+0xc2>
    bcdc:	e7ab      	b.n	bc36 <PHY_TaskHandler+0x26>
            for (i = 0; i < BANK_SIZE; i++)
    bcde:	2502      	movs	r5, #2
    bce0:	e7c0      	b.n	bc64 <PHY_TaskHandler+0x54>
	value = trx_reg_read(reg);
    bce2:	2002      	movs	r0, #2
    bce4:	4b0e      	ldr	r3, [pc, #56]	; (bd20 <PHY_TaskHandler+0x110>)
    bce6:	4798      	blx	r3
			uint8_t status = (phyReadRegister(TRX_STATE_REG) >>  TRAC_STATUS) & 7;
    bce8:	0940      	lsrs	r0, r0, #5
    bcea:	b2c0      	uxtb	r0, r0
   			if (TRAC_STATUS_SUCCESS == status)
    bcec:	2800      	cmp	r0, #0
    bcee:	d004      	beq.n	bcfa <PHY_TaskHandler+0xea>
			else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    bcf0:	2803      	cmp	r0, #3
    bcf2:	d00d      	beq.n	bd10 <PHY_TaskHandler+0x100>
			else if (TRAC_STATUS_NO_ACK == status)
    bcf4:	2805      	cmp	r0, #5
    bcf6:	d00d      	beq.n	bd14 <PHY_TaskHandler+0x104>
				status = PHY_STATUS_ERROR;
    bcf8:	2001      	movs	r0, #1
		    gPhyDataReq.confirmCallback(status);
    bcfa:	4c0e      	ldr	r4, [pc, #56]	; (bd34 <PHY_TaskHandler+0x124>)
    bcfc:	68a3      	ldr	r3, [r4, #8]
    bcfe:	4798      	blx	r3
		    gPhyDataReq.confirmCallback = NULL;
    bd00:	2300      	movs	r3, #0
    bd02:	60a3      	str	r3, [r4, #8]
			phySetRxState();
    bd04:	4b0c      	ldr	r3, [pc, #48]	; (bd38 <PHY_TaskHandler+0x128>)
    bd06:	4798      	blx	r3
			phyState = PHY_STATE_IDLE;
    bd08:	2201      	movs	r2, #1
    bd0a:	4b04      	ldr	r3, [pc, #16]	; (bd1c <PHY_TaskHandler+0x10c>)
    bd0c:	701a      	strb	r2, [r3, #0]
    bd0e:	e792      	b.n	bc36 <PHY_TaskHandler+0x26>
				status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    bd10:	2002      	movs	r0, #2
    bd12:	e7f2      	b.n	bcfa <PHY_TaskHandler+0xea>
				status = PHY_STATUS_NO_ACK;
    bd14:	2003      	movs	r0, #3
    bd16:	e7f0      	b.n	bcfa <PHY_TaskHandler+0xea>
    bd18:	0000b951 	.word	0x0000b951
    bd1c:	200003f1 	.word	0x200003f1
    bd20:	0000dde9 	.word	0x0000dde9
    bd24:	20001e2c 	.word	0x20001e2c
    bd28:	0000dfe5 	.word	0x0000dfe5
    bd2c:	20000370 	.word	0x20000370
    bd30:	0000b801 	.word	0x0000b801
    bd34:	20001e14 	.word	0x20001e14
    bd38:	0000b8dd 	.word	0x0000b8dd

0000bd3c <Find_Index>:
#if defined(PROTOCOL_STAR)
/* All connections (FFD || RFD)are stored in Connection Table of PAN Coordinator
    Each Connection is identified by its index no. In case of Data TX , EDx --> PAN CO --> EDy
    PAN Coordinator will forward the data to EDy , In order to know */
static uint8_t Find_Index (uint8_t *DestAddr)
{
    bd3c:	b570      	push	{r4, r5, r6, lr}
    bd3e:	0006      	movs	r6, r0
    uint8_t i;
    uint8_t return_val;
    for (i = 0;i < conn_size; i++)
    bd40:	4b12      	ldr	r3, [pc, #72]	; (bd8c <Find_Index+0x50>)
    bd42:	781c      	ldrb	r4, [r3, #0]
    bd44:	2c00      	cmp	r4, #0
    bd46:	d01e      	beq.n	bd86 <Find_Index+0x4a>
    {
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    bd48:	4b11      	ldr	r3, [pc, #68]	; (bd90 <Find_Index+0x54>)
    bd4a:	681b      	ldr	r3, [r3, #0]
    bd4c:	681b      	ldr	r3, [r3, #0]
    bd4e:	2000      	movs	r0, #0
    bd50:	e004      	b.n	bd5c <Find_Index+0x20>
    for (i = 0;i < conn_size; i++)
    bd52:	3001      	adds	r0, #1
    bd54:	b2c0      	uxtb	r0, r0
    bd56:	3310      	adds	r3, #16
    bd58:	42a0      	cmp	r0, r4
    bd5a:	d012      	beq.n	bd82 <Find_Index+0x46>
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    bd5c:	7b1a      	ldrb	r2, [r3, #12]
    bd5e:	2a7f      	cmp	r2, #127	; 0x7f
    bd60:	d9f7      	bls.n	bd52 <Find_Index+0x16>
        {
            if (DestAddr[0] == miwiDefaultRomOrRamParams->ConnectionTable[i].Address[0] && DestAddr[1] == miwiDefaultRomOrRamParams->ConnectionTable[i].Address[1] && DestAddr[2] == miwiDefaultRomOrRamParams->ConnectionTable[i].Address[2] )
    bd62:	7835      	ldrb	r5, [r6, #0]
    bd64:	791a      	ldrb	r2, [r3, #4]
    bd66:	4295      	cmp	r5, r2
    bd68:	d1f3      	bne.n	bd52 <Find_Index+0x16>
    bd6a:	7875      	ldrb	r5, [r6, #1]
    bd6c:	795a      	ldrb	r2, [r3, #5]
    bd6e:	4295      	cmp	r5, r2
    bd70:	d1ef      	bne.n	bd52 <Find_Index+0x16>
    bd72:	78b5      	ldrb	r5, [r6, #2]
    bd74:	799a      	ldrb	r2, [r3, #6]
    bd76:	4295      	cmp	r5, r2
    bd78:	d1eb      	bne.n	bd52 <Find_Index+0x16>
                break;
            }

        }
    }
    if (i == conn_size)
    bd7a:	4284      	cmp	r4, r0
    bd7c:	d102      	bne.n	bd84 <Find_Index+0x48>
    {
        return_val = 0xff;
    bd7e:	20ff      	movs	r0, #255	; 0xff
    bd80:	e000      	b.n	bd84 <Find_Index+0x48>
    bd82:	20ff      	movs	r0, #255	; 0xff
    }
    return return_val;
}
    bd84:	bd70      	pop	{r4, r5, r6, pc}
        return_val = 0xff;
    bd86:	20ff      	movs	r0, #255	; 0xff
    bd88:	e7fc      	b.n	bd84 <Find_Index+0x48>
    bd8a:	46c0      	nop			; (mov r8, r8)
    bd8c:	200003f2 	.word	0x200003f2
    bd90:	20002034 	.word	0x20002034

0000bd94 <CommandConfCallback>:
{
    bd94:	b510      	push	{r4, lr}
    MiMem_Free(msgPointer);
    bd96:	0010      	movs	r0, r2
    bd98:	4b01      	ldr	r3, [pc, #4]	; (bda0 <CommandConfCallback+0xc>)
    bd9a:	4798      	blx	r3
}
    bd9c:	bd10      	pop	{r4, pc}
    bd9e:	46c0      	nop			; (mov r8, r8)
    bda0:	0000d4ed 	.word	0x0000d4ed

0000bda4 <linkStatusConfCallback>:
{
    bda4:	b510      	push	{r4, lr}
    bda6:	000c      	movs	r4, r1
    MiMem_Free(msgPointer);
    bda8:	0010      	movs	r0, r2
    bdaa:	4b10      	ldr	r3, [pc, #64]	; (bdec <linkStatusConfCallback+0x48>)
    bdac:	4798      	blx	r3
    if (SUCCESS != status)
    bdae:	2c00      	cmp	r4, #0
    bdb0:	d017      	beq.n	bde2 <linkStatusConfCallback+0x3e>
        if (linkStatusFailureCount >= MAX_LINK_STATUS_FAILURES)
    bdb2:	4b0f      	ldr	r3, [pc, #60]	; (bdf0 <linkStatusConfCallback+0x4c>)
    bdb4:	781b      	ldrb	r3, [r3, #0]
    bdb6:	2b02      	cmp	r3, #2
    bdb8:	d90e      	bls.n	bdd8 <linkStatusConfCallback+0x34>
            linkStatusTimeInterval = 0;
    bdba:	2200      	movs	r2, #0
    bdbc:	4b0d      	ldr	r3, [pc, #52]	; (bdf4 <linkStatusConfCallback+0x50>)
    bdbe:	801a      	strh	r2, [r3, #0]
            if ((NULL != linkFailureCallback) && (p2pStarCurrentState != DISCONNECTED))
    bdc0:	4b0d      	ldr	r3, [pc, #52]	; (bdf8 <linkStatusConfCallback+0x54>)
    bdc2:	681b      	ldr	r3, [r3, #0]
    bdc4:	2b00      	cmp	r3, #0
    bdc6:	d004      	beq.n	bdd2 <linkStatusConfCallback+0x2e>
    bdc8:	4a0c      	ldr	r2, [pc, #48]	; (bdfc <linkStatusConfCallback+0x58>)
    bdca:	7812      	ldrb	r2, [r2, #0]
    bdcc:	2a08      	cmp	r2, #8
    bdce:	d000      	beq.n	bdd2 <linkStatusConfCallback+0x2e>
                linkFailureCallback();
    bdd0:	4798      	blx	r3
            p2pStarCurrentState = DISCONNECTED;	
    bdd2:	2208      	movs	r2, #8
    bdd4:	4b09      	ldr	r3, [pc, #36]	; (bdfc <linkStatusConfCallback+0x58>)
    bdd6:	701a      	strb	r2, [r3, #0]
        ++linkStatusFailureCount;
    bdd8:	4a05      	ldr	r2, [pc, #20]	; (bdf0 <linkStatusConfCallback+0x4c>)
    bdda:	7813      	ldrb	r3, [r2, #0]
    bddc:	3301      	adds	r3, #1
    bdde:	7013      	strb	r3, [r2, #0]
}
    bde0:	bd10      	pop	{r4, pc}
        linkStatusFailureCount = 0;
    bde2:	2200      	movs	r2, #0
    bde4:	4b02      	ldr	r3, [pc, #8]	; (bdf0 <linkStatusConfCallback+0x4c>)
    bde6:	701a      	strb	r2, [r3, #0]
}
    bde8:	e7fa      	b.n	bde0 <linkStatusConfCallback+0x3c>
    bdea:	46c0      	nop			; (mov r8, r8)
    bdec:	0000d4ed 	.word	0x0000d4ed
    bdf0:	20000414 	.word	0x20000414
    bdf4:	20000416 	.word	0x20000416
    bdf8:	20002138 	.word	0x20002138
    bdfc:	20000418 	.word	0x20000418

0000be00 <frameTxCallback>:
{
    be00:	b510      	push	{r4, lr}
    txCallbackReceived = true;
    be02:	2401      	movs	r4, #1
    be04:	4b08      	ldr	r3, [pc, #32]	; (be28 <frameTxCallback+0x28>)
    be06:	701c      	strb	r4, [r3, #0]
    DataConf_callback_t callback = sentFrame->txFrameEntry.frameConfCallback;
    be08:	4b08      	ldr	r3, [pc, #32]	; (be2c <frameTxCallback+0x2c>)
    be0a:	681b      	ldr	r3, [r3, #0]
    be0c:	691b      	ldr	r3, [r3, #16]
    if (NULL != callback)
    be0e:	2b00      	cmp	r3, #0
    be10:	d005      	beq.n	be1e <frameTxCallback+0x1e>
        callback(handle, status, msgPointer);
    be12:	4798      	blx	r3
    MiMem_Free((uint8_t *)sentFrame);
    be14:	4b05      	ldr	r3, [pc, #20]	; (be2c <frameTxCallback+0x2c>)
    be16:	6818      	ldr	r0, [r3, #0]
    be18:	4b05      	ldr	r3, [pc, #20]	; (be30 <frameTxCallback+0x30>)
    be1a:	4798      	blx	r3
}
    be1c:	bd10      	pop	{r4, pc}
        MiMem_Free(msgPointer);
    be1e:	0010      	movs	r0, r2
    be20:	4b03      	ldr	r3, [pc, #12]	; (be30 <frameTxCallback+0x30>)
    be22:	4798      	blx	r3
    be24:	e7f6      	b.n	be14 <frameTxCallback+0x14>
    be26:	46c0      	nop			; (mov r8, r8)
    be28:	20000018 	.word	0x20000018
    be2c:	2000214c 	.word	0x2000214c
    be30:	0000d4ed 	.word	0x0000d4ed

0000be34 <dataTimerHandler>:
{
    be34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    be36:	4b19      	ldr	r3, [pc, #100]	; (be9c <dataTimerHandler+0x68>)
    be38:	7a1b      	ldrb	r3, [r3, #8]
    be3a:	2b00      	cmp	r3, #0
    be3c:	d029      	beq.n	be92 <dataTimerHandler+0x5e>
    be3e:	2600      	movs	r6, #0
		dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    be40:	4c16      	ldr	r4, [pc, #88]	; (be9c <dataTimerHandler+0x68>)
    be42:	4f17      	ldr	r7, [pc, #92]	; (bea0 <dataTimerHandler+0x6c>)
    be44:	e009      	b.n	be5a <dataTimerHandler+0x26>
			miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
    be46:	0029      	movs	r1, r5
    be48:	4814      	ldr	r0, [pc, #80]	; (be9c <dataTimerHandler+0x68>)
    be4a:	4b16      	ldr	r3, [pc, #88]	; (bea4 <dataTimerHandler+0x70>)
    be4c:	4798      	blx	r3
	for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    be4e:	3601      	adds	r6, #1
    be50:	b2f6      	uxtb	r6, r6
    be52:	4b12      	ldr	r3, [pc, #72]	; (be9c <dataTimerHandler+0x68>)
    be54:	7a1b      	ldrb	r3, [r3, #8]
    be56:	42b3      	cmp	r3, r6
    be58:	d918      	bls.n	be8c <dataTimerHandler+0x58>
		dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    be5a:	2100      	movs	r1, #0
    be5c:	0020      	movs	r0, r4
    be5e:	47b8      	blx	r7
    be60:	1e05      	subs	r5, r0, #0
		if (NULL == dataFramePtr)
    be62:	d015      	beq.n	be90 <dataTimerHandler+0x5c>
		if((0 != dataFramePtr->dataFrame.timeout) && (--dataFramePtr->dataFrame.timeout) == 0)
    be64:	7c03      	ldrb	r3, [r0, #16]
    be66:	2b00      	cmp	r3, #0
    be68:	d0ed      	beq.n	be46 <dataTimerHandler+0x12>
    be6a:	3b01      	subs	r3, #1
    be6c:	b2db      	uxtb	r3, r3
    be6e:	7403      	strb	r3, [r0, #16]
    be70:	2b00      	cmp	r3, #0
    be72:	d1e8      	bne.n	be46 <dataTimerHandler+0x12>
			DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    be74:	6843      	ldr	r3, [r0, #4]
			if (NULL != callback)
    be76:	2b00      	cmp	r3, #0
    be78:	d004      	beq.n	be84 <dataTimerHandler+0x50>
				callback(dataFramePtr->dataFrame.msghandle, NO_ACK, (uint8_t*)&(dataFramePtr->dataFrame.msg));
    be7a:	7d00      	ldrb	r0, [r0, #20]
    be7c:	002a      	movs	r2, r5
    be7e:	3216      	adds	r2, #22
    be80:	2103      	movs	r1, #3
    be82:	4798      	blx	r3
			MiMem_Free((uint8_t *)dataFramePtr);
    be84:	0028      	movs	r0, r5
    be86:	4b08      	ldr	r3, [pc, #32]	; (bea8 <dataTimerHandler+0x74>)
    be88:	4798      	blx	r3
		{
    be8a:	e7e0      	b.n	be4e <dataTimerHandler+0x1a>
	if (0 == appAckWaitDataQueue.size)
    be8c:	2b00      	cmp	r3, #0
    be8e:	d000      	beq.n	be92 <dataTimerHandler+0x5e>
}
    be90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SYS_TimerStop(&dataTimer);
    be92:	4806      	ldr	r0, [pc, #24]	; (beac <dataTimerHandler+0x78>)
    be94:	4b06      	ldr	r3, [pc, #24]	; (beb0 <dataTimerHandler+0x7c>)
    be96:	4798      	blx	r3
    be98:	e7fa      	b.n	be90 <dataTimerHandler+0x5c>
    be9a:	46c0      	nop			; (mov r8, r8)
    be9c:	200020ac 	.word	0x200020ac
    bea0:	0000d665 	.word	0x0000d665
    bea4:	0000d62d 	.word	0x0000d62d
    bea8:	0000d4ed 	.word	0x0000d4ed
    beac:	200003f8 	.word	0x200003f8
    beb0:	0000d769 	.word	0x0000d769

0000beb4 <MiApp_Set>:
{
    beb4:	b570      	push	{r4, r5, r6, lr}
    beb6:	000d      	movs	r5, r1
    return false;
    beb8:	2400      	movs	r4, #0
    switch(id)
    beba:	2800      	cmp	r0, #0
    bebc:	d001      	beq.n	bec2 <MiApp_Set+0xe>
}
    bebe:	0020      	movs	r0, r4
    bec0:	bd70      	pop	{r4, r5, r6, pc}
            if( MiMAC_Set(MAC_CHANNEL, value))
    bec2:	4b05      	ldr	r3, [pc, #20]	; (bed8 <MiApp_Set+0x24>)
    bec4:	4798      	blx	r3
    bec6:	1e04      	subs	r4, r0, #0
    bec8:	d0f9      	beq.n	bebe <MiApp_Set+0xa>
                currentChannel = *value;
    beca:	782a      	ldrb	r2, [r5, #0]
    becc:	4b03      	ldr	r3, [pc, #12]	; (bedc <MiApp_Set+0x28>)
    bece:	701a      	strb	r2, [r3, #0]
                PDS_Store(PDS_CURRENT_CHANNEL_ID);
    bed0:	2004      	movs	r0, #4
    bed2:	4b03      	ldr	r3, [pc, #12]	; (bee0 <MiApp_Set+0x2c>)
    bed4:	4798      	blx	r3
                return true;
    bed6:	e7f2      	b.n	bebe <MiApp_Set+0xa>
    bed8:	0000aee5 	.word	0x0000aee5
    bedc:	2000000d 	.word	0x2000000d
    bee0:	0000a66d 	.word	0x0000a66d

0000bee4 <MiApp_ProtocolInit>:
{
    bee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bee6:	46c6      	mov	lr, r8
    bee8:	b500      	push	{lr}
    beea:	b084      	sub	sp, #16
    beec:	0005      	movs	r5, r0
    uint16_t broadcastAddress = 0xFFFF;
    beee:	2201      	movs	r2, #1
    bef0:	4252      	negs	r2, r2
    bef2:	230e      	movs	r3, #14
    bef4:	446b      	add	r3, sp
    bef6:	801a      	strh	r2, [r3, #0]
    P2PStatus.Val = 0;//TODO
    bef8:	2300      	movs	r3, #0
    befa:	4a52      	ldr	r2, [pc, #328]	; (c044 <MiApp_ProtocolInit+0x160>)
    befc:	7013      	strb	r3, [r2, #0]
    miwiDefaultRomOrRamParams = defaultRomOrRamParams;
    befe:	4a52      	ldr	r2, [pc, #328]	; (c048 <MiApp_ProtocolInit+0x164>)
    bf00:	6010      	str	r0, [r2, #0]
    miwiDefaultRamOnlyParams = defaultRamOnlyParams;
    bf02:	4a52      	ldr	r2, [pc, #328]	; (c04c <MiApp_ProtocolInit+0x168>)
    bf04:	6011      	str	r1, [r2, #0]
    myPANID.Val = 0;
    bf06:	4a52      	ldr	r2, [pc, #328]	; (c050 <MiApp_ProtocolInit+0x16c>)
    bf08:	8013      	strh	r3, [r2, #0]
    if (defaultRomOrRamParams->networkFreezerRestore)
    bf0a:	7b03      	ldrb	r3, [r0, #12]
    bf0c:	2b00      	cmp	r3, #0
    bf0e:	d165      	bne.n	bfdc <MiApp_ProtocolInit+0xf8>
        p2pStarCurrentState = INIT_STATE;
    bf10:	2201      	movs	r2, #1
    bf12:	4b50      	ldr	r3, [pc, #320]	; (c054 <MiApp_ProtocolInit+0x170>)
    bf14:	701a      	strb	r2, [r3, #0]
        myPANID.Val = MY_PAN_ID;
    bf16:	4a50      	ldr	r2, [pc, #320]	; (c058 <MiApp_ProtocolInit+0x174>)
    bf18:	4b4d      	ldr	r3, [pc, #308]	; (c050 <MiApp_ProtocolInit+0x16c>)
    bf1a:	801a      	strh	r2, [r3, #0]
    bf1c:	2400      	movs	r4, #0
        defaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    bf1e:	2600      	movs	r6, #0
        memset(&defaultRomOrRamParams->ConnectionTable[i].Address, 0, LONG_ADDR_LEN);
    bf20:	4b4e      	ldr	r3, [pc, #312]	; (c05c <MiApp_ProtocolInit+0x178>)
    bf22:	4698      	mov	r8, r3
    for(i = 0; i < CONNECTION_SIZE; i++)
    bf24:	27a0      	movs	r7, #160	; 0xa0
    bf26:	007f      	lsls	r7, r7, #1
        defaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    bf28:	682b      	ldr	r3, [r5, #0]
    bf2a:	191b      	adds	r3, r3, r4
    bf2c:	731e      	strb	r6, [r3, #12]
        memset(&defaultRomOrRamParams->ConnectionTable[i].Address, 0, LONG_ADDR_LEN);
    bf2e:	682b      	ldr	r3, [r5, #0]
    bf30:	1918      	adds	r0, r3, r4
    bf32:	3004      	adds	r0, #4
    bf34:	2208      	movs	r2, #8
    bf36:	0031      	movs	r1, r6
    bf38:	47c0      	blx	r8
    bf3a:	3410      	adds	r4, #16
    for(i = 0; i < CONNECTION_SIZE; i++)
    bf3c:	42bc      	cmp	r4, r7
    bf3e:	d1f3      	bne.n	bf28 <MiApp_ProtocolInit+0x44>
    bf40:	4b47      	ldr	r3, [pc, #284]	; (c060 <MiApp_ProtocolInit+0x17c>)
    bf42:	0019      	movs	r1, r3
    bf44:	3150      	adds	r1, #80	; 0x50
        IncomingFrameCounter[i].Val = 0;
    bf46:	2200      	movs	r2, #0
    bf48:	c304      	stmia	r3!, {r2}
    for(i = 0; i < CONNECTION_SIZE; i++)
    bf4a:	428b      	cmp	r3, r1
    bf4c:	d1fc      	bne.n	bf48 <MiApp_ProtocolInit+0x64>
    miwi_status_t initStatus = SUCCESS;
    bf4e:	2400      	movs	r4, #0
    initValue.PAddress = myLongAddress;
    bf50:	aa01      	add	r2, sp, #4
    initValue.actionFlags.bits.CCAEnable = 1;
    bf52:	7813      	ldrb	r3, [r2, #0]
    bf54:	2102      	movs	r1, #2
    bf56:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.PAddrLength = MY_ADDRESS_LENGTH;
    bf58:	2187      	movs	r1, #135	; 0x87
    bf5a:	400b      	ands	r3, r1
    bf5c:	2140      	movs	r1, #64	; 0x40
    bf5e:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.NetworkFreezer = 1;
    bf60:	b2db      	uxtb	r3, r3
    bf62:	2104      	movs	r1, #4
    bf64:	430b      	orrs	r3, r1
    initValue.actionFlags.bits.RepeaterMode = 0;
    bf66:	21c6      	movs	r1, #198	; 0xc6
    bf68:	400b      	ands	r3, r1
    bf6a:	7013      	strb	r3, [r2, #0]
    MiMAC_Init(initValue);
    bf6c:	9801      	ldr	r0, [sp, #4]
    bf6e:	493d      	ldr	r1, [pc, #244]	; (c064 <MiApp_ProtocolInit+0x180>)
    bf70:	4b3d      	ldr	r3, [pc, #244]	; (c068 <MiApp_ProtocolInit+0x184>)
    bf72:	4798      	blx	r3
    if (currentChannel != 0xFF)
    bf74:	4b3d      	ldr	r3, [pc, #244]	; (c06c <MiApp_ProtocolInit+0x188>)
    bf76:	781b      	ldrb	r3, [r3, #0]
    bf78:	2bff      	cmp	r3, #255	; 0xff
    bf7a:	d003      	beq.n	bf84 <MiApp_ProtocolInit+0xa0>
        MiApp_Set(CHANNEL, &currentChannel);
    bf7c:	493b      	ldr	r1, [pc, #236]	; (c06c <MiApp_ProtocolInit+0x188>)
    bf7e:	2000      	movs	r0, #0
    bf80:	4b3b      	ldr	r3, [pc, #236]	; (c070 <MiApp_ProtocolInit+0x18c>)
    bf82:	4798      	blx	r3
    MiMAC_SetAltAddress((uint8_t *)&broadcastAddress, (uint8_t *)&myPANID.Val);
    bf84:	4932      	ldr	r1, [pc, #200]	; (c050 <MiApp_ProtocolInit+0x16c>)
    bf86:	200e      	movs	r0, #14
    bf88:	4468      	add	r0, sp
    bf8a:	4b3a      	ldr	r3, [pc, #232]	; (c074 <MiApp_ProtocolInit+0x190>)
    bf8c:	4798      	blx	r3
    P2PCapacityInfo |= (ConnMode << 4);
    bf8e:	4a3a      	ldr	r2, [pc, #232]	; (c078 <MiApp_ProtocolInit+0x194>)
    bf90:	4b3a      	ldr	r3, [pc, #232]	; (c07c <MiApp_ProtocolInit+0x198>)
    bf92:	781b      	ldrb	r3, [r3, #0]
    bf94:	011b      	lsls	r3, r3, #4
    bf96:	7811      	ldrb	r1, [r2, #0]
    bf98:	430b      	orrs	r3, r1
    bf9a:	7013      	strb	r3, [r2, #0]
    protocolTimer.interval = PROTOCOL_TIMER_INTERVAL;
    bf9c:	4838      	ldr	r0, [pc, #224]	; (c080 <MiApp_ProtocolInit+0x19c>)
    bf9e:	23fa      	movs	r3, #250	; 0xfa
    bfa0:	009b      	lsls	r3, r3, #2
    bfa2:	6083      	str	r3, [r0, #8]
    protocolTimer.mode = SYS_TIMER_PERIODIC_MODE;
    bfa4:	2501      	movs	r5, #1
    bfa6:	7305      	strb	r5, [r0, #12]
    protocolTimer.handler = protocolTimerHandler;
    bfa8:	4b36      	ldr	r3, [pc, #216]	; (c084 <MiApp_ProtocolInit+0x1a0>)
    bfaa:	6103      	str	r3, [r0, #16]
    SYS_TimerStart(&protocolTimer);
    bfac:	4b36      	ldr	r3, [pc, #216]	; (c088 <MiApp_ProtocolInit+0x1a4>)
    bfae:	4798      	blx	r3
    dataTimer.interval = DATA_TIMER_INTERVAL;
    bfb0:	4b36      	ldr	r3, [pc, #216]	; (c08c <MiApp_ProtocolInit+0x1a8>)
    bfb2:	2264      	movs	r2, #100	; 0x64
    bfb4:	609a      	str	r2, [r3, #8]
    dataTimer.mode = SYS_TIMER_PERIODIC_MODE;
    bfb6:	731d      	strb	r5, [r3, #12]
    dataTimer.handler = dataTimerHandler;
    bfb8:	4a35      	ldr	r2, [pc, #212]	; (c090 <MiApp_ProtocolInit+0x1ac>)
    bfba:	611a      	str	r2, [r3, #16]
	miQueueInit(&appAckWaitDataQueue);
    bfbc:	4835      	ldr	r0, [pc, #212]	; (c094 <MiApp_ProtocolInit+0x1b0>)
    bfbe:	4d36      	ldr	r5, [pc, #216]	; (c098 <MiApp_ProtocolInit+0x1b4>)
    bfc0:	47a8      	blx	r5
	miQueueInit(&macAckOnlyFrameQueue);
    bfc2:	4836      	ldr	r0, [pc, #216]	; (c09c <MiApp_ProtocolInit+0x1b8>)
    bfc4:	47a8      	blx	r5
	miQueueInit(&indirectFrameQueue);
    bfc6:	4836      	ldr	r0, [pc, #216]	; (c0a0 <MiApp_ProtocolInit+0x1bc>)
    bfc8:	47a8      	blx	r5
    if (IN_NETWORK_STATE == p2pStarCurrentState)
    bfca:	4b22      	ldr	r3, [pc, #136]	; (c054 <MiApp_ProtocolInit+0x170>)
    bfcc:	781b      	ldrb	r3, [r3, #0]
    bfce:	2b07      	cmp	r3, #7
    bfd0:	d025      	beq.n	c01e <MiApp_ProtocolInit+0x13a>
}
    bfd2:	0020      	movs	r0, r4
    bfd4:	b004      	add	sp, #16
    bfd6:	bc04      	pop	{r2}
    bfd8:	4690      	mov	r8, r2
    bfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!PDS_IsAbleToRestore(MIWI_ALL_MEMORY_MEM_ID) || !PDS_Restore(MIWI_ALL_MEMORY_MEM_ID))
    bfdc:	4831      	ldr	r0, [pc, #196]	; (c0a4 <MiApp_ProtocolInit+0x1c0>)
    bfde:	4b32      	ldr	r3, [pc, #200]	; (c0a8 <MiApp_ProtocolInit+0x1c4>)
    bfe0:	4798      	blx	r3
    bfe2:	2800      	cmp	r0, #0
    bfe4:	d004      	beq.n	bff0 <MiApp_ProtocolInit+0x10c>
    bfe6:	482f      	ldr	r0, [pc, #188]	; (c0a4 <MiApp_ProtocolInit+0x1c0>)
    bfe8:	4b30      	ldr	r3, [pc, #192]	; (c0ac <MiApp_ProtocolInit+0x1c8>)
    bfea:	4798      	blx	r3
    bfec:	2800      	cmp	r0, #0
    bfee:	d101      	bne.n	bff4 <MiApp_ProtocolInit+0x110>
            PDS_InitItems();
    bff0:	4b2f      	ldr	r3, [pc, #188]	; (c0b0 <MiApp_ProtocolInit+0x1cc>)
    bff2:	4798      	blx	r3
    if (myPANID.Val != 0x0000 && myPANID.Val != 0xFFFF)
    bff4:	4b16      	ldr	r3, [pc, #88]	; (c050 <MiApp_ProtocolInit+0x16c>)
    bff6:	881b      	ldrh	r3, [r3, #0]
    bff8:	3b01      	subs	r3, #1
    bffa:	b29b      	uxth	r3, r3
    bffc:	4a2d      	ldr	r2, [pc, #180]	; (c0b4 <MiApp_ProtocolInit+0x1d0>)
    bffe:	4293      	cmp	r3, r2
    c000:	d900      	bls.n	c004 <MiApp_ProtocolInit+0x120>
    c002:	e785      	b.n	bf10 <MiApp_ProtocolInit+0x2c>
        p2pStarCurrentState = IN_NETWORK_STATE;
    c004:	2207      	movs	r2, #7
    c006:	4b13      	ldr	r3, [pc, #76]	; (c054 <MiApp_ProtocolInit+0x170>)
    c008:	701a      	strb	r2, [r3, #0]
        if (NULL != reconnectionCallback)
    c00a:	4b2b      	ldr	r3, [pc, #172]	; (c0b8 <MiApp_ProtocolInit+0x1d4>)
    c00c:	681b      	ldr	r3, [r3, #0]
    c00e:	2b00      	cmp	r3, #0
    c010:	d003      	beq.n	c01a <MiApp_ProtocolInit+0x136>
            reconnectionCallback(SUCCESS);
    c012:	2000      	movs	r0, #0
    c014:	4798      	blx	r3
        initStatus = RECONNECTED;
    c016:	240f      	movs	r4, #15
    c018:	e79a      	b.n	bf50 <MiApp_ProtocolInit+0x6c>
    c01a:	240f      	movs	r4, #15
    c01c:	e798      	b.n	bf50 <MiApp_ProtocolInit+0x6c>
        if (PAN_COORD == role)
    c01e:	4b27      	ldr	r3, [pc, #156]	; (c0bc <MiApp_ProtocolInit+0x1d8>)
    c020:	781b      	ldrb	r3, [r3, #0]
    c022:	2b01      	cmp	r3, #1
    c024:	d006      	beq.n	c034 <MiApp_ProtocolInit+0x150>
    linkStatusTimeInterval = LINK_STATUS_TIMEOUT;
    c026:	2214      	movs	r2, #20
    c028:	4b25      	ldr	r3, [pc, #148]	; (c0c0 <MiApp_ProtocolInit+0x1dc>)
    c02a:	801a      	strh	r2, [r3, #0]
	connectionTbLostCount = 0;	//clear it when reconnection to PAN
    c02c:	2200      	movs	r2, #0
    c02e:	4b25      	ldr	r3, [pc, #148]	; (c0c4 <MiApp_ProtocolInit+0x1e0>)
    c030:	701a      	strb	r2, [r3, #0]
    c032:	e7ce      	b.n	bfd2 <MiApp_ProtocolInit+0xee>
    inActiveDeviceCheckTimeInterval = FIND_INACTIVE_DEVICE_TIMEOUT;
    c034:	223c      	movs	r2, #60	; 0x3c
    c036:	4b24      	ldr	r3, [pc, #144]	; (c0c8 <MiApp_ProtocolInit+0x1e4>)
    c038:	801a      	strh	r2, [r3, #0]
    sharePeerDevInfoTimeInterval = SHARE_PEER_DEVICE_INFO_TIMEOUT;
    c03a:	3a2d      	subs	r2, #45	; 0x2d
    c03c:	4b23      	ldr	r3, [pc, #140]	; (c0cc <MiApp_ProtocolInit+0x1e8>)
    c03e:	801a      	strh	r2, [r3, #0]
    c040:	e7c7      	b.n	bfd2 <MiApp_ProtocolInit+0xee>
    c042:	46c0      	nop			; (mov r8, r8)
    c044:	200020a8 	.word	0x200020a8
    c048:	20002034 	.word	0x20002034
    c04c:	20002038 	.word	0x20002038
    c050:	20002044 	.word	0x20002044
    c054:	20000418 	.word	0x20000418
    c058:	00004321 	.word	0x00004321
    c05c:	00011e49 	.word	0x00011e49
    c060:	20002048 	.word	0x20002048
    c064:	20000010 	.word	0x20000010
    c068:	0000af0d 	.word	0x0000af0d
    c06c:	2000000d 	.word	0x2000000d
    c070:	0000beb5 	.word	0x0000beb5
    c074:	0000aa91 	.word	0x0000aa91
    c078:	2000000c 	.word	0x2000000c
    c07c:	2000000b 	.word	0x2000000b
    c080:	20000420 	.word	0x20000420
    c084:	0000c711 	.word	0x0000c711
    c088:	0000d7d5 	.word	0x0000d7d5
    c08c:	200003f8 	.word	0x200003f8
    c090:	0000be35 	.word	0x0000be35
    c094:	200020ac 	.word	0x200020ac
    c098:	0000d621 	.word	0x0000d621
    c09c:	20002008 	.word	0x20002008
    c0a0:	20002014 	.word	0x20002014
    c0a4:	00004001 	.word	0x00004001
    c0a8:	0000a821 	.word	0x0000a821
    c0ac:	0000a58d 	.word	0x0000a58d
    c0b0:	0000a88d 	.word	0x0000a88d
    c0b4:	0000fffd 	.word	0x0000fffd
    c0b8:	20002040 	.word	0x20002040
    c0bc:	20002124 	.word	0x20002124
    c0c0:	20000416 	.word	0x20000416
    c0c4:	200003f3 	.word	0x200003f3
    c0c8:	2000040e 	.word	0x2000040e
    c0cc:	20000434 	.word	0x20000434

0000c0d0 <MiApp_ConnectionMode>:
{
    c0d0:	b510      	push	{r4, lr}
    if( Mode > 3 )
    c0d2:	2803      	cmp	r0, #3
    c0d4:	d900      	bls.n	c0d8 <MiApp_ConnectionMode+0x8>
}
    c0d6:	bd10      	pop	{r4, pc}
    ConnMode = Mode;
    c0d8:	4b06      	ldr	r3, [pc, #24]	; (c0f4 <MiApp_ConnectionMode+0x24>)
    c0da:	7018      	strb	r0, [r3, #0]
    P2PCapacityInfo = (P2PCapacityInfo & 0x0F) | (ConnMode << 4);
    c0dc:	4a06      	ldr	r2, [pc, #24]	; (c0f8 <MiApp_ConnectionMode+0x28>)
    c0de:	7811      	ldrb	r1, [r2, #0]
    c0e0:	230f      	movs	r3, #15
    c0e2:	400b      	ands	r3, r1
    c0e4:	0100      	lsls	r0, r0, #4
    c0e6:	4318      	orrs	r0, r3
    c0e8:	7010      	strb	r0, [r2, #0]
        PDS_Store(PDS_CONNECTION_MODE_ID);
    c0ea:	2005      	movs	r0, #5
    c0ec:	4b03      	ldr	r3, [pc, #12]	; (c0fc <MiApp_ConnectionMode+0x2c>)
    c0ee:	4798      	blx	r3
    c0f0:	e7f1      	b.n	c0d6 <MiApp_ConnectionMode+0x6>
    c0f2:	46c0      	nop			; (mov r8, r8)
    c0f4:	2000000b 	.word	0x2000000b
    c0f8:	2000000c 	.word	0x2000000c
    c0fc:	0000a66d 	.word	0x0000a66d

0000c100 <MiApp_SubscribeDataIndicationCallback>:
    if (NULL != callback)
    c100:	2800      	cmp	r0, #0
    c102:	d003      	beq.n	c10c <MiApp_SubscribeDataIndicationCallback+0xc>
	    pktRxcallback = callback;
    c104:	4b02      	ldr	r3, [pc, #8]	; (c110 <MiApp_SubscribeDataIndicationCallback+0x10>)
    c106:	6018      	str	r0, [r3, #0]
	    return true;
    c108:	2001      	movs	r0, #1
}
    c10a:	4770      	bx	lr
    return false;
    c10c:	2000      	movs	r0, #0
    c10e:	e7fc      	b.n	c10a <MiApp_SubscribeDataIndicationCallback+0xa>
    c110:	2000041c 	.word	0x2000041c

0000c114 <Total_Connections>:
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].Address[0] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[1] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[2] != 0x00)
    c114:	4b0a      	ldr	r3, [pc, #40]	; (c140 <Total_Connections+0x2c>)
    c116:	681b      	ldr	r3, [r3, #0]
    c118:	681b      	ldr	r3, [r3, #0]
    c11a:	0019      	movs	r1, r3
    c11c:	3141      	adds	r1, #65	; 0x41
    c11e:	31ff      	adds	r1, #255	; 0xff
    uint8_t count=0 , i;
    c120:	2000      	movs	r0, #0
    c122:	e004      	b.n	c12e <Total_Connections+0x1a>
            count++;
    c124:	3001      	adds	r0, #1
    c126:	b2c0      	uxtb	r0, r0
    c128:	3310      	adds	r3, #16
    for (i=0;i<CONNECTION_SIZE;i++)
    c12a:	428b      	cmp	r3, r1
    c12c:	d006      	beq.n	c13c <Total_Connections+0x28>
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].Address[0] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[1] != 0x00 || miwiDefaultRomOrRamParams->ConnectionTable[i].Address[2] != 0x00)
    c12e:	889a      	ldrh	r2, [r3, #4]
    c130:	2a00      	cmp	r2, #0
    c132:	d1f7      	bne.n	c124 <Total_Connections+0x10>
    c134:	799a      	ldrb	r2, [r3, #6]
    c136:	2a00      	cmp	r2, #0
    c138:	d0f6      	beq.n	c128 <Total_Connections+0x14>
    c13a:	e7f3      	b.n	c124 <Total_Connections+0x10>
}
    c13c:	4770      	bx	lr
    c13e:	46c0      	nop			; (mov r8, r8)
    c140:	20002034 	.word	0x20002034

0000c144 <isSameAddress>:
{
    c144:	b510      	push	{r4, lr}
        if( Address1[i] != Address2[i] )
    c146:	7802      	ldrb	r2, [r0, #0]
    c148:	780b      	ldrb	r3, [r1, #0]
    c14a:	429a      	cmp	r2, r3
    c14c:	d109      	bne.n	c162 <isSameAddress+0x1e>
    c14e:	2301      	movs	r3, #1
    c150:	5cc4      	ldrb	r4, [r0, r3]
    c152:	5cca      	ldrb	r2, [r1, r3]
    c154:	4294      	cmp	r4, r2
    c156:	d106      	bne.n	c166 <isSameAddress+0x22>
    c158:	3301      	adds	r3, #1
    for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    c15a:	2b08      	cmp	r3, #8
    c15c:	d1f8      	bne.n	c150 <isSameAddress+0xc>
    return true;
    c15e:	2001      	movs	r0, #1
}
    c160:	bd10      	pop	{r4, pc}
            return false;
    c162:	2000      	movs	r0, #0
    c164:	e7fc      	b.n	c160 <isSameAddress+0x1c>
    c166:	2000      	movs	r0, #0
    c168:	e7fa      	b.n	c160 <isSameAddress+0x1c>
    c16a:	Address 0x0000c16a is out of bounds.


0000c16c <AddConnection>:
{
    c16c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c16e:	b083      	sub	sp, #12
    c170:	9001      	str	r0, [sp, #4]
        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c172:	4b2f      	ldr	r3, [pc, #188]	; (c230 <AddConnection+0xc4>)
    c174:	681f      	ldr	r7, [r3, #0]
            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c176:	4b2f      	ldr	r3, [pc, #188]	; (c234 <AddConnection+0xc8>)
    c178:	685b      	ldr	r3, [r3, #4]
    c17a:	9300      	str	r3, [sp, #0]
    c17c:	683d      	ldr	r5, [r7, #0]
    uint8_t connectionSlot = 0xFF;
    c17e:	26ff      	movs	r6, #255	; 0xff
    for(i = 0; i < CONNECTION_SIZE; i++)
    c180:	2400      	movs	r4, #0
    c182:	e00a      	b.n	c19a <AddConnection+0x2e>
            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    c184:	1d29      	adds	r1, r5, #4
    c186:	9800      	ldr	r0, [sp, #0]
    c188:	4b2b      	ldr	r3, [pc, #172]	; (c238 <AddConnection+0xcc>)
    c18a:	4798      	blx	r3
    c18c:	2800      	cmp	r0, #0
    c18e:	d147      	bne.n	c220 <AddConnection+0xb4>
    for(i = 0; i < CONNECTION_SIZE; i++)
    c190:	3401      	adds	r4, #1
    c192:	b2e4      	uxtb	r4, r4
    c194:	3510      	adds	r5, #16
    c196:	2c14      	cmp	r4, #20
    c198:	d006      	beq.n	c1a8 <AddConnection+0x3c>
        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c19a:	7b2b      	ldrb	r3, [r5, #12]
    c19c:	2b7f      	cmp	r3, #127	; 0x7f
    c19e:	d8f1      	bhi.n	c184 <AddConnection+0x18>
        else if( connectionSlot == 0xFF )
    c1a0:	2eff      	cmp	r6, #255	; 0xff
    c1a2:	d1f5      	bne.n	c190 <AddConnection+0x24>
    c1a4:	0026      	movs	r6, r4
    c1a6:	e7f3      	b.n	c190 <AddConnection+0x24>
    uint8_t status = STATUS_SUCCESS;
    c1a8:	2400      	movs	r4, #0
    if( connectionSlot == 0xFF )
    c1aa:	2eff      	cmp	r6, #255	; 0xff
    c1ac:	d03b      	beq.n	c226 <AddConnection+0xba>
        if( ConnMode >= ENABLE_PREV_CONN )
    c1ae:	4b23      	ldr	r3, [pc, #140]	; (c23c <AddConnection+0xd0>)
    c1b0:	781b      	ldrb	r3, [r3, #0]
    c1b2:	2b00      	cmp	r3, #0
    c1b4:	d138      	bne.n	c228 <AddConnection+0xbc>
        MyindexinPC = connectionSlot;
    c1b6:	4b22      	ldr	r3, [pc, #136]	; (c240 <AddConnection+0xd4>)
    c1b8:	701e      	strb	r6, [r3, #0]
            miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].Address[i] = rxMessage.SourceAddress[i];
    c1ba:	0130      	lsls	r0, r6, #4
    c1bc:	2200      	movs	r2, #0
    c1be:	4d1d      	ldr	r5, [pc, #116]	; (c234 <AddConnection+0xc8>)
    c1c0:	686b      	ldr	r3, [r5, #4]
    c1c2:	5c99      	ldrb	r1, [r3, r2]
    c1c4:	683b      	ldr	r3, [r7, #0]
    c1c6:	181b      	adds	r3, r3, r0
    c1c8:	189b      	adds	r3, r3, r2
    c1ca:	7119      	strb	r1, [r3, #4]
    c1cc:	3201      	adds	r2, #1
        for(i = 0; i < 8; i++)
    c1ce:	2a08      	cmp	r2, #8
    c1d0:	d1f6      	bne.n	c1c0 <AddConnection+0x54>
        miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].status.bits.isValid = 1;
    c1d2:	683b      	ldr	r3, [r7, #0]
    c1d4:	181b      	adds	r3, r3, r0
    c1d6:	7b19      	ldrb	r1, [r3, #12]
    c1d8:	3a88      	subs	r2, #136	; 0x88
    c1da:	430a      	orrs	r2, r1
    c1dc:	731a      	strb	r2, [r3, #12]
        miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].status.bits.RXOnWhenIdle = (capacityInfo & 0x01);
    c1de:	683b      	ldr	r3, [r7, #0]
    c1e0:	181b      	adds	r3, r3, r0
    c1e2:	2101      	movs	r1, #1
    c1e4:	2201      	movs	r2, #1
    c1e6:	9d01      	ldr	r5, [sp, #4]
    c1e8:	402a      	ands	r2, r5
    c1ea:	7b1d      	ldrb	r5, [r3, #12]
    c1ec:	438d      	bics	r5, r1
    c1ee:	432a      	orrs	r2, r5
    c1f0:	731a      	strb	r2, [r3, #12]
		miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].link_status = 1;		//WSGA-13101, modified for PAN
    c1f2:	683b      	ldr	r3, [r7, #0]
    c1f4:	181b      	adds	r3, r3, r0
    c1f6:	7399      	strb	r1, [r3, #14]
                miwiDefaultRomOrRamParams->ConnectionTable[connectionSlot].PeerInfo[i] = rxMessage.Payload[3+i];
    c1f8:	4b0e      	ldr	r3, [pc, #56]	; (c234 <AddConnection+0xc8>)
    c1fa:	689b      	ldr	r3, [r3, #8]
    c1fc:	78da      	ldrb	r2, [r3, #3]
    c1fe:	683b      	ldr	r3, [r7, #0]
    c200:	1818      	adds	r0, r3, r0
    c202:	7342      	strb	r2, [r0, #13]
            IncomingFrameCounter[connectionSlot].Val = 0;
    c204:	00b2      	lsls	r2, r6, #2
    c206:	2100      	movs	r1, #0
    c208:	4b0e      	ldr	r3, [pc, #56]	; (c244 <AddConnection+0xd8>)
    c20a:	50d1      	str	r1, [r2, r3]
        LatestConnection = connectionSlot;
    c20c:	4b0e      	ldr	r3, [pc, #56]	; (c248 <AddConnection+0xdc>)
    c20e:	701e      	strb	r6, [r3, #0]
    conn_size = Total_Connections();
    c210:	4b0e      	ldr	r3, [pc, #56]	; (c24c <AddConnection+0xe0>)
    c212:	4798      	blx	r3
    c214:	4b0e      	ldr	r3, [pc, #56]	; (c250 <AddConnection+0xe4>)
    c216:	7018      	strb	r0, [r3, #0]
    PDS_Store(PDS_EDC_ID);
    c218:	2007      	movs	r0, #7
    c21a:	4b0e      	ldr	r3, [pc, #56]	; (c254 <AddConnection+0xe8>)
    c21c:	4798      	blx	r3
    return status;
    c21e:	e003      	b.n	c228 <AddConnection+0xbc>
    c220:	0026      	movs	r6, r4
                status = STATUS_EXISTS;
    c222:	2401      	movs	r4, #1
    c224:	e7c1      	b.n	c1aa <AddConnection+0x3e>
        return STATUS_NOT_ENOUGH_SPACE;
    c226:	24f1      	movs	r4, #241	; 0xf1
}
    c228:	0020      	movs	r0, r4
    c22a:	b003      	add	sp, #12
    c22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c22e:	46c0      	nop			; (mov r8, r8)
    c230:	20002034 	.word	0x20002034
    c234:	2000213c 	.word	0x2000213c
    c238:	0000c145 	.word	0x0000c145
    c23c:	2000000b 	.word	0x2000000b
    c240:	200020a4 	.word	0x200020a4
    c244:	20002048 	.word	0x20002048
    c248:	20002004 	.word	0x20002004
    c24c:	0000c115 	.word	0x0000c115
    c250:	200003f2 	.word	0x200003f2
    c254:	0000a66d 	.word	0x0000a66d

0000c258 <frameTransmit>:
{
    c258:	b5f0      	push	{r4, r5, r6, r7, lr}
    c25a:	46de      	mov	lr, fp
    c25c:	4657      	mov	r7, sl
    c25e:	464e      	mov	r6, r9
    c260:	4645      	mov	r5, r8
    c262:	b5e0      	push	{r5, r6, r7, lr}
    c264:	b083      	sub	sp, #12
    c266:	0005      	movs	r5, r0
    c268:	4668      	mov	r0, sp
    c26a:	80c1      	strh	r1, [r0, #6]
    c26c:	0017      	movs	r7, r2
    c26e:	469a      	mov	sl, r3
    c270:	ab0c      	add	r3, sp, #48	; 0x30
    c272:	781e      	ldrb	r6, [r3, #0]
    c274:	ab0d      	add	r3, sp, #52	; 0x34
    c276:	781b      	ldrb	r3, [r3, #0]
    c278:	4698      	mov	r8, r3
    c27a:	ab0f      	add	r3, sp, #60	; 0x3c
    c27c:	781b      	ldrb	r3, [r3, #0]
    c27e:	4699      	mov	r9, r3
    c280:	ab10      	add	r3, sp, #64	; 0x40
    c282:	781b      	ldrb	r3, [r3, #0]
    c284:	469b      	mov	fp, r3
    txFramePtr = (TxFrame_t *) MiMem_Alloc(sizeof(TxFrame_t));
    c286:	2028      	movs	r0, #40	; 0x28
    c288:	4b30      	ldr	r3, [pc, #192]	; (c34c <frameTransmit+0xf4>)
    c28a:	4798      	blx	r3
    c28c:	1e04      	subs	r4, r0, #0
    if (NULL == txFramePtr)
    c28e:	d05b      	beq.n	c348 <frameTransmit+0xf0>
    tParam->flags.bits.packetType = (isCommand) ? PACKET_TYPE_COMMAND : PACKET_TYPE_DATA;
    c290:	2303      	movs	r3, #3
    c292:	4652      	mov	r2, sl
    c294:	4013      	ands	r3, r2
    c296:	7603      	strb	r3, [r0, #24]
    tParam->flags.bits.ackReq = (Broadcast) ? 0 : ackReq;
    c298:	2300      	movs	r3, #0
    c29a:	2d00      	cmp	r5, #0
    c29c:	d100      	bne.n	c2a0 <frameTransmit+0x48>
    c29e:	465b      	mov	r3, fp
    c2a0:	2201      	movs	r2, #1
    c2a2:	4013      	ands	r3, r2
    c2a4:	015b      	lsls	r3, r3, #5
    c2a6:	469c      	mov	ip, r3
    c2a8:	7e23      	ldrb	r3, [r4, #24]
    c2aa:	2120      	movs	r1, #32
    c2ac:	468a      	mov	sl, r1
    c2ae:	438b      	bics	r3, r1
    tParam->flags.bits.broadcast = Broadcast;
    c2b0:	0010      	movs	r0, r2
    c2b2:	4028      	ands	r0, r5
    c2b4:	0080      	lsls	r0, r0, #2
    c2b6:	4661      	mov	r1, ip
    c2b8:	430b      	orrs	r3, r1
    c2ba:	2104      	movs	r1, #4
    c2bc:	438b      	bics	r3, r1
    tParam->flags.bits.secEn = SecurityEnabled;
    c2be:	4016      	ands	r6, r2
    c2c0:	00f6      	lsls	r6, r6, #3
    c2c2:	4303      	orrs	r3, r0
    c2c4:	2008      	movs	r0, #8
    c2c6:	4383      	bics	r3, r0
        tParam->altSrcAddr = 0;
    c2c8:	2100      	movs	r1, #0
    c2ca:	3019      	adds	r0, #25
    c2cc:	5421      	strb	r1, [r4, r0]
        tParam->altDestAddr = (Broadcast) ? true : false;
    c2ce:	4651      	mov	r1, sl
    c2d0:	5465      	strb	r5, [r4, r1]
        tParam->flags.bits.destPrsnt = (Broadcast) ? 0:1;
    c2d2:	2101      	movs	r1, #1
    c2d4:	404d      	eors	r5, r1
    c2d6:	402a      	ands	r2, r5
    c2d8:	0192      	lsls	r2, r2, #6
    c2da:	431e      	orrs	r6, r3
    c2dc:	2340      	movs	r3, #64	; 0x40
    c2de:	439e      	bics	r6, r3
        tParam->flags.bits.sourcePrsnt = 1;
    c2e0:	4332      	orrs	r2, r6
    c2e2:	2680      	movs	r6, #128	; 0x80
    c2e4:	4276      	negs	r6, r6
    c2e6:	4332      	orrs	r2, r6
    c2e8:	7622      	strb	r2, [r4, #24]
    tParam->DestAddress = DestinationAddress;
    c2ea:	61e7      	str	r7, [r4, #28]
        tParam->DestPANID.Val = DestinationPANID.Val;
    c2ec:	466b      	mov	r3, sp
    c2ee:	88db      	ldrh	r3, [r3, #6]
    c2f0:	8463      	strh	r3, [r4, #34]	; 0x22
    if (NULL != DestinationAddress)
    c2f2:	2f00      	cmp	r7, #0
    c2f4:	d008      	beq.n	c308 <frameTransmit+0xb0>
        if (false == tParam->flags.bits.broadcast)
    c2f6:	b2d3      	uxtb	r3, r2
    c2f8:	075b      	lsls	r3, r3, #29
    c2fa:	d41e      	bmi.n	c33a <frameTransmit+0xe2>
            memcpy(&(txFramePtr->txFrameEntry.frameDstAddr), DestinationAddress, LONG_ADDR_LEN);
    c2fc:	0020      	movs	r0, r4
    c2fe:	3008      	adds	r0, #8
    c300:	2208      	movs	r2, #8
    c302:	0039      	movs	r1, r7
    c304:	4b12      	ldr	r3, [pc, #72]	; (c350 <frameTransmit+0xf8>)
    c306:	4798      	blx	r3
    txFramePtr->txFrameEntry.frame = msgPtr;
    c308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c30a:	6163      	str	r3, [r4, #20]
    tParam->DestAddress = (uint8_t*)&(txFramePtr->txFrameEntry.frameDstAddr);
    c30c:	0023      	movs	r3, r4
    c30e:	3308      	adds	r3, #8
    c310:	61e3      	str	r3, [r4, #28]
    txFramePtr->txFrameEntry.frameConfCallback = ConfCallback;
    c312:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c314:	6123      	str	r3, [r4, #16]
    txFramePtr->txFrameEntry.frameHandle = msghandle;
    c316:	2325      	movs	r3, #37	; 0x25
    c318:	464a      	mov	r2, r9
    c31a:	54e2      	strb	r2, [r4, r3]
    txFramePtr->txFrameEntry.frameLength = msgLen;
    c31c:	3b01      	subs	r3, #1
    c31e:	4642      	mov	r2, r8
    c320:	54e2      	strb	r2, [r4, r3]
    miQueueAppend(&frameTxQueue, (miQueueBuffer_t *)txFramePtr);
    c322:	0021      	movs	r1, r4
    c324:	480b      	ldr	r0, [pc, #44]	; (c354 <frameTransmit+0xfc>)
    c326:	4b0c      	ldr	r3, [pc, #48]	; (c358 <frameTransmit+0x100>)
    c328:	4798      	blx	r3
    return true;
    c32a:	2001      	movs	r0, #1
}
    c32c:	b003      	add	sp, #12
    c32e:	bc3c      	pop	{r2, r3, r4, r5}
    c330:	4690      	mov	r8, r2
    c332:	4699      	mov	r9, r3
    c334:	46a2      	mov	sl, r4
    c336:	46ab      	mov	fp, r5
    c338:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(&(txFramePtr->txFrameEntry.frameDstAddr), DestinationAddress, SHORT_ADDR_LEN);
    c33a:	0020      	movs	r0, r4
    c33c:	3008      	adds	r0, #8
    c33e:	2202      	movs	r2, #2
    c340:	0039      	movs	r1, r7
    c342:	4b03      	ldr	r3, [pc, #12]	; (c350 <frameTransmit+0xf8>)
    c344:	4798      	blx	r3
    c346:	e7df      	b.n	c308 <frameTransmit+0xb0>
        return false;
    c348:	2000      	movs	r0, #0
    c34a:	e7ef      	b.n	c32c <frameTransmit+0xd4>
    c34c:	0000d431 	.word	0x0000d431
    c350:	00011e37 	.word	0x00011e37
    c354:	20002098 	.word	0x20002098
    c358:	0000d62d 	.word	0x0000d62d

0000c35c <sendConnectionRequest>:
{
    c35c:	b510      	push	{r4, lr}
    c35e:	b086      	sub	sp, #24
    if ((gEstConnectionInfo.connectionRetries > 0) &&  (ESTABLISHING_NETWORK ==  p2pStarCurrentState))
    c360:	4b26      	ldr	r3, [pc, #152]	; (c3fc <sendConnectionRequest+0xa0>)
    c362:	78db      	ldrb	r3, [r3, #3]
    c364:	2b00      	cmp	r3, #0
    c366:	d111      	bne.n	c38c <sendConnectionRequest+0x30>
        if ((gEstConnectionInfo.status == ALREADY_EXISTS) || (gEstConnectionInfo.status == SUCCESS))
    c368:	4b24      	ldr	r3, [pc, #144]	; (c3fc <sendConnectionRequest+0xa0>)
    c36a:	7858      	ldrb	r0, [r3, #1]
    c36c:	2806      	cmp	r0, #6
    c36e:	d001      	beq.n	c374 <sendConnectionRequest+0x18>
    c370:	2800      	cmp	r0, #0
    c372:	d136      	bne.n	c3e2 <sendConnectionRequest+0x86>
            p2pStarCurrentState = IN_NETWORK_STATE;
    c374:	2207      	movs	r2, #7
    c376:	4b22      	ldr	r3, [pc, #136]	; (c400 <sendConnectionRequest+0xa4>)
    c378:	701a      	strb	r2, [r3, #0]
            gEstConnectionInfo.confCallback(gEstConnectionInfo.status);
    c37a:	4b20      	ldr	r3, [pc, #128]	; (c3fc <sendConnectionRequest+0xa0>)
    c37c:	68db      	ldr	r3, [r3, #12]
    c37e:	4798      	blx	r3
        gEstConnectionInfo.confCallback = NULL;
    c380:	2200      	movs	r2, #0
    c382:	4b1e      	ldr	r3, [pc, #120]	; (c3fc <sendConnectionRequest+0xa0>)
    c384:	60da      	str	r2, [r3, #12]
        return TIMER_EXPIRED;
    c386:	2004      	movs	r0, #4
}
    c388:	b006      	add	sp, #24
    c38a:	bd10      	pop	{r4, pc}
    if ((gEstConnectionInfo.connectionRetries > 0) &&  (ESTABLISHING_NETWORK ==  p2pStarCurrentState))
    c38c:	4b1c      	ldr	r3, [pc, #112]	; (c400 <sendConnectionRequest+0xa4>)
    c38e:	781b      	ldrb	r3, [r3, #0]
    c390:	2b04      	cmp	r3, #4
    c392:	d1e9      	bne.n	c368 <sendConnectionRequest+0xc>
        dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REQUEST);
    c394:	2005      	movs	r0, #5
    c396:	4b1b      	ldr	r3, [pc, #108]	; (c404 <sendConnectionRequest+0xa8>)
    c398:	4798      	blx	r3
        if (NULL == dataPtr)
    c39a:	2800      	cmp	r0, #0
    c39c:	d029      	beq.n	c3f2 <sendConnectionRequest+0x96>
        dataPtr[dataLen++] = CMD_P2P_CONNECTION_REQUEST;
    c39e:	2381      	movs	r3, #129	; 0x81
    c3a0:	7003      	strb	r3, [r0, #0]
        dataPtr[dataLen++] = currentChannel;
    c3a2:	4b19      	ldr	r3, [pc, #100]	; (c408 <sendConnectionRequest+0xac>)
    c3a4:	781b      	ldrb	r3, [r3, #0]
    c3a6:	7043      	strb	r3, [r0, #1]
        dataPtr[dataLen++] = P2PCapacityInfo;
    c3a8:	4b18      	ldr	r3, [pc, #96]	; (c40c <sendConnectionRequest+0xb0>)
    c3aa:	781b      	ldrb	r3, [r3, #0]
    c3ac:	7083      	strb	r3, [r0, #2]
            dataPtr[dataLen++] = miwiDefaultRomOrRamParams->AdditionalNodeID[i];
    c3ae:	4b18      	ldr	r3, [pc, #96]	; (c410 <sendConnectionRequest+0xb4>)
    c3b0:	681b      	ldr	r3, [r3, #0]
    c3b2:	689b      	ldr	r3, [r3, #8]
    c3b4:	781b      	ldrb	r3, [r3, #0]
    c3b6:	70c3      	strb	r3, [r0, #3]
        if(frameTransmit(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, connReqConfCallback))
    c3b8:	4b16      	ldr	r3, [pc, #88]	; (c414 <sendConnectionRequest+0xb8>)
    c3ba:	8819      	ldrh	r1, [r3, #0]
    c3bc:	4b16      	ldr	r3, [pc, #88]	; (c418 <sendConnectionRequest+0xbc>)
    c3be:	9305      	str	r3, [sp, #20]
    c3c0:	2301      	movs	r3, #1
    c3c2:	9304      	str	r3, [sp, #16]
    c3c4:	2300      	movs	r3, #0
    c3c6:	9303      	str	r3, [sp, #12]
    c3c8:	9002      	str	r0, [sp, #8]
    c3ca:	2204      	movs	r2, #4
    c3cc:	9201      	str	r2, [sp, #4]
    c3ce:	9300      	str	r3, [sp, #0]
    c3d0:	3301      	adds	r3, #1
    c3d2:	2200      	movs	r2, #0
    c3d4:	2001      	movs	r0, #1
    c3d6:	4c11      	ldr	r4, [pc, #68]	; (c41c <sendConnectionRequest+0xc0>)
    c3d8:	47a0      	blx	r4
    c3da:	2800      	cmp	r0, #0
    c3dc:	d10b      	bne.n	c3f6 <sendConnectionRequest+0x9a>
            return MEMORY_UNAVAILABLE;
    c3de:	300a      	adds	r0, #10
    c3e0:	e7d2      	b.n	c388 <sendConnectionRequest+0x2c>
            p2pStarCurrentState = gEstConnectionInfo.backupState;
    c3e2:	4b06      	ldr	r3, [pc, #24]	; (c3fc <sendConnectionRequest+0xa0>)
    c3e4:	7899      	ldrb	r1, [r3, #2]
    c3e6:	4a06      	ldr	r2, [pc, #24]	; (c400 <sendConnectionRequest+0xa4>)
    c3e8:	7011      	strb	r1, [r2, #0]
            gEstConnectionInfo.confCallback(FAILURE);
    c3ea:	68db      	ldr	r3, [r3, #12]
    c3ec:	2001      	movs	r0, #1
    c3ee:	4798      	blx	r3
    c3f0:	e7c6      	b.n	c380 <sendConnectionRequest+0x24>
          return MEMORY_UNAVAILABLE;
    c3f2:	200a      	movs	r0, #10
    c3f4:	e7c8      	b.n	c388 <sendConnectionRequest+0x2c>
            return SUCCESS;
    c3f6:	2000      	movs	r0, #0
    c3f8:	e7c6      	b.n	c388 <sendConnectionRequest+0x2c>
    c3fa:	46c0      	nop			; (mov r8, r8)
    c3fc:	200020b8 	.word	0x200020b8
    c400:	20000418 	.word	0x20000418
    c404:	0000d431 	.word	0x0000d431
    c408:	2000000d 	.word	0x2000000d
    c40c:	2000000c 	.word	0x2000000c
    c410:	20002034 	.word	0x20002034
    c414:	20002044 	.word	0x20002044
    c418:	0000c421 	.word	0x0000c421
    c41c:	0000c259 	.word	0x0000c259

0000c420 <connReqConfCallback>:
{
    c420:	b510      	push	{r4, lr}
    c422:	000c      	movs	r4, r1
    MiMem_Free(msgPointer);
    c424:	0010      	movs	r0, r2
    c426:	4b07      	ldr	r3, [pc, #28]	; (c444 <connReqConfCallback+0x24>)
    c428:	4798      	blx	r3
    --gEstConnectionInfo.connectionRetries;
    c42a:	4a07      	ldr	r2, [pc, #28]	; (c448 <connReqConfCallback+0x28>)
    c42c:	78d3      	ldrb	r3, [r2, #3]
    c42e:	3b01      	subs	r3, #1
    c430:	70d3      	strb	r3, [r2, #3]
    if (SUCCESS == status)
    c432:	2c00      	cmp	r4, #0
    c434:	d103      	bne.n	c43e <connReqConfCallback+0x1e>
        connectionTimeInterval = CONNECTION_INTERVAL;
    c436:	2202      	movs	r2, #2
    c438:	4b04      	ldr	r3, [pc, #16]	; (c44c <connReqConfCallback+0x2c>)
    c43a:	801a      	strh	r2, [r3, #0]
}
    c43c:	bd10      	pop	{r4, pc}
        sendConnectionRequest();
    c43e:	4b04      	ldr	r3, [pc, #16]	; (c450 <connReqConfCallback+0x30>)
    c440:	4798      	blx	r3
}
    c442:	e7fb      	b.n	c43c <connReqConfCallback+0x1c>
    c444:	0000d4ed 	.word	0x0000d4ed
    c448:	200020b8 	.word	0x200020b8
    c44c:	200003f4 	.word	0x200003f4
    c450:	0000c35d 	.word	0x0000c35d

0000c454 <MiApp_EstablishConnection>:
{
    c454:	b570      	push	{r4, r5, r6, lr}
    c456:	b082      	sub	sp, #8
    c458:	0016      	movs	r6, r2
    c45a:	466b      	mov	r3, sp
    c45c:	71d8      	strb	r0, [r3, #7]
    if (p2pStarCurrentState == INITIAL_STATE)
    c45e:	4b11      	ldr	r3, [pc, #68]	; (c4a4 <MiApp_EstablishConnection+0x50>)
    c460:	781d      	ldrb	r5, [r3, #0]
        return 0;
    c462:	2000      	movs	r0, #0
    if (p2pStarCurrentState == INITIAL_STATE)
    c464:	2d00      	cmp	r5, #0
    c466:	d101      	bne.n	c46c <MiApp_EstablishConnection+0x18>
}
    c468:	b002      	add	sp, #8
    c46a:	bd70      	pop	{r4, r5, r6, pc}
    ConnMode = ENABLE_ALL_CONN;
    c46c:	2200      	movs	r2, #0
    c46e:	4b0e      	ldr	r3, [pc, #56]	; (c4a8 <MiApp_EstablishConnection+0x54>)
    c470:	701a      	strb	r2, [r3, #0]
    gEstConnectionInfo.confCallback = ConfCallback;
    c472:	4c0e      	ldr	r4, [pc, #56]	; (c4ac <MiApp_EstablishConnection+0x58>)
    c474:	9b06      	ldr	r3, [sp, #24]
    c476:	60e3      	str	r3, [r4, #12]
    gEstConnectionInfo.addrLen = addr_len;
    c478:	7021      	strb	r1, [r4, #0]
    memcpy(gEstConnectionInfo.address, addr, addr_len);
    c47a:	1d20      	adds	r0, r4, #4
    c47c:	000a      	movs	r2, r1
    c47e:	0031      	movs	r1, r6
    c480:	4b0b      	ldr	r3, [pc, #44]	; (c4b0 <MiApp_EstablishConnection+0x5c>)
    c482:	4798      	blx	r3
    gEstConnectionInfo.backupState = p2pStarCurrentState;
    c484:	70a5      	strb	r5, [r4, #2]
	gEstConnectionInfo.status = SCAN_NO_BEACON;
    c486:	2308      	movs	r3, #8
    c488:	7063      	strb	r3, [r4, #1]
    gEstConnectionInfo.connectionRetries = CONNECTION_RETRY_TIMES;
    c48a:	3b03      	subs	r3, #3
    c48c:	70e3      	strb	r3, [r4, #3]
    p2pStarCurrentState = ESTABLISHING_NETWORK;
    c48e:	2204      	movs	r2, #4
    c490:	4b04      	ldr	r3, [pc, #16]	; (c4a4 <MiApp_EstablishConnection+0x50>)
    c492:	701a      	strb	r2, [r3, #0]
    MiApp_Set(CHANNEL, &Channel);
    c494:	466b      	mov	r3, sp
    c496:	1dd9      	adds	r1, r3, #7
    c498:	2000      	movs	r0, #0
    c49a:	4b06      	ldr	r3, [pc, #24]	; (c4b4 <MiApp_EstablishConnection+0x60>)
    c49c:	4798      	blx	r3
    return sendConnectionRequest();
    c49e:	4b06      	ldr	r3, [pc, #24]	; (c4b8 <MiApp_EstablishConnection+0x64>)
    c4a0:	4798      	blx	r3
    c4a2:	e7e1      	b.n	c468 <MiApp_EstablishConnection+0x14>
    c4a4:	20000418 	.word	0x20000418
    c4a8:	2000000b 	.word	0x2000000b
    c4ac:	200020b8 	.word	0x200020b8
    c4b0:	00011e37 	.word	0x00011e37
    c4b4:	0000beb5 	.word	0x0000beb5
    c4b8:	0000c35d 	.word	0x0000c35d

0000c4bc <MiApp_BroadcastConnectionTable>:
{
    c4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4be:	46de      	mov	lr, fp
    c4c0:	4657      	mov	r7, sl
    c4c2:	464e      	mov	r6, r9
    c4c4:	4645      	mov	r5, r8
    c4c6:	b5e0      	push	{r5, r6, r7, lr}
    c4c8:	b089      	sub	sp, #36	; 0x24
	if(conn_size % ((TX_BUFFER_SIZE - 4) / 4))
    c4ca:	4b4f      	ldr	r3, [pc, #316]	; (c608 <MiApp_BroadcastConnectionTable+0x14c>)
    c4cc:	781c      	ldrb	r4, [r3, #0]
    c4ce:	2113      	movs	r1, #19
    c4d0:	0020      	movs	r0, r4
    c4d2:	4b4e      	ldr	r3, [pc, #312]	; (c60c <MiApp_BroadcastConnectionTable+0x150>)
    c4d4:	4798      	blx	r3
    c4d6:	b2c9      	uxtb	r1, r1
    c4d8:	2900      	cmp	r1, #0
    c4da:	d014      	beq.n	c506 <MiApp_BroadcastConnectionTable+0x4a>
		broadcast_count = conn_size / ((TX_BUFFER_SIZE - 4) / 4) + 1;
    c4dc:	2113      	movs	r1, #19
    c4de:	0020      	movs	r0, r4
    c4e0:	4b4b      	ldr	r3, [pc, #300]	; (c610 <MiApp_BroadcastConnectionTable+0x154>)
    c4e2:	4798      	blx	r3
    c4e4:	3001      	adds	r0, #1
    c4e6:	b2c0      	uxtb	r0, r0
    for (i = 0 ; i < broadcast_count ; i++)
    c4e8:	2800      	cmp	r0, #0
    c4ea:	d100      	bne.n	c4ee <MiApp_BroadcastConnectionTable+0x32>
    c4ec:	e085      	b.n	c5fa <MiApp_BroadcastConnectionTable+0x13e>
    c4ee:	00c3      	lsls	r3, r0, #3
    c4f0:	18c3      	adds	r3, r0, r3
    c4f2:	005b      	lsls	r3, r3, #1
    c4f4:	18c0      	adds	r0, r0, r3
    c4f6:	b2c3      	uxtb	r3, r0
    c4f8:	9307      	str	r3, [sp, #28]
    c4fa:	2300      	movs	r3, #0
    c4fc:	469b      	mov	fp, r3
    c4fe:	3313      	adds	r3, #19
    c500:	469a      	mov	sl, r3
                if (miwiDefaultRomOrRamParams->ConnectionTable[j].status.bits.isValid)
    c502:	4e44      	ldr	r6, [pc, #272]	; (c614 <MiApp_BroadcastConnectionTable+0x158>)
    c504:	e05f      	b.n	c5c6 <MiApp_BroadcastConnectionTable+0x10a>
		broadcast_count = conn_size / ((TX_BUFFER_SIZE - 4) / 4);
    c506:	2113      	movs	r1, #19
    c508:	0020      	movs	r0, r4
    c50a:	4b41      	ldr	r3, [pc, #260]	; (c610 <MiApp_BroadcastConnectionTable+0x154>)
    c50c:	4798      	blx	r3
    c50e:	b2c0      	uxtb	r0, r0
    c510:	e7ea      	b.n	c4e8 <MiApp_BroadcastConnectionTable+0x2c>
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[0]);
    c512:	7924      	ldrb	r4, [r4, #4]
    c514:	54c4      	strb	r4, [r0, r3]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[1]);
    c516:	4c3f      	ldr	r4, [pc, #252]	; (c614 <MiApp_BroadcastConnectionTable+0x158>)
    c518:	6824      	ldr	r4, [r4, #0]
    c51a:	6824      	ldr	r4, [r4, #0]
    c51c:	1864      	adds	r4, r4, r1
    c51e:	7964      	ldrb	r4, [r4, #5]
    c520:	46a4      	mov	ip, r4
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[0]);
    c522:	1c5c      	adds	r4, r3, #1
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[1]);
    c524:	b2e4      	uxtb	r4, r4
    c526:	4667      	mov	r7, ip
    c528:	5507      	strb	r7, [r0, r4]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[2]);
    c52a:	1cdc      	adds	r4, r3, #3
    c52c:	b2e4      	uxtb	r4, r4
    c52e:	46a4      	mov	ip, r4
    c530:	4c38      	ldr	r4, [pc, #224]	; (c614 <MiApp_BroadcastConnectionTable+0x158>)
    c532:	6824      	ldr	r4, [r4, #0]
    c534:	6824      	ldr	r4, [r4, #0]
    c536:	1861      	adds	r1, r4, r1
    c538:	798c      	ldrb	r4, [r1, #6]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[1]);
    c53a:	1c99      	adds	r1, r3, #2
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->ConnectionTable[j].Address[2]);
    c53c:	b2c9      	uxtb	r1, r1
    c53e:	5444      	strb	r4, [r0, r1]
                    dataPtr[dataLen++] = j;
    c540:	3304      	adds	r3, #4
    c542:	b2db      	uxtb	r3, r3
    c544:	4661      	mov	r1, ip
    c546:	5442      	strb	r2, [r0, r1]
        for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    c548:	3201      	adds	r2, #1
    c54a:	b2d2      	uxtb	r2, r2
    c54c:	4542      	cmp	r2, r8
    c54e:	da17      	bge.n	c580 <MiApp_BroadcastConnectionTable+0xc4>
            if (j < conn_size)
    c550:	4649      	mov	r1, r9
    c552:	7809      	ldrb	r1, [r1, #0]
    c554:	4291      	cmp	r1, r2
    c556:	d9f7      	bls.n	c548 <MiApp_BroadcastConnectionTable+0x8c>
                if (miwiDefaultRomOrRamParams->ConnectionTable[j].status.bits.isValid)
    c558:	0111      	lsls	r1, r2, #4
    c55a:	6834      	ldr	r4, [r6, #0]
    c55c:	6824      	ldr	r4, [r4, #0]
    c55e:	1864      	adds	r4, r4, r1
    c560:	7b27      	ldrb	r7, [r4, #12]
    c562:	2f7f      	cmp	r7, #127	; 0x7f
    c564:	d8d5      	bhi.n	c512 <MiApp_BroadcastConnectionTable+0x56>
                    dataPtr[dataLen++] = 0xff;
    c566:	54c5      	strb	r5, [r0, r3]
    c568:	1c59      	adds	r1, r3, #1
                    dataPtr[dataLen++] = 0xff;
    c56a:	b2c9      	uxtb	r1, r1
    c56c:	5445      	strb	r5, [r0, r1]
                    dataPtr[dataLen++] = 0xff;
    c56e:	1cd9      	adds	r1, r3, #3
    c570:	b2c9      	uxtb	r1, r1
                    dataPtr[dataLen++] = 0xff;
    c572:	1c9c      	adds	r4, r3, #2
                    dataPtr[dataLen++] = 0xff;
    c574:	b2e4      	uxtb	r4, r4
    c576:	5505      	strb	r5, [r0, r4]
                    dataPtr[dataLen++] = j;
    c578:	3304      	adds	r3, #4
    c57a:	b2db      	uxtb	r3, r3
    c57c:	5442      	strb	r2, [r0, r1]
    c57e:	e7e3      	b.n	c548 <MiApp_BroadcastConnectionTable+0x8c>
        for (k=count;k<TX_BUFFER_SIZE;k++)
    c580:	2b4f      	cmp	r3, #79	; 0x4f
    c582:	d838      	bhi.n	c5f6 <MiApp_BroadcastConnectionTable+0x13a>
            dataPtr[dataLen++] = 0xFF;   // Garbage Value
    c584:	21ff      	movs	r1, #255	; 0xff
    c586:	1c5a      	adds	r2, r3, #1
    c588:	b2d2      	uxtb	r2, r2
    c58a:	54c1      	strb	r1, [r0, r3]
    c58c:	0013      	movs	r3, r2
        for (k=count;k<TX_BUFFER_SIZE;k++)
    c58e:	2a4f      	cmp	r2, #79	; 0x4f
    c590:	d9f9      	bls.n	c586 <MiApp_BroadcastConnectionTable+0xca>
        frameTransmit(true, myPANID, NULL, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    c592:	4b21      	ldr	r3, [pc, #132]	; (c618 <MiApp_BroadcastConnectionTable+0x15c>)
    c594:	8819      	ldrh	r1, [r3, #0]
    c596:	4b21      	ldr	r3, [pc, #132]	; (c61c <MiApp_BroadcastConnectionTable+0x160>)
    c598:	9305      	str	r3, [sp, #20]
    c59a:	2301      	movs	r3, #1
    c59c:	9304      	str	r3, [sp, #16]
    c59e:	2300      	movs	r3, #0
    c5a0:	9303      	str	r3, [sp, #12]
    c5a2:	9002      	str	r0, [sp, #8]
    c5a4:	9201      	str	r2, [sp, #4]
    c5a6:	9300      	str	r3, [sp, #0]
    c5a8:	3301      	adds	r3, #1
    c5aa:	2200      	movs	r2, #0
    c5ac:	2001      	movs	r0, #1
    c5ae:	4c1c      	ldr	r4, [pc, #112]	; (c620 <MiApp_BroadcastConnectionTable+0x164>)
    c5b0:	47a0      	blx	r4
    c5b2:	2313      	movs	r3, #19
    c5b4:	469c      	mov	ip, r3
    c5b6:	44e2      	add	sl, ip
    c5b8:	465d      	mov	r5, fp
    c5ba:	3513      	adds	r5, #19
    c5bc:	b2eb      	uxtb	r3, r5
    c5be:	469b      	mov	fp, r3
    for (i = 0 ; i < broadcast_count ; i++)
    c5c0:	9a07      	ldr	r2, [sp, #28]
    c5c2:	4293      	cmp	r3, r2
    c5c4:	d019      	beq.n	c5fa <MiApp_BroadcastConnectionTable+0x13e>
        dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    c5c6:	2050      	movs	r0, #80	; 0x50
    c5c8:	4b16      	ldr	r3, [pc, #88]	; (c624 <MiApp_BroadcastConnectionTable+0x168>)
    c5ca:	4798      	blx	r3
        if (NULL == dataPtr)
    c5cc:	2800      	cmp	r0, #0
    c5ce:	d014      	beq.n	c5fa <MiApp_BroadcastConnectionTable+0x13e>
        dataPtr[dataLen++] = CMD_SHARE_CONNECTION_TABLE;
    c5d0:	2377      	movs	r3, #119	; 0x77
    c5d2:	7003      	strb	r3, [r0, #0]
        dataPtr[dataLen++] = conn_size; // No of end devices in network
    c5d4:	4b0c      	ldr	r3, [pc, #48]	; (c608 <MiApp_BroadcastConnectionTable+0x14c>)
    c5d6:	781b      	ldrb	r3, [r3, #0]
    c5d8:	7043      	strb	r3, [r0, #1]
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*i);
    c5da:	465a      	mov	r2, fp
    c5dc:	7082      	strb	r2, [r0, #2]
        dataPtr[dataLen++] = (((TX_BUFFER_SIZE-4)/4)*(i+1));
    c5de:	4651      	mov	r1, sl
    c5e0:	70c1      	strb	r1, [r0, #3]
        for (j= ((TX_BUFFER_SIZE-4)/4)*i ;j<((TX_BUFFER_SIZE-4)/4)*(i+1);j++)
    c5e2:	46d0      	mov	r8, sl
    c5e4:	4552      	cmp	r2, sl
    c5e6:	da04      	bge.n	c5f2 <MiApp_BroadcastConnectionTable+0x136>
    c5e8:	2304      	movs	r3, #4
            if (j < conn_size)
    c5ea:	4907      	ldr	r1, [pc, #28]	; (c608 <MiApp_BroadcastConnectionTable+0x14c>)
    c5ec:	4689      	mov	r9, r1
                    dataPtr[dataLen++] = 0xff;
    c5ee:	25ff      	movs	r5, #255	; 0xff
    c5f0:	e7ae      	b.n	c550 <MiApp_BroadcastConnectionTable+0x94>
        count = 4;
    c5f2:	2304      	movs	r3, #4
    c5f4:	e7c6      	b.n	c584 <MiApp_BroadcastConnectionTable+0xc8>
        for (k=count;k<TX_BUFFER_SIZE;k++)
    c5f6:	001a      	movs	r2, r3
    c5f8:	e7cb      	b.n	c592 <MiApp_BroadcastConnectionTable+0xd6>
}
    c5fa:	b009      	add	sp, #36	; 0x24
    c5fc:	bc3c      	pop	{r2, r3, r4, r5}
    c5fe:	4690      	mov	r8, r2
    c600:	4699      	mov	r9, r3
    c602:	46a2      	mov	sl, r4
    c604:	46ab      	mov	fp, r5
    c606:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c608:	200003f2 	.word	0x200003f2
    c60c:	0000f649 	.word	0x0000f649
    c610:	0000f53d 	.word	0x0000f53d
    c614:	20002034 	.word	0x20002034
    c618:	20002044 	.word	0x20002044
    c61c:	0000bd95 	.word	0x0000bd95
    c620:	0000c259 	.word	0x0000c259
    c624:	0000d431 	.word	0x0000d431

0000c628 <connectionRespConfCallback>:
{
    c628:	b510      	push	{r4, lr}
    MiMem_Free(msgPointer);
    c62a:	0010      	movs	r0, r2
    c62c:	4b03      	ldr	r3, [pc, #12]	; (c63c <connectionRespConfCallback+0x14>)
    c62e:	4798      	blx	r3
    MiApp_BroadcastConnectionTable();
    c630:	4b03      	ldr	r3, [pc, #12]	; (c640 <connectionRespConfCallback+0x18>)
    c632:	4798      	blx	r3
	sharePeerDevInfoTimeInterval = SHARE_PEER_DEVICE_INFO_TIMEOUT;	//WSGA-13104, refresh interval timer for sending connection table.
    c634:	220f      	movs	r2, #15
    c636:	4b03      	ldr	r3, [pc, #12]	; (c644 <connectionRespConfCallback+0x1c>)
    c638:	801a      	strh	r2, [r3, #0]
}
    c63a:	bd10      	pop	{r4, pc}
    c63c:	0000d4ed 	.word	0x0000d4ed
    c640:	0000c4bd 	.word	0x0000c4bd
    c644:	20000434 	.word	0x20000434

0000c648 <removeConnection>:
{
    c648:	b510      	push	{r4, lr}
    c64a:	b086      	sub	sp, #24
    c64c:	0004      	movs	r4, r0
    dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REMOVAL_REQUEST);
    c64e:	2001      	movs	r0, #1
    c650:	4b0e      	ldr	r3, [pc, #56]	; (c68c <removeConnection+0x44>)
    c652:	4798      	blx	r3
    if (NULL == dataPtr)
    c654:	2800      	cmp	r0, #0
    c656:	d016      	beq.n	c686 <removeConnection+0x3e>
    dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_REQUEST;
    c658:	2382      	movs	r3, #130	; 0x82
    c65a:	7003      	strb	r3, [r0, #0]
    frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[index].Address, true, false, dataLen, dataPtr,0, true, CommandConfCallback);
    c65c:	4b0c      	ldr	r3, [pc, #48]	; (c690 <removeConnection+0x48>)
    c65e:	681b      	ldr	r3, [r3, #0]
    c660:	0124      	lsls	r4, r4, #4
    c662:	681a      	ldr	r2, [r3, #0]
    c664:	1912      	adds	r2, r2, r4
    c666:	3204      	adds	r2, #4
    c668:	4b0a      	ldr	r3, [pc, #40]	; (c694 <removeConnection+0x4c>)
    c66a:	8819      	ldrh	r1, [r3, #0]
    c66c:	4b0a      	ldr	r3, [pc, #40]	; (c698 <removeConnection+0x50>)
    c66e:	9305      	str	r3, [sp, #20]
    c670:	2401      	movs	r4, #1
    c672:	9404      	str	r4, [sp, #16]
    c674:	2300      	movs	r3, #0
    c676:	9303      	str	r3, [sp, #12]
    c678:	9002      	str	r0, [sp, #8]
    c67a:	9401      	str	r4, [sp, #4]
    c67c:	9300      	str	r3, [sp, #0]
    c67e:	3301      	adds	r3, #1
    c680:	2000      	movs	r0, #0
    c682:	4c06      	ldr	r4, [pc, #24]	; (c69c <removeConnection+0x54>)
    c684:	47a0      	blx	r4
}
    c686:	b006      	add	sp, #24
    c688:	bd10      	pop	{r4, pc}
    c68a:	46c0      	nop			; (mov r8, r8)
    c68c:	0000d431 	.word	0x0000d431
    c690:	20002034 	.word	0x20002034
    c694:	20002044 	.word	0x20002044
    c698:	0000bd95 	.word	0x0000bd95
    c69c:	0000c259 	.word	0x0000c259

0000c6a0 <MiApp_RemoveConnection>:
{
    c6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( ConnectionIndex == 0xFF )
    c6a2:	28ff      	cmp	r0, #255	; 0xff
    c6a4:	d008      	beq.n	c6b8 <MiApp_RemoveConnection+0x18>
    else if( miwiDefaultRomOrRamParams->ConnectionTable[ConnectionIndex].status.bits.isValid )
    c6a6:	0104      	lsls	r4, r0, #4
    c6a8:	4b16      	ldr	r3, [pc, #88]	; (c704 <MiApp_RemoveConnection+0x64>)
    c6aa:	681b      	ldr	r3, [r3, #0]
    c6ac:	681b      	ldr	r3, [r3, #0]
    c6ae:	191b      	adds	r3, r3, r4
    c6b0:	7b1b      	ldrb	r3, [r3, #12]
    c6b2:	2b7f      	cmp	r3, #127	; 0x7f
    c6b4:	d81a      	bhi.n	c6ec <MiApp_RemoveConnection+0x4c>
}
    c6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6b8:	2400      	movs	r4, #0
            if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c6ba:	4f12      	ldr	r7, [pc, #72]	; (c704 <MiApp_RemoveConnection+0x64>)
            miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    c6bc:	003e      	movs	r6, r7
    c6be:	e00a      	b.n	c6d6 <MiApp_RemoveConnection+0x36>
    c6c0:	6833      	ldr	r3, [r6, #0]
    c6c2:	681b      	ldr	r3, [r3, #0]
    c6c4:	195b      	adds	r3, r3, r5
    c6c6:	2200      	movs	r2, #0
    c6c8:	731a      	strb	r2, [r3, #12]
            PDS_Store(PDS_CONNECTION_TABLE_ID);
    c6ca:	2006      	movs	r0, #6
    c6cc:	4b0e      	ldr	r3, [pc, #56]	; (c708 <MiApp_RemoveConnection+0x68>)
    c6ce:	4798      	blx	r3
    c6d0:	3401      	adds	r4, #1
        for(i = 0; i < CONNECTION_SIZE; i++)
    c6d2:	2c14      	cmp	r4, #20
    c6d4:	d0ef      	beq.n	c6b6 <MiApp_RemoveConnection+0x16>
    c6d6:	b2e0      	uxtb	r0, r4
    c6d8:	0125      	lsls	r5, r4, #4
            if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    c6da:	683b      	ldr	r3, [r7, #0]
    c6dc:	681b      	ldr	r3, [r3, #0]
    c6de:	195b      	adds	r3, r3, r5
    c6e0:	7b1b      	ldrb	r3, [r3, #12]
    c6e2:	2b7f      	cmp	r3, #127	; 0x7f
    c6e4:	d9ec      	bls.n	c6c0 <MiApp_RemoveConnection+0x20>
                removeConnection(i);
    c6e6:	4b09      	ldr	r3, [pc, #36]	; (c70c <MiApp_RemoveConnection+0x6c>)
    c6e8:	4798      	blx	r3
    c6ea:	e7e9      	b.n	c6c0 <MiApp_RemoveConnection+0x20>
        removeConnection(ConnectionIndex);
    c6ec:	4b07      	ldr	r3, [pc, #28]	; (c70c <MiApp_RemoveConnection+0x6c>)
    c6ee:	4798      	blx	r3
        miwiDefaultRomOrRamParams->ConnectionTable[ConnectionIndex].status.Val = 0;
    c6f0:	4b04      	ldr	r3, [pc, #16]	; (c704 <MiApp_RemoveConnection+0x64>)
    c6f2:	681b      	ldr	r3, [r3, #0]
    c6f4:	681b      	ldr	r3, [r3, #0]
    c6f6:	191c      	adds	r4, r3, r4
    c6f8:	2300      	movs	r3, #0
    c6fa:	7323      	strb	r3, [r4, #12]
       PDS_Store(PDS_CONNECTION_TABLE_ID);
    c6fc:	2006      	movs	r0, #6
    c6fe:	4b02      	ldr	r3, [pc, #8]	; (c708 <MiApp_RemoveConnection+0x68>)
    c700:	4798      	blx	r3
}
    c702:	e7d8      	b.n	c6b6 <MiApp_RemoveConnection+0x16>
    c704:	20002034 	.word	0x20002034
    c708:	0000a66d 	.word	0x0000a66d
    c70c:	0000c649 	.word	0x0000c649

0000c710 <protocolTimerHandler>:
{
    c710:	b570      	push	{r4, r5, r6, lr}
    c712:	b086      	sub	sp, #24
    if((0 != connectionTimeInterval) && ((--connectionTimeInterval) == 0))
    c714:	4b36      	ldr	r3, [pc, #216]	; (c7f0 <protocolTimerHandler+0xe0>)
    c716:	881b      	ldrh	r3, [r3, #0]
    c718:	2b00      	cmp	r3, #0
    c71a:	d005      	beq.n	c728 <protocolTimerHandler+0x18>
    c71c:	3b01      	subs	r3, #1
    c71e:	b29b      	uxth	r3, r3
    c720:	4a33      	ldr	r2, [pc, #204]	; (c7f0 <protocolTimerHandler+0xe0>)
    c722:	8013      	strh	r3, [r2, #0]
    c724:	2b00      	cmp	r3, #0
    c726:	d01f      	beq.n	c768 <protocolTimerHandler+0x58>
    if((0 != sharePeerDevInfoTimeInterval) && ((--sharePeerDevInfoTimeInterval) == 0))
    c728:	4b32      	ldr	r3, [pc, #200]	; (c7f4 <protocolTimerHandler+0xe4>)
    c72a:	881b      	ldrh	r3, [r3, #0]
    c72c:	2b00      	cmp	r3, #0
    c72e:	d005      	beq.n	c73c <protocolTimerHandler+0x2c>
    c730:	3b01      	subs	r3, #1
    c732:	b29b      	uxth	r3, r3
    c734:	2b00      	cmp	r3, #0
    c736:	d01a      	beq.n	c76e <protocolTimerHandler+0x5e>
    c738:	4a2e      	ldr	r2, [pc, #184]	; (c7f4 <protocolTimerHandler+0xe4>)
    c73a:	8013      	strh	r3, [r2, #0]
    if((0 != inActiveDeviceCheckTimeInterval) && ((--inActiveDeviceCheckTimeInterval) == 0))
    c73c:	4b2e      	ldr	r3, [pc, #184]	; (c7f8 <protocolTimerHandler+0xe8>)
    c73e:	881b      	ldrh	r3, [r3, #0]
    c740:	2b00      	cmp	r3, #0
    c742:	d005      	beq.n	c750 <protocolTimerHandler+0x40>
    c744:	3b01      	subs	r3, #1
    c746:	b29b      	uxth	r3, r3
    c748:	2b00      	cmp	r3, #0
    c74a:	d016      	beq.n	c77a <protocolTimerHandler+0x6a>
    c74c:	4a2a      	ldr	r2, [pc, #168]	; (c7f8 <protocolTimerHandler+0xe8>)
    c74e:	8013      	strh	r3, [r2, #0]
    if((0 != linkStatusTimeInterval) && ((--linkStatusTimeInterval) == 0))
    c750:	4b2a      	ldr	r3, [pc, #168]	; (c7fc <protocolTimerHandler+0xec>)
    c752:	881b      	ldrh	r3, [r3, #0]
    c754:	2b00      	cmp	r3, #0
    c756:	d005      	beq.n	c764 <protocolTimerHandler+0x54>
    c758:	3b01      	subs	r3, #1
    c75a:	b29b      	uxth	r3, r3
    c75c:	2b00      	cmp	r3, #0
    c75e:	d028      	beq.n	c7b2 <protocolTimerHandler+0xa2>
    c760:	4a26      	ldr	r2, [pc, #152]	; (c7fc <protocolTimerHandler+0xec>)
    c762:	8013      	strh	r3, [r2, #0]
}
    c764:	b006      	add	sp, #24
    c766:	bd70      	pop	{r4, r5, r6, pc}
        sendConnectionRequest();
    c768:	4b25      	ldr	r3, [pc, #148]	; (c800 <protocolTimerHandler+0xf0>)
    c76a:	4798      	blx	r3
    c76c:	e7dc      	b.n	c728 <protocolTimerHandler+0x18>
        sharePeerDevInfoTimeInterval = SHARE_PEER_DEVICE_INFO_TIMEOUT;
    c76e:	220f      	movs	r2, #15
    c770:	4b20      	ldr	r3, [pc, #128]	; (c7f4 <protocolTimerHandler+0xe4>)
    c772:	801a      	strh	r2, [r3, #0]
        MiApp_BroadcastConnectionTable();
    c774:	4b23      	ldr	r3, [pc, #140]	; (c804 <protocolTimerHandler+0xf4>)
    c776:	4798      	blx	r3
    c778:	e7e0      	b.n	c73c <protocolTimerHandler+0x2c>
        inActiveDeviceCheckTimeInterval = FIND_INACTIVE_DEVICE_TIMEOUT;
    c77a:	223c      	movs	r2, #60	; 0x3c
    c77c:	4b1e      	ldr	r3, [pc, #120]	; (c7f8 <protocolTimerHandler+0xe8>)
    c77e:	801a      	strh	r2, [r3, #0]
    c780:	2400      	movs	r4, #0
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    c782:	4d21      	ldr	r5, [pc, #132]	; (c808 <protocolTimerHandler+0xf8>)
                miwiDefaultRomOrRamParams->ConnectionTable[i].link_status = 0;
    c784:	2600      	movs	r6, #0
    c786:	e003      	b.n	c790 <protocolTimerHandler+0x80>
    c788:	739e      	strb	r6, [r3, #14]
    c78a:	3401      	adds	r4, #1
    for (i = 0;i < CONNECTION_SIZE; i++)
    c78c:	2c14      	cmp	r4, #20
    c78e:	d0df      	beq.n	c750 <protocolTimerHandler+0x40>
    c790:	b2e0      	uxtb	r0, r4
        if (miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid)
    c792:	0122      	lsls	r2, r4, #4
    c794:	682b      	ldr	r3, [r5, #0]
    c796:	681b      	ldr	r3, [r3, #0]
    c798:	189b      	adds	r3, r3, r2
    c79a:	7b1a      	ldrb	r2, [r3, #12]
    c79c:	2a7f      	cmp	r2, #127	; 0x7f
    c79e:	d9f4      	bls.n	c78a <protocolTimerHandler+0x7a>
            if (miwiDefaultRomOrRamParams->ConnectionTable[i].link_status == 0 && miwiDefaultRomOrRamParams->ConnectionTable[i].permanent_connections != 0xFF)
    c7a0:	7b9a      	ldrb	r2, [r3, #14]
    c7a2:	2a00      	cmp	r2, #0
    c7a4:	d1f0      	bne.n	c788 <protocolTimerHandler+0x78>
    c7a6:	7bda      	ldrb	r2, [r3, #15]
    c7a8:	2aff      	cmp	r2, #255	; 0xff
    c7aa:	d0ed      	beq.n	c788 <protocolTimerHandler+0x78>
                MiApp_RemoveConnection(i);
    c7ac:	4b17      	ldr	r3, [pc, #92]	; (c80c <protocolTimerHandler+0xfc>)
    c7ae:	4798      	blx	r3
    c7b0:	e7eb      	b.n	c78a <protocolTimerHandler+0x7a>
        linkStatusTimeInterval = LINK_STATUS_TIMEOUT;
    c7b2:	2214      	movs	r2, #20
    c7b4:	4b11      	ldr	r3, [pc, #68]	; (c7fc <protocolTimerHandler+0xec>)
    c7b6:	801a      	strh	r2, [r3, #0]
    dataPtr = MiMem_Alloc(PACKETLEN_CMD_IAM_ALIVE);
    c7b8:	2001      	movs	r0, #1
    c7ba:	4b15      	ldr	r3, [pc, #84]	; (c810 <protocolTimerHandler+0x100>)
    c7bc:	4798      	blx	r3
    if (NULL == dataPtr)
    c7be:	2800      	cmp	r0, #0
    c7c0:	d0d0      	beq.n	c764 <protocolTimerHandler+0x54>
    dataPtr[dataLen++] = CMD_IAM_ALIVE;
    c7c2:	237a      	movs	r3, #122	; 0x7a
    c7c4:	7003      	strb	r3, [r0, #0]
    frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[0].Address, true, false,
    c7c6:	4b10      	ldr	r3, [pc, #64]	; (c808 <protocolTimerHandler+0xf8>)
    c7c8:	681b      	ldr	r3, [r3, #0]
    c7ca:	681a      	ldr	r2, [r3, #0]
    c7cc:	3204      	adds	r2, #4
    c7ce:	4b11      	ldr	r3, [pc, #68]	; (c814 <protocolTimerHandler+0x104>)
    c7d0:	8819      	ldrh	r1, [r3, #0]
    c7d2:	4b11      	ldr	r3, [pc, #68]	; (c818 <protocolTimerHandler+0x108>)
    c7d4:	9305      	str	r3, [sp, #20]
    c7d6:	2401      	movs	r4, #1
    c7d8:	9404      	str	r4, [sp, #16]
    c7da:	2300      	movs	r3, #0
    c7dc:	9303      	str	r3, [sp, #12]
    c7de:	9002      	str	r0, [sp, #8]
    c7e0:	9401      	str	r4, [sp, #4]
    c7e2:	9300      	str	r3, [sp, #0]
    c7e4:	3301      	adds	r3, #1
    c7e6:	2000      	movs	r0, #0
    c7e8:	4c0c      	ldr	r4, [pc, #48]	; (c81c <protocolTimerHandler+0x10c>)
    c7ea:	47a0      	blx	r4
}
    c7ec:	e7ba      	b.n	c764 <protocolTimerHandler+0x54>
    c7ee:	46c0      	nop			; (mov r8, r8)
    c7f0:	200003f4 	.word	0x200003f4
    c7f4:	20000434 	.word	0x20000434
    c7f8:	2000040e 	.word	0x2000040e
    c7fc:	20000416 	.word	0x20000416
    c800:	0000c35d 	.word	0x0000c35d
    c804:	0000c4bd 	.word	0x0000c4bd
    c808:	20002034 	.word	0x20002034
    c80c:	0000c6a1 	.word	0x0000c6a1
    c810:	0000d431 	.word	0x0000d431
    c814:	20002044 	.word	0x20002044
    c818:	0000bda5 	.word	0x0000bda5
    c81c:	0000c259 	.word	0x0000c259

0000c820 <MiApp_SendData>:
{
    c820:	b5f0      	push	{r4, r5, r6, r7, lr}
    c822:	46ce      	mov	lr, r9
    c824:	4647      	mov	r7, r8
    c826:	b580      	push	{r7, lr}
    c828:	b08b      	sub	sp, #44	; 0x2c
    c82a:	9008      	str	r0, [sp, #32]
    c82c:	9107      	str	r1, [sp, #28]
    c82e:	0015      	movs	r5, r2
    c830:	9309      	str	r3, [sp, #36]	; 0x24
    c832:	ab12      	add	r3, sp, #72	; 0x48
    c834:	781e      	ldrb	r6, [r3, #0]
    c836:	ab13      	add	r3, sp, #76	; 0x4c
    c838:	781b      	ldrb	r3, [r3, #0]
    c83a:	4699      	mov	r9, r3
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c83c:	4b77      	ldr	r3, [pc, #476]	; (ca1c <MiApp_SendData+0x1fc>)
    c83e:	781b      	ldrb	r3, [r3, #0]
	return true;
    c840:	2401      	movs	r4, #1
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c842:	2b07      	cmp	r3, #7
    c844:	d005      	beq.n	c852 <MiApp_SendData+0x32>
}
    c846:	0020      	movs	r0, r4
    c848:	b00b      	add	sp, #44	; 0x2c
    c84a:	bc0c      	pop	{r2, r3}
    c84c:	4690      	mov	r8, r2
    c84e:	4699      	mov	r9, r3
    c850:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (IN_NETWORK_STATE == p2pStarCurrentState &&  MAX_PAYLOAD >= msglen)
    c852:	2a4c      	cmp	r2, #76	; 0x4c
    c854:	d8f7      	bhi.n	c846 <MiApp_SendData+0x26>
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    c856:	2802      	cmp	r0, #2
    c858:	d033      	beq.n	c8c2 <MiApp_SendData+0xa2>
		dataFramePtr = (P2PStarDataFrame_t *)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    c85a:	2068      	movs	r0, #104	; 0x68
    c85c:	4b70      	ldr	r3, [pc, #448]	; (ca20 <MiApp_SendData+0x200>)
    c85e:	4798      	blx	r3
    c860:	1e07      	subs	r7, r0, #0
		if (NULL == dataFramePtr)
    c862:	d100      	bne.n	c866 <MiApp_SendData+0x46>
    c864:	e0d8      	b.n	ca18 <MiApp_SendData+0x1f8>
		dataFramePtr->dataFrame.confCallback = ConfCallback;
    c866:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c868:	6043      	str	r3, [r0, #4]
		memcpy(&(dataFramePtr->dataFrame.destAddress), addr, MY_ADDRESS_LENGTH);
    c86a:	3008      	adds	r0, #8
    c86c:	2208      	movs	r2, #8
    c86e:	9c07      	ldr	r4, [sp, #28]
    c870:	0021      	movs	r1, r4
    c872:	4b6c      	ldr	r3, [pc, #432]	; (ca24 <MiApp_SendData+0x204>)
    c874:	4798      	blx	r3
		dataFramePtr->dataFrame.msghandle = msghandle;
    c876:	753e      	strb	r6, [r7, #20]
		dataFramePtr->dataFrame.msgLength = msglen;
    c878:	757d      	strb	r5, [r7, #21]
		dataFramePtr->dataFrame.timeout = 0;
    c87a:	2300      	movs	r3, #0
    c87c:	743b      	strb	r3, [r7, #16]
		dataFramePtr->dataFrame.ackReq = ackReq;
    c87e:	464b      	mov	r3, r9
    c880:	747b      	strb	r3, [r7, #17]
		if (END_DEVICE == role)
    c882:	4b69      	ldr	r3, [pc, #420]	; (ca28 <MiApp_SendData+0x208>)
    c884:	781b      	ldrb	r3, [r3, #0]
    c886:	2b02      	cmp	r3, #2
    c888:	d04c      	beq.n	c924 <MiApp_SendData+0x104>
			memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c88a:	003c      	movs	r4, r7
    c88c:	3416      	adds	r4, #22
    c88e:	002a      	movs	r2, r5
    c890:	9909      	ldr	r1, [sp, #36]	; 0x24
    c892:	0020      	movs	r0, r4
    c894:	4b63      	ldr	r3, [pc, #396]	; (ca24 <MiApp_SendData+0x204>)
    c896:	4798      	blx	r3
			frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, ackReq, macAckOnlyDataCallback);
    c898:	4b64      	ldr	r3, [pc, #400]	; (ca2c <MiApp_SendData+0x20c>)
    c89a:	8819      	ldrh	r1, [r3, #0]
    c89c:	4b64      	ldr	r3, [pc, #400]	; (ca30 <MiApp_SendData+0x210>)
    c89e:	9305      	str	r3, [sp, #20]
    c8a0:	464b      	mov	r3, r9
    c8a2:	9304      	str	r3, [sp, #16]
    c8a4:	9603      	str	r6, [sp, #12]
    c8a6:	9402      	str	r4, [sp, #8]
    c8a8:	9501      	str	r5, [sp, #4]
    c8aa:	2300      	movs	r3, #0
    c8ac:	9300      	str	r3, [sp, #0]
    c8ae:	9a07      	ldr	r2, [sp, #28]
    c8b0:	2000      	movs	r0, #0
    c8b2:	4c60      	ldr	r4, [pc, #384]	; (ca34 <MiApp_SendData+0x214>)
    c8b4:	47a0      	blx	r4
			miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c8b6:	0039      	movs	r1, r7
    c8b8:	485f      	ldr	r0, [pc, #380]	; (ca38 <MiApp_SendData+0x218>)
    c8ba:	4b60      	ldr	r3, [pc, #384]	; (ca3c <MiApp_SendData+0x21c>)
    c8bc:	4798      	blx	r3
	return true;
    c8be:	2401      	movs	r4, #1
    c8c0:	e7c1      	b.n	c846 <MiApp_SendData+0x26>
		uint16_t DestinationAddress16 = ((addr[1] << 8) + addr[0]);
    c8c2:	784a      	ldrb	r2, [r1, #1]
    c8c4:	0212      	lsls	r2, r2, #8
    c8c6:	780b      	ldrb	r3, [r1, #0]
    c8c8:	189b      	adds	r3, r3, r2
	    if(addr_len == 2 && (DestinationAddress16 == 0xFFFF))
    c8ca:	b29b      	uxth	r3, r3
    c8cc:	4a5c      	ldr	r2, [pc, #368]	; (ca40 <MiApp_SendData+0x220>)
    c8ce:	4293      	cmp	r3, r2
    c8d0:	d1c3      	bne.n	c85a <MiApp_SendData+0x3a>
			dataFramePtr = (P2PStarDataFrame_t *)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    c8d2:	2068      	movs	r0, #104	; 0x68
    c8d4:	4b52      	ldr	r3, [pc, #328]	; (ca20 <MiApp_SendData+0x200>)
    c8d6:	4798      	blx	r3
    c8d8:	1e04      	subs	r4, r0, #0
			if (NULL == dataFramePtr)
    c8da:	d100      	bne.n	c8de <MiApp_SendData+0xbe>
    c8dc:	e09a      	b.n	ca14 <MiApp_SendData+0x1f4>
			dataFramePtr->dataFrame.confCallback = ConfCallback;
    c8de:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c8e0:	6043      	str	r3, [r0, #4]
			dataFramePtr->dataFrame.msghandle = msghandle;
    c8e2:	7506      	strb	r6, [r0, #20]
			dataFramePtr->dataFrame.msgLength = msglen;
    c8e4:	7545      	strb	r5, [r0, #21]
			dataFramePtr->dataFrame.timeout = 0;
    c8e6:	2700      	movs	r7, #0
    c8e8:	7407      	strb	r7, [r0, #16]
			memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c8ea:	2316      	movs	r3, #22
    c8ec:	4698      	mov	r8, r3
    c8ee:	4480      	add	r8, r0
    c8f0:	002a      	movs	r2, r5
    c8f2:	9909      	ldr	r1, [sp, #36]	; 0x24
    c8f4:	4640      	mov	r0, r8
    c8f6:	4b4b      	ldr	r3, [pc, #300]	; (ca24 <MiApp_SendData+0x204>)
    c8f8:	4798      	blx	r3
			frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, 0, macAckOnlyDataCallback);
    c8fa:	4b4c      	ldr	r3, [pc, #304]	; (ca2c <MiApp_SendData+0x20c>)
    c8fc:	8819      	ldrh	r1, [r3, #0]
    c8fe:	4b4c      	ldr	r3, [pc, #304]	; (ca30 <MiApp_SendData+0x210>)
    c900:	9305      	str	r3, [sp, #20]
    c902:	9704      	str	r7, [sp, #16]
    c904:	9603      	str	r6, [sp, #12]
    c906:	4643      	mov	r3, r8
    c908:	9302      	str	r3, [sp, #8]
    c90a:	9501      	str	r5, [sp, #4]
    c90c:	9700      	str	r7, [sp, #0]
    c90e:	2300      	movs	r3, #0
    c910:	9a07      	ldr	r2, [sp, #28]
    c912:	2001      	movs	r0, #1
    c914:	4d47      	ldr	r5, [pc, #284]	; (ca34 <MiApp_SendData+0x214>)
    c916:	47a8      	blx	r5
			miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c918:	0021      	movs	r1, r4
    c91a:	4847      	ldr	r0, [pc, #284]	; (ca38 <MiApp_SendData+0x218>)
    c91c:	4b47      	ldr	r3, [pc, #284]	; (ca3c <MiApp_SendData+0x21c>)
    c91e:	4798      	blx	r3
			return true;
    c920:	2401      	movs	r4, #1
    c922:	e790      	b.n	c846 <MiApp_SendData+0x26>
			if (MY_ADDRESS_LENGTH == addr_len && isSameAddress(addr, miwiDefaultRomOrRamParams->ConnectionTable[0].Address))
    c924:	9b08      	ldr	r3, [sp, #32]
    c926:	2b08      	cmp	r3, #8
    c928:	d034      	beq.n	c994 <MiApp_SendData+0x174>
				dataFramePtr->dataFrame.msg[0] = CMD_FORWRD_PACKET;
    c92a:	23cc      	movs	r3, #204	; 0xcc
    c92c:	75bb      	strb	r3, [r7, #22]
				dataFramePtr->dataFrame.msg[1] = addr[0];
    c92e:	9a07      	ldr	r2, [sp, #28]
    c930:	7813      	ldrb	r3, [r2, #0]
    c932:	75fb      	strb	r3, [r7, #23]
				dataFramePtr->dataFrame.msg[2] = addr[1];
    c934:	7853      	ldrb	r3, [r2, #1]
    c936:	763b      	strb	r3, [r7, #24]
				dataFramePtr->dataFrame.msg[3] = addr[2];
    c938:	7893      	ldrb	r3, [r2, #2]
    c93a:	767b      	strb	r3, [r7, #25]
				memcpy(&(dataFramePtr->dataFrame.msg[4]), msgpointer, msglen);
    c93c:	002a      	movs	r2, r5
    c93e:	9909      	ldr	r1, [sp, #36]	; 0x24
    c940:	0038      	movs	r0, r7
    c942:	301a      	adds	r0, #26
    c944:	4b37      	ldr	r3, [pc, #220]	; (ca24 <MiApp_SendData+0x204>)
    c946:	4798      	blx	r3
				dataFramePtr->dataFrame.msgLength = msglen + 4;
    c948:	3504      	adds	r5, #4
    c94a:	b2ed      	uxtb	r5, r5
    c94c:	757d      	strb	r5, [r7, #21]
				if (ackReq)
    c94e:	464b      	mov	r3, r9
    c950:	2b00      	cmp	r3, #0
    c952:	d045      	beq.n	c9e0 <MiApp_SendData+0x1c0>
					dataFramePtr->dataFrame.timeout = SW_ACK_TIMEOUT + 1;
    c954:	2303      	movs	r3, #3
    c956:	743b      	strb	r3, [r7, #16]
					frameTransmit(broadcast, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[0].Address, true, false, dataFramePtr->dataFrame.msgLength, dataFramePtr->dataFrame.msg, msghandle, ackReq, appAckWaitDataCallback);
    c958:	4b3a      	ldr	r3, [pc, #232]	; (ca44 <MiApp_SendData+0x224>)
    c95a:	681b      	ldr	r3, [r3, #0]
    c95c:	681a      	ldr	r2, [r3, #0]
    c95e:	3204      	adds	r2, #4
    c960:	4b32      	ldr	r3, [pc, #200]	; (ca2c <MiApp_SendData+0x20c>)
    c962:	8819      	ldrh	r1, [r3, #0]
    c964:	4b38      	ldr	r3, [pc, #224]	; (ca48 <MiApp_SendData+0x228>)
    c966:	9305      	str	r3, [sp, #20]
    c968:	2301      	movs	r3, #1
    c96a:	9304      	str	r3, [sp, #16]
    c96c:	9603      	str	r6, [sp, #12]
    c96e:	003b      	movs	r3, r7
    c970:	3316      	adds	r3, #22
    c972:	9302      	str	r3, [sp, #8]
    c974:	9501      	str	r5, [sp, #4]
    c976:	2300      	movs	r3, #0
    c978:	9300      	str	r3, [sp, #0]
    c97a:	3301      	adds	r3, #1
    c97c:	2000      	movs	r0, #0
    c97e:	4c2d      	ldr	r4, [pc, #180]	; (ca34 <MiApp_SendData+0x214>)
    c980:	47a0      	blx	r4
					miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t*)dataFramePtr);
    c982:	0039      	movs	r1, r7
    c984:	4831      	ldr	r0, [pc, #196]	; (ca4c <MiApp_SendData+0x22c>)
    c986:	4b2d      	ldr	r3, [pc, #180]	; (ca3c <MiApp_SendData+0x21c>)
    c988:	4798      	blx	r3
					SYS_TimerStart(&dataTimer);
    c98a:	4831      	ldr	r0, [pc, #196]	; (ca50 <MiApp_SendData+0x230>)
    c98c:	4b31      	ldr	r3, [pc, #196]	; (ca54 <MiApp_SendData+0x234>)
    c98e:	4798      	blx	r3
	return true;
    c990:	464c      	mov	r4, r9
    c992:	e758      	b.n	c846 <MiApp_SendData+0x26>
			if (MY_ADDRESS_LENGTH == addr_len && isSameAddress(addr, miwiDefaultRomOrRamParams->ConnectionTable[0].Address))
    c994:	4b2b      	ldr	r3, [pc, #172]	; (ca44 <MiApp_SendData+0x224>)
    c996:	681b      	ldr	r3, [r3, #0]
    c998:	6819      	ldr	r1, [r3, #0]
    c99a:	3104      	adds	r1, #4
    c99c:	0020      	movs	r0, r4
    c99e:	4b2e      	ldr	r3, [pc, #184]	; (ca58 <MiApp_SendData+0x238>)
    c9a0:	4798      	blx	r3
    c9a2:	1e04      	subs	r4, r0, #0
    c9a4:	d0c1      	beq.n	c92a <MiApp_SendData+0x10a>
				memcpy(&(dataFramePtr->dataFrame.msg), msgpointer, msglen);
    c9a6:	2316      	movs	r3, #22
    c9a8:	4698      	mov	r8, r3
    c9aa:	44b8      	add	r8, r7
    c9ac:	002a      	movs	r2, r5
    c9ae:	9909      	ldr	r1, [sp, #36]	; 0x24
    c9b0:	4640      	mov	r0, r8
    c9b2:	4b1c      	ldr	r3, [pc, #112]	; (ca24 <MiApp_SendData+0x204>)
    c9b4:	4798      	blx	r3
				frameTransmit(broadcast, myPANID, addr, false, false, msglen, dataFramePtr->dataFrame.msg, msghandle, ackReq, macAckOnlyDataCallback);
    c9b6:	4b1d      	ldr	r3, [pc, #116]	; (ca2c <MiApp_SendData+0x20c>)
    c9b8:	8819      	ldrh	r1, [r3, #0]
    c9ba:	4b1d      	ldr	r3, [pc, #116]	; (ca30 <MiApp_SendData+0x210>)
    c9bc:	9305      	str	r3, [sp, #20]
    c9be:	464b      	mov	r3, r9
    c9c0:	9304      	str	r3, [sp, #16]
    c9c2:	9603      	str	r6, [sp, #12]
    c9c4:	4643      	mov	r3, r8
    c9c6:	9302      	str	r3, [sp, #8]
    c9c8:	9501      	str	r5, [sp, #4]
    c9ca:	2300      	movs	r3, #0
    c9cc:	9300      	str	r3, [sp, #0]
    c9ce:	9a07      	ldr	r2, [sp, #28]
    c9d0:	2000      	movs	r0, #0
    c9d2:	4d18      	ldr	r5, [pc, #96]	; (ca34 <MiApp_SendData+0x214>)
    c9d4:	47a8      	blx	r5
				miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    c9d6:	0039      	movs	r1, r7
    c9d8:	4817      	ldr	r0, [pc, #92]	; (ca38 <MiApp_SendData+0x218>)
    c9da:	4b18      	ldr	r3, [pc, #96]	; (ca3c <MiApp_SendData+0x21c>)
    c9dc:	4798      	blx	r3
    c9de:	e732      	b.n	c846 <MiApp_SendData+0x26>
					frameTransmit(broadcast, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[0].Address, true, false, dataFramePtr->dataFrame.msgLength, dataFramePtr->dataFrame.msg, msghandle, ackReq, macAckOnlyDataCallback);
    c9e0:	4b18      	ldr	r3, [pc, #96]	; (ca44 <MiApp_SendData+0x224>)
    c9e2:	681b      	ldr	r3, [r3, #0]
    c9e4:	681a      	ldr	r2, [r3, #0]
    c9e6:	3204      	adds	r2, #4
    c9e8:	4b10      	ldr	r3, [pc, #64]	; (ca2c <MiApp_SendData+0x20c>)
    c9ea:	8819      	ldrh	r1, [r3, #0]
    c9ec:	4b10      	ldr	r3, [pc, #64]	; (ca30 <MiApp_SendData+0x210>)
    c9ee:	9305      	str	r3, [sp, #20]
    c9f0:	2300      	movs	r3, #0
    c9f2:	9304      	str	r3, [sp, #16]
    c9f4:	9603      	str	r6, [sp, #12]
    c9f6:	0038      	movs	r0, r7
    c9f8:	3016      	adds	r0, #22
    c9fa:	9002      	str	r0, [sp, #8]
    c9fc:	9501      	str	r5, [sp, #4]
    c9fe:	9300      	str	r3, [sp, #0]
    ca00:	3301      	adds	r3, #1
    ca02:	2000      	movs	r0, #0
    ca04:	4c0b      	ldr	r4, [pc, #44]	; (ca34 <MiApp_SendData+0x214>)
    ca06:	47a0      	blx	r4
					miQueueAppend(&macAckOnlyFrameQueue, (miQueueBuffer_t*)dataFramePtr);
    ca08:	0039      	movs	r1, r7
    ca0a:	480b      	ldr	r0, [pc, #44]	; (ca38 <MiApp_SendData+0x218>)
    ca0c:	4b0b      	ldr	r3, [pc, #44]	; (ca3c <MiApp_SendData+0x21c>)
    ca0e:	4798      	blx	r3
	return true;
    ca10:	2401      	movs	r4, #1
    ca12:	e718      	b.n	c846 <MiApp_SendData+0x26>
				return false;
    ca14:	2400      	movs	r4, #0
    ca16:	e716      	b.n	c846 <MiApp_SendData+0x26>
			return false;
    ca18:	2400      	movs	r4, #0
    ca1a:	e714      	b.n	c846 <MiApp_SendData+0x26>
    ca1c:	20000418 	.word	0x20000418
    ca20:	0000d431 	.word	0x0000d431
    ca24:	00011e37 	.word	0x00011e37
    ca28:	20002124 	.word	0x20002124
    ca2c:	20002044 	.word	0x20002044
    ca30:	0000d211 	.word	0x0000d211
    ca34:	0000c259 	.word	0x0000c259
    ca38:	20002008 	.word	0x20002008
    ca3c:	0000d62d 	.word	0x0000d62d
    ca40:	0000ffff 	.word	0x0000ffff
    ca44:	20002034 	.word	0x20002034
    ca48:	0000d2b5 	.word	0x0000d2b5
    ca4c:	200020ac 	.word	0x200020ac
    ca50:	200003f8 	.word	0x200003f8
    ca54:	0000d7d5 	.word	0x0000d7d5
    ca58:	0000c145 	.word	0x0000c145

0000ca5c <P2PTasks>:
{
    ca5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca5e:	46de      	mov	lr, fp
    ca60:	464f      	mov	r7, r9
    ca62:	4646      	mov	r6, r8
    ca64:	b5c0      	push	{r6, r7, lr}
    ca66:	b08a      	sub	sp, #40	; 0x28
    currentTick.Val = MiWi_TickGet();
    ca68:	4bcc      	ldr	r3, [pc, #816]	; (cd9c <P2PTasks+0x340>)
    ca6a:	4798      	blx	r3
    ca6c:	0004      	movs	r4, r0
    if (frameTxQueue.size && txCallbackReceived && (MiWi_TickGetDiff(currentTick, lastTxFrameTick) > (transaction_duration_us)))
    ca6e:	4bcc      	ldr	r3, [pc, #816]	; (cda0 <P2PTasks+0x344>)
    ca70:	7a1b      	ldrb	r3, [r3, #8]
    ca72:	2b00      	cmp	r3, #0
    ca74:	d003      	beq.n	ca7e <P2PTasks+0x22>
    ca76:	4bcb      	ldr	r3, [pc, #812]	; (cda4 <P2PTasks+0x348>)
    ca78:	781b      	ldrb	r3, [r3, #0]
    ca7a:	2b00      	cmp	r3, #0
    ca7c:	d10d      	bne.n	ca9a <P2PTasks+0x3e>
    if(MiMAC_ReceivedPacket())
    ca7e:	4bca      	ldr	r3, [pc, #808]	; (cda8 <P2PTasks+0x34c>)
    ca80:	4798      	blx	r3
    ca82:	2800      	cmp	r0, #0
    ca84:	d139      	bne.n	cafa <P2PTasks+0x9e>
    MiMAC_Task();
    ca86:	4bc9      	ldr	r3, [pc, #804]	; (cdac <P2PTasks+0x350>)
    ca88:	4798      	blx	r3
    SYS_TimerTaskHandler();
    ca8a:	4bc9      	ldr	r3, [pc, #804]	; (cdb0 <P2PTasks+0x354>)
    ca8c:	4798      	blx	r3
}
    ca8e:	b00a      	add	sp, #40	; 0x28
    ca90:	bc1c      	pop	{r2, r3, r4}
    ca92:	4690      	mov	r8, r2
    ca94:	4699      	mov	r9, r3
    ca96:	46a3      	mov	fp, r4
    ca98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (frameTxQueue.size && txCallbackReceived && (MiWi_TickGetDiff(currentTick, lastTxFrameTick) > (transaction_duration_us)))
    ca9a:	4bc6      	ldr	r3, [pc, #792]	; (cdb4 <P2PTasks+0x358>)
    ca9c:	6819      	ldr	r1, [r3, #0]
    ca9e:	4bc6      	ldr	r3, [pc, #792]	; (cdb8 <P2PTasks+0x35c>)
    caa0:	4798      	blx	r3
    caa2:	4bc6      	ldr	r3, [pc, #792]	; (cdbc <P2PTasks+0x360>)
    caa4:	681b      	ldr	r3, [r3, #0]
    caa6:	4298      	cmp	r0, r3
    caa8:	d9e9      	bls.n	ca7e <P2PTasks+0x22>
        txFramePtr =  (TxFrame_t *)miQueueRemove(&frameTxQueue, NULL);
    caaa:	2100      	movs	r1, #0
    caac:	48bc      	ldr	r0, [pc, #752]	; (cda0 <P2PTasks+0x344>)
    caae:	4bc4      	ldr	r3, [pc, #784]	; (cdc0 <P2PTasks+0x364>)
    cab0:	4798      	blx	r3
    cab2:	1e05      	subs	r5, r0, #0
        if (NULL != txFramePtr)
    cab4:	d0e3      	beq.n	ca7e <P2PTasks+0x22>
            sentFrame = txFramePtr;
    cab6:	4bc3      	ldr	r3, [pc, #780]	; (cdc4 <P2PTasks+0x368>)
    cab8:	6018      	str	r0, [r3, #0]
            if ( (txFramePtr->txFrameEntry.frameLength + MAC_OVERHEAD + PHY_OVERHEAD) > aMaxSIFSFrameSize)
    caba:	2324      	movs	r3, #36	; 0x24
    cabc:	5cc3      	ldrb	r3, [r0, r3]
    cabe:	331c      	adds	r3, #28
                transaction_duration_sym = macMinLIFSPeriod_def;
    cac0:	2028      	movs	r0, #40	; 0x28
            if ( (txFramePtr->txFrameEntry.frameLength + MAC_OVERHEAD + PHY_OVERHEAD) > aMaxSIFSFrameSize)
    cac2:	2b12      	cmp	r3, #18
    cac4:	dc00      	bgt.n	cac8 <P2PTasks+0x6c>
                transaction_duration_sym = macMinSIFSPeriod_def;
    cac6:	381c      	subs	r0, #28
            transaction_duration_us = MiMAC_SymbolToTicks(transaction_duration_sym);
    cac8:	3020      	adds	r0, #32
    caca:	4bbf      	ldr	r3, [pc, #764]	; (cdc8 <P2PTasks+0x36c>)
    cacc:	4798      	blx	r3
    cace:	4bbb      	ldr	r3, [pc, #748]	; (cdbc <P2PTasks+0x360>)
    cad0:	6018      	str	r0, [r3, #0]
            lastTxFrameTick = currentTick;
    cad2:	4bb8      	ldr	r3, [pc, #736]	; (cdb4 <P2PTasks+0x358>)
    cad4:	601c      	str	r4, [r3, #0]
            MiMAC_SendPacket(txFramePtr->txFrameEntry.frameParam, txFramePtr->txFrameEntry.frame,
    cad6:	696b      	ldr	r3, [r5, #20]
    cad8:	4abc      	ldr	r2, [pc, #752]	; (cdcc <P2PTasks+0x370>)
    cada:	9202      	str	r2, [sp, #8]
    cadc:	2225      	movs	r2, #37	; 0x25
    cade:	5caa      	ldrb	r2, [r5, r2]
    cae0:	9201      	str	r2, [sp, #4]
    cae2:	2224      	movs	r2, #36	; 0x24
    cae4:	5caa      	ldrb	r2, [r5, r2]
    cae6:	9200      	str	r2, [sp, #0]
    cae8:	69a8      	ldr	r0, [r5, #24]
    caea:	69e9      	ldr	r1, [r5, #28]
    caec:	6a2a      	ldr	r2, [r5, #32]
    caee:	4cb8      	ldr	r4, [pc, #736]	; (cdd0 <P2PTasks+0x374>)
    caf0:	47a0      	blx	r4
            txCallbackReceived = false;
    caf2:	2200      	movs	r2, #0
    caf4:	4bab      	ldr	r3, [pc, #684]	; (cda4 <P2PTasks+0x348>)
    caf6:	701a      	strb	r2, [r3, #0]
    caf8:	e7c1      	b.n	ca7e <P2PTasks+0x22>
    rxMessage.flags.bits.broadcast = MACRxPacket.flags.bits.broadcast;
    cafa:	4bb6      	ldr	r3, [pc, #728]	; (cdd4 <P2PTasks+0x378>)
    cafc:	7819      	ldrb	r1, [r3, #0]
    cafe:	074a      	lsls	r2, r1, #29
    rxMessage.flags.bits.secEn = MACRxPacket.flags.bits.secEn;
    cb00:	08cd      	lsrs	r5, r1, #3
    cb02:	2401      	movs	r4, #1
    cb04:	4025      	ands	r5, r4
    cb06:	00ed      	lsls	r5, r5, #3
    cb08:	0fd2      	lsrs	r2, r2, #31
    rxMessage.flags.bits.command = (MACRxPacket.flags.bits.packetType == PACKET_TYPE_COMMAND) ? 1:0;
    cb0a:	2303      	movs	r3, #3
    cb0c:	400b      	ands	r3, r1
    cb0e:	3b01      	subs	r3, #1
    cb10:	425f      	negs	r7, r3
    cb12:	415f      	adcs	r7, r3
    cb14:	003b      	movs	r3, r7
    cb16:	4023      	ands	r3, r4
    cb18:	015b      	lsls	r3, r3, #5
    cb1a:	432a      	orrs	r2, r5
    rxMessage.flags.bits.srcPrsnt = MACRxPacket.flags.bits.sourcePrsnt;
    cb1c:	09cd      	lsrs	r5, r1, #7
    cb1e:	402c      	ands	r4, r5
    cb20:	01a4      	lsls	r4, r4, #6
    cb22:	4313      	orrs	r3, r2
    cb24:	4323      	orrs	r3, r4
    cb26:	4aac      	ldr	r2, [pc, #688]	; (cdd8 <P2PTasks+0x37c>)
    cb28:	7013      	strb	r3, [r2, #0]
    if( MACRxPacket.flags.bits.sourcePrsnt )
    cb2a:	b249      	sxtb	r1, r1
    cb2c:	2900      	cmp	r1, #0
    cb2e:	db19      	blt.n	cb64 <P2PTasks+0x108>
    rxMessage.SourcePANID.Val = MACRxPacket.SourcePANID.Val;
    cb30:	4aa8      	ldr	r2, [pc, #672]	; (cdd4 <P2PTasks+0x378>)
    cb32:	8a15      	ldrh	r5, [r2, #16]
    cb34:	4ba8      	ldr	r3, [pc, #672]	; (cdd8 <P2PTasks+0x37c>)
    cb36:	805d      	strh	r5, [r3, #2]
    rxMessage.PayloadSize = MACRxPacket.PayloadLen;
    cb38:	7b16      	ldrb	r6, [r2, #12]
    cb3a:	731e      	strb	r6, [r3, #12]
    rxMessage.Payload = MACRxPacket.Payload;
    cb3c:	6894      	ldr	r4, [r2, #8]
    cb3e:	609c      	str	r4, [r3, #8]
    rxMessage.PacketLQI = MACRxPacket.LQIValue;
    cb40:	7b91      	ldrb	r1, [r2, #14]
    cb42:	7399      	strb	r1, [r3, #14]
    rxMessage.PacketRSSI = MACRxPacket.RSSIValue;
    cb44:	7b52      	ldrb	r2, [r2, #13]
    cb46:	735a      	strb	r2, [r3, #13]
    if( rxMessage.flags.bits.command )
    cb48:	781b      	ldrb	r3, [r3, #0]
    cb4a:	069b      	lsls	r3, r3, #26
    cb4c:	d400      	bmi.n	cb50 <P2PTasks+0xf4>
    cb4e:	e348      	b.n	d1e2 <P2PTasks+0x786>
        switch( rxMessage.Payload[0] )
    cb50:	7823      	ldrb	r3, [r4, #0]
    cb52:	3b77      	subs	r3, #119	; 0x77
    cb54:	b2da      	uxtb	r2, r3
    cb56:	2a63      	cmp	r2, #99	; 0x63
    cb58:	d900      	bls.n	cb5c <P2PTasks+0x100>
    cb5a:	e346      	b.n	d1ea <P2PTasks+0x78e>
    cb5c:	0093      	lsls	r3, r2, #2
    cb5e:	4a9f      	ldr	r2, [pc, #636]	; (cddc <P2PTasks+0x380>)
    cb60:	58d3      	ldr	r3, [r2, r3]
    cb62:	469f      	mov	pc, r3
        rxMessage.SourceAddress = MACRxPacket.SourceAddress;
    cb64:	4b9b      	ldr	r3, [pc, #620]	; (cdd4 <P2PTasks+0x378>)
    cb66:	685a      	ldr	r2, [r3, #4]
    cb68:	4b9b      	ldr	r3, [pc, #620]	; (cdd8 <P2PTasks+0x37c>)
    cb6a:	605a      	str	r2, [r3, #4]
    cb6c:	e7e0      	b.n	cb30 <P2PTasks+0xd4>
                if(PAN_COORD != role)
    cb6e:	4b9c      	ldr	r3, [pc, #624]	; (cde0 <P2PTasks+0x384>)
    cb70:	781b      	ldrb	r3, [r3, #0]
    cb72:	2b01      	cmp	r3, #1
    cb74:	d000      	beq.n	cb78 <P2PTasks+0x11c>
    cb76:	e338      	b.n	d1ea <P2PTasks+0x78e>
                if( ConnMode > ENABLE_PREV_CONN )
    cb78:	4b9a      	ldr	r3, [pc, #616]	; (cde4 <P2PTasks+0x388>)
    cb7a:	781b      	ldrb	r3, [r3, #0]
    cb7c:	2b01      	cmp	r3, #1
    cb7e:	d900      	bls.n	cb82 <P2PTasks+0x126>
    cb80:	e333      	b.n	d1ea <P2PTasks+0x78e>
                if( currentChannel != rxMessage.Payload[1] )
    cb82:	7862      	ldrb	r2, [r4, #1]
    cb84:	4b98      	ldr	r3, [pc, #608]	; (cde8 <P2PTasks+0x38c>)
    cb86:	781b      	ldrb	r3, [r3, #0]
    cb88:	429a      	cmp	r2, r3
    cb8a:	d000      	beq.n	cb8e <P2PTasks+0x132>
    cb8c:	e32d      	b.n	d1ea <P2PTasks+0x78e>
                if( (rxMessage.SourcePANID.Val != 0xFFFF) && (rxMessage.SourcePANID.Val != myPANID.Val) &&
    cb8e:	4b97      	ldr	r3, [pc, #604]	; (cdec <P2PTasks+0x390>)
    cb90:	429d      	cmp	r5, r3
    cb92:	d007      	beq.n	cba4 <P2PTasks+0x148>
    cb94:	4b96      	ldr	r3, [pc, #600]	; (cdf0 <P2PTasks+0x394>)
    cb96:	881b      	ldrh	r3, [r3, #0]
    cb98:	42ab      	cmp	r3, r5
    cb9a:	d003      	beq.n	cba4 <P2PTasks+0x148>
                    status = STATUS_NOT_SAME_PAN;
    cb9c:	23f2      	movs	r3, #242	; 0xf2
    cb9e:	4698      	mov	r8, r3
                if( (rxMessage.SourcePANID.Val != 0xFFFF) && (rxMessage.SourcePANID.Val != myPANID.Val) &&
    cba0:	2e02      	cmp	r6, #2
    cba2:	d803      	bhi.n	cbac <P2PTasks+0x150>
                    status = AddConnection(rxMessage.Payload[2]);
    cba4:	78a0      	ldrb	r0, [r4, #2]
    cba6:	4b93      	ldr	r3, [pc, #588]	; (cdf4 <P2PTasks+0x398>)
    cba8:	4798      	blx	r3
    cbaa:	4680      	mov	r8, r0
                if (rxMessage.Payload[3] == 0xAA)
    cbac:	4b8a      	ldr	r3, [pc, #552]	; (cdd8 <P2PTasks+0x37c>)
    cbae:	689b      	ldr	r3, [r3, #8]
    cbb0:	78db      	ldrb	r3, [r3, #3]
    cbb2:	2baa      	cmp	r3, #170	; 0xaa
    cbb4:	d02d      	beq.n	cc12 <P2PTasks+0x1b6>
                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    cbb6:	4b8b      	ldr	r3, [pc, #556]	; (cde4 <P2PTasks+0x388>)
    cbb8:	781b      	ldrb	r3, [r3, #0]
    cbba:	2b01      	cmp	r3, #1
    cbbc:	d043      	beq.n	cc46 <P2PTasks+0x1ea>
                dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    cbbe:	2050      	movs	r0, #80	; 0x50
    cbc0:	4b8d      	ldr	r3, [pc, #564]	; (cdf8 <P2PTasks+0x39c>)
    cbc2:	4798      	blx	r3
    cbc4:	1e02      	subs	r2, r0, #0
                if (NULL == dataPtr)
    cbc6:	d100      	bne.n	cbca <P2PTasks+0x16e>
    cbc8:	e30f      	b.n	d1ea <P2PTasks+0x78e>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    cbca:	2391      	movs	r3, #145	; 0x91
    cbcc:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = status;
    cbce:	4643      	mov	r3, r8
    cbd0:	7043      	strb	r3, [r0, #1]
                dataPtr[dataLen++] = MyindexinPC;
    cbd2:	4b8a      	ldr	r3, [pc, #552]	; (cdfc <P2PTasks+0x3a0>)
    cbd4:	781b      	ldrb	r3, [r3, #0]
    cbd6:	7083      	strb	r3, [r0, #2]
    cbd8:	2403      	movs	r4, #3
                if( status == STATUS_SUCCESS || status == STATUS_EXISTS )
    cbda:	4643      	mov	r3, r8
    cbdc:	2b01      	cmp	r3, #1
    cbde:	d957      	bls.n	cc90 <P2PTasks+0x234>
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    cbe0:	497d      	ldr	r1, [pc, #500]	; (cdd8 <P2PTasks+0x37c>)
    cbe2:	4b87      	ldr	r3, [pc, #540]	; (ce00 <P2PTasks+0x3a4>)
    cbe4:	9305      	str	r3, [sp, #20]
    cbe6:	2301      	movs	r3, #1
    cbe8:	9304      	str	r3, [sp, #16]
    cbea:	2000      	movs	r0, #0
    cbec:	9003      	str	r0, [sp, #12]
    cbee:	9202      	str	r2, [sp, #8]
    cbf0:	9401      	str	r4, [sp, #4]
    cbf2:	780a      	ldrb	r2, [r1, #0]
    cbf4:	0712      	lsls	r2, r2, #28
    cbf6:	0fd2      	lsrs	r2, r2, #31
    cbf8:	9200      	str	r2, [sp, #0]
    cbfa:	684a      	ldr	r2, [r1, #4]
    cbfc:	8849      	ldrh	r1, [r1, #2]
    cbfe:	4c81      	ldr	r4, [pc, #516]	; (ce04 <P2PTasks+0x3a8>)
    cc00:	47a0      	blx	r4
                if( status == STATUS_SUCCESS )
    cc02:	4643      	mov	r3, r8
    cc04:	2b00      	cmp	r3, #0
    cc06:	d000      	beq.n	cc0a <P2PTasks+0x1ae>
    cc08:	e2ef      	b.n	d1ea <P2PTasks+0x78e>
                     PDS_Store(PDS_CONNECTION_TABLE_ID);
    cc0a:	2006      	movs	r0, #6
    cc0c:	4b7e      	ldr	r3, [pc, #504]	; (ce08 <P2PTasks+0x3ac>)
    cc0e:	4798      	blx	r3
    cc10:	e2eb      	b.n	d1ea <P2PTasks+0x78e>
                        if (isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[p].Address) )
    cc12:	4b71      	ldr	r3, [pc, #452]	; (cdd8 <P2PTasks+0x37c>)
    cc14:	685b      	ldr	r3, [r3, #4]
    cc16:	9306      	str	r3, [sp, #24]
    cc18:	4b7c      	ldr	r3, [pc, #496]	; (ce0c <P2PTasks+0x3b0>)
    cc1a:	681f      	ldr	r7, [r3, #0]
    cc1c:	2500      	movs	r5, #0
    cc1e:	4b7c      	ldr	r3, [pc, #496]	; (ce10 <P2PTasks+0x3b4>)
    cc20:	4699      	mov	r9, r3
                             miwiDefaultRomOrRamParams->ConnectionTable[p].permanent_connections = 0xFF;
    cc22:	23ff      	movs	r3, #255	; 0xff
    cc24:	469b      	mov	fp, r3
                    for (uint8_t p = 0 ;p <CONNECTION_SIZE;p++)
    cc26:	26a0      	movs	r6, #160	; 0xa0
    cc28:	0076      	lsls	r6, r6, #1
    cc2a:	e002      	b.n	cc32 <P2PTasks+0x1d6>
    cc2c:	3510      	adds	r5, #16
    cc2e:	42b5      	cmp	r5, r6
    cc30:	d0c1      	beq.n	cbb6 <P2PTasks+0x15a>
                        if (isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[p].Address) )
    cc32:	683b      	ldr	r3, [r7, #0]
    cc34:	195c      	adds	r4, r3, r5
    cc36:	1d21      	adds	r1, r4, #4
    cc38:	9806      	ldr	r0, [sp, #24]
    cc3a:	47c8      	blx	r9
    cc3c:	2800      	cmp	r0, #0
    cc3e:	d0f5      	beq.n	cc2c <P2PTasks+0x1d0>
                             miwiDefaultRomOrRamParams->ConnectionTable[p].permanent_connections = 0xFF;
    cc40:	465b      	mov	r3, fp
    cc42:	73e3      	strb	r3, [r4, #15]
    cc44:	e7f2      	b.n	cc2c <P2PTasks+0x1d0>
                if( (ConnMode == ENABLE_PREV_CONN) && (status != STATUS_EXISTS && status != STATUS_ACTIVE_SCAN) )
    cc46:	4643      	mov	r3, r8
    cc48:	3b01      	subs	r3, #1
    cc4a:	b2db      	uxtb	r3, r3
    cc4c:	2b01      	cmp	r3, #1
    cc4e:	d9b6      	bls.n	cbbe <P2PTasks+0x162>
                dataPtr = MiMem_Alloc(TX_BUFFER_SIZE);
    cc50:	2050      	movs	r0, #80	; 0x50
    cc52:	4b69      	ldr	r3, [pc, #420]	; (cdf8 <P2PTasks+0x39c>)
    cc54:	4798      	blx	r3
    cc56:	1e02      	subs	r2, r0, #0
                if (NULL == dataPtr)
    cc58:	d100      	bne.n	cc5c <P2PTasks+0x200>
    cc5a:	e2c6      	b.n	d1ea <P2PTasks+0x78e>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_RESPONSE;
    cc5c:	2391      	movs	r3, #145	; 0x91
    cc5e:	7013      	strb	r3, [r2, #0]
                dataPtr[dataLen++] = status;
    cc60:	3362      	adds	r3, #98	; 0x62
    cc62:	7053      	strb	r3, [r2, #1]
                dataPtr[dataLen++] = MyindexinPC;
    cc64:	4b65      	ldr	r3, [pc, #404]	; (cdfc <P2PTasks+0x3a0>)
    cc66:	781b      	ldrb	r3, [r3, #0]
    cc68:	7093      	strb	r3, [r2, #2]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    cc6a:	495b      	ldr	r1, [pc, #364]	; (cdd8 <P2PTasks+0x37c>)
    cc6c:	4b64      	ldr	r3, [pc, #400]	; (ce00 <P2PTasks+0x3a4>)
    cc6e:	9305      	str	r3, [sp, #20]
    cc70:	2301      	movs	r3, #1
    cc72:	9304      	str	r3, [sp, #16]
    cc74:	2000      	movs	r0, #0
    cc76:	9003      	str	r0, [sp, #12]
    cc78:	9202      	str	r2, [sp, #8]
    cc7a:	2203      	movs	r2, #3
    cc7c:	9201      	str	r2, [sp, #4]
    cc7e:	780a      	ldrb	r2, [r1, #0]
    cc80:	0712      	lsls	r2, r2, #28
    cc82:	0fd2      	lsrs	r2, r2, #31
    cc84:	9200      	str	r2, [sp, #0]
    cc86:	684a      	ldr	r2, [r1, #4]
    cc88:	8849      	ldrh	r1, [r1, #2]
    cc8a:	4c5e      	ldr	r4, [pc, #376]	; (ce04 <P2PTasks+0x3a8>)
    cc8c:	47a0      	blx	r4
    cc8e:	e2ac      	b.n	d1ea <P2PTasks+0x78e>
                    dataPtr[dataLen++] = P2PCapacityInfo;
    cc90:	4b60      	ldr	r3, [pc, #384]	; (ce14 <P2PTasks+0x3b8>)
    cc92:	781b      	ldrb	r3, [r3, #0]
    cc94:	70c3      	strb	r3, [r0, #3]
                        dataPtr[dataLen++] = miwiDefaultRomOrRamParams->AdditionalNodeID[i];
    cc96:	4b5d      	ldr	r3, [pc, #372]	; (ce0c <P2PTasks+0x3b0>)
    cc98:	681b      	ldr	r3, [r3, #0]
    cc9a:	689b      	ldr	r3, [r3, #8]
    cc9c:	781b      	ldrb	r3, [r3, #0]
    cc9e:	7103      	strb	r3, [r0, #4]
    cca0:	3402      	adds	r4, #2
    cca2:	e79d      	b.n	cbe0 <P2PTasks+0x184>
                if(ESTABLISHING_NETWORK != p2pStarCurrentState)
    cca4:	4b5c      	ldr	r3, [pc, #368]	; (ce18 <P2PTasks+0x3bc>)
    cca6:	781b      	ldrb	r3, [r3, #0]
    cca8:	2b04      	cmp	r3, #4
    ccaa:	d000      	beq.n	ccae <P2PTasks+0x252>
    ccac:	e29d      	b.n	d1ea <P2PTasks+0x78e>
                switch( rxMessage.Payload[1] )
    ccae:	7863      	ldrb	r3, [r4, #1]
    ccb0:	2b01      	cmp	r3, #1
    ccb2:	d900      	bls.n	ccb6 <P2PTasks+0x25a>
    ccb4:	e299      	b.n	d1ea <P2PTasks+0x78e>
                    if( myPANID.Val == 0xFFFF )
    ccb6:	4b4e      	ldr	r3, [pc, #312]	; (cdf0 <P2PTasks+0x394>)
    ccb8:	881a      	ldrh	r2, [r3, #0]
    ccba:	4b4c      	ldr	r3, [pc, #304]	; (cdec <P2PTasks+0x390>)
    ccbc:	429a      	cmp	r2, r3
    ccbe:	d01c      	beq.n	ccfa <P2PTasks+0x29e>
                    if (rxMessage.Payload[1] == STATUS_EXISTS)
    ccc0:	4b45      	ldr	r3, [pc, #276]	; (cdd8 <P2PTasks+0x37c>)
    ccc2:	689b      	ldr	r3, [r3, #8]
    ccc4:	785a      	ldrb	r2, [r3, #1]
    ccc6:	2a01      	cmp	r2, #1
    ccc8:	d026      	beq.n	cd18 <P2PTasks+0x2bc>
                    else if (rxMessage.Payload[1] == STATUS_SUCCESS)
    ccca:	2a00      	cmp	r2, #0
    cccc:	d128      	bne.n	cd20 <P2PTasks+0x2c4>
                        gEstConnectionInfo.status = SUCCESS;
    ccce:	2100      	movs	r1, #0
    ccd0:	4a52      	ldr	r2, [pc, #328]	; (ce1c <P2PTasks+0x3c0>)
    ccd2:	7051      	strb	r1, [r2, #1]
                    gEstConnectionInfo.connectionRetries = 0;
    ccd4:	2100      	movs	r1, #0
    ccd6:	4a51      	ldr	r2, [pc, #324]	; (ce1c <P2PTasks+0x3c0>)
    ccd8:	70d1      	strb	r1, [r2, #3]
                    uint8_t status = AddConnection(rxMessage.Payload[3]);
    ccda:	78d8      	ldrb	r0, [r3, #3]
    ccdc:	4b45      	ldr	r3, [pc, #276]	; (cdf4 <P2PTasks+0x398>)
    ccde:	4798      	blx	r3
                    if ((status == STATUS_SUCCESS) || (status == STATUS_EXISTS))
    cce0:	2801      	cmp	r0, #1
    cce2:	d921      	bls.n	cd28 <P2PTasks+0x2cc>
                    myConnectionIndex_in_PanCo = rxMessage.Payload[2];
    cce4:	4b3c      	ldr	r3, [pc, #240]	; (cdd8 <P2PTasks+0x37c>)
    cce6:	689b      	ldr	r3, [r3, #8]
    cce8:	789a      	ldrb	r2, [r3, #2]
    ccea:	4b4d      	ldr	r3, [pc, #308]	; (ce20 <P2PTasks+0x3c4>)
    ccec:	701a      	strb	r2, [r3, #0]
                    PDS_Store(PDS_MYINDEX_ID);
    ccee:	2009      	movs	r0, #9
    ccf0:	4c45      	ldr	r4, [pc, #276]	; (ce08 <P2PTasks+0x3ac>)
    ccf2:	47a0      	blx	r4
                   PDS_Store(MIWI_ALL_MEMORY_MEM_ID);
    ccf4:	484b      	ldr	r0, [pc, #300]	; (ce24 <P2PTasks+0x3c8>)
    ccf6:	47a0      	blx	r4
    ccf8:	e277      	b.n	d1ea <P2PTasks+0x78e>
                        uint16_t broadcastAddr = 0xFFFF;
    ccfa:	201e      	movs	r0, #30
    ccfc:	ab02      	add	r3, sp, #8
    ccfe:	469c      	mov	ip, r3
    cd00:	4460      	add	r0, ip
    cd02:	2301      	movs	r3, #1
    cd04:	425b      	negs	r3, r3
    cd06:	8003      	strh	r3, [r0, #0]
                        myPANID.Val = rxMessage.SourcePANID.Val;
    cd08:	4939      	ldr	r1, [pc, #228]	; (cdf0 <P2PTasks+0x394>)
    cd0a:	800d      	strh	r5, [r1, #0]
                        MiMAC_SetAltAddress((uint8_t *)&broadcastAddr, (uint8_t *)&myPANID.Val);
    cd0c:	4b46      	ldr	r3, [pc, #280]	; (ce28 <P2PTasks+0x3cc>)
    cd0e:	4798      	blx	r3
                        PDS_Store(PDS_PANID_ID);
    cd10:	2002      	movs	r0, #2
    cd12:	4b3d      	ldr	r3, [pc, #244]	; (ce08 <P2PTasks+0x3ac>)
    cd14:	4798      	blx	r3
    cd16:	e7d3      	b.n	ccc0 <P2PTasks+0x264>
                        gEstConnectionInfo.status = ALREADY_EXISTS;
    cd18:	2106      	movs	r1, #6
    cd1a:	4a40      	ldr	r2, [pc, #256]	; (ce1c <P2PTasks+0x3c0>)
    cd1c:	7051      	strb	r1, [r2, #1]
    cd1e:	e7d9      	b.n	ccd4 <P2PTasks+0x278>
                        gEstConnectionInfo.status = FAILURE;
    cd20:	2101      	movs	r1, #1
    cd22:	4a3e      	ldr	r2, [pc, #248]	; (ce1c <P2PTasks+0x3c0>)
    cd24:	7051      	strb	r1, [r2, #1]
    cd26:	e7d5      	b.n	ccd4 <P2PTasks+0x278>
                        role = END_DEVICE;
    cd28:	2202      	movs	r2, #2
    cd2a:	4b2d      	ldr	r3, [pc, #180]	; (cde0 <P2PTasks+0x384>)
    cd2c:	701a      	strb	r2, [r3, #0]
    linkStatusTimeInterval = LINK_STATUS_TIMEOUT;
    cd2e:	3212      	adds	r2, #18
    cd30:	4b3e      	ldr	r3, [pc, #248]	; (ce2c <P2PTasks+0x3d0>)
    cd32:	801a      	strh	r2, [r3, #0]
	connectionTbLostCount = 0;	//clear it when reconnection to PAN
    cd34:	2200      	movs	r2, #0
    cd36:	4b3e      	ldr	r3, [pc, #248]	; (ce30 <P2PTasks+0x3d4>)
    cd38:	701a      	strb	r2, [r3, #0]
    cd3a:	e7d3      	b.n	cce4 <P2PTasks+0x288>
                if(ConnMode > ENABLE_ACTIVE_SCAN_RSP)
    cd3c:	4b29      	ldr	r3, [pc, #164]	; (cde4 <P2PTasks+0x388>)
    cd3e:	781b      	ldrb	r3, [r3, #0]
    cd40:	2b02      	cmp	r3, #2
    cd42:	d900      	bls.n	cd46 <P2PTasks+0x2ea>
    cd44:	e251      	b.n	d1ea <P2PTasks+0x78e>
                if( currentChannel != rxMessage.Payload[1] )
    cd46:	7862      	ldrb	r2, [r4, #1]
    cd48:	4b27      	ldr	r3, [pc, #156]	; (cde8 <P2PTasks+0x38c>)
    cd4a:	781b      	ldrb	r3, [r3, #0]
    cd4c:	429a      	cmp	r2, r3
    cd4e:	d000      	beq.n	cd52 <P2PTasks+0x2f6>
    cd50:	e24b      	b.n	d1ea <P2PTasks+0x78e>
                dataPtr = MiMem_Alloc(PACKETLEN_P2P_ACTIVE_SCAN_RESPONSE);
    cd52:	2003      	movs	r0, #3
    cd54:	4b28      	ldr	r3, [pc, #160]	; (cdf8 <P2PTasks+0x39c>)
    cd56:	4798      	blx	r3
                if (NULL == dataPtr)
    cd58:	2800      	cmp	r0, #0
    cd5a:	d100      	bne.n	cd5e <P2PTasks+0x302>
    cd5c:	e245      	b.n	d1ea <P2PTasks+0x78e>
                dataPtr[dataLen++] = CMD_P2P_ACTIVE_SCAN_RESPONSE;
    cd5e:	2397      	movs	r3, #151	; 0x97
    cd60:	7003      	strb	r3, [r0, #0]
                dataPtr[dataLen++] = P2PCapacityInfo;
    cd62:	4b2c      	ldr	r3, [pc, #176]	; (ce14 <P2PTasks+0x3b8>)
    cd64:	781b      	ldrb	r3, [r3, #0]
    cd66:	7043      	strb	r3, [r0, #1]
                    dataPtr[dataLen++] = (miwiDefaultRomOrRamParams->AdditionalNodeID[i]);
    cd68:	4b28      	ldr	r3, [pc, #160]	; (ce0c <P2PTasks+0x3b0>)
    cd6a:	681b      	ldr	r3, [r3, #0]
    cd6c:	689b      	ldr	r3, [r3, #8]
    cd6e:	781b      	ldrb	r3, [r3, #0]
    cd70:	7083      	strb	r3, [r0, #2]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    cd72:	4b19      	ldr	r3, [pc, #100]	; (cdd8 <P2PTasks+0x37c>)
    cd74:	685a      	ldr	r2, [r3, #4]
    cd76:	8859      	ldrh	r1, [r3, #2]
    cd78:	4c2e      	ldr	r4, [pc, #184]	; (ce34 <P2PTasks+0x3d8>)
    cd7a:	9405      	str	r4, [sp, #20]
    cd7c:	2401      	movs	r4, #1
    cd7e:	9404      	str	r4, [sp, #16]
    cd80:	2400      	movs	r4, #0
    cd82:	9403      	str	r4, [sp, #12]
    cd84:	9002      	str	r0, [sp, #8]
    cd86:	2003      	movs	r0, #3
    cd88:	9001      	str	r0, [sp, #4]
    cd8a:	781b      	ldrb	r3, [r3, #0]
    cd8c:	071b      	lsls	r3, r3, #28
    cd8e:	0fdb      	lsrs	r3, r3, #31
    cd90:	9300      	str	r3, [sp, #0]
    cd92:	2301      	movs	r3, #1
    cd94:	2000      	movs	r0, #0
    cd96:	4c1b      	ldr	r4, [pc, #108]	; (ce04 <P2PTasks+0x3a8>)
    cd98:	47a0      	blx	r4
    cd9a:	e226      	b.n	d1ea <P2PTasks+0x78e>
    cd9c:	0000d881 	.word	0x0000d881
    cda0:	20002098 	.word	0x20002098
    cda4:	20000018 	.word	0x20000018
    cda8:	0000b2fd 	.word	0x0000b2fd
    cdac:	0000b7b9 	.word	0x0000b7b9
    cdb0:	0000d7f5 	.word	0x0000d7f5
    cdb4:	20000410 	.word	0x20000410
    cdb8:	0000d8d1 	.word	0x0000d8d1
    cdbc:	20000438 	.word	0x20000438
    cdc0:	0000d665 	.word	0x0000d665
    cdc4:	2000214c 	.word	0x2000214c
    cdc8:	0000b79d 	.word	0x0000b79d
    cdcc:	0000be01 	.word	0x0000be01
    cdd0:	0000afad 	.word	0x0000afad
    cdd4:	20002020 	.word	0x20002020
    cdd8:	2000213c 	.word	0x2000213c
    cddc:	00013874 	.word	0x00013874
    cde0:	20002124 	.word	0x20002124
    cde4:	2000000b 	.word	0x2000000b
    cde8:	2000000d 	.word	0x2000000d
    cdec:	0000ffff 	.word	0x0000ffff
    cdf0:	20002044 	.word	0x20002044
    cdf4:	0000c16d 	.word	0x0000c16d
    cdf8:	0000d431 	.word	0x0000d431
    cdfc:	200020a4 	.word	0x200020a4
    ce00:	0000c629 	.word	0x0000c629
    ce04:	0000c259 	.word	0x0000c259
    ce08:	0000a66d 	.word	0x0000a66d
    ce0c:	20002034 	.word	0x20002034
    ce10:	0000c145 	.word	0x0000c145
    ce14:	2000000c 	.word	0x2000000c
    ce18:	20000418 	.word	0x20000418
    ce1c:	200020b8 	.word	0x200020b8
    ce20:	2000203c 	.word	0x2000203c
    ce24:	00004001 	.word	0x00004001
    ce28:	0000aa91 	.word	0x0000aa91
    ce2c:	20000416 	.word	0x20000416
    ce30:	200003f3 	.word	0x200003f3
    ce34:	0000bd95 	.word	0x0000bd95
                if(RESYNC_IN_PROGRESS == p2pStarCurrentState)
    ce38:	4bc6      	ldr	r3, [pc, #792]	; (d154 <P2PTasks+0x6f8>)
    ce3a:	781b      	ldrb	r3, [r3, #0]
    ce3c:	2b09      	cmp	r3, #9
    ce3e:	d000      	beq.n	ce42 <P2PTasks+0x3e6>
    ce40:	e1d3      	b.n	d1ea <P2PTasks+0x78e>
                    resyncInfo.resyncTimes = 0;
    ce42:	4cc5      	ldr	r4, [pc, #788]	; (d158 <P2PTasks+0x6fc>)
    ce44:	2500      	movs	r5, #0
    ce46:	7065      	strb	r5, [r4, #1]
                    p2pStarCurrentState = IN_NETWORK_STATE;
    ce48:	2207      	movs	r2, #7
    ce4a:	4bc2      	ldr	r3, [pc, #776]	; (d154 <P2PTasks+0x6f8>)
    ce4c:	701a      	strb	r2, [r3, #0]
                    resyncInfo.confCallback(currentChannel, SUCCESS);
    ce4e:	4bc3      	ldr	r3, [pc, #780]	; (d15c <P2PTasks+0x700>)
    ce50:	7818      	ldrb	r0, [r3, #0]
    ce52:	2100      	movs	r1, #0
    ce54:	68e3      	ldr	r3, [r4, #12]
    ce56:	4798      	blx	r3
                    resyncInfo.confCallback = NULL;
    ce58:	60e5      	str	r5, [r4, #12]
    ce5a:	e1c6      	b.n	d1ea <P2PTasks+0x78e>
				if (END_DEVICE == role)
    ce5c:	4bc0      	ldr	r3, [pc, #768]	; (d160 <P2PTasks+0x704>)
    ce5e:	781b      	ldrb	r3, [r3, #0]
    ce60:	2b02      	cmp	r3, #2
    ce62:	d000      	beq.n	ce66 <P2PTasks+0x40a>
    ce64:	e1c1      	b.n	d1ea <P2PTasks+0x78e>
static bool parse_connection_tb(uint8_t *payload)
{
	uint8_t i;
	bool parse_result = true;
	
	if(payload[1] > CONNECTION_SIZE)
    ce66:	7863      	ldrb	r3, [r4, #1]
    ce68:	469c      	mov	ip, r3
    ce6a:	2b14      	cmp	r3, #20
    ce6c:	d900      	bls.n	ce70 <P2PTasks+0x414>
    ce6e:	e1bc      	b.n	d1ea <P2PTasks+0x78e>
		return false;
	if(payload[2] >= CONNECTION_SIZE)
    ce70:	78a3      	ldrb	r3, [r4, #2]
    ce72:	2b13      	cmp	r3, #19
    ce74:	d900      	bls.n	ce78 <P2PTasks+0x41c>
    ce76:	e1b8      	b.n	d1ea <P2PTasks+0x78e>
		return false;
	if( (payload[2] + (TX_BUFFER_SIZE-4)/4) != payload[3] )
    ce78:	3313      	adds	r3, #19
    ce7a:	78e2      	ldrb	r2, [r4, #3]
    ce7c:	4293      	cmp	r3, r2
    ce7e:	d000      	beq.n	ce82 <P2PTasks+0x426>
    ce80:	e1b3      	b.n	d1ea <P2PTasks+0x78e>
		return false;
		
	for (i = 4; i < RX_BUFFER_SIZE; i+=4)
	{
		if((payload[i+3] != 0xff) && (payload[i+3] >= CONNECTION_SIZE))
    ce82:	79e3      	ldrb	r3, [r4, #7]
    ce84:	3b14      	subs	r3, #20
    ce86:	b2db      	uxtb	r3, r3
    ce88:	2bea      	cmp	r3, #234	; 0xea
    ce8a:	d800      	bhi.n	ce8e <P2PTasks+0x432>
    ce8c:	e1ad      	b.n	d1ea <P2PTasks+0x78e>
    ce8e:	0022      	movs	r2, r4
    ce90:	320b      	adds	r2, #11
    ce92:	0021      	movs	r1, r4
    ce94:	3153      	adds	r1, #83	; 0x53
    ce96:	7813      	ldrb	r3, [r2, #0]
    ce98:	3b14      	subs	r3, #20
    ce9a:	b2db      	uxtb	r3, r3
    ce9c:	2bea      	cmp	r3, #234	; 0xea
    ce9e:	d800      	bhi.n	cea2 <P2PTasks+0x446>
    cea0:	e1a3      	b.n	d1ea <P2PTasks+0x78e>
    cea2:	3204      	adds	r2, #4
	for (i = 4; i < RX_BUFFER_SIZE; i+=4)
    cea4:	4291      	cmp	r1, r2
    cea6:	d1f6      	bne.n	ce96 <P2PTasks+0x43a>
						end_nodes = rxMessage.Payload[1];
    cea8:	4bae      	ldr	r3, [pc, #696]	; (d164 <P2PTasks+0x708>)
    ceaa:	4662      	mov	r2, ip
    ceac:	701a      	strb	r2, [r3, #0]
    ceae:	1d23      	adds	r3, r4, #4
    ceb0:	0027      	movs	r7, r4
    ceb2:	3750      	adds	r7, #80	; 0x50
    for (i = 4; i < RX_BUFFER_SIZE; i+=4)
    {
        j = payload[i+3];
        if (0xFF != j)
        {
            END_DEVICES_Short_Address[j].connection_slot = j;
    ceb4:	4eac      	ldr	r6, [pc, #688]	; (d168 <P2PTasks+0x70c>)
    ceb6:	e002      	b.n	cebe <P2PTasks+0x462>
    ceb8:	3304      	adds	r3, #4
    for (i = 4; i < RX_BUFFER_SIZE; i+=4)
    ceba:	429f      	cmp	r7, r3
    cebc:	d00c      	beq.n	ced8 <P2PTasks+0x47c>
        j = payload[i+3];
    cebe:	78da      	ldrb	r2, [r3, #3]
        if (0xFF != j)
    cec0:	2aff      	cmp	r2, #255	; 0xff
    cec2:	d0f9      	beq.n	ceb8 <P2PTasks+0x45c>
            END_DEVICES_Short_Address[j].connection_slot = j;
    cec4:	0095      	lsls	r5, r2, #2
    cec6:	1971      	adds	r1, r6, r5
    cec8:	70ca      	strb	r2, [r1, #3]
            END_DEVICES_Short_Address[j].Address[0] = payload[i];
    ceca:	781a      	ldrb	r2, [r3, #0]
    cecc:	55aa      	strb	r2, [r5, r6]
            END_DEVICES_Short_Address[j].Address[1] = payload[i+1];
    cece:	785a      	ldrb	r2, [r3, #1]
    ced0:	704a      	strb	r2, [r1, #1]
            END_DEVICES_Short_Address[j].Address[2] = payload[i+2];
    ced2:	789a      	ldrb	r2, [r3, #2]
    ced4:	708a      	strb	r2, [r1, #2]
    ced6:	e7ef      	b.n	ceb8 <P2PTasks+0x45c>
    }
#if 0	//WSGA-13109	
    handleLostConnection();
#else
	//modify to it only when receiving the last frame of connection table
	if(payload[1] > payload[2] && payload[1] <= payload[3])
    ced8:	7863      	ldrb	r3, [r4, #1]
    ceda:	78a2      	ldrb	r2, [r4, #2]
    cedc:	429a      	cmp	r2, r3
    cede:	d300      	bcc.n	cee2 <P2PTasks+0x486>
    cee0:	e183      	b.n	d1ea <P2PTasks+0x78e>
    cee2:	78e2      	ldrb	r2, [r4, #3]
    cee4:	429a      	cmp	r2, r3
    cee6:	d200      	bcs.n	ceea <P2PTasks+0x48e>
    cee8:	e17f      	b.n	d1ea <P2PTasks+0x78e>
        for (i = 0; i < end_nodes; i++)
    ceea:	4663      	mov	r3, ip
    ceec:	2b00      	cmp	r3, #0
    ceee:	d021      	beq.n	cf34 <P2PTasks+0x4d8>
            if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    cef0:	4b9e      	ldr	r3, [pc, #632]	; (d16c <P2PTasks+0x710>)
    cef2:	781a      	ldrb	r2, [r3, #0]
    cef4:	4690      	mov	r8, r2
    cef6:	785e      	ldrb	r6, [r3, #1]
    cef8:	4b9d      	ldr	r3, [pc, #628]	; (d170 <P2PTasks+0x714>)
    cefa:	781d      	ldrb	r5, [r3, #0]
    cefc:	4a9a      	ldr	r2, [pc, #616]	; (d168 <P2PTasks+0x70c>)
    cefe:	4663      	mov	r3, ip
    cf00:	3b01      	subs	r3, #1
    cf02:	b2db      	uxtb	r3, r3
    cf04:	3301      	adds	r3, #1
    cf06:	009b      	lsls	r3, r3, #2
    cf08:	189b      	adds	r3, r3, r2
    cf0a:	2100      	movs	r1, #0
    cf0c:	000c      	movs	r4, r1
    cf0e:	e002      	b.n	cf16 <P2PTasks+0x4ba>
    cf10:	3204      	adds	r2, #4
        for (i = 0; i < end_nodes; i++)
    cf12:	4293      	cmp	r3, r2
    cf14:	d009      	beq.n	cf2a <P2PTasks+0x4ce>
            if (myLongAddress[0] == END_DEVICES_Short_Address[i].Address[0] && myLongAddress[1] == END_DEVICES_Short_Address[i].Address[1])
    cf16:	7817      	ldrb	r7, [r2, #0]
    cf18:	4547      	cmp	r7, r8
    cf1a:	d1f9      	bne.n	cf10 <P2PTasks+0x4b4>
    cf1c:	7857      	ldrb	r7, [r2, #1]
    cf1e:	42b7      	cmp	r7, r6
    cf20:	d1f6      	bne.n	cf10 <P2PTasks+0x4b4>
    cf22:	0001      	movs	r1, r0
                stat = true;
    cf24:	0004      	movs	r4, r0
				connectionTbLostCount = 0;		//clear counter if find itself in the table
    cf26:	2500      	movs	r5, #0
    cf28:	e7f2      	b.n	cf10 <P2PTasks+0x4b4>
    cf2a:	2900      	cmp	r1, #0
    cf2c:	d11f      	bne.n	cf6e <P2PTasks+0x512>
		if(!stat)
    cf2e:	2c00      	cmp	r4, #0
    cf30:	d000      	beq.n	cf34 <P2PTasks+0x4d8>
    cf32:	e15a      	b.n	d1ea <P2PTasks+0x78e>
			connectionTbLostCount++;		//counter++ if find itself is not in the table
    cf34:	4a8e      	ldr	r2, [pc, #568]	; (d170 <P2PTasks+0x714>)
    cf36:	7813      	ldrb	r3, [r2, #0]
    cf38:	3301      	adds	r3, #1
    cf3a:	b2db      	uxtb	r3, r3
    cf3c:	7013      	strb	r3, [r2, #0]
		if(!stat && (connectionTbLostCount >= CONN_TB_LOST_MAX) )	//make sure counter arrives to a predefined value to de-bounce the data.
    cf3e:	2b01      	cmp	r3, #1
    cf40:	d800      	bhi.n	cf44 <P2PTasks+0x4e8>
    cf42:	e152      	b.n	d1ea <P2PTasks+0x78e>
            linkStatusTimeInterval = 0;
    cf44:	2200      	movs	r2, #0
    cf46:	4b8b      	ldr	r3, [pc, #556]	; (d174 <P2PTasks+0x718>)
    cf48:	801a      	strh	r2, [r3, #0]
            if ((NULL != linkFailureCallback) && (p2pStarCurrentState != DISCONNECTED))
    cf4a:	4b8b      	ldr	r3, [pc, #556]	; (d178 <P2PTasks+0x71c>)
    cf4c:	681b      	ldr	r3, [r3, #0]
    cf4e:	4293      	cmp	r3, r2
    cf50:	d004      	beq.n	cf5c <P2PTasks+0x500>
    cf52:	4a80      	ldr	r2, [pc, #512]	; (d154 <P2PTasks+0x6f8>)
    cf54:	7812      	ldrb	r2, [r2, #0]
    cf56:	2a08      	cmp	r2, #8
    cf58:	d005      	beq.n	cf66 <P2PTasks+0x50a>
                linkFailureCallback();
    cf5a:	4798      	blx	r3
			if(p2pStarCurrentState != ESTABLISHING_NETWORK)
    cf5c:	4b7d      	ldr	r3, [pc, #500]	; (d154 <P2PTasks+0x6f8>)
    cf5e:	781b      	ldrb	r3, [r3, #0]
    cf60:	2b04      	cmp	r3, #4
    cf62:	d100      	bne.n	cf66 <P2PTasks+0x50a>
    cf64:	e141      	b.n	d1ea <P2PTasks+0x78e>
				p2pStarCurrentState = DISCONNECTED;
    cf66:	2208      	movs	r2, #8
    cf68:	4b7a      	ldr	r3, [pc, #488]	; (d154 <P2PTasks+0x6f8>)
    cf6a:	701a      	strb	r2, [r3, #0]
    cf6c:	e13d      	b.n	d1ea <P2PTasks+0x78e>
    cf6e:	4b80      	ldr	r3, [pc, #512]	; (d170 <P2PTasks+0x714>)
    cf70:	701d      	strb	r5, [r3, #0]
    cf72:	e7dc      	b.n	cf2e <P2PTasks+0x4d2>
				dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    cf74:	2100      	movs	r1, #0
    cf76:	4881      	ldr	r0, [pc, #516]	; (d17c <P2PTasks+0x720>)
    cf78:	4b81      	ldr	r3, [pc, #516]	; (d180 <P2PTasks+0x724>)
    cf7a:	4798      	blx	r3
    cf7c:	1e04      	subs	r4, r0, #0
				if (NULL == dataFramePtr)
    cf7e:	d100      	bne.n	cf82 <P2PTasks+0x526>
    cf80:	e133      	b.n	d1ea <P2PTasks+0x78e>
				DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    cf82:	6843      	ldr	r3, [r0, #4]
				if (NULL != callback)
    cf84:	2b00      	cmp	r3, #0
    cf86:	d004      	beq.n	cf92 <P2PTasks+0x536>
					callback(dataFramePtr->dataFrame.msghandle, SUCCESS, dataFramePtr->dataFrame.msg);
    cf88:	7d00      	ldrb	r0, [r0, #20]
    cf8a:	0022      	movs	r2, r4
    cf8c:	3216      	adds	r2, #22
    cf8e:	2100      	movs	r1, #0
    cf90:	4798      	blx	r3
				MiMem_Free((uint8_t *)dataFramePtr);
    cf92:	0020      	movs	r0, r4
    cf94:	4b7b      	ldr	r3, [pc, #492]	; (d184 <P2PTasks+0x728>)
    cf96:	4798      	blx	r3
    cf98:	e127      	b.n	d1ea <P2PTasks+0x78e>
	            if (PAN_COORD == role)
    cf9a:	4b71      	ldr	r3, [pc, #452]	; (d160 <P2PTasks+0x704>)
    cf9c:	781b      	ldrb	r3, [r3, #0]
    cf9e:	2b01      	cmp	r3, #1
    cfa0:	d000      	beq.n	cfa4 <P2PTasks+0x548>
    cfa2:	e122      	b.n	d1ea <P2PTasks+0x78e>
					uint8_t ed_index = Find_Index(&(rxMessage.Payload[1]));
    cfa4:	1c60      	adds	r0, r4, #1
    cfa6:	4b78      	ldr	r3, [pc, #480]	; (d188 <P2PTasks+0x72c>)
    cfa8:	4798      	blx	r3
    cfaa:	0005      	movs	r5, r0
					if (0xFF != ed_index)
    cfac:	28ff      	cmp	r0, #255	; 0xff
    cfae:	d100      	bne.n	cfb2 <P2PTasks+0x556>
    cfb0:	e11b      	b.n	d1ea <P2PTasks+0x78e>
						dataPtr = (P2PStarDataFrame_t*)MiMem_Alloc(sizeof(P2PStarDataFrame_t));
    cfb2:	2068      	movs	r0, #104	; 0x68
    cfb4:	4b75      	ldr	r3, [pc, #468]	; (d18c <P2PTasks+0x730>)
    cfb6:	4798      	blx	r3
    cfb8:	1e04      	subs	r4, r0, #0
						if (NULL == dataPtr)
    cfba:	d100      	bne.n	cfbe <P2PTasks+0x562>
    cfbc:	e115      	b.n	d1ea <P2PTasks+0x78e>
						memcpy(dataPtr->dataFrame.destAddress, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, LONG_ADDR_LEN);
    cfbe:	4b74      	ldr	r3, [pc, #464]	; (d190 <P2PTasks+0x734>)
    cfc0:	681e      	ldr	r6, [r3, #0]
    cfc2:	012d      	lsls	r5, r5, #4
    cfc4:	3008      	adds	r0, #8
    cfc6:	6833      	ldr	r3, [r6, #0]
    cfc8:	1959      	adds	r1, r3, r5
    cfca:	3104      	adds	r1, #4
    cfcc:	2208      	movs	r2, #8
    cfce:	4b71      	ldr	r3, [pc, #452]	; (d194 <P2PTasks+0x738>)
    cfd0:	4798      	blx	r3
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[0];    // Unique address of EDy (DEST ED)
    cfd2:	4a71      	ldr	r2, [pc, #452]	; (d198 <P2PTasks+0x73c>)
    cfd4:	6853      	ldr	r3, [r2, #4]
    cfd6:	7819      	ldrb	r1, [r3, #0]
    cfd8:	75a1      	strb	r1, [r4, #22]
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[1];    // Unique address of EDy (DEST ED)
    cfda:	7859      	ldrb	r1, [r3, #1]
    cfdc:	75e1      	strb	r1, [r4, #23]
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[2];    // Unique address of EDy (DEST ED)
    cfde:	789b      	ldrb	r3, [r3, #2]
    cfe0:	7623      	strb	r3, [r4, #24]
						for(i = 4; i < rxMessage.PayloadSize; i++)
    cfe2:	7b17      	ldrb	r7, [r2, #12]
    cfe4:	2f04      	cmp	r7, #4
    cfe6:	d92f      	bls.n	d048 <P2PTasks+0x5ec>
							dataPtr->dataFrame.msg[dataLen++] = rxMessage.Payload[i];
    cfe8:	6890      	ldr	r0, [r2, #8]
    cfea:	1d03      	adds	r3, r0, #4
    cfec:	0022      	movs	r2, r4
    cfee:	3219      	adds	r2, #25
    cff0:	1f79      	subs	r1, r7, #5
    cff2:	b2c9      	uxtb	r1, r1
    cff4:	3105      	adds	r1, #5
    cff6:	1840      	adds	r0, r0, r1
    cff8:	7819      	ldrb	r1, [r3, #0]
    cffa:	7011      	strb	r1, [r2, #0]
    cffc:	3301      	adds	r3, #1
    cffe:	3201      	adds	r2, #1
						for(i = 4; i < rxMessage.PayloadSize; i++)
    d000:	4283      	cmp	r3, r0
    d002:	d1f9      	bne.n	cff8 <P2PTasks+0x59c>
    d004:	1e7b      	subs	r3, r7, #1
    d006:	b2db      	uxtb	r3, r3
						dataPtr->dataFrame.msgLength = dataLen;
    d008:	7563      	strb	r3, [r4, #21]
						dataPtr->dataFrame.fromEDToED = 1;
    d00a:	2201      	movs	r2, #1
    d00c:	74e2      	strb	r2, [r4, #19]
						if(miwiDefaultRomOrRamParams->ConnectionTable[ed_index].status.bits.isValid && miwiDefaultRomOrRamParams->ConnectionTable[ed_index].status.bits.RXOnWhenIdle == 0)
    d00e:	6832      	ldr	r2, [r6, #0]
    d010:	1955      	adds	r5, r2, r5
    d012:	7b2a      	ldrb	r2, [r5, #12]
    d014:	217e      	movs	r1, #126	; 0x7e
    d016:	438a      	bics	r2, r1
    d018:	2a80      	cmp	r2, #128	; 0x80
    d01a:	d017      	beq.n	d04c <P2PTasks+0x5f0>
							frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, false, false, dataLen, dataPtr->dataFrame.msg, 1, true, appAckWaitDataCallback);
    d01c:	1d2a      	adds	r2, r5, #4
    d01e:	495f      	ldr	r1, [pc, #380]	; (d19c <P2PTasks+0x740>)
    d020:	8809      	ldrh	r1, [r1, #0]
    d022:	485f      	ldr	r0, [pc, #380]	; (d1a0 <P2PTasks+0x744>)
    d024:	9005      	str	r0, [sp, #20]
    d026:	2001      	movs	r0, #1
    d028:	9004      	str	r0, [sp, #16]
    d02a:	9003      	str	r0, [sp, #12]
    d02c:	0020      	movs	r0, r4
    d02e:	3016      	adds	r0, #22
    d030:	9002      	str	r0, [sp, #8]
    d032:	9301      	str	r3, [sp, #4]
    d034:	2300      	movs	r3, #0
    d036:	9300      	str	r3, [sp, #0]
    d038:	2000      	movs	r0, #0
    d03a:	4d5a      	ldr	r5, [pc, #360]	; (d1a4 <P2PTasks+0x748>)
    d03c:	47a8      	blx	r5
							miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t*)dataPtr);
    d03e:	0021      	movs	r1, r4
    d040:	484e      	ldr	r0, [pc, #312]	; (d17c <P2PTasks+0x720>)
    d042:	4b59      	ldr	r3, [pc, #356]	; (d1a8 <P2PTasks+0x74c>)
    d044:	4798      	blx	r3
    d046:	e0d0      	b.n	d1ea <P2PTasks+0x78e>
						dataPtr->dataFrame.msg[dataLen++] = rxMessage.SourceAddress[2];    // Unique address of EDy (DEST ED)
    d048:	2303      	movs	r3, #3
    d04a:	e7dd      	b.n	d008 <P2PTasks+0x5ac>
							if (50 < MiMem_PercentageOfFreeBuffers())
    d04c:	4b57      	ldr	r3, [pc, #348]	; (d1ac <P2PTasks+0x750>)
    d04e:	4798      	blx	r3
    d050:	2832      	cmp	r0, #50	; 0x32
    d052:	d800      	bhi.n	d056 <P2PTasks+0x5fa>
    d054:	e0c9      	b.n	d1ea <P2PTasks+0x78e>
								dataPtr->dataFrame.confCallback = NULL;
    d056:	2300      	movs	r3, #0
    d058:	6063      	str	r3, [r4, #4]
								dataPtr->dataFrame.timeout = INDIRECT_MESSAGE_TIMEOUT;
    d05a:	33b4      	adds	r3, #180	; 0xb4
    d05c:	7423      	strb	r3, [r4, #16]
								dataPtr->dataFrame.ackReq = true;
    d05e:	3bb3      	subs	r3, #179	; 0xb3
    d060:	7463      	strb	r3, [r4, #17]
								miQueueAppend(&indirectFrameQueue, (miQueueBuffer_t*)dataPtr);
    d062:	0021      	movs	r1, r4
    d064:	4852      	ldr	r0, [pc, #328]	; (d1b0 <P2PTasks+0x754>)
    d066:	4b50      	ldr	r3, [pc, #320]	; (d1a8 <P2PTasks+0x74c>)
    d068:	4798      	blx	r3
    d06a:	e0be      	b.n	d1ea <P2PTasks+0x78e>
                if (PAN_COORD == role)
    d06c:	4b3c      	ldr	r3, [pc, #240]	; (d160 <P2PTasks+0x704>)
    d06e:	781b      	ldrb	r3, [r3, #0]
    d070:	2b01      	cmp	r3, #1
    d072:	d000      	beq.n	d076 <P2PTasks+0x61a>
    d074:	e0b9      	b.n	d1ea <P2PTasks+0x78e>
                        if (miwiDefaultRomOrRamParams->ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && miwiDefaultRomOrRamParams->ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    d076:	4b46      	ldr	r3, [pc, #280]	; (d190 <P2PTasks+0x734>)
    d078:	681b      	ldr	r3, [r3, #0]
    d07a:	6819      	ldr	r1, [r3, #0]
    d07c:	4b46      	ldr	r3, [pc, #280]	; (d198 <P2PTasks+0x73c>)
    d07e:	685e      	ldr	r6, [r3, #4]
    d080:	7834      	ldrb	r4, [r6, #0]
    d082:	000b      	movs	r3, r1
    d084:	3141      	adds	r1, #65	; 0x41
    d086:	31ff      	adds	r1, #255	; 0xff
    d088:	e003      	b.n	d092 <P2PTasks+0x636>
    d08a:	3310      	adds	r3, #16
                    for (p=0  ; p < CONNECTION_SIZE ; p++)
    d08c:	428b      	cmp	r3, r1
    d08e:	d100      	bne.n	d092 <P2PTasks+0x636>
    d090:	e0ab      	b.n	d1ea <P2PTasks+0x78e>
                        if (miwiDefaultRomOrRamParams->ConnectionTable[p].Address[0] == rxMessage.SourceAddress[0] && miwiDefaultRomOrRamParams->ConnectionTable[p].Address[1] == rxMessage.SourceAddress[1]
    d092:	0018      	movs	r0, r3
    d094:	791a      	ldrb	r2, [r3, #4]
    d096:	42a2      	cmp	r2, r4
    d098:	d1f7      	bne.n	d08a <P2PTasks+0x62e>
    d09a:	795d      	ldrb	r5, [r3, #5]
    d09c:	7872      	ldrb	r2, [r6, #1]
    d09e:	4295      	cmp	r5, r2
    d0a0:	d1f3      	bne.n	d08a <P2PTasks+0x62e>
                        && miwiDefaultRomOrRamParams->ConnectionTable[p].Address[2] == rxMessage.SourceAddress[2])
    d0a2:	799d      	ldrb	r5, [r3, #6]
    d0a4:	78b2      	ldrb	r2, [r6, #2]
    d0a6:	4295      	cmp	r5, r2
    d0a8:	d1ef      	bne.n	d08a <P2PTasks+0x62e>
                            miwiDefaultRomOrRamParams->ConnectionTable[p].link_status++;
    d0aa:	7b9b      	ldrb	r3, [r3, #14]
    d0ac:	3301      	adds	r3, #1
    d0ae:	7383      	strb	r3, [r0, #14]
    d0b0:	e09b      	b.n	d1ea <P2PTasks+0x78e>
                dataPtr = MiMem_Alloc(PACKETLEN_P2P_CONNECTION_REMOVAL_RESPONSE);
    d0b2:	2002      	movs	r0, #2
    d0b4:	4b35      	ldr	r3, [pc, #212]	; (d18c <P2PTasks+0x730>)
    d0b6:	4798      	blx	r3
    d0b8:	1e07      	subs	r7, r0, #0
                if (NULL == dataPtr)
    d0ba:	d100      	bne.n	d0be <P2PTasks+0x662>
    d0bc:	e095      	b.n	d1ea <P2PTasks+0x78e>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    d0be:	2392      	movs	r3, #146	; 0x92
    d0c0:	7003      	strb	r3, [r0, #0]
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    d0c2:	4b35      	ldr	r3, [pc, #212]	; (d198 <P2PTasks+0x73c>)
    d0c4:	685b      	ldr	r3, [r3, #4]
    d0c6:	9307      	str	r3, [sp, #28]
                    if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    d0c8:	4b31      	ldr	r3, [pc, #196]	; (d190 <P2PTasks+0x734>)
    d0ca:	681b      	ldr	r3, [r3, #0]
    d0cc:	681d      	ldr	r5, [r3, #0]
                for(i = 0; i < CONNECTION_SIZE; i++)
    d0ce:	2400      	movs	r4, #0
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    d0d0:	4e38      	ldr	r6, [pc, #224]	; (d1b4 <P2PTasks+0x758>)
    d0d2:	e004      	b.n	d0de <P2PTasks+0x682>
                for(i = 0; i < CONNECTION_SIZE; i++)
    d0d4:	3401      	adds	r4, #1
    d0d6:	b2e4      	uxtb	r4, r4
    d0d8:	3510      	adds	r5, #16
    d0da:	2c14      	cmp	r4, #20
    d0dc:	d013      	beq.n	d106 <P2PTasks+0x6aa>
                    if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    d0de:	9506      	str	r5, [sp, #24]
    d0e0:	7b2b      	ldrb	r3, [r5, #12]
    d0e2:	2b7f      	cmp	r3, #127	; 0x7f
    d0e4:	d9f6      	bls.n	d0d4 <P2PTasks+0x678>
                        if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    d0e6:	1d29      	adds	r1, r5, #4
    d0e8:	9807      	ldr	r0, [sp, #28]
    d0ea:	47b0      	blx	r6
    d0ec:	2800      	cmp	r0, #0
    d0ee:	d0f1      	beq.n	d0d4 <P2PTasks+0x678>
                            miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    d0f0:	2600      	movs	r6, #0
    d0f2:	9b06      	ldr	r3, [sp, #24]
    d0f4:	731e      	strb	r6, [r3, #12]
                            PDS_Store(PDS_CONNECTION_TABLE_ID);
    d0f6:	2006      	movs	r0, #6
    d0f8:	4b2f      	ldr	r3, [pc, #188]	; (d1b8 <P2PTasks+0x75c>)
    d0fa:	4798      	blx	r3
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    d0fc:	707e      	strb	r6, [r7, #1]
                if( i == CONNECTION_SIZE )
    d0fe:	2c14      	cmp	r4, #20
    d100:	d018      	beq.n	d134 <P2PTasks+0x6d8>
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    d102:	2402      	movs	r4, #2
    d104:	e003      	b.n	d10e <P2PTasks+0x6b2>
                dataPtr[dataLen++] = CMD_P2P_CONNECTION_REMOVAL_RESPONSE;
    d106:	2301      	movs	r3, #1
                    dataPtr[dataLen++] = STATUS_ENTRY_NOT_EXIST;
    d108:	1c5c      	adds	r4, r3, #1
    d10a:	22f0      	movs	r2, #240	; 0xf0
    d10c:	54fa      	strb	r2, [r7, r3]
                frameTransmit(false, rxMessage.SourcePANID, rxMessage.SourceAddress, true, rxMessage.flags.bits.secEn,
    d10e:	4b22      	ldr	r3, [pc, #136]	; (d198 <P2PTasks+0x73c>)
    d110:	685a      	ldr	r2, [r3, #4]
    d112:	8859      	ldrh	r1, [r3, #2]
    d114:	4829      	ldr	r0, [pc, #164]	; (d1bc <P2PTasks+0x760>)
    d116:	9005      	str	r0, [sp, #20]
    d118:	2001      	movs	r0, #1
    d11a:	9004      	str	r0, [sp, #16]
    d11c:	2000      	movs	r0, #0
    d11e:	9003      	str	r0, [sp, #12]
    d120:	9702      	str	r7, [sp, #8]
    d122:	9401      	str	r4, [sp, #4]
    d124:	781b      	ldrb	r3, [r3, #0]
    d126:	071b      	lsls	r3, r3, #28
    d128:	0fdb      	lsrs	r3, r3, #31
    d12a:	9300      	str	r3, [sp, #0]
    d12c:	2301      	movs	r3, #1
    d12e:	4c1d      	ldr	r4, [pc, #116]	; (d1a4 <P2PTasks+0x748>)
    d130:	47a0      	blx	r4
    d132:	e05a      	b.n	d1ea <P2PTasks+0x78e>
                            dataPtr[dataLen++] = STATUS_SUCCESS;
    d134:	2302      	movs	r3, #2
    d136:	e7e7      	b.n	d108 <P2PTasks+0x6ac>
                if( rxMessage.Payload[1] == STATUS_SUCCESS )
    d138:	7863      	ldrb	r3, [r4, #1]
    d13a:	2b00      	cmp	r3, #0
    d13c:	d155      	bne.n	d1ea <P2PTasks+0x78e>
                        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    d13e:	4b14      	ldr	r3, [pc, #80]	; (d190 <P2PTasks+0x734>)
    d140:	681b      	ldr	r3, [r3, #0]
    d142:	681f      	ldr	r7, [r3, #0]
                            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    d144:	4a14      	ldr	r2, [pc, #80]	; (d198 <P2PTasks+0x73c>)
    d146:	6853      	ldr	r3, [r2, #4]
    d148:	9306      	str	r3, [sp, #24]
    d14a:	003c      	movs	r4, r7
    d14c:	3741      	adds	r7, #65	; 0x41
    d14e:	37ff      	adds	r7, #255	; 0xff
    d150:	4e18      	ldr	r6, [pc, #96]	; (d1b4 <P2PTasks+0x758>)
    d152:	e038      	b.n	d1c6 <P2PTasks+0x76a>
    d154:	20000418 	.word	0x20000418
    d158:	20002128 	.word	0x20002128
    d15c:	2000000d 	.word	0x2000000d
    d160:	20002124 	.word	0x20002124
    d164:	2000040c 	.word	0x2000040c
    d168:	200020c8 	.word	0x200020c8
    d16c:	20000010 	.word	0x20000010
    d170:	200003f3 	.word	0x200003f3
    d174:	20000416 	.word	0x20000416
    d178:	20002138 	.word	0x20002138
    d17c:	200020ac 	.word	0x200020ac
    d180:	0000d665 	.word	0x0000d665
    d184:	0000d4ed 	.word	0x0000d4ed
    d188:	0000bd3d 	.word	0x0000bd3d
    d18c:	0000d431 	.word	0x0000d431
    d190:	20002034 	.word	0x20002034
    d194:	00011e37 	.word	0x00011e37
    d198:	2000213c 	.word	0x2000213c
    d19c:	20002044 	.word	0x20002044
    d1a0:	0000d2b5 	.word	0x0000d2b5
    d1a4:	0000c259 	.word	0x0000c259
    d1a8:	0000d62d 	.word	0x0000d62d
    d1ac:	0000d569 	.word	0x0000d569
    d1b0:	20002014 	.word	0x20002014
    d1b4:	0000c145 	.word	0x0000c145
    d1b8:	0000a66d 	.word	0x0000a66d
    d1bc:	0000bd95 	.word	0x0000bd95
    d1c0:	3410      	adds	r4, #16
                    for(i = 0; i < CONNECTION_SIZE; i++)
    d1c2:	42bc      	cmp	r4, r7
    d1c4:	d011      	beq.n	d1ea <P2PTasks+0x78e>
                        if( miwiDefaultRomOrRamParams->ConnectionTable[i].status.bits.isValid )
    d1c6:	7b23      	ldrb	r3, [r4, #12]
    d1c8:	2b7f      	cmp	r3, #127	; 0x7f
    d1ca:	d9f9      	bls.n	d1c0 <P2PTasks+0x764>
                            if( isSameAddress(rxMessage.SourceAddress, miwiDefaultRomOrRamParams->ConnectionTable[i].Address) )
    d1cc:	1d21      	adds	r1, r4, #4
    d1ce:	9806      	ldr	r0, [sp, #24]
    d1d0:	47b0      	blx	r6
    d1d2:	2800      	cmp	r0, #0
    d1d4:	d0f4      	beq.n	d1c0 <P2PTasks+0x764>
                                miwiDefaultRomOrRamParams->ConnectionTable[i].status.Val = 0;
    d1d6:	2300      	movs	r3, #0
    d1d8:	7323      	strb	r3, [r4, #12]
                                PDS_Store(PDS_CONNECTION_TABLE_ID);
    d1da:	2006      	movs	r0, #6
    d1dc:	4b07      	ldr	r3, [pc, #28]	; (d1fc <P2PTasks+0x7a0>)
    d1de:	4798      	blx	r3
    d1e0:	e003      	b.n	d1ea <P2PTasks+0x78e>
		if (IN_NETWORK_STATE == p2pStarCurrentState)
    d1e2:	4b07      	ldr	r3, [pc, #28]	; (d200 <P2PTasks+0x7a4>)
    d1e4:	781b      	ldrb	r3, [r3, #0]
    d1e6:	2b07      	cmp	r3, #7
    d1e8:	d002      	beq.n	d1f0 <P2PTasks+0x794>
        MiMAC_DiscardPacket();
    d1ea:	4b06      	ldr	r3, [pc, #24]	; (d204 <P2PTasks+0x7a8>)
    d1ec:	4798      	blx	r3
    d1ee:	e44a      	b.n	ca86 <P2PTasks+0x2a>
			pktRxcallback(&rxMessage);
    d1f0:	4b05      	ldr	r3, [pc, #20]	; (d208 <P2PTasks+0x7ac>)
    d1f2:	681b      	ldr	r3, [r3, #0]
    d1f4:	4805      	ldr	r0, [pc, #20]	; (d20c <P2PTasks+0x7b0>)
    d1f6:	4798      	blx	r3
    d1f8:	e7f7      	b.n	d1ea <P2PTasks+0x78e>
    d1fa:	46c0      	nop			; (mov r8, r8)
    d1fc:	0000a66d 	.word	0x0000a66d
    d200:	20000418 	.word	0x20000418
    d204:	0000b2e1 	.word	0x0000b2e1
    d208:	2000041c 	.word	0x2000041c
    d20c:	2000213c 	.word	0x2000213c

0000d210 <macAckOnlyDataCallback>:
    return false;
}
#endif

void macAckOnlyDataCallback(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    d210:	b5f0      	push	{r4, r5, r6, r7, lr}
    d212:	b087      	sub	sp, #28
    d214:	0005      	movs	r5, r0
    d216:	000e      	movs	r6, r1
    d218:	0017      	movs	r7, r2
	P2PStarDataFrame_t *dataFramePtr = NULL;
	dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&macAckOnlyFrameQueue, NULL);
    d21a:	2100      	movs	r1, #0
    d21c:	481c      	ldr	r0, [pc, #112]	; (d290 <macAckOnlyDataCallback+0x80>)
    d21e:	4b1d      	ldr	r3, [pc, #116]	; (d294 <macAckOnlyDataCallback+0x84>)
    d220:	4798      	blx	r3
    d222:	1e04      	subs	r4, r0, #0

	if (NULL != dataFramePtr)
    d224:	d031      	beq.n	d28a <macAckOnlyDataCallback+0x7a>
	{
		DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    d226:	6843      	ldr	r3, [r0, #4]
		if (NULL != callback && 1 != dataFramePtr->dataFrame.broadcast)
    d228:	2b00      	cmp	r3, #0
    d22a:	d006      	beq.n	d23a <macAckOnlyDataCallback+0x2a>
    d22c:	7c82      	ldrb	r2, [r0, #18]
    d22e:	2a01      	cmp	r2, #1
    d230:	d003      	beq.n	d23a <macAckOnlyDataCallback+0x2a>
		{
			callback(handle, status, msgPointer);
    d232:	003a      	movs	r2, r7
    d234:	0031      	movs	r1, r6
    d236:	0028      	movs	r0, r5
    d238:	4798      	blx	r3
		}
#if defined(PROTOCOL_STAR)
		if (dataFramePtr->dataFrame.fromEDToED)
    d23a:	7ce3      	ldrb	r3, [r4, #19]
    d23c:	2b00      	cmp	r3, #0
    d23e:	d021      	beq.n	d284 <macAckOnlyDataCallback+0x74>
		{
			uint8_t ed_index = Find_Index(dataFramePtr->dataFrame.msg);
    d240:	0020      	movs	r0, r4
    d242:	3016      	adds	r0, #22
    d244:	4b14      	ldr	r3, [pc, #80]	; (d298 <macAckOnlyDataCallback+0x88>)
    d246:	4798      	blx	r3
    d248:	0005      	movs	r5, r0
			if (0xFF != ed_index)
    d24a:	28ff      	cmp	r0, #255	; 0xff
    d24c:	d01a      	beq.n	d284 <macAckOnlyDataCallback+0x74>
			{
				uint8_t* dataPtr;
				dataPtr = MiMem_Alloc(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS);
    d24e:	2001      	movs	r0, #1
    d250:	4b12      	ldr	r3, [pc, #72]	; (d29c <macAckOnlyDataCallback+0x8c>)
    d252:	4798      	blx	r3
				if (NULL == dataPtr)
    d254:	2800      	cmp	r0, #0
    d256:	d018      	beq.n	d28a <macAckOnlyDataCallback+0x7a>
				return;
				dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
    d258:	23da      	movs	r3, #218	; 0xda
    d25a:	7003      	strb	r3, [r0, #0]
				frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, CommandConfCallback);
    d25c:	4b10      	ldr	r3, [pc, #64]	; (d2a0 <macAckOnlyDataCallback+0x90>)
    d25e:	681b      	ldr	r3, [r3, #0]
    d260:	012d      	lsls	r5, r5, #4
    d262:	681a      	ldr	r2, [r3, #0]
    d264:	1952      	adds	r2, r2, r5
    d266:	3204      	adds	r2, #4
    d268:	4b0e      	ldr	r3, [pc, #56]	; (d2a4 <macAckOnlyDataCallback+0x94>)
    d26a:	8819      	ldrh	r1, [r3, #0]
    d26c:	4b0e      	ldr	r3, [pc, #56]	; (d2a8 <macAckOnlyDataCallback+0x98>)
    d26e:	9305      	str	r3, [sp, #20]
    d270:	2301      	movs	r3, #1
    d272:	9304      	str	r3, [sp, #16]
    d274:	2500      	movs	r5, #0
    d276:	9503      	str	r5, [sp, #12]
    d278:	9002      	str	r0, [sp, #8]
    d27a:	9301      	str	r3, [sp, #4]
    d27c:	9300      	str	r3, [sp, #0]
    d27e:	2000      	movs	r0, #0
    d280:	4d0a      	ldr	r5, [pc, #40]	; (d2ac <macAckOnlyDataCallback+0x9c>)
    d282:	47a8      	blx	r5
			}
		}
#endif
		MiMem_Free((uint8_t *)dataFramePtr);
    d284:	0020      	movs	r0, r4
    d286:	4b0a      	ldr	r3, [pc, #40]	; (d2b0 <macAckOnlyDataCallback+0xa0>)
    d288:	4798      	blx	r3
	}
}
    d28a:	b007      	add	sp, #28
    d28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d28e:	46c0      	nop			; (mov r8, r8)
    d290:	20002008 	.word	0x20002008
    d294:	0000d665 	.word	0x0000d665
    d298:	0000bd3d 	.word	0x0000bd3d
    d29c:	0000d431 	.word	0x0000d431
    d2a0:	20002034 	.word	0x20002034
    d2a4:	20002044 	.word	0x20002044
    d2a8:	0000bd95 	.word	0x0000bd95
    d2ac:	0000c259 	.word	0x0000c259
    d2b0:	0000d4ed 	.word	0x0000d4ed

0000d2b4 <appAckWaitDataCallback>:

#if defined(PROTOCOL_STAR)
void appAckWaitDataCallback(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    d2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2b6:	46d6      	mov	lr, sl
    d2b8:	464f      	mov	r7, r9
    d2ba:	4646      	mov	r6, r8
    d2bc:	b5c0      	push	{r6, r7, lr}
    d2be:	b086      	sub	sp, #24
    d2c0:	4681      	mov	r9, r0
    d2c2:	4688      	mov	r8, r1
    d2c4:	0016      	movs	r6, r2
	if (PAN_COORD == role)
    d2c6:	4b3b      	ldr	r3, [pc, #236]	; (d3b4 <appAckWaitDataCallback+0x100>)
    d2c8:	781b      	ldrb	r3, [r3, #0]
    d2ca:	2b01      	cmp	r3, #1
    d2cc:	d008      	beq.n	d2e0 <appAckWaitDataCallback+0x2c>
			{
				miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
			}
		}
	}
	else if (SUCCESS != status)
    d2ce:	2900      	cmp	r1, #0
    d2d0:	d069      	beq.n	d3a6 <appAckWaitDataCallback+0xf2>
	{
		uint8_t loopIndex;
		P2PStarDataFrame_t *dataFramePtr = NULL;
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    d2d2:	4b39      	ldr	r3, [pc, #228]	; (d3b8 <appAckWaitDataCallback+0x104>)
    d2d4:	7a1b      	ldrb	r3, [r3, #8]
    d2d6:	2b00      	cmp	r3, #0
    d2d8:	d065      	beq.n	d3a6 <appAckWaitDataCallback+0xf2>
    d2da:	2400      	movs	r4, #0
		{
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    d2dc:	4f37      	ldr	r7, [pc, #220]	; (d3bc <appAckWaitDataCallback+0x108>)
    d2de:	e04c      	b.n	d37a <appAckWaitDataCallback+0xc6>
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    d2e0:	4b35      	ldr	r3, [pc, #212]	; (d3b8 <appAckWaitDataCallback+0x104>)
    d2e2:	7a1b      	ldrb	r3, [r3, #8]
    d2e4:	2b00      	cmp	r3, #0
    d2e6:	d05e      	beq.n	d3a6 <appAckWaitDataCallback+0xf2>
    d2e8:	2400      	movs	r4, #0
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    d2ea:	4b34      	ldr	r3, [pc, #208]	; (d3bc <appAckWaitDataCallback+0x108>)
    d2ec:	4699      	mov	r9, r3
    d2ee:	e02d      	b.n	d34c <appAckWaitDataCallback+0x98>
				if (SUCCESS == status)
    d2f0:	4643      	mov	r3, r8
    d2f2:	2b00      	cmp	r3, #0
    d2f4:	d121      	bne.n	d33a <appAckWaitDataCallback+0x86>
					uint8_t ed_index = Find_Index(dataFramePtr->dataFrame.msg);
    d2f6:	4b32      	ldr	r3, [pc, #200]	; (d3c0 <appAckWaitDataCallback+0x10c>)
    d2f8:	4798      	blx	r3
    d2fa:	4682      	mov	sl, r0
					if (0xFF != ed_index)
    d2fc:	28ff      	cmp	r0, #255	; 0xff
    d2fe:	d01c      	beq.n	d33a <appAckWaitDataCallback+0x86>
						dataPtr = MiMem_Alloc(PACKETLEN_CMD_DATA_TO_ENDDEV_SUCCESS);
    d300:	2001      	movs	r0, #1
    d302:	4b30      	ldr	r3, [pc, #192]	; (d3c4 <appAckWaitDataCallback+0x110>)
    d304:	4798      	blx	r3
						if (NULL == dataPtr)
    d306:	2800      	cmp	r0, #0
    d308:	d04d      	beq.n	d3a6 <appAckWaitDataCallback+0xf2>
						dataPtr[0] = CMD_DATA_TO_ENDDEV_SUCCESS;
    d30a:	23da      	movs	r3, #218	; 0xda
    d30c:	7003      	strb	r3, [r0, #0]
						frameTransmit(false, myPANID, miwiDefaultRomOrRamParams->ConnectionTable[ed_index].Address, true, true, 1, dataPtr, 0, true, CommandConfCallback);
    d30e:	4b2e      	ldr	r3, [pc, #184]	; (d3c8 <appAckWaitDataCallback+0x114>)
    d310:	681b      	ldr	r3, [r3, #0]
    d312:	4652      	mov	r2, sl
    d314:	0112      	lsls	r2, r2, #4
    d316:	681b      	ldr	r3, [r3, #0]
    d318:	189a      	adds	r2, r3, r2
    d31a:	1d17      	adds	r7, r2, #4
    d31c:	4b2b      	ldr	r3, [pc, #172]	; (d3cc <appAckWaitDataCallback+0x118>)
    d31e:	8819      	ldrh	r1, [r3, #0]
    d320:	4b2b      	ldr	r3, [pc, #172]	; (d3d0 <appAckWaitDataCallback+0x11c>)
    d322:	9305      	str	r3, [sp, #20]
    d324:	2301      	movs	r3, #1
    d326:	9304      	str	r3, [sp, #16]
    d328:	2200      	movs	r2, #0
    d32a:	9203      	str	r2, [sp, #12]
    d32c:	9002      	str	r0, [sp, #8]
    d32e:	9301      	str	r3, [sp, #4]
    d330:	9300      	str	r3, [sp, #0]
    d332:	003a      	movs	r2, r7
    d334:	2000      	movs	r0, #0
    d336:	4f27      	ldr	r7, [pc, #156]	; (d3d4 <appAckWaitDataCallback+0x120>)
    d338:	47b8      	blx	r7
				MiMem_Free(dataFramePtr);
    d33a:	0028      	movs	r0, r5
    d33c:	4b26      	ldr	r3, [pc, #152]	; (d3d8 <appAckWaitDataCallback+0x124>)
    d33e:	4798      	blx	r3
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    d340:	3401      	adds	r4, #1
    d342:	b2e4      	uxtb	r4, r4
    d344:	4b1c      	ldr	r3, [pc, #112]	; (d3b8 <appAckWaitDataCallback+0x104>)
    d346:	7a1b      	ldrb	r3, [r3, #8]
    d348:	42a3      	cmp	r3, r4
    d34a:	d92c      	bls.n	d3a6 <appAckWaitDataCallback+0xf2>
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    d34c:	2100      	movs	r1, #0
    d34e:	481a      	ldr	r0, [pc, #104]	; (d3b8 <appAckWaitDataCallback+0x104>)
    d350:	47c8      	blx	r9
    d352:	1e05      	subs	r5, r0, #0
			if (NULL == dataFramePtr)
    d354:	d027      	beq.n	d3a6 <appAckWaitDataCallback+0xf2>
			if(msgPointer == (uint8_t*)&(dataFramePtr->dataFrame.msg))
    d356:	3016      	adds	r0, #22
    d358:	42b0      	cmp	r0, r6
    d35a:	d0c9      	beq.n	d2f0 <appAckWaitDataCallback+0x3c>
				miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
    d35c:	0029      	movs	r1, r5
    d35e:	4816      	ldr	r0, [pc, #88]	; (d3b8 <appAckWaitDataCallback+0x104>)
    d360:	4b1e      	ldr	r3, [pc, #120]	; (d3dc <appAckWaitDataCallback+0x128>)
    d362:	4798      	blx	r3
    d364:	e7ec      	b.n	d340 <appAckWaitDataCallback+0x8c>
				}
				MiMem_Free((uint8_t *)dataFramePtr);
			}
			else
			{
				miQueueAppend(&appAckWaitDataQueue, (miQueueBuffer_t *)dataFramePtr);
    d366:	0029      	movs	r1, r5
    d368:	4813      	ldr	r0, [pc, #76]	; (d3b8 <appAckWaitDataCallback+0x104>)
    d36a:	4b1c      	ldr	r3, [pc, #112]	; (d3dc <appAckWaitDataCallback+0x128>)
    d36c:	4798      	blx	r3
		for (loopIndex = 0; loopIndex < appAckWaitDataQueue.size; loopIndex++)
    d36e:	3401      	adds	r4, #1
    d370:	b2e4      	uxtb	r4, r4
    d372:	4b11      	ldr	r3, [pc, #68]	; (d3b8 <appAckWaitDataCallback+0x104>)
    d374:	7a1b      	ldrb	r3, [r3, #8]
    d376:	42a3      	cmp	r3, r4
    d378:	d915      	bls.n	d3a6 <appAckWaitDataCallback+0xf2>
			dataFramePtr = (P2PStarDataFrame_t *) miQueueRemove(&appAckWaitDataQueue, NULL);
    d37a:	2100      	movs	r1, #0
    d37c:	480e      	ldr	r0, [pc, #56]	; (d3b8 <appAckWaitDataCallback+0x104>)
    d37e:	47b8      	blx	r7
    d380:	1e05      	subs	r5, r0, #0
			if (NULL == dataFramePtr)
    d382:	d010      	beq.n	d3a6 <appAckWaitDataCallback+0xf2>
			if(handle == dataFramePtr->dataFrame.msghandle && msgPointer == (uint8_t*)&(dataFramePtr->dataFrame.msg))
    d384:	7d00      	ldrb	r0, [r0, #20]
    d386:	4548      	cmp	r0, r9
    d388:	d1ed      	bne.n	d366 <appAckWaitDataCallback+0xb2>
    d38a:	002b      	movs	r3, r5
    d38c:	3316      	adds	r3, #22
    d38e:	429e      	cmp	r6, r3
    d390:	d1e9      	bne.n	d366 <appAckWaitDataCallback+0xb2>
				DataConf_callback_t callback = dataFramePtr->dataFrame.confCallback;
    d392:	686b      	ldr	r3, [r5, #4]
				if (NULL != callback)
    d394:	2b00      	cmp	r3, #0
    d396:	d002      	beq.n	d39e <appAckWaitDataCallback+0xea>
					callback(handle, status, msgPointer);
    d398:	0032      	movs	r2, r6
    d39a:	4641      	mov	r1, r8
    d39c:	4798      	blx	r3
				MiMem_Free((uint8_t *)dataFramePtr);
    d39e:	0028      	movs	r0, r5
    d3a0:	4b0d      	ldr	r3, [pc, #52]	; (d3d8 <appAckWaitDataCallback+0x124>)
    d3a2:	4798      	blx	r3
			{
    d3a4:	e7e3      	b.n	d36e <appAckWaitDataCallback+0xba>
			}
		}
	}
}
    d3a6:	b006      	add	sp, #24
    d3a8:	bc1c      	pop	{r2, r3, r4}
    d3aa:	4690      	mov	r8, r2
    d3ac:	4699      	mov	r9, r3
    d3ae:	46a2      	mov	sl, r4
    d3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3b2:	46c0      	nop			; (mov r8, r8)
    d3b4:	20002124 	.word	0x20002124
    d3b8:	200020ac 	.word	0x200020ac
    d3bc:	0000d665 	.word	0x0000d665
    d3c0:	0000bd3d 	.word	0x0000bd3d
    d3c4:	0000d431 	.word	0x0000d431
    d3c8:	20002034 	.word	0x20002034
    d3cc:	20002044 	.word	0x20002044
    d3d0:	0000bd95 	.word	0x0000bd95
    d3d4:	0000c259 	.word	0x0000c259
    d3d8:	0000d4ed 	.word	0x0000d4ed
    d3dc:	0000d62d 	.word	0x0000d62d

0000d3e0 <MiApp_SubscribeLinkFailureCallback>:
    if (NULL != callback)
    d3e0:	2800      	cmp	r0, #0
    d3e2:	d003      	beq.n	d3ec <MiApp_SubscribeLinkFailureCallback+0xc>
        linkFailureCallback = callback;
    d3e4:	4b02      	ldr	r3, [pc, #8]	; (d3f0 <MiApp_SubscribeLinkFailureCallback+0x10>)
    d3e6:	6018      	str	r0, [r3, #0]
        return true;
    d3e8:	2001      	movs	r0, #1
}
    d3ea:	4770      	bx	lr
    return false;
    d3ec:	2000      	movs	r0, #0
    d3ee:	e7fc      	b.n	d3ea <MiApp_SubscribeLinkFailureCallback+0xa>
    d3f0:	20002138 	.word	0x20002138

0000d3f4 <MiMem_Init>:
* Output:		    none
*
* Overview:		    This function will initialize the Mimem buffers
********************************************************************/
void MiMem_Init(void)
{
    d3f4:	b510      	push	{r4, lr}
	size_t startAddress =  ALIGN((size_t)heapMem);
    d3f6:	4a0b      	ldr	r2, [pc, #44]	; (d424 <MiMem_Init+0x30>)
    d3f8:	1e50      	subs	r0, r2, #1
    d3fa:	2403      	movs	r4, #3
    d3fc:	43a0      	bics	r0, r4
    d3fe:	1d01      	adds	r1, r0, #4

	/*Aligned heap is the base */
	base = (Block_t*) startAddress;
    d400:	4b09      	ldr	r3, [pc, #36]	; (d428 <MiMem_Init+0x34>)
    d402:	6019      	str	r1, [r3, #0]
	base->size = totalFreeBytesRemaining = HEAP_SIZE - (startAddress - (size_t)heapMem);
    d404:	4253      	negs	r3, r2
    d406:	43a3      	bics	r3, r4
    d408:	24c0      	movs	r4, #192	; 0xc0
    d40a:	0164      	lsls	r4, r4, #5
    d40c:	46a4      	mov	ip, r4
    d40e:	4462      	add	r2, ip
    d410:	189b      	adds	r3, r3, r2
    d412:	4a06      	ldr	r2, [pc, #24]	; (d42c <MiMem_Init+0x38>)
    d414:	6013      	str	r3, [r2, #0]
    d416:	60c3      	str	r3, [r0, #12]
	base->free = true;
    d418:	2301      	movs	r3, #1
    d41a:	7403      	strb	r3, [r0, #16]
	base->next = NULL;
    d41c:	2300      	movs	r3, #0
    d41e:	6043      	str	r3, [r0, #4]
	base->prev = NULL;
    d420:	6083      	str	r3, [r0, #8]
}
    d422:	bd10      	pop	{r4, pc}
    d424:	20000440 	.word	0x20000440
    d428:	2000043c 	.word	0x2000043c
    d42c:	20001c40 	.word	0x20001c40

0000d430 <MiMem_Alloc>:
*  or returns NULL if no memory available
*
* Note:			    none
********************************************************************/
void* MiMem_Alloc(uint8_t size)
{
    d430:	b570      	push	{r4, r5, r6, lr}
    d432:	0005      	movs	r5, r0
	size_t requestedSize = 0U;
	void* requestedMemPtr = NULL;

	/* Initialize the Heap */
	if (!base)
    d434:	4b29      	ldr	r3, [pc, #164]	; (d4dc <MiMem_Alloc+0xac>)
    d436:	681b      	ldr	r3, [r3, #0]
    d438:	2b00      	cmp	r3, #0
    d43a:	d012      	beq.n	d462 <MiMem_Alloc+0x32>
	{
		MiMem_Init();
	}
	/* if requested size is of non zero */
	if (size)
    d43c:	2d00      	cmp	r5, #0
    d43e:	d047      	beq.n	d4d0 <MiMem_Alloc+0xa0>
	{
		requestedSize =  size + blockMetaDataSize;
		requestedSize = ALIGN(requestedSize);
    d440:	0029      	movs	r1, r5
    d442:	310f      	adds	r1, #15
    d444:	2303      	movs	r3, #3
    d446:	4399      	bics	r1, r3
    d448:	3104      	adds	r1, #4
		if (requestedSize <= totalFreeBytesRemaining)
    d44a:	4b25      	ldr	r3, [pc, #148]	; (d4e0 <MiMem_Alloc+0xb0>)
    d44c:	6818      	ldr	r0, [r3, #0]
    d44e:	4281      	cmp	r1, r0
    d450:	d840      	bhi.n	d4d4 <MiMem_Alloc+0xa4>
		{
			size_t receivedSize = (size_t)~0U;
			Block_t *requestedBlock = NULL;
			Block_t *blockPtr = base;
    d452:	4b22      	ldr	r3, [pc, #136]	; (d4dc <MiMem_Alloc+0xac>)
    d454:	681b      	ldr	r3, [r3, #0]

			/* Find best fit free Block */
			while (blockPtr)
    d456:	2b00      	cmp	r3, #0
    d458:	d03e      	beq.n	d4d8 <MiMem_Alloc+0xa8>
    d45a:	2600      	movs	r6, #0
    d45c:	2401      	movs	r4, #1
    d45e:	4264      	negs	r4, r4
    d460:	e005      	b.n	d46e <MiMem_Alloc+0x3e>
		MiMem_Init();
    d462:	4b20      	ldr	r3, [pc, #128]	; (d4e4 <MiMem_Alloc+0xb4>)
    d464:	4798      	blx	r3
    d466:	e7e9      	b.n	d43c <MiMem_Alloc+0xc>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
				{
					receivedSize = blockPtr->size;
					requestedBlock = blockPtr;
				}
				blockPtr = blockPtr->next;
    d468:	681b      	ldr	r3, [r3, #0]
			while (blockPtr)
    d46a:	2b00      	cmp	r3, #0
    d46c:	d00a      	beq.n	d484 <MiMem_Alloc+0x54>
				if ((blockPtr->free) && (blockPtr->size >= requestedSize) && (blockPtr->size < receivedSize))
    d46e:	7b1a      	ldrb	r2, [r3, #12]
    d470:	2a00      	cmp	r2, #0
    d472:	d0f9      	beq.n	d468 <MiMem_Alloc+0x38>
    d474:	689a      	ldr	r2, [r3, #8]
    d476:	4291      	cmp	r1, r2
    d478:	d8f6      	bhi.n	d468 <MiMem_Alloc+0x38>
    d47a:	42a2      	cmp	r2, r4
    d47c:	d2f4      	bcs.n	d468 <MiMem_Alloc+0x38>
    d47e:	001e      	movs	r6, r3
					receivedSize = blockPtr->size;
    d480:	0014      	movs	r4, r2
    d482:	e7f1      	b.n	d468 <MiMem_Alloc+0x38>
    d484:	2400      	movs	r4, #0
			}

			if (requestedBlock)
    d486:	2e00      	cmp	r6, #0
    d488:	d012      	beq.n	d4b0 <MiMem_Alloc+0x80>
			{
				if ((requestedBlock->size - requestedSize) > HEAP_MINIMUM_BLOCK_SIZE)
    d48a:	68b3      	ldr	r3, [r6, #8]
    d48c:	1a5b      	subs	r3, r3, r1
    d48e:	2b14      	cmp	r3, #20
    d490:	d810      	bhi.n	d4b4 <MiMem_Alloc+0x84>
				splitBlock (requestedBlock, requestedSize);
				requestedBlock->free = false;
    d492:	2300      	movs	r3, #0
    d494:	7333      	strb	r3, [r6, #12]
				totalFreeBytesRemaining -= requestedBlock->size;
    d496:	68b3      	ldr	r3, [r6, #8]
    d498:	1ac0      	subs	r0, r0, r3
    d49a:	4b11      	ldr	r3, [pc, #68]	; (d4e0 <MiMem_Alloc+0xb0>)
    d49c:	6018      	str	r0, [r3, #0]
				requestedMemPtr = ( void* )(((uint8_t*)requestedBlock) + blockMetaDataSize);
    d49e:	0034      	movs	r4, r6
    d4a0:	3410      	adds	r4, #16
			}
		}
	}
	if (NULL != requestedMemPtr)
    d4a2:	2c00      	cmp	r4, #0
    d4a4:	d004      	beq.n	d4b0 <MiMem_Alloc+0x80>
	{
		memset(requestedMemPtr, 0, size);
    d4a6:	002a      	movs	r2, r5
    d4a8:	2100      	movs	r1, #0
    d4aa:	0020      	movs	r0, r4
    d4ac:	4b0e      	ldr	r3, [pc, #56]	; (d4e8 <MiMem_Alloc+0xb8>)
    d4ae:	4798      	blx	r3
	}
	return requestedMemPtr;
}
    d4b0:	0020      	movs	r0, r4
    d4b2:	bd70      	pop	{r4, r5, r6, pc}
  \param[in] size size of the memory chunk requested
  \return None.
 ******************************************************************************/
static void splitBlock(Block_t* blockTobeSplitted, size_t size)
{
	uint8_t* ptr = (uint8_t*)blockTobeSplitted + size;
    d4b4:	1872      	adds	r2, r6, r1
	Block_t* newBlock = (Block_t*)ptr;

	newBlock->size = blockTobeSplitted->size - size;
    d4b6:	6093      	str	r3, [r2, #8]

	if (blockTobeSplitted->next)
    d4b8:	6833      	ldr	r3, [r6, #0]
    d4ba:	2b00      	cmp	r3, #0
    d4bc:	d000      	beq.n	d4c0 <MiMem_Alloc+0x90>
		blockTobeSplitted->next->prev = newBlock;
    d4be:	605a      	str	r2, [r3, #4]

	newBlock->next = blockTobeSplitted->next;
    d4c0:	6833      	ldr	r3, [r6, #0]
    d4c2:	6013      	str	r3, [r2, #0]
	newBlock->prev = blockTobeSplitted;
    d4c4:	6056      	str	r6, [r2, #4]
	newBlock->free = true;
    d4c6:	2301      	movs	r3, #1
    d4c8:	7313      	strb	r3, [r2, #12]

	blockTobeSplitted->next = newBlock;
    d4ca:	6032      	str	r2, [r6, #0]
	blockTobeSplitted->size = size;
    d4cc:	60b1      	str	r1, [r6, #8]
    d4ce:	e7e0      	b.n	d492 <MiMem_Alloc+0x62>
    d4d0:	2400      	movs	r4, #0
    d4d2:	e7ed      	b.n	d4b0 <MiMem_Alloc+0x80>
    d4d4:	2400      	movs	r4, #0
    d4d6:	e7eb      	b.n	d4b0 <MiMem_Alloc+0x80>
			while (blockPtr)
    d4d8:	2400      	movs	r4, #0
    d4da:	e7e9      	b.n	d4b0 <MiMem_Alloc+0x80>
    d4dc:	2000043c 	.word	0x2000043c
    d4e0:	20001c40 	.word	0x20001c40
    d4e4:	0000d3f5 	.word	0x0000d3f5
    d4e8:	00011e49 	.word	0x00011e49

0000d4ec <MiMem_Free>:
	Block_t* blockPtr = base;
    d4ec:	4b1c      	ldr	r3, [pc, #112]	; (d560 <MiMem_Free+0x74>)
    d4ee:	681b      	ldr	r3, [r3, #0]
	Block_t* freeBlockPtr = (Block_t*)((uint8_t*)ptr - (uint8_t*)blockMetaDataSize);
    d4f0:	3810      	subs	r0, #16
	for(; ((blockPtr != NULL) && (blockPtr != freeBlockPtr)); blockPtr = blockPtr->next);
    d4f2:	2b00      	cmp	r3, #0
    d4f4:	d030      	beq.n	d558 <MiMem_Free+0x6c>
    d4f6:	4283      	cmp	r3, r0
    d4f8:	d02f      	beq.n	d55a <MiMem_Free+0x6e>
    d4fa:	681b      	ldr	r3, [r3, #0]
    d4fc:	2b00      	cmp	r3, #0
    d4fe:	d02b      	beq.n	d558 <MiMem_Free+0x6c>
    d500:	4298      	cmp	r0, r3
    d502:	d1fa      	bne.n	d4fa <MiMem_Free+0xe>
		blockPtr->free = true;
    d504:	2301      	movs	r3, #1
    d506:	7303      	strb	r3, [r0, #12]
		totalFreeBytesRemaining += blockPtr->size;
    d508:	6881      	ldr	r1, [r0, #8]
    d50a:	4a16      	ldr	r2, [pc, #88]	; (d564 <MiMem_Free+0x78>)
    d50c:	6813      	ldr	r3, [r2, #0]
    d50e:	185b      	adds	r3, r3, r1
    d510:	6013      	str	r3, [r2, #0]
		if (blockPtr->prev && blockPtr->prev->free)
    d512:	6843      	ldr	r3, [r0, #4]
    d514:	2b00      	cmp	r3, #0
    d516:	d00f      	beq.n	d538 <MiMem_Free+0x4c>
    d518:	7b1a      	ldrb	r2, [r3, #12]
    d51a:	2a00      	cmp	r2, #0
    d51c:	d00c      	beq.n	d538 <MiMem_Free+0x4c>
			blockPtr->prev->size += blockPtr->size;
    d51e:	689a      	ldr	r2, [r3, #8]
    d520:	4694      	mov	ip, r2
    d522:	4461      	add	r1, ip
    d524:	6099      	str	r1, [r3, #8]
			if (blockPtr->next)
    d526:	6803      	ldr	r3, [r0, #0]
    d528:	2b00      	cmp	r3, #0
    d52a:	d001      	beq.n	d530 <MiMem_Free+0x44>
			blockPtr->next->prev = blockPtr->prev;
    d52c:	6842      	ldr	r2, [r0, #4]
    d52e:	605a      	str	r2, [r3, #4]
			blockPtr->prev->next = blockPtr->next;
    d530:	6843      	ldr	r3, [r0, #4]
    d532:	6802      	ldr	r2, [r0, #0]
    d534:	601a      	str	r2, [r3, #0]
			blockPtr = blockPtr->prev;
    d536:	6840      	ldr	r0, [r0, #4]
		if (blockPtr->next && blockPtr->next->free)
    d538:	6803      	ldr	r3, [r0, #0]
    d53a:	2b00      	cmp	r3, #0
    d53c:	d00c      	beq.n	d558 <MiMem_Free+0x6c>
    d53e:	7b1a      	ldrb	r2, [r3, #12]
    d540:	2a00      	cmp	r2, #0
    d542:	d009      	beq.n	d558 <MiMem_Free+0x6c>
			blockPtr->size += blockPtr->next->size ;
    d544:	6882      	ldr	r2, [r0, #8]
    d546:	6899      	ldr	r1, [r3, #8]
    d548:	468c      	mov	ip, r1
    d54a:	4462      	add	r2, ip
    d54c:	6082      	str	r2, [r0, #8]
			blockPtr->next = blockPtr->next->next;
    d54e:	681b      	ldr	r3, [r3, #0]
    d550:	6003      	str	r3, [r0, #0]
			if (blockPtr->next)
    d552:	2b00      	cmp	r3, #0
    d554:	d000      	beq.n	d558 <MiMem_Free+0x6c>
			blockPtr->next->prev = blockPtr;
    d556:	6058      	str	r0, [r3, #4]
}
    d558:	4770      	bx	lr
	Block_t* blockPtr = base;
    d55a:	0018      	movs	r0, r3
    d55c:	e7d2      	b.n	d504 <MiMem_Free+0x18>
    d55e:	46c0      	nop			; (mov r8, r8)
    d560:	2000043c 	.word	0x2000043c
    d564:	20001c40 	.word	0x20001c40

0000d568 <MiMem_PercentageOfFreeBuffers>:
}

uint8_t MiMem_PercentageOfFreeBuffers(void)
{
    d568:	b510      	push	{r4, lr}
	return (totalFreeBytesRemaining * 100) / HEAP_SIZE;;
    d56a:	4b05      	ldr	r3, [pc, #20]	; (d580 <MiMem_PercentageOfFreeBuffers+0x18>)
    d56c:	6818      	ldr	r0, [r3, #0]
    d56e:	2364      	movs	r3, #100	; 0x64
    d570:	4358      	muls	r0, r3
    d572:	21c0      	movs	r1, #192	; 0xc0
    d574:	0149      	lsls	r1, r1, #5
    d576:	4b03      	ldr	r3, [pc, #12]	; (d584 <MiMem_PercentageOfFreeBuffers+0x1c>)
    d578:	4798      	blx	r3
    d57a:	b2c0      	uxtb	r0, r0
}
    d57c:	bd10      	pop	{r4, pc}
    d57e:	46c0      	nop			; (mov r8, r8)
    d580:	20001c40 	.word	0x20001c40
    d584:	0000f53d 	.word	0x0000f53d

0000d588 <miQueueReadOrRemove>:
 *         removed or read, otherwise NULL is returned.
 * \ingroup group_qmm
 */
static miQueueBuffer_t *miQueueReadOrRemove(MiQueue_t *q,
						buffer_mode_t mode,search_t *search)
{
    d588:	b5f0      	push	{r4, r5, r6, r7, lr}
    d58a:	46c6      	mov	lr, r8
    d58c:	b500      	push	{lr}
    d58e:	0007      	movs	r7, r0
    d590:	4688      	mov	r8, r1
    d592:	0015      	movs	r5, r2
  __ASM volatile ("cpsid i" : : : "memory");
    d594:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d596:	f3bf 8f5f 	dmb	sy
	miQueueBuffer_t *buffer_current = NULL;
	miQueueBuffer_t *buffer_previous;

	cpu_irq_disable();
    d59a:	2200      	movs	r2, #0
    d59c:	4b1f      	ldr	r3, [pc, #124]	; (d61c <miQueueReadOrRemove+0x94>)
    d59e:	701a      	strb	r2, [r3, #0]
	/* Check whether queue is empty */
	if (q->size != 0) {
    d5a0:	7a03      	ldrb	r3, [r0, #8]
    d5a2:	2b00      	cmp	r3, #0
    d5a4:	d037      	beq.n	d616 <miQueueReadOrRemove+0x8e>
		buffer_current = q->head;
    d5a6:	6804      	ldr	r4, [r0, #0]
		buffer_previous = q->head;

		/* First get buffer matching with criteria */
		if (NULL != search) {
    d5a8:	2d00      	cmp	r5, #0
    d5aa:	d019      	beq.n	d5e0 <miQueueReadOrRemove+0x58>
			uint8_t match;
			/* Search for all buffers in the queue */
			while (NULL != buffer_current) {
    d5ac:	2c00      	cmp	r4, #0
    d5ae:	d00c      	beq.n	d5ca <miQueueReadOrRemove+0x42>
    d5b0:	0026      	movs	r6, r4
    d5b2:	e000      	b.n	d5b6 <miQueueReadOrRemove+0x2e>
					/* Break, if search criteria matches */
					break;
				}

				buffer_previous = buffer_current;
				buffer_current = buffer_current->nextItem;
    d5b4:	001c      	movs	r4, r3
				match = search->criteria_func(
    d5b6:	6869      	ldr	r1, [r5, #4]
    d5b8:	6860      	ldr	r0, [r4, #4]
    d5ba:	682b      	ldr	r3, [r5, #0]
    d5bc:	4798      	blx	r3
				if (match) {
    d5be:	2800      	cmp	r0, #0
    d5c0:	d10f      	bne.n	d5e2 <miQueueReadOrRemove+0x5a>
				buffer_current = buffer_current->nextItem;
    d5c2:	6823      	ldr	r3, [r4, #0]
    d5c4:	0026      	movs	r6, r4
			while (NULL != buffer_current) {
    d5c6:	2b00      	cmp	r3, #0
    d5c8:	d1f4      	bne.n	d5b4 <miQueueReadOrRemove+0x2c>
	miQueueBuffer_t *buffer_current = NULL;
    d5ca:	2400      	movs	r4, #0
				**/
			}
		}
	} /* q->size != 0 */

	cpu_irq_enable();
    d5cc:	2201      	movs	r2, #1
    d5ce:	4b13      	ldr	r3, [pc, #76]	; (d61c <miQueueReadOrRemove+0x94>)
    d5d0:	701a      	strb	r2, [r3, #0]
    d5d2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d5d6:	b662      	cpsie	i

	/* Return the buffer. note that pointer to header of buffer is returned
	**/
	return (buffer_current);
} /* queue_read_or_remove */
    d5d8:	0020      	movs	r0, r4
    d5da:	bc04      	pop	{r2}
    d5dc:	4690      	mov	r8, r2
    d5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer_previous = q->head;
    d5e0:	0026      	movs	r6, r4
		if (NULL != buffer_current) {
    d5e2:	2c00      	cmp	r4, #0
    d5e4:	d0f2      	beq.n	d5cc <miQueueReadOrRemove+0x44>
			if (REMOVE_MODE == mode) {
    d5e6:	4643      	mov	r3, r8
    d5e8:	2b00      	cmp	r3, #0
    d5ea:	d1ef      	bne.n	d5cc <miQueueReadOrRemove+0x44>
				if (buffer_current == q->head) {
    d5ec:	683b      	ldr	r3, [r7, #0]
    d5ee:	429c      	cmp	r4, r3
    d5f0:	d00c      	beq.n	d60c <miQueueReadOrRemove+0x84>
						= buffer_current->nextItem;
    d5f2:	6823      	ldr	r3, [r4, #0]
    d5f4:	6033      	str	r3, [r6, #0]
				if (buffer_current == q->tail) {
    d5f6:	687b      	ldr	r3, [r7, #4]
    d5f8:	429c      	cmp	r4, r3
    d5fa:	d00a      	beq.n	d612 <miQueueReadOrRemove+0x8a>
				q->size--;
    d5fc:	7a3b      	ldrb	r3, [r7, #8]
    d5fe:	3b01      	subs	r3, #1
    d600:	723b      	strb	r3, [r7, #8]
				if (NULL == q->head) {
    d602:	683b      	ldr	r3, [r7, #0]
    d604:	2b00      	cmp	r3, #0
    d606:	d1e1      	bne.n	d5cc <miQueueReadOrRemove+0x44>
					q->tail = NULL;
    d608:	607b      	str	r3, [r7, #4]
    d60a:	e7df      	b.n	d5cc <miQueueReadOrRemove+0x44>
					q->head = buffer_current->nextItem;
    d60c:	6823      	ldr	r3, [r4, #0]
    d60e:	603b      	str	r3, [r7, #0]
    d610:	e7f1      	b.n	d5f6 <miQueueReadOrRemove+0x6e>
					q->tail = buffer_previous;
    d612:	607e      	str	r6, [r7, #4]
    d614:	e7f2      	b.n	d5fc <miQueueReadOrRemove+0x74>
	miQueueBuffer_t *buffer_current = NULL;
    d616:	2400      	movs	r4, #0
    d618:	e7d8      	b.n	d5cc <miQueueReadOrRemove+0x44>
    d61a:	46c0      	nop			; (mov r8, r8)
    d61c:	20000008 	.word	0x20000008

0000d620 <miQueueInit>:
	q->head = NULL;
    d620:	2300      	movs	r3, #0
    d622:	6003      	str	r3, [r0, #0]
	q->tail = NULL;
    d624:	6043      	str	r3, [r0, #4]
	q->size = 0;
    d626:	7203      	strb	r3, [r0, #8]
}
    d628:	4770      	bx	lr
    d62a:	Address 0x0000d62a is out of bounds.


0000d62c <miQueueAppend>:
  __ASM volatile ("cpsid i" : : : "memory");
    d62c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d62e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d632:	2200      	movs	r2, #0
    d634:	4b0a      	ldr	r3, [pc, #40]	; (d660 <miQueueAppend+0x34>)
    d636:	701a      	strb	r2, [r3, #0]
	if (q->size == 0) {
    d638:	7a03      	ldrb	r3, [r0, #8]
    d63a:	2b00      	cmp	r3, #0
    d63c:	d00e      	beq.n	d65c <miQueueAppend+0x30>
		q->tail->nextItem = bufPtr;
    d63e:	6843      	ldr	r3, [r0, #4]
    d640:	6019      	str	r1, [r3, #0]
	q->tail = bufPtr;
    d642:	6041      	str	r1, [r0, #4]
	bufPtr->nextItem = NULL;
    d644:	2300      	movs	r3, #0
    d646:	600b      	str	r3, [r1, #0]
	q->size++;
    d648:	7a03      	ldrb	r3, [r0, #8]
    d64a:	3301      	adds	r3, #1
    d64c:	7203      	strb	r3, [r0, #8]
	cpu_irq_enable();
    d64e:	2201      	movs	r2, #1
    d650:	4b03      	ldr	r3, [pc, #12]	; (d660 <miQueueAppend+0x34>)
    d652:	701a      	strb	r2, [r3, #0]
    d654:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d658:	b662      	cpsie	i
} /* miQueueAppend */
    d65a:	4770      	bx	lr
		q->head = bufPtr;
    d65c:	6001      	str	r1, [r0, #0]
    d65e:	e7f0      	b.n	d642 <miQueueAppend+0x16>
    d660:	20000008 	.word	0x20000008

0000d664 <miQueueRemove>:
 *
 * @return Pointer to the buffer header, if the buffer is
 * successfully removed, NULL otherwise.
 */
miQueueBuffer_t *miQueueRemove(MiQueue_t *q, search_t *search)
{
    d664:	b510      	push	{r4, lr}
    d666:	000a      	movs	r2, r1
	return (miQueueReadOrRemove(q, REMOVE_MODE, search));
    d668:	2100      	movs	r1, #0
    d66a:	4b01      	ldr	r3, [pc, #4]	; (d670 <miQueueRemove+0xc>)
    d66c:	4798      	blx	r3
}
    d66e:	bd10      	pop	{r4, pc}
    d670:	0000d589 	.word	0x0000d589

0000d674 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    d674:	b530      	push	{r4, r5, lr}
	if (timers) {
    d676:	4b14      	ldr	r3, [pc, #80]	; (d6c8 <placeTimer+0x54>)
    d678:	681d      	ldr	r5, [r3, #0]
    d67a:	2d00      	cmp	r5, #0
    d67c:	d01c      	beq.n	d6b8 <placeTimer+0x44>
		SYS_Timer_t *prev = NULL;
		uint32_t timeout = timer->interval;
    d67e:	6882      	ldr	r2, [r0, #8]

		for (SYS_Timer_t *t = timers; t; t = t->next) {
			if (timeout < t->timeout) {
    d680:	6869      	ldr	r1, [r5, #4]
    d682:	428a      	cmp	r2, r1
    d684:	d309      	bcc.n	d69a <placeTimer+0x26>
    d686:	002c      	movs	r4, r5
				t->timeout -= timeout;
				break;
			} else {
				timeout -= t->timeout;
    d688:	1a52      	subs	r2, r2, r1
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    d68a:	6823      	ldr	r3, [r4, #0]
    d68c:	2b00      	cmp	r3, #0
    d68e:	d008      	beq.n	d6a2 <placeTimer+0x2e>
			if (timeout < t->timeout) {
    d690:	6859      	ldr	r1, [r3, #4]
    d692:	4291      	cmp	r1, r2
    d694:	d803      	bhi.n	d69e <placeTimer+0x2a>
		for (SYS_Timer_t *t = timers; t; t = t->next) {
    d696:	001c      	movs	r4, r3
    d698:	e7f6      	b.n	d688 <placeTimer+0x14>
    d69a:	002b      	movs	r3, r5
		SYS_Timer_t *prev = NULL;
    d69c:	2400      	movs	r4, #0
				t->timeout -= timeout;
    d69e:	1a89      	subs	r1, r1, r2
    d6a0:	6059      	str	r1, [r3, #4]
			}

			prev = t;
		}

		timer->timeout = timeout;
    d6a2:	6042      	str	r2, [r0, #4]

		if (prev) {
    d6a4:	2c00      	cmp	r4, #0
    d6a6:	d003      	beq.n	d6b0 <placeTimer+0x3c>
			timer->next = prev->next;
    d6a8:	6823      	ldr	r3, [r4, #0]
    d6aa:	6003      	str	r3, [r0, #0]
			prev->next = timer;
    d6ac:	6020      	str	r0, [r4, #0]
	} else {
		timer->next = NULL;
		timer->timeout = timer->interval;
		timers = timer;
	}
}
    d6ae:	bd30      	pop	{r4, r5, pc}
			timer->next = timers;
    d6b0:	6005      	str	r5, [r0, #0]
			timers = timer;
    d6b2:	4b05      	ldr	r3, [pc, #20]	; (d6c8 <placeTimer+0x54>)
    d6b4:	6018      	str	r0, [r3, #0]
    d6b6:	e7fa      	b.n	d6ae <placeTimer+0x3a>
		timer->next = NULL;
    d6b8:	2300      	movs	r3, #0
    d6ba:	6003      	str	r3, [r0, #0]
		timer->timeout = timer->interval;
    d6bc:	6883      	ldr	r3, [r0, #8]
    d6be:	6043      	str	r3, [r0, #4]
		timers = timer;
    d6c0:	4b01      	ldr	r3, [pc, #4]	; (d6c8 <placeTimer+0x54>)
    d6c2:	6018      	str	r0, [r3, #0]
}
    d6c4:	e7f3      	b.n	d6ae <placeTimer+0x3a>
    d6c6:	46c0      	nop			; (mov r8, r8)
    d6c8:	20001c44 	.word	0x20001c44

0000d6cc <SYS_HwOverflow_Cb>:
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
}

static void SYS_HwOverflow_Cb(void)
{
	timerExtension1++;
    d6cc:	4a06      	ldr	r2, [pc, #24]	; (d6e8 <SYS_HwOverflow_Cb+0x1c>)
    d6ce:	7813      	ldrb	r3, [r2, #0]
    d6d0:	3301      	adds	r3, #1
    d6d2:	b2db      	uxtb	r3, r3
    d6d4:	7013      	strb	r3, [r2, #0]
	if(timerExtension1 == 0)
    d6d6:	7813      	ldrb	r3, [r2, #0]
    d6d8:	2b00      	cmp	r3, #0
    d6da:	d104      	bne.n	d6e6 <SYS_HwOverflow_Cb+0x1a>
	{
		timerExtension2++;
    d6dc:	4a03      	ldr	r2, [pc, #12]	; (d6ec <SYS_HwOverflow_Cb+0x20>)
    d6de:	7813      	ldrb	r3, [r2, #0]
    d6e0:	3301      	adds	r3, #1
    d6e2:	b2db      	uxtb	r3, r3
    d6e4:	7013      	strb	r3, [r2, #0]
	}
}
    d6e6:	4770      	bx	lr
    d6e8:	20002154 	.word	0x20002154
    d6ec:	20002155 	.word	0x20002155

0000d6f0 <SYS_HwExpiry_Cb>:
{
    d6f0:	b510      	push	{r4, lr}
	SysTimerIrqCount++;
    d6f2:	4a04      	ldr	r2, [pc, #16]	; (d704 <SYS_HwExpiry_Cb+0x14>)
    d6f4:	6813      	ldr	r3, [r2, #0]
    d6f6:	3301      	adds	r3, #1
    d6f8:	6013      	str	r3, [r2, #0]
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    d6fa:	4803      	ldr	r0, [pc, #12]	; (d708 <SYS_HwExpiry_Cb+0x18>)
    d6fc:	4b03      	ldr	r3, [pc, #12]	; (d70c <SYS_HwExpiry_Cb+0x1c>)
    d6fe:	4798      	blx	r3
}
    d700:	bd10      	pop	{r4, pc}
    d702:	46c0      	nop			; (mov r8, r8)
    d704:	20002150 	.word	0x20002150
    d708:	00002710 	.word	0x00002710
    d70c:	0000f389 	.word	0x0000f389

0000d710 <SYS_TimerInit>:
{
    d710:	b510      	push	{r4, lr}
	SysTimerIrqCount = 0;
    d712:	2400      	movs	r4, #0
    d714:	4b09      	ldr	r3, [pc, #36]	; (d73c <SYS_TimerInit+0x2c>)
    d716:	601c      	str	r4, [r3, #0]
    timerExtension1 = 0;
    d718:	4b09      	ldr	r3, [pc, #36]	; (d740 <SYS_TimerInit+0x30>)
    d71a:	701c      	strb	r4, [r3, #0]
    timerExtension2 = 0;
    d71c:	4b09      	ldr	r3, [pc, #36]	; (d744 <SYS_TimerInit+0x34>)
    d71e:	701c      	strb	r4, [r3, #0]
    set_common_tc_overflow_callback(SYS_HwOverflow_Cb);
    d720:	4809      	ldr	r0, [pc, #36]	; (d748 <SYS_TimerInit+0x38>)
    d722:	4b0a      	ldr	r3, [pc, #40]	; (d74c <SYS_TimerInit+0x3c>)
    d724:	4798      	blx	r3
	set_common_tc_expiry_callback(SYS_HwExpiry_Cb);
    d726:	480a      	ldr	r0, [pc, #40]	; (d750 <SYS_TimerInit+0x40>)
    d728:	4b0a      	ldr	r3, [pc, #40]	; (d754 <SYS_TimerInit+0x44>)
    d72a:	4798      	blx	r3
	common_tc_init();
    d72c:	4b0a      	ldr	r3, [pc, #40]	; (d758 <SYS_TimerInit+0x48>)
    d72e:	4798      	blx	r3
	common_tc_delay(SYS_TIMER_INTERVAL * MS);
    d730:	480a      	ldr	r0, [pc, #40]	; (d75c <SYS_TimerInit+0x4c>)
    d732:	4b0b      	ldr	r3, [pc, #44]	; (d760 <SYS_TimerInit+0x50>)
    d734:	4798      	blx	r3
	timers = NULL;
    d736:	4b0b      	ldr	r3, [pc, #44]	; (d764 <SYS_TimerInit+0x54>)
    d738:	601c      	str	r4, [r3, #0]
}
    d73a:	bd10      	pop	{r4, pc}
    d73c:	20002150 	.word	0x20002150
    d740:	20002154 	.word	0x20002154
    d744:	20002155 	.word	0x20002155
    d748:	0000d6cd 	.word	0x0000d6cd
    d74c:	0000f479 	.word	0x0000f479
    d750:	0000d6f1 	.word	0x0000d6f1
    d754:	0000f485 	.word	0x0000f485
    d758:	0000f3f5 	.word	0x0000f3f5
    d75c:	00002710 	.word	0x00002710
    d760:	0000f389 	.word	0x0000f389
    d764:	20001c44 	.word	0x20001c44

0000d768 <SYS_TimerStop>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d768:	4b0e      	ldr	r3, [pc, #56]	; (d7a4 <SYS_TimerStop+0x3c>)
    d76a:	681a      	ldr	r2, [r3, #0]
    d76c:	2a00      	cmp	r2, #0
    d76e:	d014      	beq.n	d79a <SYS_TimerStop+0x32>
		if (t == timer) {
    d770:	4282      	cmp	r2, r0
    d772:	d013      	beq.n	d79c <SYS_TimerStop+0x34>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d774:	6813      	ldr	r3, [r2, #0]
    d776:	2b00      	cmp	r3, #0
    d778:	d00f      	beq.n	d79a <SYS_TimerStop+0x32>
		if (t == timer) {
    d77a:	4298      	cmp	r0, r3
    d77c:	d001      	beq.n	d782 <SYS_TimerStop+0x1a>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d77e:	001a      	movs	r2, r3
    d780:	e7f8      	b.n	d774 <SYS_TimerStop+0xc>
			if (prev) {
    d782:	2a00      	cmp	r2, #0
    d784:	d00a      	beq.n	d79c <SYS_TimerStop+0x34>
				prev->next = t->next;
    d786:	6803      	ldr	r3, [r0, #0]
    d788:	6013      	str	r3, [r2, #0]
			if (t->next) {
    d78a:	6803      	ldr	r3, [r0, #0]
    d78c:	2b00      	cmp	r3, #0
    d78e:	d004      	beq.n	d79a <SYS_TimerStop+0x32>
				t->next->timeout += timer->timeout;
    d790:	6842      	ldr	r2, [r0, #4]
    d792:	6859      	ldr	r1, [r3, #4]
    d794:	468c      	mov	ip, r1
    d796:	4462      	add	r2, ip
    d798:	605a      	str	r2, [r3, #4]
}
    d79a:	4770      	bx	lr
				timers = t->next;
    d79c:	4b01      	ldr	r3, [pc, #4]	; (d7a4 <SYS_TimerStop+0x3c>)
    d79e:	6802      	ldr	r2, [r0, #0]
    d7a0:	601a      	str	r2, [r3, #0]
    d7a2:	e7f2      	b.n	d78a <SYS_TimerStop+0x22>
    d7a4:	20001c44 	.word	0x20001c44

0000d7a8 <SYS_TimerStarted>:
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d7a8:	4b09      	ldr	r3, [pc, #36]	; (d7d0 <SYS_TimerStarted+0x28>)
    d7aa:	681b      	ldr	r3, [r3, #0]
    d7ac:	2b00      	cmp	r3, #0
    d7ae:	d00a      	beq.n	d7c6 <SYS_TimerStarted+0x1e>
		if (t == timer) {
    d7b0:	4283      	cmp	r3, r0
    d7b2:	d00a      	beq.n	d7ca <SYS_TimerStarted+0x22>
	for (SYS_Timer_t *t = timers; t; t = t->next) {
    d7b4:	681b      	ldr	r3, [r3, #0]
    d7b6:	2b00      	cmp	r3, #0
    d7b8:	d003      	beq.n	d7c2 <SYS_TimerStarted+0x1a>
		if (t == timer) {
    d7ba:	4298      	cmp	r0, r3
    d7bc:	d1fa      	bne.n	d7b4 <SYS_TimerStarted+0xc>
			return true;
    d7be:	2001      	movs	r0, #1
    d7c0:	e000      	b.n	d7c4 <SYS_TimerStarted+0x1c>
	return false;
    d7c2:	2000      	movs	r0, #0
}
    d7c4:	4770      	bx	lr
	return false;
    d7c6:	2000      	movs	r0, #0
    d7c8:	e7fc      	b.n	d7c4 <SYS_TimerStarted+0x1c>
			return true;
    d7ca:	2001      	movs	r0, #1
    d7cc:	e7fa      	b.n	d7c4 <SYS_TimerStarted+0x1c>
    d7ce:	46c0      	nop			; (mov r8, r8)
    d7d0:	20001c44 	.word	0x20001c44

0000d7d4 <SYS_TimerStart>:
{
    d7d4:	b510      	push	{r4, lr}
    d7d6:	0004      	movs	r4, r0
	if (!SYS_TimerStarted(timer)) {
    d7d8:	4b04      	ldr	r3, [pc, #16]	; (d7ec <SYS_TimerStart+0x18>)
    d7da:	4798      	blx	r3
    d7dc:	2800      	cmp	r0, #0
    d7de:	d000      	beq.n	d7e2 <SYS_TimerStart+0xe>
}
    d7e0:	bd10      	pop	{r4, pc}
		placeTimer(timer);
    d7e2:	0020      	movs	r0, r4
    d7e4:	4b02      	ldr	r3, [pc, #8]	; (d7f0 <SYS_TimerStart+0x1c>)
    d7e6:	4798      	blx	r3
}
    d7e8:	e7fa      	b.n	d7e0 <SYS_TimerStart+0xc>
    d7ea:	46c0      	nop			; (mov r8, r8)
    d7ec:	0000d7a9 	.word	0x0000d7a9
    d7f0:	0000d675 	.word	0x0000d675

0000d7f4 <SYS_TimerTaskHandler>:
{
    d7f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7f6:	b083      	sub	sp, #12
	if (0 == SysTimerIrqCount) {
    d7f8:	4b1d      	ldr	r3, [pc, #116]	; (d870 <SYS_TimerTaskHandler+0x7c>)
    d7fa:	681b      	ldr	r3, [r3, #0]
    d7fc:	2b00      	cmp	r3, #0
    d7fe:	d034      	beq.n	d86a <SYS_TimerTaskHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d800:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    d804:	4253      	negs	r3, r2
    d806:	4153      	adcs	r3, r2
    d808:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    d80a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    d80c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    d810:	2100      	movs	r1, #0
    d812:	4b18      	ldr	r3, [pc, #96]	; (d874 <SYS_TimerTaskHandler+0x80>)
    d814:	7019      	strb	r1, [r3, #0]
	return flags;
    d816:	9801      	ldr	r0, [sp, #4]
	cnt = SysTimerIrqCount;
    d818:	4a15      	ldr	r2, [pc, #84]	; (d870 <SYS_TimerTaskHandler+0x7c>)
    d81a:	6813      	ldr	r3, [r2, #0]
	SysTimerIrqCount = 0;
    d81c:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    d81e:	2800      	cmp	r0, #0
    d820:	d005      	beq.n	d82e <SYS_TimerTaskHandler+0x3a>
		cpu_irq_enable();
    d822:	3101      	adds	r1, #1
    d824:	4a13      	ldr	r2, [pc, #76]	; (d874 <SYS_TimerTaskHandler+0x80>)
    d826:	7011      	strb	r1, [r2, #0]
    d828:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    d82c:	b662      	cpsie	i
	elapsed = cnt * SYS_TIMER_INTERVAL;
    d82e:	009d      	lsls	r5, r3, #2
    d830:	18ed      	adds	r5, r5, r3
    d832:	006d      	lsls	r5, r5, #1
	while (timers && (timers->timeout <= elapsed)) {
    d834:	4e10      	ldr	r6, [pc, #64]	; (d878 <SYS_TimerTaskHandler+0x84>)
		timers = timers->next;
    d836:	0037      	movs	r7, r6
	while (timers && (timers->timeout <= elapsed)) {
    d838:	e005      	b.n	d846 <SYS_TimerTaskHandler+0x52>
			placeTimer(timer);
    d83a:	0020      	movs	r0, r4
    d83c:	4b0f      	ldr	r3, [pc, #60]	; (d87c <SYS_TimerTaskHandler+0x88>)
    d83e:	4798      	blx	r3
    d840:	e00d      	b.n	d85e <SYS_TimerTaskHandler+0x6a>
			timer->handler(timer);
    d842:	0020      	movs	r0, r4
    d844:	4798      	blx	r3
	while (timers && (timers->timeout <= elapsed)) {
    d846:	6834      	ldr	r4, [r6, #0]
    d848:	2c00      	cmp	r4, #0
    d84a:	d00e      	beq.n	d86a <SYS_TimerTaskHandler+0x76>
    d84c:	6863      	ldr	r3, [r4, #4]
    d84e:	429d      	cmp	r5, r3
    d850:	d309      	bcc.n	d866 <SYS_TimerTaskHandler+0x72>
		elapsed -= timers->timeout;
    d852:	1aed      	subs	r5, r5, r3
		timers = timers->next;
    d854:	6823      	ldr	r3, [r4, #0]
    d856:	603b      	str	r3, [r7, #0]
		if (SYS_TIMER_PERIODIC_MODE == timer->mode) {
    d858:	7b23      	ldrb	r3, [r4, #12]
    d85a:	2b01      	cmp	r3, #1
    d85c:	d0ed      	beq.n	d83a <SYS_TimerTaskHandler+0x46>
		if (timer->handler) {
    d85e:	6923      	ldr	r3, [r4, #16]
    d860:	2b00      	cmp	r3, #0
    d862:	d1ee      	bne.n	d842 <SYS_TimerTaskHandler+0x4e>
    d864:	e7ef      	b.n	d846 <SYS_TimerTaskHandler+0x52>
		timers->timeout -= elapsed;
    d866:	1b5d      	subs	r5, r3, r5
    d868:	6065      	str	r5, [r4, #4]
}
    d86a:	b003      	add	sp, #12
    d86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d86e:	46c0      	nop			; (mov r8, r8)
    d870:	20002150 	.word	0x20002150
    d874:	20000008 	.word	0x20000008
    d878:	20001c44 	.word	0x20001c44
    d87c:	0000d675 	.word	0x0000d675

0000d880 <MiWi_TickGet>:
{
    d880:	b570      	push	{r4, r5, r6, lr}
	uint8_t current_timerExtension1 = timerExtension1;
    d882:	4e0f      	ldr	r6, [pc, #60]	; (d8c0 <MiWi_TickGet+0x40>)
    d884:	7835      	ldrb	r5, [r6, #0]
    d886:	b2ed      	uxtb	r5, r5
	currentTime.word.w0 = common_tc_read_count();
    d888:	4b0e      	ldr	r3, [pc, #56]	; (d8c4 <MiWi_TickGet+0x44>)
    d88a:	4798      	blx	r3
    d88c:	0004      	movs	r4, r0
	nop();
    d88e:	46c0      	nop			; (mov r8, r8)
	if (current_timerExtension1 != timerExtension1)
    d890:	7833      	ldrb	r3, [r6, #0]
    d892:	b2db      	uxtb	r3, r3
    d894:	429d      	cmp	r5, r3
    d896:	d004      	beq.n	d8a2 <MiWi_TickGet+0x22>
		currentTime.word.w0 = common_tc_read_count();
    d898:	4b0a      	ldr	r3, [pc, #40]	; (d8c4 <MiWi_TickGet+0x44>)
    d89a:	4798      	blx	r3
    d89c:	0c24      	lsrs	r4, r4, #16
    d89e:	0424      	lsls	r4, r4, #16
    d8a0:	4304      	orrs	r4, r0
    currentTime.byte.b2 = timerExtension1;
    d8a2:	4b07      	ldr	r3, [pc, #28]	; (d8c0 <MiWi_TickGet+0x40>)
    d8a4:	781b      	ldrb	r3, [r3, #0]
    d8a6:	041b      	lsls	r3, r3, #16
    d8a8:	4807      	ldr	r0, [pc, #28]	; (d8c8 <MiWi_TickGet+0x48>)
    d8aa:	4004      	ands	r4, r0
    d8ac:	431c      	orrs	r4, r3
    currentTime.byte.b3 = timerExtension2;
    d8ae:	4b07      	ldr	r3, [pc, #28]	; (d8cc <MiWi_TickGet+0x4c>)
    d8b0:	781b      	ldrb	r3, [r3, #0]
    d8b2:	061b      	lsls	r3, r3, #24
    d8b4:	0224      	lsls	r4, r4, #8
    d8b6:	0a24      	lsrs	r4, r4, #8
    d8b8:	431c      	orrs	r4, r3
}
    d8ba:	0020      	movs	r0, r4
    d8bc:	bd70      	pop	{r4, r5, r6, pc}
    d8be:	46c0      	nop			; (mov r8, r8)
    d8c0:	20002154 	.word	0x20002154
    d8c4:	0000f33d 	.word	0x0000f33d
    d8c8:	ff00ffff 	.word	0xff00ffff
    d8cc:	20002155 	.word	0x20002155

0000d8d0 <MiWi_TickGetDiff>:
	if (current_tick.Val > previous_tick.Val)
    d8d0:	4288      	cmp	r0, r1
    d8d2:	d802      	bhi.n	d8da <MiWi_TickGetDiff+0xa>
		ret_val = (0xFFFFFFFF - previous_tick.Val) + current_tick.Val;
    d8d4:	3801      	subs	r0, #1
    d8d6:	1a40      	subs	r0, r0, r1
}
    d8d8:	4770      	bx	lr
		ret_val = current_tick.Val - previous_tick.Val;
    d8da:	1a40      	subs	r0, r0, r1
    d8dc:	e7fc      	b.n	d8d8 <MiWi_TickGetDiff+0x8>
    d8de:	Address 0x0000d8de is out of bounds.


0000d8e0 <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    d8e0:	b510      	push	{r4, lr}
	tmr_cca_callback();
    d8e2:	4b01      	ldr	r3, [pc, #4]	; (d8e8 <tc_cca_callback+0x8>)
    d8e4:	4798      	blx	r3
}
    d8e6:	bd10      	pop	{r4, pc}
    d8e8:	0000f45d 	.word	0x0000f45d

0000d8ec <tc_ovf_callback>:
{
    d8ec:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    d8ee:	4b01      	ldr	r3, [pc, #4]	; (d8f4 <tc_ovf_callback+0x8>)
    d8f0:	4798      	blx	r3
}
    d8f2:	bd10      	pop	{r4, pc}
    d8f4:	0000f415 	.word	0x0000f415

0000d8f8 <tmr_read_count>:
{
    d8f8:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    d8fa:	4802      	ldr	r0, [pc, #8]	; (d904 <tmr_read_count+0xc>)
    d8fc:	4b02      	ldr	r3, [pc, #8]	; (d908 <tmr_read_count+0x10>)
    d8fe:	4798      	blx	r3
    d900:	b280      	uxth	r0, r0
}
    d902:	bd10      	pop	{r4, pc}
    d904:	20002190 	.word	0x20002190
    d908:	00008a95 	.word	0x00008a95

0000d90c <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    d90c:	4b03      	ldr	r3, [pc, #12]	; (d91c <tmr_disable_cc_interrupt+0x10>)
    d90e:	2110      	movs	r1, #16
    d910:	681a      	ldr	r2, [r3, #0]
    d912:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    d914:	7e5a      	ldrb	r2, [r3, #25]
    d916:	438a      	bics	r2, r1
    d918:	765a      	strb	r2, [r3, #25]
}
    d91a:	4770      	bx	lr
    d91c:	20002190 	.word	0x20002190

0000d920 <tmr_enable_cc_interrupt>:
{
    d920:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d922:	4c0b      	ldr	r4, [pc, #44]	; (d950 <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    d924:	2510      	movs	r5, #16
    d926:	6823      	ldr	r3, [r4, #0]
    d928:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d92a:	0018      	movs	r0, r3
    d92c:	4b09      	ldr	r3, [pc, #36]	; (d954 <tmr_enable_cc_interrupt+0x34>)
    d92e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d930:	4b09      	ldr	r3, [pc, #36]	; (d958 <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d932:	5c1b      	ldrb	r3, [r3, r0]
    d934:	221f      	movs	r2, #31
    d936:	401a      	ands	r2, r3
    d938:	2301      	movs	r3, #1
    d93a:	4093      	lsls	r3, r2
    d93c:	4a07      	ldr	r2, [pc, #28]	; (d95c <tmr_enable_cc_interrupt+0x3c>)
    d93e:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    d940:	7e63      	ldrb	r3, [r4, #25]
    d942:	2210      	movs	r2, #16
    d944:	4313      	orrs	r3, r2
    d946:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    d948:	6823      	ldr	r3, [r4, #0]
    d94a:	725d      	strb	r5, [r3, #9]
}
    d94c:	bd70      	pop	{r4, r5, r6, pc}
    d94e:	46c0      	nop			; (mov r8, r8)
    d950:	20002190 	.word	0x20002190
    d954:	0000877d 	.word	0x0000877d
    d958:	00013a04 	.word	0x00013a04
    d95c:	e000e100 	.word	0xe000e100

0000d960 <tmr_write_cmpreg>:
{
    d960:	b510      	push	{r4, lr}
    d962:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    d964:	2100      	movs	r1, #0
    d966:	4802      	ldr	r0, [pc, #8]	; (d970 <tmr_write_cmpreg+0x10>)
    d968:	4b02      	ldr	r3, [pc, #8]	; (d974 <tmr_write_cmpreg+0x14>)
    d96a:	4798      	blx	r3
}
    d96c:	bd10      	pop	{r4, pc}
    d96e:	46c0      	nop			; (mov r8, r8)
    d970:	20002190 	.word	0x20002190
    d974:	00008add 	.word	0x00008add

0000d978 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    d978:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    d97a:	4a33      	ldr	r2, [pc, #204]	; (da48 <tmr_init+0xd0>)
    d97c:	2100      	movs	r1, #0
    d97e:	2300      	movs	r3, #0
    d980:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d982:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d984:	2000      	movs	r0, #0
    d986:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d988:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d98a:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    d98c:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    d98e:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d990:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d992:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d994:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d996:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d998:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d99a:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    d99c:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d99e:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d9a0:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d9a2:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d9a4:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d9a6:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    d9a8:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    d9aa:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d9ac:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    d9ae:	2334      	movs	r3, #52	; 0x34
    d9b0:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    d9b2:	3b35      	subs	r3, #53	; 0x35
    d9b4:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    d9b6:	4c25      	ldr	r4, [pc, #148]	; (da4c <tmr_init+0xd4>)
    d9b8:	4925      	ldr	r1, [pc, #148]	; (da50 <tmr_init+0xd8>)
    d9ba:	0020      	movs	r0, r4
    d9bc:	4b25      	ldr	r3, [pc, #148]	; (da54 <tmr_init+0xdc>)
    d9be:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    d9c0:	2200      	movs	r2, #0
    d9c2:	4925      	ldr	r1, [pc, #148]	; (da58 <tmr_init+0xe0>)
    d9c4:	0020      	movs	r0, r4
    d9c6:	4d25      	ldr	r5, [pc, #148]	; (da5c <tmr_init+0xe4>)
    d9c8:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    d9ca:	2202      	movs	r2, #2
    d9cc:	4924      	ldr	r1, [pc, #144]	; (da60 <tmr_init+0xe8>)
    d9ce:	0020      	movs	r0, r4
    d9d0:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    d9d2:	6820      	ldr	r0, [r4, #0]
    d9d4:	4b23      	ldr	r3, [pc, #140]	; (da64 <tmr_init+0xec>)
    d9d6:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    d9d8:	4b23      	ldr	r3, [pc, #140]	; (da68 <tmr_init+0xf0>)
    d9da:	5c1a      	ldrb	r2, [r3, r0]
    d9dc:	231f      	movs	r3, #31
    d9de:	4013      	ands	r3, r2
    d9e0:	2101      	movs	r1, #1
    d9e2:	000a      	movs	r2, r1
    d9e4:	409a      	lsls	r2, r3
    d9e6:	4b21      	ldr	r3, [pc, #132]	; (da6c <tmr_init+0xf4>)
    d9e8:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    d9ea:	7e63      	ldrb	r3, [r4, #25]
    d9ec:	2201      	movs	r2, #1
    d9ee:	4313      	orrs	r3, r2
    d9f0:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    d9f2:	6822      	ldr	r2, [r4, #0]
    d9f4:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    d9f6:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    d9f8:	2b00      	cmp	r3, #0
    d9fa:	d1fc      	bne.n	d9f6 <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d9fc:	6813      	ldr	r3, [r2, #0]
    d9fe:	2102      	movs	r1, #2
    da00:	430b      	orrs	r3, r1
    da02:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    da04:	2000      	movs	r0, #0
    da06:	4b1a      	ldr	r3, [pc, #104]	; (da70 <tmr_init+0xf8>)
    da08:	4798      	blx	r3
    da0a:	4d1a      	ldr	r5, [pc, #104]	; (da74 <tmr_init+0xfc>)
    da0c:	47a8      	blx	r5
    da0e:	491a      	ldr	r1, [pc, #104]	; (da78 <tmr_init+0x100>)
    da10:	4b1a      	ldr	r3, [pc, #104]	; (da7c <tmr_init+0x104>)
    da12:	4798      	blx	r3
    da14:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    da16:	4b1a      	ldr	r3, [pc, #104]	; (da80 <tmr_init+0x108>)
    da18:	4798      	blx	r3
    da1a:	47a8      	blx	r5
    da1c:	1c01      	adds	r1, r0, #0
    da1e:	1c20      	adds	r0, r4, #0
    da20:	4b18      	ldr	r3, [pc, #96]	; (da84 <tmr_init+0x10c>)
    da22:	4798      	blx	r3
    da24:	21fc      	movs	r1, #252	; 0xfc
    da26:	0589      	lsls	r1, r1, #22
    da28:	4b17      	ldr	r3, [pc, #92]	; (da88 <tmr_init+0x110>)
    da2a:	4798      	blx	r3
    da2c:	2800      	cmp	r0, #0
    da2e:	d005      	beq.n	da3c <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    da30:	21fe      	movs	r1, #254	; 0xfe
    da32:	0589      	lsls	r1, r1, #22
    da34:	1c20      	adds	r0, r4, #0
    da36:	4b15      	ldr	r3, [pc, #84]	; (da8c <tmr_init+0x114>)
    da38:	4798      	blx	r3
    da3a:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    da3c:	1c20      	adds	r0, r4, #0
    da3e:	4b10      	ldr	r3, [pc, #64]	; (da80 <tmr_init+0x108>)
    da40:	4798      	blx	r3
    da42:	b2c0      	uxtb	r0, r0
}
    da44:	bd70      	pop	{r4, r5, r6, pc}
    da46:	46c0      	nop			; (mov r8, r8)
    da48:	20002158 	.word	0x20002158
    da4c:	20002190 	.word	0x20002190
    da50:	42002000 	.word	0x42002000
    da54:	000087b5 	.word	0x000087b5
    da58:	0000d8ed 	.word	0x0000d8ed
    da5c:	000086b5 	.word	0x000086b5
    da60:	0000d8e1 	.word	0x0000d8e1
    da64:	0000877d 	.word	0x0000877d
    da68:	00013a04 	.word	0x00013a04
    da6c:	e000e100 	.word	0xe000e100
    da70:	0000847d 	.word	0x0000847d
    da74:	0001039d 	.word	0x0001039d
    da78:	49742400 	.word	0x49742400
    da7c:	0000fc45 	.word	0x0000fc45
    da80:	0000f8f1 	.word	0x0000f8f1
    da84:	00010025 	.word	0x00010025
    da88:	0000f889 	.word	0x0000f889
    da8c:	0000f921 	.word	0x0000f921

0000da90 <nvm_init>:

	return STATUS_OK;
}

status_code_t nvm_init(mem_type_t mem)
{
    da90:	b500      	push	{lr}
    da92:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    da94:	2800      	cmp	r0, #0
    da96:	d110      	bne.n	daba <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    da98:	2300      	movs	r3, #0
    da9a:	466a      	mov	r2, sp
    da9c:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    da9e:	4a08      	ldr	r2, [pc, #32]	; (dac0 <nvm_init+0x30>)
    daa0:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    daa2:	466a      	mov	r2, sp
    daa4:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    daa6:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    daa8:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    daaa:	3302      	adds	r3, #2
    daac:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    daae:	4668      	mov	r0, sp
    dab0:	4b04      	ldr	r3, [pc, #16]	; (dac4 <nvm_init+0x34>)
    dab2:	4798      	blx	r3

		return STATUS_OK;
    dab4:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    dab6:	b003      	add	sp, #12
    dab8:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    daba:	2008      	movs	r0, #8
    dabc:	4240      	negs	r0, r0
    dabe:	e7fa      	b.n	dab6 <nvm_init+0x26>
    dac0:	41004000 	.word	0x41004000
    dac4:	000067b1 	.word	0x000067b1

0000dac8 <sal_aes_wrrd>:
 * @param[in]  idata  AES block to be en/decrypted
 * @param[out] odata  Result of previous operation
 *                    (odata may be NULL or equal to idata)
 */
void sal_aes_wrrd(uint8_t *idata, uint8_t *odata)
{
    dac8:	b570      	push	{r4, r5, r6, lr}
    daca:	0003      	movs	r3, r0
    dacc:	000d      	movs	r5, r1
	 * Write data and start the operation.
	 * AES_MODE in aes_buf[0] and aes_buf[AES_BLOCKSIZE+1] as well as
	 * AES_REQUEST in aes_buf[AES_BLOCKSIZE+1]
	 * were set before in sal_aes_setup()
	 */
	memcpy(aes_buf + 1, idata, AES_BLOCKSIZE);
    dace:	4c14      	ldr	r4, [pc, #80]	; (db20 <sal_aes_wrrd+0x58>)
    dad0:	1c60      	adds	r0, r4, #1
    dad2:	2210      	movs	r2, #16
    dad4:	0019      	movs	r1, r3
    dad6:	4b13      	ldr	r3, [pc, #76]	; (db24 <sal_aes_wrrd+0x5c>)
    dad8:	4798      	blx	r3

	/* trx_aes_wrrd() overwrites aes_buf, the last byte must be saved.
	**/
	save_cmd = aes_buf[AES_BLOCKSIZE + 1];
    dada:	7c64      	ldrb	r4, [r4, #17]

	if (setup_flag) {
    dadc:	4b12      	ldr	r3, [pc, #72]	; (db28 <sal_aes_wrrd+0x60>)
    dade:	781b      	ldrb	r3, [r3, #0]
    dae0:	2b00      	cmp	r3, #0
    dae2:	d015      	beq.n	db10 <sal_aes_wrrd+0x48>
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    dae4:	2212      	movs	r2, #18
    dae6:	490e      	ldr	r1, [pc, #56]	; (db20 <sal_aes_wrrd+0x58>)
    dae8:	2083      	movs	r0, #131	; 0x83
    daea:	4b10      	ldr	r3, [pc, #64]	; (db2c <sal_aes_wrrd+0x64>)
    daec:	4798      	blx	r3
				AES_BLOCKSIZE + 2);

		setup_flag = false;
    daee:	2200      	movs	r2, #0
    daf0:	4b0d      	ldr	r3, [pc, #52]	; (db28 <sal_aes_wrrd+0x60>)
    daf2:	701a      	strb	r2, [r3, #0]
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
				aes_buf + 1, AES_BLOCKSIZE + 1);
	}

	/* Restore the result. */
	if (odata != NULL) {
    daf4:	2d00      	cmp	r5, #0
    daf6:	d005      	beq.n	db04 <sal_aes_wrrd+0x3c>
		memcpy(odata, aes_buf + 1, AES_BLOCKSIZE);
    daf8:	2210      	movs	r2, #16
    dafa:	4909      	ldr	r1, [pc, #36]	; (db20 <sal_aes_wrrd+0x58>)
    dafc:	3101      	adds	r1, #1
    dafe:	0028      	movs	r0, r5
    db00:	4b08      	ldr	r3, [pc, #32]	; (db24 <sal_aes_wrrd+0x5c>)
    db02:	4798      	blx	r3
	}

	aes_buf[AES_BLOCKSIZE + 1] = save_cmd;
    db04:	4b06      	ldr	r3, [pc, #24]	; (db20 <sal_aes_wrrd+0x58>)
    db06:	745c      	strb	r4, [r3, #17]

	/* Wait for the operation to finish for 24 us. */
	delay_us(24);
    db08:	2018      	movs	r0, #24
    db0a:	4b09      	ldr	r3, [pc, #36]	; (db30 <sal_aes_wrrd+0x68>)
    db0c:	4798      	blx	r3
}
    db0e:	bd70      	pop	{r4, r5, r6, pc}
		trx_aes_wrrd((AES_BASE_ADDR + RG_AES_STATE_KEY_0),
    db10:	2211      	movs	r2, #17
    db12:	4903      	ldr	r1, [pc, #12]	; (db20 <sal_aes_wrrd+0x58>)
    db14:	3101      	adds	r1, #1
    db16:	2084      	movs	r0, #132	; 0x84
    db18:	4b04      	ldr	r3, [pc, #16]	; (db2c <sal_aes_wrrd+0x64>)
    db1a:	4798      	blx	r3
    db1c:	e7ea      	b.n	daf4 <sal_aes_wrrd+0x2c>
    db1e:	46c0      	nop			; (mov r8, r8)
    db20:	20001c48 	.word	0x20001c48
    db24:	00011e37 	.word	0x00011e37
    db28:	20001c7c 	.word	0x20001c7c
    db2c:	0000e525 	.word	0x0000e525
    db30:	00006239 	.word	0x00006239

0000db34 <sal_aes_setup>:
{
    db34:	b5f0      	push	{r4, r5, r6, r7, lr}
    db36:	46c6      	mov	lr, r8
    db38:	b500      	push	{lr}
    db3a:	b084      	sub	sp, #16
    db3c:	0005      	movs	r5, r0
    db3e:	000e      	movs	r6, r1
    db40:	0014      	movs	r4, r2
	if (key != NULL) {
    db42:	2800      	cmp	r0, #0
    db44:	d017      	beq.n	db76 <sal_aes_setup+0x42>
		dec_initialized = false;
    db46:	2200      	movs	r2, #0
    db48:	4b3e      	ldr	r3, [pc, #248]	; (dc44 <sal_aes_setup+0x110>)
    db4a:	701a      	strb	r2, [r3, #0]
		last_dir = AES_DIR_VOID;
    db4c:	3202      	adds	r2, #2
    db4e:	4b3e      	ldr	r3, [pc, #248]	; (dc48 <sal_aes_setup+0x114>)
    db50:	701a      	strb	r2, [r3, #0]
		memcpy(enc_key, key, AES_KEYSIZE);
    db52:	320e      	adds	r2, #14
    db54:	0001      	movs	r1, r0
    db56:	483d      	ldr	r0, [pc, #244]	; (dc4c <sal_aes_setup+0x118>)
    db58:	4b3d      	ldr	r3, [pc, #244]	; (dc50 <sal_aes_setup+0x11c>)
    db5a:	4698      	mov	r8, r3
    db5c:	4798      	blx	r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    db5e:	4f3d      	ldr	r7, [pc, #244]	; (dc54 <sal_aes_setup+0x120>)
    db60:	2310      	movs	r3, #16
    db62:	703b      	strb	r3, [r7, #0]
		memcpy(aes_buf + 1, key, AES_KEYSIZE);
    db64:	1c78      	adds	r0, r7, #1
    db66:	2210      	movs	r2, #16
    db68:	0029      	movs	r1, r5
    db6a:	47c0      	blx	r8
		trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL), aes_buf,
    db6c:	2211      	movs	r2, #17
    db6e:	0039      	movs	r1, r7
    db70:	2083      	movs	r0, #131	; 0x83
    db72:	4b39      	ldr	r3, [pc, #228]	; (dc58 <sal_aes_setup+0x124>)
    db74:	4798      	blx	r3
	switch (dir) {
    db76:	2c00      	cmp	r4, #0
    db78:	d003      	beq.n	db82 <sal_aes_setup+0x4e>
    db7a:	2c01      	cmp	r4, #1
    db7c:	d02f      	beq.n	dbde <sal_aes_setup+0xaa>
		return false;
    db7e:	2000      	movs	r0, #0
    db80:	e01b      	b.n	dbba <sal_aes_setup+0x86>
		if (last_dir == AES_DIR_DECRYPT) {
    db82:	4b31      	ldr	r3, [pc, #196]	; (dc48 <sal_aes_setup+0x114>)
    db84:	781b      	ldrb	r3, [r3, #0]
    db86:	2b01      	cmp	r3, #1
    db88:	d01b      	beq.n	dbc2 <sal_aes_setup+0x8e>
	last_dir = dir;
    db8a:	4b2f      	ldr	r3, [pc, #188]	; (dc48 <sal_aes_setup+0x114>)
    db8c:	701c      	strb	r4, [r3, #0]
	switch (enc_mode) {
    db8e:	2e00      	cmp	r6, #0
    db90:	d002      	beq.n	db98 <sal_aes_setup+0x64>
		return (false);
    db92:	2000      	movs	r0, #0
	switch (enc_mode) {
    db94:	2e02      	cmp	r6, #2
    db96:	d110      	bne.n	dbba <sal_aes_setup+0x86>
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    db98:	0136      	lsls	r6, r6, #4
    db9a:	2370      	movs	r3, #112	; 0x70
    db9c:	401e      	ands	r6, r3
				SR_MASK(SR_AES_DIR, dir);
    db9e:	00e4      	lsls	r4, r4, #3
    dba0:	3b68      	subs	r3, #104	; 0x68
    dba2:	401c      	ands	r4, r3
		aes_buf[0] = SR_MASK(SR_AES_MODE, enc_mode) |
    dba4:	4334      	orrs	r4, r6
    dba6:	4b2b      	ldr	r3, [pc, #172]	; (dc54 <sal_aes_setup+0x120>)
    dba8:	701c      	strb	r4, [r3, #0]
				SR_MASK(SR_AES_DIR, dir) |
    dbaa:	2680      	movs	r6, #128	; 0x80
    dbac:	4276      	negs	r6, r6
    dbae:	4334      	orrs	r4, r6
		aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(SR_AES_MODE, enc_mode) |
    dbb0:	745c      	strb	r4, [r3, #17]
	setup_flag = true;
    dbb2:	2201      	movs	r2, #1
    dbb4:	4b29      	ldr	r3, [pc, #164]	; (dc5c <sal_aes_setup+0x128>)
    dbb6:	701a      	strb	r2, [r3, #0]
	return (true);
    dbb8:	2001      	movs	r0, #1
}
    dbba:	b004      	add	sp, #16
    dbbc:	bc04      	pop	{r2}
    dbbe:	4690      	mov	r8, r2
    dbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    dbc2:	4d24      	ldr	r5, [pc, #144]	; (dc54 <sal_aes_setup+0x120>)
    dbc4:	330f      	adds	r3, #15
    dbc6:	702b      	strb	r3, [r5, #0]
			memcpy(aes_buf + 1, enc_key, AES_KEYSIZE);
    dbc8:	1c68      	adds	r0, r5, #1
    dbca:	2210      	movs	r2, #16
    dbcc:	491f      	ldr	r1, [pc, #124]	; (dc4c <sal_aes_setup+0x118>)
    dbce:	4b20      	ldr	r3, [pc, #128]	; (dc50 <sal_aes_setup+0x11c>)
    dbd0:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    dbd2:	2211      	movs	r2, #17
    dbd4:	0029      	movs	r1, r5
    dbd6:	2083      	movs	r0, #131	; 0x83
    dbd8:	4b1f      	ldr	r3, [pc, #124]	; (dc58 <sal_aes_setup+0x124>)
    dbda:	4798      	blx	r3
    dbdc:	e7d5      	b.n	db8a <sal_aes_setup+0x56>
		if (last_dir != AES_DIR_DECRYPT) {
    dbde:	4b1a      	ldr	r3, [pc, #104]	; (dc48 <sal_aes_setup+0x114>)
    dbe0:	781b      	ldrb	r3, [r3, #0]
    dbe2:	2b01      	cmp	r3, #1
    dbe4:	d0d1      	beq.n	db8a <sal_aes_setup+0x56>
			aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    dbe6:	2210      	movs	r2, #16
    dbe8:	4b1a      	ldr	r3, [pc, #104]	; (dc54 <sal_aes_setup+0x120>)
    dbea:	701a      	strb	r2, [r3, #0]
			if (!dec_initialized) {
    dbec:	4b15      	ldr	r3, [pc, #84]	; (dc44 <sal_aes_setup+0x110>)
    dbee:	781b      	ldrb	r3, [r3, #0]
    dbf0:	2b00      	cmp	r3, #0
    dbf2:	d00e      	beq.n	dc12 <sal_aes_setup+0xde>
			memcpy(aes_buf + 1, dec_key, AES_KEYSIZE);
    dbf4:	4d17      	ldr	r5, [pc, #92]	; (dc54 <sal_aes_setup+0x120>)
    dbf6:	1c68      	adds	r0, r5, #1
    dbf8:	2210      	movs	r2, #16
    dbfa:	4919      	ldr	r1, [pc, #100]	; (dc60 <sal_aes_setup+0x12c>)
    dbfc:	4b14      	ldr	r3, [pc, #80]	; (dc50 <sal_aes_setup+0x11c>)
    dbfe:	4798      	blx	r3
			trx_sram_write((AES_BASE_ADDR + RG_AES_CTRL),
    dc00:	2211      	movs	r2, #17
    dc02:	0029      	movs	r1, r5
    dc04:	2083      	movs	r0, #131	; 0x83
    dc06:	4b14      	ldr	r3, [pc, #80]	; (dc58 <sal_aes_setup+0x124>)
    dc08:	4798      	blx	r3
			dec_initialized = true;
    dc0a:	4b0e      	ldr	r3, [pc, #56]	; (dc44 <sal_aes_setup+0x110>)
    dc0c:	2201      	movs	r2, #1
    dc0e:	701a      	strb	r2, [r3, #0]
    dc10:	e7bb      	b.n	db8a <sal_aes_setup+0x56>
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_ECB);
    dc12:	4d10      	ldr	r5, [pc, #64]	; (dc54 <sal_aes_setup+0x120>)
    dc14:	702b      	strb	r3, [r5, #0]
				aes_buf[AES_BLOCKSIZE + 1] = SR_MASK(
    dc16:	3380      	adds	r3, #128	; 0x80
    dc18:	746b      	strb	r3, [r5, #17]
				setup_flag = true; /* Needed in sal_aes_wrrd().
    dc1a:	3a0f      	subs	r2, #15
    dc1c:	4b0f      	ldr	r3, [pc, #60]	; (dc5c <sal_aes_setup+0x128>)
    dc1e:	701a      	strb	r2, [r3, #0]
				sal_aes_wrrd(dummy, NULL);
    dc20:	2100      	movs	r1, #0
    dc22:	4668      	mov	r0, sp
    dc24:	4b0f      	ldr	r3, [pc, #60]	; (dc64 <sal_aes_setup+0x130>)
    dc26:	4798      	blx	r3
				aes_buf[0] = SR_MASK(SR_AES_MODE, AES_MODE_KEY);
    dc28:	2310      	movs	r3, #16
    dc2a:	702b      	strb	r3, [r5, #0]
				trx_sram_write(
    dc2c:	2201      	movs	r2, #1
    dc2e:	0029      	movs	r1, r5
    dc30:	2083      	movs	r0, #131	; 0x83
    dc32:	4b09      	ldr	r3, [pc, #36]	; (dc58 <sal_aes_setup+0x124>)
    dc34:	4798      	blx	r3
				trx_sram_read((AES_BASE_ADDR +
    dc36:	2210      	movs	r2, #16
    dc38:	4909      	ldr	r1, [pc, #36]	; (dc60 <sal_aes_setup+0x12c>)
    dc3a:	2084      	movs	r0, #132	; 0x84
    dc3c:	4b0a      	ldr	r3, [pc, #40]	; (dc68 <sal_aes_setup+0x134>)
    dc3e:	4798      	blx	r3
    dc40:	e7d8      	b.n	dbf4 <sal_aes_setup+0xc0>
    dc42:	46c0      	nop			; (mov r8, r8)
    dc44:	20001c5a 	.word	0x20001c5a
    dc48:	20000019 	.word	0x20000019
    dc4c:	20001c6c 	.word	0x20001c6c
    dc50:	00011e37 	.word	0x00011e37
    dc54:	20001c48 	.word	0x20001c48
    dc58:	0000e231 	.word	0x0000e231
    dc5c:	20001c7c 	.word	0x20001c7c
    dc60:	20001c5c 	.word	0x20001c5c
    dc64:	0000dac9 	.word	0x0000dac9
    dc68:	0000e39d 	.word	0x0000e39d

0000dc6c <sal_aes_read>:
 * of a series of sal_aes_wrrd() calls.
 *
 * @param[out] data     - result of previous operation
 */
void sal_aes_read(uint8_t *data)
{
    dc6c:	b510      	push	{r4, lr}
    dc6e:	0001      	movs	r1, r0
	trx_sram_read((AES_BASE_ADDR + RG_AES_STATE_KEY_0), data,
    dc70:	2210      	movs	r2, #16
    dc72:	2084      	movs	r0, #132	; 0x84
    dc74:	4b01      	ldr	r3, [pc, #4]	; (dc7c <sal_aes_read+0x10>)
    dc76:	4798      	blx	r3
			AES_BLOCKSIZE);
}
    dc78:	bd10      	pop	{r4, pc}
    dc7a:	46c0      	nop			; (mov r8, r8)
    dc7c:	0000e39d 	.word	0x0000e39d

0000dc80 <AT86RFX_ISR>:
void AT86RFX_ISR(void)
#else
AT86RFX_ISR()
#endif

{
    dc80:	b510      	push	{r4, lr}
	eic_module->INTFLAG.reg = eic_mask;
    dc82:	2201      	movs	r2, #1
    dc84:	4b03      	ldr	r3, [pc, #12]	; (dc94 <AT86RFX_ISR+0x14>)
    dc86:	615a      	str	r2, [r3, #20]
	/*Clearing the RF interrupt*/
	trx_irq_flag_clr();
  	/*Calling the interrupt routines*/
	if (irq_hdl_trx) {
    dc88:	4b03      	ldr	r3, [pc, #12]	; (dc98 <AT86RFX_ISR+0x18>)
    dc8a:	681b      	ldr	r3, [r3, #0]
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	d000      	beq.n	dc92 <AT86RFX_ISR+0x12>
		irq_hdl_trx();
    dc90:	4798      	blx	r3
	}
}
    dc92:	bd10      	pop	{r4, pc}
    dc94:	40002400 	.word	0x40002400
    dc98:	20001c80 	.word	0x20001c80

0000dc9c <trx_spi_init>:

void trx_spi_init(void)
{
    dc9c:	b530      	push	{r4, r5, lr}
    dc9e:	b085      	sub	sp, #20
	config->address_enabled = false;
    dca0:	4a34      	ldr	r2, [pc, #208]	; (dd74 <trx_spi_init+0xd8>)
    dca2:	2300      	movs	r3, #0
    dca4:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    dca6:	7093      	strb	r3, [r2, #2]
	/* Initialize SPI in master mode to access the transceiver */
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_slave_inst_get_config_defaults(&slave_dev_config);
	slave_dev_config.ss_pin = AT86RFX_SPI_CS;
    dca8:	213f      	movs	r1, #63	; 0x3f
    dcaa:	7011      	strb	r1, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    dcac:	4c32      	ldr	r4, [pc, #200]	; (dd78 <trx_spi_init+0xdc>)
    dcae:	7021      	strb	r1, [r4, #0]
	slave->address_enabled = config->address_enabled;
    dcb0:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    dcb2:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    dcb4:	2201      	movs	r2, #1
    dcb6:	4669      	mov	r1, sp
    dcb8:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    dcba:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    dcbc:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    dcbe:	203f      	movs	r0, #63	; 0x3f
    dcc0:	4b2e      	ldr	r3, [pc, #184]	; (dd7c <trx_spi_init+0xe0>)
    dcc2:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    dcc4:	7822      	ldrb	r2, [r4, #0]
	if (port_index < PORT_INST_NUM) {
    dcc6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    dcc8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    dcca:	2900      	cmp	r1, #0
    dccc:	d104      	bne.n	dcd8 <trx_spi_init+0x3c>
		return &(ports[port_index]->Group[group_index]);
    dcce:	0953      	lsrs	r3, r2, #5
    dcd0:	01db      	lsls	r3, r3, #7
    dcd2:	492b      	ldr	r1, [pc, #172]	; (dd80 <trx_spi_init+0xe4>)
    dcd4:	468c      	mov	ip, r1
    dcd6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    dcd8:	211f      	movs	r1, #31
    dcda:	4011      	ands	r1, r2
    dcdc:	2201      	movs	r2, #1
    dcde:	0010      	movs	r0, r2
    dce0:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    dce2:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    dce4:	4c27      	ldr	r4, [pc, #156]	; (dd84 <trx_spi_init+0xe8>)
    dce6:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    dce8:	2300      	movs	r3, #0
    dcea:	6063      	str	r3, [r4, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    dcec:	60a3      	str	r3, [r4, #8]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    dcee:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    dcf0:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    dcf2:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    dcf4:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    dcf6:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    dcf8:	3223      	adds	r2, #35	; 0x23
    dcfa:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    dcfc:	0020      	movs	r0, r4
    dcfe:	3018      	adds	r0, #24
    dd00:	3a18      	subs	r2, #24
    dd02:	2100      	movs	r1, #0
    dd04:	4b20      	ldr	r3, [pc, #128]	; (dd88 <trx_spi_init+0xec>)
    dd06:	4798      	blx	r3
	spi_attach_slave(&slave, &slave_dev_config);
	spi_get_config_defaults(&config);
	config.mux_setting = AT86RFX_SPI_SERCOM_MUX_SETTING;
    dd08:	2380      	movs	r3, #128	; 0x80
    dd0a:	025b      	lsls	r3, r3, #9
    dd0c:	60e3      	str	r3, [r4, #12]
	config.mode_specific.master.baudrate = AT86RFX_SPI_BAUDRATE;
    dd0e:	4b1f      	ldr	r3, [pc, #124]	; (dd8c <trx_spi_init+0xf0>)
    dd10:	61a3      	str	r3, [r4, #24]
	config.pinmux_pad0 = AT86RFX_SPI_SERCOM_PINMUX_PAD0;
    dd12:	4b1f      	ldr	r3, [pc, #124]	; (dd90 <trx_spi_init+0xf4>)
    dd14:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = AT86RFX_SPI_SERCOM_PINMUX_PAD1;
    dd16:	2301      	movs	r3, #1
    dd18:	425b      	negs	r3, r3
    dd1a:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = AT86RFX_SPI_SERCOM_PINMUX_PAD2;
    dd1c:	4b1d      	ldr	r3, [pc, #116]	; (dd94 <trx_spi_init+0xf8>)
    dd1e:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = AT86RFX_SPI_SERCOM_PINMUX_PAD3;
    dd20:	4b1d      	ldr	r3, [pc, #116]	; (dd98 <trx_spi_init+0xfc>)
    dd22:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, AT86RFX_SPI, &config);
    dd24:	4d1d      	ldr	r5, [pc, #116]	; (dd9c <trx_spi_init+0x100>)
    dd26:	0022      	movs	r2, r4
    dd28:	491d      	ldr	r1, [pc, #116]	; (dda0 <trx_spi_init+0x104>)
    dd2a:	0028      	movs	r0, r5
    dd2c:	4b1d      	ldr	r3, [pc, #116]	; (dda4 <trx_spi_init+0x108>)
    dd2e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    dd30:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    dd32:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    dd34:	2b00      	cmp	r3, #0
    dd36:	d1fc      	bne.n	dd32 <trx_spi_init+0x96>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    dd38:	6813      	ldr	r3, [r2, #0]
    dd3a:	2502      	movs	r5, #2
    dd3c:	432b      	orrs	r3, r5
    dd3e:	6013      	str	r3, [r2, #0]
	spi_enable(&master);

	struct extint_chan_conf eint_chan_conf;
	extint_chan_get_config_defaults(&eint_chan_conf);
    dd40:	ac01      	add	r4, sp, #4
    dd42:	0020      	movs	r0, r4
    dd44:	4b18      	ldr	r3, [pc, #96]	; (dda8 <trx_spi_init+0x10c>)
    dd46:	4798      	blx	r3
	eint_chan_conf.gpio_pin = AT86RFX_IRQ_PIN;
    dd48:	2320      	movs	r3, #32
    dd4a:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux = AT86RFX_IRQ_PINMUX;
    dd4c:	2380      	movs	r3, #128	; 0x80
    dd4e:	039b      	lsls	r3, r3, #14
    dd50:	6063      	str	r3, [r4, #4]
	eint_chan_conf.gpio_pin_pull      = EXTINT_PULL_DOWN;
    dd52:	7225      	strb	r5, [r4, #8]
	#if (SAML21 || SAMR30)
	eint_chan_conf.enable_async_edge_detection = false;
    dd54:	2300      	movs	r3, #0
    dd56:	7263      	strb	r3, [r4, #9]
	#else
	eint_chan_conf.wake_if_sleeping    = true;
	#endif
	eint_chan_conf.filter_input_signal = false;
    dd58:	72a3      	strb	r3, [r4, #10]
	eint_chan_conf.detection_criteria  = EXTINT_DETECT_RISING;
    dd5a:	3301      	adds	r3, #1
    dd5c:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(AT86RFX_IRQ_CHAN, &eint_chan_conf);
    dd5e:	0021      	movs	r1, r4
    dd60:	2000      	movs	r0, #0
    dd62:	4b12      	ldr	r3, [pc, #72]	; (ddac <trx_spi_init+0x110>)
    dd64:	4798      	blx	r3
	extint_register_callback(AT86RFX_ISR, AT86RFX_IRQ_CHAN,
    dd66:	2200      	movs	r2, #0
    dd68:	2100      	movs	r1, #0
    dd6a:	4811      	ldr	r0, [pc, #68]	; (ddb0 <trx_spi_init+0x114>)
    dd6c:	4b11      	ldr	r3, [pc, #68]	; (ddb4 <trx_spi_init+0x118>)
    dd6e:	4798      	blx	r3
	spi_master_setup_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE, SPI_MODE_0,
			AT86RFX_SPI_BAUDRATE, 0);
	spi_enable(AT86RFX_SPI);
	AT86RFX_INTC_INIT();
#endif
}
    dd70:	b005      	add	sp, #20
    dd72:	bd30      	pop	{r4, r5, pc}
    dd74:	200021b0 	.word	0x200021b0
    dd78:	200021b4 	.word	0x200021b4
    dd7c:	00006a99 	.word	0x00006a99
    dd80:	40002800 	.word	0x40002800
    dd84:	200021b8 	.word	0x200021b8
    dd88:	00011e49 	.word	0x00011e49
    dd8c:	003d0900 	.word	0x003d0900
    dd90:	00530005 	.word	0x00530005
    dd94:	003e0005 	.word	0x003e0005
    dd98:	00520005 	.word	0x00520005
    dd9c:	200021f0 	.word	0x200021f0
    dda0:	42001000 	.word	0x42001000
    dda4:	00007581 	.word	0x00007581
    dda8:	00006711 	.word	0x00006711
    ddac:	00006725 	.word	0x00006725
    ddb0:	0000dc81 	.word	0x0000dc81
    ddb4:	00006591 	.word	0x00006591

0000ddb8 <PhyReset>:

void PhyReset(void)
{
    ddb8:	b570      	push	{r4, r5, r6, lr}
    ddba:	4c08      	ldr	r4, [pc, #32]	; (dddc <PhyReset+0x24>)
    ddbc:	2580      	movs	r5, #128	; 0x80
    ddbe:	022d      	lsls	r5, r5, #8
    ddc0:	61a5      	str	r5, [r4, #24]
		port_base->OUTCLR.reg = pin_mask;
    ddc2:	2280      	movs	r2, #128	; 0x80
    ddc4:	0352      	lsls	r2, r2, #13
    ddc6:	4b06      	ldr	r3, [pc, #24]	; (dde0 <PhyReset+0x28>)
    ddc8:	615a      	str	r2, [r3, #20]
	/* Ensure control lines have correct levels. */
	RST_HIGH();
	SLP_TR_LOW();

	/* Wait typical time of timer TR1. */
	delay_us(330);
    ddca:	20a5      	movs	r0, #165	; 0xa5
    ddcc:	0040      	lsls	r0, r0, #1
    ddce:	4e05      	ldr	r6, [pc, #20]	; (dde4 <PhyReset+0x2c>)
    ddd0:	47b0      	blx	r6
    ddd2:	6165      	str	r5, [r4, #20]

	RST_LOW();
	delay_us(10);
    ddd4:	200a      	movs	r0, #10
    ddd6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    ddd8:	61a5      	str	r5, [r4, #24]
	RST_HIGH();
}
    ddda:	bd70      	pop	{r4, r5, r6, pc}
    dddc:	40002880 	.word	0x40002880
    dde0:	40002800 	.word	0x40002800
    dde4:	00006239 	.word	0x00006239

0000dde8 <trx_reg_read>:

uint8_t trx_reg_read(uint8_t addr)
{
    dde8:	b570      	push	{r4, r5, r6, lr}
    ddea:	b082      	sub	sp, #8
    ddec:	0005      	movs	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    ddee:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ddf2:	425a      	negs	r2, r3
    ddf4:	4153      	adcs	r3, r2
    ddf6:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    ddf8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    ddfa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ddfe:	2200      	movs	r2, #0
    de00:	4b33      	ldr	r3, [pc, #204]	; (ded0 <trx_reg_read+0xe8>)
    de02:	701a      	strb	r2, [r3, #0]
	return flags;
    de04:	9c01      	ldr	r4, [sp, #4]
	/* Prepare the command byte */
	addr |= READ_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    de06:	4e33      	ldr	r6, [pc, #204]	; (ded4 <trx_reg_read+0xec>)
    de08:	3201      	adds	r2, #1
    de0a:	4933      	ldr	r1, [pc, #204]	; (ded8 <trx_reg_read+0xf0>)
    de0c:	0030      	movs	r0, r6
    de0e:	4b33      	ldr	r3, [pc, #204]	; (dedc <trx_reg_read+0xf4>)
    de10:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    de12:	6833      	ldr	r3, [r6, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    de14:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    de16:	7e1a      	ldrb	r2, [r3, #24]
    de18:	420a      	tst	r2, r1
    de1a:	d0fc      	beq.n	de16 <trx_reg_read+0x2e>
    de1c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    de1e:	07d2      	lsls	r2, r2, #31
    de20:	d502      	bpl.n	de28 <trx_reg_read+0x40>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de22:	2280      	movs	r2, #128	; 0x80
    de24:	4315      	orrs	r5, r2
    de26:	629d      	str	r5, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    de28:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    de2a:	7e1a      	ldrb	r2, [r3, #24]
    de2c:	420a      	tst	r2, r1
    de2e:	d0fc      	beq.n	de2a <trx_reg_read+0x42>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    de30:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    de32:	7e1a      	ldrb	r2, [r3, #24]
    de34:	420a      	tst	r2, r1
    de36:	d0fc      	beq.n	de32 <trx_reg_read+0x4a>
    de38:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    de3a:	0752      	lsls	r2, r2, #29
    de3c:	d50c      	bpl.n	de58 <trx_reg_read+0x70>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    de3e:	8b5a      	ldrh	r2, [r3, #26]
    de40:	0752      	lsls	r2, r2, #29
    de42:	d501      	bpl.n	de48 <trx_reg_read+0x60>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    de44:	2204      	movs	r2, #4
    de46:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    de48:	4a22      	ldr	r2, [pc, #136]	; (ded4 <trx_reg_read+0xec>)
    de4a:	7992      	ldrb	r2, [r2, #6]
    de4c:	2a01      	cmp	r2, #1
    de4e:	d034      	beq.n	deba <trx_reg_read+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    de50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    de52:	b2d2      	uxtb	r2, r2
    de54:	4922      	ldr	r1, [pc, #136]	; (dee0 <trx_reg_read+0xf8>)
    de56:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	while (!spi_is_ready_to_write(&master)) {
    de58:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    de5a:	7e1a      	ldrb	r2, [r3, #24]
    de5c:	420a      	tst	r2, r1
    de5e:	d0fc      	beq.n	de5a <trx_reg_read+0x72>
    de60:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    de62:	07d2      	lsls	r2, r2, #31
    de64:	d501      	bpl.n	de6a <trx_reg_read+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    de66:	2200      	movs	r2, #0
    de68:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    de6a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    de6c:	7e1a      	ldrb	r2, [r3, #24]
    de6e:	420a      	tst	r2, r1
    de70:	d0fc      	beq.n	de6c <trx_reg_read+0x84>
	}
	while (!spi_is_ready_to_read(&master)) {
    de72:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    de74:	7e1a      	ldrb	r2, [r3, #24]
    de76:	420a      	tst	r2, r1
    de78:	d0fc      	beq.n	de74 <trx_reg_read+0x8c>
    de7a:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t register_value = 0;
    de7c:	2500      	movs	r5, #0
	if (!spi_is_ready_to_read(module)) {
    de7e:	0752      	lsls	r2, r2, #29
    de80:	d50a      	bpl.n	de98 <trx_reg_read+0xb0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    de82:	8b5a      	ldrh	r2, [r3, #26]
    de84:	0752      	lsls	r2, r2, #29
    de86:	d501      	bpl.n	de8c <trx_reg_read+0xa4>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    de88:	2204      	movs	r2, #4
    de8a:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    de8c:	4a11      	ldr	r2, [pc, #68]	; (ded4 <trx_reg_read+0xec>)
    de8e:	7992      	ldrb	r2, [r2, #6]
    de90:	2a01      	cmp	r2, #1
    de92:	d018      	beq.n	dec6 <trx_reg_read+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    de94:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    de96:	b2ed      	uxtb	r5, r5
	}
	spi_read(&master, &register_value);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    de98:	2200      	movs	r2, #0
    de9a:	490f      	ldr	r1, [pc, #60]	; (ded8 <trx_reg_read+0xf0>)
    de9c:	480d      	ldr	r0, [pc, #52]	; (ded4 <trx_reg_read+0xec>)
    de9e:	4b0f      	ldr	r3, [pc, #60]	; (dedc <trx_reg_read+0xf4>)
    dea0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    dea2:	23ff      	movs	r3, #255	; 0xff
    dea4:	4223      	tst	r3, r4
    dea6:	d005      	beq.n	deb4 <trx_reg_read+0xcc>
		cpu_irq_enable();
    dea8:	2201      	movs	r2, #1
    deaa:	4b09      	ldr	r3, [pc, #36]	; (ded0 <trx_reg_read+0xe8>)
    deac:	701a      	strb	r2, [r3, #0]
    deae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    deb2:	b662      	cpsie	i

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();

	return register_value;
    deb4:	b2e8      	uxtb	r0, r5
}
    deb6:	b002      	add	sp, #8
    deb8:	bd70      	pop	{r4, r5, r6, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    deba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    debc:	05d2      	lsls	r2, r2, #23
    debe:	0dd2      	lsrs	r2, r2, #23
    dec0:	4907      	ldr	r1, [pc, #28]	; (dee0 <trx_reg_read+0xf8>)
    dec2:	800a      	strh	r2, [r1, #0]
    dec4:	e7c8      	b.n	de58 <trx_reg_read+0x70>
    dec6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    dec8:	05ed      	lsls	r5, r5, #23
    deca:	0ded      	lsrs	r5, r5, #23
    decc:	e7e4      	b.n	de98 <trx_reg_read+0xb0>
    dece:	46c0      	nop			; (mov r8, r8)
    ded0:	20000008 	.word	0x20000008
    ded4:	200021f0 	.word	0x200021f0
    ded8:	200021b4 	.word	0x200021b4
    dedc:	0000785d 	.word	0x0000785d
    dee0:	200021ac 	.word	0x200021ac

0000dee4 <trx_reg_write>:

void trx_reg_write(uint8_t addr, uint8_t data)
{
    dee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dee6:	b083      	sub	sp, #12
    dee8:	0006      	movs	r6, r0
    deea:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    deec:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    def0:	425a      	negs	r2, r3
    def2:	4153      	adcs	r3, r2
    def4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    def6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    def8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    defc:	2200      	movs	r2, #0
    defe:	4b34      	ldr	r3, [pc, #208]	; (dfd0 <trx_reg_write+0xec>)
    df00:	701a      	strb	r2, [r3, #0]
	return flags;
    df02:	9d01      	ldr	r5, [sp, #4]
	/* Prepare the command byte */
	addr |= WRITE_ACCESS_COMMAND;

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    df04:	4f33      	ldr	r7, [pc, #204]	; (dfd4 <trx_reg_write+0xf0>)
    df06:	3201      	adds	r2, #1
    df08:	4933      	ldr	r1, [pc, #204]	; (dfd8 <trx_reg_write+0xf4>)
    df0a:	0038      	movs	r0, r7
    df0c:	4b33      	ldr	r3, [pc, #204]	; (dfdc <trx_reg_write+0xf8>)
    df0e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    df10:	683b      	ldr	r3, [r7, #0]

	/* Send the Read command byte */
	while (!spi_is_ready_to_write(&master)) {
    df12:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    df14:	7e1a      	ldrb	r2, [r3, #24]
    df16:	420a      	tst	r2, r1
    df18:	d0fc      	beq.n	df14 <trx_reg_write+0x30>
    df1a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    df1c:	07d2      	lsls	r2, r2, #31
    df1e:	d502      	bpl.n	df26 <trx_reg_write+0x42>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    df20:	22c0      	movs	r2, #192	; 0xc0
    df22:	4316      	orrs	r6, r2
    df24:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    df26:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    df28:	7e1a      	ldrb	r2, [r3, #24]
    df2a:	420a      	tst	r2, r1
    df2c:	d0fc      	beq.n	df28 <trx_reg_write+0x44>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    df2e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    df30:	7e1a      	ldrb	r2, [r3, #24]
    df32:	420a      	tst	r2, r1
    df34:	d0fc      	beq.n	df30 <trx_reg_write+0x4c>
    df36:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    df38:	0752      	lsls	r2, r2, #29
    df3a:	d50c      	bpl.n	df56 <trx_reg_write+0x72>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    df3c:	8b5a      	ldrh	r2, [r3, #26]
    df3e:	0752      	lsls	r2, r2, #29
    df40:	d501      	bpl.n	df46 <trx_reg_write+0x62>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    df42:	2204      	movs	r2, #4
    df44:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    df46:	4a23      	ldr	r2, [pc, #140]	; (dfd4 <trx_reg_write+0xf0>)
    df48:	7992      	ldrb	r2, [r2, #6]
    df4a:	2a01      	cmp	r2, #1
    df4c:	d033      	beq.n	dfb6 <trx_reg_write+0xd2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    df4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    df50:	b2d2      	uxtb	r2, r2
    df52:	4923      	ldr	r1, [pc, #140]	; (dfe0 <trx_reg_write+0xfc>)
    df54:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master)) {
    df56:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    df58:	7e1a      	ldrb	r2, [r3, #24]
    df5a:	420a      	tst	r2, r1
    df5c:	d0fc      	beq.n	df58 <trx_reg_write+0x74>
    df5e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    df60:	07d2      	lsls	r2, r2, #31
    df62:	d500      	bpl.n	df66 <trx_reg_write+0x82>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    df64:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, data);
	while (!spi_is_write_complete(&master)) {
    df66:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    df68:	7e1a      	ldrb	r2, [r3, #24]
    df6a:	420a      	tst	r2, r1
    df6c:	d0fc      	beq.n	df68 <trx_reg_write+0x84>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    df6e:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    df70:	7e1a      	ldrb	r2, [r3, #24]
    df72:	420a      	tst	r2, r1
    df74:	d0fc      	beq.n	df70 <trx_reg_write+0x8c>
    df76:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    df78:	0752      	lsls	r2, r2, #29
    df7a:	d50c      	bpl.n	df96 <trx_reg_write+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    df7c:	8b5a      	ldrh	r2, [r3, #26]
    df7e:	0752      	lsls	r2, r2, #29
    df80:	d501      	bpl.n	df86 <trx_reg_write+0xa2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    df82:	2204      	movs	r2, #4
    df84:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    df86:	4a13      	ldr	r2, [pc, #76]	; (dfd4 <trx_reg_write+0xf0>)
    df88:	7992      	ldrb	r2, [r2, #6]
    df8a:	2a01      	cmp	r2, #1
    df8c:	d019      	beq.n	dfc2 <trx_reg_write+0xde>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    df8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    df90:	b2db      	uxtb	r3, r3
    df92:	4a13      	ldr	r2, [pc, #76]	; (dfe0 <trx_reg_write+0xfc>)
    df94:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    df96:	2200      	movs	r2, #0
    df98:	490f      	ldr	r1, [pc, #60]	; (dfd8 <trx_reg_write+0xf4>)
    df9a:	480e      	ldr	r0, [pc, #56]	; (dfd4 <trx_reg_write+0xf0>)
    df9c:	4b0f      	ldr	r3, [pc, #60]	; (dfdc <trx_reg_write+0xf8>)
    df9e:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    dfa0:	23ff      	movs	r3, #255	; 0xff
    dfa2:	422b      	tst	r3, r5
    dfa4:	d005      	beq.n	dfb2 <trx_reg_write+0xce>
		cpu_irq_enable();
    dfa6:	2201      	movs	r2, #1
    dfa8:	4b09      	ldr	r3, [pc, #36]	; (dfd0 <trx_reg_write+0xec>)
    dfaa:	701a      	strb	r2, [r3, #0]
    dfac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    dfb0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    dfb2:	b003      	add	sp, #12
    dfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    dfb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dfb8:	05d2      	lsls	r2, r2, #23
    dfba:	0dd2      	lsrs	r2, r2, #23
    dfbc:	4908      	ldr	r1, [pc, #32]	; (dfe0 <trx_reg_write+0xfc>)
    dfbe:	800a      	strh	r2, [r1, #0]
    dfc0:	e7c9      	b.n	df56 <trx_reg_write+0x72>
    dfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dfc4:	05db      	lsls	r3, r3, #23
    dfc6:	0ddb      	lsrs	r3, r3, #23
    dfc8:	4a05      	ldr	r2, [pc, #20]	; (dfe0 <trx_reg_write+0xfc>)
    dfca:	8013      	strh	r3, [r2, #0]
    dfcc:	e7e3      	b.n	df96 <trx_reg_write+0xb2>
    dfce:	46c0      	nop			; (mov r8, r8)
    dfd0:	20000008 	.word	0x20000008
    dfd4:	200021f0 	.word	0x200021f0
    dfd8:	200021b4 	.word	0x200021b4
    dfdc:	0000785d 	.word	0x0000785d
    dfe0:	200021ac 	.word	0x200021ac

0000dfe4 <trx_frame_read>:
	new_value |= current_reg_value;
	trx_reg_write(reg_addr, new_value);
}

void trx_frame_read(uint8_t *data, uint8_t length)
{
    dfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfe6:	46d6      	mov	lr, sl
    dfe8:	464f      	mov	r7, r9
    dfea:	4646      	mov	r6, r8
    dfec:	b5c0      	push	{r6, r7, lr}
    dfee:	b082      	sub	sp, #8
    dff0:	0005      	movs	r5, r0
    dff2:	000c      	movs	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dff4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    dff8:	425a      	negs	r2, r3
    dffa:	4153      	adcs	r3, r2
    dffc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    dffe:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    e000:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e004:	2200      	movs	r2, #0
    e006:	4b3e      	ldr	r3, [pc, #248]	; (e100 <trx_frame_read+0x11c>)
    e008:	701a      	strb	r2, [r3, #0]
	return flags;
    e00a:	9b01      	ldr	r3, [sp, #4]
    e00c:	4698      	mov	r8, r3
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    e00e:	4f3d      	ldr	r7, [pc, #244]	; (e104 <trx_frame_read+0x120>)
    e010:	3201      	adds	r2, #1
    e012:	493d      	ldr	r1, [pc, #244]	; (e108 <trx_frame_read+0x124>)
    e014:	0038      	movs	r0, r7
    e016:	4b3d      	ldr	r3, [pc, #244]	; (e10c <trx_frame_read+0x128>)
    e018:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    e01a:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    e01c:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e01e:	7e1a      	ldrb	r2, [r3, #24]
    e020:	420a      	tst	r2, r1
    e022:	d0fc      	beq.n	e01e <trx_frame_read+0x3a>
    e024:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e026:	07d2      	lsls	r2, r2, #31
    e028:	d501      	bpl.n	e02e <trx_frame_read+0x4a>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e02a:	2220      	movs	r2, #32
    e02c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    e02e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e030:	7e1a      	ldrb	r2, [r3, #24]
    e032:	420a      	tst	r2, r1
    e034:	d0fc      	beq.n	e030 <trx_frame_read+0x4c>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    e036:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e038:	7e1a      	ldrb	r2, [r3, #24]
    e03a:	420a      	tst	r2, r1
    e03c:	d0fc      	beq.n	e038 <trx_frame_read+0x54>
    e03e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e040:	0752      	lsls	r2, r2, #29
    e042:	d50c      	bpl.n	e05e <trx_frame_read+0x7a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e044:	8b5a      	ldrh	r2, [r3, #26]
    e046:	0752      	lsls	r2, r2, #29
    e048:	d501      	bpl.n	e04e <trx_frame_read+0x6a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e04a:	2204      	movs	r2, #4
    e04c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e04e:	4a2d      	ldr	r2, [pc, #180]	; (e104 <trx_frame_read+0x120>)
    e050:	7992      	ldrb	r2, [r2, #6]
    e052:	2a01      	cmp	r2, #1
    e054:	d013      	beq.n	e07e <trx_frame_read+0x9a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e058:	b2db      	uxtb	r3, r3
    e05a:	4a2d      	ldr	r2, [pc, #180]	; (e110 <trx_frame_read+0x12c>)
    e05c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	while (length--) {
    e05e:	1e63      	subs	r3, r4, #1
    e060:	b2db      	uxtb	r3, r3
    e062:	2c00      	cmp	r4, #0
    e064:	d036      	beq.n	e0d4 <trx_frame_read+0xf0>
    e066:	3301      	adds	r3, #1
    e068:	469c      	mov	ip, r3
    e06a:	44ac      	add	ip, r5
    e06c:	2720      	movs	r7, #32
	SercomSpi *const spi_module = &(module->hw->SPI);
    e06e:	4e25      	ldr	r6, [pc, #148]	; (e104 <trx_frame_read+0x120>)
		while (!spi_is_ready_to_write(&master)) {
    e070:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e072:	2300      	movs	r3, #0
    e074:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    e076:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    e078:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e07a:	46b1      	mov	r9, r6
    e07c:	e00f      	b.n	e09e <trx_frame_read+0xba>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e080:	05db      	lsls	r3, r3, #23
    e082:	0ddb      	lsrs	r3, r3, #23
    e084:	4a22      	ldr	r2, [pc, #136]	; (e110 <trx_frame_read+0x12c>)
    e086:	8013      	strh	r3, [r2, #0]
    e088:	e7e9      	b.n	e05e <trx_frame_read+0x7a>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e08a:	464a      	mov	r2, r9
    e08c:	7992      	ldrb	r2, [r2, #6]
    e08e:	2a01      	cmp	r2, #1
    e090:	d01c      	beq.n	e0cc <trx_frame_read+0xe8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e092:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e094:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    e096:	702f      	strb	r7, [r5, #0]
		data++;
    e098:	3501      	adds	r5, #1
	while (length--) {
    e09a:	4565      	cmp	r5, ip
    e09c:	d01a      	beq.n	e0d4 <trx_frame_read+0xf0>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e09e:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e0a0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    e0a2:	4202      	tst	r2, r0
    e0a4:	d0fc      	beq.n	e0a0 <trx_frame_read+0xbc>
    e0a6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e0a8:	4202      	tst	r2, r0
    e0aa:	d001      	beq.n	e0b0 <trx_frame_read+0xcc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e0ac:	4652      	mov	r2, sl
    e0ae:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e0b0:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    e0b2:	4222      	tst	r2, r4
    e0b4:	d0fc      	beq.n	e0b0 <trx_frame_read+0xcc>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e0b6:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    e0b8:	420a      	tst	r2, r1
    e0ba:	d0fc      	beq.n	e0b6 <trx_frame_read+0xd2>
    e0bc:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e0be:	420a      	tst	r2, r1
    e0c0:	d0e9      	beq.n	e096 <trx_frame_read+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e0c2:	8b5a      	ldrh	r2, [r3, #26]
    e0c4:	420a      	tst	r2, r1
    e0c6:	d0e0      	beq.n	e08a <trx_frame_read+0xa6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e0c8:	8359      	strh	r1, [r3, #26]
    e0ca:	e7de      	b.n	e08a <trx_frame_read+0xa6>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e0cc:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e0ce:	05ff      	lsls	r7, r7, #23
    e0d0:	0dff      	lsrs	r7, r7, #23
    e0d2:	e7e0      	b.n	e096 <trx_frame_read+0xb2>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    e0d4:	2200      	movs	r2, #0
    e0d6:	490c      	ldr	r1, [pc, #48]	; (e108 <trx_frame_read+0x124>)
    e0d8:	480a      	ldr	r0, [pc, #40]	; (e104 <trx_frame_read+0x120>)
    e0da:	4b0c      	ldr	r3, [pc, #48]	; (e10c <trx_frame_read+0x128>)
    e0dc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    e0de:	23ff      	movs	r3, #255	; 0xff
    e0e0:	4642      	mov	r2, r8
    e0e2:	4213      	tst	r3, r2
    e0e4:	d005      	beq.n	e0f2 <trx_frame_read+0x10e>
		cpu_irq_enable();
    e0e6:	2201      	movs	r2, #1
    e0e8:	4b05      	ldr	r3, [pc, #20]	; (e100 <trx_frame_read+0x11c>)
    e0ea:	701a      	strb	r2, [r3, #0]
    e0ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e0f0:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    e0f2:	b002      	add	sp, #8
    e0f4:	bc1c      	pop	{r2, r3, r4}
    e0f6:	4690      	mov	r8, r2
    e0f8:	4699      	mov	r9, r3
    e0fa:	46a2      	mov	sl, r4
    e0fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e0fe:	46c0      	nop			; (mov r8, r8)
    e100:	20000008 	.word	0x20000008
    e104:	200021f0 	.word	0x200021f0
    e108:	200021b4 	.word	0x200021b4
    e10c:	0000785d 	.word	0x0000785d
    e110:	200021ac 	.word	0x200021ac

0000e114 <trx_frame_write>:

void trx_frame_write(uint8_t *data, uint8_t length)
{
    e114:	b5f0      	push	{r4, r5, r6, r7, lr}
    e116:	46c6      	mov	lr, r8
    e118:	b500      	push	{lr}
    e11a:	b082      	sub	sp, #8
    e11c:	0004      	movs	r4, r0
    e11e:	000d      	movs	r5, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e120:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e124:	425a      	negs	r2, r3
    e126:	4153      	adcs	r3, r2
    e128:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e12a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    e12c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e130:	2200      	movs	r2, #0
    e132:	4b3a      	ldr	r3, [pc, #232]	; (e21c <trx_frame_write+0x108>)
    e134:	701a      	strb	r2, [r3, #0]
	return flags;
    e136:	9b01      	ldr	r3, [sp, #4]
    e138:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    e13a:	4f39      	ldr	r7, [pc, #228]	; (e220 <trx_frame_write+0x10c>)
    e13c:	3201      	adds	r2, #1
    e13e:	4939      	ldr	r1, [pc, #228]	; (e224 <trx_frame_write+0x110>)
    e140:	0038      	movs	r0, r7
    e142:	4b39      	ldr	r3, [pc, #228]	; (e228 <trx_frame_write+0x114>)
    e144:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    e146:	683b      	ldr	r3, [r7, #0]

	temp = TRX_CMD_FW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    e148:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e14a:	7e1a      	ldrb	r2, [r3, #24]
    e14c:	420a      	tst	r2, r1
    e14e:	d0fc      	beq.n	e14a <trx_frame_write+0x36>
    e150:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e152:	07d2      	lsls	r2, r2, #31
    e154:	d501      	bpl.n	e15a <trx_frame_write+0x46>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e156:	2260      	movs	r2, #96	; 0x60
    e158:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    e15a:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e15c:	7e1a      	ldrb	r2, [r3, #24]
    e15e:	420a      	tst	r2, r1
    e160:	d0fc      	beq.n	e15c <trx_frame_write+0x48>
	} 
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    e162:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e164:	7e1a      	ldrb	r2, [r3, #24]
    e166:	420a      	tst	r2, r1
    e168:	d0fc      	beq.n	e164 <trx_frame_write+0x50>
    e16a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e16c:	0752      	lsls	r2, r2, #29
    e16e:	d50c      	bpl.n	e18a <trx_frame_write+0x76>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e170:	8b5a      	ldrh	r2, [r3, #26]
    e172:	0752      	lsls	r2, r2, #29
    e174:	d501      	bpl.n	e17a <trx_frame_write+0x66>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e176:	2204      	movs	r2, #4
    e178:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e17a:	4a29      	ldr	r2, [pc, #164]	; (e220 <trx_frame_write+0x10c>)
    e17c:	7992      	ldrb	r2, [r2, #6]
    e17e:	2a01      	cmp	r2, #1
    e180:	d00b      	beq.n	e19a <trx_frame_write+0x86>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e184:	b2d2      	uxtb	r2, r2
    e186:	4929      	ldr	r1, [pc, #164]	; (e22c <trx_frame_write+0x118>)
    e188:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e18a:	4a25      	ldr	r2, [pc, #148]	; (e220 <trx_frame_write+0x10c>)
    e18c:	7992      	ldrb	r2, [r2, #6]
    e18e:	4694      	mov	ip, r2
    e190:	0021      	movs	r1, r4
	}
	spi_read(&master, &dummy_read);
	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    e192:	2701      	movs	r7, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    e194:	2002      	movs	r0, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    e196:	2404      	movs	r4, #4
    e198:	e00d      	b.n	e1b6 <trx_frame_write+0xa2>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e19a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e19c:	05d2      	lsls	r2, r2, #23
    e19e:	0dd2      	lsrs	r2, r2, #23
    e1a0:	4922      	ldr	r1, [pc, #136]	; (e22c <trx_frame_write+0x118>)
    e1a2:	800a      	strh	r2, [r1, #0]
    e1a4:	e7f1      	b.n	e18a <trx_frame_write+0x76>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e1a6:	4662      	mov	r2, ip
    e1a8:	2a01      	cmp	r2, #1
    e1aa:	d01e      	beq.n	e1ea <trx_frame_write+0xd6>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e1ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e1ae:	b2d2      	uxtb	r2, r2
    e1b0:	4e1e      	ldr	r6, [pc, #120]	; (e22c <trx_frame_write+0x118>)
    e1b2:	8032      	strh	r2, [r6, #0]
    e1b4:	3101      	adds	r1, #1
	while (length--) {
    e1b6:	3d01      	subs	r5, #1
    e1b8:	b2ed      	uxtb	r5, r5
    e1ba:	2dff      	cmp	r5, #255	; 0xff
    e1bc:	d01b      	beq.n	e1f6 <trx_frame_write+0xe2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e1be:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    e1c0:	423a      	tst	r2, r7
    e1c2:	d0fc      	beq.n	e1be <trx_frame_write+0xaa>
    e1c4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e1c6:	423a      	tst	r2, r7
    e1c8:	d001      	beq.n	e1ce <trx_frame_write+0xba>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e1ca:	780a      	ldrb	r2, [r1, #0]
    e1cc:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e1ce:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    e1d0:	4202      	tst	r2, r0
    e1d2:	d0fc      	beq.n	e1ce <trx_frame_write+0xba>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e1d4:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    e1d6:	4222      	tst	r2, r4
    e1d8:	d0fc      	beq.n	e1d4 <trx_frame_write+0xc0>
    e1da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e1dc:	4222      	tst	r2, r4
    e1de:	d0e9      	beq.n	e1b4 <trx_frame_write+0xa0>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e1e0:	8b5a      	ldrh	r2, [r3, #26]
    e1e2:	4222      	tst	r2, r4
    e1e4:	d0df      	beq.n	e1a6 <trx_frame_write+0x92>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e1e6:	835c      	strh	r4, [r3, #26]
    e1e8:	e7dd      	b.n	e1a6 <trx_frame_write+0x92>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e1ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e1ec:	05d2      	lsls	r2, r2, #23
    e1ee:	0dd2      	lsrs	r2, r2, #23
    e1f0:	4e0e      	ldr	r6, [pc, #56]	; (e22c <trx_frame_write+0x118>)
    e1f2:	8032      	strh	r2, [r6, #0]
    e1f4:	e7de      	b.n	e1b4 <trx_frame_write+0xa0>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    e1f6:	2200      	movs	r2, #0
    e1f8:	490a      	ldr	r1, [pc, #40]	; (e224 <trx_frame_write+0x110>)
    e1fa:	4809      	ldr	r0, [pc, #36]	; (e220 <trx_frame_write+0x10c>)
    e1fc:	4b0a      	ldr	r3, [pc, #40]	; (e228 <trx_frame_write+0x114>)
    e1fe:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    e200:	23ff      	movs	r3, #255	; 0xff
    e202:	4642      	mov	r2, r8
    e204:	4213      	tst	r3, r2
    e206:	d005      	beq.n	e214 <trx_frame_write+0x100>
		cpu_irq_enable();
    e208:	2201      	movs	r2, #1
    e20a:	4b04      	ldr	r3, [pc, #16]	; (e21c <trx_frame_write+0x108>)
    e20c:	701a      	strb	r2, [r3, #0]
    e20e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e212:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    e214:	b002      	add	sp, #8
    e216:	bc04      	pop	{r2}
    e218:	4690      	mov	r8, r2
    e21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e21c:	20000008 	.word	0x20000008
    e220:	200021f0 	.word	0x200021f0
    e224:	200021b4 	.word	0x200021b4
    e228:	0000785d 	.word	0x0000785d
    e22c:	200021ac 	.word	0x200021ac

0000e230 <trx_sram_write>:
 * @param addr Start address in the SRAM for the write operation
 * @param data Pointer to the data to be written into SRAM
 * @param length Number of bytes to be written into SRAM
 */
void trx_sram_write(uint8_t addr, uint8_t *data, uint8_t length)
{
    e230:	b5f0      	push	{r4, r5, r6, r7, lr}
    e232:	46c6      	mov	lr, r8
    e234:	b500      	push	{lr}
    e236:	b082      	sub	sp, #8
    e238:	0006      	movs	r6, r0
    e23a:	000d      	movs	r5, r1
    e23c:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e23e:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e242:	425a      	negs	r2, r3
    e244:	4153      	adcs	r3, r2
    e246:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e248:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    e24a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e24e:	2200      	movs	r2, #0
    e250:	4b4d      	ldr	r3, [pc, #308]	; (e388 <trx_sram_write+0x158>)
    e252:	701a      	strb	r2, [r3, #0]
	return flags;
    e254:	9b01      	ldr	r3, [sp, #4]
    e256:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();

#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    e258:	4f4c      	ldr	r7, [pc, #304]	; (e38c <trx_sram_write+0x15c>)
    e25a:	3201      	adds	r2, #1
    e25c:	494c      	ldr	r1, [pc, #304]	; (e390 <trx_sram_write+0x160>)
    e25e:	0038      	movs	r0, r7
    e260:	4b4c      	ldr	r3, [pc, #304]	; (e394 <trx_sram_write+0x164>)
    e262:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    e264:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    e266:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e268:	7e1a      	ldrb	r2, [r3, #24]
    e26a:	420a      	tst	r2, r1
    e26c:	d0fc      	beq.n	e268 <trx_sram_write+0x38>
    e26e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e270:	07d2      	lsls	r2, r2, #31
    e272:	d501      	bpl.n	e278 <trx_sram_write+0x48>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e274:	2240      	movs	r2, #64	; 0x40
    e276:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    e278:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e27a:	7e1a      	ldrb	r2, [r3, #24]
    e27c:	420a      	tst	r2, r1
    e27e:	d0fc      	beq.n	e27a <trx_sram_write+0x4a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    e280:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e282:	7e1a      	ldrb	r2, [r3, #24]
    e284:	420a      	tst	r2, r1
    e286:	d0fc      	beq.n	e282 <trx_sram_write+0x52>
    e288:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e28a:	0752      	lsls	r2, r2, #29
    e28c:	d50c      	bpl.n	e2a8 <trx_sram_write+0x78>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e28e:	8b5a      	ldrh	r2, [r3, #26]
    e290:	0752      	lsls	r2, r2, #29
    e292:	d501      	bpl.n	e298 <trx_sram_write+0x68>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e294:	2204      	movs	r2, #4
    e296:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e298:	4a3c      	ldr	r2, [pc, #240]	; (e38c <trx_sram_write+0x15c>)
    e29a:	7992      	ldrb	r2, [r2, #6]
    e29c:	2a01      	cmp	r2, #1
    e29e:	d02b      	beq.n	e2f8 <trx_sram_write+0xc8>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e2a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e2a2:	b2d2      	uxtb	r2, r2
    e2a4:	493c      	ldr	r1, [pc, #240]	; (e398 <trx_sram_write+0x168>)
    e2a6:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the write operation should start */
	while (!spi_is_ready_to_write(&master)) {
    e2a8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e2aa:	7e1a      	ldrb	r2, [r3, #24]
    e2ac:	420a      	tst	r2, r1
    e2ae:	d0fc      	beq.n	e2aa <trx_sram_write+0x7a>
    e2b0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e2b2:	07d2      	lsls	r2, r2, #31
    e2b4:	d500      	bpl.n	e2b8 <trx_sram_write+0x88>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e2b6:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    e2b8:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e2ba:	7e1a      	ldrb	r2, [r3, #24]
    e2bc:	420a      	tst	r2, r1
    e2be:	d0fc      	beq.n	e2ba <trx_sram_write+0x8a>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    e2c0:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e2c2:	7e1a      	ldrb	r2, [r3, #24]
    e2c4:	420a      	tst	r2, r1
    e2c6:	d0fc      	beq.n	e2c2 <trx_sram_write+0x92>
    e2c8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e2ca:	0752      	lsls	r2, r2, #29
    e2cc:	d50c      	bpl.n	e2e8 <trx_sram_write+0xb8>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e2ce:	8b5a      	ldrh	r2, [r3, #26]
    e2d0:	0752      	lsls	r2, r2, #29
    e2d2:	d501      	bpl.n	e2d8 <trx_sram_write+0xa8>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e2d4:	2204      	movs	r2, #4
    e2d6:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e2d8:	4a2c      	ldr	r2, [pc, #176]	; (e38c <trx_sram_write+0x15c>)
    e2da:	7992      	ldrb	r2, [r2, #6]
    e2dc:	2a01      	cmp	r2, #1
    e2de:	d011      	beq.n	e304 <trx_sram_write+0xd4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e2e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e2e2:	b2d2      	uxtb	r2, r2
    e2e4:	492c      	ldr	r1, [pc, #176]	; (e398 <trx_sram_write+0x168>)
    e2e6:	800a      	strh	r2, [r1, #0]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e2e8:	4a28      	ldr	r2, [pc, #160]	; (e38c <trx_sram_write+0x15c>)
    e2ea:	7992      	ldrb	r2, [r2, #6]
    e2ec:	4694      	mov	ip, r2
    e2ee:	0028      	movs	r0, r5
	}
	spi_read(&master, &dummy_read);

	while (length--) {
		while (!spi_is_ready_to_write(&master)) {
    e2f0:	2601      	movs	r6, #1
		}
		spi_write(&master, *data++);
		while (!spi_is_write_complete(&master)) {
    e2f2:	2502      	movs	r5, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    e2f4:	2104      	movs	r1, #4
    e2f6:	e013      	b.n	e320 <trx_sram_write+0xf0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e2f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e2fa:	05d2      	lsls	r2, r2, #23
    e2fc:	0dd2      	lsrs	r2, r2, #23
    e2fe:	4926      	ldr	r1, [pc, #152]	; (e398 <trx_sram_write+0x168>)
    e300:	800a      	strh	r2, [r1, #0]
    e302:	e7d1      	b.n	e2a8 <trx_sram_write+0x78>
    e304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e306:	05d2      	lsls	r2, r2, #23
    e308:	0dd2      	lsrs	r2, r2, #23
    e30a:	4923      	ldr	r1, [pc, #140]	; (e398 <trx_sram_write+0x168>)
    e30c:	800a      	strh	r2, [r1, #0]
    e30e:	e7eb      	b.n	e2e8 <trx_sram_write+0xb8>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e310:	4662      	mov	r2, ip
    e312:	2a01      	cmp	r2, #1
    e314:	d01e      	beq.n	e354 <trx_sram_write+0x124>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e318:	b2d2      	uxtb	r2, r2
    e31a:	4f1f      	ldr	r7, [pc, #124]	; (e398 <trx_sram_write+0x168>)
    e31c:	803a      	strh	r2, [r7, #0]
    e31e:	3001      	adds	r0, #1
	while (length--) {
    e320:	3c01      	subs	r4, #1
    e322:	b2e4      	uxtb	r4, r4
    e324:	2cff      	cmp	r4, #255	; 0xff
    e326:	d01b      	beq.n	e360 <trx_sram_write+0x130>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e328:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    e32a:	4232      	tst	r2, r6
    e32c:	d0fc      	beq.n	e328 <trx_sram_write+0xf8>
    e32e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e330:	4232      	tst	r2, r6
    e332:	d001      	beq.n	e338 <trx_sram_write+0x108>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e334:	7802      	ldrb	r2, [r0, #0]
    e336:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e338:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    e33a:	422a      	tst	r2, r5
    e33c:	d0fc      	beq.n	e338 <trx_sram_write+0x108>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e33e:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    e340:	420a      	tst	r2, r1
    e342:	d0fc      	beq.n	e33e <trx_sram_write+0x10e>
    e344:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e346:	420a      	tst	r2, r1
    e348:	d0e9      	beq.n	e31e <trx_sram_write+0xee>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e34a:	8b5a      	ldrh	r2, [r3, #26]
    e34c:	420a      	tst	r2, r1
    e34e:	d0df      	beq.n	e310 <trx_sram_write+0xe0>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e350:	8359      	strh	r1, [r3, #26]
    e352:	e7dd      	b.n	e310 <trx_sram_write+0xe0>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e356:	05d2      	lsls	r2, r2, #23
    e358:	0dd2      	lsrs	r2, r2, #23
    e35a:	4f0f      	ldr	r7, [pc, #60]	; (e398 <trx_sram_write+0x168>)
    e35c:	803a      	strh	r2, [r7, #0]
    e35e:	e7de      	b.n	e31e <trx_sram_write+0xee>
		}
		spi_read(&master, &dummy_read);
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    e360:	2200      	movs	r2, #0
    e362:	490b      	ldr	r1, [pc, #44]	; (e390 <trx_sram_write+0x160>)
    e364:	4809      	ldr	r0, [pc, #36]	; (e38c <trx_sram_write+0x15c>)
    e366:	4b0b      	ldr	r3, [pc, #44]	; (e394 <trx_sram_write+0x164>)
    e368:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    e36a:	23ff      	movs	r3, #255	; 0xff
    e36c:	4642      	mov	r2, r8
    e36e:	4213      	tst	r3, r2
    e370:	d005      	beq.n	e37e <trx_sram_write+0x14e>
		cpu_irq_enable();
    e372:	2201      	movs	r2, #1
    e374:	4b04      	ldr	r3, [pc, #16]	; (e388 <trx_sram_write+0x158>)
    e376:	701a      	strb	r2, [r3, #0]
    e378:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e37c:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    e37e:	b002      	add	sp, #8
    e380:	bc04      	pop	{r2}
    e382:	4690      	mov	r8, r2
    e384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e386:	46c0      	nop			; (mov r8, r8)
    e388:	20000008 	.word	0x20000008
    e38c:	200021f0 	.word	0x200021f0
    e390:	200021b4 	.word	0x200021b4
    e394:	0000785d 	.word	0x0000785d
    e398:	200021ac 	.word	0x200021ac

0000e39c <trx_sram_read>:
 * @param[in] addr Start address in SRAM for read operation
 * @param[out] data Pointer to the location where data stored
 * @param[in] length Number of bytes to be read from SRAM
 */
void trx_sram_read(uint8_t addr, uint8_t *data, uint8_t length)
{
    e39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e39e:	46d6      	mov	lr, sl
    e3a0:	464f      	mov	r7, r9
    e3a2:	4646      	mov	r6, r8
    e3a4:	b5c0      	push	{r6, r7, lr}
    e3a6:	b082      	sub	sp, #8
    e3a8:	0004      	movs	r4, r0
    e3aa:	000d      	movs	r5, r1
    e3ac:	0017      	movs	r7, r2
	delay_us(1); /* wap_rf4ce */
    e3ae:	2001      	movs	r0, #1
    e3b0:	4b56      	ldr	r3, [pc, #344]	; (e50c <trx_sram_read+0x170>)
    e3b2:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e3b4:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    e3b8:	425a      	negs	r2, r3
    e3ba:	4153      	adcs	r3, r2
    e3bc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    e3be:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    e3c0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    e3c4:	2200      	movs	r2, #0
    e3c6:	4b52      	ldr	r3, [pc, #328]	; (e510 <trx_sram_read+0x174>)
    e3c8:	701a      	strb	r2, [r3, #0]
	return flags;
    e3ca:	9b01      	ldr	r3, [sp, #4]
    e3cc:	4698      	mov	r8, r3
	**/
	ENTER_TRX_CRITICAL_REGION();
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t temp;
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    e3ce:	4e51      	ldr	r6, [pc, #324]	; (e514 <trx_sram_read+0x178>)
    e3d0:	3201      	adds	r2, #1
    e3d2:	4951      	ldr	r1, [pc, #324]	; (e518 <trx_sram_read+0x17c>)
    e3d4:	0030      	movs	r0, r6
    e3d6:	4b51      	ldr	r3, [pc, #324]	; (e51c <trx_sram_read+0x180>)
    e3d8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    e3da:	6833      	ldr	r3, [r6, #0]

	temp = TRX_CMD_SR;

	/* Send the command byte */
	while (!spi_is_ready_to_write(&master)) {
    e3dc:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e3de:	7e1a      	ldrb	r2, [r3, #24]
    e3e0:	420a      	tst	r2, r1
    e3e2:	d0fc      	beq.n	e3de <trx_sram_read+0x42>
    e3e4:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e3e6:	07d2      	lsls	r2, r2, #31
    e3e8:	d501      	bpl.n	e3ee <trx_sram_read+0x52>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e3ea:	2200      	movs	r2, #0
    e3ec:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    e3ee:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e3f0:	7e1a      	ldrb	r2, [r3, #24]
    e3f2:	420a      	tst	r2, r1
    e3f4:	d0fc      	beq.n	e3f0 <trx_sram_read+0x54>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    e3f6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e3f8:	7e1a      	ldrb	r2, [r3, #24]
    e3fa:	420a      	tst	r2, r1
    e3fc:	d0fc      	beq.n	e3f8 <trx_sram_read+0x5c>
    e3fe:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e400:	0752      	lsls	r2, r2, #29
    e402:	d50c      	bpl.n	e41e <trx_sram_read+0x82>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e404:	8b5a      	ldrh	r2, [r3, #26]
    e406:	0752      	lsls	r2, r2, #29
    e408:	d501      	bpl.n	e40e <trx_sram_read+0x72>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e40a:	2204      	movs	r2, #4
    e40c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e40e:	4a41      	ldr	r2, [pc, #260]	; (e514 <trx_sram_read+0x178>)
    e410:	7992      	ldrb	r2, [r2, #6]
    e412:	2a01      	cmp	r2, #1
    e414:	d033      	beq.n	e47e <trx_sram_read+0xe2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e416:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e418:	b2d2      	uxtb	r2, r2
    e41a:	4941      	ldr	r1, [pc, #260]	; (e520 <trx_sram_read+0x184>)
    e41c:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* Send the address from which the read operation should start */
	while (!spi_is_ready_to_write(&master)) {
    e41e:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e420:	7e1a      	ldrb	r2, [r3, #24]
    e422:	420a      	tst	r2, r1
    e424:	d0fc      	beq.n	e420 <trx_sram_read+0x84>
    e426:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e428:	07d2      	lsls	r2, r2, #31
    e42a:	d500      	bpl.n	e42e <trx_sram_read+0x92>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e42c:	629c      	str	r4, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    e42e:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e430:	7e1a      	ldrb	r2, [r3, #24]
    e432:	420a      	tst	r2, r1
    e434:	d0fc      	beq.n	e430 <trx_sram_read+0x94>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    e436:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e438:	7e1a      	ldrb	r2, [r3, #24]
    e43a:	420a      	tst	r2, r1
    e43c:	d0fc      	beq.n	e438 <trx_sram_read+0x9c>
    e43e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e440:	0752      	lsls	r2, r2, #29
    e442:	d50c      	bpl.n	e45e <trx_sram_read+0xc2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e444:	8b5a      	ldrh	r2, [r3, #26]
    e446:	0752      	lsls	r2, r2, #29
    e448:	d501      	bpl.n	e44e <trx_sram_read+0xb2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e44a:	2204      	movs	r2, #4
    e44c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e44e:	4a31      	ldr	r2, [pc, #196]	; (e514 <trx_sram_read+0x178>)
    e450:	7992      	ldrb	r2, [r2, #6]
    e452:	2a01      	cmp	r2, #1
    e454:	d019      	beq.n	e48a <trx_sram_read+0xee>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e458:	b2db      	uxtb	r3, r3
    e45a:	4a31      	ldr	r2, [pc, #196]	; (e520 <trx_sram_read+0x184>)
    e45c:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Upload the received byte in the user provided location */
	while (length--) {
    e45e:	1e7b      	subs	r3, r7, #1
    e460:	b2db      	uxtb	r3, r3
    e462:	2f00      	cmp	r7, #0
    e464:	d03c      	beq.n	e4e0 <trx_sram_read+0x144>
    e466:	3301      	adds	r3, #1
    e468:	469c      	mov	ip, r3
    e46a:	44ac      	add	ip, r5
    e46c:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    e46e:	4e29      	ldr	r6, [pc, #164]	; (e514 <trx_sram_read+0x178>)
		while (!spi_is_ready_to_write(&master)) {
    e470:	2001      	movs	r0, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e472:	2300      	movs	r3, #0
    e474:	469a      	mov	sl, r3
		}
		spi_write(&master, 0);
		while (!spi_is_write_complete(&master)) {
    e476:	2402      	movs	r4, #2
		}
		/* Dummy read since SPI RX is double buffered */
		while (!spi_is_ready_to_read(&master)) {
    e478:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e47a:	46b1      	mov	r9, r6
    e47c:	e015      	b.n	e4aa <trx_sram_read+0x10e>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e47e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e480:	05d2      	lsls	r2, r2, #23
    e482:	0dd2      	lsrs	r2, r2, #23
    e484:	4926      	ldr	r1, [pc, #152]	; (e520 <trx_sram_read+0x184>)
    e486:	800a      	strh	r2, [r1, #0]
    e488:	e7c9      	b.n	e41e <trx_sram_read+0x82>
    e48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e48c:	05db      	lsls	r3, r3, #23
    e48e:	0ddb      	lsrs	r3, r3, #23
    e490:	4a23      	ldr	r2, [pc, #140]	; (e520 <trx_sram_read+0x184>)
    e492:	8013      	strh	r3, [r2, #0]
    e494:	e7e3      	b.n	e45e <trx_sram_read+0xc2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e496:	464a      	mov	r2, r9
    e498:	7992      	ldrb	r2, [r2, #6]
    e49a:	2a01      	cmp	r2, #1
    e49c:	d01c      	beq.n	e4d8 <trx_sram_read+0x13c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e49e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e4a0:	b2ff      	uxtb	r7, r7
		}
		spi_read(&master, &temp);
		*data = temp;
    e4a2:	702f      	strb	r7, [r5, #0]
		data++;
    e4a4:	3501      	adds	r5, #1
	while (length--) {
    e4a6:	4565      	cmp	r5, ip
    e4a8:	d01a      	beq.n	e4e0 <trx_sram_read+0x144>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e4aa:	6833      	ldr	r3, [r6, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e4ac:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    e4ae:	4202      	tst	r2, r0
    e4b0:	d0fc      	beq.n	e4ac <trx_sram_read+0x110>
    e4b2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e4b4:	4202      	tst	r2, r0
    e4b6:	d001      	beq.n	e4bc <trx_sram_read+0x120>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e4b8:	4652      	mov	r2, sl
    e4ba:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e4bc:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    e4be:	4222      	tst	r2, r4
    e4c0:	d0fc      	beq.n	e4bc <trx_sram_read+0x120>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e4c2:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    e4c4:	420a      	tst	r2, r1
    e4c6:	d0fc      	beq.n	e4c2 <trx_sram_read+0x126>
    e4c8:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e4ca:	420a      	tst	r2, r1
    e4cc:	d0e9      	beq.n	e4a2 <trx_sram_read+0x106>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e4ce:	8b5a      	ldrh	r2, [r3, #26]
    e4d0:	420a      	tst	r2, r1
    e4d2:	d0e0      	beq.n	e496 <trx_sram_read+0xfa>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e4d4:	8359      	strh	r1, [r3, #26]
    e4d6:	e7de      	b.n	e496 <trx_sram_read+0xfa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e4d8:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e4da:	05ff      	lsls	r7, r7, #23
    e4dc:	0dff      	lsrs	r7, r7, #23
    e4de:	e7e0      	b.n	e4a2 <trx_sram_read+0x106>
	}

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    e4e0:	2200      	movs	r2, #0
    e4e2:	490d      	ldr	r1, [pc, #52]	; (e518 <trx_sram_read+0x17c>)
    e4e4:	480b      	ldr	r0, [pc, #44]	; (e514 <trx_sram_read+0x178>)
    e4e6:	4b0d      	ldr	r3, [pc, #52]	; (e51c <trx_sram_read+0x180>)
    e4e8:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    e4ea:	23ff      	movs	r3, #255	; 0xff
    e4ec:	4642      	mov	r2, r8
    e4ee:	4213      	tst	r3, r2
    e4f0:	d005      	beq.n	e4fe <trx_sram_read+0x162>
		cpu_irq_enable();
    e4f2:	2201      	movs	r2, #1
    e4f4:	4b06      	ldr	r3, [pc, #24]	; (e510 <trx_sram_read+0x174>)
    e4f6:	701a      	strb	r2, [r3, #0]
    e4f8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    e4fc:	b662      	cpsie	i
#endif

	/*Restoring the interrupt status which was stored & enabling the global
	 * interrupt */
	LEAVE_TRX_CRITICAL_REGION();
}
    e4fe:	b002      	add	sp, #8
    e500:	bc1c      	pop	{r2, r3, r4}
    e502:	4690      	mov	r8, r2
    e504:	4699      	mov	r9, r3
    e506:	46a2      	mov	sl, r4
    e508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e50a:	46c0      	nop			; (mov r8, r8)
    e50c:	00006239 	.word	0x00006239
    e510:	20000008 	.word	0x20000008
    e514:	200021f0 	.word	0x200021f0
    e518:	200021b4 	.word	0x200021b4
    e51c:	0000785d 	.word	0x0000785d
    e520:	200021ac 	.word	0x200021ac

0000e524 <trx_aes_wrrd>:
 * @param addr Start address in the SRAM for the write operation
 * @param idata Pointer to the data written/read into/from SRAM
 * @param length Number of bytes written/read into/from SRAM
 */
void trx_aes_wrrd(uint8_t addr, uint8_t *idata, uint8_t length)
{
    e524:	b5f0      	push	{r4, r5, r6, r7, lr}
    e526:	46d6      	mov	lr, sl
    e528:	464f      	mov	r7, r9
    e52a:	4646      	mov	r6, r8
    e52c:	b5c0      	push	{r6, r7, lr}
    e52e:	0006      	movs	r6, r0
    e530:	468a      	mov	sl, r1
    e532:	0014      	movs	r4, r2
#if SAMD || SAMR21 || SAML21 || SAMR30
	uint16_t odata_var = 0;
#endif
	uint8_t temp;

	delay_us(1); /* wap_rf4ce */
    e534:	2001      	movs	r0, #1
    e536:	4b76      	ldr	r3, [pc, #472]	; (e710 <trx_aes_wrrd+0x1ec>)
    e538:	4798      	blx	r3

	ENTER_TRX_REGION();
    e53a:	2100      	movs	r1, #0
    e53c:	2000      	movs	r0, #0
    e53e:	4b75      	ldr	r3, [pc, #468]	; (e714 <trx_aes_wrrd+0x1f0>)
    e540:	4798      	blx	r3
		/* wait until SPI gets available */
	}
#endif
#if SAMD || SAMR21 || SAML21 || SAMR30
	/* Start SPI transaction by pulling SEL low */
	spi_select_slave(&master, &slave, true);
    e542:	4f75      	ldr	r7, [pc, #468]	; (e718 <trx_aes_wrrd+0x1f4>)
    e544:	2201      	movs	r2, #1
    e546:	4975      	ldr	r1, [pc, #468]	; (e71c <trx_aes_wrrd+0x1f8>)
    e548:	0038      	movs	r0, r7
    e54a:	4b75      	ldr	r3, [pc, #468]	; (e720 <trx_aes_wrrd+0x1fc>)
    e54c:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    e54e:	683b      	ldr	r3, [r7, #0]

	/* Send the command byte */
	temp = TRX_CMD_SW;

	while (!spi_is_ready_to_write(&master)) {
    e550:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e552:	7e1a      	ldrb	r2, [r3, #24]
    e554:	420a      	tst	r2, r1
    e556:	d0fc      	beq.n	e552 <trx_aes_wrrd+0x2e>
    e558:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e55a:	07d2      	lsls	r2, r2, #31
    e55c:	d501      	bpl.n	e562 <trx_aes_wrrd+0x3e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e55e:	2240      	movs	r2, #64	; 0x40
    e560:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, temp);
	while (!spi_is_write_complete(&master)) {
    e562:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e564:	7e1a      	ldrb	r2, [r3, #24]
    e566:	420a      	tst	r2, r1
    e568:	d0fc      	beq.n	e564 <trx_aes_wrrd+0x40>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    e56a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e56c:	7e1a      	ldrb	r2, [r3, #24]
    e56e:	420a      	tst	r2, r1
    e570:	d0fc      	beq.n	e56c <trx_aes_wrrd+0x48>
    e572:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e574:	0752      	lsls	r2, r2, #29
    e576:	d50c      	bpl.n	e592 <trx_aes_wrrd+0x6e>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e578:	8b5a      	ldrh	r2, [r3, #26]
    e57a:	0752      	lsls	r2, r2, #29
    e57c:	d501      	bpl.n	e582 <trx_aes_wrrd+0x5e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e57e:	2204      	movs	r2, #4
    e580:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e582:	4a65      	ldr	r2, [pc, #404]	; (e718 <trx_aes_wrrd+0x1f4>)
    e584:	7992      	ldrb	r2, [r2, #6]
    e586:	2a01      	cmp	r2, #1
    e588:	d055      	beq.n	e636 <trx_aes_wrrd+0x112>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e58a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e58c:	b2d2      	uxtb	r2, r2
    e58e:	4965      	ldr	r1, [pc, #404]	; (e724 <trx_aes_wrrd+0x200>)
    e590:	800a      	strh	r2, [r1, #0]
	}
	spi_read(&master, &dummy_read);

	/* write SRAM start address */
	while (!spi_is_ready_to_write(&master)) {
    e592:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e594:	7e1a      	ldrb	r2, [r3, #24]
    e596:	420a      	tst	r2, r1
    e598:	d0fc      	beq.n	e594 <trx_aes_wrrd+0x70>
    e59a:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e59c:	07d2      	lsls	r2, r2, #31
    e59e:	d500      	bpl.n	e5a2 <trx_aes_wrrd+0x7e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e5a0:	629e      	str	r6, [r3, #40]	; 0x28
	}
	spi_write(&master, addr);
	while (!spi_is_write_complete(&master)) {
    e5a2:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e5a4:	7e1a      	ldrb	r2, [r3, #24]
    e5a6:	420a      	tst	r2, r1
    e5a8:	d0fc      	beq.n	e5a4 <trx_aes_wrrd+0x80>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    e5aa:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e5ac:	7e1a      	ldrb	r2, [r3, #24]
    e5ae:	420a      	tst	r2, r1
    e5b0:	d0fc      	beq.n	e5ac <trx_aes_wrrd+0x88>
    e5b2:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e5b4:	0752      	lsls	r2, r2, #29
    e5b6:	d50c      	bpl.n	e5d2 <trx_aes_wrrd+0xae>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e5b8:	8b5a      	ldrh	r2, [r3, #26]
    e5ba:	0752      	lsls	r2, r2, #29
    e5bc:	d501      	bpl.n	e5c2 <trx_aes_wrrd+0x9e>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e5be:	2204      	movs	r2, #4
    e5c0:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e5c2:	4a55      	ldr	r2, [pc, #340]	; (e718 <trx_aes_wrrd+0x1f4>)
    e5c4:	7992      	ldrb	r2, [r2, #6]
    e5c6:	2a01      	cmp	r2, #1
    e5c8:	d03b      	beq.n	e642 <trx_aes_wrrd+0x11e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e5ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e5cc:	b2d2      	uxtb	r2, r2
    e5ce:	4955      	ldr	r1, [pc, #340]	; (e724 <trx_aes_wrrd+0x200>)
    e5d0:	800a      	strh	r2, [r1, #0]

	/* now transfer data */
	odata = idata;

	/* write data byte 0 - the obtained value in SPDR is meaningless */
	while (!spi_is_ready_to_write(&master)) {
    e5d2:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e5d4:	7e1a      	ldrb	r2, [r3, #24]
    e5d6:	420a      	tst	r2, r1
    e5d8:	d0fc      	beq.n	e5d4 <trx_aes_wrrd+0xb0>
    e5da:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e5dc:	07d2      	lsls	r2, r2, #31
    e5de:	d502      	bpl.n	e5e6 <trx_aes_wrrd+0xc2>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e5e0:	4652      	mov	r2, sl
    e5e2:	7812      	ldrb	r2, [r2, #0]
    e5e4:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, *idata++);
	while (!spi_is_write_complete(&master)) {
    e5e6:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e5e8:	7e1a      	ldrb	r2, [r3, #24]
    e5ea:	420a      	tst	r2, r1
    e5ec:	d0fc      	beq.n	e5e8 <trx_aes_wrrd+0xc4>
	}
	/* Dummy read since SPI RX is double buffered */
	while (!spi_is_ready_to_read(&master)) {
    e5ee:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e5f0:	7e1a      	ldrb	r2, [r3, #24]
    e5f2:	420a      	tst	r2, r1
    e5f4:	d0fc      	beq.n	e5f0 <trx_aes_wrrd+0xcc>
    e5f6:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e5f8:	0752      	lsls	r2, r2, #29
    e5fa:	d50c      	bpl.n	e616 <trx_aes_wrrd+0xf2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e5fc:	8b5a      	ldrh	r2, [r3, #26]
    e5fe:	0752      	lsls	r2, r2, #29
    e600:	d501      	bpl.n	e606 <trx_aes_wrrd+0xe2>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e602:	2204      	movs	r2, #4
    e604:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e606:	4a44      	ldr	r2, [pc, #272]	; (e718 <trx_aes_wrrd+0x1f4>)
    e608:	7992      	ldrb	r2, [r2, #6]
    e60a:	2a01      	cmp	r2, #1
    e60c:	d01f      	beq.n	e64e <trx_aes_wrrd+0x12a>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e610:	b2db      	uxtb	r3, r3
    e612:	4a44      	ldr	r2, [pc, #272]	; (e724 <trx_aes_wrrd+0x200>)
    e614:	8013      	strh	r3, [r2, #0]
	}
	spi_read(&master, &dummy_read);

	/* Reading Spi Data for the length specified */
	while (length > 0) {
    e616:	2700      	movs	r7, #0
    e618:	2c00      	cmp	r4, #0
    e61a:	d043      	beq.n	e6a4 <trx_aes_wrrd+0x180>
    e61c:	4656      	mov	r6, sl
    e61e:	3c01      	subs	r4, #1
    e620:	b2e4      	uxtb	r4, r4
    e622:	3401      	adds	r4, #1
    e624:	44a2      	add	sl, r4
    e626:	46d0      	mov	r8, sl
    e628:	2700      	movs	r7, #0
	SercomSpi *const spi_module = &(module->hw->SPI);
    e62a:	4d3b      	ldr	r5, [pc, #236]	; (e718 <trx_aes_wrrd+0x1f4>)
		while (!spi_is_ready_to_write(&master)) {
    e62c:	2001      	movs	r0, #1
		}
		spi_write(&master, *idata++);
		while (!spi_is_write_complete(&master)) {
    e62e:	2402      	movs	r4, #2
		}
		while (!spi_is_ready_to_read(&master)) {
    e630:	2104      	movs	r1, #4
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e632:	46a9      	mov	r9, r5
    e634:	e01b      	b.n	e66e <trx_aes_wrrd+0x14a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e636:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e638:	05d2      	lsls	r2, r2, #23
    e63a:	0dd2      	lsrs	r2, r2, #23
    e63c:	4939      	ldr	r1, [pc, #228]	; (e724 <trx_aes_wrrd+0x200>)
    e63e:	800a      	strh	r2, [r1, #0]
    e640:	e7a7      	b.n	e592 <trx_aes_wrrd+0x6e>
    e642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e644:	05d2      	lsls	r2, r2, #23
    e646:	0dd2      	lsrs	r2, r2, #23
    e648:	4936      	ldr	r1, [pc, #216]	; (e724 <trx_aes_wrrd+0x200>)
    e64a:	800a      	strh	r2, [r1, #0]
    e64c:	e7c1      	b.n	e5d2 <trx_aes_wrrd+0xae>
    e64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e650:	05db      	lsls	r3, r3, #23
    e652:	0ddb      	lsrs	r3, r3, #23
    e654:	4a33      	ldr	r2, [pc, #204]	; (e724 <trx_aes_wrrd+0x200>)
    e656:	8013      	strh	r3, [r2, #0]
    e658:	e7dd      	b.n	e616 <trx_aes_wrrd+0xf2>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e65a:	464a      	mov	r2, r9
    e65c:	7992      	ldrb	r2, [r2, #6]
    e65e:	2a01      	cmp	r2, #1
    e660:	d01c      	beq.n	e69c <trx_aes_wrrd+0x178>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e662:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e664:	b2ff      	uxtb	r7, r7
		}

#if SAMD || SAMR21 || SAML21 || SAMR30
		spi_read(&master, &odata_var);
		*odata++ = (uint8_t)odata_var;
    e666:	7037      	strb	r7, [r6, #0]
    e668:	3601      	adds	r6, #1
	while (length > 0) {
    e66a:	45b0      	cmp	r8, r6
    e66c:	d01a      	beq.n	e6a4 <trx_aes_wrrd+0x180>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e66e:	682b      	ldr	r3, [r5, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e670:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_write(&master)) {
    e672:	4202      	tst	r2, r0
    e674:	d0fc      	beq.n	e670 <trx_aes_wrrd+0x14c>
    e676:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e678:	4202      	tst	r2, r0
    e67a:	d001      	beq.n	e680 <trx_aes_wrrd+0x15c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e67c:	7872      	ldrb	r2, [r6, #1]
    e67e:	629a      	str	r2, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e680:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_write_complete(&master)) {
    e682:	4222      	tst	r2, r4
    e684:	d0fc      	beq.n	e680 <trx_aes_wrrd+0x15c>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e686:	7e1a      	ldrb	r2, [r3, #24]
		while (!spi_is_ready_to_read(&master)) {
    e688:	420a      	tst	r2, r1
    e68a:	d0fc      	beq.n	e686 <trx_aes_wrrd+0x162>
    e68c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e68e:	420a      	tst	r2, r1
    e690:	d0e9      	beq.n	e666 <trx_aes_wrrd+0x142>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e692:	8b5a      	ldrh	r2, [r3, #26]
    e694:	420a      	tst	r2, r1
    e696:	d0e0      	beq.n	e65a <trx_aes_wrrd+0x136>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e698:	8359      	strh	r1, [r3, #26]
    e69a:	e7de      	b.n	e65a <trx_aes_wrrd+0x136>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e69c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e69e:	05ff      	lsls	r7, r7, #23
    e6a0:	0dff      	lsrs	r7, r7, #23
    e6a2:	e7e0      	b.n	e666 <trx_aes_wrrd+0x142>
	SercomSpi *const spi_module = &(module->hw->SPI);
    e6a4:	4b1c      	ldr	r3, [pc, #112]	; (e718 <trx_aes_wrrd+0x1f4>)
    e6a6:	681b      	ldr	r3, [r3, #0]
#endif
		length--;
	}

	/* To get the last data byte, write some dummy byte */
	while (!spi_is_ready_to_write(&master)) {
    e6a8:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    e6aa:	7e1a      	ldrb	r2, [r3, #24]
    e6ac:	420a      	tst	r2, r1
    e6ae:	d0fc      	beq.n	e6aa <trx_aes_wrrd+0x186>
    e6b0:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    e6b2:	07d2      	lsls	r2, r2, #31
    e6b4:	d501      	bpl.n	e6ba <trx_aes_wrrd+0x196>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    e6b6:	2200      	movs	r2, #0
    e6b8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	spi_write(&master, 0);
	while (!spi_is_write_complete(&master)) {
    e6ba:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    e6bc:	7e1a      	ldrb	r2, [r3, #24]
    e6be:	420a      	tst	r2, r1
    e6c0:	d0fc      	beq.n	e6bc <trx_aes_wrrd+0x198>
	}
	while (!spi_is_ready_to_read(&master)) {
    e6c2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    e6c4:	7e1a      	ldrb	r2, [r3, #24]
    e6c6:	420a      	tst	r2, r1
    e6c8:	d0fc      	beq.n	e6c4 <trx_aes_wrrd+0x1a0>
    e6ca:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    e6cc:	0752      	lsls	r2, r2, #29
    e6ce:	d50a      	bpl.n	e6e6 <trx_aes_wrrd+0x1c2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    e6d0:	8b5a      	ldrh	r2, [r3, #26]
    e6d2:	0752      	lsls	r2, r2, #29
    e6d4:	d501      	bpl.n	e6da <trx_aes_wrrd+0x1b6>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    e6d6:	2204      	movs	r2, #4
    e6d8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    e6da:	4a0f      	ldr	r2, [pc, #60]	; (e718 <trx_aes_wrrd+0x1f4>)
    e6dc:	7992      	ldrb	r2, [r2, #6]
    e6de:	2a01      	cmp	r2, #1
    e6e0:	d011      	beq.n	e706 <trx_aes_wrrd+0x1e2>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    e6e2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e6e4:	b2ff      	uxtb	r7, r7
	}
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_read(&master, &odata_var);
	*odata = (uint8_t)odata_var;
    e6e6:	4653      	mov	r3, sl
    e6e8:	701f      	strb	r7, [r3, #0]
#else
	spi_read(&master, (uint16_t *)odata);
#endif

	/* Stop the SPI transaction by setting SEL high */
	spi_select_slave(&master, &slave, false);
    e6ea:	2200      	movs	r2, #0
    e6ec:	490b      	ldr	r1, [pc, #44]	; (e71c <trx_aes_wrrd+0x1f8>)
    e6ee:	480a      	ldr	r0, [pc, #40]	; (e718 <trx_aes_wrrd+0x1f4>)
    e6f0:	4b0b      	ldr	r3, [pc, #44]	; (e720 <trx_aes_wrrd+0x1fc>)
    e6f2:	4798      	blx	r3
	spi_read_packet(AT86RFX_SPI, odata, 1);

	/* Stop the SPI transaction by setting SEL high */
	spi_deselect_device(AT86RFX_SPI, &SPI_AT86RFX_DEVICE);
#endif
	LEAVE_TRX_REGION();
    e6f4:	2100      	movs	r1, #0
    e6f6:	2000      	movs	r0, #0
    e6f8:	4b0b      	ldr	r3, [pc, #44]	; (e728 <trx_aes_wrrd+0x204>)
    e6fa:	4798      	blx	r3
}
    e6fc:	bc1c      	pop	{r2, r3, r4}
    e6fe:	4690      	mov	r8, r2
    e700:	4699      	mov	r9, r3
    e702:	46a2      	mov	sl, r4
    e704:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    e706:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    e708:	05ff      	lsls	r7, r7, #23
    e70a:	0dff      	lsrs	r7, r7, #23
    e70c:	e7eb      	b.n	e6e6 <trx_aes_wrrd+0x1c2>
    e70e:	46c0      	nop			; (mov r8, r8)
    e710:	00006239 	.word	0x00006239
    e714:	000065dd 	.word	0x000065dd
    e718:	200021f0 	.word	0x200021f0
    e71c:	200021b4 	.word	0x200021b4
    e720:	0000785d 	.word	0x0000785d
    e724:	200021ac 	.word	0x200021ac
    e728:	000065bd 	.word	0x000065bd

0000e72c <trx_spi_disable>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    e72c:	4b06      	ldr	r3, [pc, #24]	; (e748 <trx_spi_disable+0x1c>)
    e72e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    e730:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    e732:	2b00      	cmp	r3, #0
    e734:	d1fc      	bne.n	e730 <trx_spi_disable+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    e736:	338f      	adds	r3, #143	; 0x8f
    e738:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    e73a:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    e73c:	6813      	ldr	r3, [r2, #0]
    e73e:	2102      	movs	r1, #2
    e740:	438b      	bics	r3, r1
    e742:	6013      	str	r3, [r2, #0]
void trx_spi_disable(void)
{
#if SAMD || SAMR21 || SAML21 || SAMR30
	spi_disable(&master);
#endif
}
    e744:	4770      	bx	lr
    e746:	46c0      	nop			; (mov r8, r8)
    e748:	200021f0 	.word	0x200021f0

0000e74c <DemoOutput_Greeting>:
bool PUSH_BUTTON_shortPress;		//diffin
bool PUSH_BUTTON_longPress;			//diffin
extern bool sleep_request;			//diffin

void DemoOutput_Greeting(void)
{    
    e74c:	b510      	push	{r4, lr}
    #if defined (ENABLE_CONSOLE)
        #if defined(PROTOCOL_P2P)
            printf("\r\nStarting Node 1 of Simple Demo for MiWi(TM) P2P Stack ...");  
        #endif
        #if defined(PROTOCOL_STAR)
            printf("\r\nStarting Node 1 of Simple Demo for MiWi(TM) STAR Stack ...");  
    e74e:	4809      	ldr	r0, [pc, #36]	; (e774 <DemoOutput_Greeting+0x28>)
    e750:	4c09      	ldr	r4, [pc, #36]	; (e778 <DemoOutput_Greeting+0x2c>)
    e752:	47a0      	blx	r4
        printf("\r\n                     Press Joystick CENTER Button to unicast encrypted message.");
#endif		
        printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
        printf("\r\n\r\n");		
        #elif defined(PHY_AT86RF212B)
        printf("\r\n     RF Transceiver: AT86RF212B");
    e754:	4809      	ldr	r0, [pc, #36]	; (e77c <DemoOutput_Greeting+0x30>)
    e756:	47a0      	blx	r4
        printf("\r\n   Demo Instruction:");
    e758:	4809      	ldr	r0, [pc, #36]	; (e780 <DemoOutput_Greeting+0x34>)
    e75a:	47a0      	blx	r4
        printf("\r\n                     Power on the board until LED 1 lights up");
    e75c:	4809      	ldr	r0, [pc, #36]	; (e784 <DemoOutput_Greeting+0x38>)
    e75e:	47a0      	blx	r4
        printf("\r\n                     to indicate connecting with peer.");
    e760:	4809      	ldr	r0, [pc, #36]	; (e788 <DemoOutput_Greeting+0x3c>)
    e762:	47a0      	blx	r4
        printf("\r\n                     Press SW Button to broadcast message.");
    e764:	4809      	ldr	r0, [pc, #36]	; (e78c <DemoOutput_Greeting+0x40>)
    e766:	47a0      	blx	r4
		printf("\r\n                     LED 1 will be toggled upon receiving messages. ");
    e768:	4809      	ldr	r0, [pc, #36]	; (e790 <DemoOutput_Greeting+0x44>)
    e76a:	47a0      	blx	r4
        printf("\r\n\r\n");		
    e76c:	4809      	ldr	r0, [pc, #36]	; (e794 <DemoOutput_Greeting+0x48>)
    e76e:	4b0a      	ldr	r3, [pc, #40]	; (e798 <DemoOutput_Greeting+0x4c>)
    e770:	4798      	blx	r3
        #endif
 
    #endif 
}        
    e772:	bd10      	pop	{r4, pc}
    e774:	00013a94 	.word	0x00013a94
    e778:	000123f1 	.word	0x000123f1
    e77c:	00013ad4 	.word	0x00013ad4
    e780:	00013af8 	.word	0x00013af8
    e784:	00013b10 	.word	0x00013b10
    e788:	00013b50 	.word	0x00013b50
    e78c:	00013b8c 	.word	0x00013b8c
    e790:	00013bcc 	.word	0x00013bcc
    e794:	00013c14 	.word	0x00013c14
    e798:	000124e5 	.word	0x000124e5

0000e79c <demo_output_freezer_options>:
	#elif defined(PHY_AT86RF212B)
	LCDDisplay((char *)"SW: Use PDS Data \nPress in 5 sec", 0, false);
	#endif
	delay_ms(1000);
#endif
}
    e79c:	4770      	bx	lr
    e79e:	Address 0x0000e79e is out of bounds.


0000e7a0 <DemoOutput_Channel>:
void DemoOutput_Channel(uint8_t channel, uint8_t Step)
{
    e7a0:	b570      	push	{r4, r5, r6, lr}
    e7a2:	0004      	movs	r4, r0
    if( Step == 0 )
    e7a4:	2900      	cmp	r1, #0
    e7a6:	d009      	beq.n	e7bc <DemoOutput_Channel+0x1c>
    { 
#if defined (ENABLE_LCD)
        LCDDisplay((char *)"Connected Peer on \n Channel ", channel, true);
#endif
        #if !defined(MIWIKIT)
        printf("\r\nConnected Peer on Channel ");
    e7a8:	4809      	ldr	r0, [pc, #36]	; (e7d0 <DemoOutput_Channel+0x30>)
    e7aa:	4d0a      	ldr	r5, [pc, #40]	; (e7d4 <DemoOutput_Channel+0x34>)
    e7ac:	47a8      	blx	r5
        printf("%d",channel);
    e7ae:	0021      	movs	r1, r4
    e7b0:	4809      	ldr	r0, [pc, #36]	; (e7d8 <DemoOutput_Channel+0x38>)
    e7b2:	47a8      	blx	r5
        printf("\r\n");
    e7b4:	4809      	ldr	r0, [pc, #36]	; (e7dc <DemoOutput_Channel+0x3c>)
    e7b6:	4b0a      	ldr	r3, [pc, #40]	; (e7e0 <DemoOutput_Channel+0x40>)
    e7b8:	4798      	blx	r3
        #endif
    }
}    
    e7ba:	bd70      	pop	{r4, r5, r6, pc}
        printf("\r\nConnecting Peer on Channel ");
    e7bc:	4809      	ldr	r0, [pc, #36]	; (e7e4 <DemoOutput_Channel+0x44>)
    e7be:	4d05      	ldr	r5, [pc, #20]	; (e7d4 <DemoOutput_Channel+0x34>)
    e7c0:	47a8      	blx	r5
        printf("%d",channel);
    e7c2:	0021      	movs	r1, r4
    e7c4:	4804      	ldr	r0, [pc, #16]	; (e7d8 <DemoOutput_Channel+0x38>)
    e7c6:	47a8      	blx	r5
        printf("\r\n");
    e7c8:	4804      	ldr	r0, [pc, #16]	; (e7dc <DemoOutput_Channel+0x3c>)
    e7ca:	4b05      	ldr	r3, [pc, #20]	; (e7e0 <DemoOutput_Channel+0x40>)
    e7cc:	4798      	blx	r3
    e7ce:	e7f4      	b.n	e7ba <DemoOutput_Channel+0x1a>
    e7d0:	00013a2c 	.word	0x00013a2c
    e7d4:	000123f1 	.word	0x000123f1
    e7d8:	00013a28 	.word	0x00013a28
    e7dc:	00013d90 	.word	0x00013d90
    e7e0:	000124e5 	.word	0x000124e5
    e7e4:	00013a08 	.word	0x00013a08

0000e7e8 <DemoOutput_HandleMessage>:
#endif*/
}


void DemoOutput_HandleMessage(void)
{
    e7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	uint8_t startPayloadIndex = 0;

    if( rxMessage.flags.bits.secEn )
    e7ea:	4b2d      	ldr	r3, [pc, #180]	; (e8a0 <DemoOutput_HandleMessage+0xb8>)
    e7ec:	781b      	ldrb	r3, [r3, #0]
    e7ee:	071b      	lsls	r3, r3, #28
    e7f0:	d427      	bmi.n	e842 <DemoOutput_HandleMessage+0x5a>
    {
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    }

    if( rxMessage.flags.bits.broadcast )
    e7f2:	4b2b      	ldr	r3, [pc, #172]	; (e8a0 <DemoOutput_HandleMessage+0xb8>)
    e7f4:	781b      	ldrb	r3, [r3, #0]
    e7f6:	079b      	lsls	r3, r3, #30
    e7f8:	d028      	beq.n	e84c <DemoOutput_HandleMessage+0x64>
    {
        sio2host_tx((uint8_t *)"Broadcast Packet with RSSI ", sizeof("Broadcast Packet with RSSI "));
    e7fa:	211c      	movs	r1, #28
    e7fc:	4829      	ldr	r0, [pc, #164]	; (e8a4 <DemoOutput_HandleMessage+0xbc>)
    e7fe:	4b2a      	ldr	r3, [pc, #168]	; (e8a8 <DemoOutput_HandleMessage+0xc0>)
    e800:	4798      	blx	r3
    }
    else
    {
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    }
    printf("%02x", rxMessage.PacketRSSI);
    e802:	4c27      	ldr	r4, [pc, #156]	; (e8a0 <DemoOutput_HandleMessage+0xb8>)
    e804:	7b61      	ldrb	r1, [r4, #13]
    e806:	4829      	ldr	r0, [pc, #164]	; (e8ac <DemoOutput_HandleMessage+0xc4>)
    e808:	4b29      	ldr	r3, [pc, #164]	; (e8b0 <DemoOutput_HandleMessage+0xc8>)
    e80a:	4798      	blx	r3
    if( rxMessage.flags.bits.srcPrsnt )
    e80c:	7823      	ldrb	r3, [r4, #0]
    e80e:	065b      	lsls	r3, r3, #25
    e810:	d421      	bmi.n	e856 <DemoOutput_HandleMessage+0x6e>
            {
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
            }    
        }
    }
    sio2host_tx((uint8_t *)": ",sizeof(": "));
    e812:	2103      	movs	r1, #3
    e814:	4827      	ldr	r0, [pc, #156]	; (e8b4 <DemoOutput_HandleMessage+0xcc>)
    e816:	4b24      	ldr	r3, [pc, #144]	; (e8a8 <DemoOutput_HandleMessage+0xc0>)
    e818:	4798      	blx	r3

	/* If the role is not PAN Coordinator and receiving a unicast
	   then first three bytes are source end device info, so skip this*/
	if (END_DEVICE == role && !rxMessage.flags.bits.broadcast)
    e81a:	4b27      	ldr	r3, [pc, #156]	; (e8b8 <DemoOutput_HandleMessage+0xd0>)
    e81c:	781b      	ldrb	r3, [r3, #0]
	uint8_t startPayloadIndex = 0;
    e81e:	2400      	movs	r4, #0
	if (END_DEVICE == role && !rxMessage.flags.bits.broadcast)
    e820:	2b02      	cmp	r3, #2
    e822:	d037      	beq.n	e894 <DemoOutput_HandleMessage+0xac>
	{
	    startPayloadIndex = 3;
	}
    
    for(i = startPayloadIndex; i < rxMessage.PayloadSize; i++)
    e824:	4b1e      	ldr	r3, [pc, #120]	; (e8a0 <DemoOutput_HandleMessage+0xb8>)
    e826:	7b1b      	ldrb	r3, [r3, #12]
    e828:	42a3      	cmp	r3, r4
    e82a:	d909      	bls.n	e840 <DemoOutput_HandleMessage+0x58>
    {
        sio2host_putchar(rxMessage.Payload[i]);
    e82c:	4d1c      	ldr	r5, [pc, #112]	; (e8a0 <DemoOutput_HandleMessage+0xb8>)
    e82e:	4e23      	ldr	r6, [pc, #140]	; (e8bc <DemoOutput_HandleMessage+0xd4>)
    e830:	68ab      	ldr	r3, [r5, #8]
    e832:	5d18      	ldrb	r0, [r3, r4]
    e834:	47b0      	blx	r6
    for(i = startPayloadIndex; i < rxMessage.PayloadSize; i++)
    e836:	3401      	adds	r4, #1
    e838:	b2e4      	uxtb	r4, r4
    e83a:	7b2b      	ldrb	r3, [r5, #12]
    e83c:	42a3      	cmp	r3, r4
    e83e:	d8f7      	bhi.n	e830 <DemoOutput_HandleMessage+0x48>
    }
} 
    e840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        sio2host_tx((uint8_t *)"Secured ", sizeof("Secured "));
    e842:	2109      	movs	r1, #9
    e844:	481e      	ldr	r0, [pc, #120]	; (e8c0 <DemoOutput_HandleMessage+0xd8>)
    e846:	4b18      	ldr	r3, [pc, #96]	; (e8a8 <DemoOutput_HandleMessage+0xc0>)
    e848:	4798      	blx	r3
    e84a:	e7d2      	b.n	e7f2 <DemoOutput_HandleMessage+0xa>
        sio2host_tx((uint8_t *)"Unicast Packet with RSSI ",sizeof("Unicast Packet with RSSI "));
    e84c:	211a      	movs	r1, #26
    e84e:	481d      	ldr	r0, [pc, #116]	; (e8c4 <DemoOutput_HandleMessage+0xdc>)
    e850:	4b15      	ldr	r3, [pc, #84]	; (e8a8 <DemoOutput_HandleMessage+0xc0>)
    e852:	4798      	blx	r3
    e854:	e7d5      	b.n	e802 <DemoOutput_HandleMessage+0x1a>
        sio2host_tx((uint8_t *)" from ", sizeof(" from "));
    e856:	2107      	movs	r1, #7
    e858:	481b      	ldr	r0, [pc, #108]	; (e8c8 <DemoOutput_HandleMessage+0xe0>)
    e85a:	4b13      	ldr	r3, [pc, #76]	; (e8a8 <DemoOutput_HandleMessage+0xc0>)
    e85c:	4798      	blx	r3
        if( rxMessage.flags.bits.altSrcAddr )
    e85e:	4b10      	ldr	r3, [pc, #64]	; (e8a0 <DemoOutput_HandleMessage+0xb8>)
    e860:	781b      	ldrb	r3, [r3, #0]
    e862:	2407      	movs	r4, #7
    e864:	2b7f      	cmp	r3, #127	; 0x7f
    e866:	d809      	bhi.n	e87c <DemoOutput_HandleMessage+0x94>
                printf("%x", rxMessage.SourceAddress[MY_ADDRESS_LENGTH-1-i]);
    e868:	4f0d      	ldr	r7, [pc, #52]	; (e8a0 <DemoOutput_HandleMessage+0xb8>)
    e86a:	4e18      	ldr	r6, [pc, #96]	; (e8cc <DemoOutput_HandleMessage+0xe4>)
    e86c:	4d10      	ldr	r5, [pc, #64]	; (e8b0 <DemoOutput_HandleMessage+0xc8>)
    e86e:	687b      	ldr	r3, [r7, #4]
    e870:	5d19      	ldrb	r1, [r3, r4]
    e872:	0030      	movs	r0, r6
    e874:	47a8      	blx	r5
            for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    e876:	3c01      	subs	r4, #1
    e878:	d2f9      	bcs.n	e86e <DemoOutput_HandleMessage+0x86>
    e87a:	e7ca      	b.n	e812 <DemoOutput_HandleMessage+0x2a>
            printf( "%x", rxMessage.SourceAddress[1]);
    e87c:	4e08      	ldr	r6, [pc, #32]	; (e8a0 <DemoOutput_HandleMessage+0xb8>)
    e87e:	6873      	ldr	r3, [r6, #4]
    e880:	7859      	ldrb	r1, [r3, #1]
    e882:	4d12      	ldr	r5, [pc, #72]	; (e8cc <DemoOutput_HandleMessage+0xe4>)
    e884:	0028      	movs	r0, r5
    e886:	4c0a      	ldr	r4, [pc, #40]	; (e8b0 <DemoOutput_HandleMessage+0xc8>)
    e888:	47a0      	blx	r4
            printf( "%x", rxMessage.SourceAddress[0]);
    e88a:	6873      	ldr	r3, [r6, #4]
    e88c:	7819      	ldrb	r1, [r3, #0]
    e88e:	0028      	movs	r0, r5
    e890:	47a0      	blx	r4
    e892:	e7be      	b.n	e812 <DemoOutput_HandleMessage+0x2a>
	if (END_DEVICE == role && !rxMessage.flags.bits.broadcast)
    e894:	4b02      	ldr	r3, [pc, #8]	; (e8a0 <DemoOutput_HandleMessage+0xb8>)
    e896:	781b      	ldrb	r3, [r3, #0]
    e898:	079b      	lsls	r3, r3, #30
    e89a:	d1c3      	bne.n	e824 <DemoOutput_HandleMessage+0x3c>
	    startPayloadIndex = 3;
    e89c:	3403      	adds	r4, #3
    e89e:	e7c1      	b.n	e824 <DemoOutput_HandleMessage+0x3c>
    e8a0:	2000213c 	.word	0x2000213c
    e8a4:	00013c24 	.word	0x00013c24
    e8a8:	00008ed1 	.word	0x00008ed1
    e8ac:	00013c5c 	.word	0x00013c5c
    e8b0:	000123f1 	.word	0x000123f1
    e8b4:	00013c70 	.word	0x00013c70
    e8b8:	20002124 	.word	0x20002124
    e8bc:	00008efd 	.word	0x00008efd
    e8c0:	00013c18 	.word	0x00013c18
    e8c4:	00013c40 	.word	0x00013c40
    e8c8:	00013c64 	.word	0x00013c64
    e8cc:	00013c6c 	.word	0x00013c6c

0000e8d0 <DemoOutput_UpdateTxRx>:
void DemoOutput_UpdateTxRx(uint8_t TxNum, uint8_t RxNum)
{
#if defined (ENABLE_LCD)
    LCDTRXCount(TxNum, RxNum);  
#endif
}
    e8d0:	4770      	bx	lr
    e8d2:	Address 0x0000e8d2 is out of bounds.


0000e8d4 <DemoOutput_ChannelError>:

void DemoOutput_ChannelError(uint8_t channel)
{
    e8d4:	b570      	push	{r4, r5, r6, lr}
    e8d6:	0005      	movs	r5, r0
    #if defined (ENABLE_CONSOLE)
        printf("\r\nSelection of channel ");
    e8d8:	4804      	ldr	r0, [pc, #16]	; (e8ec <DemoOutput_ChannelError+0x18>)
    e8da:	4c05      	ldr	r4, [pc, #20]	; (e8f0 <DemoOutput_ChannelError+0x1c>)
    e8dc:	47a0      	blx	r4
        printf("%d", channel);
    e8de:	0029      	movs	r1, r5
    e8e0:	4804      	ldr	r0, [pc, #16]	; (e8f4 <DemoOutput_ChannelError+0x20>)
    e8e2:	47a0      	blx	r4
        printf(" is not supported in current configuration.\r\n");
    e8e4:	4804      	ldr	r0, [pc, #16]	; (e8f8 <DemoOutput_ChannelError+0x24>)
    e8e6:	4b05      	ldr	r3, [pc, #20]	; (e8fc <DemoOutput_ChannelError+0x28>)
    e8e8:	4798      	blx	r3
    #endif
}
    e8ea:	bd70      	pop	{r4, r5, r6, pc}
    e8ec:	00013a4c 	.word	0x00013a4c
    e8f0:	000123f1 	.word	0x000123f1
    e8f4:	00013a28 	.word	0x00013a28
    e8f8:	00013a64 	.word	0x00013a64
    e8fc:	000124e5 	.word	0x000124e5

0000e900 <STAR_DEMO_OPTIONS_MESSAGE>:
#elif ((BOARD == SAMR21_XPLAINED_PRO) || (BOARD == SAMR30_XPLAINED_PRO))
	  LCDDisplay((char *)"SW0:  Unicast", 0, false);
#endif
    }
#endif */
}    
    e900:	4770      	bx	lr
    e902:	Address 0x0000e902 is out of bounds.


0000e904 <ButtonPressed>:
 *
 * Note:
 ********************************************************************/

uint8_t ButtonPressed(void)
{
    e904:	b510      	push	{r4, lr}
	return (port_base->IN.reg & pin_mask);
    e906:	4b24      	ldr	r3, [pc, #144]	; (e998 <ButtonPressed+0x94>)
    e908:	6a1b      	ldr	r3, [r3, #32]
    MIWI_TICK tickDifference;
    if(!port_pin_get_input_level(BUTTON_0_PIN))
    e90a:	00db      	lsls	r3, r3, #3
    e90c:	d424      	bmi.n	e958 <ButtonPressed+0x54>
    {
        //if the button was previously not pressed
        if(PUSH_BUTTON_pressed == false)
    e90e:	4b23      	ldr	r3, [pc, #140]	; (e99c <ButtonPressed+0x98>)
    e910:	781b      	ldrb	r3, [r3, #0]
    e912:	2b00      	cmp	r3, #0
    e914:	d013      	beq.n	e93e <ButtonPressed+0x3a>
		}
    }
	if(PUSH_BUTTON_pressed)
	{
		MIWI_TICK t;
		t.Val = MiWi_TickGet();
    e916:	4b22      	ldr	r3, [pc, #136]	; (e9a0 <ButtonPressed+0x9c>)
    e918:	4798      	blx	r3
		tickDifference.Val = MiWi_TickGetDiff(t,PUSH_BUTTON_press_time);
    e91a:	4b22      	ldr	r3, [pc, #136]	; (e9a4 <ButtonPressed+0xa0>)
    e91c:	6819      	ldr	r1, [r3, #0]
    e91e:	4b22      	ldr	r3, [pc, #136]	; (e9a8 <ButtonPressed+0xa4>)
    e920:	4798      	blx	r3
		if(tickDifference.Val > BTN_LONG_PRESS_TIME)
    e922:	4b22      	ldr	r3, [pc, #136]	; (e9ac <ButtonPressed+0xa8>)
    e924:	4298      	cmp	r0, r3
    e926:	d929      	bls.n	e97c <ButtonPressed+0x78>
		{
			if(PUSH_BUTTON_longPress == false)
    e928:	4b21      	ldr	r3, [pc, #132]	; (e9b0 <ButtonPressed+0xac>)
    e92a:	781b      	ldrb	r3, [r3, #0]
    e92c:	2b00      	cmp	r3, #0
    e92e:	d131      	bne.n	e994 <ButtonPressed+0x90>
			{
				PUSH_BUTTON_longPress = true;
    e930:	3301      	adds	r3, #1
    e932:	4a1f      	ldr	r2, [pc, #124]	; (e9b0 <ButtonPressed+0xac>)
    e934:	7013      	strb	r3, [r2, #0]
				sleep_request = true;
    e936:	4a1f      	ldr	r2, [pc, #124]	; (e9b4 <ButtonPressed+0xb0>)
    e938:	7013      	strb	r3, [r2, #0]
				return 2;
    e93a:	2002      	movs	r0, #2
    e93c:	e011      	b.n	e962 <ButtonPressed+0x5e>
            PUSH_BUTTON_pressed = true;
    e93e:	2201      	movs	r2, #1
    e940:	4b16      	ldr	r3, [pc, #88]	; (e99c <ButtonPressed+0x98>)
    e942:	701a      	strb	r2, [r3, #0]
            PUSH_BUTTON_press_time.Val = MiWi_TickGet();
    e944:	4b16      	ldr	r3, [pc, #88]	; (e9a0 <ButtonPressed+0x9c>)
    e946:	4798      	blx	r3
    e948:	4b16      	ldr	r3, [pc, #88]	; (e9a4 <ButtonPressed+0xa0>)
    e94a:	6018      	str	r0, [r3, #0]
	if(PUSH_BUTTON_pressed)
    e94c:	4b13      	ldr	r3, [pc, #76]	; (e99c <ButtonPressed+0x98>)
    e94e:	781b      	ldrb	r3, [r3, #0]
				return 1;
			}
		}
	}
//<<<<<<<<<<<<<<<<<<<<<<<<<
    return 0;
    e950:	2000      	movs	r0, #0
	if(PUSH_BUTTON_pressed)
    e952:	2b00      	cmp	r3, #0
    e954:	d005      	beq.n	e962 <ButtonPressed+0x5e>
    e956:	e7de      	b.n	e916 <ButtonPressed+0x12>
		if(PUSH_BUTTON_pressed)
    e958:	4b10      	ldr	r3, [pc, #64]	; (e99c <ButtonPressed+0x98>)
    e95a:	781b      	ldrb	r3, [r3, #0]
    return 0;
    e95c:	2000      	movs	r0, #0
		if(PUSH_BUTTON_pressed)
    e95e:	2b00      	cmp	r3, #0
    e960:	d100      	bne.n	e964 <ButtonPressed+0x60>
}
    e962:	bd10      	pop	{r4, pc}
			PUSH_BUTTON_pressed = false;
    e964:	2400      	movs	r4, #0
    e966:	4b0d      	ldr	r3, [pc, #52]	; (e99c <ButtonPressed+0x98>)
    e968:	701c      	strb	r4, [r3, #0]
			PUSH_BUTTON_release_time.Val = MiWi_TickGet();
    e96a:	4b0d      	ldr	r3, [pc, #52]	; (e9a0 <ButtonPressed+0x9c>)
    e96c:	4798      	blx	r3
    e96e:	4b12      	ldr	r3, [pc, #72]	; (e9b8 <ButtonPressed+0xb4>)
    e970:	6018      	str	r0, [r3, #0]
			PUSH_BUTTON_shortPress = false;
    e972:	4b12      	ldr	r3, [pc, #72]	; (e9bc <ButtonPressed+0xb8>)
    e974:	701c      	strb	r4, [r3, #0]
			PUSH_BUTTON_longPress = false;
    e976:	4b0e      	ldr	r3, [pc, #56]	; (e9b0 <ButtonPressed+0xac>)
    e978:	701c      	strb	r4, [r3, #0]
    e97a:	e7e7      	b.n	e94c <ButtonPressed+0x48>
		else if(tickDifference.Val > DEBOUNCE_TIME)
    e97c:	4b10      	ldr	r3, [pc, #64]	; (e9c0 <ButtonPressed+0xbc>)
    e97e:	4298      	cmp	r0, r3
    e980:	d908      	bls.n	e994 <ButtonPressed+0x90>
			if(PUSH_BUTTON_shortPress == false)
    e982:	4b0e      	ldr	r3, [pc, #56]	; (e9bc <ButtonPressed+0xb8>)
    e984:	781b      	ldrb	r3, [r3, #0]
    e986:	2b00      	cmp	r3, #0
    e988:	d104      	bne.n	e994 <ButtonPressed+0x90>
				PUSH_BUTTON_shortPress = true;
    e98a:	2201      	movs	r2, #1
    e98c:	4b0b      	ldr	r3, [pc, #44]	; (e9bc <ButtonPressed+0xb8>)
    e98e:	701a      	strb	r2, [r3, #0]
				return 1;
    e990:	2001      	movs	r0, #1
    e992:	e7e6      	b.n	e962 <ButtonPressed+0x5e>
    return 0;
    e994:	2000      	movs	r0, #0
    e996:	e7e4      	b.n	e962 <ButtonPressed+0x5e>
    e998:	40002800 	.word	0x40002800
    e99c:	200021fc 	.word	0x200021fc
    e9a0:	0000d881 	.word	0x0000d881
    e9a4:	20002204 	.word	0x20002204
    e9a8:	0000d8d1 	.word	0x0000d8d1
    e9ac:	001e8480 	.word	0x001e8480
    e9b0:	200021fe 	.word	0x200021fe
    e9b4:	2000221d 	.word	0x2000221d
    e9b8:	20002200 	.word	0x20002200
    e9bc:	200021fd 	.word	0x200021fd
    e9c0:	0000c350 	.word	0x0000c350

0000e9c4 <ReadMacAddress>:
* Overview:            Uses the MAC Address from the EEPROM for addressing
*
* Note:
**********************************************************************/
void ReadMacAddress(void)
{
    e9c4:	b530      	push	{r4, r5, lr}
    e9c6:	4b09      	ldr	r3, [pc, #36]	; (e9ec <ReadMacAddress+0x28>)
    e9c8:	4d09      	ldr	r5, [pc, #36]	; (e9f0 <ReadMacAddress+0x2c>)
#if ((BOARD == SAMR21ZLL_EK) || (BOARD == SAMR30_MODULE_XPLAINED_PRO))
   uint8_t i = 0, j = 0;
   for (i = 0; i < 8; i += 2, j++)
    e9ca:	4c0a      	ldr	r4, [pc, #40]	; (e9f4 <ReadMacAddress+0x30>)
   {
     myLongAddress[i] = (NVM_UID_ADDRESS[j] & 0xFF);
    e9cc:	8818      	ldrh	r0, [r3, #0]
    e9ce:	195a      	adds	r2, r3, r5
    e9d0:	4909      	ldr	r1, [pc, #36]	; (e9f8 <ReadMacAddress+0x34>)
    e9d2:	1851      	adds	r1, r2, r1
    e9d4:	7008      	strb	r0, [r1, #0]
     myLongAddress[i + 1] = (NVM_UID_ADDRESS[j] >> 8);
    e9d6:	8819      	ldrh	r1, [r3, #0]
    e9d8:	4808      	ldr	r0, [pc, #32]	; (e9fc <ReadMacAddress+0x38>)
    e9da:	4684      	mov	ip, r0
    e9dc:	4462      	add	r2, ip
    e9de:	0a09      	lsrs	r1, r1, #8
    e9e0:	7011      	strb	r1, [r2, #0]
    e9e2:	3302      	adds	r3, #2
   for (i = 0; i < 8; i += 2, j++)
    e9e4:	42a3      	cmp	r3, r4
    e9e6:	d1f1      	bne.n	e9cc <ReadMacAddress+0x8>
   for(uint8_t i=0; i<MY_ADDRESS_LENGTH; i++)
   {
       myLongAddress[i] = peui64[MY_ADDRESS_LENGTH-i-1];
   }
#endif
}
    e9e8:	bd30      	pop	{r4, r5, pc}
    e9ea:	46c0      	nop			; (mov r8, r8)
    e9ec:	0080400a 	.word	0x0080400a
    e9f0:	20000010 	.word	0x20000010
    e9f4:	00804012 	.word	0x00804012
    e9f8:	ff7fbff6 	.word	0xff7fbff6
    e9fc:	ff7fbff7 	.word	0xff7fbff7

0000ea00 <main>:
{
    ea00:	b510      	push	{r4, lr}
    system_init();
    ea02:	4b11      	ldr	r3, [pc, #68]	; (ea48 <main+0x48>)
    ea04:	4798      	blx	r3
    delay_init();
    ea06:	4b11      	ldr	r3, [pc, #68]	; (ea4c <main+0x4c>)
    ea08:	4798      	blx	r3
    cpu_irq_enable();
    ea0a:	2201      	movs	r2, #1
    ea0c:	4b10      	ldr	r3, [pc, #64]	; (ea50 <main+0x50>)
    ea0e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    ea10:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ea14:	b662      	cpsie	i
    sio2host_init();
    ea16:	4b0f      	ldr	r3, [pc, #60]	; (ea54 <main+0x54>)
    ea18:	4798      	blx	r3
    ReadMacAddress();
    ea1a:	4b0f      	ldr	r3, [pc, #60]	; (ea58 <main+0x58>)
    ea1c:	4798      	blx	r3
    SYS_TimerInit();
    ea1e:	4c0f      	ldr	r4, [pc, #60]	; (ea5c <main+0x5c>)
    ea20:	47a0      	blx	r4
    DemoOutput_Greeting();
    ea22:	4b0f      	ldr	r3, [pc, #60]	; (ea60 <main+0x60>)
    ea24:	4798      	blx	r3
    SYS_TimerInit();
    ea26:	47a0      	blx	r4
    nvm_init(INT_FLASH);
    ea28:	2000      	movs	r0, #0
    ea2a:	4b0e      	ldr	r3, [pc, #56]	; (ea64 <main+0x64>)
    ea2c:	4798      	blx	r3
    PDS_Init();
    ea2e:	4b0e      	ldr	r3, [pc, #56]	; (ea68 <main+0x68>)
    ea30:	4798      	blx	r3
    demo_output_freezer_options();
    ea32:	4b0e      	ldr	r3, [pc, #56]	; (ea6c <main+0x6c>)
    ea34:	4798      	blx	r3
    freezer_enable = freezer_feature();
    ea36:	4b0e      	ldr	r3, [pc, #56]	; (ea70 <main+0x70>)
    ea38:	4798      	blx	r3
    Initialize_Demo(freezer_enable);
    ea3a:	4b0e      	ldr	r3, [pc, #56]	; (ea74 <main+0x74>)
    ea3c:	4798      	blx	r3
	temperature_sensor_init();	//temp sensor init
    ea3e:	4b0e      	ldr	r3, [pc, #56]	; (ea78 <main+0x78>)
    ea40:	4798      	blx	r3
        Run_Demo();
    ea42:	4c0e      	ldr	r4, [pc, #56]	; (ea7c <main+0x7c>)
    ea44:	47a0      	blx	r4
    ea46:	e7fd      	b.n	ea44 <main+0x44>
    ea48:	00008689 	.word	0x00008689
    ea4c:	000061f9 	.word	0x000061f9
    ea50:	20000008 	.word	0x20000008
    ea54:	00008d81 	.word	0x00008d81
    ea58:	0000e9c5 	.word	0x0000e9c5
    ea5c:	0000d711 	.word	0x0000d711
    ea60:	0000e74d 	.word	0x0000e74d
    ea64:	0000da91 	.word	0x0000da91
    ea68:	0000a879 	.word	0x0000a879
    ea6c:	0000e79d 	.word	0x0000e79d
    ea70:	0000ef9d 	.word	0x0000ef9d
    ea74:	0000efd9 	.word	0x0000efd9
    ea78:	0000ec31 	.word	0x0000ec31
    ea7c:	0000f139 	.word	0x0000f139

0000ea80 <dataConfcb>:
* Overview: Confirmation Callback for MiApp_SendData
*
* Parameters:  handle - message handle, miwi_status_t status of data send
****************************************************************************/
static void dataConfcb(uint8_t handle, miwi_status_t status, uint8_t* msgPointer)
{
    ea80:	b510      	push	{r4, lr}
    if (SUCCESS == status)
    ea82:	2900      	cmp	r1, #0
    ea84:	d004      	beq.n	ea90 <dataConfcb+0x10>
        DemoOutput_UpdateTxRx(++TxNum, RxNum);
        /* Delay for Display */
        //delay_ms(100);
    }
    /* After Displaying TX and RX Counts , Switch back to showing Demo Instructions */
    STAR_DEMO_OPTIONS_MESSAGE (role);
    ea86:	4b07      	ldr	r3, [pc, #28]	; (eaa4 <dataConfcb+0x24>)
    ea88:	7818      	ldrb	r0, [r3, #0]
    ea8a:	4b07      	ldr	r3, [pc, #28]	; (eaa8 <dataConfcb+0x28>)
    ea8c:	4798      	blx	r3
}
    ea8e:	bd10      	pop	{r4, pc}
        DemoOutput_UpdateTxRx(++TxNum, RxNum);
    ea90:	4b06      	ldr	r3, [pc, #24]	; (eaac <dataConfcb+0x2c>)
    ea92:	7818      	ldrb	r0, [r3, #0]
    ea94:	3001      	adds	r0, #1
    ea96:	b2c0      	uxtb	r0, r0
    ea98:	7018      	strb	r0, [r3, #0]
    ea9a:	4b05      	ldr	r3, [pc, #20]	; (eab0 <dataConfcb+0x30>)
    ea9c:	7819      	ldrb	r1, [r3, #0]
    ea9e:	4b05      	ldr	r3, [pc, #20]	; (eab4 <dataConfcb+0x34>)
    eaa0:	4798      	blx	r3
    eaa2:	e7f0      	b.n	ea86 <dataConfcb+0x6>
    eaa4:	20002124 	.word	0x20002124
    eaa8:	0000e901 	.word	0x0000e901
    eaac:	20001c85 	.word	0x20001c85
    eab0:	20001c84 	.word	0x20001c84
    eab4:	0000e8d1 	.word	0x0000e8d1

0000eab8 <led_indicate_sleep>:
* Overview: add this function to make a LED pattern to indicate entering sleep mode
*
* Parameters: None
*********************************************************************/
void led_indicate_sleep(void)
{
    eab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    eaba:	46ce      	mov	lr, r9
    eabc:	b500      	push	{lr}
    eabe:	b082      	sub	sp, #8
	MIWI_TICK t1, t2;
	uint8_t i;
	
	for(i=0; i< 6; i++)
    eac0:	2500      	movs	r5, #0
	{
		if(i==0 || i==2 || i==4)
			LED_Off(LED0);
		else
			LED_On(LED0);
		t1.Val = MiWi_TickGet();
    eac2:	4b11      	ldr	r3, [pc, #68]	; (eb08 <led_indicate_sleep+0x50>)
    eac4:	4699      	mov	r9, r3
		while(1)
		{
			t2.Val = MiWi_TickGet();
    eac6:	001f      	movs	r7, r3
			if(MiWi_TickGetDiff(t2,t1) >= 200*MS)
    eac8:	4e10      	ldr	r6, [pc, #64]	; (eb0c <led_indicate_sleep+0x54>)
		if(i==0 || i==2 || i==4)
    eaca:	2302      	movs	r3, #2
    eacc:	002a      	movs	r2, r5
    eace:	439a      	bics	r2, r3
    ead0:	d015      	beq.n	eafe <led_indicate_sleep+0x46>
    ead2:	2d04      	cmp	r5, #4
    ead4:	d013      	beq.n	eafe <led_indicate_sleep+0x46>
		port_base->OUTCLR.reg = pin_mask;
    ead6:	2280      	movs	r2, #128	; 0x80
    ead8:	0512      	lsls	r2, r2, #20
    eada:	4b0d      	ldr	r3, [pc, #52]	; (eb10 <led_indicate_sleep+0x58>)
    eadc:	615a      	str	r2, [r3, #20]
		t1.Val = MiWi_TickGet();
    eade:	47c8      	blx	r9
    eae0:	9001      	str	r0, [sp, #4]
			if(MiWi_TickGetDiff(t2,t1) >= 200*MS)
    eae2:	4c0c      	ldr	r4, [pc, #48]	; (eb14 <led_indicate_sleep+0x5c>)
			t2.Val = MiWi_TickGet();
    eae4:	47b8      	blx	r7
			if(MiWi_TickGetDiff(t2,t1) >= 200*MS)
    eae6:	9901      	ldr	r1, [sp, #4]
    eae8:	47b0      	blx	r6
    eaea:	42a0      	cmp	r0, r4
    eaec:	d9fa      	bls.n	eae4 <led_indicate_sleep+0x2c>
	for(i=0; i< 6; i++)
    eaee:	3501      	adds	r5, #1
    eaf0:	b2ed      	uxtb	r5, r5
    eaf2:	2d06      	cmp	r5, #6
    eaf4:	d1e9      	bne.n	eaca <led_indicate_sleep+0x12>
				break;
		}
	}
}
    eaf6:	b002      	add	sp, #8
    eaf8:	bc04      	pop	{r2}
    eafa:	4691      	mov	r9, r2
    eafc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port_base->OUTSET.reg = pin_mask;
    eafe:	2280      	movs	r2, #128	; 0x80
    eb00:	0512      	lsls	r2, r2, #20
    eb02:	4b03      	ldr	r3, [pc, #12]	; (eb10 <led_indicate_sleep+0x58>)
    eb04:	619a      	str	r2, [r3, #24]
    eb06:	e7ea      	b.n	eade <led_indicate_sleep+0x26>
    eb08:	0000d881 	.word	0x0000d881
    eb0c:	0000d8d1 	.word	0x0000d8d1
    eb10:	40002800 	.word	0x40002800
    eb14:	00030d3f 	.word	0x00030d3f

0000eb18 <handle_receive_msg>:
#endif		
    }
}

void handle_receive_msg(uint8_t* payload, uint8_t payloadSize)
{
    eb18:	b570      	push	{r4, r5, r6, lr}
    eb1a:	0005      	movs	r5, r0
	uint8_t* p2;
	uint8_t i=0;
	p2 = payload;
	while(i < payloadSize)
    eb1c:	2900      	cmp	r1, #0
    eb1e:	d01c      	beq.n	eb5a <handle_receive_msg+0x42>
	{
		if(*p2 == ' ')
    eb20:	7803      	ldrb	r3, [r0, #0]
    eb22:	0004      	movs	r4, r0
    eb24:	2b20      	cmp	r3, #32
    eb26:	d003      	beq.n	eb30 <handle_receive_msg+0x18>
		{
			*p2++ = 0;	//clear SPACE
			break;
		}
		else
			p2++;
    eb28:	3401      	adds	r4, #1
		if(*p2 == ' ')
    eb2a:	7823      	ldrb	r3, [r4, #0]
    eb2c:	2b20      	cmp	r3, #32
    eb2e:	d1fb      	bne.n	eb28 <handle_receive_msg+0x10>
			*p2++ = 0;	//clear SPACE
    eb30:	2300      	movs	r3, #0
    eb32:	7023      	strb	r3, [r4, #0]
	}
	if(i<payloadSize)
	{
		if((strcmp(payload, "LED1") == 0) || (strcmp(payload, "led1") == 0))
    eb34:	4923      	ldr	r1, [pc, #140]	; (ebc4 <handle_receive_msg+0xac>)
    eb36:	0028      	movs	r0, r5
    eb38:	4b23      	ldr	r3, [pc, #140]	; (ebc8 <handle_receive_msg+0xb0>)
    eb3a:	4798      	blx	r3
    eb3c:	2800      	cmp	r0, #0
    eb3e:	d005      	beq.n	eb4c <handle_receive_msg+0x34>
    eb40:	4922      	ldr	r1, [pc, #136]	; (ebcc <handle_receive_msg+0xb4>)
    eb42:	0028      	movs	r0, r5
    eb44:	4b20      	ldr	r3, [pc, #128]	; (ebc8 <handle_receive_msg+0xb0>)
    eb46:	4798      	blx	r3
    eb48:	2800      	cmp	r0, #0
    eb4a:	d10c      	bne.n	eb66 <handle_receive_msg+0x4e>
		{
			if(*p2 == '0')
    eb4c:	7863      	ldrb	r3, [r4, #1]
    eb4e:	2b30      	cmp	r3, #48	; 0x30
    eb50:	d004      	beq.n	eb5c <handle_receive_msg+0x44>
		port_base->OUTCLR.reg = pin_mask;
    eb52:	2280      	movs	r2, #128	; 0x80
    eb54:	0512      	lsls	r2, r2, #20
    eb56:	4b1e      	ldr	r3, [pc, #120]	; (ebd0 <handle_receive_msg+0xb8>)
    eb58:	615a      	str	r2, [r3, #20]
				port_pin_set_output_level(GPIO_1, GPIO_LOW);
			else
				port_pin_set_output_level(GPIO_1, GPIO_HIGH);
		}
	}
}
    eb5a:	bd70      	pop	{r4, r5, r6, pc}
		port_base->OUTSET.reg = pin_mask;
    eb5c:	2280      	movs	r2, #128	; 0x80
    eb5e:	0512      	lsls	r2, r2, #20
    eb60:	4b1b      	ldr	r3, [pc, #108]	; (ebd0 <handle_receive_msg+0xb8>)
    eb62:	619a      	str	r2, [r3, #24]
    eb64:	e7f9      	b.n	eb5a <handle_receive_msg+0x42>
		else if((strcmp(payload, "GPIO1") == 0) || (strcmp(payload, "gpio1") == 0))
    eb66:	491b      	ldr	r1, [pc, #108]	; (ebd4 <handle_receive_msg+0xbc>)
    eb68:	0028      	movs	r0, r5
    eb6a:	4b17      	ldr	r3, [pc, #92]	; (ebc8 <handle_receive_msg+0xb0>)
    eb6c:	4798      	blx	r3
    eb6e:	2800      	cmp	r0, #0
    eb70:	d005      	beq.n	eb7e <handle_receive_msg+0x66>
    eb72:	4919      	ldr	r1, [pc, #100]	; (ebd8 <handle_receive_msg+0xc0>)
    eb74:	0028      	movs	r0, r5
    eb76:	4b14      	ldr	r3, [pc, #80]	; (ebc8 <handle_receive_msg+0xb0>)
    eb78:	4798      	blx	r3
    eb7a:	2800      	cmp	r0, #0
    eb7c:	d10a      	bne.n	eb94 <handle_receive_msg+0x7c>
			if(*p2 == '0')
    eb7e:	7863      	ldrb	r3, [r4, #1]
    eb80:	2b30      	cmp	r3, #48	; 0x30
    eb82:	d003      	beq.n	eb8c <handle_receive_msg+0x74>
    eb84:	2240      	movs	r2, #64	; 0x40
    eb86:	4b12      	ldr	r3, [pc, #72]	; (ebd0 <handle_receive_msg+0xb8>)
    eb88:	619a      	str	r2, [r3, #24]
    eb8a:	e7e6      	b.n	eb5a <handle_receive_msg+0x42>
		port_base->OUTCLR.reg = pin_mask;
    eb8c:	2240      	movs	r2, #64	; 0x40
    eb8e:	4b10      	ldr	r3, [pc, #64]	; (ebd0 <handle_receive_msg+0xb8>)
    eb90:	615a      	str	r2, [r3, #20]
    eb92:	e7e2      	b.n	eb5a <handle_receive_msg+0x42>
		else if((strcmp(payload, "GPIO2") == 0) || (strcmp(payload, "gpio2") == 0))
    eb94:	4911      	ldr	r1, [pc, #68]	; (ebdc <handle_receive_msg+0xc4>)
    eb96:	0028      	movs	r0, r5
    eb98:	4b0b      	ldr	r3, [pc, #44]	; (ebc8 <handle_receive_msg+0xb0>)
    eb9a:	4798      	blx	r3
    eb9c:	2800      	cmp	r0, #0
    eb9e:	d005      	beq.n	ebac <handle_receive_msg+0x94>
    eba0:	490f      	ldr	r1, [pc, #60]	; (ebe0 <handle_receive_msg+0xc8>)
    eba2:	0028      	movs	r0, r5
    eba4:	4b08      	ldr	r3, [pc, #32]	; (ebc8 <handle_receive_msg+0xb0>)
    eba6:	4798      	blx	r3
    eba8:	2800      	cmp	r0, #0
    ebaa:	d1d6      	bne.n	eb5a <handle_receive_msg+0x42>
			if(*p2 == '0')
    ebac:	7863      	ldrb	r3, [r4, #1]
    ebae:	2b30      	cmp	r3, #48	; 0x30
    ebb0:	d003      	beq.n	ebba <handle_receive_msg+0xa2>
		port_base->OUTSET.reg = pin_mask;
    ebb2:	2280      	movs	r2, #128	; 0x80
    ebb4:	4b06      	ldr	r3, [pc, #24]	; (ebd0 <handle_receive_msg+0xb8>)
    ebb6:	619a      	str	r2, [r3, #24]
}
    ebb8:	e7cf      	b.n	eb5a <handle_receive_msg+0x42>
		port_base->OUTCLR.reg = pin_mask;
    ebba:	2280      	movs	r2, #128	; 0x80
    ebbc:	4b04      	ldr	r3, [pc, #16]	; (ebd0 <handle_receive_msg+0xb8>)
    ebbe:	615a      	str	r2, [r3, #20]
    ebc0:	e7cb      	b.n	eb5a <handle_receive_msg+0x42>
    ebc2:	46c0      	nop			; (mov r8, r8)
    ebc4:	00013c74 	.word	0x00013c74
    ebc8:	00012739 	.word	0x00012739
    ebcc:	00013c7c 	.word	0x00013c7c
    ebd0:	40002800 	.word	0x40002800
    ebd4:	00013c84 	.word	0x00013c84
    ebd8:	00013c8c 	.word	0x00013c8c
    ebdc:	00013c94 	.word	0x00013c94
    ebe0:	00013c9c 	.word	0x00013c9c

0000ebe4 <ReceivedDataIndication>:
{
    ebe4:	b510      	push	{r4, lr}
    DemoOutput_HandleMessage();
    ebe6:	4b0b      	ldr	r3, [pc, #44]	; (ec14 <ReceivedDataIndication+0x30>)
    ebe8:	4798      	blx	r3
    DemoOutput_UpdateTxRx(TxNum, ++RxNum);
    ebea:	4b0b      	ldr	r3, [pc, #44]	; (ec18 <ReceivedDataIndication+0x34>)
    ebec:	7818      	ldrb	r0, [r3, #0]
    ebee:	4b0b      	ldr	r3, [pc, #44]	; (ec1c <ReceivedDataIndication+0x38>)
    ebf0:	7819      	ldrb	r1, [r3, #0]
    ebf2:	3101      	adds	r1, #1
    ebf4:	b2c9      	uxtb	r1, r1
    ebf6:	7019      	strb	r1, [r3, #0]
    ebf8:	4b09      	ldr	r3, [pc, #36]	; (ec20 <ReceivedDataIndication+0x3c>)
    ebfa:	4798      	blx	r3
    if (role == END_DEVICE)
    ebfc:	4b09      	ldr	r3, [pc, #36]	; (ec24 <ReceivedDataIndication+0x40>)
    ebfe:	781b      	ldrb	r3, [r3, #0]
    ec00:	2b02      	cmp	r3, #2
    ec02:	d000      	beq.n	ec06 <ReceivedDataIndication+0x22>
}
    ec04:	bd10      	pop	{r4, pc}
		handle_receive_msg(&rxMessage.Payload[0], rxMessage.PayloadSize);
    ec06:	4b08      	ldr	r3, [pc, #32]	; (ec28 <ReceivedDataIndication+0x44>)
    ec08:	7b19      	ldrb	r1, [r3, #12]
    ec0a:	6898      	ldr	r0, [r3, #8]
    ec0c:	4b07      	ldr	r3, [pc, #28]	; (ec2c <ReceivedDataIndication+0x48>)
    ec0e:	4798      	blx	r3
}
    ec10:	e7f8      	b.n	ec04 <ReceivedDataIndication+0x20>
    ec12:	46c0      	nop			; (mov r8, r8)
    ec14:	0000e7e9 	.word	0x0000e7e9
    ec18:	20001c85 	.word	0x20001c85
    ec1c:	20001c84 	.word	0x20001c84
    ec20:	0000e8d1 	.word	0x0000e8d1
    ec24:	20002124 	.word	0x20002124
    ec28:	2000213c 	.word	0x2000213c
    ec2c:	0000eb19 	.word	0x0000eb19

0000ec30 <temperature_sensor_init>:

void temperature_sensor_init(void)
{
    ec30:	b570      	push	{r4, r5, r6, lr}
    ec32:	b082      	sub	sp, #8
	at30tse_init();
    ec34:	4b0c      	ldr	r3, [pc, #48]	; (ec68 <temperature_sensor_init+0x38>)
    ec36:	4798      	blx	r3
	
	/* Read thigh and tlow */
	//! [read_thigh]
	volatile uint16_t thigh = 0;
    ec38:	466b      	mov	r3, sp
    ec3a:	1d9c      	adds	r4, r3, #6
    ec3c:	2600      	movs	r6, #0
    ec3e:	80de      	strh	r6, [r3, #6]
	thigh = at30tse_read_register(AT30TSE_THIGH_REG,
    ec40:	2202      	movs	r2, #2
    ec42:	2100      	movs	r1, #0
    ec44:	2003      	movs	r0, #3
    ec46:	4d09      	ldr	r5, [pc, #36]	; (ec6c <temperature_sensor_init+0x3c>)
    ec48:	47a8      	blx	r5
    ec4a:	8020      	strh	r0, [r4, #0]
	AT30TSE_NON_VOLATILE_REG, AT30TSE_THIGH_REG_SIZE);
	//! [read_thigh]
	//! [read_tlow]
	volatile uint16_t tlow = 0;
    ec4c:	ac01      	add	r4, sp, #4
    ec4e:	8026      	strh	r6, [r4, #0]
	tlow = at30tse_read_register(AT30TSE_TLOW_REG,
    ec50:	2202      	movs	r2, #2
    ec52:	2100      	movs	r1, #0
    ec54:	2002      	movs	r0, #2
    ec56:	47a8      	blx	r5
    ec58:	8020      	strh	r0, [r4, #0]
	AT30TSE_NON_VOLATILE_REG, AT30TSE_TLOW_REG_SIZE);
	//! [read_tlow]
	
	/* Set 12-bit resolution mode. */
	//! [write_conf]
	at30tse_write_config_register(
    ec5a:	20c0      	movs	r0, #192	; 0xc0
    ec5c:	01c0      	lsls	r0, r0, #7
    ec5e:	4b04      	ldr	r3, [pc, #16]	; (ec70 <temperature_sensor_init+0x40>)
    ec60:	4798      	blx	r3
	AT30TSE_CONFIG_RES(AT30TSE_CONFIG_RES_12_bit));
	//! [write_conf]
	
}
    ec62:	b002      	add	sp, #8
    ec64:	bd70      	pop	{r4, r5, r6, pc}
    ec66:	46c0      	nop			; (mov r8, r8)
    ec68:	000063a1 	.word	0x000063a1
    ec6c:	00006439 	.word	0x00006439
    ec70:	000064c9 	.word	0x000064c9

0000ec74 <temperature_sensor_read>:

int32_t temperature_sensor_read(void)
{
    ec74:	b510      	push	{r4, lr}
	double temp_val = at30tse_read_temperature();
    ec76:	4b05      	ldr	r3, [pc, #20]	; (ec8c <temperature_sensor_read+0x18>)
    ec78:	4798      	blx	r3
	temp_val *= 10;
    ec7a:	2200      	movs	r2, #0
    ec7c:	4b04      	ldr	r3, [pc, #16]	; (ec90 <temperature_sensor_read+0x1c>)
    ec7e:	4c05      	ldr	r4, [pc, #20]	; (ec94 <temperature_sensor_read+0x20>)
    ec80:	47a0      	blx	r4
	temp_val = round(temp_val);
    ec82:	4b05      	ldr	r3, [pc, #20]	; (ec98 <temperature_sensor_read+0x24>)
    ec84:	4798      	blx	r3
	return (int32_t)temp_val;
    ec86:	4b05      	ldr	r3, [pc, #20]	; (ec9c <temperature_sensor_read+0x28>)
    ec88:	4798      	blx	r3
}
    ec8a:	bd10      	pop	{r4, pc}
    ec8c:	000064ed 	.word	0x000064ed
    ec90:	40240000 	.word	0x40240000
    ec94:	000110b1 	.word	0x000110b1
    ec98:	0000f491 	.word	0x0000f491
    ec9c:	00011bdd 	.word	0x00011bdd

0000eca0 <temperature_send_start>:

void temperature_send_start(void)
{
    eca0:	b510      	push	{r4, lr}
	t1a.Val = MiWi_TickGet();
    eca2:	4b02      	ldr	r3, [pc, #8]	; (ecac <temperature_send_start+0xc>)
    eca4:	4798      	blx	r3
    eca6:	4b02      	ldr	r3, [pc, #8]	; (ecb0 <temperature_send_start+0x10>)
    eca8:	6018      	str	r0, [r3, #0]
}
    ecaa:	bd10      	pop	{r4, pc}
    ecac:	0000d881 	.word	0x0000d881
    ecb0:	20002220 	.word	0x20002220

0000ecb4 <temperature_send>:

void temperature_send(void)
{
    ecb4:	b570      	push	{r4, r5, r6, lr}
    ecb6:	b088      	sub	sp, #32
	uint8_t data[12];
	int32_t temp;
	uint32_t utemp1, utemp2;
	uint8_t len=0;
	bool mac_ack_status;
	t2a.Val = MiWi_TickGet();
    ecb8:	4b4b      	ldr	r3, [pc, #300]	; (ede8 <temperature_send+0x134>)
    ecba:	4798      	blx	r3
    ecbc:	4b4b      	ldr	r3, [pc, #300]	; (edec <temperature_send+0x138>)
    ecbe:	6018      	str	r0, [r3, #0]
	if(MiWi_TickGetDiff(t2a, t1a) > TEMP_DATA_SEND_INTERVAL*ONE_SECOND)
    ecc0:	4b4b      	ldr	r3, [pc, #300]	; (edf0 <temperature_send+0x13c>)
    ecc2:	6819      	ldr	r1, [r3, #0]
    ecc4:	4b4b      	ldr	r3, [pc, #300]	; (edf4 <temperature_send+0x140>)
    ecc6:	4798      	blx	r3
    ecc8:	4b4b      	ldr	r3, [pc, #300]	; (edf8 <temperature_send+0x144>)
    ecca:	4298      	cmp	r0, r3
    eccc:	d801      	bhi.n	ecd2 <temperature_send+0x1e>
		len, data, msghandledemo++, true, dataConfcb);
		if (mac_ack_status)
		TxSynCount++;
		t1a.Val = MiWi_TickGet();
	}
}
    ecce:	b008      	add	sp, #32
    ecd0:	bd70      	pop	{r4, r5, r6, pc}
		data[len++] = 'T';
    ecd2:	ab05      	add	r3, sp, #20
    ecd4:	2254      	movs	r2, #84	; 0x54
    ecd6:	701a      	strb	r2, [r3, #0]
		data[len++] = 'E';
    ecd8:	3a0f      	subs	r2, #15
    ecda:	705a      	strb	r2, [r3, #1]
		data[len++] = 'M';
    ecdc:	3208      	adds	r2, #8
    ecde:	709a      	strb	r2, [r3, #2]
		data[len++] = 'P';
    ece0:	3203      	adds	r2, #3
    ece2:	70da      	strb	r2, [r3, #3]
		data[len++] = ' ';
    ece4:	3a30      	subs	r2, #48	; 0x30
    ece6:	711a      	strb	r2, [r3, #4]
		temp = temperature_sensor_read();
    ece8:	4b44      	ldr	r3, [pc, #272]	; (edfc <temperature_send+0x148>)
    ecea:	4798      	blx	r3
		data[len++] = ' ';
    ecec:	2605      	movs	r6, #5
		if(temp < 0)
    ecee:	2800      	cmp	r0, #0
    ecf0:	db56      	blt.n	eda0 <temperature_send+0xec>
		utemp1 = abs(temp);
    ecf2:	17c3      	asrs	r3, r0, #31
    ecf4:	18c4      	adds	r4, r0, r3
    ecf6:	405c      	eors	r4, r3
		if(utemp1 >= 1000 )
    ecf8:	4b41      	ldr	r3, [pc, #260]	; (ee00 <temperature_send+0x14c>)
    ecfa:	429c      	cmp	r4, r3
    ecfc:	d95b      	bls.n	edb6 <temperature_send+0x102>
			data[len++] = (uint8_t)(utemp2+0x30);
    ecfe:	1c75      	adds	r5, r6, #1
    ed00:	b2ed      	uxtb	r5, r5
			utemp2 = utemp1/1000;
    ed02:	21fa      	movs	r1, #250	; 0xfa
    ed04:	0089      	lsls	r1, r1, #2
    ed06:	0020      	movs	r0, r4
    ed08:	4b3e      	ldr	r3, [pc, #248]	; (ee04 <temperature_send+0x150>)
    ed0a:	4798      	blx	r3
			data[len++] = (uint8_t)(utemp2+0x30);
    ed0c:	3030      	adds	r0, #48	; 0x30
    ed0e:	ab05      	add	r3, sp, #20
    ed10:	5598      	strb	r0, [r3, r6]
    ed12:	21fa      	movs	r1, #250	; 0xfa
    ed14:	0089      	lsls	r1, r1, #2
    ed16:	0020      	movs	r0, r4
    ed18:	4b3b      	ldr	r3, [pc, #236]	; (ee08 <temperature_send+0x154>)
    ed1a:	4798      	blx	r3
    ed1c:	000c      	movs	r4, r1
			if(utemp1 >= 100 )
    ed1e:	2963      	cmp	r1, #99	; 0x63
    ed20:	d943      	bls.n	edaa <temperature_send+0xf6>
				data[len++] = (uint8_t)(utemp2+0x30);
    ed22:	3602      	adds	r6, #2
    ed24:	b2f6      	uxtb	r6, r6
				utemp2 = utemp1/100;
    ed26:	2164      	movs	r1, #100	; 0x64
    ed28:	0020      	movs	r0, r4
    ed2a:	4b36      	ldr	r3, [pc, #216]	; (ee04 <temperature_send+0x150>)
    ed2c:	4798      	blx	r3
				data[len++] = (uint8_t)(utemp2+0x30);
    ed2e:	3030      	adds	r0, #48	; 0x30
    ed30:	ab05      	add	r3, sp, #20
    ed32:	5558      	strb	r0, [r3, r5]
    ed34:	2164      	movs	r1, #100	; 0x64
    ed36:	0020      	movs	r0, r4
    ed38:	4b33      	ldr	r3, [pc, #204]	; (ee08 <temperature_send+0x154>)
    ed3a:	4798      	blx	r3
    ed3c:	000c      	movs	r4, r1
		if(utemp1 >= 10 )
    ed3e:	2c09      	cmp	r4, #9
    ed40:	d94b      	bls.n	edda <temperature_send+0x126>
			data[len++] = (uint8_t)(utemp2+0x30);
    ed42:	1c75      	adds	r5, r6, #1
    ed44:	b2ed      	uxtb	r5, r5
			utemp2 = utemp1/10;
    ed46:	210a      	movs	r1, #10
    ed48:	0020      	movs	r0, r4
    ed4a:	4b2e      	ldr	r3, [pc, #184]	; (ee04 <temperature_send+0x150>)
    ed4c:	4798      	blx	r3
			data[len++] = (uint8_t)(utemp2+0x30);
    ed4e:	3030      	adds	r0, #48	; 0x30
    ed50:	ab05      	add	r3, sp, #20
    ed52:	5598      	strb	r0, [r3, r6]
    ed54:	210a      	movs	r1, #10
    ed56:	0020      	movs	r0, r4
    ed58:	4b2b      	ldr	r3, [pc, #172]	; (ee08 <temperature_send+0x154>)
    ed5a:	4798      	blx	r3
    ed5c:	000c      	movs	r4, r1
		data[len++] = '.';
    ed5e:	ab05      	add	r3, sp, #20
    ed60:	222e      	movs	r2, #46	; 0x2e
    ed62:	555a      	strb	r2, [r3, r5]
    ed64:	1c6a      	adds	r2, r5, #1
		data[len++] = (uint8_t)(utemp1+0x30);
    ed66:	b2d2      	uxtb	r2, r2
    ed68:	3430      	adds	r4, #48	; 0x30
    ed6a:	549c      	strb	r4, [r3, r2]
		mac_ack_status = MiApp_SendData(LONG_ADDR_LEN, connectionTable[0].Address,
    ed6c:	4a27      	ldr	r2, [pc, #156]	; (ee0c <temperature_send+0x158>)
    ed6e:	7811      	ldrb	r1, [r2, #0]
    ed70:	1c48      	adds	r0, r1, #1
    ed72:	7010      	strb	r0, [r2, #0]
		data[len++] = (uint8_t)(utemp1+0x30);
    ed74:	3502      	adds	r5, #2
		mac_ack_status = MiApp_SendData(LONG_ADDR_LEN, connectionTable[0].Address,
    ed76:	b2ea      	uxtb	r2, r5
    ed78:	4825      	ldr	r0, [pc, #148]	; (ee10 <temperature_send+0x15c>)
    ed7a:	9002      	str	r0, [sp, #8]
    ed7c:	2001      	movs	r0, #1
    ed7e:	9001      	str	r0, [sp, #4]
    ed80:	9100      	str	r1, [sp, #0]
    ed82:	4924      	ldr	r1, [pc, #144]	; (ee14 <temperature_send+0x160>)
    ed84:	3007      	adds	r0, #7
    ed86:	4c24      	ldr	r4, [pc, #144]	; (ee18 <temperature_send+0x164>)
    ed88:	47a0      	blx	r4
		if (mac_ack_status)
    ed8a:	2800      	cmp	r0, #0
    ed8c:	d003      	beq.n	ed96 <temperature_send+0xe2>
		TxSynCount++;
    ed8e:	4a23      	ldr	r2, [pc, #140]	; (ee1c <temperature_send+0x168>)
    ed90:	7813      	ldrb	r3, [r2, #0]
    ed92:	3301      	adds	r3, #1
    ed94:	7013      	strb	r3, [r2, #0]
		t1a.Val = MiWi_TickGet();
    ed96:	4b14      	ldr	r3, [pc, #80]	; (ede8 <temperature_send+0x134>)
    ed98:	4798      	blx	r3
    ed9a:	4b15      	ldr	r3, [pc, #84]	; (edf0 <temperature_send+0x13c>)
    ed9c:	6018      	str	r0, [r3, #0]
}
    ed9e:	e796      	b.n	ecce <temperature_send+0x1a>
			data[len++] = '-';
    eda0:	222d      	movs	r2, #45	; 0x2d
    eda2:	ab05      	add	r3, sp, #20
    eda4:	715a      	strb	r2, [r3, #5]
    eda6:	3601      	adds	r6, #1
    eda8:	e7a3      	b.n	ecf2 <temperature_send+0x3e>
				data[len++] = '0';
    edaa:	3602      	adds	r6, #2
    edac:	b2f6      	uxtb	r6, r6
    edae:	2230      	movs	r2, #48	; 0x30
    edb0:	ab05      	add	r3, sp, #20
    edb2:	555a      	strb	r2, [r3, r5]
    edb4:	e7c3      	b.n	ed3e <temperature_send+0x8a>
			if(utemp1 >= 100 )
    edb6:	2c63      	cmp	r4, #99	; 0x63
    edb8:	d9c1      	bls.n	ed3e <temperature_send+0x8a>
				data[len++] = (uint8_t)(utemp2+0x30);
    edba:	1c75      	adds	r5, r6, #1
    edbc:	b2ed      	uxtb	r5, r5
				utemp2 = utemp1/100;
    edbe:	2164      	movs	r1, #100	; 0x64
    edc0:	0020      	movs	r0, r4
    edc2:	4b10      	ldr	r3, [pc, #64]	; (ee04 <temperature_send+0x150>)
    edc4:	4798      	blx	r3
				data[len++] = (uint8_t)(utemp2+0x30);
    edc6:	3030      	adds	r0, #48	; 0x30
    edc8:	ab05      	add	r3, sp, #20
    edca:	5598      	strb	r0, [r3, r6]
    edcc:	2164      	movs	r1, #100	; 0x64
    edce:	0020      	movs	r0, r4
    edd0:	4b0d      	ldr	r3, [pc, #52]	; (ee08 <temperature_send+0x154>)
    edd2:	4798      	blx	r3
    edd4:	000c      	movs	r4, r1
    edd6:	002e      	movs	r6, r5
    edd8:	e7b1      	b.n	ed3e <temperature_send+0x8a>
			data[len++] = '0';
    edda:	1c75      	adds	r5, r6, #1
    eddc:	b2ed      	uxtb	r5, r5
    edde:	2230      	movs	r2, #48	; 0x30
    ede0:	ab05      	add	r3, sp, #20
    ede2:	559a      	strb	r2, [r3, r6]
    ede4:	e7bb      	b.n	ed5e <temperature_send+0xaa>
    ede6:	46c0      	nop			; (mov r8, r8)
    ede8:	0000d881 	.word	0x0000d881
    edec:	20002218 	.word	0x20002218
    edf0:	20002220 	.word	0x20002220
    edf4:	0000d8d1 	.word	0x0000d8d1
    edf8:	00989680 	.word	0x00989680
    edfc:	0000ec75 	.word	0x0000ec75
    ee00:	000003e7 	.word	0x000003e7
    ee04:	0000f53d 	.word	0x0000f53d
    ee08:	0000f649 	.word	0x0000f649
    ee0c:	20001c88 	.word	0x20001c88
    ee10:	0000ea81 	.word	0x0000ea81
    ee14:	200022ac 	.word	0x200022ac
    ee18:	0000c821 	.word	0x0000c821
    ee1c:	20001c86 	.word	0x20001c86

0000ee20 <run_star_demo>:
{
    ee20:	b530      	push	{r4, r5, lr}
    ee22:	b085      	sub	sp, #20
	uint16_t broadcastAddress = 0xFFFF;
    ee24:	2201      	movs	r2, #1
    ee26:	4252      	negs	r2, r2
    ee28:	230e      	movs	r3, #14
    ee2a:	446b      	add	r3, sp
    ee2c:	801a      	strh	r2, [r3, #0]
        P2PTasks();
    ee2e:	4b2b      	ldr	r3, [pc, #172]	; (eedc <run_star_demo+0xbc>)
    ee30:	4798      	blx	r3
        PDS_TaskHandler();
    ee32:	4b2b      	ldr	r3, [pc, #172]	; (eee0 <run_star_demo+0xc0>)
    ee34:	4798      	blx	r3
		if(sleep_request)
    ee36:	4b2b      	ldr	r3, [pc, #172]	; (eee4 <run_star_demo+0xc4>)
    ee38:	781b      	ldrb	r3, [r3, #0]
    ee3a:	2b00      	cmp	r3, #0
    ee3c:	d011      	beq.n	ee62 <run_star_demo+0x42>
			sleep_request = false;
    ee3e:	2200      	movs	r2, #0
    ee40:	4b28      	ldr	r3, [pc, #160]	; (eee4 <run_star_demo+0xc4>)
    ee42:	701a      	strb	r2, [r3, #0]
			sio2host_disable();
    ee44:	4b28      	ldr	r3, [pc, #160]	; (eee8 <run_star_demo+0xc8>)
    ee46:	4798      	blx	r3
			MiMAC_PowerState(POWER_STATE_DEEP_SLEEP);
    ee48:	2000      	movs	r0, #0
    ee4a:	4b28      	ldr	r3, [pc, #160]	; (eeec <run_star_demo+0xcc>)
    ee4c:	4798      	blx	r3
			led_indicate_sleep();
    ee4e:	4b28      	ldr	r3, [pc, #160]	; (eef0 <run_star_demo+0xd0>)
    ee50:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    ee52:	4c28      	ldr	r4, [pc, #160]	; (eef4 <run_star_demo+0xd4>)
    ee54:	2580      	movs	r5, #128	; 0x80
    ee56:	052d      	lsls	r5, r5, #20
    ee58:	61a5      	str	r5, [r4, #24]
			sleepMgr_sleepDirectly();
    ee5a:	4b27      	ldr	r3, [pc, #156]	; (eef8 <run_star_demo+0xd8>)
    ee5c:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    ee5e:	6165      	str	r5, [r4, #20]
    ee60:	e7fe      	b.n	ee60 <run_star_demo+0x40>
		if(Total_Connections() && !temp_report_disabled)
    ee62:	4b26      	ldr	r3, [pc, #152]	; (eefc <run_star_demo+0xdc>)
    ee64:	4798      	blx	r3
    ee66:	2800      	cmp	r0, #0
    ee68:	d005      	beq.n	ee76 <run_star_demo+0x56>
    ee6a:	4b25      	ldr	r3, [pc, #148]	; (ef00 <run_star_demo+0xe0>)
    ee6c:	781b      	ldrb	r3, [r3, #0]
    ee6e:	2b00      	cmp	r3, #0
    ee70:	d101      	bne.n	ee76 <run_star_demo+0x56>
			temperature_send();
    ee72:	4b24      	ldr	r3, [pc, #144]	; (ef04 <run_star_demo+0xe4>)
    ee74:	4798      	blx	r3
		if(join_retry)
    ee76:	4b24      	ldr	r3, [pc, #144]	; (ef08 <run_star_demo+0xe8>)
    ee78:	781b      	ldrb	r3, [r3, #0]
    ee7a:	2b00      	cmp	r3, #0
    ee7c:	d105      	bne.n	ee8a <run_star_demo+0x6a>
            PressedButton = ButtonPressed();
    ee7e:	4b23      	ldr	r3, [pc, #140]	; (ef0c <run_star_demo+0xec>)
    ee80:	4798      	blx	r3
            if ( PressedButton == 1 )
    ee82:	2801      	cmp	r0, #1
    ee84:	d01e      	beq.n	eec4 <run_star_demo+0xa4>
}
    ee86:	b005      	add	sp, #20
    ee88:	bd30      	pop	{r4, r5, pc}
			t2b.Val = MiWi_TickGet();
    ee8a:	4b21      	ldr	r3, [pc, #132]	; (ef10 <run_star_demo+0xf0>)
    ee8c:	4798      	blx	r3
    ee8e:	4b21      	ldr	r3, [pc, #132]	; (ef14 <run_star_demo+0xf4>)
    ee90:	6018      	str	r0, [r3, #0]
			if(MiWi_TickGetDiff(t2b, t1b) > CONNECTION_RETRY_IN_APP*ONE_SECOND)
    ee92:	4b21      	ldr	r3, [pc, #132]	; (ef18 <run_star_demo+0xf8>)
    ee94:	6819      	ldr	r1, [r3, #0]
    ee96:	4b21      	ldr	r3, [pc, #132]	; (ef1c <run_star_demo+0xfc>)
    ee98:	4798      	blx	r3
    ee9a:	4b21      	ldr	r3, [pc, #132]	; (ef20 <run_star_demo+0x100>)
    ee9c:	4298      	cmp	r0, r3
    ee9e:	d9ee      	bls.n	ee7e <run_star_demo+0x5e>
				join_retry = false;
    eea0:	2200      	movs	r2, #0
    eea2:	4b19      	ldr	r3, [pc, #100]	; (ef08 <run_star_demo+0xe8>)
    eea4:	701a      	strb	r2, [r3, #0]
				MiApp_EstablishConnection(myChannel, 2, (uint8_t*)&broadcastAddress, 0, Connection_Confirm);
    eea6:	4b1f      	ldr	r3, [pc, #124]	; (ef24 <run_star_demo+0x104>)
    eea8:	7818      	ldrb	r0, [r3, #0]
    eeaa:	4b1f      	ldr	r3, [pc, #124]	; (ef28 <run_star_demo+0x108>)
    eeac:	9300      	str	r3, [sp, #0]
    eeae:	2300      	movs	r3, #0
    eeb0:	320e      	adds	r2, #14
    eeb2:	446a      	add	r2, sp
    eeb4:	2102      	movs	r1, #2
    eeb6:	4c1d      	ldr	r4, [pc, #116]	; (ef2c <run_star_demo+0x10c>)
    eeb8:	47a0      	blx	r4
				t1b.Val = MiWi_TickGet();
    eeba:	4b15      	ldr	r3, [pc, #84]	; (ef10 <run_star_demo+0xf0>)
    eebc:	4798      	blx	r3
    eebe:	4b16      	ldr	r3, [pc, #88]	; (ef18 <run_star_demo+0xf8>)
    eec0:	6018      	str	r0, [r3, #0]
    eec2:	e7dc      	b.n	ee7e <run_star_demo+0x5e>
				if(temp_report_disabled)
    eec4:	4b0e      	ldr	r3, [pc, #56]	; (ef00 <run_star_demo+0xe0>)
    eec6:	781b      	ldrb	r3, [r3, #0]
    eec8:	2b00      	cmp	r3, #0
    eeca:	d003      	beq.n	eed4 <run_star_demo+0xb4>
					temp_report_disabled = false;
    eecc:	2200      	movs	r2, #0
    eece:	4b0c      	ldr	r3, [pc, #48]	; (ef00 <run_star_demo+0xe0>)
    eed0:	701a      	strb	r2, [r3, #0]
    eed2:	e7d8      	b.n	ee86 <run_star_demo+0x66>
					temp_report_disabled = true;
    eed4:	2201      	movs	r2, #1
    eed6:	4b0a      	ldr	r3, [pc, #40]	; (ef00 <run_star_demo+0xe0>)
    eed8:	701a      	strb	r2, [r3, #0]
}
    eeda:	e7d4      	b.n	ee86 <run_star_demo+0x66>
    eedc:	0000ca5d 	.word	0x0000ca5d
    eee0:	0000a90d 	.word	0x0000a90d
    eee4:	2000221d 	.word	0x2000221d
    eee8:	00008f19 	.word	0x00008f19
    eeec:	0000aebd 	.word	0x0000aebd
    eef0:	0000eab9 	.word	0x0000eab9
    eef4:	40002800 	.word	0x40002800
    eef8:	0000aa25 	.word	0x0000aa25
    eefc:	0000c115 	.word	0x0000c115
    ef00:	2000220f 	.word	0x2000220f
    ef04:	0000ecb5 	.word	0x0000ecb5
    ef08:	20001c87 	.word	0x20001c87
    ef0c:	0000e905 	.word	0x0000e905
    ef10:	0000d881 	.word	0x0000d881
    ef14:	20002214 	.word	0x20002214
    ef18:	20002208 	.word	0x20002208
    ef1c:	0000d8d1 	.word	0x0000d8d1
    ef20:	01312d00 	.word	0x01312d00
    ef24:	20000030 	.word	0x20000030
    ef28:	0000f2b1 	.word	0x0000f2b1
    ef2c:	0000c455 	.word	0x0000c455

0000ef30 <start_join_retry>:

void start_join_retry(void)
{
    ef30:	b510      	push	{r4, lr}
	join_retry = true;
    ef32:	2201      	movs	r2, #1
    ef34:	4b03      	ldr	r3, [pc, #12]	; (ef44 <start_join_retry+0x14>)
    ef36:	701a      	strb	r2, [r3, #0]
	t1b.Val = MiWi_TickGet();
    ef38:	4b03      	ldr	r3, [pc, #12]	; (ef48 <start_join_retry+0x18>)
    ef3a:	4798      	blx	r3
    ef3c:	4b03      	ldr	r3, [pc, #12]	; (ef4c <start_join_retry+0x1c>)
    ef3e:	6018      	str	r0, [r3, #0]
}
    ef40:	bd10      	pop	{r4, pc}
    ef42:	46c0      	nop			; (mov r8, r8)
    ef44:	20001c87 	.word	0x20001c87
    ef48:	0000d881 	.word	0x0000d881
    ef4c:	20002208 	.word	0x20002208

0000ef50 <EstablishConfirm>:
* Overview: callback function called upon MiAPP_EstConnection
            when connection is lost
* Parameter: status of the completed operation
********************************************************************/
static void EstablishConfirm(miwi_status_t status)
{
    ef50:	b510      	push	{r4, lr}
    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    ef52:	2800      	cmp	r0, #0
    ef54:	d001      	beq.n	ef5a <EstablishConfirm+0xa>
    ef56:	2806      	cmp	r0, #6
    ef58:	d102      	bne.n	ef60 <EstablishConfirm+0x10>
    {
        printf("Reconnected\n\r");
    ef5a:	4802      	ldr	r0, [pc, #8]	; (ef64 <EstablishConfirm+0x14>)
    ef5c:	4b02      	ldr	r3, [pc, #8]	; (ef68 <EstablishConfirm+0x18>)
    ef5e:	4798      	blx	r3
    }
}
    ef60:	bd10      	pop	{r4, pc}
    ef62:	46c0      	nop			; (mov r8, r8)
    ef64:	00013d84 	.word	0x00013d84
    ef68:	000123f1 	.word	0x000123f1

0000ef6c <appLinkFailureCallback>:
* Function: static void appLinkFailureCallback(void)
*
* Overview: callback function called upon when connection is lost
********************************************************************/
static void appLinkFailureCallback(void)
{
    ef6c:	b510      	push	{r4, lr}
    ef6e:	b084      	sub	sp, #16
    uint16_t broadcastAddr = 0xFFFF;
    ef70:	220e      	movs	r2, #14
    ef72:	446a      	add	r2, sp
    ef74:	2301      	movs	r3, #1
    ef76:	425b      	negs	r3, r3
    ef78:	8013      	strh	r3, [r2, #0]
    MiApp_EstablishConnection(myChannel, 2, (uint8_t*)&broadcastAddr, 0, EstablishConfirm);
    ef7a:	4b05      	ldr	r3, [pc, #20]	; (ef90 <appLinkFailureCallback+0x24>)
    ef7c:	7818      	ldrb	r0, [r3, #0]
    ef7e:	4b05      	ldr	r3, [pc, #20]	; (ef94 <appLinkFailureCallback+0x28>)
    ef80:	9300      	str	r3, [sp, #0]
    ef82:	2300      	movs	r3, #0
    ef84:	2102      	movs	r1, #2
    ef86:	4c04      	ldr	r4, [pc, #16]	; (ef98 <appLinkFailureCallback+0x2c>)
    ef88:	47a0      	blx	r4
}
    ef8a:	b004      	add	sp, #16
    ef8c:	bd10      	pop	{r4, pc}
    ef8e:	46c0      	nop			; (mov r8, r8)
    ef90:	20000030 	.word	0x20000030
    ef94:	0000ef51 	.word	0x0000ef51
    ef98:	0000c455 	.word	0x0000c455

0000ef9c <freezer_feature>:
{
    ef9c:	b570      	push	{r4, r5, r6, lr}
    tick1.Val = MiWi_TickGet();
    ef9e:	4c0a      	ldr	r4, [pc, #40]	; (efc8 <freezer_feature+0x2c>)
    efa0:	47a0      	blx	r4
    efa2:	0005      	movs	r5, r0
        tick2.Val = MiWi_TickGet();
    efa4:	47a0      	blx	r4
        if(MiWi_TickGetDiff(tick2, tick1) > (ONE_SECOND * 4))
    efa6:	0029      	movs	r1, r5
    efa8:	4b08      	ldr	r3, [pc, #32]	; (efcc <freezer_feature+0x30>)
    efaa:	4798      	blx	r3
    efac:	4a08      	ldr	r2, [pc, #32]	; (efd0 <freezer_feature+0x34>)
    return false;
    efae:	2300      	movs	r3, #0
        if(MiWi_TickGetDiff(tick2, tick1) > (ONE_SECOND * 4))
    efb0:	4290      	cmp	r0, r2
    efb2:	d901      	bls.n	efb8 <freezer_feature+0x1c>
}
    efb4:	0018      	movs	r0, r3
    efb6:	bd70      	pop	{r4, r5, r6, pc}
        switch_val = ButtonPressed ();
    efb8:	4b06      	ldr	r3, [pc, #24]	; (efd4 <freezer_feature+0x38>)
    efba:	4798      	blx	r3
        if(switch_val == 1)
    efbc:	3801      	subs	r0, #1
    efbe:	4243      	negs	r3, r0
    efc0:	4143      	adcs	r3, r0
    efc2:	b2db      	uxtb	r3, r3
    efc4:	e7f6      	b.n	efb4 <freezer_feature+0x18>
    efc6:	46c0      	nop			; (mov r8, r8)
    efc8:	0000d881 	.word	0x0000d881
    efcc:	0000d8d1 	.word	0x0000d8d1
    efd0:	003d0900 	.word	0x003d0900
    efd4:	0000e905 	.word	0x0000e905

0000efd8 <Initialize_Demo>:
*
* Overview: Initializes the demo by initializing protocol, required
            components and initiates connection
********************************************************************/
bool Initialize_Demo(bool freezer_enable)
{
    efd8:	b570      	push	{r4, r5, r6, lr}
    efda:	b086      	sub	sp, #24
    efdc:	0004      	movs	r4, r0
    uint16_t broadcastAddr = 0xFFFF;
    efde:	2201      	movs	r2, #1
    efe0:	4252      	negs	r2, r2
    efe2:	2316      	movs	r3, #22
    efe4:	446b      	add	r3, sp
    efe6:	801a      	strh	r2, [r3, #0]

    /* Subscribe for data indication */
    MiApp_SubscribeDataIndicationCallback(ReceivedDataIndication);
    efe8:	4836      	ldr	r0, [pc, #216]	; (f0c4 <Initialize_Demo+0xec>)
    efea:	4b37      	ldr	r3, [pc, #220]	; (f0c8 <Initialize_Demo+0xf0>)
    efec:	4798      	blx	r3
    MiApp_SubscribeLinkFailureCallback(appLinkFailureCallback);
    efee:	4837      	ldr	r0, [pc, #220]	; (f0cc <Initialize_Demo+0xf4>)
    eff0:	4b37      	ldr	r3, [pc, #220]	; (f0d0 <Initialize_Demo+0xf8>)
    eff2:	4798      	blx	r3
    /* Sleep manager initialization */
    sleepMgr_init();
#endif

    /* Update NetworkFreezerRestore parameter whether to restore from network freezer or not */
    defaultParamsRomOrRam.networkFreezerRestore = freezer_enable;
    eff4:	4837      	ldr	r0, [pc, #220]	; (f0d4 <Initialize_Demo+0xfc>)
    eff6:	7304      	strb	r4, [r0, #12]

    /* Initialize the P2P and Star Protocol */
    if (MiApp_ProtocolInit(&defaultParamsRomOrRam, &defaultParamsRamOnly) == RECONNECTED)
    eff8:	4937      	ldr	r1, [pc, #220]	; (f0d8 <Initialize_Demo+0x100>)
    effa:	4b38      	ldr	r3, [pc, #224]	; (f0dc <Initialize_Demo+0x104>)
    effc:	4798      	blx	r3
    effe:	280f      	cmp	r0, #15
    f000:	d044      	beq.n	f08c <Initialize_Demo+0xb4>
    srand(PHY_RandomReq());
    f002:	4b37      	ldr	r3, [pc, #220]	; (f0e0 <Initialize_Demo+0x108>)
    f004:	4798      	blx	r3
    f006:	4b37      	ldr	r3, [pc, #220]	; (f0e4 <Initialize_Demo+0x10c>)
    f008:	4798      	blx	r3
    memset((uint8_t *)&invalidIEEEAddr, 0x00, LONG_ADDR_LEN);
    f00a:	2200      	movs	r2, #0
    f00c:	2300      	movs	r3, #0
    f00e:	9202      	str	r2, [sp, #8]
    f010:	9303      	str	r3, [sp, #12]
    if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    f012:	4e35      	ldr	r6, [pc, #212]	; (f0e8 <Initialize_Demo+0x110>)
    f014:	3208      	adds	r2, #8
    f016:	0031      	movs	r1, r6
    f018:	a802      	add	r0, sp, #8
    f01a:	4d34      	ldr	r5, [pc, #208]	; (f0ec <Initialize_Demo+0x114>)
    f01c:	47a8      	blx	r5
    f01e:	0004      	movs	r4, r0
    memset((uint8_t *)&invalidIEEEAddr, 0xFF, LONG_ADDR_LEN);
    f020:	2201      	movs	r2, #1
    f022:	4252      	negs	r2, r2
    f024:	17d3      	asrs	r3, r2, #31
    f026:	9202      	str	r2, [sp, #8]
    f028:	9303      	str	r3, [sp, #12]
    if (0 == memcmp((uint8_t *)&invalidIEEEAddr, (uint8_t *)&myLongAddress, LONG_ADDR_LEN))
    f02a:	3209      	adds	r2, #9
    f02c:	0031      	movs	r1, r6
    f02e:	a802      	add	r0, sp, #8
    f030:	47a8      	blx	r5
    f032:	2800      	cmp	r0, #0
    f034:	d001      	beq.n	f03a <Initialize_Demo+0x62>
    if (invalidIEEEAddrFlag)
    f036:	2c00      	cmp	r4, #0
    f038:	d108      	bne.n	f04c <Initialize_Demo+0x74>
    f03a:	4c2b      	ldr	r4, [pc, #172]	; (f0e8 <Initialize_Demo+0x110>)
    f03c:	0026      	movs	r6, r4
    f03e:	3608      	adds	r6, #8
            *peui64++ = (uint8_t)rand();
    f040:	4d2b      	ldr	r5, [pc, #172]	; (f0f0 <Initialize_Demo+0x118>)
    f042:	47a8      	blx	r5
    f044:	7020      	strb	r0, [r4, #0]
    f046:	3401      	adds	r4, #1
        for(uint8_t i = 0; i < MY_ADDRESS_LENGTH; i++)
    f048:	42b4      	cmp	r4, r6
    f04a:	d1fa      	bne.n	f042 <Initialize_Demo+0x6a>
    PHY_SetIEEEAddr((uint8_t *)&myLongAddress);
    f04c:	4826      	ldr	r0, [pc, #152]	; (f0e8 <Initialize_Demo+0x110>)
    f04e:	4b29      	ldr	r3, [pc, #164]	; (f0f4 <Initialize_Demo+0x11c>)
    f050:	4798      	blx	r3
    /* Unable to boot from the Network Freezer parameters, so initiate connection */
    /* Check Valid address is found , else update with random */
    longAddressValidationAndUpdation();

    /* Enable all kinds of connection */
    MiApp_ConnectionMode(ENABLE_ALL_CONN);
    f052:	2000      	movs	r0, #0
    f054:	4b28      	ldr	r3, [pc, #160]	; (f0f8 <Initialize_Demo+0x120>)
    f056:	4798      	blx	r3

    // Set default channel
    if( MiApp_Set(CHANNEL, &myChannel) == false )
    f058:	4928      	ldr	r1, [pc, #160]	; (f0fc <Initialize_Demo+0x124>)
    f05a:	2000      	movs	r0, #0
    f05c:	4b28      	ldr	r3, [pc, #160]	; (f100 <Initialize_Demo+0x128>)
    f05e:	4798      	blx	r3
    f060:	1e04      	subs	r4, r0, #0
    f062:	d02a      	beq.n	f0ba <Initialize_Demo+0xe2>
    {
        DemoOutput_ChannelError(myChannel);
        return false;
    }

    DemoOutput_Channel(myChannel, 0);
    f064:	4c25      	ldr	r4, [pc, #148]	; (f0fc <Initialize_Demo+0x124>)
    f066:	7820      	ldrb	r0, [r4, #0]
    f068:	2100      	movs	r1, #0
    f06a:	4b26      	ldr	r3, [pc, #152]	; (f104 <Initialize_Demo+0x12c>)
    f06c:	4798      	blx	r3

    /* Try to establish a new connection with peer device by broadcast Connection Request */
    return MiApp_EstablishConnection(myChannel, 2, (uint8_t*)&broadcastAddr, 0, Connection_Confirm);
    f06e:	7820      	ldrb	r0, [r4, #0]
    f070:	4b25      	ldr	r3, [pc, #148]	; (f108 <Initialize_Demo+0x130>)
    f072:	9300      	str	r3, [sp, #0]
    f074:	2300      	movs	r3, #0
    f076:	2216      	movs	r2, #22
    f078:	446a      	add	r2, sp
    f07a:	2102      	movs	r1, #2
    f07c:	4c23      	ldr	r4, [pc, #140]	; (f10c <Initialize_Demo+0x134>)
    f07e:	47a0      	blx	r4
    f080:	1e44      	subs	r4, r0, #1
    f082:	41a0      	sbcs	r0, r4
    f084:	b2c4      	uxtb	r4, r0
}
    f086:	0020      	movs	r0, r4
    f088:	b006      	add	sp, #24
    f08a:	bd70      	pop	{r4, r5, r6, pc}
        printf("\r\nPANID:");
    f08c:	4820      	ldr	r0, [pc, #128]	; (f110 <Initialize_Demo+0x138>)
    f08e:	4c21      	ldr	r4, [pc, #132]	; (f114 <Initialize_Demo+0x13c>)
    f090:	47a0      	blx	r4
        printf("%x",myPANID.v[1]);
    f092:	4e21      	ldr	r6, [pc, #132]	; (f118 <Initialize_Demo+0x140>)
    f094:	7871      	ldrb	r1, [r6, #1]
    f096:	4d21      	ldr	r5, [pc, #132]	; (f11c <Initialize_Demo+0x144>)
    f098:	0028      	movs	r0, r5
    f09a:	47a0      	blx	r4
        printf("%x",myPANID.v[0]);
    f09c:	7831      	ldrb	r1, [r6, #0]
    f09e:	0028      	movs	r0, r5
    f0a0:	47a0      	blx	r4
        printf(" Channel:");
    f0a2:	481f      	ldr	r0, [pc, #124]	; (f120 <Initialize_Demo+0x148>)
    f0a4:	47a0      	blx	r4
        printf("%d",currentChannel);
    f0a6:	4b1f      	ldr	r3, [pc, #124]	; (f124 <Initialize_Demo+0x14c>)
    f0a8:	7819      	ldrb	r1, [r3, #0]
    f0aa:	481f      	ldr	r0, [pc, #124]	; (f128 <Initialize_Demo+0x150>)
    f0ac:	47a0      	blx	r4
        STAR_DEMO_OPTIONS_MESSAGE (role);
    f0ae:	4b1f      	ldr	r3, [pc, #124]	; (f12c <Initialize_Demo+0x154>)
    f0b0:	7818      	ldrb	r0, [r3, #0]
    f0b2:	4b1f      	ldr	r3, [pc, #124]	; (f130 <Initialize_Demo+0x158>)
    f0b4:	4798      	blx	r3
        return true;
    f0b6:	2401      	movs	r4, #1
    f0b8:	e7e5      	b.n	f086 <Initialize_Demo+0xae>
        DemoOutput_ChannelError(myChannel);
    f0ba:	4b10      	ldr	r3, [pc, #64]	; (f0fc <Initialize_Demo+0x124>)
    f0bc:	7818      	ldrb	r0, [r3, #0]
    f0be:	4b1d      	ldr	r3, [pc, #116]	; (f134 <Initialize_Demo+0x15c>)
    f0c0:	4798      	blx	r3
        return false;
    f0c2:	e7e0      	b.n	f086 <Initialize_Demo+0xae>
    f0c4:	0000ebe5 	.word	0x0000ebe5
    f0c8:	0000c101 	.word	0x0000c101
    f0cc:	0000ef6d 	.word	0x0000ef6d
    f0d0:	0000d3e1 	.word	0x0000d3e1
    f0d4:	20000020 	.word	0x20000020
    f0d8:	20001c8c 	.word	0x20001c8c
    f0dc:	0000bee5 	.word	0x0000bee5
    f0e0:	0000bb51 	.word	0x0000bb51
    f0e4:	000124f9 	.word	0x000124f9
    f0e8:	20000010 	.word	0x20000010
    f0ec:	00011e19 	.word	0x00011e19
    f0f0:	00012555 	.word	0x00012555
    f0f4:	0000bbf1 	.word	0x0000bbf1
    f0f8:	0000c0d1 	.word	0x0000c0d1
    f0fc:	20000030 	.word	0x20000030
    f100:	0000beb5 	.word	0x0000beb5
    f104:	0000e7a1 	.word	0x0000e7a1
    f108:	0000f2b1 	.word	0x0000f2b1
    f10c:	0000c455 	.word	0x0000c455
    f110:	00013d94 	.word	0x00013d94
    f114:	000123f1 	.word	0x000123f1
    f118:	20002044 	.word	0x20002044
    f11c:	00013c6c 	.word	0x00013c6c
    f120:	00013da0 	.word	0x00013da0
    f124:	2000000d 	.word	0x2000000d
    f128:	00013a28 	.word	0x00013a28
    f12c:	20002124 	.word	0x20002124
    f130:	0000e901 	.word	0x0000e901
    f134:	0000e8d5 	.word	0x0000e8d5

0000f138 <Run_Demo>:
* Function: void Run_Demo(void)
*
* Overview: runs the demo based on user input
********************************************************************/
void Run_Demo(void)
{
    f138:	b510      	push	{r4, lr}
    P2PTasks();
    f13a:	4b03      	ldr	r3, [pc, #12]	; (f148 <Run_Demo+0x10>)
    f13c:	4798      	blx	r3
#if defined(ENABLE_NETWORK_FREEZER)
#if PDS_ENABLE_WEAR_LEVELING
    PDS_TaskHandler();
    f13e:	4b03      	ldr	r3, [pc, #12]	; (f14c <Run_Demo+0x14>)
    f140:	4798      	blx	r3
#endif
#endif
    run_star_demo();
    f142:	4b03      	ldr	r3, [pc, #12]	; (f150 <Run_Demo+0x18>)
    f144:	4798      	blx	r3
}
    f146:	bd10      	pop	{r4, pc}
    f148:	0000ca5d 	.word	0x0000ca5d
    f14c:	0000a90d 	.word	0x0000a90d
    f150:	0000ee21 	.word	0x0000ee21

0000f154 <DumpConnection>:
    * Side Effects:    The content of the connection pointed by the index 
    *                  of the P2P Connection Entry will be printed out
    *
    ********************************************************************/
void DumpConnection(INPUT uint8_t index)
{
    f154:	b5f0      	push	{r4, r5, r6, r7, lr}
    f156:	46de      	mov	lr, fp
    f158:	4657      	mov	r7, sl
    f15a:	464e      	mov	r6, r9
    f15c:	b5c0      	push	{r6, r7, lr}
    f15e:	0005      	movs	r5, r0
    uint8_t i, j;
        
    if( index > CONNECTION_SIZE )
    f160:	2814      	cmp	r0, #20
    f162:	d80f      	bhi.n	f184 <DumpConnection+0x30>
        #endif
        printf("  Channel: ");
        printf("%d",currentChannel);
    }
            
    if( index < CONNECTION_SIZE )
    f164:	2d13      	cmp	r5, #19
    f166:	d84d      	bhi.n	f204 <DumpConnection+0xb0>
    {
        printf("\r\nConnection \tPeerLongAddress \tPeerInfo\r\n");  
    f168:	483d      	ldr	r0, [pc, #244]	; (f260 <DumpConnection+0x10c>)
    f16a:	4b3e      	ldr	r3, [pc, #248]	; (f264 <DumpConnection+0x110>)
    f16c:	4798      	blx	r3
        if( connectionTable[index].status.bits.isValid )
    f16e:	012a      	lsls	r2, r5, #4
    f170:	4b3d      	ldr	r3, [pc, #244]	; (f268 <DumpConnection+0x114>)
    f172:	189b      	adds	r3, r3, r2
    f174:	7b1b      	ldrb	r3, [r3, #12]
    f176:	09db      	lsrs	r3, r3, #7
    f178:	d123      	bne.n	f1c2 <DumpConnection+0x6e>
#endif
                printf("\r\n");
            }  
        }
    }
}
    f17a:	bc1c      	pop	{r2, r3, r4}
    f17c:	4691      	mov	r9, r2
    f17e:	469a      	mov	sl, r3
    f180:	46a3      	mov	fp, r4
    f182:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("\r\n\r\nMy Address: 0x");
    f184:	4839      	ldr	r0, [pc, #228]	; (f26c <DumpConnection+0x118>)
    f186:	4b3a      	ldr	r3, [pc, #232]	; (f270 <DumpConnection+0x11c>)
    f188:	4798      	blx	r3
    f18a:	4c3a      	ldr	r4, [pc, #232]	; (f274 <DumpConnection+0x120>)
    f18c:	0026      	movs	r6, r4
    f18e:	3e08      	subs	r6, #8
            printf("%02x",myLongAddress[MY_ADDRESS_LENGTH-1-i]);
    f190:	4f37      	ldr	r7, [pc, #220]	; (f270 <DumpConnection+0x11c>)
    f192:	79e1      	ldrb	r1, [r4, #7]
    f194:	4838      	ldr	r0, [pc, #224]	; (f278 <DumpConnection+0x124>)
    f196:	47b8      	blx	r7
    f198:	3c01      	subs	r4, #1
        for(i = 0; i < MY_ADDRESS_LENGTH; i++)
    f19a:	42b4      	cmp	r4, r6
    f19c:	d1f9      	bne.n	f192 <DumpConnection+0x3e>
            printf("  PANID: 0x");
    f19e:	4837      	ldr	r0, [pc, #220]	; (f27c <DumpConnection+0x128>)
    f1a0:	4c33      	ldr	r4, [pc, #204]	; (f270 <DumpConnection+0x11c>)
    f1a2:	47a0      	blx	r4
            printf("%x",myPANID.v[1]);
    f1a4:	4f36      	ldr	r7, [pc, #216]	; (f280 <DumpConnection+0x12c>)
    f1a6:	7879      	ldrb	r1, [r7, #1]
    f1a8:	4e36      	ldr	r6, [pc, #216]	; (f284 <DumpConnection+0x130>)
    f1aa:	0030      	movs	r0, r6
    f1ac:	47a0      	blx	r4
            printf("%x",myPANID.v[0]);
    f1ae:	7839      	ldrb	r1, [r7, #0]
    f1b0:	0030      	movs	r0, r6
    f1b2:	47a0      	blx	r4
        printf("  Channel: ");
    f1b4:	4834      	ldr	r0, [pc, #208]	; (f288 <DumpConnection+0x134>)
    f1b6:	47a0      	blx	r4
        printf("%d",currentChannel);
    f1b8:	4b34      	ldr	r3, [pc, #208]	; (f28c <DumpConnection+0x138>)
    f1ba:	7819      	ldrb	r1, [r3, #0]
    f1bc:	4834      	ldr	r0, [pc, #208]	; (f290 <DumpConnection+0x13c>)
    f1be:	47a0      	blx	r4
    f1c0:	e7d0      	b.n	f164 <DumpConnection+0x10>
            printf("%02x",index);
    f1c2:	0029      	movs	r1, r5
    f1c4:	482c      	ldr	r0, [pc, #176]	; (f278 <DumpConnection+0x124>)
    f1c6:	4c2a      	ldr	r4, [pc, #168]	; (f270 <DumpConnection+0x11c>)
    f1c8:	47a0      	blx	r4
            printf("\t\t\t");
    f1ca:	4832      	ldr	r0, [pc, #200]	; (f294 <DumpConnection+0x140>)
    f1cc:	47a0      	blx	r4
    f1ce:	012f      	lsls	r7, r5, #4
    f1d0:	003c      	movs	r4, r7
    f1d2:	340b      	adds	r4, #11
    f1d4:	4b24      	ldr	r3, [pc, #144]	; (f268 <DumpConnection+0x114>)
    f1d6:	18e4      	adds	r4, r4, r3
    f1d8:	3703      	adds	r7, #3
    f1da:	18ff      	adds	r7, r7, r3
                    printf("%02x", connectionTable[index].Address[MY_ADDRESS_LENGTH-1-i] );
    f1dc:	4e24      	ldr	r6, [pc, #144]	; (f270 <DumpConnection+0x11c>)
    f1de:	7821      	ldrb	r1, [r4, #0]
    f1e0:	4825      	ldr	r0, [pc, #148]	; (f278 <DumpConnection+0x124>)
    f1e2:	47b0      	blx	r6
    f1e4:	3c01      	subs	r4, #1
            for(i = 0; i < 8; i++)
    f1e6:	42bc      	cmp	r4, r7
    f1e8:	d1f9      	bne.n	f1de <DumpConnection+0x8a>
            printf("/t");
    f1ea:	482b      	ldr	r0, [pc, #172]	; (f298 <DumpConnection+0x144>)
    f1ec:	4c20      	ldr	r4, [pc, #128]	; (f270 <DumpConnection+0x11c>)
    f1ee:	47a0      	blx	r4
                    printf("%02x", connectionTable[index].PeerInfo[i] );
    f1f0:	012d      	lsls	r5, r5, #4
    f1f2:	4b1d      	ldr	r3, [pc, #116]	; (f268 <DumpConnection+0x114>)
    f1f4:	195d      	adds	r5, r3, r5
    f1f6:	7b69      	ldrb	r1, [r5, #13]
    f1f8:	481f      	ldr	r0, [pc, #124]	; (f278 <DumpConnection+0x124>)
    f1fa:	47a0      	blx	r4
            printf("\r\n");
    f1fc:	4827      	ldr	r0, [pc, #156]	; (f29c <DumpConnection+0x148>)
    f1fe:	4b19      	ldr	r3, [pc, #100]	; (f264 <DumpConnection+0x110>)
    f200:	4798      	blx	r3
    f202:	e7ba      	b.n	f17a <DumpConnection+0x26>
        printf("\r\n\r\nConnection     PeerLongAddress     PeerInfo\r\n");  
    f204:	4826      	ldr	r0, [pc, #152]	; (f2a0 <DumpConnection+0x14c>)
    f206:	4b17      	ldr	r3, [pc, #92]	; (f264 <DumpConnection+0x110>)
    f208:	4798      	blx	r3
    f20a:	4e26      	ldr	r6, [pc, #152]	; (f2a4 <DumpConnection+0x150>)
    f20c:	2500      	movs	r5, #0
            if( connectionTable[i].status.bits.isValid )
    f20e:	4b16      	ldr	r3, [pc, #88]	; (f268 <DumpConnection+0x114>)
    f210:	469a      	mov	sl, r3
                printf("%02x",i);
    f212:	4b17      	ldr	r3, [pc, #92]	; (f270 <DumpConnection+0x11c>)
    f214:	469b      	mov	fp, r3
    f216:	e00c      	b.n	f232 <DumpConnection+0xde>
                printf("    ");
    f218:	4823      	ldr	r0, [pc, #140]	; (f2a8 <DumpConnection+0x154>)
    f21a:	4c15      	ldr	r4, [pc, #84]	; (f270 <DumpConnection+0x11c>)
    f21c:	47a0      	blx	r4
                        printf("%02x", connectionTable[i].PeerInfo[j] );
    f21e:	78b1      	ldrb	r1, [r6, #2]
    f220:	4815      	ldr	r0, [pc, #84]	; (f278 <DumpConnection+0x124>)
    f222:	47a0      	blx	r4
                printf("\r\n");
    f224:	481d      	ldr	r0, [pc, #116]	; (f29c <DumpConnection+0x148>)
    f226:	4b0f      	ldr	r3, [pc, #60]	; (f264 <DumpConnection+0x110>)
    f228:	4798      	blx	r3
    f22a:	3501      	adds	r5, #1
    f22c:	3610      	adds	r6, #16
        for(i = 0; i < CONNECTION_SIZE; i++)
    f22e:	2d14      	cmp	r5, #20
    f230:	d0a3      	beq.n	f17a <DumpConnection+0x26>
            if( connectionTable[i].status.bits.isValid )
    f232:	012b      	lsls	r3, r5, #4
    f234:	4453      	add	r3, sl
    f236:	7b1b      	ldrb	r3, [r3, #12]
    f238:	09db      	lsrs	r3, r3, #7
    f23a:	d0f6      	beq.n	f22a <DumpConnection+0xd6>
                printf("%02x",i);
    f23c:	0029      	movs	r1, r5
    f23e:	480e      	ldr	r0, [pc, #56]	; (f278 <DumpConnection+0x124>)
    f240:	47d8      	blx	fp
                printf("             ");
    f242:	481a      	ldr	r0, [pc, #104]	; (f2ac <DumpConnection+0x158>)
    f244:	47d8      	blx	fp
    f246:	2308      	movs	r3, #8
    f248:	425b      	negs	r3, r3
    f24a:	4699      	mov	r9, r3
    f24c:	44b1      	add	r9, r6
    f24e:	0034      	movs	r4, r6
                        printf("%02x", connectionTable[i].Address[MY_ADDRESS_LENGTH-1-j] );
    f250:	4f07      	ldr	r7, [pc, #28]	; (f270 <DumpConnection+0x11c>)
    f252:	7821      	ldrb	r1, [r4, #0]
    f254:	4808      	ldr	r0, [pc, #32]	; (f278 <DumpConnection+0x124>)
    f256:	47b8      	blx	r7
    f258:	3c01      	subs	r4, #1
                for(j = 0; j < 8; j++)
    f25a:	454c      	cmp	r4, r9
    f25c:	d1f9      	bne.n	f252 <DumpConnection+0xfe>
    f25e:	e7db      	b.n	f218 <DumpConnection+0xc4>
    f260:	00013d04 	.word	0x00013d04
    f264:	000124e5 	.word	0x000124e5
    f268:	200022a8 	.word	0x200022a8
    f26c:	00013cd8 	.word	0x00013cd8
    f270:	000123f1 	.word	0x000123f1
    f274:	20000010 	.word	0x20000010
    f278:	00013c5c 	.word	0x00013c5c
    f27c:	00013cec 	.word	0x00013cec
    f280:	20002044 	.word	0x20002044
    f284:	00013c6c 	.word	0x00013c6c
    f288:	00013cf8 	.word	0x00013cf8
    f28c:	2000000d 	.word	0x2000000d
    f290:	00013a28 	.word	0x00013a28
    f294:	00013d30 	.word	0x00013d30
    f298:	00013d34 	.word	0x00013d34
    f29c:	00013d90 	.word	0x00013d90
    f2a0:	00013d38 	.word	0x00013d38
    f2a4:	200022b3 	.word	0x200022b3
    f2a8:	00013d7c 	.word	0x00013d7c
    f2ac:	00013d6c 	.word	0x00013d6c

0000f2b0 <Connection_Confirm>:
{
    f2b0:	b510      	push	{r4, lr}
    if ((SUCCESS == status) || (ALREADY_EXISTS == status))
    f2b2:	2800      	cmp	r0, #0
    f2b4:	d004      	beq.n	f2c0 <Connection_Confirm+0x10>
    f2b6:	2806      	cmp	r0, #6
    f2b8:	d002      	beq.n	f2c0 <Connection_Confirm+0x10>
		start_join_retry();
    f2ba:	4b12      	ldr	r3, [pc, #72]	; (f304 <Connection_Confirm+0x54>)
    f2bc:	4798      	blx	r3
}
    f2be:	e015      	b.n	f2ec <Connection_Confirm+0x3c>
    f2c0:	2280      	movs	r2, #128	; 0x80
    f2c2:	0512      	lsls	r2, r2, #20
    f2c4:	4b10      	ldr	r3, [pc, #64]	; (f308 <Connection_Confirm+0x58>)
    f2c6:	615a      	str	r2, [r3, #20]
        if (role != PAN_COORD)
    f2c8:	4b10      	ldr	r3, [pc, #64]	; (f30c <Connection_Confirm+0x5c>)
    f2ca:	781b      	ldrb	r3, [r3, #0]
    f2cc:	2b01      	cmp	r3, #1
    f2ce:	d00e      	beq.n	f2ee <Connection_Confirm+0x3e>
            DemoOutput_Channel(myChannel, 1);
    f2d0:	4b0f      	ldr	r3, [pc, #60]	; (f310 <Connection_Confirm+0x60>)
    f2d2:	7818      	ldrb	r0, [r3, #0]
    f2d4:	2101      	movs	r1, #1
    f2d6:	4b0f      	ldr	r3, [pc, #60]	; (f314 <Connection_Confirm+0x64>)
    f2d8:	4798      	blx	r3
        DumpConnection(0xFF);
    f2da:	20ff      	movs	r0, #255	; 0xff
    f2dc:	4b0e      	ldr	r3, [pc, #56]	; (f318 <Connection_Confirm+0x68>)
    f2de:	4798      	blx	r3
        STAR_DEMO_OPTIONS_MESSAGE (role);
    f2e0:	4b0a      	ldr	r3, [pc, #40]	; (f30c <Connection_Confirm+0x5c>)
    f2e2:	7818      	ldrb	r0, [r3, #0]
    f2e4:	4b0d      	ldr	r3, [pc, #52]	; (f31c <Connection_Confirm+0x6c>)
    f2e6:	4798      	blx	r3
		temperature_send_start();
    f2e8:	4b0d      	ldr	r3, [pc, #52]	; (f320 <Connection_Confirm+0x70>)
    f2ea:	4798      	blx	r3
}
    f2ec:	bd10      	pop	{r4, pc}
            printf("\r\nStarted Wireless Communication on Channel ");
    f2ee:	480d      	ldr	r0, [pc, #52]	; (f324 <Connection_Confirm+0x74>)
    f2f0:	4c0d      	ldr	r4, [pc, #52]	; (f328 <Connection_Confirm+0x78>)
    f2f2:	47a0      	blx	r4
            printf("%u",currentChannel);
    f2f4:	4b0d      	ldr	r3, [pc, #52]	; (f32c <Connection_Confirm+0x7c>)
    f2f6:	7819      	ldrb	r1, [r3, #0]
    f2f8:	480d      	ldr	r0, [pc, #52]	; (f330 <Connection_Confirm+0x80>)
    f2fa:	47a0      	blx	r4
            printf("\r\n");
    f2fc:	480d      	ldr	r0, [pc, #52]	; (f334 <Connection_Confirm+0x84>)
    f2fe:	4b0e      	ldr	r3, [pc, #56]	; (f338 <Connection_Confirm+0x88>)
    f300:	4798      	blx	r3
    f302:	e7ea      	b.n	f2da <Connection_Confirm+0x2a>
    f304:	0000ef31 	.word	0x0000ef31
    f308:	40002800 	.word	0x40002800
    f30c:	20002124 	.word	0x20002124
    f310:	20000030 	.word	0x20000030
    f314:	0000e7a1 	.word	0x0000e7a1
    f318:	0000f155 	.word	0x0000f155
    f31c:	0000e901 	.word	0x0000e901
    f320:	0000eca1 	.word	0x0000eca1
    f324:	00013ca4 	.word	0x00013ca4
    f328:	000123f1 	.word	0x000123f1
    f32c:	2000000d 	.word	0x2000000d
    f330:	00013cd4 	.word	0x00013cd4
    f334:	00013d90 	.word	0x00013d90
    f338:	000124e5 	.word	0x000124e5

0000f33c <common_tc_read_count>:
    f33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f33e:	4b0d      	ldr	r3, [pc, #52]	; (f374 <common_tc_read_count+0x38>)
    f340:	4798      	blx	r3
    f342:	4b0d      	ldr	r3, [pc, #52]	; (f378 <common_tc_read_count+0x3c>)
    f344:	781b      	ldrb	r3, [r3, #0]
    f346:	2b00      	cmp	r3, #0
    f348:	d00e      	beq.n	f368 <common_tc_read_count+0x2c>
    f34a:	4b0c      	ldr	r3, [pc, #48]	; (f37c <common_tc_read_count+0x40>)
    f34c:	781d      	ldrb	r5, [r3, #0]
    f34e:	4b0a      	ldr	r3, [pc, #40]	; (f378 <common_tc_read_count+0x3c>)
    f350:	781f      	ldrb	r7, [r3, #0]
    f352:	4c0b      	ldr	r4, [pc, #44]	; (f380 <common_tc_read_count+0x44>)
    f354:	1c29      	adds	r1, r5, #0
    f356:	47a0      	blx	r4
    f358:	1c06      	adds	r6, r0, #0
    f35a:	480a      	ldr	r0, [pc, #40]	; (f384 <common_tc_read_count+0x48>)
    f35c:	1c29      	adds	r1, r5, #0
    f35e:	47a0      	blx	r4
    f360:	4378      	muls	r0, r7
    f362:	1830      	adds	r0, r6, r0
    f364:	b280      	uxth	r0, r0
    f366:	e004      	b.n	f372 <common_tc_read_count+0x36>
    f368:	4b04      	ldr	r3, [pc, #16]	; (f37c <common_tc_read_count+0x40>)
    f36a:	7819      	ldrb	r1, [r3, #0]
    f36c:	4b04      	ldr	r3, [pc, #16]	; (f380 <common_tc_read_count+0x44>)
    f36e:	4798      	blx	r3
    f370:	b280      	uxth	r0, r0
    f372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f374:	0000d8f9 	.word	0x0000d8f9
    f378:	20001c90 	.word	0x20001c90
    f37c:	200023e8 	.word	0x200023e8
    f380:	0000f651 	.word	0x0000f651
    f384:	0000ffff 	.word	0x0000ffff

0000f388 <common_tc_delay>:
    f388:	b510      	push	{r4, lr}
    f38a:	1c04      	adds	r4, r0, #0
    f38c:	4b13      	ldr	r3, [pc, #76]	; (f3dc <common_tc_delay+0x54>)
    f38e:	4798      	blx	r3
    f390:	4b13      	ldr	r3, [pc, #76]	; (f3e0 <common_tc_delay+0x58>)
    f392:	781a      	ldrb	r2, [r3, #0]
    f394:	4362      	muls	r2, r4
    f396:	1881      	adds	r1, r0, r2
    f398:	4b12      	ldr	r3, [pc, #72]	; (f3e4 <common_tc_delay+0x5c>)
    f39a:	6059      	str	r1, [r3, #4]
    f39c:	6859      	ldr	r1, [r3, #4]
    f39e:	0c09      	lsrs	r1, r1, #16
    f3a0:	6059      	str	r1, [r3, #4]
    f3a2:	685b      	ldr	r3, [r3, #4]
    f3a4:	2b00      	cmp	r3, #0
    f3a6:	d007      	beq.n	f3b8 <common_tc_delay+0x30>
    f3a8:	4b0e      	ldr	r3, [pc, #56]	; (f3e4 <common_tc_delay+0x5c>)
    f3aa:	6859      	ldr	r1, [r3, #4]
    f3ac:	3201      	adds	r2, #1
    f3ae:	1880      	adds	r0, r0, r2
    f3b0:	8118      	strh	r0, [r3, #8]
    f3b2:	4b0d      	ldr	r3, [pc, #52]	; (f3e8 <common_tc_delay+0x60>)
    f3b4:	4798      	blx	r3
    f3b6:	e004      	b.n	f3c2 <common_tc_delay+0x3a>
    f3b8:	1882      	adds	r2, r0, r2
    f3ba:	4b0a      	ldr	r3, [pc, #40]	; (f3e4 <common_tc_delay+0x5c>)
    f3bc:	811a      	strh	r2, [r3, #8]
    f3be:	4b0b      	ldr	r3, [pc, #44]	; (f3ec <common_tc_delay+0x64>)
    f3c0:	4798      	blx	r3
    f3c2:	4b08      	ldr	r3, [pc, #32]	; (f3e4 <common_tc_delay+0x5c>)
    f3c4:	891b      	ldrh	r3, [r3, #8]
    f3c6:	2b63      	cmp	r3, #99	; 0x63
    f3c8:	d802      	bhi.n	f3d0 <common_tc_delay+0x48>
    f3ca:	3364      	adds	r3, #100	; 0x64
    f3cc:	4a05      	ldr	r2, [pc, #20]	; (f3e4 <common_tc_delay+0x5c>)
    f3ce:	8113      	strh	r3, [r2, #8]
    f3d0:	4b04      	ldr	r3, [pc, #16]	; (f3e4 <common_tc_delay+0x5c>)
    f3d2:	8918      	ldrh	r0, [r3, #8]
    f3d4:	4b06      	ldr	r3, [pc, #24]	; (f3f0 <common_tc_delay+0x68>)
    f3d6:	4798      	blx	r3
    f3d8:	bd10      	pop	{r4, pc}
    f3da:	46c0      	nop			; (mov r8, r8)
    f3dc:	0000d8f9 	.word	0x0000d8f9
    f3e0:	200023e8 	.word	0x200023e8
    f3e4:	20001c90 	.word	0x20001c90
    f3e8:	0000d90d 	.word	0x0000d90d
    f3ec:	0000d921 	.word	0x0000d921
    f3f0:	0000d961 	.word	0x0000d961

0000f3f4 <common_tc_init>:
    f3f4:	b508      	push	{r3, lr}
    f3f6:	2200      	movs	r2, #0
    f3f8:	4b03      	ldr	r3, [pc, #12]	; (f408 <common_tc_init+0x14>)
    f3fa:	701a      	strb	r2, [r3, #0]
    f3fc:	4b03      	ldr	r3, [pc, #12]	; (f40c <common_tc_init+0x18>)
    f3fe:	4798      	blx	r3
    f400:	4b03      	ldr	r3, [pc, #12]	; (f410 <common_tc_init+0x1c>)
    f402:	7018      	strb	r0, [r3, #0]
    f404:	bd08      	pop	{r3, pc}
    f406:	46c0      	nop			; (mov r8, r8)
    f408:	20001c90 	.word	0x20001c90
    f40c:	0000d979 	.word	0x0000d979
    f410:	200023e8 	.word	0x200023e8

0000f414 <tmr_ovf_callback>:
    f414:	b508      	push	{r3, lr}
    f416:	4b0e      	ldr	r3, [pc, #56]	; (f450 <tmr_ovf_callback+0x3c>)
    f418:	685b      	ldr	r3, [r3, #4]
    f41a:	2b00      	cmp	r3, #0
    f41c:	d007      	beq.n	f42e <tmr_ovf_callback+0x1a>
    f41e:	4a0c      	ldr	r2, [pc, #48]	; (f450 <tmr_ovf_callback+0x3c>)
    f420:	6853      	ldr	r3, [r2, #4]
    f422:	3b01      	subs	r3, #1
    f424:	6053      	str	r3, [r2, #4]
    f426:	2b00      	cmp	r3, #0
    f428:	d101      	bne.n	f42e <tmr_ovf_callback+0x1a>
    f42a:	4b0a      	ldr	r3, [pc, #40]	; (f454 <tmr_ovf_callback+0x40>)
    f42c:	4798      	blx	r3
    f42e:	4a08      	ldr	r2, [pc, #32]	; (f450 <tmr_ovf_callback+0x3c>)
    f430:	7813      	ldrb	r3, [r2, #0]
    f432:	3301      	adds	r3, #1
    f434:	b2db      	uxtb	r3, r3
    f436:	7013      	strb	r3, [r2, #0]
    f438:	4a07      	ldr	r2, [pc, #28]	; (f458 <tmr_ovf_callback+0x44>)
    f43a:	7812      	ldrb	r2, [r2, #0]
    f43c:	429a      	cmp	r2, r3
    f43e:	d806      	bhi.n	f44e <tmr_ovf_callback+0x3a>
    f440:	4b03      	ldr	r3, [pc, #12]	; (f450 <tmr_ovf_callback+0x3c>)
    f442:	2200      	movs	r2, #0
    f444:	701a      	strb	r2, [r3, #0]
    f446:	68db      	ldr	r3, [r3, #12]
    f448:	2b00      	cmp	r3, #0
    f44a:	d000      	beq.n	f44e <tmr_ovf_callback+0x3a>
    f44c:	4798      	blx	r3
    f44e:	bd08      	pop	{r3, pc}
    f450:	20001c90 	.word	0x20001c90
    f454:	0000d921 	.word	0x0000d921
    f458:	200023e8 	.word	0x200023e8

0000f45c <tmr_cca_callback>:
    f45c:	b508      	push	{r3, lr}
    f45e:	4b04      	ldr	r3, [pc, #16]	; (f470 <tmr_cca_callback+0x14>)
    f460:	4798      	blx	r3
    f462:	4b04      	ldr	r3, [pc, #16]	; (f474 <tmr_cca_callback+0x18>)
    f464:	691b      	ldr	r3, [r3, #16]
    f466:	2b00      	cmp	r3, #0
    f468:	d000      	beq.n	f46c <tmr_cca_callback+0x10>
    f46a:	4798      	blx	r3
    f46c:	bd08      	pop	{r3, pc}
    f46e:	46c0      	nop			; (mov r8, r8)
    f470:	0000d90d 	.word	0x0000d90d
    f474:	20001c90 	.word	0x20001c90

0000f478 <set_common_tc_overflow_callback>:
    f478:	4b01      	ldr	r3, [pc, #4]	; (f480 <set_common_tc_overflow_callback+0x8>)
    f47a:	60d8      	str	r0, [r3, #12]
    f47c:	4770      	bx	lr
    f47e:	46c0      	nop			; (mov r8, r8)
    f480:	20001c90 	.word	0x20001c90

0000f484 <set_common_tc_expiry_callback>:
    f484:	4b01      	ldr	r3, [pc, #4]	; (f48c <set_common_tc_expiry_callback+0x8>)
    f486:	6118      	str	r0, [r3, #16]
    f488:	4770      	bx	lr
    f48a:	46c0      	nop			; (mov r8, r8)
    f48c:	20001c90 	.word	0x20001c90

0000f490 <round>:
    f490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f492:	4a26      	ldr	r2, [pc, #152]	; (f52c <round+0x9c>)
    f494:	004b      	lsls	r3, r1, #1
    f496:	0d5b      	lsrs	r3, r3, #21
    f498:	189a      	adds	r2, r3, r2
    f49a:	0007      	movs	r7, r0
    f49c:	000c      	movs	r4, r1
    f49e:	2a13      	cmp	r2, #19
    f4a0:	dc10      	bgt.n	f4c4 <round+0x34>
    f4a2:	2a00      	cmp	r2, #0
    f4a4:	db39      	blt.n	f51a <round+0x8a>
    f4a6:	4b22      	ldr	r3, [pc, #136]	; (f530 <round+0xa0>)
    f4a8:	4113      	asrs	r3, r2
    f4aa:	420b      	tst	r3, r1
    f4ac:	d030      	beq.n	f510 <round+0x80>
    f4ae:	2480      	movs	r4, #128	; 0x80
    f4b0:	0324      	lsls	r4, r4, #12
    f4b2:	4114      	asrs	r4, r2
    f4b4:	2000      	movs	r0, #0
    f4b6:	1864      	adds	r4, r4, r1
    f4b8:	439c      	bics	r4, r3
    f4ba:	0006      	movs	r6, r0
    f4bc:	0025      	movs	r5, r4
    f4be:	0030      	movs	r0, r6
    f4c0:	0029      	movs	r1, r5
    f4c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f4c4:	2a33      	cmp	r2, #51	; 0x33
    f4c6:	dd0c      	ble.n	f4e2 <round+0x52>
    f4c8:	2380      	movs	r3, #128	; 0x80
    f4ca:	0006      	movs	r6, r0
    f4cc:	00db      	lsls	r3, r3, #3
    f4ce:	000d      	movs	r5, r1
    f4d0:	429a      	cmp	r2, r3
    f4d2:	d1f4      	bne.n	f4be <round+0x2e>
    f4d4:	0002      	movs	r2, r0
    f4d6:	000b      	movs	r3, r1
    f4d8:	f000 ffa6 	bl	10428 <__aeabi_dadd>
    f4dc:	0006      	movs	r6, r0
    f4de:	000d      	movs	r5, r1
    f4e0:	e7ed      	b.n	f4be <round+0x2e>
    f4e2:	4d14      	ldr	r5, [pc, #80]	; (f534 <round+0xa4>)
    f4e4:	0006      	movs	r6, r0
    f4e6:	46ac      	mov	ip, r5
    f4e8:	2501      	movs	r5, #1
    f4ea:	4463      	add	r3, ip
    f4ec:	426d      	negs	r5, r5
    f4ee:	40dd      	lsrs	r5, r3
    f4f0:	46ac      	mov	ip, r5
    f4f2:	4663      	mov	r3, ip
    f4f4:	000d      	movs	r5, r1
    f4f6:	4203      	tst	r3, r0
    f4f8:	d0e1      	beq.n	f4be <round+0x2e>
    f4fa:	2333      	movs	r3, #51	; 0x33
    f4fc:	1a9a      	subs	r2, r3, r2
    f4fe:	3b32      	subs	r3, #50	; 0x32
    f500:	4093      	lsls	r3, r2
    f502:	1818      	adds	r0, r3, r0
    f504:	4287      	cmp	r7, r0
    f506:	d900      	bls.n	f50a <round+0x7a>
    f508:	1c4c      	adds	r4, r1, #1
    f50a:	4663      	mov	r3, ip
    f50c:	4398      	bics	r0, r3
    f50e:	e7d4      	b.n	f4ba <round+0x2a>
    f510:	0006      	movs	r6, r0
    f512:	000d      	movs	r5, r1
    f514:	2800      	cmp	r0, #0
    f516:	d1ca      	bne.n	f4ae <round+0x1e>
    f518:	e7d1      	b.n	f4be <round+0x2e>
    f51a:	0fc9      	lsrs	r1, r1, #31
    f51c:	07cc      	lsls	r4, r1, #31
    f51e:	2000      	movs	r0, #0
    f520:	1c53      	adds	r3, r2, #1
    f522:	d1ca      	bne.n	f4ba <round+0x2a>
    f524:	4b04      	ldr	r3, [pc, #16]	; (f538 <round+0xa8>)
    f526:	431c      	orrs	r4, r3
    f528:	e7c7      	b.n	f4ba <round+0x2a>
    f52a:	46c0      	nop			; (mov r8, r8)
    f52c:	fffffc01 	.word	0xfffffc01
    f530:	000fffff 	.word	0x000fffff
    f534:	fffffbed 	.word	0xfffffbed
    f538:	3ff00000 	.word	0x3ff00000

0000f53c <__udivsi3>:
    f53c:	2200      	movs	r2, #0
    f53e:	0843      	lsrs	r3, r0, #1
    f540:	428b      	cmp	r3, r1
    f542:	d374      	bcc.n	f62e <__udivsi3+0xf2>
    f544:	0903      	lsrs	r3, r0, #4
    f546:	428b      	cmp	r3, r1
    f548:	d35f      	bcc.n	f60a <__udivsi3+0xce>
    f54a:	0a03      	lsrs	r3, r0, #8
    f54c:	428b      	cmp	r3, r1
    f54e:	d344      	bcc.n	f5da <__udivsi3+0x9e>
    f550:	0b03      	lsrs	r3, r0, #12
    f552:	428b      	cmp	r3, r1
    f554:	d328      	bcc.n	f5a8 <__udivsi3+0x6c>
    f556:	0c03      	lsrs	r3, r0, #16
    f558:	428b      	cmp	r3, r1
    f55a:	d30d      	bcc.n	f578 <__udivsi3+0x3c>
    f55c:	22ff      	movs	r2, #255	; 0xff
    f55e:	0209      	lsls	r1, r1, #8
    f560:	ba12      	rev	r2, r2
    f562:	0c03      	lsrs	r3, r0, #16
    f564:	428b      	cmp	r3, r1
    f566:	d302      	bcc.n	f56e <__udivsi3+0x32>
    f568:	1212      	asrs	r2, r2, #8
    f56a:	0209      	lsls	r1, r1, #8
    f56c:	d065      	beq.n	f63a <__udivsi3+0xfe>
    f56e:	0b03      	lsrs	r3, r0, #12
    f570:	428b      	cmp	r3, r1
    f572:	d319      	bcc.n	f5a8 <__udivsi3+0x6c>
    f574:	e000      	b.n	f578 <__udivsi3+0x3c>
    f576:	0a09      	lsrs	r1, r1, #8
    f578:	0bc3      	lsrs	r3, r0, #15
    f57a:	428b      	cmp	r3, r1
    f57c:	d301      	bcc.n	f582 <__udivsi3+0x46>
    f57e:	03cb      	lsls	r3, r1, #15
    f580:	1ac0      	subs	r0, r0, r3
    f582:	4152      	adcs	r2, r2
    f584:	0b83      	lsrs	r3, r0, #14
    f586:	428b      	cmp	r3, r1
    f588:	d301      	bcc.n	f58e <__udivsi3+0x52>
    f58a:	038b      	lsls	r3, r1, #14
    f58c:	1ac0      	subs	r0, r0, r3
    f58e:	4152      	adcs	r2, r2
    f590:	0b43      	lsrs	r3, r0, #13
    f592:	428b      	cmp	r3, r1
    f594:	d301      	bcc.n	f59a <__udivsi3+0x5e>
    f596:	034b      	lsls	r3, r1, #13
    f598:	1ac0      	subs	r0, r0, r3
    f59a:	4152      	adcs	r2, r2
    f59c:	0b03      	lsrs	r3, r0, #12
    f59e:	428b      	cmp	r3, r1
    f5a0:	d301      	bcc.n	f5a6 <__udivsi3+0x6a>
    f5a2:	030b      	lsls	r3, r1, #12
    f5a4:	1ac0      	subs	r0, r0, r3
    f5a6:	4152      	adcs	r2, r2
    f5a8:	0ac3      	lsrs	r3, r0, #11
    f5aa:	428b      	cmp	r3, r1
    f5ac:	d301      	bcc.n	f5b2 <__udivsi3+0x76>
    f5ae:	02cb      	lsls	r3, r1, #11
    f5b0:	1ac0      	subs	r0, r0, r3
    f5b2:	4152      	adcs	r2, r2
    f5b4:	0a83      	lsrs	r3, r0, #10
    f5b6:	428b      	cmp	r3, r1
    f5b8:	d301      	bcc.n	f5be <__udivsi3+0x82>
    f5ba:	028b      	lsls	r3, r1, #10
    f5bc:	1ac0      	subs	r0, r0, r3
    f5be:	4152      	adcs	r2, r2
    f5c0:	0a43      	lsrs	r3, r0, #9
    f5c2:	428b      	cmp	r3, r1
    f5c4:	d301      	bcc.n	f5ca <__udivsi3+0x8e>
    f5c6:	024b      	lsls	r3, r1, #9
    f5c8:	1ac0      	subs	r0, r0, r3
    f5ca:	4152      	adcs	r2, r2
    f5cc:	0a03      	lsrs	r3, r0, #8
    f5ce:	428b      	cmp	r3, r1
    f5d0:	d301      	bcc.n	f5d6 <__udivsi3+0x9a>
    f5d2:	020b      	lsls	r3, r1, #8
    f5d4:	1ac0      	subs	r0, r0, r3
    f5d6:	4152      	adcs	r2, r2
    f5d8:	d2cd      	bcs.n	f576 <__udivsi3+0x3a>
    f5da:	09c3      	lsrs	r3, r0, #7
    f5dc:	428b      	cmp	r3, r1
    f5de:	d301      	bcc.n	f5e4 <__udivsi3+0xa8>
    f5e0:	01cb      	lsls	r3, r1, #7
    f5e2:	1ac0      	subs	r0, r0, r3
    f5e4:	4152      	adcs	r2, r2
    f5e6:	0983      	lsrs	r3, r0, #6
    f5e8:	428b      	cmp	r3, r1
    f5ea:	d301      	bcc.n	f5f0 <__udivsi3+0xb4>
    f5ec:	018b      	lsls	r3, r1, #6
    f5ee:	1ac0      	subs	r0, r0, r3
    f5f0:	4152      	adcs	r2, r2
    f5f2:	0943      	lsrs	r3, r0, #5
    f5f4:	428b      	cmp	r3, r1
    f5f6:	d301      	bcc.n	f5fc <__udivsi3+0xc0>
    f5f8:	014b      	lsls	r3, r1, #5
    f5fa:	1ac0      	subs	r0, r0, r3
    f5fc:	4152      	adcs	r2, r2
    f5fe:	0903      	lsrs	r3, r0, #4
    f600:	428b      	cmp	r3, r1
    f602:	d301      	bcc.n	f608 <__udivsi3+0xcc>
    f604:	010b      	lsls	r3, r1, #4
    f606:	1ac0      	subs	r0, r0, r3
    f608:	4152      	adcs	r2, r2
    f60a:	08c3      	lsrs	r3, r0, #3
    f60c:	428b      	cmp	r3, r1
    f60e:	d301      	bcc.n	f614 <__udivsi3+0xd8>
    f610:	00cb      	lsls	r3, r1, #3
    f612:	1ac0      	subs	r0, r0, r3
    f614:	4152      	adcs	r2, r2
    f616:	0883      	lsrs	r3, r0, #2
    f618:	428b      	cmp	r3, r1
    f61a:	d301      	bcc.n	f620 <__udivsi3+0xe4>
    f61c:	008b      	lsls	r3, r1, #2
    f61e:	1ac0      	subs	r0, r0, r3
    f620:	4152      	adcs	r2, r2
    f622:	0843      	lsrs	r3, r0, #1
    f624:	428b      	cmp	r3, r1
    f626:	d301      	bcc.n	f62c <__udivsi3+0xf0>
    f628:	004b      	lsls	r3, r1, #1
    f62a:	1ac0      	subs	r0, r0, r3
    f62c:	4152      	adcs	r2, r2
    f62e:	1a41      	subs	r1, r0, r1
    f630:	d200      	bcs.n	f634 <__udivsi3+0xf8>
    f632:	4601      	mov	r1, r0
    f634:	4152      	adcs	r2, r2
    f636:	4610      	mov	r0, r2
    f638:	4770      	bx	lr
    f63a:	e7ff      	b.n	f63c <__udivsi3+0x100>
    f63c:	b501      	push	{r0, lr}
    f63e:	2000      	movs	r0, #0
    f640:	f000 f8f0 	bl	f824 <__aeabi_idiv0>
    f644:	bd02      	pop	{r1, pc}
    f646:	46c0      	nop			; (mov r8, r8)

0000f648 <__aeabi_uidivmod>:
    f648:	2900      	cmp	r1, #0
    f64a:	d0f7      	beq.n	f63c <__udivsi3+0x100>
    f64c:	e776      	b.n	f53c <__udivsi3>
    f64e:	4770      	bx	lr

0000f650 <__divsi3>:
    f650:	4603      	mov	r3, r0
    f652:	430b      	orrs	r3, r1
    f654:	d47f      	bmi.n	f756 <__divsi3+0x106>
    f656:	2200      	movs	r2, #0
    f658:	0843      	lsrs	r3, r0, #1
    f65a:	428b      	cmp	r3, r1
    f65c:	d374      	bcc.n	f748 <__divsi3+0xf8>
    f65e:	0903      	lsrs	r3, r0, #4
    f660:	428b      	cmp	r3, r1
    f662:	d35f      	bcc.n	f724 <__divsi3+0xd4>
    f664:	0a03      	lsrs	r3, r0, #8
    f666:	428b      	cmp	r3, r1
    f668:	d344      	bcc.n	f6f4 <__divsi3+0xa4>
    f66a:	0b03      	lsrs	r3, r0, #12
    f66c:	428b      	cmp	r3, r1
    f66e:	d328      	bcc.n	f6c2 <__divsi3+0x72>
    f670:	0c03      	lsrs	r3, r0, #16
    f672:	428b      	cmp	r3, r1
    f674:	d30d      	bcc.n	f692 <__divsi3+0x42>
    f676:	22ff      	movs	r2, #255	; 0xff
    f678:	0209      	lsls	r1, r1, #8
    f67a:	ba12      	rev	r2, r2
    f67c:	0c03      	lsrs	r3, r0, #16
    f67e:	428b      	cmp	r3, r1
    f680:	d302      	bcc.n	f688 <__divsi3+0x38>
    f682:	1212      	asrs	r2, r2, #8
    f684:	0209      	lsls	r1, r1, #8
    f686:	d065      	beq.n	f754 <__divsi3+0x104>
    f688:	0b03      	lsrs	r3, r0, #12
    f68a:	428b      	cmp	r3, r1
    f68c:	d319      	bcc.n	f6c2 <__divsi3+0x72>
    f68e:	e000      	b.n	f692 <__divsi3+0x42>
    f690:	0a09      	lsrs	r1, r1, #8
    f692:	0bc3      	lsrs	r3, r0, #15
    f694:	428b      	cmp	r3, r1
    f696:	d301      	bcc.n	f69c <__divsi3+0x4c>
    f698:	03cb      	lsls	r3, r1, #15
    f69a:	1ac0      	subs	r0, r0, r3
    f69c:	4152      	adcs	r2, r2
    f69e:	0b83      	lsrs	r3, r0, #14
    f6a0:	428b      	cmp	r3, r1
    f6a2:	d301      	bcc.n	f6a8 <__divsi3+0x58>
    f6a4:	038b      	lsls	r3, r1, #14
    f6a6:	1ac0      	subs	r0, r0, r3
    f6a8:	4152      	adcs	r2, r2
    f6aa:	0b43      	lsrs	r3, r0, #13
    f6ac:	428b      	cmp	r3, r1
    f6ae:	d301      	bcc.n	f6b4 <__divsi3+0x64>
    f6b0:	034b      	lsls	r3, r1, #13
    f6b2:	1ac0      	subs	r0, r0, r3
    f6b4:	4152      	adcs	r2, r2
    f6b6:	0b03      	lsrs	r3, r0, #12
    f6b8:	428b      	cmp	r3, r1
    f6ba:	d301      	bcc.n	f6c0 <__divsi3+0x70>
    f6bc:	030b      	lsls	r3, r1, #12
    f6be:	1ac0      	subs	r0, r0, r3
    f6c0:	4152      	adcs	r2, r2
    f6c2:	0ac3      	lsrs	r3, r0, #11
    f6c4:	428b      	cmp	r3, r1
    f6c6:	d301      	bcc.n	f6cc <__divsi3+0x7c>
    f6c8:	02cb      	lsls	r3, r1, #11
    f6ca:	1ac0      	subs	r0, r0, r3
    f6cc:	4152      	adcs	r2, r2
    f6ce:	0a83      	lsrs	r3, r0, #10
    f6d0:	428b      	cmp	r3, r1
    f6d2:	d301      	bcc.n	f6d8 <__divsi3+0x88>
    f6d4:	028b      	lsls	r3, r1, #10
    f6d6:	1ac0      	subs	r0, r0, r3
    f6d8:	4152      	adcs	r2, r2
    f6da:	0a43      	lsrs	r3, r0, #9
    f6dc:	428b      	cmp	r3, r1
    f6de:	d301      	bcc.n	f6e4 <__divsi3+0x94>
    f6e0:	024b      	lsls	r3, r1, #9
    f6e2:	1ac0      	subs	r0, r0, r3
    f6e4:	4152      	adcs	r2, r2
    f6e6:	0a03      	lsrs	r3, r0, #8
    f6e8:	428b      	cmp	r3, r1
    f6ea:	d301      	bcc.n	f6f0 <__divsi3+0xa0>
    f6ec:	020b      	lsls	r3, r1, #8
    f6ee:	1ac0      	subs	r0, r0, r3
    f6f0:	4152      	adcs	r2, r2
    f6f2:	d2cd      	bcs.n	f690 <__divsi3+0x40>
    f6f4:	09c3      	lsrs	r3, r0, #7
    f6f6:	428b      	cmp	r3, r1
    f6f8:	d301      	bcc.n	f6fe <__divsi3+0xae>
    f6fa:	01cb      	lsls	r3, r1, #7
    f6fc:	1ac0      	subs	r0, r0, r3
    f6fe:	4152      	adcs	r2, r2
    f700:	0983      	lsrs	r3, r0, #6
    f702:	428b      	cmp	r3, r1
    f704:	d301      	bcc.n	f70a <__divsi3+0xba>
    f706:	018b      	lsls	r3, r1, #6
    f708:	1ac0      	subs	r0, r0, r3
    f70a:	4152      	adcs	r2, r2
    f70c:	0943      	lsrs	r3, r0, #5
    f70e:	428b      	cmp	r3, r1
    f710:	d301      	bcc.n	f716 <__divsi3+0xc6>
    f712:	014b      	lsls	r3, r1, #5
    f714:	1ac0      	subs	r0, r0, r3
    f716:	4152      	adcs	r2, r2
    f718:	0903      	lsrs	r3, r0, #4
    f71a:	428b      	cmp	r3, r1
    f71c:	d301      	bcc.n	f722 <__divsi3+0xd2>
    f71e:	010b      	lsls	r3, r1, #4
    f720:	1ac0      	subs	r0, r0, r3
    f722:	4152      	adcs	r2, r2
    f724:	08c3      	lsrs	r3, r0, #3
    f726:	428b      	cmp	r3, r1
    f728:	d301      	bcc.n	f72e <__divsi3+0xde>
    f72a:	00cb      	lsls	r3, r1, #3
    f72c:	1ac0      	subs	r0, r0, r3
    f72e:	4152      	adcs	r2, r2
    f730:	0883      	lsrs	r3, r0, #2
    f732:	428b      	cmp	r3, r1
    f734:	d301      	bcc.n	f73a <__divsi3+0xea>
    f736:	008b      	lsls	r3, r1, #2
    f738:	1ac0      	subs	r0, r0, r3
    f73a:	4152      	adcs	r2, r2
    f73c:	0843      	lsrs	r3, r0, #1
    f73e:	428b      	cmp	r3, r1
    f740:	d301      	bcc.n	f746 <__divsi3+0xf6>
    f742:	004b      	lsls	r3, r1, #1
    f744:	1ac0      	subs	r0, r0, r3
    f746:	4152      	adcs	r2, r2
    f748:	1a41      	subs	r1, r0, r1
    f74a:	d200      	bcs.n	f74e <__divsi3+0xfe>
    f74c:	4601      	mov	r1, r0
    f74e:	4152      	adcs	r2, r2
    f750:	4610      	mov	r0, r2
    f752:	4770      	bx	lr
    f754:	e05d      	b.n	f812 <__divsi3+0x1c2>
    f756:	0fca      	lsrs	r2, r1, #31
    f758:	d000      	beq.n	f75c <__divsi3+0x10c>
    f75a:	4249      	negs	r1, r1
    f75c:	1003      	asrs	r3, r0, #32
    f75e:	d300      	bcc.n	f762 <__divsi3+0x112>
    f760:	4240      	negs	r0, r0
    f762:	4053      	eors	r3, r2
    f764:	2200      	movs	r2, #0
    f766:	469c      	mov	ip, r3
    f768:	0903      	lsrs	r3, r0, #4
    f76a:	428b      	cmp	r3, r1
    f76c:	d32d      	bcc.n	f7ca <__divsi3+0x17a>
    f76e:	0a03      	lsrs	r3, r0, #8
    f770:	428b      	cmp	r3, r1
    f772:	d312      	bcc.n	f79a <__divsi3+0x14a>
    f774:	22fc      	movs	r2, #252	; 0xfc
    f776:	0189      	lsls	r1, r1, #6
    f778:	ba12      	rev	r2, r2
    f77a:	0a03      	lsrs	r3, r0, #8
    f77c:	428b      	cmp	r3, r1
    f77e:	d30c      	bcc.n	f79a <__divsi3+0x14a>
    f780:	0189      	lsls	r1, r1, #6
    f782:	1192      	asrs	r2, r2, #6
    f784:	428b      	cmp	r3, r1
    f786:	d308      	bcc.n	f79a <__divsi3+0x14a>
    f788:	0189      	lsls	r1, r1, #6
    f78a:	1192      	asrs	r2, r2, #6
    f78c:	428b      	cmp	r3, r1
    f78e:	d304      	bcc.n	f79a <__divsi3+0x14a>
    f790:	0189      	lsls	r1, r1, #6
    f792:	d03a      	beq.n	f80a <__divsi3+0x1ba>
    f794:	1192      	asrs	r2, r2, #6
    f796:	e000      	b.n	f79a <__divsi3+0x14a>
    f798:	0989      	lsrs	r1, r1, #6
    f79a:	09c3      	lsrs	r3, r0, #7
    f79c:	428b      	cmp	r3, r1
    f79e:	d301      	bcc.n	f7a4 <__divsi3+0x154>
    f7a0:	01cb      	lsls	r3, r1, #7
    f7a2:	1ac0      	subs	r0, r0, r3
    f7a4:	4152      	adcs	r2, r2
    f7a6:	0983      	lsrs	r3, r0, #6
    f7a8:	428b      	cmp	r3, r1
    f7aa:	d301      	bcc.n	f7b0 <__divsi3+0x160>
    f7ac:	018b      	lsls	r3, r1, #6
    f7ae:	1ac0      	subs	r0, r0, r3
    f7b0:	4152      	adcs	r2, r2
    f7b2:	0943      	lsrs	r3, r0, #5
    f7b4:	428b      	cmp	r3, r1
    f7b6:	d301      	bcc.n	f7bc <__divsi3+0x16c>
    f7b8:	014b      	lsls	r3, r1, #5
    f7ba:	1ac0      	subs	r0, r0, r3
    f7bc:	4152      	adcs	r2, r2
    f7be:	0903      	lsrs	r3, r0, #4
    f7c0:	428b      	cmp	r3, r1
    f7c2:	d301      	bcc.n	f7c8 <__divsi3+0x178>
    f7c4:	010b      	lsls	r3, r1, #4
    f7c6:	1ac0      	subs	r0, r0, r3
    f7c8:	4152      	adcs	r2, r2
    f7ca:	08c3      	lsrs	r3, r0, #3
    f7cc:	428b      	cmp	r3, r1
    f7ce:	d301      	bcc.n	f7d4 <__divsi3+0x184>
    f7d0:	00cb      	lsls	r3, r1, #3
    f7d2:	1ac0      	subs	r0, r0, r3
    f7d4:	4152      	adcs	r2, r2
    f7d6:	0883      	lsrs	r3, r0, #2
    f7d8:	428b      	cmp	r3, r1
    f7da:	d301      	bcc.n	f7e0 <__divsi3+0x190>
    f7dc:	008b      	lsls	r3, r1, #2
    f7de:	1ac0      	subs	r0, r0, r3
    f7e0:	4152      	adcs	r2, r2
    f7e2:	d2d9      	bcs.n	f798 <__divsi3+0x148>
    f7e4:	0843      	lsrs	r3, r0, #1
    f7e6:	428b      	cmp	r3, r1
    f7e8:	d301      	bcc.n	f7ee <__divsi3+0x19e>
    f7ea:	004b      	lsls	r3, r1, #1
    f7ec:	1ac0      	subs	r0, r0, r3
    f7ee:	4152      	adcs	r2, r2
    f7f0:	1a41      	subs	r1, r0, r1
    f7f2:	d200      	bcs.n	f7f6 <__divsi3+0x1a6>
    f7f4:	4601      	mov	r1, r0
    f7f6:	4663      	mov	r3, ip
    f7f8:	4152      	adcs	r2, r2
    f7fa:	105b      	asrs	r3, r3, #1
    f7fc:	4610      	mov	r0, r2
    f7fe:	d301      	bcc.n	f804 <__divsi3+0x1b4>
    f800:	4240      	negs	r0, r0
    f802:	2b00      	cmp	r3, #0
    f804:	d500      	bpl.n	f808 <__divsi3+0x1b8>
    f806:	4249      	negs	r1, r1
    f808:	4770      	bx	lr
    f80a:	4663      	mov	r3, ip
    f80c:	105b      	asrs	r3, r3, #1
    f80e:	d300      	bcc.n	f812 <__divsi3+0x1c2>
    f810:	4240      	negs	r0, r0
    f812:	b501      	push	{r0, lr}
    f814:	2000      	movs	r0, #0
    f816:	f000 f805 	bl	f824 <__aeabi_idiv0>
    f81a:	bd02      	pop	{r1, pc}

0000f81c <__aeabi_idivmod>:
    f81c:	2900      	cmp	r1, #0
    f81e:	d0f8      	beq.n	f812 <__divsi3+0x1c2>
    f820:	e716      	b.n	f650 <__divsi3>
    f822:	4770      	bx	lr

0000f824 <__aeabi_idiv0>:
    f824:	4770      	bx	lr
    f826:	46c0      	nop			; (mov r8, r8)

0000f828 <__aeabi_cfrcmple>:
    f828:	4684      	mov	ip, r0
    f82a:	1c08      	adds	r0, r1, #0
    f82c:	4661      	mov	r1, ip
    f82e:	e7ff      	b.n	f830 <__aeabi_cfcmpeq>

0000f830 <__aeabi_cfcmpeq>:
    f830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f832:	f000 fbb5 	bl	ffa0 <__lesf2>
    f836:	2800      	cmp	r0, #0
    f838:	d401      	bmi.n	f83e <__aeabi_cfcmpeq+0xe>
    f83a:	2100      	movs	r1, #0
    f83c:	42c8      	cmn	r0, r1
    f83e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000f840 <__aeabi_fcmpeq>:
    f840:	b510      	push	{r4, lr}
    f842:	f000 fb47 	bl	fed4 <__eqsf2>
    f846:	4240      	negs	r0, r0
    f848:	3001      	adds	r0, #1
    f84a:	bd10      	pop	{r4, pc}

0000f84c <__aeabi_fcmplt>:
    f84c:	b510      	push	{r4, lr}
    f84e:	f000 fba7 	bl	ffa0 <__lesf2>
    f852:	2800      	cmp	r0, #0
    f854:	db01      	blt.n	f85a <__aeabi_fcmplt+0xe>
    f856:	2000      	movs	r0, #0
    f858:	bd10      	pop	{r4, pc}
    f85a:	2001      	movs	r0, #1
    f85c:	bd10      	pop	{r4, pc}
    f85e:	46c0      	nop			; (mov r8, r8)

0000f860 <__aeabi_fcmple>:
    f860:	b510      	push	{r4, lr}
    f862:	f000 fb9d 	bl	ffa0 <__lesf2>
    f866:	2800      	cmp	r0, #0
    f868:	dd01      	ble.n	f86e <__aeabi_fcmple+0xe>
    f86a:	2000      	movs	r0, #0
    f86c:	bd10      	pop	{r4, pc}
    f86e:	2001      	movs	r0, #1
    f870:	bd10      	pop	{r4, pc}
    f872:	46c0      	nop			; (mov r8, r8)

0000f874 <__aeabi_fcmpgt>:
    f874:	b510      	push	{r4, lr}
    f876:	f000 fb53 	bl	ff20 <__gesf2>
    f87a:	2800      	cmp	r0, #0
    f87c:	dc01      	bgt.n	f882 <__aeabi_fcmpgt+0xe>
    f87e:	2000      	movs	r0, #0
    f880:	bd10      	pop	{r4, pc}
    f882:	2001      	movs	r0, #1
    f884:	bd10      	pop	{r4, pc}
    f886:	46c0      	nop			; (mov r8, r8)

0000f888 <__aeabi_fcmpge>:
    f888:	b510      	push	{r4, lr}
    f88a:	f000 fb49 	bl	ff20 <__gesf2>
    f88e:	2800      	cmp	r0, #0
    f890:	da01      	bge.n	f896 <__aeabi_fcmpge+0xe>
    f892:	2000      	movs	r0, #0
    f894:	bd10      	pop	{r4, pc}
    f896:	2001      	movs	r0, #1
    f898:	bd10      	pop	{r4, pc}
    f89a:	46c0      	nop			; (mov r8, r8)

0000f89c <__aeabi_lmul>:
    f89c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f89e:	46ce      	mov	lr, r9
    f8a0:	4647      	mov	r7, r8
    f8a2:	0415      	lsls	r5, r2, #16
    f8a4:	0c2d      	lsrs	r5, r5, #16
    f8a6:	002e      	movs	r6, r5
    f8a8:	b580      	push	{r7, lr}
    f8aa:	0407      	lsls	r7, r0, #16
    f8ac:	0c14      	lsrs	r4, r2, #16
    f8ae:	0c3f      	lsrs	r7, r7, #16
    f8b0:	4699      	mov	r9, r3
    f8b2:	0c03      	lsrs	r3, r0, #16
    f8b4:	437e      	muls	r6, r7
    f8b6:	435d      	muls	r5, r3
    f8b8:	4367      	muls	r7, r4
    f8ba:	4363      	muls	r3, r4
    f8bc:	197f      	adds	r7, r7, r5
    f8be:	0c34      	lsrs	r4, r6, #16
    f8c0:	19e4      	adds	r4, r4, r7
    f8c2:	469c      	mov	ip, r3
    f8c4:	42a5      	cmp	r5, r4
    f8c6:	d903      	bls.n	f8d0 <__aeabi_lmul+0x34>
    f8c8:	2380      	movs	r3, #128	; 0x80
    f8ca:	025b      	lsls	r3, r3, #9
    f8cc:	4698      	mov	r8, r3
    f8ce:	44c4      	add	ip, r8
    f8d0:	464b      	mov	r3, r9
    f8d2:	4351      	muls	r1, r2
    f8d4:	4343      	muls	r3, r0
    f8d6:	0436      	lsls	r6, r6, #16
    f8d8:	0c36      	lsrs	r6, r6, #16
    f8da:	0c25      	lsrs	r5, r4, #16
    f8dc:	0424      	lsls	r4, r4, #16
    f8de:	4465      	add	r5, ip
    f8e0:	19a4      	adds	r4, r4, r6
    f8e2:	1859      	adds	r1, r3, r1
    f8e4:	1949      	adds	r1, r1, r5
    f8e6:	0020      	movs	r0, r4
    f8e8:	bc0c      	pop	{r2, r3}
    f8ea:	4690      	mov	r8, r2
    f8ec:	4699      	mov	r9, r3
    f8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f8f0 <__aeabi_f2uiz>:
    f8f0:	219e      	movs	r1, #158	; 0x9e
    f8f2:	b510      	push	{r4, lr}
    f8f4:	05c9      	lsls	r1, r1, #23
    f8f6:	1c04      	adds	r4, r0, #0
    f8f8:	f7ff ffc6 	bl	f888 <__aeabi_fcmpge>
    f8fc:	2800      	cmp	r0, #0
    f8fe:	d103      	bne.n	f908 <__aeabi_f2uiz+0x18>
    f900:	1c20      	adds	r0, r4, #0
    f902:	f000 fd2b 	bl	1035c <__aeabi_f2iz>
    f906:	bd10      	pop	{r4, pc}
    f908:	219e      	movs	r1, #158	; 0x9e
    f90a:	1c20      	adds	r0, r4, #0
    f90c:	05c9      	lsls	r1, r1, #23
    f90e:	f000 fb89 	bl	10024 <__aeabi_fsub>
    f912:	f000 fd23 	bl	1035c <__aeabi_f2iz>
    f916:	2380      	movs	r3, #128	; 0x80
    f918:	061b      	lsls	r3, r3, #24
    f91a:	469c      	mov	ip, r3
    f91c:	4460      	add	r0, ip
    f91e:	e7f2      	b.n	f906 <__aeabi_f2uiz+0x16>

0000f920 <__aeabi_fadd>:
    f920:	b5f0      	push	{r4, r5, r6, r7, lr}
    f922:	46c6      	mov	lr, r8
    f924:	024e      	lsls	r6, r1, #9
    f926:	0247      	lsls	r7, r0, #9
    f928:	0a76      	lsrs	r6, r6, #9
    f92a:	0a7b      	lsrs	r3, r7, #9
    f92c:	0044      	lsls	r4, r0, #1
    f92e:	0fc5      	lsrs	r5, r0, #31
    f930:	00f7      	lsls	r7, r6, #3
    f932:	0048      	lsls	r0, r1, #1
    f934:	4698      	mov	r8, r3
    f936:	b500      	push	{lr}
    f938:	0e24      	lsrs	r4, r4, #24
    f93a:	002a      	movs	r2, r5
    f93c:	00db      	lsls	r3, r3, #3
    f93e:	0e00      	lsrs	r0, r0, #24
    f940:	0fc9      	lsrs	r1, r1, #31
    f942:	46bc      	mov	ip, r7
    f944:	428d      	cmp	r5, r1
    f946:	d067      	beq.n	fa18 <__aeabi_fadd+0xf8>
    f948:	1a22      	subs	r2, r4, r0
    f94a:	2a00      	cmp	r2, #0
    f94c:	dc00      	bgt.n	f950 <__aeabi_fadd+0x30>
    f94e:	e0a5      	b.n	fa9c <__aeabi_fadd+0x17c>
    f950:	2800      	cmp	r0, #0
    f952:	d13a      	bne.n	f9ca <__aeabi_fadd+0xaa>
    f954:	2f00      	cmp	r7, #0
    f956:	d100      	bne.n	f95a <__aeabi_fadd+0x3a>
    f958:	e093      	b.n	fa82 <__aeabi_fadd+0x162>
    f95a:	1e51      	subs	r1, r2, #1
    f95c:	2900      	cmp	r1, #0
    f95e:	d000      	beq.n	f962 <__aeabi_fadd+0x42>
    f960:	e0bc      	b.n	fadc <__aeabi_fadd+0x1bc>
    f962:	2401      	movs	r4, #1
    f964:	1bdb      	subs	r3, r3, r7
    f966:	015a      	lsls	r2, r3, #5
    f968:	d546      	bpl.n	f9f8 <__aeabi_fadd+0xd8>
    f96a:	019b      	lsls	r3, r3, #6
    f96c:	099e      	lsrs	r6, r3, #6
    f96e:	0030      	movs	r0, r6
    f970:	f002 f9e2 	bl	11d38 <__clzsi2>
    f974:	3805      	subs	r0, #5
    f976:	4086      	lsls	r6, r0
    f978:	4284      	cmp	r4, r0
    f97a:	dd00      	ble.n	f97e <__aeabi_fadd+0x5e>
    f97c:	e09d      	b.n	faba <__aeabi_fadd+0x19a>
    f97e:	1b04      	subs	r4, r0, r4
    f980:	0032      	movs	r2, r6
    f982:	2020      	movs	r0, #32
    f984:	3401      	adds	r4, #1
    f986:	40e2      	lsrs	r2, r4
    f988:	1b04      	subs	r4, r0, r4
    f98a:	40a6      	lsls	r6, r4
    f98c:	0033      	movs	r3, r6
    f98e:	1e5e      	subs	r6, r3, #1
    f990:	41b3      	sbcs	r3, r6
    f992:	2400      	movs	r4, #0
    f994:	4313      	orrs	r3, r2
    f996:	075a      	lsls	r2, r3, #29
    f998:	d004      	beq.n	f9a4 <__aeabi_fadd+0x84>
    f99a:	220f      	movs	r2, #15
    f99c:	401a      	ands	r2, r3
    f99e:	2a04      	cmp	r2, #4
    f9a0:	d000      	beq.n	f9a4 <__aeabi_fadd+0x84>
    f9a2:	3304      	adds	r3, #4
    f9a4:	015a      	lsls	r2, r3, #5
    f9a6:	d529      	bpl.n	f9fc <__aeabi_fadd+0xdc>
    f9a8:	3401      	adds	r4, #1
    f9aa:	2cff      	cmp	r4, #255	; 0xff
    f9ac:	d100      	bne.n	f9b0 <__aeabi_fadd+0x90>
    f9ae:	e081      	b.n	fab4 <__aeabi_fadd+0x194>
    f9b0:	002a      	movs	r2, r5
    f9b2:	019b      	lsls	r3, r3, #6
    f9b4:	0a5b      	lsrs	r3, r3, #9
    f9b6:	b2e4      	uxtb	r4, r4
    f9b8:	025b      	lsls	r3, r3, #9
    f9ba:	05e4      	lsls	r4, r4, #23
    f9bc:	0a58      	lsrs	r0, r3, #9
    f9be:	07d2      	lsls	r2, r2, #31
    f9c0:	4320      	orrs	r0, r4
    f9c2:	4310      	orrs	r0, r2
    f9c4:	bc04      	pop	{r2}
    f9c6:	4690      	mov	r8, r2
    f9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9ca:	2cff      	cmp	r4, #255	; 0xff
    f9cc:	d0e3      	beq.n	f996 <__aeabi_fadd+0x76>
    f9ce:	2180      	movs	r1, #128	; 0x80
    f9d0:	0038      	movs	r0, r7
    f9d2:	04c9      	lsls	r1, r1, #19
    f9d4:	4308      	orrs	r0, r1
    f9d6:	4684      	mov	ip, r0
    f9d8:	2a1b      	cmp	r2, #27
    f9da:	dd00      	ble.n	f9de <__aeabi_fadd+0xbe>
    f9dc:	e082      	b.n	fae4 <__aeabi_fadd+0x1c4>
    f9de:	2020      	movs	r0, #32
    f9e0:	4661      	mov	r1, ip
    f9e2:	40d1      	lsrs	r1, r2
    f9e4:	1a82      	subs	r2, r0, r2
    f9e6:	4660      	mov	r0, ip
    f9e8:	4090      	lsls	r0, r2
    f9ea:	0002      	movs	r2, r0
    f9ec:	1e50      	subs	r0, r2, #1
    f9ee:	4182      	sbcs	r2, r0
    f9f0:	430a      	orrs	r2, r1
    f9f2:	1a9b      	subs	r3, r3, r2
    f9f4:	015a      	lsls	r2, r3, #5
    f9f6:	d4b8      	bmi.n	f96a <__aeabi_fadd+0x4a>
    f9f8:	075a      	lsls	r2, r3, #29
    f9fa:	d1ce      	bne.n	f99a <__aeabi_fadd+0x7a>
    f9fc:	08de      	lsrs	r6, r3, #3
    f9fe:	002a      	movs	r2, r5
    fa00:	2cff      	cmp	r4, #255	; 0xff
    fa02:	d13a      	bne.n	fa7a <__aeabi_fadd+0x15a>
    fa04:	2e00      	cmp	r6, #0
    fa06:	d100      	bne.n	fa0a <__aeabi_fadd+0xea>
    fa08:	e0ae      	b.n	fb68 <__aeabi_fadd+0x248>
    fa0a:	2380      	movs	r3, #128	; 0x80
    fa0c:	03db      	lsls	r3, r3, #15
    fa0e:	4333      	orrs	r3, r6
    fa10:	025b      	lsls	r3, r3, #9
    fa12:	0a5b      	lsrs	r3, r3, #9
    fa14:	24ff      	movs	r4, #255	; 0xff
    fa16:	e7cf      	b.n	f9b8 <__aeabi_fadd+0x98>
    fa18:	1a21      	subs	r1, r4, r0
    fa1a:	2900      	cmp	r1, #0
    fa1c:	dd52      	ble.n	fac4 <__aeabi_fadd+0x1a4>
    fa1e:	2800      	cmp	r0, #0
    fa20:	d031      	beq.n	fa86 <__aeabi_fadd+0x166>
    fa22:	2cff      	cmp	r4, #255	; 0xff
    fa24:	d0b7      	beq.n	f996 <__aeabi_fadd+0x76>
    fa26:	2080      	movs	r0, #128	; 0x80
    fa28:	003e      	movs	r6, r7
    fa2a:	04c0      	lsls	r0, r0, #19
    fa2c:	4306      	orrs	r6, r0
    fa2e:	46b4      	mov	ip, r6
    fa30:	291b      	cmp	r1, #27
    fa32:	dd00      	ble.n	fa36 <__aeabi_fadd+0x116>
    fa34:	e0aa      	b.n	fb8c <__aeabi_fadd+0x26c>
    fa36:	2620      	movs	r6, #32
    fa38:	4660      	mov	r0, ip
    fa3a:	40c8      	lsrs	r0, r1
    fa3c:	1a71      	subs	r1, r6, r1
    fa3e:	4666      	mov	r6, ip
    fa40:	408e      	lsls	r6, r1
    fa42:	0031      	movs	r1, r6
    fa44:	1e4e      	subs	r6, r1, #1
    fa46:	41b1      	sbcs	r1, r6
    fa48:	4301      	orrs	r1, r0
    fa4a:	185b      	adds	r3, r3, r1
    fa4c:	0159      	lsls	r1, r3, #5
    fa4e:	d5d3      	bpl.n	f9f8 <__aeabi_fadd+0xd8>
    fa50:	3401      	adds	r4, #1
    fa52:	2cff      	cmp	r4, #255	; 0xff
    fa54:	d100      	bne.n	fa58 <__aeabi_fadd+0x138>
    fa56:	e087      	b.n	fb68 <__aeabi_fadd+0x248>
    fa58:	2201      	movs	r2, #1
    fa5a:	4978      	ldr	r1, [pc, #480]	; (fc3c <__aeabi_fadd+0x31c>)
    fa5c:	401a      	ands	r2, r3
    fa5e:	085b      	lsrs	r3, r3, #1
    fa60:	400b      	ands	r3, r1
    fa62:	4313      	orrs	r3, r2
    fa64:	e797      	b.n	f996 <__aeabi_fadd+0x76>
    fa66:	2c00      	cmp	r4, #0
    fa68:	d000      	beq.n	fa6c <__aeabi_fadd+0x14c>
    fa6a:	e0a7      	b.n	fbbc <__aeabi_fadd+0x29c>
    fa6c:	2b00      	cmp	r3, #0
    fa6e:	d000      	beq.n	fa72 <__aeabi_fadd+0x152>
    fa70:	e0b6      	b.n	fbe0 <__aeabi_fadd+0x2c0>
    fa72:	1e3b      	subs	r3, r7, #0
    fa74:	d162      	bne.n	fb3c <__aeabi_fadd+0x21c>
    fa76:	2600      	movs	r6, #0
    fa78:	2200      	movs	r2, #0
    fa7a:	0273      	lsls	r3, r6, #9
    fa7c:	0a5b      	lsrs	r3, r3, #9
    fa7e:	b2e4      	uxtb	r4, r4
    fa80:	e79a      	b.n	f9b8 <__aeabi_fadd+0x98>
    fa82:	0014      	movs	r4, r2
    fa84:	e787      	b.n	f996 <__aeabi_fadd+0x76>
    fa86:	2f00      	cmp	r7, #0
    fa88:	d04d      	beq.n	fb26 <__aeabi_fadd+0x206>
    fa8a:	1e48      	subs	r0, r1, #1
    fa8c:	2800      	cmp	r0, #0
    fa8e:	d157      	bne.n	fb40 <__aeabi_fadd+0x220>
    fa90:	4463      	add	r3, ip
    fa92:	2401      	movs	r4, #1
    fa94:	015a      	lsls	r2, r3, #5
    fa96:	d5af      	bpl.n	f9f8 <__aeabi_fadd+0xd8>
    fa98:	2402      	movs	r4, #2
    fa9a:	e7dd      	b.n	fa58 <__aeabi_fadd+0x138>
    fa9c:	2a00      	cmp	r2, #0
    fa9e:	d124      	bne.n	faea <__aeabi_fadd+0x1ca>
    faa0:	1c62      	adds	r2, r4, #1
    faa2:	b2d2      	uxtb	r2, r2
    faa4:	2a01      	cmp	r2, #1
    faa6:	ddde      	ble.n	fa66 <__aeabi_fadd+0x146>
    faa8:	1bde      	subs	r6, r3, r7
    faaa:	0172      	lsls	r2, r6, #5
    faac:	d535      	bpl.n	fb1a <__aeabi_fadd+0x1fa>
    faae:	1afe      	subs	r6, r7, r3
    fab0:	000d      	movs	r5, r1
    fab2:	e75c      	b.n	f96e <__aeabi_fadd+0x4e>
    fab4:	002a      	movs	r2, r5
    fab6:	2300      	movs	r3, #0
    fab8:	e77e      	b.n	f9b8 <__aeabi_fadd+0x98>
    faba:	0033      	movs	r3, r6
    fabc:	4a60      	ldr	r2, [pc, #384]	; (fc40 <__aeabi_fadd+0x320>)
    fabe:	1a24      	subs	r4, r4, r0
    fac0:	4013      	ands	r3, r2
    fac2:	e768      	b.n	f996 <__aeabi_fadd+0x76>
    fac4:	2900      	cmp	r1, #0
    fac6:	d163      	bne.n	fb90 <__aeabi_fadd+0x270>
    fac8:	1c61      	adds	r1, r4, #1
    faca:	b2c8      	uxtb	r0, r1
    facc:	2801      	cmp	r0, #1
    face:	dd4e      	ble.n	fb6e <__aeabi_fadd+0x24e>
    fad0:	29ff      	cmp	r1, #255	; 0xff
    fad2:	d049      	beq.n	fb68 <__aeabi_fadd+0x248>
    fad4:	4463      	add	r3, ip
    fad6:	085b      	lsrs	r3, r3, #1
    fad8:	000c      	movs	r4, r1
    fada:	e75c      	b.n	f996 <__aeabi_fadd+0x76>
    fadc:	2aff      	cmp	r2, #255	; 0xff
    fade:	d041      	beq.n	fb64 <__aeabi_fadd+0x244>
    fae0:	000a      	movs	r2, r1
    fae2:	e779      	b.n	f9d8 <__aeabi_fadd+0xb8>
    fae4:	2201      	movs	r2, #1
    fae6:	1a9b      	subs	r3, r3, r2
    fae8:	e784      	b.n	f9f4 <__aeabi_fadd+0xd4>
    faea:	2c00      	cmp	r4, #0
    faec:	d01d      	beq.n	fb2a <__aeabi_fadd+0x20a>
    faee:	28ff      	cmp	r0, #255	; 0xff
    faf0:	d022      	beq.n	fb38 <__aeabi_fadd+0x218>
    faf2:	2480      	movs	r4, #128	; 0x80
    faf4:	04e4      	lsls	r4, r4, #19
    faf6:	4252      	negs	r2, r2
    faf8:	4323      	orrs	r3, r4
    fafa:	2a1b      	cmp	r2, #27
    fafc:	dd00      	ble.n	fb00 <__aeabi_fadd+0x1e0>
    fafe:	e08a      	b.n	fc16 <__aeabi_fadd+0x2f6>
    fb00:	001c      	movs	r4, r3
    fb02:	2520      	movs	r5, #32
    fb04:	40d4      	lsrs	r4, r2
    fb06:	1aaa      	subs	r2, r5, r2
    fb08:	4093      	lsls	r3, r2
    fb0a:	1e5a      	subs	r2, r3, #1
    fb0c:	4193      	sbcs	r3, r2
    fb0e:	4323      	orrs	r3, r4
    fb10:	4662      	mov	r2, ip
    fb12:	0004      	movs	r4, r0
    fb14:	1ad3      	subs	r3, r2, r3
    fb16:	000d      	movs	r5, r1
    fb18:	e725      	b.n	f966 <__aeabi_fadd+0x46>
    fb1a:	2e00      	cmp	r6, #0
    fb1c:	d000      	beq.n	fb20 <__aeabi_fadd+0x200>
    fb1e:	e726      	b.n	f96e <__aeabi_fadd+0x4e>
    fb20:	2200      	movs	r2, #0
    fb22:	2400      	movs	r4, #0
    fb24:	e7a9      	b.n	fa7a <__aeabi_fadd+0x15a>
    fb26:	000c      	movs	r4, r1
    fb28:	e735      	b.n	f996 <__aeabi_fadd+0x76>
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	d04d      	beq.n	fbca <__aeabi_fadd+0x2aa>
    fb2e:	43d2      	mvns	r2, r2
    fb30:	2a00      	cmp	r2, #0
    fb32:	d0ed      	beq.n	fb10 <__aeabi_fadd+0x1f0>
    fb34:	28ff      	cmp	r0, #255	; 0xff
    fb36:	d1e0      	bne.n	fafa <__aeabi_fadd+0x1da>
    fb38:	4663      	mov	r3, ip
    fb3a:	24ff      	movs	r4, #255	; 0xff
    fb3c:	000d      	movs	r5, r1
    fb3e:	e72a      	b.n	f996 <__aeabi_fadd+0x76>
    fb40:	29ff      	cmp	r1, #255	; 0xff
    fb42:	d00f      	beq.n	fb64 <__aeabi_fadd+0x244>
    fb44:	0001      	movs	r1, r0
    fb46:	e773      	b.n	fa30 <__aeabi_fadd+0x110>
    fb48:	2b00      	cmp	r3, #0
    fb4a:	d061      	beq.n	fc10 <__aeabi_fadd+0x2f0>
    fb4c:	24ff      	movs	r4, #255	; 0xff
    fb4e:	2f00      	cmp	r7, #0
    fb50:	d100      	bne.n	fb54 <__aeabi_fadd+0x234>
    fb52:	e720      	b.n	f996 <__aeabi_fadd+0x76>
    fb54:	2280      	movs	r2, #128	; 0x80
    fb56:	4641      	mov	r1, r8
    fb58:	03d2      	lsls	r2, r2, #15
    fb5a:	4211      	tst	r1, r2
    fb5c:	d002      	beq.n	fb64 <__aeabi_fadd+0x244>
    fb5e:	4216      	tst	r6, r2
    fb60:	d100      	bne.n	fb64 <__aeabi_fadd+0x244>
    fb62:	003b      	movs	r3, r7
    fb64:	24ff      	movs	r4, #255	; 0xff
    fb66:	e716      	b.n	f996 <__aeabi_fadd+0x76>
    fb68:	24ff      	movs	r4, #255	; 0xff
    fb6a:	2300      	movs	r3, #0
    fb6c:	e724      	b.n	f9b8 <__aeabi_fadd+0x98>
    fb6e:	2c00      	cmp	r4, #0
    fb70:	d1ea      	bne.n	fb48 <__aeabi_fadd+0x228>
    fb72:	2b00      	cmp	r3, #0
    fb74:	d058      	beq.n	fc28 <__aeabi_fadd+0x308>
    fb76:	2f00      	cmp	r7, #0
    fb78:	d100      	bne.n	fb7c <__aeabi_fadd+0x25c>
    fb7a:	e70c      	b.n	f996 <__aeabi_fadd+0x76>
    fb7c:	4463      	add	r3, ip
    fb7e:	015a      	lsls	r2, r3, #5
    fb80:	d400      	bmi.n	fb84 <__aeabi_fadd+0x264>
    fb82:	e739      	b.n	f9f8 <__aeabi_fadd+0xd8>
    fb84:	4a2e      	ldr	r2, [pc, #184]	; (fc40 <__aeabi_fadd+0x320>)
    fb86:	000c      	movs	r4, r1
    fb88:	4013      	ands	r3, r2
    fb8a:	e704      	b.n	f996 <__aeabi_fadd+0x76>
    fb8c:	2101      	movs	r1, #1
    fb8e:	e75c      	b.n	fa4a <__aeabi_fadd+0x12a>
    fb90:	2c00      	cmp	r4, #0
    fb92:	d11e      	bne.n	fbd2 <__aeabi_fadd+0x2b2>
    fb94:	2b00      	cmp	r3, #0
    fb96:	d040      	beq.n	fc1a <__aeabi_fadd+0x2fa>
    fb98:	43c9      	mvns	r1, r1
    fb9a:	2900      	cmp	r1, #0
    fb9c:	d00b      	beq.n	fbb6 <__aeabi_fadd+0x296>
    fb9e:	28ff      	cmp	r0, #255	; 0xff
    fba0:	d036      	beq.n	fc10 <__aeabi_fadd+0x2f0>
    fba2:	291b      	cmp	r1, #27
    fba4:	dc47      	bgt.n	fc36 <__aeabi_fadd+0x316>
    fba6:	001c      	movs	r4, r3
    fba8:	2620      	movs	r6, #32
    fbaa:	40cc      	lsrs	r4, r1
    fbac:	1a71      	subs	r1, r6, r1
    fbae:	408b      	lsls	r3, r1
    fbb0:	1e59      	subs	r1, r3, #1
    fbb2:	418b      	sbcs	r3, r1
    fbb4:	4323      	orrs	r3, r4
    fbb6:	4463      	add	r3, ip
    fbb8:	0004      	movs	r4, r0
    fbba:	e747      	b.n	fa4c <__aeabi_fadd+0x12c>
    fbbc:	2b00      	cmp	r3, #0
    fbbe:	d118      	bne.n	fbf2 <__aeabi_fadd+0x2d2>
    fbc0:	1e3b      	subs	r3, r7, #0
    fbc2:	d02d      	beq.n	fc20 <__aeabi_fadd+0x300>
    fbc4:	000d      	movs	r5, r1
    fbc6:	24ff      	movs	r4, #255	; 0xff
    fbc8:	e6e5      	b.n	f996 <__aeabi_fadd+0x76>
    fbca:	003b      	movs	r3, r7
    fbcc:	0004      	movs	r4, r0
    fbce:	000d      	movs	r5, r1
    fbd0:	e6e1      	b.n	f996 <__aeabi_fadd+0x76>
    fbd2:	28ff      	cmp	r0, #255	; 0xff
    fbd4:	d01c      	beq.n	fc10 <__aeabi_fadd+0x2f0>
    fbd6:	2480      	movs	r4, #128	; 0x80
    fbd8:	04e4      	lsls	r4, r4, #19
    fbda:	4249      	negs	r1, r1
    fbdc:	4323      	orrs	r3, r4
    fbde:	e7e0      	b.n	fba2 <__aeabi_fadd+0x282>
    fbe0:	2f00      	cmp	r7, #0
    fbe2:	d100      	bne.n	fbe6 <__aeabi_fadd+0x2c6>
    fbe4:	e6d7      	b.n	f996 <__aeabi_fadd+0x76>
    fbe6:	1bde      	subs	r6, r3, r7
    fbe8:	0172      	lsls	r2, r6, #5
    fbea:	d51f      	bpl.n	fc2c <__aeabi_fadd+0x30c>
    fbec:	1afb      	subs	r3, r7, r3
    fbee:	000d      	movs	r5, r1
    fbf0:	e6d1      	b.n	f996 <__aeabi_fadd+0x76>
    fbf2:	24ff      	movs	r4, #255	; 0xff
    fbf4:	2f00      	cmp	r7, #0
    fbf6:	d100      	bne.n	fbfa <__aeabi_fadd+0x2da>
    fbf8:	e6cd      	b.n	f996 <__aeabi_fadd+0x76>
    fbfa:	2280      	movs	r2, #128	; 0x80
    fbfc:	4640      	mov	r0, r8
    fbfe:	03d2      	lsls	r2, r2, #15
    fc00:	4210      	tst	r0, r2
    fc02:	d0af      	beq.n	fb64 <__aeabi_fadd+0x244>
    fc04:	4216      	tst	r6, r2
    fc06:	d1ad      	bne.n	fb64 <__aeabi_fadd+0x244>
    fc08:	003b      	movs	r3, r7
    fc0a:	000d      	movs	r5, r1
    fc0c:	24ff      	movs	r4, #255	; 0xff
    fc0e:	e6c2      	b.n	f996 <__aeabi_fadd+0x76>
    fc10:	4663      	mov	r3, ip
    fc12:	24ff      	movs	r4, #255	; 0xff
    fc14:	e6bf      	b.n	f996 <__aeabi_fadd+0x76>
    fc16:	2301      	movs	r3, #1
    fc18:	e77a      	b.n	fb10 <__aeabi_fadd+0x1f0>
    fc1a:	003b      	movs	r3, r7
    fc1c:	0004      	movs	r4, r0
    fc1e:	e6ba      	b.n	f996 <__aeabi_fadd+0x76>
    fc20:	2680      	movs	r6, #128	; 0x80
    fc22:	2200      	movs	r2, #0
    fc24:	03f6      	lsls	r6, r6, #15
    fc26:	e6f0      	b.n	fa0a <__aeabi_fadd+0xea>
    fc28:	003b      	movs	r3, r7
    fc2a:	e6b4      	b.n	f996 <__aeabi_fadd+0x76>
    fc2c:	1e33      	subs	r3, r6, #0
    fc2e:	d000      	beq.n	fc32 <__aeabi_fadd+0x312>
    fc30:	e6e2      	b.n	f9f8 <__aeabi_fadd+0xd8>
    fc32:	2200      	movs	r2, #0
    fc34:	e721      	b.n	fa7a <__aeabi_fadd+0x15a>
    fc36:	2301      	movs	r3, #1
    fc38:	e7bd      	b.n	fbb6 <__aeabi_fadd+0x296>
    fc3a:	46c0      	nop			; (mov r8, r8)
    fc3c:	7dffffff 	.word	0x7dffffff
    fc40:	fbffffff 	.word	0xfbffffff

0000fc44 <__aeabi_fdiv>:
    fc44:	b5f0      	push	{r4, r5, r6, r7, lr}
    fc46:	4657      	mov	r7, sl
    fc48:	464e      	mov	r6, r9
    fc4a:	46de      	mov	lr, fp
    fc4c:	4645      	mov	r5, r8
    fc4e:	b5e0      	push	{r5, r6, r7, lr}
    fc50:	0244      	lsls	r4, r0, #9
    fc52:	0043      	lsls	r3, r0, #1
    fc54:	0fc6      	lsrs	r6, r0, #31
    fc56:	b083      	sub	sp, #12
    fc58:	1c0f      	adds	r7, r1, #0
    fc5a:	0a64      	lsrs	r4, r4, #9
    fc5c:	0e1b      	lsrs	r3, r3, #24
    fc5e:	46b2      	mov	sl, r6
    fc60:	d053      	beq.n	fd0a <__aeabi_fdiv+0xc6>
    fc62:	2bff      	cmp	r3, #255	; 0xff
    fc64:	d027      	beq.n	fcb6 <__aeabi_fdiv+0x72>
    fc66:	2280      	movs	r2, #128	; 0x80
    fc68:	00e4      	lsls	r4, r4, #3
    fc6a:	04d2      	lsls	r2, r2, #19
    fc6c:	4314      	orrs	r4, r2
    fc6e:	227f      	movs	r2, #127	; 0x7f
    fc70:	4252      	negs	r2, r2
    fc72:	4690      	mov	r8, r2
    fc74:	4498      	add	r8, r3
    fc76:	2300      	movs	r3, #0
    fc78:	4699      	mov	r9, r3
    fc7a:	469b      	mov	fp, r3
    fc7c:	027d      	lsls	r5, r7, #9
    fc7e:	0078      	lsls	r0, r7, #1
    fc80:	0ffb      	lsrs	r3, r7, #31
    fc82:	0a6d      	lsrs	r5, r5, #9
    fc84:	0e00      	lsrs	r0, r0, #24
    fc86:	9300      	str	r3, [sp, #0]
    fc88:	d024      	beq.n	fcd4 <__aeabi_fdiv+0x90>
    fc8a:	28ff      	cmp	r0, #255	; 0xff
    fc8c:	d046      	beq.n	fd1c <__aeabi_fdiv+0xd8>
    fc8e:	2380      	movs	r3, #128	; 0x80
    fc90:	2100      	movs	r1, #0
    fc92:	00ed      	lsls	r5, r5, #3
    fc94:	04db      	lsls	r3, r3, #19
    fc96:	431d      	orrs	r5, r3
    fc98:	387f      	subs	r0, #127	; 0x7f
    fc9a:	4647      	mov	r7, r8
    fc9c:	1a38      	subs	r0, r7, r0
    fc9e:	464f      	mov	r7, r9
    fca0:	430f      	orrs	r7, r1
    fca2:	00bf      	lsls	r7, r7, #2
    fca4:	46b9      	mov	r9, r7
    fca6:	0033      	movs	r3, r6
    fca8:	9a00      	ldr	r2, [sp, #0]
    fcaa:	4f87      	ldr	r7, [pc, #540]	; (fec8 <__aeabi_fdiv+0x284>)
    fcac:	4053      	eors	r3, r2
    fcae:	464a      	mov	r2, r9
    fcb0:	58ba      	ldr	r2, [r7, r2]
    fcb2:	9301      	str	r3, [sp, #4]
    fcb4:	4697      	mov	pc, r2
    fcb6:	2c00      	cmp	r4, #0
    fcb8:	d14e      	bne.n	fd58 <__aeabi_fdiv+0x114>
    fcba:	2308      	movs	r3, #8
    fcbc:	4699      	mov	r9, r3
    fcbe:	33f7      	adds	r3, #247	; 0xf7
    fcc0:	4698      	mov	r8, r3
    fcc2:	3bfd      	subs	r3, #253	; 0xfd
    fcc4:	469b      	mov	fp, r3
    fcc6:	027d      	lsls	r5, r7, #9
    fcc8:	0078      	lsls	r0, r7, #1
    fcca:	0ffb      	lsrs	r3, r7, #31
    fccc:	0a6d      	lsrs	r5, r5, #9
    fcce:	0e00      	lsrs	r0, r0, #24
    fcd0:	9300      	str	r3, [sp, #0]
    fcd2:	d1da      	bne.n	fc8a <__aeabi_fdiv+0x46>
    fcd4:	2d00      	cmp	r5, #0
    fcd6:	d126      	bne.n	fd26 <__aeabi_fdiv+0xe2>
    fcd8:	2000      	movs	r0, #0
    fcda:	2101      	movs	r1, #1
    fcdc:	0033      	movs	r3, r6
    fcde:	9a00      	ldr	r2, [sp, #0]
    fce0:	4f7a      	ldr	r7, [pc, #488]	; (fecc <__aeabi_fdiv+0x288>)
    fce2:	4053      	eors	r3, r2
    fce4:	4642      	mov	r2, r8
    fce6:	1a10      	subs	r0, r2, r0
    fce8:	464a      	mov	r2, r9
    fcea:	430a      	orrs	r2, r1
    fcec:	0092      	lsls	r2, r2, #2
    fcee:	58ba      	ldr	r2, [r7, r2]
    fcf0:	001d      	movs	r5, r3
    fcf2:	4697      	mov	pc, r2
    fcf4:	9b00      	ldr	r3, [sp, #0]
    fcf6:	002c      	movs	r4, r5
    fcf8:	469a      	mov	sl, r3
    fcfa:	468b      	mov	fp, r1
    fcfc:	465b      	mov	r3, fp
    fcfe:	2b02      	cmp	r3, #2
    fd00:	d131      	bne.n	fd66 <__aeabi_fdiv+0x122>
    fd02:	4653      	mov	r3, sl
    fd04:	21ff      	movs	r1, #255	; 0xff
    fd06:	2400      	movs	r4, #0
    fd08:	e038      	b.n	fd7c <__aeabi_fdiv+0x138>
    fd0a:	2c00      	cmp	r4, #0
    fd0c:	d117      	bne.n	fd3e <__aeabi_fdiv+0xfa>
    fd0e:	2304      	movs	r3, #4
    fd10:	4699      	mov	r9, r3
    fd12:	2300      	movs	r3, #0
    fd14:	4698      	mov	r8, r3
    fd16:	3301      	adds	r3, #1
    fd18:	469b      	mov	fp, r3
    fd1a:	e7af      	b.n	fc7c <__aeabi_fdiv+0x38>
    fd1c:	20ff      	movs	r0, #255	; 0xff
    fd1e:	2d00      	cmp	r5, #0
    fd20:	d10b      	bne.n	fd3a <__aeabi_fdiv+0xf6>
    fd22:	2102      	movs	r1, #2
    fd24:	e7da      	b.n	fcdc <__aeabi_fdiv+0x98>
    fd26:	0028      	movs	r0, r5
    fd28:	f002 f806 	bl	11d38 <__clzsi2>
    fd2c:	1f43      	subs	r3, r0, #5
    fd2e:	409d      	lsls	r5, r3
    fd30:	2376      	movs	r3, #118	; 0x76
    fd32:	425b      	negs	r3, r3
    fd34:	1a18      	subs	r0, r3, r0
    fd36:	2100      	movs	r1, #0
    fd38:	e7af      	b.n	fc9a <__aeabi_fdiv+0x56>
    fd3a:	2103      	movs	r1, #3
    fd3c:	e7ad      	b.n	fc9a <__aeabi_fdiv+0x56>
    fd3e:	0020      	movs	r0, r4
    fd40:	f001 fffa 	bl	11d38 <__clzsi2>
    fd44:	1f43      	subs	r3, r0, #5
    fd46:	409c      	lsls	r4, r3
    fd48:	2376      	movs	r3, #118	; 0x76
    fd4a:	425b      	negs	r3, r3
    fd4c:	1a1b      	subs	r3, r3, r0
    fd4e:	4698      	mov	r8, r3
    fd50:	2300      	movs	r3, #0
    fd52:	4699      	mov	r9, r3
    fd54:	469b      	mov	fp, r3
    fd56:	e791      	b.n	fc7c <__aeabi_fdiv+0x38>
    fd58:	230c      	movs	r3, #12
    fd5a:	4699      	mov	r9, r3
    fd5c:	33f3      	adds	r3, #243	; 0xf3
    fd5e:	4698      	mov	r8, r3
    fd60:	3bfc      	subs	r3, #252	; 0xfc
    fd62:	469b      	mov	fp, r3
    fd64:	e78a      	b.n	fc7c <__aeabi_fdiv+0x38>
    fd66:	2b03      	cmp	r3, #3
    fd68:	d100      	bne.n	fd6c <__aeabi_fdiv+0x128>
    fd6a:	e0a5      	b.n	feb8 <__aeabi_fdiv+0x274>
    fd6c:	4655      	mov	r5, sl
    fd6e:	2b01      	cmp	r3, #1
    fd70:	d000      	beq.n	fd74 <__aeabi_fdiv+0x130>
    fd72:	e081      	b.n	fe78 <__aeabi_fdiv+0x234>
    fd74:	2301      	movs	r3, #1
    fd76:	2100      	movs	r1, #0
    fd78:	2400      	movs	r4, #0
    fd7a:	402b      	ands	r3, r5
    fd7c:	0264      	lsls	r4, r4, #9
    fd7e:	05c9      	lsls	r1, r1, #23
    fd80:	0a60      	lsrs	r0, r4, #9
    fd82:	07db      	lsls	r3, r3, #31
    fd84:	4308      	orrs	r0, r1
    fd86:	4318      	orrs	r0, r3
    fd88:	b003      	add	sp, #12
    fd8a:	bc3c      	pop	{r2, r3, r4, r5}
    fd8c:	4690      	mov	r8, r2
    fd8e:	4699      	mov	r9, r3
    fd90:	46a2      	mov	sl, r4
    fd92:	46ab      	mov	fp, r5
    fd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd96:	2480      	movs	r4, #128	; 0x80
    fd98:	2300      	movs	r3, #0
    fd9a:	03e4      	lsls	r4, r4, #15
    fd9c:	21ff      	movs	r1, #255	; 0xff
    fd9e:	e7ed      	b.n	fd7c <__aeabi_fdiv+0x138>
    fda0:	21ff      	movs	r1, #255	; 0xff
    fda2:	2400      	movs	r4, #0
    fda4:	e7ea      	b.n	fd7c <__aeabi_fdiv+0x138>
    fda6:	2301      	movs	r3, #1
    fda8:	1a59      	subs	r1, r3, r1
    fdaa:	291b      	cmp	r1, #27
    fdac:	dd66      	ble.n	fe7c <__aeabi_fdiv+0x238>
    fdae:	9a01      	ldr	r2, [sp, #4]
    fdb0:	4013      	ands	r3, r2
    fdb2:	2100      	movs	r1, #0
    fdb4:	2400      	movs	r4, #0
    fdb6:	e7e1      	b.n	fd7c <__aeabi_fdiv+0x138>
    fdb8:	2380      	movs	r3, #128	; 0x80
    fdba:	03db      	lsls	r3, r3, #15
    fdbc:	421c      	tst	r4, r3
    fdbe:	d038      	beq.n	fe32 <__aeabi_fdiv+0x1ee>
    fdc0:	421d      	tst	r5, r3
    fdc2:	d051      	beq.n	fe68 <__aeabi_fdiv+0x224>
    fdc4:	431c      	orrs	r4, r3
    fdc6:	0264      	lsls	r4, r4, #9
    fdc8:	0a64      	lsrs	r4, r4, #9
    fdca:	0033      	movs	r3, r6
    fdcc:	21ff      	movs	r1, #255	; 0xff
    fdce:	e7d5      	b.n	fd7c <__aeabi_fdiv+0x138>
    fdd0:	0163      	lsls	r3, r4, #5
    fdd2:	016c      	lsls	r4, r5, #5
    fdd4:	42a3      	cmp	r3, r4
    fdd6:	d23b      	bcs.n	fe50 <__aeabi_fdiv+0x20c>
    fdd8:	261b      	movs	r6, #27
    fdda:	2100      	movs	r1, #0
    fddc:	3801      	subs	r0, #1
    fdde:	2501      	movs	r5, #1
    fde0:	001f      	movs	r7, r3
    fde2:	0049      	lsls	r1, r1, #1
    fde4:	005b      	lsls	r3, r3, #1
    fde6:	2f00      	cmp	r7, #0
    fde8:	db01      	blt.n	fdee <__aeabi_fdiv+0x1aa>
    fdea:	429c      	cmp	r4, r3
    fdec:	d801      	bhi.n	fdf2 <__aeabi_fdiv+0x1ae>
    fdee:	1b1b      	subs	r3, r3, r4
    fdf0:	4329      	orrs	r1, r5
    fdf2:	3e01      	subs	r6, #1
    fdf4:	2e00      	cmp	r6, #0
    fdf6:	d1f3      	bne.n	fde0 <__aeabi_fdiv+0x19c>
    fdf8:	001c      	movs	r4, r3
    fdfa:	1e63      	subs	r3, r4, #1
    fdfc:	419c      	sbcs	r4, r3
    fdfe:	430c      	orrs	r4, r1
    fe00:	0001      	movs	r1, r0
    fe02:	317f      	adds	r1, #127	; 0x7f
    fe04:	2900      	cmp	r1, #0
    fe06:	ddce      	ble.n	fda6 <__aeabi_fdiv+0x162>
    fe08:	0763      	lsls	r3, r4, #29
    fe0a:	d004      	beq.n	fe16 <__aeabi_fdiv+0x1d2>
    fe0c:	230f      	movs	r3, #15
    fe0e:	4023      	ands	r3, r4
    fe10:	2b04      	cmp	r3, #4
    fe12:	d000      	beq.n	fe16 <__aeabi_fdiv+0x1d2>
    fe14:	3404      	adds	r4, #4
    fe16:	0123      	lsls	r3, r4, #4
    fe18:	d503      	bpl.n	fe22 <__aeabi_fdiv+0x1de>
    fe1a:	0001      	movs	r1, r0
    fe1c:	4b2c      	ldr	r3, [pc, #176]	; (fed0 <__aeabi_fdiv+0x28c>)
    fe1e:	3180      	adds	r1, #128	; 0x80
    fe20:	401c      	ands	r4, r3
    fe22:	29fe      	cmp	r1, #254	; 0xfe
    fe24:	dd0d      	ble.n	fe42 <__aeabi_fdiv+0x1fe>
    fe26:	2301      	movs	r3, #1
    fe28:	9a01      	ldr	r2, [sp, #4]
    fe2a:	21ff      	movs	r1, #255	; 0xff
    fe2c:	4013      	ands	r3, r2
    fe2e:	2400      	movs	r4, #0
    fe30:	e7a4      	b.n	fd7c <__aeabi_fdiv+0x138>
    fe32:	2380      	movs	r3, #128	; 0x80
    fe34:	03db      	lsls	r3, r3, #15
    fe36:	431c      	orrs	r4, r3
    fe38:	0264      	lsls	r4, r4, #9
    fe3a:	0a64      	lsrs	r4, r4, #9
    fe3c:	0033      	movs	r3, r6
    fe3e:	21ff      	movs	r1, #255	; 0xff
    fe40:	e79c      	b.n	fd7c <__aeabi_fdiv+0x138>
    fe42:	2301      	movs	r3, #1
    fe44:	9a01      	ldr	r2, [sp, #4]
    fe46:	01a4      	lsls	r4, r4, #6
    fe48:	0a64      	lsrs	r4, r4, #9
    fe4a:	b2c9      	uxtb	r1, r1
    fe4c:	4013      	ands	r3, r2
    fe4e:	e795      	b.n	fd7c <__aeabi_fdiv+0x138>
    fe50:	1b1b      	subs	r3, r3, r4
    fe52:	261a      	movs	r6, #26
    fe54:	2101      	movs	r1, #1
    fe56:	e7c2      	b.n	fdde <__aeabi_fdiv+0x19a>
    fe58:	9b00      	ldr	r3, [sp, #0]
    fe5a:	468b      	mov	fp, r1
    fe5c:	469a      	mov	sl, r3
    fe5e:	2400      	movs	r4, #0
    fe60:	e74c      	b.n	fcfc <__aeabi_fdiv+0xb8>
    fe62:	0263      	lsls	r3, r4, #9
    fe64:	d5e5      	bpl.n	fe32 <__aeabi_fdiv+0x1ee>
    fe66:	2500      	movs	r5, #0
    fe68:	2480      	movs	r4, #128	; 0x80
    fe6a:	03e4      	lsls	r4, r4, #15
    fe6c:	432c      	orrs	r4, r5
    fe6e:	0264      	lsls	r4, r4, #9
    fe70:	0a64      	lsrs	r4, r4, #9
    fe72:	9b00      	ldr	r3, [sp, #0]
    fe74:	21ff      	movs	r1, #255	; 0xff
    fe76:	e781      	b.n	fd7c <__aeabi_fdiv+0x138>
    fe78:	9501      	str	r5, [sp, #4]
    fe7a:	e7c1      	b.n	fe00 <__aeabi_fdiv+0x1bc>
    fe7c:	0023      	movs	r3, r4
    fe7e:	2020      	movs	r0, #32
    fe80:	40cb      	lsrs	r3, r1
    fe82:	1a41      	subs	r1, r0, r1
    fe84:	408c      	lsls	r4, r1
    fe86:	1e61      	subs	r1, r4, #1
    fe88:	418c      	sbcs	r4, r1
    fe8a:	431c      	orrs	r4, r3
    fe8c:	0763      	lsls	r3, r4, #29
    fe8e:	d004      	beq.n	fe9a <__aeabi_fdiv+0x256>
    fe90:	230f      	movs	r3, #15
    fe92:	4023      	ands	r3, r4
    fe94:	2b04      	cmp	r3, #4
    fe96:	d000      	beq.n	fe9a <__aeabi_fdiv+0x256>
    fe98:	3404      	adds	r4, #4
    fe9a:	0163      	lsls	r3, r4, #5
    fe9c:	d505      	bpl.n	feaa <__aeabi_fdiv+0x266>
    fe9e:	2301      	movs	r3, #1
    fea0:	9a01      	ldr	r2, [sp, #4]
    fea2:	2101      	movs	r1, #1
    fea4:	4013      	ands	r3, r2
    fea6:	2400      	movs	r4, #0
    fea8:	e768      	b.n	fd7c <__aeabi_fdiv+0x138>
    feaa:	2301      	movs	r3, #1
    feac:	9a01      	ldr	r2, [sp, #4]
    feae:	01a4      	lsls	r4, r4, #6
    feb0:	0a64      	lsrs	r4, r4, #9
    feb2:	4013      	ands	r3, r2
    feb4:	2100      	movs	r1, #0
    feb6:	e761      	b.n	fd7c <__aeabi_fdiv+0x138>
    feb8:	2380      	movs	r3, #128	; 0x80
    feba:	03db      	lsls	r3, r3, #15
    febc:	431c      	orrs	r4, r3
    febe:	0264      	lsls	r4, r4, #9
    fec0:	0a64      	lsrs	r4, r4, #9
    fec2:	4653      	mov	r3, sl
    fec4:	21ff      	movs	r1, #255	; 0xff
    fec6:	e759      	b.n	fd7c <__aeabi_fdiv+0x138>
    fec8:	00013dac 	.word	0x00013dac
    fecc:	00013dec 	.word	0x00013dec
    fed0:	f7ffffff 	.word	0xf7ffffff

0000fed4 <__eqsf2>:
    fed4:	b570      	push	{r4, r5, r6, lr}
    fed6:	0042      	lsls	r2, r0, #1
    fed8:	0245      	lsls	r5, r0, #9
    feda:	024e      	lsls	r6, r1, #9
    fedc:	004c      	lsls	r4, r1, #1
    fede:	0fc3      	lsrs	r3, r0, #31
    fee0:	0a6d      	lsrs	r5, r5, #9
    fee2:	0e12      	lsrs	r2, r2, #24
    fee4:	0a76      	lsrs	r6, r6, #9
    fee6:	0e24      	lsrs	r4, r4, #24
    fee8:	0fc9      	lsrs	r1, r1, #31
    feea:	2001      	movs	r0, #1
    feec:	2aff      	cmp	r2, #255	; 0xff
    feee:	d006      	beq.n	fefe <__eqsf2+0x2a>
    fef0:	2cff      	cmp	r4, #255	; 0xff
    fef2:	d003      	beq.n	fefc <__eqsf2+0x28>
    fef4:	42a2      	cmp	r2, r4
    fef6:	d101      	bne.n	fefc <__eqsf2+0x28>
    fef8:	42b5      	cmp	r5, r6
    fefa:	d006      	beq.n	ff0a <__eqsf2+0x36>
    fefc:	bd70      	pop	{r4, r5, r6, pc}
    fefe:	2d00      	cmp	r5, #0
    ff00:	d1fc      	bne.n	fefc <__eqsf2+0x28>
    ff02:	2cff      	cmp	r4, #255	; 0xff
    ff04:	d1fa      	bne.n	fefc <__eqsf2+0x28>
    ff06:	2e00      	cmp	r6, #0
    ff08:	d1f8      	bne.n	fefc <__eqsf2+0x28>
    ff0a:	428b      	cmp	r3, r1
    ff0c:	d006      	beq.n	ff1c <__eqsf2+0x48>
    ff0e:	2001      	movs	r0, #1
    ff10:	2a00      	cmp	r2, #0
    ff12:	d1f3      	bne.n	fefc <__eqsf2+0x28>
    ff14:	0028      	movs	r0, r5
    ff16:	1e45      	subs	r5, r0, #1
    ff18:	41a8      	sbcs	r0, r5
    ff1a:	e7ef      	b.n	fefc <__eqsf2+0x28>
    ff1c:	2000      	movs	r0, #0
    ff1e:	e7ed      	b.n	fefc <__eqsf2+0x28>

0000ff20 <__gesf2>:
    ff20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff22:	0042      	lsls	r2, r0, #1
    ff24:	0245      	lsls	r5, r0, #9
    ff26:	024c      	lsls	r4, r1, #9
    ff28:	0fc3      	lsrs	r3, r0, #31
    ff2a:	0048      	lsls	r0, r1, #1
    ff2c:	0a6d      	lsrs	r5, r5, #9
    ff2e:	0e12      	lsrs	r2, r2, #24
    ff30:	0a64      	lsrs	r4, r4, #9
    ff32:	0e00      	lsrs	r0, r0, #24
    ff34:	0fc9      	lsrs	r1, r1, #31
    ff36:	2aff      	cmp	r2, #255	; 0xff
    ff38:	d01e      	beq.n	ff78 <__gesf2+0x58>
    ff3a:	28ff      	cmp	r0, #255	; 0xff
    ff3c:	d021      	beq.n	ff82 <__gesf2+0x62>
    ff3e:	2a00      	cmp	r2, #0
    ff40:	d10a      	bne.n	ff58 <__gesf2+0x38>
    ff42:	426e      	negs	r6, r5
    ff44:	416e      	adcs	r6, r5
    ff46:	b2f6      	uxtb	r6, r6
    ff48:	2800      	cmp	r0, #0
    ff4a:	d10f      	bne.n	ff6c <__gesf2+0x4c>
    ff4c:	2c00      	cmp	r4, #0
    ff4e:	d10d      	bne.n	ff6c <__gesf2+0x4c>
    ff50:	2000      	movs	r0, #0
    ff52:	2d00      	cmp	r5, #0
    ff54:	d009      	beq.n	ff6a <__gesf2+0x4a>
    ff56:	e005      	b.n	ff64 <__gesf2+0x44>
    ff58:	2800      	cmp	r0, #0
    ff5a:	d101      	bne.n	ff60 <__gesf2+0x40>
    ff5c:	2c00      	cmp	r4, #0
    ff5e:	d001      	beq.n	ff64 <__gesf2+0x44>
    ff60:	428b      	cmp	r3, r1
    ff62:	d011      	beq.n	ff88 <__gesf2+0x68>
    ff64:	2101      	movs	r1, #1
    ff66:	4258      	negs	r0, r3
    ff68:	4308      	orrs	r0, r1
    ff6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ff6c:	2e00      	cmp	r6, #0
    ff6e:	d0f7      	beq.n	ff60 <__gesf2+0x40>
    ff70:	2001      	movs	r0, #1
    ff72:	3901      	subs	r1, #1
    ff74:	4308      	orrs	r0, r1
    ff76:	e7f8      	b.n	ff6a <__gesf2+0x4a>
    ff78:	2d00      	cmp	r5, #0
    ff7a:	d0de      	beq.n	ff3a <__gesf2+0x1a>
    ff7c:	2002      	movs	r0, #2
    ff7e:	4240      	negs	r0, r0
    ff80:	e7f3      	b.n	ff6a <__gesf2+0x4a>
    ff82:	2c00      	cmp	r4, #0
    ff84:	d0db      	beq.n	ff3e <__gesf2+0x1e>
    ff86:	e7f9      	b.n	ff7c <__gesf2+0x5c>
    ff88:	4282      	cmp	r2, r0
    ff8a:	dceb      	bgt.n	ff64 <__gesf2+0x44>
    ff8c:	db04      	blt.n	ff98 <__gesf2+0x78>
    ff8e:	42a5      	cmp	r5, r4
    ff90:	d8e8      	bhi.n	ff64 <__gesf2+0x44>
    ff92:	2000      	movs	r0, #0
    ff94:	42a5      	cmp	r5, r4
    ff96:	d2e8      	bcs.n	ff6a <__gesf2+0x4a>
    ff98:	2101      	movs	r1, #1
    ff9a:	1e58      	subs	r0, r3, #1
    ff9c:	4308      	orrs	r0, r1
    ff9e:	e7e4      	b.n	ff6a <__gesf2+0x4a>

0000ffa0 <__lesf2>:
    ffa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ffa2:	0042      	lsls	r2, r0, #1
    ffa4:	024d      	lsls	r5, r1, #9
    ffa6:	004c      	lsls	r4, r1, #1
    ffa8:	0246      	lsls	r6, r0, #9
    ffaa:	0a76      	lsrs	r6, r6, #9
    ffac:	0e12      	lsrs	r2, r2, #24
    ffae:	0fc3      	lsrs	r3, r0, #31
    ffb0:	0a6d      	lsrs	r5, r5, #9
    ffb2:	0e24      	lsrs	r4, r4, #24
    ffb4:	0fc9      	lsrs	r1, r1, #31
    ffb6:	2aff      	cmp	r2, #255	; 0xff
    ffb8:	d016      	beq.n	ffe8 <__lesf2+0x48>
    ffba:	2cff      	cmp	r4, #255	; 0xff
    ffbc:	d018      	beq.n	fff0 <__lesf2+0x50>
    ffbe:	2a00      	cmp	r2, #0
    ffc0:	d10a      	bne.n	ffd8 <__lesf2+0x38>
    ffc2:	4270      	negs	r0, r6
    ffc4:	4170      	adcs	r0, r6
    ffc6:	b2c0      	uxtb	r0, r0
    ffc8:	2c00      	cmp	r4, #0
    ffca:	d015      	beq.n	fff8 <__lesf2+0x58>
    ffcc:	2800      	cmp	r0, #0
    ffce:	d005      	beq.n	ffdc <__lesf2+0x3c>
    ffd0:	2001      	movs	r0, #1
    ffd2:	3901      	subs	r1, #1
    ffd4:	4308      	orrs	r0, r1
    ffd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffd8:	2c00      	cmp	r4, #0
    ffda:	d013      	beq.n	10004 <__lesf2+0x64>
    ffdc:	4299      	cmp	r1, r3
    ffde:	d014      	beq.n	1000a <__lesf2+0x6a>
    ffe0:	2001      	movs	r0, #1
    ffe2:	425b      	negs	r3, r3
    ffe4:	4318      	orrs	r0, r3
    ffe6:	e7f6      	b.n	ffd6 <__lesf2+0x36>
    ffe8:	2002      	movs	r0, #2
    ffea:	2e00      	cmp	r6, #0
    ffec:	d1f3      	bne.n	ffd6 <__lesf2+0x36>
    ffee:	e7e4      	b.n	ffba <__lesf2+0x1a>
    fff0:	2002      	movs	r0, #2
    fff2:	2d00      	cmp	r5, #0
    fff4:	d1ef      	bne.n	ffd6 <__lesf2+0x36>
    fff6:	e7e2      	b.n	ffbe <__lesf2+0x1e>
    fff8:	2d00      	cmp	r5, #0
    fffa:	d1e7      	bne.n	ffcc <__lesf2+0x2c>
    fffc:	2000      	movs	r0, #0
    fffe:	2e00      	cmp	r6, #0
   10000:	d0e9      	beq.n	ffd6 <__lesf2+0x36>
   10002:	e7ed      	b.n	ffe0 <__lesf2+0x40>
   10004:	2d00      	cmp	r5, #0
   10006:	d1e9      	bne.n	ffdc <__lesf2+0x3c>
   10008:	e7ea      	b.n	ffe0 <__lesf2+0x40>
   1000a:	42a2      	cmp	r2, r4
   1000c:	dc06      	bgt.n	1001c <__lesf2+0x7c>
   1000e:	dbdf      	blt.n	ffd0 <__lesf2+0x30>
   10010:	42ae      	cmp	r6, r5
   10012:	d803      	bhi.n	1001c <__lesf2+0x7c>
   10014:	2000      	movs	r0, #0
   10016:	42ae      	cmp	r6, r5
   10018:	d3da      	bcc.n	ffd0 <__lesf2+0x30>
   1001a:	e7dc      	b.n	ffd6 <__lesf2+0x36>
   1001c:	2001      	movs	r0, #1
   1001e:	4249      	negs	r1, r1
   10020:	4308      	orrs	r0, r1
   10022:	e7d8      	b.n	ffd6 <__lesf2+0x36>

00010024 <__aeabi_fsub>:
   10024:	b5f0      	push	{r4, r5, r6, r7, lr}
   10026:	464f      	mov	r7, r9
   10028:	46d6      	mov	lr, sl
   1002a:	4646      	mov	r6, r8
   1002c:	0044      	lsls	r4, r0, #1
   1002e:	b5c0      	push	{r6, r7, lr}
   10030:	0fc2      	lsrs	r2, r0, #31
   10032:	0247      	lsls	r7, r0, #9
   10034:	0248      	lsls	r0, r1, #9
   10036:	0a40      	lsrs	r0, r0, #9
   10038:	4684      	mov	ip, r0
   1003a:	4666      	mov	r6, ip
   1003c:	0a7b      	lsrs	r3, r7, #9
   1003e:	0048      	lsls	r0, r1, #1
   10040:	0fc9      	lsrs	r1, r1, #31
   10042:	469a      	mov	sl, r3
   10044:	0e24      	lsrs	r4, r4, #24
   10046:	0015      	movs	r5, r2
   10048:	00db      	lsls	r3, r3, #3
   1004a:	0e00      	lsrs	r0, r0, #24
   1004c:	4689      	mov	r9, r1
   1004e:	00f6      	lsls	r6, r6, #3
   10050:	28ff      	cmp	r0, #255	; 0xff
   10052:	d100      	bne.n	10056 <__aeabi_fsub+0x32>
   10054:	e08f      	b.n	10176 <__aeabi_fsub+0x152>
   10056:	2101      	movs	r1, #1
   10058:	464f      	mov	r7, r9
   1005a:	404f      	eors	r7, r1
   1005c:	0039      	movs	r1, r7
   1005e:	4291      	cmp	r1, r2
   10060:	d066      	beq.n	10130 <__aeabi_fsub+0x10c>
   10062:	1a22      	subs	r2, r4, r0
   10064:	2a00      	cmp	r2, #0
   10066:	dc00      	bgt.n	1006a <__aeabi_fsub+0x46>
   10068:	e09d      	b.n	101a6 <__aeabi_fsub+0x182>
   1006a:	2800      	cmp	r0, #0
   1006c:	d13d      	bne.n	100ea <__aeabi_fsub+0xc6>
   1006e:	2e00      	cmp	r6, #0
   10070:	d100      	bne.n	10074 <__aeabi_fsub+0x50>
   10072:	e08b      	b.n	1018c <__aeabi_fsub+0x168>
   10074:	1e51      	subs	r1, r2, #1
   10076:	2900      	cmp	r1, #0
   10078:	d000      	beq.n	1007c <__aeabi_fsub+0x58>
   1007a:	e0b5      	b.n	101e8 <__aeabi_fsub+0x1c4>
   1007c:	2401      	movs	r4, #1
   1007e:	1b9b      	subs	r3, r3, r6
   10080:	015a      	lsls	r2, r3, #5
   10082:	d544      	bpl.n	1010e <__aeabi_fsub+0xea>
   10084:	019b      	lsls	r3, r3, #6
   10086:	099f      	lsrs	r7, r3, #6
   10088:	0038      	movs	r0, r7
   1008a:	f001 fe55 	bl	11d38 <__clzsi2>
   1008e:	3805      	subs	r0, #5
   10090:	4087      	lsls	r7, r0
   10092:	4284      	cmp	r4, r0
   10094:	dd00      	ble.n	10098 <__aeabi_fsub+0x74>
   10096:	e096      	b.n	101c6 <__aeabi_fsub+0x1a2>
   10098:	1b04      	subs	r4, r0, r4
   1009a:	003a      	movs	r2, r7
   1009c:	2020      	movs	r0, #32
   1009e:	3401      	adds	r4, #1
   100a0:	40e2      	lsrs	r2, r4
   100a2:	1b04      	subs	r4, r0, r4
   100a4:	40a7      	lsls	r7, r4
   100a6:	003b      	movs	r3, r7
   100a8:	1e5f      	subs	r7, r3, #1
   100aa:	41bb      	sbcs	r3, r7
   100ac:	2400      	movs	r4, #0
   100ae:	4313      	orrs	r3, r2
   100b0:	075a      	lsls	r2, r3, #29
   100b2:	d004      	beq.n	100be <__aeabi_fsub+0x9a>
   100b4:	220f      	movs	r2, #15
   100b6:	401a      	ands	r2, r3
   100b8:	2a04      	cmp	r2, #4
   100ba:	d000      	beq.n	100be <__aeabi_fsub+0x9a>
   100bc:	3304      	adds	r3, #4
   100be:	015a      	lsls	r2, r3, #5
   100c0:	d527      	bpl.n	10112 <__aeabi_fsub+0xee>
   100c2:	3401      	adds	r4, #1
   100c4:	2cff      	cmp	r4, #255	; 0xff
   100c6:	d100      	bne.n	100ca <__aeabi_fsub+0xa6>
   100c8:	e079      	b.n	101be <__aeabi_fsub+0x19a>
   100ca:	2201      	movs	r2, #1
   100cc:	019b      	lsls	r3, r3, #6
   100ce:	0a5b      	lsrs	r3, r3, #9
   100d0:	b2e4      	uxtb	r4, r4
   100d2:	402a      	ands	r2, r5
   100d4:	025b      	lsls	r3, r3, #9
   100d6:	05e4      	lsls	r4, r4, #23
   100d8:	0a58      	lsrs	r0, r3, #9
   100da:	07d2      	lsls	r2, r2, #31
   100dc:	4320      	orrs	r0, r4
   100de:	4310      	orrs	r0, r2
   100e0:	bc1c      	pop	{r2, r3, r4}
   100e2:	4690      	mov	r8, r2
   100e4:	4699      	mov	r9, r3
   100e6:	46a2      	mov	sl, r4
   100e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100ea:	2cff      	cmp	r4, #255	; 0xff
   100ec:	d0e0      	beq.n	100b0 <__aeabi_fsub+0x8c>
   100ee:	2180      	movs	r1, #128	; 0x80
   100f0:	04c9      	lsls	r1, r1, #19
   100f2:	430e      	orrs	r6, r1
   100f4:	2a1b      	cmp	r2, #27
   100f6:	dc7b      	bgt.n	101f0 <__aeabi_fsub+0x1cc>
   100f8:	0031      	movs	r1, r6
   100fa:	2020      	movs	r0, #32
   100fc:	40d1      	lsrs	r1, r2
   100fe:	1a82      	subs	r2, r0, r2
   10100:	4096      	lsls	r6, r2
   10102:	1e72      	subs	r2, r6, #1
   10104:	4196      	sbcs	r6, r2
   10106:	430e      	orrs	r6, r1
   10108:	1b9b      	subs	r3, r3, r6
   1010a:	015a      	lsls	r2, r3, #5
   1010c:	d4ba      	bmi.n	10084 <__aeabi_fsub+0x60>
   1010e:	075a      	lsls	r2, r3, #29
   10110:	d1d0      	bne.n	100b4 <__aeabi_fsub+0x90>
   10112:	2201      	movs	r2, #1
   10114:	08df      	lsrs	r7, r3, #3
   10116:	402a      	ands	r2, r5
   10118:	2cff      	cmp	r4, #255	; 0xff
   1011a:	d133      	bne.n	10184 <__aeabi_fsub+0x160>
   1011c:	2f00      	cmp	r7, #0
   1011e:	d100      	bne.n	10122 <__aeabi_fsub+0xfe>
   10120:	e0a8      	b.n	10274 <__aeabi_fsub+0x250>
   10122:	2380      	movs	r3, #128	; 0x80
   10124:	03db      	lsls	r3, r3, #15
   10126:	433b      	orrs	r3, r7
   10128:	025b      	lsls	r3, r3, #9
   1012a:	0a5b      	lsrs	r3, r3, #9
   1012c:	24ff      	movs	r4, #255	; 0xff
   1012e:	e7d1      	b.n	100d4 <__aeabi_fsub+0xb0>
   10130:	1a21      	subs	r1, r4, r0
   10132:	2900      	cmp	r1, #0
   10134:	dd4c      	ble.n	101d0 <__aeabi_fsub+0x1ac>
   10136:	2800      	cmp	r0, #0
   10138:	d02a      	beq.n	10190 <__aeabi_fsub+0x16c>
   1013a:	2cff      	cmp	r4, #255	; 0xff
   1013c:	d0b8      	beq.n	100b0 <__aeabi_fsub+0x8c>
   1013e:	2080      	movs	r0, #128	; 0x80
   10140:	04c0      	lsls	r0, r0, #19
   10142:	4306      	orrs	r6, r0
   10144:	291b      	cmp	r1, #27
   10146:	dd00      	ble.n	1014a <__aeabi_fsub+0x126>
   10148:	e0af      	b.n	102aa <__aeabi_fsub+0x286>
   1014a:	0030      	movs	r0, r6
   1014c:	2720      	movs	r7, #32
   1014e:	40c8      	lsrs	r0, r1
   10150:	1a79      	subs	r1, r7, r1
   10152:	408e      	lsls	r6, r1
   10154:	1e71      	subs	r1, r6, #1
   10156:	418e      	sbcs	r6, r1
   10158:	4306      	orrs	r6, r0
   1015a:	199b      	adds	r3, r3, r6
   1015c:	0159      	lsls	r1, r3, #5
   1015e:	d5d6      	bpl.n	1010e <__aeabi_fsub+0xea>
   10160:	3401      	adds	r4, #1
   10162:	2cff      	cmp	r4, #255	; 0xff
   10164:	d100      	bne.n	10168 <__aeabi_fsub+0x144>
   10166:	e085      	b.n	10274 <__aeabi_fsub+0x250>
   10168:	2201      	movs	r2, #1
   1016a:	497a      	ldr	r1, [pc, #488]	; (10354 <__aeabi_fsub+0x330>)
   1016c:	401a      	ands	r2, r3
   1016e:	085b      	lsrs	r3, r3, #1
   10170:	400b      	ands	r3, r1
   10172:	4313      	orrs	r3, r2
   10174:	e79c      	b.n	100b0 <__aeabi_fsub+0x8c>
   10176:	2e00      	cmp	r6, #0
   10178:	d000      	beq.n	1017c <__aeabi_fsub+0x158>
   1017a:	e770      	b.n	1005e <__aeabi_fsub+0x3a>
   1017c:	e76b      	b.n	10056 <__aeabi_fsub+0x32>
   1017e:	1e3b      	subs	r3, r7, #0
   10180:	d1c5      	bne.n	1010e <__aeabi_fsub+0xea>
   10182:	2200      	movs	r2, #0
   10184:	027b      	lsls	r3, r7, #9
   10186:	0a5b      	lsrs	r3, r3, #9
   10188:	b2e4      	uxtb	r4, r4
   1018a:	e7a3      	b.n	100d4 <__aeabi_fsub+0xb0>
   1018c:	0014      	movs	r4, r2
   1018e:	e78f      	b.n	100b0 <__aeabi_fsub+0x8c>
   10190:	2e00      	cmp	r6, #0
   10192:	d04d      	beq.n	10230 <__aeabi_fsub+0x20c>
   10194:	1e48      	subs	r0, r1, #1
   10196:	2800      	cmp	r0, #0
   10198:	d157      	bne.n	1024a <__aeabi_fsub+0x226>
   1019a:	199b      	adds	r3, r3, r6
   1019c:	2401      	movs	r4, #1
   1019e:	015a      	lsls	r2, r3, #5
   101a0:	d5b5      	bpl.n	1010e <__aeabi_fsub+0xea>
   101a2:	2402      	movs	r4, #2
   101a4:	e7e0      	b.n	10168 <__aeabi_fsub+0x144>
   101a6:	2a00      	cmp	r2, #0
   101a8:	d125      	bne.n	101f6 <__aeabi_fsub+0x1d2>
   101aa:	1c62      	adds	r2, r4, #1
   101ac:	b2d2      	uxtb	r2, r2
   101ae:	2a01      	cmp	r2, #1
   101b0:	dd72      	ble.n	10298 <__aeabi_fsub+0x274>
   101b2:	1b9f      	subs	r7, r3, r6
   101b4:	017a      	lsls	r2, r7, #5
   101b6:	d535      	bpl.n	10224 <__aeabi_fsub+0x200>
   101b8:	1af7      	subs	r7, r6, r3
   101ba:	000d      	movs	r5, r1
   101bc:	e764      	b.n	10088 <__aeabi_fsub+0x64>
   101be:	2201      	movs	r2, #1
   101c0:	2300      	movs	r3, #0
   101c2:	402a      	ands	r2, r5
   101c4:	e786      	b.n	100d4 <__aeabi_fsub+0xb0>
   101c6:	003b      	movs	r3, r7
   101c8:	4a63      	ldr	r2, [pc, #396]	; (10358 <__aeabi_fsub+0x334>)
   101ca:	1a24      	subs	r4, r4, r0
   101cc:	4013      	ands	r3, r2
   101ce:	e76f      	b.n	100b0 <__aeabi_fsub+0x8c>
   101d0:	2900      	cmp	r1, #0
   101d2:	d16c      	bne.n	102ae <__aeabi_fsub+0x28a>
   101d4:	1c61      	adds	r1, r4, #1
   101d6:	b2c8      	uxtb	r0, r1
   101d8:	2801      	cmp	r0, #1
   101da:	dd4e      	ble.n	1027a <__aeabi_fsub+0x256>
   101dc:	29ff      	cmp	r1, #255	; 0xff
   101de:	d049      	beq.n	10274 <__aeabi_fsub+0x250>
   101e0:	199b      	adds	r3, r3, r6
   101e2:	085b      	lsrs	r3, r3, #1
   101e4:	000c      	movs	r4, r1
   101e6:	e763      	b.n	100b0 <__aeabi_fsub+0x8c>
   101e8:	2aff      	cmp	r2, #255	; 0xff
   101ea:	d041      	beq.n	10270 <__aeabi_fsub+0x24c>
   101ec:	000a      	movs	r2, r1
   101ee:	e781      	b.n	100f4 <__aeabi_fsub+0xd0>
   101f0:	2601      	movs	r6, #1
   101f2:	1b9b      	subs	r3, r3, r6
   101f4:	e789      	b.n	1010a <__aeabi_fsub+0xe6>
   101f6:	2c00      	cmp	r4, #0
   101f8:	d01c      	beq.n	10234 <__aeabi_fsub+0x210>
   101fa:	28ff      	cmp	r0, #255	; 0xff
   101fc:	d021      	beq.n	10242 <__aeabi_fsub+0x21e>
   101fe:	2480      	movs	r4, #128	; 0x80
   10200:	04e4      	lsls	r4, r4, #19
   10202:	4252      	negs	r2, r2
   10204:	4323      	orrs	r3, r4
   10206:	2a1b      	cmp	r2, #27
   10208:	dd00      	ble.n	1020c <__aeabi_fsub+0x1e8>
   1020a:	e096      	b.n	1033a <__aeabi_fsub+0x316>
   1020c:	001c      	movs	r4, r3
   1020e:	2520      	movs	r5, #32
   10210:	40d4      	lsrs	r4, r2
   10212:	1aaa      	subs	r2, r5, r2
   10214:	4093      	lsls	r3, r2
   10216:	1e5a      	subs	r2, r3, #1
   10218:	4193      	sbcs	r3, r2
   1021a:	4323      	orrs	r3, r4
   1021c:	1af3      	subs	r3, r6, r3
   1021e:	0004      	movs	r4, r0
   10220:	000d      	movs	r5, r1
   10222:	e72d      	b.n	10080 <__aeabi_fsub+0x5c>
   10224:	2f00      	cmp	r7, #0
   10226:	d000      	beq.n	1022a <__aeabi_fsub+0x206>
   10228:	e72e      	b.n	10088 <__aeabi_fsub+0x64>
   1022a:	2200      	movs	r2, #0
   1022c:	2400      	movs	r4, #0
   1022e:	e7a9      	b.n	10184 <__aeabi_fsub+0x160>
   10230:	000c      	movs	r4, r1
   10232:	e73d      	b.n	100b0 <__aeabi_fsub+0x8c>
   10234:	2b00      	cmp	r3, #0
   10236:	d058      	beq.n	102ea <__aeabi_fsub+0x2c6>
   10238:	43d2      	mvns	r2, r2
   1023a:	2a00      	cmp	r2, #0
   1023c:	d0ee      	beq.n	1021c <__aeabi_fsub+0x1f8>
   1023e:	28ff      	cmp	r0, #255	; 0xff
   10240:	d1e1      	bne.n	10206 <__aeabi_fsub+0x1e2>
   10242:	0033      	movs	r3, r6
   10244:	24ff      	movs	r4, #255	; 0xff
   10246:	000d      	movs	r5, r1
   10248:	e732      	b.n	100b0 <__aeabi_fsub+0x8c>
   1024a:	29ff      	cmp	r1, #255	; 0xff
   1024c:	d010      	beq.n	10270 <__aeabi_fsub+0x24c>
   1024e:	0001      	movs	r1, r0
   10250:	e778      	b.n	10144 <__aeabi_fsub+0x120>
   10252:	2b00      	cmp	r3, #0
   10254:	d06e      	beq.n	10334 <__aeabi_fsub+0x310>
   10256:	24ff      	movs	r4, #255	; 0xff
   10258:	2e00      	cmp	r6, #0
   1025a:	d100      	bne.n	1025e <__aeabi_fsub+0x23a>
   1025c:	e728      	b.n	100b0 <__aeabi_fsub+0x8c>
   1025e:	2280      	movs	r2, #128	; 0x80
   10260:	4651      	mov	r1, sl
   10262:	03d2      	lsls	r2, r2, #15
   10264:	4211      	tst	r1, r2
   10266:	d003      	beq.n	10270 <__aeabi_fsub+0x24c>
   10268:	4661      	mov	r1, ip
   1026a:	4211      	tst	r1, r2
   1026c:	d100      	bne.n	10270 <__aeabi_fsub+0x24c>
   1026e:	0033      	movs	r3, r6
   10270:	24ff      	movs	r4, #255	; 0xff
   10272:	e71d      	b.n	100b0 <__aeabi_fsub+0x8c>
   10274:	24ff      	movs	r4, #255	; 0xff
   10276:	2300      	movs	r3, #0
   10278:	e72c      	b.n	100d4 <__aeabi_fsub+0xb0>
   1027a:	2c00      	cmp	r4, #0
   1027c:	d1e9      	bne.n	10252 <__aeabi_fsub+0x22e>
   1027e:	2b00      	cmp	r3, #0
   10280:	d063      	beq.n	1034a <__aeabi_fsub+0x326>
   10282:	2e00      	cmp	r6, #0
   10284:	d100      	bne.n	10288 <__aeabi_fsub+0x264>
   10286:	e713      	b.n	100b0 <__aeabi_fsub+0x8c>
   10288:	199b      	adds	r3, r3, r6
   1028a:	015a      	lsls	r2, r3, #5
   1028c:	d400      	bmi.n	10290 <__aeabi_fsub+0x26c>
   1028e:	e73e      	b.n	1010e <__aeabi_fsub+0xea>
   10290:	4a31      	ldr	r2, [pc, #196]	; (10358 <__aeabi_fsub+0x334>)
   10292:	000c      	movs	r4, r1
   10294:	4013      	ands	r3, r2
   10296:	e70b      	b.n	100b0 <__aeabi_fsub+0x8c>
   10298:	2c00      	cmp	r4, #0
   1029a:	d11e      	bne.n	102da <__aeabi_fsub+0x2b6>
   1029c:	2b00      	cmp	r3, #0
   1029e:	d12f      	bne.n	10300 <__aeabi_fsub+0x2dc>
   102a0:	2e00      	cmp	r6, #0
   102a2:	d04f      	beq.n	10344 <__aeabi_fsub+0x320>
   102a4:	0033      	movs	r3, r6
   102a6:	000d      	movs	r5, r1
   102a8:	e702      	b.n	100b0 <__aeabi_fsub+0x8c>
   102aa:	2601      	movs	r6, #1
   102ac:	e755      	b.n	1015a <__aeabi_fsub+0x136>
   102ae:	2c00      	cmp	r4, #0
   102b0:	d11f      	bne.n	102f2 <__aeabi_fsub+0x2ce>
   102b2:	2b00      	cmp	r3, #0
   102b4:	d043      	beq.n	1033e <__aeabi_fsub+0x31a>
   102b6:	43c9      	mvns	r1, r1
   102b8:	2900      	cmp	r1, #0
   102ba:	d00b      	beq.n	102d4 <__aeabi_fsub+0x2b0>
   102bc:	28ff      	cmp	r0, #255	; 0xff
   102be:	d039      	beq.n	10334 <__aeabi_fsub+0x310>
   102c0:	291b      	cmp	r1, #27
   102c2:	dc44      	bgt.n	1034e <__aeabi_fsub+0x32a>
   102c4:	001c      	movs	r4, r3
   102c6:	2720      	movs	r7, #32
   102c8:	40cc      	lsrs	r4, r1
   102ca:	1a79      	subs	r1, r7, r1
   102cc:	408b      	lsls	r3, r1
   102ce:	1e59      	subs	r1, r3, #1
   102d0:	418b      	sbcs	r3, r1
   102d2:	4323      	orrs	r3, r4
   102d4:	199b      	adds	r3, r3, r6
   102d6:	0004      	movs	r4, r0
   102d8:	e740      	b.n	1015c <__aeabi_fsub+0x138>
   102da:	2b00      	cmp	r3, #0
   102dc:	d11a      	bne.n	10314 <__aeabi_fsub+0x2f0>
   102de:	2e00      	cmp	r6, #0
   102e0:	d124      	bne.n	1032c <__aeabi_fsub+0x308>
   102e2:	2780      	movs	r7, #128	; 0x80
   102e4:	2200      	movs	r2, #0
   102e6:	03ff      	lsls	r7, r7, #15
   102e8:	e71b      	b.n	10122 <__aeabi_fsub+0xfe>
   102ea:	0033      	movs	r3, r6
   102ec:	0004      	movs	r4, r0
   102ee:	000d      	movs	r5, r1
   102f0:	e6de      	b.n	100b0 <__aeabi_fsub+0x8c>
   102f2:	28ff      	cmp	r0, #255	; 0xff
   102f4:	d01e      	beq.n	10334 <__aeabi_fsub+0x310>
   102f6:	2480      	movs	r4, #128	; 0x80
   102f8:	04e4      	lsls	r4, r4, #19
   102fa:	4249      	negs	r1, r1
   102fc:	4323      	orrs	r3, r4
   102fe:	e7df      	b.n	102c0 <__aeabi_fsub+0x29c>
   10300:	2e00      	cmp	r6, #0
   10302:	d100      	bne.n	10306 <__aeabi_fsub+0x2e2>
   10304:	e6d4      	b.n	100b0 <__aeabi_fsub+0x8c>
   10306:	1b9f      	subs	r7, r3, r6
   10308:	017a      	lsls	r2, r7, #5
   1030a:	d400      	bmi.n	1030e <__aeabi_fsub+0x2ea>
   1030c:	e737      	b.n	1017e <__aeabi_fsub+0x15a>
   1030e:	1af3      	subs	r3, r6, r3
   10310:	000d      	movs	r5, r1
   10312:	e6cd      	b.n	100b0 <__aeabi_fsub+0x8c>
   10314:	24ff      	movs	r4, #255	; 0xff
   10316:	2e00      	cmp	r6, #0
   10318:	d100      	bne.n	1031c <__aeabi_fsub+0x2f8>
   1031a:	e6c9      	b.n	100b0 <__aeabi_fsub+0x8c>
   1031c:	2280      	movs	r2, #128	; 0x80
   1031e:	4650      	mov	r0, sl
   10320:	03d2      	lsls	r2, r2, #15
   10322:	4210      	tst	r0, r2
   10324:	d0a4      	beq.n	10270 <__aeabi_fsub+0x24c>
   10326:	4660      	mov	r0, ip
   10328:	4210      	tst	r0, r2
   1032a:	d1a1      	bne.n	10270 <__aeabi_fsub+0x24c>
   1032c:	0033      	movs	r3, r6
   1032e:	000d      	movs	r5, r1
   10330:	24ff      	movs	r4, #255	; 0xff
   10332:	e6bd      	b.n	100b0 <__aeabi_fsub+0x8c>
   10334:	0033      	movs	r3, r6
   10336:	24ff      	movs	r4, #255	; 0xff
   10338:	e6ba      	b.n	100b0 <__aeabi_fsub+0x8c>
   1033a:	2301      	movs	r3, #1
   1033c:	e76e      	b.n	1021c <__aeabi_fsub+0x1f8>
   1033e:	0033      	movs	r3, r6
   10340:	0004      	movs	r4, r0
   10342:	e6b5      	b.n	100b0 <__aeabi_fsub+0x8c>
   10344:	2700      	movs	r7, #0
   10346:	2200      	movs	r2, #0
   10348:	e71c      	b.n	10184 <__aeabi_fsub+0x160>
   1034a:	0033      	movs	r3, r6
   1034c:	e6b0      	b.n	100b0 <__aeabi_fsub+0x8c>
   1034e:	2301      	movs	r3, #1
   10350:	e7c0      	b.n	102d4 <__aeabi_fsub+0x2b0>
   10352:	46c0      	nop			; (mov r8, r8)
   10354:	7dffffff 	.word	0x7dffffff
   10358:	fbffffff 	.word	0xfbffffff

0001035c <__aeabi_f2iz>:
   1035c:	0241      	lsls	r1, r0, #9
   1035e:	0043      	lsls	r3, r0, #1
   10360:	0fc2      	lsrs	r2, r0, #31
   10362:	0a49      	lsrs	r1, r1, #9
   10364:	0e1b      	lsrs	r3, r3, #24
   10366:	2000      	movs	r0, #0
   10368:	2b7e      	cmp	r3, #126	; 0x7e
   1036a:	dd0d      	ble.n	10388 <__aeabi_f2iz+0x2c>
   1036c:	2b9d      	cmp	r3, #157	; 0x9d
   1036e:	dc0c      	bgt.n	1038a <__aeabi_f2iz+0x2e>
   10370:	2080      	movs	r0, #128	; 0x80
   10372:	0400      	lsls	r0, r0, #16
   10374:	4301      	orrs	r1, r0
   10376:	2b95      	cmp	r3, #149	; 0x95
   10378:	dc0a      	bgt.n	10390 <__aeabi_f2iz+0x34>
   1037a:	2096      	movs	r0, #150	; 0x96
   1037c:	1ac3      	subs	r3, r0, r3
   1037e:	40d9      	lsrs	r1, r3
   10380:	4248      	negs	r0, r1
   10382:	2a00      	cmp	r2, #0
   10384:	d100      	bne.n	10388 <__aeabi_f2iz+0x2c>
   10386:	0008      	movs	r0, r1
   10388:	4770      	bx	lr
   1038a:	4b03      	ldr	r3, [pc, #12]	; (10398 <__aeabi_f2iz+0x3c>)
   1038c:	18d0      	adds	r0, r2, r3
   1038e:	e7fb      	b.n	10388 <__aeabi_f2iz+0x2c>
   10390:	3b96      	subs	r3, #150	; 0x96
   10392:	4099      	lsls	r1, r3
   10394:	e7f4      	b.n	10380 <__aeabi_f2iz+0x24>
   10396:	46c0      	nop			; (mov r8, r8)
   10398:	7fffffff 	.word	0x7fffffff

0001039c <__aeabi_ui2f>:
   1039c:	b510      	push	{r4, lr}
   1039e:	1e04      	subs	r4, r0, #0
   103a0:	d027      	beq.n	103f2 <__aeabi_ui2f+0x56>
   103a2:	f001 fcc9 	bl	11d38 <__clzsi2>
   103a6:	239e      	movs	r3, #158	; 0x9e
   103a8:	1a1b      	subs	r3, r3, r0
   103aa:	2b96      	cmp	r3, #150	; 0x96
   103ac:	dc0a      	bgt.n	103c4 <__aeabi_ui2f+0x28>
   103ae:	2296      	movs	r2, #150	; 0x96
   103b0:	1ad2      	subs	r2, r2, r3
   103b2:	4094      	lsls	r4, r2
   103b4:	0264      	lsls	r4, r4, #9
   103b6:	0a64      	lsrs	r4, r4, #9
   103b8:	b2db      	uxtb	r3, r3
   103ba:	0264      	lsls	r4, r4, #9
   103bc:	05db      	lsls	r3, r3, #23
   103be:	0a60      	lsrs	r0, r4, #9
   103c0:	4318      	orrs	r0, r3
   103c2:	bd10      	pop	{r4, pc}
   103c4:	2b99      	cmp	r3, #153	; 0x99
   103c6:	dc17      	bgt.n	103f8 <__aeabi_ui2f+0x5c>
   103c8:	2299      	movs	r2, #153	; 0x99
   103ca:	1ad2      	subs	r2, r2, r3
   103cc:	2a00      	cmp	r2, #0
   103ce:	dd27      	ble.n	10420 <__aeabi_ui2f+0x84>
   103d0:	4094      	lsls	r4, r2
   103d2:	0022      	movs	r2, r4
   103d4:	4c13      	ldr	r4, [pc, #76]	; (10424 <__aeabi_ui2f+0x88>)
   103d6:	4014      	ands	r4, r2
   103d8:	0751      	lsls	r1, r2, #29
   103da:	d004      	beq.n	103e6 <__aeabi_ui2f+0x4a>
   103dc:	210f      	movs	r1, #15
   103de:	400a      	ands	r2, r1
   103e0:	2a04      	cmp	r2, #4
   103e2:	d000      	beq.n	103e6 <__aeabi_ui2f+0x4a>
   103e4:	3404      	adds	r4, #4
   103e6:	0162      	lsls	r2, r4, #5
   103e8:	d412      	bmi.n	10410 <__aeabi_ui2f+0x74>
   103ea:	01a4      	lsls	r4, r4, #6
   103ec:	0a64      	lsrs	r4, r4, #9
   103ee:	b2db      	uxtb	r3, r3
   103f0:	e7e3      	b.n	103ba <__aeabi_ui2f+0x1e>
   103f2:	2300      	movs	r3, #0
   103f4:	2400      	movs	r4, #0
   103f6:	e7e0      	b.n	103ba <__aeabi_ui2f+0x1e>
   103f8:	22b9      	movs	r2, #185	; 0xb9
   103fa:	0021      	movs	r1, r4
   103fc:	1ad2      	subs	r2, r2, r3
   103fe:	4091      	lsls	r1, r2
   10400:	000a      	movs	r2, r1
   10402:	1e51      	subs	r1, r2, #1
   10404:	418a      	sbcs	r2, r1
   10406:	2105      	movs	r1, #5
   10408:	1a09      	subs	r1, r1, r0
   1040a:	40cc      	lsrs	r4, r1
   1040c:	4314      	orrs	r4, r2
   1040e:	e7db      	b.n	103c8 <__aeabi_ui2f+0x2c>
   10410:	4b04      	ldr	r3, [pc, #16]	; (10424 <__aeabi_ui2f+0x88>)
   10412:	401c      	ands	r4, r3
   10414:	239f      	movs	r3, #159	; 0x9f
   10416:	01a4      	lsls	r4, r4, #6
   10418:	1a1b      	subs	r3, r3, r0
   1041a:	0a64      	lsrs	r4, r4, #9
   1041c:	b2db      	uxtb	r3, r3
   1041e:	e7cc      	b.n	103ba <__aeabi_ui2f+0x1e>
   10420:	0022      	movs	r2, r4
   10422:	e7d7      	b.n	103d4 <__aeabi_ui2f+0x38>
   10424:	fbffffff 	.word	0xfbffffff

00010428 <__aeabi_dadd>:
   10428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1042a:	4645      	mov	r5, r8
   1042c:	46de      	mov	lr, fp
   1042e:	4657      	mov	r7, sl
   10430:	464e      	mov	r6, r9
   10432:	030c      	lsls	r4, r1, #12
   10434:	b5e0      	push	{r5, r6, r7, lr}
   10436:	004e      	lsls	r6, r1, #1
   10438:	0fc9      	lsrs	r1, r1, #31
   1043a:	4688      	mov	r8, r1
   1043c:	000d      	movs	r5, r1
   1043e:	0a61      	lsrs	r1, r4, #9
   10440:	0f44      	lsrs	r4, r0, #29
   10442:	430c      	orrs	r4, r1
   10444:	00c7      	lsls	r7, r0, #3
   10446:	0319      	lsls	r1, r3, #12
   10448:	0058      	lsls	r0, r3, #1
   1044a:	0fdb      	lsrs	r3, r3, #31
   1044c:	469b      	mov	fp, r3
   1044e:	0a4b      	lsrs	r3, r1, #9
   10450:	0f51      	lsrs	r1, r2, #29
   10452:	430b      	orrs	r3, r1
   10454:	0d76      	lsrs	r6, r6, #21
   10456:	0d40      	lsrs	r0, r0, #21
   10458:	0019      	movs	r1, r3
   1045a:	00d2      	lsls	r2, r2, #3
   1045c:	45d8      	cmp	r8, fp
   1045e:	d100      	bne.n	10462 <__aeabi_dadd+0x3a>
   10460:	e0ae      	b.n	105c0 <__aeabi_dadd+0x198>
   10462:	1a35      	subs	r5, r6, r0
   10464:	2d00      	cmp	r5, #0
   10466:	dc00      	bgt.n	1046a <__aeabi_dadd+0x42>
   10468:	e0f6      	b.n	10658 <__aeabi_dadd+0x230>
   1046a:	2800      	cmp	r0, #0
   1046c:	d10f      	bne.n	1048e <__aeabi_dadd+0x66>
   1046e:	4313      	orrs	r3, r2
   10470:	d100      	bne.n	10474 <__aeabi_dadd+0x4c>
   10472:	e0db      	b.n	1062c <__aeabi_dadd+0x204>
   10474:	1e6b      	subs	r3, r5, #1
   10476:	2b00      	cmp	r3, #0
   10478:	d000      	beq.n	1047c <__aeabi_dadd+0x54>
   1047a:	e137      	b.n	106ec <__aeabi_dadd+0x2c4>
   1047c:	1aba      	subs	r2, r7, r2
   1047e:	4297      	cmp	r7, r2
   10480:	41bf      	sbcs	r7, r7
   10482:	1a64      	subs	r4, r4, r1
   10484:	427f      	negs	r7, r7
   10486:	1be4      	subs	r4, r4, r7
   10488:	2601      	movs	r6, #1
   1048a:	0017      	movs	r7, r2
   1048c:	e024      	b.n	104d8 <__aeabi_dadd+0xb0>
   1048e:	4bc6      	ldr	r3, [pc, #792]	; (107a8 <__aeabi_dadd+0x380>)
   10490:	429e      	cmp	r6, r3
   10492:	d04d      	beq.n	10530 <__aeabi_dadd+0x108>
   10494:	2380      	movs	r3, #128	; 0x80
   10496:	041b      	lsls	r3, r3, #16
   10498:	4319      	orrs	r1, r3
   1049a:	2d38      	cmp	r5, #56	; 0x38
   1049c:	dd00      	ble.n	104a0 <__aeabi_dadd+0x78>
   1049e:	e107      	b.n	106b0 <__aeabi_dadd+0x288>
   104a0:	2d1f      	cmp	r5, #31
   104a2:	dd00      	ble.n	104a6 <__aeabi_dadd+0x7e>
   104a4:	e138      	b.n	10718 <__aeabi_dadd+0x2f0>
   104a6:	2020      	movs	r0, #32
   104a8:	1b43      	subs	r3, r0, r5
   104aa:	469a      	mov	sl, r3
   104ac:	000b      	movs	r3, r1
   104ae:	4650      	mov	r0, sl
   104b0:	4083      	lsls	r3, r0
   104b2:	4699      	mov	r9, r3
   104b4:	0013      	movs	r3, r2
   104b6:	4648      	mov	r0, r9
   104b8:	40eb      	lsrs	r3, r5
   104ba:	4318      	orrs	r0, r3
   104bc:	0003      	movs	r3, r0
   104be:	4650      	mov	r0, sl
   104c0:	4082      	lsls	r2, r0
   104c2:	1e50      	subs	r0, r2, #1
   104c4:	4182      	sbcs	r2, r0
   104c6:	40e9      	lsrs	r1, r5
   104c8:	431a      	orrs	r2, r3
   104ca:	1aba      	subs	r2, r7, r2
   104cc:	1a61      	subs	r1, r4, r1
   104ce:	4297      	cmp	r7, r2
   104d0:	41a4      	sbcs	r4, r4
   104d2:	0017      	movs	r7, r2
   104d4:	4264      	negs	r4, r4
   104d6:	1b0c      	subs	r4, r1, r4
   104d8:	0223      	lsls	r3, r4, #8
   104da:	d562      	bpl.n	105a2 <__aeabi_dadd+0x17a>
   104dc:	0264      	lsls	r4, r4, #9
   104de:	0a65      	lsrs	r5, r4, #9
   104e0:	2d00      	cmp	r5, #0
   104e2:	d100      	bne.n	104e6 <__aeabi_dadd+0xbe>
   104e4:	e0df      	b.n	106a6 <__aeabi_dadd+0x27e>
   104e6:	0028      	movs	r0, r5
   104e8:	f001 fc26 	bl	11d38 <__clzsi2>
   104ec:	0003      	movs	r3, r0
   104ee:	3b08      	subs	r3, #8
   104f0:	2b1f      	cmp	r3, #31
   104f2:	dd00      	ble.n	104f6 <__aeabi_dadd+0xce>
   104f4:	e0d2      	b.n	1069c <__aeabi_dadd+0x274>
   104f6:	2220      	movs	r2, #32
   104f8:	003c      	movs	r4, r7
   104fa:	1ad2      	subs	r2, r2, r3
   104fc:	409d      	lsls	r5, r3
   104fe:	40d4      	lsrs	r4, r2
   10500:	409f      	lsls	r7, r3
   10502:	4325      	orrs	r5, r4
   10504:	429e      	cmp	r6, r3
   10506:	dd00      	ble.n	1050a <__aeabi_dadd+0xe2>
   10508:	e0c4      	b.n	10694 <__aeabi_dadd+0x26c>
   1050a:	1b9e      	subs	r6, r3, r6
   1050c:	1c73      	adds	r3, r6, #1
   1050e:	2b1f      	cmp	r3, #31
   10510:	dd00      	ble.n	10514 <__aeabi_dadd+0xec>
   10512:	e0f1      	b.n	106f8 <__aeabi_dadd+0x2d0>
   10514:	2220      	movs	r2, #32
   10516:	0038      	movs	r0, r7
   10518:	0029      	movs	r1, r5
   1051a:	1ad2      	subs	r2, r2, r3
   1051c:	40d8      	lsrs	r0, r3
   1051e:	4091      	lsls	r1, r2
   10520:	4097      	lsls	r7, r2
   10522:	002c      	movs	r4, r5
   10524:	4301      	orrs	r1, r0
   10526:	1e78      	subs	r0, r7, #1
   10528:	4187      	sbcs	r7, r0
   1052a:	40dc      	lsrs	r4, r3
   1052c:	2600      	movs	r6, #0
   1052e:	430f      	orrs	r7, r1
   10530:	077b      	lsls	r3, r7, #29
   10532:	d009      	beq.n	10548 <__aeabi_dadd+0x120>
   10534:	230f      	movs	r3, #15
   10536:	403b      	ands	r3, r7
   10538:	2b04      	cmp	r3, #4
   1053a:	d005      	beq.n	10548 <__aeabi_dadd+0x120>
   1053c:	1d3b      	adds	r3, r7, #4
   1053e:	42bb      	cmp	r3, r7
   10540:	41bf      	sbcs	r7, r7
   10542:	427f      	negs	r7, r7
   10544:	19e4      	adds	r4, r4, r7
   10546:	001f      	movs	r7, r3
   10548:	0223      	lsls	r3, r4, #8
   1054a:	d52c      	bpl.n	105a6 <__aeabi_dadd+0x17e>
   1054c:	4b96      	ldr	r3, [pc, #600]	; (107a8 <__aeabi_dadd+0x380>)
   1054e:	3601      	adds	r6, #1
   10550:	429e      	cmp	r6, r3
   10552:	d100      	bne.n	10556 <__aeabi_dadd+0x12e>
   10554:	e09a      	b.n	1068c <__aeabi_dadd+0x264>
   10556:	4645      	mov	r5, r8
   10558:	4b94      	ldr	r3, [pc, #592]	; (107ac <__aeabi_dadd+0x384>)
   1055a:	08ff      	lsrs	r7, r7, #3
   1055c:	401c      	ands	r4, r3
   1055e:	0760      	lsls	r0, r4, #29
   10560:	0576      	lsls	r6, r6, #21
   10562:	0264      	lsls	r4, r4, #9
   10564:	4307      	orrs	r7, r0
   10566:	0b24      	lsrs	r4, r4, #12
   10568:	0d76      	lsrs	r6, r6, #21
   1056a:	2100      	movs	r1, #0
   1056c:	0324      	lsls	r4, r4, #12
   1056e:	0b23      	lsrs	r3, r4, #12
   10570:	0d0c      	lsrs	r4, r1, #20
   10572:	4a8f      	ldr	r2, [pc, #572]	; (107b0 <__aeabi_dadd+0x388>)
   10574:	0524      	lsls	r4, r4, #20
   10576:	431c      	orrs	r4, r3
   10578:	4014      	ands	r4, r2
   1057a:	0533      	lsls	r3, r6, #20
   1057c:	4323      	orrs	r3, r4
   1057e:	005b      	lsls	r3, r3, #1
   10580:	07ed      	lsls	r5, r5, #31
   10582:	085b      	lsrs	r3, r3, #1
   10584:	432b      	orrs	r3, r5
   10586:	0038      	movs	r0, r7
   10588:	0019      	movs	r1, r3
   1058a:	bc3c      	pop	{r2, r3, r4, r5}
   1058c:	4690      	mov	r8, r2
   1058e:	4699      	mov	r9, r3
   10590:	46a2      	mov	sl, r4
   10592:	46ab      	mov	fp, r5
   10594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10596:	4664      	mov	r4, ip
   10598:	4304      	orrs	r4, r0
   1059a:	d100      	bne.n	1059e <__aeabi_dadd+0x176>
   1059c:	e211      	b.n	109c2 <__aeabi_dadd+0x59a>
   1059e:	0004      	movs	r4, r0
   105a0:	4667      	mov	r7, ip
   105a2:	077b      	lsls	r3, r7, #29
   105a4:	d1c6      	bne.n	10534 <__aeabi_dadd+0x10c>
   105a6:	4645      	mov	r5, r8
   105a8:	0760      	lsls	r0, r4, #29
   105aa:	08ff      	lsrs	r7, r7, #3
   105ac:	4307      	orrs	r7, r0
   105ae:	08e4      	lsrs	r4, r4, #3
   105b0:	4b7d      	ldr	r3, [pc, #500]	; (107a8 <__aeabi_dadd+0x380>)
   105b2:	429e      	cmp	r6, r3
   105b4:	d030      	beq.n	10618 <__aeabi_dadd+0x1f0>
   105b6:	0324      	lsls	r4, r4, #12
   105b8:	0576      	lsls	r6, r6, #21
   105ba:	0b24      	lsrs	r4, r4, #12
   105bc:	0d76      	lsrs	r6, r6, #21
   105be:	e7d4      	b.n	1056a <__aeabi_dadd+0x142>
   105c0:	1a33      	subs	r3, r6, r0
   105c2:	469a      	mov	sl, r3
   105c4:	2b00      	cmp	r3, #0
   105c6:	dd78      	ble.n	106ba <__aeabi_dadd+0x292>
   105c8:	2800      	cmp	r0, #0
   105ca:	d031      	beq.n	10630 <__aeabi_dadd+0x208>
   105cc:	4876      	ldr	r0, [pc, #472]	; (107a8 <__aeabi_dadd+0x380>)
   105ce:	4286      	cmp	r6, r0
   105d0:	d0ae      	beq.n	10530 <__aeabi_dadd+0x108>
   105d2:	2080      	movs	r0, #128	; 0x80
   105d4:	0400      	lsls	r0, r0, #16
   105d6:	4301      	orrs	r1, r0
   105d8:	4653      	mov	r3, sl
   105da:	2b38      	cmp	r3, #56	; 0x38
   105dc:	dc00      	bgt.n	105e0 <__aeabi_dadd+0x1b8>
   105de:	e0e9      	b.n	107b4 <__aeabi_dadd+0x38c>
   105e0:	430a      	orrs	r2, r1
   105e2:	1e51      	subs	r1, r2, #1
   105e4:	418a      	sbcs	r2, r1
   105e6:	2100      	movs	r1, #0
   105e8:	19d2      	adds	r2, r2, r7
   105ea:	42ba      	cmp	r2, r7
   105ec:	41bf      	sbcs	r7, r7
   105ee:	1909      	adds	r1, r1, r4
   105f0:	427c      	negs	r4, r7
   105f2:	0017      	movs	r7, r2
   105f4:	190c      	adds	r4, r1, r4
   105f6:	0223      	lsls	r3, r4, #8
   105f8:	d5d3      	bpl.n	105a2 <__aeabi_dadd+0x17a>
   105fa:	4b6b      	ldr	r3, [pc, #428]	; (107a8 <__aeabi_dadd+0x380>)
   105fc:	3601      	adds	r6, #1
   105fe:	429e      	cmp	r6, r3
   10600:	d100      	bne.n	10604 <__aeabi_dadd+0x1dc>
   10602:	e13a      	b.n	1087a <__aeabi_dadd+0x452>
   10604:	2001      	movs	r0, #1
   10606:	4b69      	ldr	r3, [pc, #420]	; (107ac <__aeabi_dadd+0x384>)
   10608:	401c      	ands	r4, r3
   1060a:	087b      	lsrs	r3, r7, #1
   1060c:	4007      	ands	r7, r0
   1060e:	431f      	orrs	r7, r3
   10610:	07e0      	lsls	r0, r4, #31
   10612:	4307      	orrs	r7, r0
   10614:	0864      	lsrs	r4, r4, #1
   10616:	e78b      	b.n	10530 <__aeabi_dadd+0x108>
   10618:	0023      	movs	r3, r4
   1061a:	433b      	orrs	r3, r7
   1061c:	d100      	bne.n	10620 <__aeabi_dadd+0x1f8>
   1061e:	e1cb      	b.n	109b8 <__aeabi_dadd+0x590>
   10620:	2280      	movs	r2, #128	; 0x80
   10622:	0312      	lsls	r2, r2, #12
   10624:	4314      	orrs	r4, r2
   10626:	0324      	lsls	r4, r4, #12
   10628:	0b24      	lsrs	r4, r4, #12
   1062a:	e79e      	b.n	1056a <__aeabi_dadd+0x142>
   1062c:	002e      	movs	r6, r5
   1062e:	e77f      	b.n	10530 <__aeabi_dadd+0x108>
   10630:	0008      	movs	r0, r1
   10632:	4310      	orrs	r0, r2
   10634:	d100      	bne.n	10638 <__aeabi_dadd+0x210>
   10636:	e0b4      	b.n	107a2 <__aeabi_dadd+0x37a>
   10638:	1e58      	subs	r0, r3, #1
   1063a:	2800      	cmp	r0, #0
   1063c:	d000      	beq.n	10640 <__aeabi_dadd+0x218>
   1063e:	e0de      	b.n	107fe <__aeabi_dadd+0x3d6>
   10640:	18ba      	adds	r2, r7, r2
   10642:	42ba      	cmp	r2, r7
   10644:	419b      	sbcs	r3, r3
   10646:	1864      	adds	r4, r4, r1
   10648:	425b      	negs	r3, r3
   1064a:	18e4      	adds	r4, r4, r3
   1064c:	0017      	movs	r7, r2
   1064e:	2601      	movs	r6, #1
   10650:	0223      	lsls	r3, r4, #8
   10652:	d5a6      	bpl.n	105a2 <__aeabi_dadd+0x17a>
   10654:	2602      	movs	r6, #2
   10656:	e7d5      	b.n	10604 <__aeabi_dadd+0x1dc>
   10658:	2d00      	cmp	r5, #0
   1065a:	d16e      	bne.n	1073a <__aeabi_dadd+0x312>
   1065c:	1c70      	adds	r0, r6, #1
   1065e:	0540      	lsls	r0, r0, #21
   10660:	0d40      	lsrs	r0, r0, #21
   10662:	2801      	cmp	r0, #1
   10664:	dc00      	bgt.n	10668 <__aeabi_dadd+0x240>
   10666:	e0f9      	b.n	1085c <__aeabi_dadd+0x434>
   10668:	1ab8      	subs	r0, r7, r2
   1066a:	4684      	mov	ip, r0
   1066c:	4287      	cmp	r7, r0
   1066e:	4180      	sbcs	r0, r0
   10670:	1ae5      	subs	r5, r4, r3
   10672:	4240      	negs	r0, r0
   10674:	1a2d      	subs	r5, r5, r0
   10676:	0228      	lsls	r0, r5, #8
   10678:	d400      	bmi.n	1067c <__aeabi_dadd+0x254>
   1067a:	e089      	b.n	10790 <__aeabi_dadd+0x368>
   1067c:	1bd7      	subs	r7, r2, r7
   1067e:	42ba      	cmp	r2, r7
   10680:	4192      	sbcs	r2, r2
   10682:	1b1c      	subs	r4, r3, r4
   10684:	4252      	negs	r2, r2
   10686:	1aa5      	subs	r5, r4, r2
   10688:	46d8      	mov	r8, fp
   1068a:	e729      	b.n	104e0 <__aeabi_dadd+0xb8>
   1068c:	4645      	mov	r5, r8
   1068e:	2400      	movs	r4, #0
   10690:	2700      	movs	r7, #0
   10692:	e76a      	b.n	1056a <__aeabi_dadd+0x142>
   10694:	4c45      	ldr	r4, [pc, #276]	; (107ac <__aeabi_dadd+0x384>)
   10696:	1af6      	subs	r6, r6, r3
   10698:	402c      	ands	r4, r5
   1069a:	e749      	b.n	10530 <__aeabi_dadd+0x108>
   1069c:	003d      	movs	r5, r7
   1069e:	3828      	subs	r0, #40	; 0x28
   106a0:	4085      	lsls	r5, r0
   106a2:	2700      	movs	r7, #0
   106a4:	e72e      	b.n	10504 <__aeabi_dadd+0xdc>
   106a6:	0038      	movs	r0, r7
   106a8:	f001 fb46 	bl	11d38 <__clzsi2>
   106ac:	3020      	adds	r0, #32
   106ae:	e71d      	b.n	104ec <__aeabi_dadd+0xc4>
   106b0:	430a      	orrs	r2, r1
   106b2:	1e51      	subs	r1, r2, #1
   106b4:	418a      	sbcs	r2, r1
   106b6:	2100      	movs	r1, #0
   106b8:	e707      	b.n	104ca <__aeabi_dadd+0xa2>
   106ba:	2b00      	cmp	r3, #0
   106bc:	d000      	beq.n	106c0 <__aeabi_dadd+0x298>
   106be:	e0f3      	b.n	108a8 <__aeabi_dadd+0x480>
   106c0:	1c70      	adds	r0, r6, #1
   106c2:	0543      	lsls	r3, r0, #21
   106c4:	0d5b      	lsrs	r3, r3, #21
   106c6:	2b01      	cmp	r3, #1
   106c8:	dc00      	bgt.n	106cc <__aeabi_dadd+0x2a4>
   106ca:	e0ad      	b.n	10828 <__aeabi_dadd+0x400>
   106cc:	4b36      	ldr	r3, [pc, #216]	; (107a8 <__aeabi_dadd+0x380>)
   106ce:	4298      	cmp	r0, r3
   106d0:	d100      	bne.n	106d4 <__aeabi_dadd+0x2ac>
   106d2:	e0d1      	b.n	10878 <__aeabi_dadd+0x450>
   106d4:	18ba      	adds	r2, r7, r2
   106d6:	42ba      	cmp	r2, r7
   106d8:	41bf      	sbcs	r7, r7
   106da:	1864      	adds	r4, r4, r1
   106dc:	427f      	negs	r7, r7
   106de:	19e4      	adds	r4, r4, r7
   106e0:	07e7      	lsls	r7, r4, #31
   106e2:	0852      	lsrs	r2, r2, #1
   106e4:	4317      	orrs	r7, r2
   106e6:	0864      	lsrs	r4, r4, #1
   106e8:	0006      	movs	r6, r0
   106ea:	e721      	b.n	10530 <__aeabi_dadd+0x108>
   106ec:	482e      	ldr	r0, [pc, #184]	; (107a8 <__aeabi_dadd+0x380>)
   106ee:	4285      	cmp	r5, r0
   106f0:	d100      	bne.n	106f4 <__aeabi_dadd+0x2cc>
   106f2:	e093      	b.n	1081c <__aeabi_dadd+0x3f4>
   106f4:	001d      	movs	r5, r3
   106f6:	e6d0      	b.n	1049a <__aeabi_dadd+0x72>
   106f8:	0029      	movs	r1, r5
   106fa:	3e1f      	subs	r6, #31
   106fc:	40f1      	lsrs	r1, r6
   106fe:	2b20      	cmp	r3, #32
   10700:	d100      	bne.n	10704 <__aeabi_dadd+0x2dc>
   10702:	e08d      	b.n	10820 <__aeabi_dadd+0x3f8>
   10704:	2240      	movs	r2, #64	; 0x40
   10706:	1ad3      	subs	r3, r2, r3
   10708:	409d      	lsls	r5, r3
   1070a:	432f      	orrs	r7, r5
   1070c:	1e7d      	subs	r5, r7, #1
   1070e:	41af      	sbcs	r7, r5
   10710:	2400      	movs	r4, #0
   10712:	430f      	orrs	r7, r1
   10714:	2600      	movs	r6, #0
   10716:	e744      	b.n	105a2 <__aeabi_dadd+0x17a>
   10718:	002b      	movs	r3, r5
   1071a:	0008      	movs	r0, r1
   1071c:	3b20      	subs	r3, #32
   1071e:	40d8      	lsrs	r0, r3
   10720:	0003      	movs	r3, r0
   10722:	2d20      	cmp	r5, #32
   10724:	d100      	bne.n	10728 <__aeabi_dadd+0x300>
   10726:	e07d      	b.n	10824 <__aeabi_dadd+0x3fc>
   10728:	2040      	movs	r0, #64	; 0x40
   1072a:	1b45      	subs	r5, r0, r5
   1072c:	40a9      	lsls	r1, r5
   1072e:	430a      	orrs	r2, r1
   10730:	1e51      	subs	r1, r2, #1
   10732:	418a      	sbcs	r2, r1
   10734:	2100      	movs	r1, #0
   10736:	431a      	orrs	r2, r3
   10738:	e6c7      	b.n	104ca <__aeabi_dadd+0xa2>
   1073a:	2e00      	cmp	r6, #0
   1073c:	d050      	beq.n	107e0 <__aeabi_dadd+0x3b8>
   1073e:	4e1a      	ldr	r6, [pc, #104]	; (107a8 <__aeabi_dadd+0x380>)
   10740:	42b0      	cmp	r0, r6
   10742:	d057      	beq.n	107f4 <__aeabi_dadd+0x3cc>
   10744:	2680      	movs	r6, #128	; 0x80
   10746:	426b      	negs	r3, r5
   10748:	4699      	mov	r9, r3
   1074a:	0436      	lsls	r6, r6, #16
   1074c:	4334      	orrs	r4, r6
   1074e:	464b      	mov	r3, r9
   10750:	2b38      	cmp	r3, #56	; 0x38
   10752:	dd00      	ble.n	10756 <__aeabi_dadd+0x32e>
   10754:	e0d6      	b.n	10904 <__aeabi_dadd+0x4dc>
   10756:	2b1f      	cmp	r3, #31
   10758:	dd00      	ble.n	1075c <__aeabi_dadd+0x334>
   1075a:	e135      	b.n	109c8 <__aeabi_dadd+0x5a0>
   1075c:	2620      	movs	r6, #32
   1075e:	1af5      	subs	r5, r6, r3
   10760:	0026      	movs	r6, r4
   10762:	40ae      	lsls	r6, r5
   10764:	46b2      	mov	sl, r6
   10766:	003e      	movs	r6, r7
   10768:	40de      	lsrs	r6, r3
   1076a:	46ac      	mov	ip, r5
   1076c:	0035      	movs	r5, r6
   1076e:	4656      	mov	r6, sl
   10770:	432e      	orrs	r6, r5
   10772:	4665      	mov	r5, ip
   10774:	40af      	lsls	r7, r5
   10776:	1e7d      	subs	r5, r7, #1
   10778:	41af      	sbcs	r7, r5
   1077a:	40dc      	lsrs	r4, r3
   1077c:	4337      	orrs	r7, r6
   1077e:	1bd7      	subs	r7, r2, r7
   10780:	42ba      	cmp	r2, r7
   10782:	4192      	sbcs	r2, r2
   10784:	1b0c      	subs	r4, r1, r4
   10786:	4252      	negs	r2, r2
   10788:	1aa4      	subs	r4, r4, r2
   1078a:	0006      	movs	r6, r0
   1078c:	46d8      	mov	r8, fp
   1078e:	e6a3      	b.n	104d8 <__aeabi_dadd+0xb0>
   10790:	4664      	mov	r4, ip
   10792:	4667      	mov	r7, ip
   10794:	432c      	orrs	r4, r5
   10796:	d000      	beq.n	1079a <__aeabi_dadd+0x372>
   10798:	e6a2      	b.n	104e0 <__aeabi_dadd+0xb8>
   1079a:	2500      	movs	r5, #0
   1079c:	2600      	movs	r6, #0
   1079e:	2700      	movs	r7, #0
   107a0:	e706      	b.n	105b0 <__aeabi_dadd+0x188>
   107a2:	001e      	movs	r6, r3
   107a4:	e6c4      	b.n	10530 <__aeabi_dadd+0x108>
   107a6:	46c0      	nop			; (mov r8, r8)
   107a8:	000007ff 	.word	0x000007ff
   107ac:	ff7fffff 	.word	0xff7fffff
   107b0:	800fffff 	.word	0x800fffff
   107b4:	2b1f      	cmp	r3, #31
   107b6:	dc63      	bgt.n	10880 <__aeabi_dadd+0x458>
   107b8:	2020      	movs	r0, #32
   107ba:	1ac3      	subs	r3, r0, r3
   107bc:	0008      	movs	r0, r1
   107be:	4098      	lsls	r0, r3
   107c0:	469c      	mov	ip, r3
   107c2:	4683      	mov	fp, r0
   107c4:	4653      	mov	r3, sl
   107c6:	0010      	movs	r0, r2
   107c8:	40d8      	lsrs	r0, r3
   107ca:	0003      	movs	r3, r0
   107cc:	4658      	mov	r0, fp
   107ce:	4318      	orrs	r0, r3
   107d0:	4663      	mov	r3, ip
   107d2:	409a      	lsls	r2, r3
   107d4:	1e53      	subs	r3, r2, #1
   107d6:	419a      	sbcs	r2, r3
   107d8:	4653      	mov	r3, sl
   107da:	4302      	orrs	r2, r0
   107dc:	40d9      	lsrs	r1, r3
   107de:	e703      	b.n	105e8 <__aeabi_dadd+0x1c0>
   107e0:	0026      	movs	r6, r4
   107e2:	433e      	orrs	r6, r7
   107e4:	d006      	beq.n	107f4 <__aeabi_dadd+0x3cc>
   107e6:	43eb      	mvns	r3, r5
   107e8:	4699      	mov	r9, r3
   107ea:	2b00      	cmp	r3, #0
   107ec:	d0c7      	beq.n	1077e <__aeabi_dadd+0x356>
   107ee:	4e94      	ldr	r6, [pc, #592]	; (10a40 <__aeabi_dadd+0x618>)
   107f0:	42b0      	cmp	r0, r6
   107f2:	d1ac      	bne.n	1074e <__aeabi_dadd+0x326>
   107f4:	000c      	movs	r4, r1
   107f6:	0017      	movs	r7, r2
   107f8:	0006      	movs	r6, r0
   107fa:	46d8      	mov	r8, fp
   107fc:	e698      	b.n	10530 <__aeabi_dadd+0x108>
   107fe:	4b90      	ldr	r3, [pc, #576]	; (10a40 <__aeabi_dadd+0x618>)
   10800:	459a      	cmp	sl, r3
   10802:	d00b      	beq.n	1081c <__aeabi_dadd+0x3f4>
   10804:	4682      	mov	sl, r0
   10806:	e6e7      	b.n	105d8 <__aeabi_dadd+0x1b0>
   10808:	2800      	cmp	r0, #0
   1080a:	d000      	beq.n	1080e <__aeabi_dadd+0x3e6>
   1080c:	e09e      	b.n	1094c <__aeabi_dadd+0x524>
   1080e:	0018      	movs	r0, r3
   10810:	4310      	orrs	r0, r2
   10812:	d100      	bne.n	10816 <__aeabi_dadd+0x3ee>
   10814:	e0e9      	b.n	109ea <__aeabi_dadd+0x5c2>
   10816:	001c      	movs	r4, r3
   10818:	0017      	movs	r7, r2
   1081a:	46d8      	mov	r8, fp
   1081c:	4e88      	ldr	r6, [pc, #544]	; (10a40 <__aeabi_dadd+0x618>)
   1081e:	e687      	b.n	10530 <__aeabi_dadd+0x108>
   10820:	2500      	movs	r5, #0
   10822:	e772      	b.n	1070a <__aeabi_dadd+0x2e2>
   10824:	2100      	movs	r1, #0
   10826:	e782      	b.n	1072e <__aeabi_dadd+0x306>
   10828:	0023      	movs	r3, r4
   1082a:	433b      	orrs	r3, r7
   1082c:	2e00      	cmp	r6, #0
   1082e:	d000      	beq.n	10832 <__aeabi_dadd+0x40a>
   10830:	e0ab      	b.n	1098a <__aeabi_dadd+0x562>
   10832:	2b00      	cmp	r3, #0
   10834:	d100      	bne.n	10838 <__aeabi_dadd+0x410>
   10836:	e0e7      	b.n	10a08 <__aeabi_dadd+0x5e0>
   10838:	000b      	movs	r3, r1
   1083a:	4313      	orrs	r3, r2
   1083c:	d100      	bne.n	10840 <__aeabi_dadd+0x418>
   1083e:	e677      	b.n	10530 <__aeabi_dadd+0x108>
   10840:	18ba      	adds	r2, r7, r2
   10842:	42ba      	cmp	r2, r7
   10844:	41bf      	sbcs	r7, r7
   10846:	1864      	adds	r4, r4, r1
   10848:	427f      	negs	r7, r7
   1084a:	19e4      	adds	r4, r4, r7
   1084c:	0223      	lsls	r3, r4, #8
   1084e:	d400      	bmi.n	10852 <__aeabi_dadd+0x42a>
   10850:	e0f2      	b.n	10a38 <__aeabi_dadd+0x610>
   10852:	4b7c      	ldr	r3, [pc, #496]	; (10a44 <__aeabi_dadd+0x61c>)
   10854:	0017      	movs	r7, r2
   10856:	401c      	ands	r4, r3
   10858:	0006      	movs	r6, r0
   1085a:	e669      	b.n	10530 <__aeabi_dadd+0x108>
   1085c:	0020      	movs	r0, r4
   1085e:	4338      	orrs	r0, r7
   10860:	2e00      	cmp	r6, #0
   10862:	d1d1      	bne.n	10808 <__aeabi_dadd+0x3e0>
   10864:	2800      	cmp	r0, #0
   10866:	d15b      	bne.n	10920 <__aeabi_dadd+0x4f8>
   10868:	001c      	movs	r4, r3
   1086a:	4314      	orrs	r4, r2
   1086c:	d100      	bne.n	10870 <__aeabi_dadd+0x448>
   1086e:	e0a8      	b.n	109c2 <__aeabi_dadd+0x59a>
   10870:	001c      	movs	r4, r3
   10872:	0017      	movs	r7, r2
   10874:	46d8      	mov	r8, fp
   10876:	e65b      	b.n	10530 <__aeabi_dadd+0x108>
   10878:	0006      	movs	r6, r0
   1087a:	2400      	movs	r4, #0
   1087c:	2700      	movs	r7, #0
   1087e:	e697      	b.n	105b0 <__aeabi_dadd+0x188>
   10880:	4650      	mov	r0, sl
   10882:	000b      	movs	r3, r1
   10884:	3820      	subs	r0, #32
   10886:	40c3      	lsrs	r3, r0
   10888:	4699      	mov	r9, r3
   1088a:	4653      	mov	r3, sl
   1088c:	2b20      	cmp	r3, #32
   1088e:	d100      	bne.n	10892 <__aeabi_dadd+0x46a>
   10890:	e095      	b.n	109be <__aeabi_dadd+0x596>
   10892:	2340      	movs	r3, #64	; 0x40
   10894:	4650      	mov	r0, sl
   10896:	1a1b      	subs	r3, r3, r0
   10898:	4099      	lsls	r1, r3
   1089a:	430a      	orrs	r2, r1
   1089c:	1e51      	subs	r1, r2, #1
   1089e:	418a      	sbcs	r2, r1
   108a0:	464b      	mov	r3, r9
   108a2:	2100      	movs	r1, #0
   108a4:	431a      	orrs	r2, r3
   108a6:	e69f      	b.n	105e8 <__aeabi_dadd+0x1c0>
   108a8:	2e00      	cmp	r6, #0
   108aa:	d130      	bne.n	1090e <__aeabi_dadd+0x4e6>
   108ac:	0026      	movs	r6, r4
   108ae:	433e      	orrs	r6, r7
   108b0:	d067      	beq.n	10982 <__aeabi_dadd+0x55a>
   108b2:	43db      	mvns	r3, r3
   108b4:	469a      	mov	sl, r3
   108b6:	2b00      	cmp	r3, #0
   108b8:	d01c      	beq.n	108f4 <__aeabi_dadd+0x4cc>
   108ba:	4e61      	ldr	r6, [pc, #388]	; (10a40 <__aeabi_dadd+0x618>)
   108bc:	42b0      	cmp	r0, r6
   108be:	d060      	beq.n	10982 <__aeabi_dadd+0x55a>
   108c0:	4653      	mov	r3, sl
   108c2:	2b38      	cmp	r3, #56	; 0x38
   108c4:	dd00      	ble.n	108c8 <__aeabi_dadd+0x4a0>
   108c6:	e096      	b.n	109f6 <__aeabi_dadd+0x5ce>
   108c8:	2b1f      	cmp	r3, #31
   108ca:	dd00      	ble.n	108ce <__aeabi_dadd+0x4a6>
   108cc:	e09f      	b.n	10a0e <__aeabi_dadd+0x5e6>
   108ce:	2620      	movs	r6, #32
   108d0:	1af3      	subs	r3, r6, r3
   108d2:	0026      	movs	r6, r4
   108d4:	409e      	lsls	r6, r3
   108d6:	469c      	mov	ip, r3
   108d8:	46b3      	mov	fp, r6
   108da:	4653      	mov	r3, sl
   108dc:	003e      	movs	r6, r7
   108de:	40de      	lsrs	r6, r3
   108e0:	0033      	movs	r3, r6
   108e2:	465e      	mov	r6, fp
   108e4:	431e      	orrs	r6, r3
   108e6:	4663      	mov	r3, ip
   108e8:	409f      	lsls	r7, r3
   108ea:	1e7b      	subs	r3, r7, #1
   108ec:	419f      	sbcs	r7, r3
   108ee:	4653      	mov	r3, sl
   108f0:	40dc      	lsrs	r4, r3
   108f2:	4337      	orrs	r7, r6
   108f4:	18bf      	adds	r7, r7, r2
   108f6:	4297      	cmp	r7, r2
   108f8:	4192      	sbcs	r2, r2
   108fa:	1864      	adds	r4, r4, r1
   108fc:	4252      	negs	r2, r2
   108fe:	18a4      	adds	r4, r4, r2
   10900:	0006      	movs	r6, r0
   10902:	e678      	b.n	105f6 <__aeabi_dadd+0x1ce>
   10904:	4327      	orrs	r7, r4
   10906:	1e7c      	subs	r4, r7, #1
   10908:	41a7      	sbcs	r7, r4
   1090a:	2400      	movs	r4, #0
   1090c:	e737      	b.n	1077e <__aeabi_dadd+0x356>
   1090e:	4e4c      	ldr	r6, [pc, #304]	; (10a40 <__aeabi_dadd+0x618>)
   10910:	42b0      	cmp	r0, r6
   10912:	d036      	beq.n	10982 <__aeabi_dadd+0x55a>
   10914:	2680      	movs	r6, #128	; 0x80
   10916:	425b      	negs	r3, r3
   10918:	0436      	lsls	r6, r6, #16
   1091a:	469a      	mov	sl, r3
   1091c:	4334      	orrs	r4, r6
   1091e:	e7cf      	b.n	108c0 <__aeabi_dadd+0x498>
   10920:	0018      	movs	r0, r3
   10922:	4310      	orrs	r0, r2
   10924:	d100      	bne.n	10928 <__aeabi_dadd+0x500>
   10926:	e603      	b.n	10530 <__aeabi_dadd+0x108>
   10928:	1ab8      	subs	r0, r7, r2
   1092a:	4684      	mov	ip, r0
   1092c:	4567      	cmp	r7, ip
   1092e:	41ad      	sbcs	r5, r5
   10930:	1ae0      	subs	r0, r4, r3
   10932:	426d      	negs	r5, r5
   10934:	1b40      	subs	r0, r0, r5
   10936:	0205      	lsls	r5, r0, #8
   10938:	d400      	bmi.n	1093c <__aeabi_dadd+0x514>
   1093a:	e62c      	b.n	10596 <__aeabi_dadd+0x16e>
   1093c:	1bd7      	subs	r7, r2, r7
   1093e:	42ba      	cmp	r2, r7
   10940:	4192      	sbcs	r2, r2
   10942:	1b1c      	subs	r4, r3, r4
   10944:	4252      	negs	r2, r2
   10946:	1aa4      	subs	r4, r4, r2
   10948:	46d8      	mov	r8, fp
   1094a:	e5f1      	b.n	10530 <__aeabi_dadd+0x108>
   1094c:	0018      	movs	r0, r3
   1094e:	4310      	orrs	r0, r2
   10950:	d100      	bne.n	10954 <__aeabi_dadd+0x52c>
   10952:	e763      	b.n	1081c <__aeabi_dadd+0x3f4>
   10954:	08f8      	lsrs	r0, r7, #3
   10956:	0767      	lsls	r7, r4, #29
   10958:	4307      	orrs	r7, r0
   1095a:	2080      	movs	r0, #128	; 0x80
   1095c:	08e4      	lsrs	r4, r4, #3
   1095e:	0300      	lsls	r0, r0, #12
   10960:	4204      	tst	r4, r0
   10962:	d008      	beq.n	10976 <__aeabi_dadd+0x54e>
   10964:	08dd      	lsrs	r5, r3, #3
   10966:	4205      	tst	r5, r0
   10968:	d105      	bne.n	10976 <__aeabi_dadd+0x54e>
   1096a:	08d2      	lsrs	r2, r2, #3
   1096c:	0759      	lsls	r1, r3, #29
   1096e:	4311      	orrs	r1, r2
   10970:	000f      	movs	r7, r1
   10972:	002c      	movs	r4, r5
   10974:	46d8      	mov	r8, fp
   10976:	0f7b      	lsrs	r3, r7, #29
   10978:	00e4      	lsls	r4, r4, #3
   1097a:	431c      	orrs	r4, r3
   1097c:	00ff      	lsls	r7, r7, #3
   1097e:	4e30      	ldr	r6, [pc, #192]	; (10a40 <__aeabi_dadd+0x618>)
   10980:	e5d6      	b.n	10530 <__aeabi_dadd+0x108>
   10982:	000c      	movs	r4, r1
   10984:	0017      	movs	r7, r2
   10986:	0006      	movs	r6, r0
   10988:	e5d2      	b.n	10530 <__aeabi_dadd+0x108>
   1098a:	2b00      	cmp	r3, #0
   1098c:	d038      	beq.n	10a00 <__aeabi_dadd+0x5d8>
   1098e:	000b      	movs	r3, r1
   10990:	4313      	orrs	r3, r2
   10992:	d100      	bne.n	10996 <__aeabi_dadd+0x56e>
   10994:	e742      	b.n	1081c <__aeabi_dadd+0x3f4>
   10996:	08f8      	lsrs	r0, r7, #3
   10998:	0767      	lsls	r7, r4, #29
   1099a:	4307      	orrs	r7, r0
   1099c:	2080      	movs	r0, #128	; 0x80
   1099e:	08e4      	lsrs	r4, r4, #3
   109a0:	0300      	lsls	r0, r0, #12
   109a2:	4204      	tst	r4, r0
   109a4:	d0e7      	beq.n	10976 <__aeabi_dadd+0x54e>
   109a6:	08cb      	lsrs	r3, r1, #3
   109a8:	4203      	tst	r3, r0
   109aa:	d1e4      	bne.n	10976 <__aeabi_dadd+0x54e>
   109ac:	08d2      	lsrs	r2, r2, #3
   109ae:	0749      	lsls	r1, r1, #29
   109b0:	4311      	orrs	r1, r2
   109b2:	000f      	movs	r7, r1
   109b4:	001c      	movs	r4, r3
   109b6:	e7de      	b.n	10976 <__aeabi_dadd+0x54e>
   109b8:	2700      	movs	r7, #0
   109ba:	2400      	movs	r4, #0
   109bc:	e5d5      	b.n	1056a <__aeabi_dadd+0x142>
   109be:	2100      	movs	r1, #0
   109c0:	e76b      	b.n	1089a <__aeabi_dadd+0x472>
   109c2:	2500      	movs	r5, #0
   109c4:	2700      	movs	r7, #0
   109c6:	e5f3      	b.n	105b0 <__aeabi_dadd+0x188>
   109c8:	464e      	mov	r6, r9
   109ca:	0025      	movs	r5, r4
   109cc:	3e20      	subs	r6, #32
   109ce:	40f5      	lsrs	r5, r6
   109d0:	464b      	mov	r3, r9
   109d2:	002e      	movs	r6, r5
   109d4:	2b20      	cmp	r3, #32
   109d6:	d02d      	beq.n	10a34 <__aeabi_dadd+0x60c>
   109d8:	2540      	movs	r5, #64	; 0x40
   109da:	1aed      	subs	r5, r5, r3
   109dc:	40ac      	lsls	r4, r5
   109de:	4327      	orrs	r7, r4
   109e0:	1e7c      	subs	r4, r7, #1
   109e2:	41a7      	sbcs	r7, r4
   109e4:	2400      	movs	r4, #0
   109e6:	4337      	orrs	r7, r6
   109e8:	e6c9      	b.n	1077e <__aeabi_dadd+0x356>
   109ea:	2480      	movs	r4, #128	; 0x80
   109ec:	2500      	movs	r5, #0
   109ee:	0324      	lsls	r4, r4, #12
   109f0:	4e13      	ldr	r6, [pc, #76]	; (10a40 <__aeabi_dadd+0x618>)
   109f2:	2700      	movs	r7, #0
   109f4:	e5dc      	b.n	105b0 <__aeabi_dadd+0x188>
   109f6:	4327      	orrs	r7, r4
   109f8:	1e7c      	subs	r4, r7, #1
   109fa:	41a7      	sbcs	r7, r4
   109fc:	2400      	movs	r4, #0
   109fe:	e779      	b.n	108f4 <__aeabi_dadd+0x4cc>
   10a00:	000c      	movs	r4, r1
   10a02:	0017      	movs	r7, r2
   10a04:	4e0e      	ldr	r6, [pc, #56]	; (10a40 <__aeabi_dadd+0x618>)
   10a06:	e593      	b.n	10530 <__aeabi_dadd+0x108>
   10a08:	000c      	movs	r4, r1
   10a0a:	0017      	movs	r7, r2
   10a0c:	e590      	b.n	10530 <__aeabi_dadd+0x108>
   10a0e:	4656      	mov	r6, sl
   10a10:	0023      	movs	r3, r4
   10a12:	3e20      	subs	r6, #32
   10a14:	40f3      	lsrs	r3, r6
   10a16:	4699      	mov	r9, r3
   10a18:	4653      	mov	r3, sl
   10a1a:	2b20      	cmp	r3, #32
   10a1c:	d00e      	beq.n	10a3c <__aeabi_dadd+0x614>
   10a1e:	2340      	movs	r3, #64	; 0x40
   10a20:	4656      	mov	r6, sl
   10a22:	1b9b      	subs	r3, r3, r6
   10a24:	409c      	lsls	r4, r3
   10a26:	4327      	orrs	r7, r4
   10a28:	1e7c      	subs	r4, r7, #1
   10a2a:	41a7      	sbcs	r7, r4
   10a2c:	464b      	mov	r3, r9
   10a2e:	2400      	movs	r4, #0
   10a30:	431f      	orrs	r7, r3
   10a32:	e75f      	b.n	108f4 <__aeabi_dadd+0x4cc>
   10a34:	2400      	movs	r4, #0
   10a36:	e7d2      	b.n	109de <__aeabi_dadd+0x5b6>
   10a38:	0017      	movs	r7, r2
   10a3a:	e5b2      	b.n	105a2 <__aeabi_dadd+0x17a>
   10a3c:	2400      	movs	r4, #0
   10a3e:	e7f2      	b.n	10a26 <__aeabi_dadd+0x5fe>
   10a40:	000007ff 	.word	0x000007ff
   10a44:	ff7fffff 	.word	0xff7fffff

00010a48 <__aeabi_ddiv>:
   10a48:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a4a:	4657      	mov	r7, sl
   10a4c:	4645      	mov	r5, r8
   10a4e:	46de      	mov	lr, fp
   10a50:	464e      	mov	r6, r9
   10a52:	b5e0      	push	{r5, r6, r7, lr}
   10a54:	004c      	lsls	r4, r1, #1
   10a56:	030e      	lsls	r6, r1, #12
   10a58:	b087      	sub	sp, #28
   10a5a:	4683      	mov	fp, r0
   10a5c:	4692      	mov	sl, r2
   10a5e:	001d      	movs	r5, r3
   10a60:	4680      	mov	r8, r0
   10a62:	0b36      	lsrs	r6, r6, #12
   10a64:	0d64      	lsrs	r4, r4, #21
   10a66:	0fcf      	lsrs	r7, r1, #31
   10a68:	2c00      	cmp	r4, #0
   10a6a:	d04f      	beq.n	10b0c <__aeabi_ddiv+0xc4>
   10a6c:	4b6f      	ldr	r3, [pc, #444]	; (10c2c <__aeabi_ddiv+0x1e4>)
   10a6e:	429c      	cmp	r4, r3
   10a70:	d035      	beq.n	10ade <__aeabi_ddiv+0x96>
   10a72:	2380      	movs	r3, #128	; 0x80
   10a74:	0f42      	lsrs	r2, r0, #29
   10a76:	041b      	lsls	r3, r3, #16
   10a78:	00f6      	lsls	r6, r6, #3
   10a7a:	4313      	orrs	r3, r2
   10a7c:	4333      	orrs	r3, r6
   10a7e:	4699      	mov	r9, r3
   10a80:	00c3      	lsls	r3, r0, #3
   10a82:	4698      	mov	r8, r3
   10a84:	4b6a      	ldr	r3, [pc, #424]	; (10c30 <__aeabi_ddiv+0x1e8>)
   10a86:	2600      	movs	r6, #0
   10a88:	469c      	mov	ip, r3
   10a8a:	2300      	movs	r3, #0
   10a8c:	4464      	add	r4, ip
   10a8e:	9303      	str	r3, [sp, #12]
   10a90:	032b      	lsls	r3, r5, #12
   10a92:	0b1b      	lsrs	r3, r3, #12
   10a94:	469b      	mov	fp, r3
   10a96:	006b      	lsls	r3, r5, #1
   10a98:	0fed      	lsrs	r5, r5, #31
   10a9a:	4650      	mov	r0, sl
   10a9c:	0d5b      	lsrs	r3, r3, #21
   10a9e:	9501      	str	r5, [sp, #4]
   10aa0:	d05e      	beq.n	10b60 <__aeabi_ddiv+0x118>
   10aa2:	4a62      	ldr	r2, [pc, #392]	; (10c2c <__aeabi_ddiv+0x1e4>)
   10aa4:	4293      	cmp	r3, r2
   10aa6:	d053      	beq.n	10b50 <__aeabi_ddiv+0x108>
   10aa8:	465a      	mov	r2, fp
   10aaa:	00d1      	lsls	r1, r2, #3
   10aac:	2280      	movs	r2, #128	; 0x80
   10aae:	0f40      	lsrs	r0, r0, #29
   10ab0:	0412      	lsls	r2, r2, #16
   10ab2:	4302      	orrs	r2, r0
   10ab4:	430a      	orrs	r2, r1
   10ab6:	4693      	mov	fp, r2
   10ab8:	4652      	mov	r2, sl
   10aba:	00d1      	lsls	r1, r2, #3
   10abc:	4a5c      	ldr	r2, [pc, #368]	; (10c30 <__aeabi_ddiv+0x1e8>)
   10abe:	4694      	mov	ip, r2
   10ac0:	2200      	movs	r2, #0
   10ac2:	4463      	add	r3, ip
   10ac4:	0038      	movs	r0, r7
   10ac6:	4068      	eors	r0, r5
   10ac8:	4684      	mov	ip, r0
   10aca:	9002      	str	r0, [sp, #8]
   10acc:	1ae4      	subs	r4, r4, r3
   10ace:	4316      	orrs	r6, r2
   10ad0:	2e0f      	cmp	r6, #15
   10ad2:	d900      	bls.n	10ad6 <__aeabi_ddiv+0x8e>
   10ad4:	e0b4      	b.n	10c40 <__aeabi_ddiv+0x1f8>
   10ad6:	4b57      	ldr	r3, [pc, #348]	; (10c34 <__aeabi_ddiv+0x1ec>)
   10ad8:	00b6      	lsls	r6, r6, #2
   10ada:	599b      	ldr	r3, [r3, r6]
   10adc:	469f      	mov	pc, r3
   10ade:	0003      	movs	r3, r0
   10ae0:	4333      	orrs	r3, r6
   10ae2:	4699      	mov	r9, r3
   10ae4:	d16c      	bne.n	10bc0 <__aeabi_ddiv+0x178>
   10ae6:	2300      	movs	r3, #0
   10ae8:	4698      	mov	r8, r3
   10aea:	3302      	adds	r3, #2
   10aec:	2608      	movs	r6, #8
   10aee:	9303      	str	r3, [sp, #12]
   10af0:	e7ce      	b.n	10a90 <__aeabi_ddiv+0x48>
   10af2:	46cb      	mov	fp, r9
   10af4:	4641      	mov	r1, r8
   10af6:	9a03      	ldr	r2, [sp, #12]
   10af8:	9701      	str	r7, [sp, #4]
   10afa:	2a02      	cmp	r2, #2
   10afc:	d165      	bne.n	10bca <__aeabi_ddiv+0x182>
   10afe:	9b01      	ldr	r3, [sp, #4]
   10b00:	4c4a      	ldr	r4, [pc, #296]	; (10c2c <__aeabi_ddiv+0x1e4>)
   10b02:	469c      	mov	ip, r3
   10b04:	2300      	movs	r3, #0
   10b06:	2200      	movs	r2, #0
   10b08:	4698      	mov	r8, r3
   10b0a:	e06b      	b.n	10be4 <__aeabi_ddiv+0x19c>
   10b0c:	0003      	movs	r3, r0
   10b0e:	4333      	orrs	r3, r6
   10b10:	4699      	mov	r9, r3
   10b12:	d04e      	beq.n	10bb2 <__aeabi_ddiv+0x16a>
   10b14:	2e00      	cmp	r6, #0
   10b16:	d100      	bne.n	10b1a <__aeabi_ddiv+0xd2>
   10b18:	e1bc      	b.n	10e94 <__aeabi_ddiv+0x44c>
   10b1a:	0030      	movs	r0, r6
   10b1c:	f001 f90c 	bl	11d38 <__clzsi2>
   10b20:	0003      	movs	r3, r0
   10b22:	3b0b      	subs	r3, #11
   10b24:	2b1c      	cmp	r3, #28
   10b26:	dd00      	ble.n	10b2a <__aeabi_ddiv+0xe2>
   10b28:	e1ac      	b.n	10e84 <__aeabi_ddiv+0x43c>
   10b2a:	221d      	movs	r2, #29
   10b2c:	1ad3      	subs	r3, r2, r3
   10b2e:	465a      	mov	r2, fp
   10b30:	0001      	movs	r1, r0
   10b32:	40da      	lsrs	r2, r3
   10b34:	3908      	subs	r1, #8
   10b36:	408e      	lsls	r6, r1
   10b38:	0013      	movs	r3, r2
   10b3a:	4333      	orrs	r3, r6
   10b3c:	4699      	mov	r9, r3
   10b3e:	465b      	mov	r3, fp
   10b40:	408b      	lsls	r3, r1
   10b42:	4698      	mov	r8, r3
   10b44:	2300      	movs	r3, #0
   10b46:	4c3c      	ldr	r4, [pc, #240]	; (10c38 <__aeabi_ddiv+0x1f0>)
   10b48:	2600      	movs	r6, #0
   10b4a:	1a24      	subs	r4, r4, r0
   10b4c:	9303      	str	r3, [sp, #12]
   10b4e:	e79f      	b.n	10a90 <__aeabi_ddiv+0x48>
   10b50:	4651      	mov	r1, sl
   10b52:	465a      	mov	r2, fp
   10b54:	4311      	orrs	r1, r2
   10b56:	d129      	bne.n	10bac <__aeabi_ddiv+0x164>
   10b58:	2200      	movs	r2, #0
   10b5a:	4693      	mov	fp, r2
   10b5c:	3202      	adds	r2, #2
   10b5e:	e7b1      	b.n	10ac4 <__aeabi_ddiv+0x7c>
   10b60:	4659      	mov	r1, fp
   10b62:	4301      	orrs	r1, r0
   10b64:	d01e      	beq.n	10ba4 <__aeabi_ddiv+0x15c>
   10b66:	465b      	mov	r3, fp
   10b68:	2b00      	cmp	r3, #0
   10b6a:	d100      	bne.n	10b6e <__aeabi_ddiv+0x126>
   10b6c:	e19e      	b.n	10eac <__aeabi_ddiv+0x464>
   10b6e:	4658      	mov	r0, fp
   10b70:	f001 f8e2 	bl	11d38 <__clzsi2>
   10b74:	0003      	movs	r3, r0
   10b76:	3b0b      	subs	r3, #11
   10b78:	2b1c      	cmp	r3, #28
   10b7a:	dd00      	ble.n	10b7e <__aeabi_ddiv+0x136>
   10b7c:	e18f      	b.n	10e9e <__aeabi_ddiv+0x456>
   10b7e:	0002      	movs	r2, r0
   10b80:	4659      	mov	r1, fp
   10b82:	3a08      	subs	r2, #8
   10b84:	4091      	lsls	r1, r2
   10b86:	468b      	mov	fp, r1
   10b88:	211d      	movs	r1, #29
   10b8a:	1acb      	subs	r3, r1, r3
   10b8c:	4651      	mov	r1, sl
   10b8e:	40d9      	lsrs	r1, r3
   10b90:	000b      	movs	r3, r1
   10b92:	4659      	mov	r1, fp
   10b94:	430b      	orrs	r3, r1
   10b96:	4651      	mov	r1, sl
   10b98:	469b      	mov	fp, r3
   10b9a:	4091      	lsls	r1, r2
   10b9c:	4b26      	ldr	r3, [pc, #152]	; (10c38 <__aeabi_ddiv+0x1f0>)
   10b9e:	2200      	movs	r2, #0
   10ba0:	1a1b      	subs	r3, r3, r0
   10ba2:	e78f      	b.n	10ac4 <__aeabi_ddiv+0x7c>
   10ba4:	2300      	movs	r3, #0
   10ba6:	2201      	movs	r2, #1
   10ba8:	469b      	mov	fp, r3
   10baa:	e78b      	b.n	10ac4 <__aeabi_ddiv+0x7c>
   10bac:	4651      	mov	r1, sl
   10bae:	2203      	movs	r2, #3
   10bb0:	e788      	b.n	10ac4 <__aeabi_ddiv+0x7c>
   10bb2:	2300      	movs	r3, #0
   10bb4:	4698      	mov	r8, r3
   10bb6:	3301      	adds	r3, #1
   10bb8:	2604      	movs	r6, #4
   10bba:	2400      	movs	r4, #0
   10bbc:	9303      	str	r3, [sp, #12]
   10bbe:	e767      	b.n	10a90 <__aeabi_ddiv+0x48>
   10bc0:	2303      	movs	r3, #3
   10bc2:	46b1      	mov	r9, r6
   10bc4:	9303      	str	r3, [sp, #12]
   10bc6:	260c      	movs	r6, #12
   10bc8:	e762      	b.n	10a90 <__aeabi_ddiv+0x48>
   10bca:	2a03      	cmp	r2, #3
   10bcc:	d100      	bne.n	10bd0 <__aeabi_ddiv+0x188>
   10bce:	e25c      	b.n	1108a <__aeabi_ddiv+0x642>
   10bd0:	9b01      	ldr	r3, [sp, #4]
   10bd2:	2a01      	cmp	r2, #1
   10bd4:	d000      	beq.n	10bd8 <__aeabi_ddiv+0x190>
   10bd6:	e1e4      	b.n	10fa2 <__aeabi_ddiv+0x55a>
   10bd8:	4013      	ands	r3, r2
   10bda:	469c      	mov	ip, r3
   10bdc:	2300      	movs	r3, #0
   10bde:	2400      	movs	r4, #0
   10be0:	2200      	movs	r2, #0
   10be2:	4698      	mov	r8, r3
   10be4:	2100      	movs	r1, #0
   10be6:	0312      	lsls	r2, r2, #12
   10be8:	0b13      	lsrs	r3, r2, #12
   10bea:	0d0a      	lsrs	r2, r1, #20
   10bec:	0512      	lsls	r2, r2, #20
   10bee:	431a      	orrs	r2, r3
   10bf0:	0523      	lsls	r3, r4, #20
   10bf2:	4c12      	ldr	r4, [pc, #72]	; (10c3c <__aeabi_ddiv+0x1f4>)
   10bf4:	4640      	mov	r0, r8
   10bf6:	4022      	ands	r2, r4
   10bf8:	4313      	orrs	r3, r2
   10bfa:	4662      	mov	r2, ip
   10bfc:	005b      	lsls	r3, r3, #1
   10bfe:	07d2      	lsls	r2, r2, #31
   10c00:	085b      	lsrs	r3, r3, #1
   10c02:	4313      	orrs	r3, r2
   10c04:	0019      	movs	r1, r3
   10c06:	b007      	add	sp, #28
   10c08:	bc3c      	pop	{r2, r3, r4, r5}
   10c0a:	4690      	mov	r8, r2
   10c0c:	4699      	mov	r9, r3
   10c0e:	46a2      	mov	sl, r4
   10c10:	46ab      	mov	fp, r5
   10c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c14:	2300      	movs	r3, #0
   10c16:	2280      	movs	r2, #128	; 0x80
   10c18:	469c      	mov	ip, r3
   10c1a:	0312      	lsls	r2, r2, #12
   10c1c:	4698      	mov	r8, r3
   10c1e:	4c03      	ldr	r4, [pc, #12]	; (10c2c <__aeabi_ddiv+0x1e4>)
   10c20:	e7e0      	b.n	10be4 <__aeabi_ddiv+0x19c>
   10c22:	2300      	movs	r3, #0
   10c24:	4c01      	ldr	r4, [pc, #4]	; (10c2c <__aeabi_ddiv+0x1e4>)
   10c26:	2200      	movs	r2, #0
   10c28:	4698      	mov	r8, r3
   10c2a:	e7db      	b.n	10be4 <__aeabi_ddiv+0x19c>
   10c2c:	000007ff 	.word	0x000007ff
   10c30:	fffffc01 	.word	0xfffffc01
   10c34:	00013e2c 	.word	0x00013e2c
   10c38:	fffffc0d 	.word	0xfffffc0d
   10c3c:	800fffff 	.word	0x800fffff
   10c40:	45d9      	cmp	r9, fp
   10c42:	d900      	bls.n	10c46 <__aeabi_ddiv+0x1fe>
   10c44:	e139      	b.n	10eba <__aeabi_ddiv+0x472>
   10c46:	d100      	bne.n	10c4a <__aeabi_ddiv+0x202>
   10c48:	e134      	b.n	10eb4 <__aeabi_ddiv+0x46c>
   10c4a:	2300      	movs	r3, #0
   10c4c:	4646      	mov	r6, r8
   10c4e:	464d      	mov	r5, r9
   10c50:	469a      	mov	sl, r3
   10c52:	3c01      	subs	r4, #1
   10c54:	465b      	mov	r3, fp
   10c56:	0e0a      	lsrs	r2, r1, #24
   10c58:	021b      	lsls	r3, r3, #8
   10c5a:	431a      	orrs	r2, r3
   10c5c:	020b      	lsls	r3, r1, #8
   10c5e:	0c17      	lsrs	r7, r2, #16
   10c60:	9303      	str	r3, [sp, #12]
   10c62:	0413      	lsls	r3, r2, #16
   10c64:	0c1b      	lsrs	r3, r3, #16
   10c66:	0039      	movs	r1, r7
   10c68:	0028      	movs	r0, r5
   10c6a:	4690      	mov	r8, r2
   10c6c:	9301      	str	r3, [sp, #4]
   10c6e:	f7fe fc65 	bl	f53c <__udivsi3>
   10c72:	0002      	movs	r2, r0
   10c74:	9b01      	ldr	r3, [sp, #4]
   10c76:	4683      	mov	fp, r0
   10c78:	435a      	muls	r2, r3
   10c7a:	0028      	movs	r0, r5
   10c7c:	0039      	movs	r1, r7
   10c7e:	4691      	mov	r9, r2
   10c80:	f7fe fce2 	bl	f648 <__aeabi_uidivmod>
   10c84:	0c35      	lsrs	r5, r6, #16
   10c86:	0409      	lsls	r1, r1, #16
   10c88:	430d      	orrs	r5, r1
   10c8a:	45a9      	cmp	r9, r5
   10c8c:	d90d      	bls.n	10caa <__aeabi_ddiv+0x262>
   10c8e:	465b      	mov	r3, fp
   10c90:	4445      	add	r5, r8
   10c92:	3b01      	subs	r3, #1
   10c94:	45a8      	cmp	r8, r5
   10c96:	d900      	bls.n	10c9a <__aeabi_ddiv+0x252>
   10c98:	e13a      	b.n	10f10 <__aeabi_ddiv+0x4c8>
   10c9a:	45a9      	cmp	r9, r5
   10c9c:	d800      	bhi.n	10ca0 <__aeabi_ddiv+0x258>
   10c9e:	e137      	b.n	10f10 <__aeabi_ddiv+0x4c8>
   10ca0:	2302      	movs	r3, #2
   10ca2:	425b      	negs	r3, r3
   10ca4:	469c      	mov	ip, r3
   10ca6:	4445      	add	r5, r8
   10ca8:	44e3      	add	fp, ip
   10caa:	464b      	mov	r3, r9
   10cac:	1aeb      	subs	r3, r5, r3
   10cae:	0039      	movs	r1, r7
   10cb0:	0018      	movs	r0, r3
   10cb2:	9304      	str	r3, [sp, #16]
   10cb4:	f7fe fc42 	bl	f53c <__udivsi3>
   10cb8:	9b01      	ldr	r3, [sp, #4]
   10cba:	0005      	movs	r5, r0
   10cbc:	4343      	muls	r3, r0
   10cbe:	0039      	movs	r1, r7
   10cc0:	9804      	ldr	r0, [sp, #16]
   10cc2:	4699      	mov	r9, r3
   10cc4:	f7fe fcc0 	bl	f648 <__aeabi_uidivmod>
   10cc8:	0433      	lsls	r3, r6, #16
   10cca:	0409      	lsls	r1, r1, #16
   10ccc:	0c1b      	lsrs	r3, r3, #16
   10cce:	430b      	orrs	r3, r1
   10cd0:	4599      	cmp	r9, r3
   10cd2:	d909      	bls.n	10ce8 <__aeabi_ddiv+0x2a0>
   10cd4:	4443      	add	r3, r8
   10cd6:	1e6a      	subs	r2, r5, #1
   10cd8:	4598      	cmp	r8, r3
   10cda:	d900      	bls.n	10cde <__aeabi_ddiv+0x296>
   10cdc:	e11a      	b.n	10f14 <__aeabi_ddiv+0x4cc>
   10cde:	4599      	cmp	r9, r3
   10ce0:	d800      	bhi.n	10ce4 <__aeabi_ddiv+0x29c>
   10ce2:	e117      	b.n	10f14 <__aeabi_ddiv+0x4cc>
   10ce4:	3d02      	subs	r5, #2
   10ce6:	4443      	add	r3, r8
   10ce8:	464a      	mov	r2, r9
   10cea:	1a9b      	subs	r3, r3, r2
   10cec:	465a      	mov	r2, fp
   10cee:	0412      	lsls	r2, r2, #16
   10cf0:	432a      	orrs	r2, r5
   10cf2:	9903      	ldr	r1, [sp, #12]
   10cf4:	4693      	mov	fp, r2
   10cf6:	0c10      	lsrs	r0, r2, #16
   10cf8:	0c0a      	lsrs	r2, r1, #16
   10cfa:	4691      	mov	r9, r2
   10cfc:	0409      	lsls	r1, r1, #16
   10cfe:	465a      	mov	r2, fp
   10d00:	0c09      	lsrs	r1, r1, #16
   10d02:	464e      	mov	r6, r9
   10d04:	000d      	movs	r5, r1
   10d06:	0412      	lsls	r2, r2, #16
   10d08:	0c12      	lsrs	r2, r2, #16
   10d0a:	4345      	muls	r5, r0
   10d0c:	9105      	str	r1, [sp, #20]
   10d0e:	4351      	muls	r1, r2
   10d10:	4372      	muls	r2, r6
   10d12:	4370      	muls	r0, r6
   10d14:	1952      	adds	r2, r2, r5
   10d16:	0c0e      	lsrs	r6, r1, #16
   10d18:	18b2      	adds	r2, r6, r2
   10d1a:	4295      	cmp	r5, r2
   10d1c:	d903      	bls.n	10d26 <__aeabi_ddiv+0x2de>
   10d1e:	2580      	movs	r5, #128	; 0x80
   10d20:	026d      	lsls	r5, r5, #9
   10d22:	46ac      	mov	ip, r5
   10d24:	4460      	add	r0, ip
   10d26:	0c15      	lsrs	r5, r2, #16
   10d28:	0409      	lsls	r1, r1, #16
   10d2a:	0412      	lsls	r2, r2, #16
   10d2c:	0c09      	lsrs	r1, r1, #16
   10d2e:	1828      	adds	r0, r5, r0
   10d30:	1852      	adds	r2, r2, r1
   10d32:	4283      	cmp	r3, r0
   10d34:	d200      	bcs.n	10d38 <__aeabi_ddiv+0x2f0>
   10d36:	e0ce      	b.n	10ed6 <__aeabi_ddiv+0x48e>
   10d38:	d100      	bne.n	10d3c <__aeabi_ddiv+0x2f4>
   10d3a:	e0c8      	b.n	10ece <__aeabi_ddiv+0x486>
   10d3c:	1a1d      	subs	r5, r3, r0
   10d3e:	4653      	mov	r3, sl
   10d40:	1a9e      	subs	r6, r3, r2
   10d42:	45b2      	cmp	sl, r6
   10d44:	4192      	sbcs	r2, r2
   10d46:	4252      	negs	r2, r2
   10d48:	1aab      	subs	r3, r5, r2
   10d4a:	469a      	mov	sl, r3
   10d4c:	4598      	cmp	r8, r3
   10d4e:	d100      	bne.n	10d52 <__aeabi_ddiv+0x30a>
   10d50:	e117      	b.n	10f82 <__aeabi_ddiv+0x53a>
   10d52:	0039      	movs	r1, r7
   10d54:	0018      	movs	r0, r3
   10d56:	f7fe fbf1 	bl	f53c <__udivsi3>
   10d5a:	9b01      	ldr	r3, [sp, #4]
   10d5c:	0005      	movs	r5, r0
   10d5e:	4343      	muls	r3, r0
   10d60:	0039      	movs	r1, r7
   10d62:	4650      	mov	r0, sl
   10d64:	9304      	str	r3, [sp, #16]
   10d66:	f7fe fc6f 	bl	f648 <__aeabi_uidivmod>
   10d6a:	9804      	ldr	r0, [sp, #16]
   10d6c:	040b      	lsls	r3, r1, #16
   10d6e:	0c31      	lsrs	r1, r6, #16
   10d70:	4319      	orrs	r1, r3
   10d72:	4288      	cmp	r0, r1
   10d74:	d909      	bls.n	10d8a <__aeabi_ddiv+0x342>
   10d76:	4441      	add	r1, r8
   10d78:	1e6b      	subs	r3, r5, #1
   10d7a:	4588      	cmp	r8, r1
   10d7c:	d900      	bls.n	10d80 <__aeabi_ddiv+0x338>
   10d7e:	e107      	b.n	10f90 <__aeabi_ddiv+0x548>
   10d80:	4288      	cmp	r0, r1
   10d82:	d800      	bhi.n	10d86 <__aeabi_ddiv+0x33e>
   10d84:	e104      	b.n	10f90 <__aeabi_ddiv+0x548>
   10d86:	3d02      	subs	r5, #2
   10d88:	4441      	add	r1, r8
   10d8a:	9b04      	ldr	r3, [sp, #16]
   10d8c:	1acb      	subs	r3, r1, r3
   10d8e:	0018      	movs	r0, r3
   10d90:	0039      	movs	r1, r7
   10d92:	9304      	str	r3, [sp, #16]
   10d94:	f7fe fbd2 	bl	f53c <__udivsi3>
   10d98:	9b01      	ldr	r3, [sp, #4]
   10d9a:	4682      	mov	sl, r0
   10d9c:	4343      	muls	r3, r0
   10d9e:	0039      	movs	r1, r7
   10da0:	9804      	ldr	r0, [sp, #16]
   10da2:	9301      	str	r3, [sp, #4]
   10da4:	f7fe fc50 	bl	f648 <__aeabi_uidivmod>
   10da8:	9801      	ldr	r0, [sp, #4]
   10daa:	040b      	lsls	r3, r1, #16
   10dac:	0431      	lsls	r1, r6, #16
   10dae:	0c09      	lsrs	r1, r1, #16
   10db0:	4319      	orrs	r1, r3
   10db2:	4288      	cmp	r0, r1
   10db4:	d90d      	bls.n	10dd2 <__aeabi_ddiv+0x38a>
   10db6:	4653      	mov	r3, sl
   10db8:	4441      	add	r1, r8
   10dba:	3b01      	subs	r3, #1
   10dbc:	4588      	cmp	r8, r1
   10dbe:	d900      	bls.n	10dc2 <__aeabi_ddiv+0x37a>
   10dc0:	e0e8      	b.n	10f94 <__aeabi_ddiv+0x54c>
   10dc2:	4288      	cmp	r0, r1
   10dc4:	d800      	bhi.n	10dc8 <__aeabi_ddiv+0x380>
   10dc6:	e0e5      	b.n	10f94 <__aeabi_ddiv+0x54c>
   10dc8:	2302      	movs	r3, #2
   10dca:	425b      	negs	r3, r3
   10dcc:	469c      	mov	ip, r3
   10dce:	4441      	add	r1, r8
   10dd0:	44e2      	add	sl, ip
   10dd2:	9b01      	ldr	r3, [sp, #4]
   10dd4:	042d      	lsls	r5, r5, #16
   10dd6:	1ace      	subs	r6, r1, r3
   10dd8:	4651      	mov	r1, sl
   10dda:	4329      	orrs	r1, r5
   10ddc:	9d05      	ldr	r5, [sp, #20]
   10dde:	464f      	mov	r7, r9
   10de0:	002a      	movs	r2, r5
   10de2:	040b      	lsls	r3, r1, #16
   10de4:	0c08      	lsrs	r0, r1, #16
   10de6:	0c1b      	lsrs	r3, r3, #16
   10de8:	435a      	muls	r2, r3
   10dea:	4345      	muls	r5, r0
   10dec:	437b      	muls	r3, r7
   10dee:	4378      	muls	r0, r7
   10df0:	195b      	adds	r3, r3, r5
   10df2:	0c17      	lsrs	r7, r2, #16
   10df4:	18fb      	adds	r3, r7, r3
   10df6:	429d      	cmp	r5, r3
   10df8:	d903      	bls.n	10e02 <__aeabi_ddiv+0x3ba>
   10dfa:	2580      	movs	r5, #128	; 0x80
   10dfc:	026d      	lsls	r5, r5, #9
   10dfe:	46ac      	mov	ip, r5
   10e00:	4460      	add	r0, ip
   10e02:	0c1d      	lsrs	r5, r3, #16
   10e04:	0412      	lsls	r2, r2, #16
   10e06:	041b      	lsls	r3, r3, #16
   10e08:	0c12      	lsrs	r2, r2, #16
   10e0a:	1828      	adds	r0, r5, r0
   10e0c:	189b      	adds	r3, r3, r2
   10e0e:	4286      	cmp	r6, r0
   10e10:	d200      	bcs.n	10e14 <__aeabi_ddiv+0x3cc>
   10e12:	e093      	b.n	10f3c <__aeabi_ddiv+0x4f4>
   10e14:	d100      	bne.n	10e18 <__aeabi_ddiv+0x3d0>
   10e16:	e08e      	b.n	10f36 <__aeabi_ddiv+0x4ee>
   10e18:	2301      	movs	r3, #1
   10e1a:	4319      	orrs	r1, r3
   10e1c:	4ba0      	ldr	r3, [pc, #640]	; (110a0 <__aeabi_ddiv+0x658>)
   10e1e:	18e3      	adds	r3, r4, r3
   10e20:	2b00      	cmp	r3, #0
   10e22:	dc00      	bgt.n	10e26 <__aeabi_ddiv+0x3de>
   10e24:	e099      	b.n	10f5a <__aeabi_ddiv+0x512>
   10e26:	074a      	lsls	r2, r1, #29
   10e28:	d000      	beq.n	10e2c <__aeabi_ddiv+0x3e4>
   10e2a:	e09e      	b.n	10f6a <__aeabi_ddiv+0x522>
   10e2c:	465a      	mov	r2, fp
   10e2e:	01d2      	lsls	r2, r2, #7
   10e30:	d506      	bpl.n	10e40 <__aeabi_ddiv+0x3f8>
   10e32:	465a      	mov	r2, fp
   10e34:	4b9b      	ldr	r3, [pc, #620]	; (110a4 <__aeabi_ddiv+0x65c>)
   10e36:	401a      	ands	r2, r3
   10e38:	2380      	movs	r3, #128	; 0x80
   10e3a:	4693      	mov	fp, r2
   10e3c:	00db      	lsls	r3, r3, #3
   10e3e:	18e3      	adds	r3, r4, r3
   10e40:	4a99      	ldr	r2, [pc, #612]	; (110a8 <__aeabi_ddiv+0x660>)
   10e42:	4293      	cmp	r3, r2
   10e44:	dd68      	ble.n	10f18 <__aeabi_ddiv+0x4d0>
   10e46:	2301      	movs	r3, #1
   10e48:	9a02      	ldr	r2, [sp, #8]
   10e4a:	4c98      	ldr	r4, [pc, #608]	; (110ac <__aeabi_ddiv+0x664>)
   10e4c:	401a      	ands	r2, r3
   10e4e:	2300      	movs	r3, #0
   10e50:	4694      	mov	ip, r2
   10e52:	4698      	mov	r8, r3
   10e54:	2200      	movs	r2, #0
   10e56:	e6c5      	b.n	10be4 <__aeabi_ddiv+0x19c>
   10e58:	2280      	movs	r2, #128	; 0x80
   10e5a:	464b      	mov	r3, r9
   10e5c:	0312      	lsls	r2, r2, #12
   10e5e:	4213      	tst	r3, r2
   10e60:	d00a      	beq.n	10e78 <__aeabi_ddiv+0x430>
   10e62:	465b      	mov	r3, fp
   10e64:	4213      	tst	r3, r2
   10e66:	d106      	bne.n	10e76 <__aeabi_ddiv+0x42e>
   10e68:	431a      	orrs	r2, r3
   10e6a:	0312      	lsls	r2, r2, #12
   10e6c:	0b12      	lsrs	r2, r2, #12
   10e6e:	46ac      	mov	ip, r5
   10e70:	4688      	mov	r8, r1
   10e72:	4c8e      	ldr	r4, [pc, #568]	; (110ac <__aeabi_ddiv+0x664>)
   10e74:	e6b6      	b.n	10be4 <__aeabi_ddiv+0x19c>
   10e76:	464b      	mov	r3, r9
   10e78:	431a      	orrs	r2, r3
   10e7a:	0312      	lsls	r2, r2, #12
   10e7c:	0b12      	lsrs	r2, r2, #12
   10e7e:	46bc      	mov	ip, r7
   10e80:	4c8a      	ldr	r4, [pc, #552]	; (110ac <__aeabi_ddiv+0x664>)
   10e82:	e6af      	b.n	10be4 <__aeabi_ddiv+0x19c>
   10e84:	0003      	movs	r3, r0
   10e86:	465a      	mov	r2, fp
   10e88:	3b28      	subs	r3, #40	; 0x28
   10e8a:	409a      	lsls	r2, r3
   10e8c:	2300      	movs	r3, #0
   10e8e:	4691      	mov	r9, r2
   10e90:	4698      	mov	r8, r3
   10e92:	e657      	b.n	10b44 <__aeabi_ddiv+0xfc>
   10e94:	4658      	mov	r0, fp
   10e96:	f000 ff4f 	bl	11d38 <__clzsi2>
   10e9a:	3020      	adds	r0, #32
   10e9c:	e640      	b.n	10b20 <__aeabi_ddiv+0xd8>
   10e9e:	0003      	movs	r3, r0
   10ea0:	4652      	mov	r2, sl
   10ea2:	3b28      	subs	r3, #40	; 0x28
   10ea4:	409a      	lsls	r2, r3
   10ea6:	2100      	movs	r1, #0
   10ea8:	4693      	mov	fp, r2
   10eaa:	e677      	b.n	10b9c <__aeabi_ddiv+0x154>
   10eac:	f000 ff44 	bl	11d38 <__clzsi2>
   10eb0:	3020      	adds	r0, #32
   10eb2:	e65f      	b.n	10b74 <__aeabi_ddiv+0x12c>
   10eb4:	4588      	cmp	r8, r1
   10eb6:	d200      	bcs.n	10eba <__aeabi_ddiv+0x472>
   10eb8:	e6c7      	b.n	10c4a <__aeabi_ddiv+0x202>
   10eba:	464b      	mov	r3, r9
   10ebc:	07de      	lsls	r6, r3, #31
   10ebe:	085d      	lsrs	r5, r3, #1
   10ec0:	4643      	mov	r3, r8
   10ec2:	085b      	lsrs	r3, r3, #1
   10ec4:	431e      	orrs	r6, r3
   10ec6:	4643      	mov	r3, r8
   10ec8:	07db      	lsls	r3, r3, #31
   10eca:	469a      	mov	sl, r3
   10ecc:	e6c2      	b.n	10c54 <__aeabi_ddiv+0x20c>
   10ece:	2500      	movs	r5, #0
   10ed0:	4592      	cmp	sl, r2
   10ed2:	d300      	bcc.n	10ed6 <__aeabi_ddiv+0x48e>
   10ed4:	e733      	b.n	10d3e <__aeabi_ddiv+0x2f6>
   10ed6:	9e03      	ldr	r6, [sp, #12]
   10ed8:	4659      	mov	r1, fp
   10eda:	46b4      	mov	ip, r6
   10edc:	44e2      	add	sl, ip
   10ede:	45b2      	cmp	sl, r6
   10ee0:	41ad      	sbcs	r5, r5
   10ee2:	426d      	negs	r5, r5
   10ee4:	4445      	add	r5, r8
   10ee6:	18eb      	adds	r3, r5, r3
   10ee8:	3901      	subs	r1, #1
   10eea:	4598      	cmp	r8, r3
   10eec:	d207      	bcs.n	10efe <__aeabi_ddiv+0x4b6>
   10eee:	4298      	cmp	r0, r3
   10ef0:	d900      	bls.n	10ef4 <__aeabi_ddiv+0x4ac>
   10ef2:	e07f      	b.n	10ff4 <__aeabi_ddiv+0x5ac>
   10ef4:	d100      	bne.n	10ef8 <__aeabi_ddiv+0x4b0>
   10ef6:	e0bc      	b.n	11072 <__aeabi_ddiv+0x62a>
   10ef8:	1a1d      	subs	r5, r3, r0
   10efa:	468b      	mov	fp, r1
   10efc:	e71f      	b.n	10d3e <__aeabi_ddiv+0x2f6>
   10efe:	4598      	cmp	r8, r3
   10f00:	d1fa      	bne.n	10ef8 <__aeabi_ddiv+0x4b0>
   10f02:	9d03      	ldr	r5, [sp, #12]
   10f04:	4555      	cmp	r5, sl
   10f06:	d9f2      	bls.n	10eee <__aeabi_ddiv+0x4a6>
   10f08:	4643      	mov	r3, r8
   10f0a:	468b      	mov	fp, r1
   10f0c:	1a1d      	subs	r5, r3, r0
   10f0e:	e716      	b.n	10d3e <__aeabi_ddiv+0x2f6>
   10f10:	469b      	mov	fp, r3
   10f12:	e6ca      	b.n	10caa <__aeabi_ddiv+0x262>
   10f14:	0015      	movs	r5, r2
   10f16:	e6e7      	b.n	10ce8 <__aeabi_ddiv+0x2a0>
   10f18:	465a      	mov	r2, fp
   10f1a:	08c9      	lsrs	r1, r1, #3
   10f1c:	0752      	lsls	r2, r2, #29
   10f1e:	430a      	orrs	r2, r1
   10f20:	055b      	lsls	r3, r3, #21
   10f22:	4690      	mov	r8, r2
   10f24:	0d5c      	lsrs	r4, r3, #21
   10f26:	465a      	mov	r2, fp
   10f28:	2301      	movs	r3, #1
   10f2a:	9902      	ldr	r1, [sp, #8]
   10f2c:	0252      	lsls	r2, r2, #9
   10f2e:	4019      	ands	r1, r3
   10f30:	0b12      	lsrs	r2, r2, #12
   10f32:	468c      	mov	ip, r1
   10f34:	e656      	b.n	10be4 <__aeabi_ddiv+0x19c>
   10f36:	2b00      	cmp	r3, #0
   10f38:	d100      	bne.n	10f3c <__aeabi_ddiv+0x4f4>
   10f3a:	e76f      	b.n	10e1c <__aeabi_ddiv+0x3d4>
   10f3c:	4446      	add	r6, r8
   10f3e:	1e4a      	subs	r2, r1, #1
   10f40:	45b0      	cmp	r8, r6
   10f42:	d929      	bls.n	10f98 <__aeabi_ddiv+0x550>
   10f44:	0011      	movs	r1, r2
   10f46:	4286      	cmp	r6, r0
   10f48:	d000      	beq.n	10f4c <__aeabi_ddiv+0x504>
   10f4a:	e765      	b.n	10e18 <__aeabi_ddiv+0x3d0>
   10f4c:	9a03      	ldr	r2, [sp, #12]
   10f4e:	4293      	cmp	r3, r2
   10f50:	d000      	beq.n	10f54 <__aeabi_ddiv+0x50c>
   10f52:	e761      	b.n	10e18 <__aeabi_ddiv+0x3d0>
   10f54:	e762      	b.n	10e1c <__aeabi_ddiv+0x3d4>
   10f56:	2101      	movs	r1, #1
   10f58:	4249      	negs	r1, r1
   10f5a:	2001      	movs	r0, #1
   10f5c:	1ac2      	subs	r2, r0, r3
   10f5e:	2a38      	cmp	r2, #56	; 0x38
   10f60:	dd21      	ble.n	10fa6 <__aeabi_ddiv+0x55e>
   10f62:	9b02      	ldr	r3, [sp, #8]
   10f64:	4003      	ands	r3, r0
   10f66:	469c      	mov	ip, r3
   10f68:	e638      	b.n	10bdc <__aeabi_ddiv+0x194>
   10f6a:	220f      	movs	r2, #15
   10f6c:	400a      	ands	r2, r1
   10f6e:	2a04      	cmp	r2, #4
   10f70:	d100      	bne.n	10f74 <__aeabi_ddiv+0x52c>
   10f72:	e75b      	b.n	10e2c <__aeabi_ddiv+0x3e4>
   10f74:	000a      	movs	r2, r1
   10f76:	1d11      	adds	r1, r2, #4
   10f78:	4291      	cmp	r1, r2
   10f7a:	4192      	sbcs	r2, r2
   10f7c:	4252      	negs	r2, r2
   10f7e:	4493      	add	fp, r2
   10f80:	e754      	b.n	10e2c <__aeabi_ddiv+0x3e4>
   10f82:	4b47      	ldr	r3, [pc, #284]	; (110a0 <__aeabi_ddiv+0x658>)
   10f84:	18e3      	adds	r3, r4, r3
   10f86:	2b00      	cmp	r3, #0
   10f88:	dde5      	ble.n	10f56 <__aeabi_ddiv+0x50e>
   10f8a:	2201      	movs	r2, #1
   10f8c:	4252      	negs	r2, r2
   10f8e:	e7f2      	b.n	10f76 <__aeabi_ddiv+0x52e>
   10f90:	001d      	movs	r5, r3
   10f92:	e6fa      	b.n	10d8a <__aeabi_ddiv+0x342>
   10f94:	469a      	mov	sl, r3
   10f96:	e71c      	b.n	10dd2 <__aeabi_ddiv+0x38a>
   10f98:	42b0      	cmp	r0, r6
   10f9a:	d839      	bhi.n	11010 <__aeabi_ddiv+0x5c8>
   10f9c:	d06e      	beq.n	1107c <__aeabi_ddiv+0x634>
   10f9e:	0011      	movs	r1, r2
   10fa0:	e73a      	b.n	10e18 <__aeabi_ddiv+0x3d0>
   10fa2:	9302      	str	r3, [sp, #8]
   10fa4:	e73a      	b.n	10e1c <__aeabi_ddiv+0x3d4>
   10fa6:	2a1f      	cmp	r2, #31
   10fa8:	dc3c      	bgt.n	11024 <__aeabi_ddiv+0x5dc>
   10faa:	2320      	movs	r3, #32
   10fac:	1a9b      	subs	r3, r3, r2
   10fae:	000c      	movs	r4, r1
   10fb0:	4658      	mov	r0, fp
   10fb2:	4099      	lsls	r1, r3
   10fb4:	4098      	lsls	r0, r3
   10fb6:	1e4b      	subs	r3, r1, #1
   10fb8:	4199      	sbcs	r1, r3
   10fba:	465b      	mov	r3, fp
   10fbc:	40d4      	lsrs	r4, r2
   10fbe:	40d3      	lsrs	r3, r2
   10fc0:	4320      	orrs	r0, r4
   10fc2:	4308      	orrs	r0, r1
   10fc4:	001a      	movs	r2, r3
   10fc6:	0743      	lsls	r3, r0, #29
   10fc8:	d009      	beq.n	10fde <__aeabi_ddiv+0x596>
   10fca:	230f      	movs	r3, #15
   10fcc:	4003      	ands	r3, r0
   10fce:	2b04      	cmp	r3, #4
   10fd0:	d005      	beq.n	10fde <__aeabi_ddiv+0x596>
   10fd2:	0001      	movs	r1, r0
   10fd4:	1d08      	adds	r0, r1, #4
   10fd6:	4288      	cmp	r0, r1
   10fd8:	419b      	sbcs	r3, r3
   10fda:	425b      	negs	r3, r3
   10fdc:	18d2      	adds	r2, r2, r3
   10fde:	0213      	lsls	r3, r2, #8
   10fe0:	d53a      	bpl.n	11058 <__aeabi_ddiv+0x610>
   10fe2:	2301      	movs	r3, #1
   10fe4:	9a02      	ldr	r2, [sp, #8]
   10fe6:	2401      	movs	r4, #1
   10fe8:	401a      	ands	r2, r3
   10fea:	2300      	movs	r3, #0
   10fec:	4694      	mov	ip, r2
   10fee:	4698      	mov	r8, r3
   10ff0:	2200      	movs	r2, #0
   10ff2:	e5f7      	b.n	10be4 <__aeabi_ddiv+0x19c>
   10ff4:	2102      	movs	r1, #2
   10ff6:	4249      	negs	r1, r1
   10ff8:	468c      	mov	ip, r1
   10ffa:	9d03      	ldr	r5, [sp, #12]
   10ffc:	44e3      	add	fp, ip
   10ffe:	46ac      	mov	ip, r5
   11000:	44e2      	add	sl, ip
   11002:	45aa      	cmp	sl, r5
   11004:	41ad      	sbcs	r5, r5
   11006:	426d      	negs	r5, r5
   11008:	4445      	add	r5, r8
   1100a:	18ed      	adds	r5, r5, r3
   1100c:	1a2d      	subs	r5, r5, r0
   1100e:	e696      	b.n	10d3e <__aeabi_ddiv+0x2f6>
   11010:	1e8a      	subs	r2, r1, #2
   11012:	9903      	ldr	r1, [sp, #12]
   11014:	004d      	lsls	r5, r1, #1
   11016:	428d      	cmp	r5, r1
   11018:	4189      	sbcs	r1, r1
   1101a:	4249      	negs	r1, r1
   1101c:	4441      	add	r1, r8
   1101e:	1876      	adds	r6, r6, r1
   11020:	9503      	str	r5, [sp, #12]
   11022:	e78f      	b.n	10f44 <__aeabi_ddiv+0x4fc>
   11024:	201f      	movs	r0, #31
   11026:	4240      	negs	r0, r0
   11028:	1ac3      	subs	r3, r0, r3
   1102a:	4658      	mov	r0, fp
   1102c:	40d8      	lsrs	r0, r3
   1102e:	0003      	movs	r3, r0
   11030:	2a20      	cmp	r2, #32
   11032:	d028      	beq.n	11086 <__aeabi_ddiv+0x63e>
   11034:	2040      	movs	r0, #64	; 0x40
   11036:	465d      	mov	r5, fp
   11038:	1a82      	subs	r2, r0, r2
   1103a:	4095      	lsls	r5, r2
   1103c:	4329      	orrs	r1, r5
   1103e:	1e4a      	subs	r2, r1, #1
   11040:	4191      	sbcs	r1, r2
   11042:	4319      	orrs	r1, r3
   11044:	2307      	movs	r3, #7
   11046:	2200      	movs	r2, #0
   11048:	400b      	ands	r3, r1
   1104a:	d009      	beq.n	11060 <__aeabi_ddiv+0x618>
   1104c:	230f      	movs	r3, #15
   1104e:	2200      	movs	r2, #0
   11050:	400b      	ands	r3, r1
   11052:	0008      	movs	r0, r1
   11054:	2b04      	cmp	r3, #4
   11056:	d1bd      	bne.n	10fd4 <__aeabi_ddiv+0x58c>
   11058:	0001      	movs	r1, r0
   1105a:	0753      	lsls	r3, r2, #29
   1105c:	0252      	lsls	r2, r2, #9
   1105e:	0b12      	lsrs	r2, r2, #12
   11060:	08c9      	lsrs	r1, r1, #3
   11062:	4319      	orrs	r1, r3
   11064:	2301      	movs	r3, #1
   11066:	4688      	mov	r8, r1
   11068:	9902      	ldr	r1, [sp, #8]
   1106a:	2400      	movs	r4, #0
   1106c:	4019      	ands	r1, r3
   1106e:	468c      	mov	ip, r1
   11070:	e5b8      	b.n	10be4 <__aeabi_ddiv+0x19c>
   11072:	4552      	cmp	r2, sl
   11074:	d8be      	bhi.n	10ff4 <__aeabi_ddiv+0x5ac>
   11076:	468b      	mov	fp, r1
   11078:	2500      	movs	r5, #0
   1107a:	e660      	b.n	10d3e <__aeabi_ddiv+0x2f6>
   1107c:	9d03      	ldr	r5, [sp, #12]
   1107e:	429d      	cmp	r5, r3
   11080:	d3c6      	bcc.n	11010 <__aeabi_ddiv+0x5c8>
   11082:	0011      	movs	r1, r2
   11084:	e762      	b.n	10f4c <__aeabi_ddiv+0x504>
   11086:	2500      	movs	r5, #0
   11088:	e7d8      	b.n	1103c <__aeabi_ddiv+0x5f4>
   1108a:	2280      	movs	r2, #128	; 0x80
   1108c:	465b      	mov	r3, fp
   1108e:	0312      	lsls	r2, r2, #12
   11090:	431a      	orrs	r2, r3
   11092:	9b01      	ldr	r3, [sp, #4]
   11094:	0312      	lsls	r2, r2, #12
   11096:	0b12      	lsrs	r2, r2, #12
   11098:	469c      	mov	ip, r3
   1109a:	4688      	mov	r8, r1
   1109c:	4c03      	ldr	r4, [pc, #12]	; (110ac <__aeabi_ddiv+0x664>)
   1109e:	e5a1      	b.n	10be4 <__aeabi_ddiv+0x19c>
   110a0:	000003ff 	.word	0x000003ff
   110a4:	feffffff 	.word	0xfeffffff
   110a8:	000007fe 	.word	0x000007fe
   110ac:	000007ff 	.word	0x000007ff

000110b0 <__aeabi_dmul>:
   110b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   110b2:	4657      	mov	r7, sl
   110b4:	4645      	mov	r5, r8
   110b6:	46de      	mov	lr, fp
   110b8:	464e      	mov	r6, r9
   110ba:	b5e0      	push	{r5, r6, r7, lr}
   110bc:	030c      	lsls	r4, r1, #12
   110be:	4698      	mov	r8, r3
   110c0:	004e      	lsls	r6, r1, #1
   110c2:	0b23      	lsrs	r3, r4, #12
   110c4:	b087      	sub	sp, #28
   110c6:	0007      	movs	r7, r0
   110c8:	4692      	mov	sl, r2
   110ca:	469b      	mov	fp, r3
   110cc:	0d76      	lsrs	r6, r6, #21
   110ce:	0fcd      	lsrs	r5, r1, #31
   110d0:	2e00      	cmp	r6, #0
   110d2:	d06b      	beq.n	111ac <__aeabi_dmul+0xfc>
   110d4:	4b6d      	ldr	r3, [pc, #436]	; (1128c <__aeabi_dmul+0x1dc>)
   110d6:	429e      	cmp	r6, r3
   110d8:	d035      	beq.n	11146 <__aeabi_dmul+0x96>
   110da:	2480      	movs	r4, #128	; 0x80
   110dc:	465b      	mov	r3, fp
   110de:	0f42      	lsrs	r2, r0, #29
   110e0:	0424      	lsls	r4, r4, #16
   110e2:	00db      	lsls	r3, r3, #3
   110e4:	4314      	orrs	r4, r2
   110e6:	431c      	orrs	r4, r3
   110e8:	00c3      	lsls	r3, r0, #3
   110ea:	4699      	mov	r9, r3
   110ec:	4b68      	ldr	r3, [pc, #416]	; (11290 <__aeabi_dmul+0x1e0>)
   110ee:	46a3      	mov	fp, r4
   110f0:	469c      	mov	ip, r3
   110f2:	2300      	movs	r3, #0
   110f4:	2700      	movs	r7, #0
   110f6:	4466      	add	r6, ip
   110f8:	9302      	str	r3, [sp, #8]
   110fa:	4643      	mov	r3, r8
   110fc:	031c      	lsls	r4, r3, #12
   110fe:	005a      	lsls	r2, r3, #1
   11100:	0fdb      	lsrs	r3, r3, #31
   11102:	4650      	mov	r0, sl
   11104:	0b24      	lsrs	r4, r4, #12
   11106:	0d52      	lsrs	r2, r2, #21
   11108:	4698      	mov	r8, r3
   1110a:	d100      	bne.n	1110e <__aeabi_dmul+0x5e>
   1110c:	e076      	b.n	111fc <__aeabi_dmul+0x14c>
   1110e:	4b5f      	ldr	r3, [pc, #380]	; (1128c <__aeabi_dmul+0x1dc>)
   11110:	429a      	cmp	r2, r3
   11112:	d06d      	beq.n	111f0 <__aeabi_dmul+0x140>
   11114:	2380      	movs	r3, #128	; 0x80
   11116:	0f41      	lsrs	r1, r0, #29
   11118:	041b      	lsls	r3, r3, #16
   1111a:	430b      	orrs	r3, r1
   1111c:	495c      	ldr	r1, [pc, #368]	; (11290 <__aeabi_dmul+0x1e0>)
   1111e:	00e4      	lsls	r4, r4, #3
   11120:	468c      	mov	ip, r1
   11122:	431c      	orrs	r4, r3
   11124:	00c3      	lsls	r3, r0, #3
   11126:	2000      	movs	r0, #0
   11128:	4462      	add	r2, ip
   1112a:	4641      	mov	r1, r8
   1112c:	18b6      	adds	r6, r6, r2
   1112e:	4069      	eors	r1, r5
   11130:	1c72      	adds	r2, r6, #1
   11132:	9101      	str	r1, [sp, #4]
   11134:	4694      	mov	ip, r2
   11136:	4307      	orrs	r7, r0
   11138:	2f0f      	cmp	r7, #15
   1113a:	d900      	bls.n	1113e <__aeabi_dmul+0x8e>
   1113c:	e0b0      	b.n	112a0 <__aeabi_dmul+0x1f0>
   1113e:	4a55      	ldr	r2, [pc, #340]	; (11294 <__aeabi_dmul+0x1e4>)
   11140:	00bf      	lsls	r7, r7, #2
   11142:	59d2      	ldr	r2, [r2, r7]
   11144:	4697      	mov	pc, r2
   11146:	465b      	mov	r3, fp
   11148:	4303      	orrs	r3, r0
   1114a:	4699      	mov	r9, r3
   1114c:	d000      	beq.n	11150 <__aeabi_dmul+0xa0>
   1114e:	e087      	b.n	11260 <__aeabi_dmul+0x1b0>
   11150:	2300      	movs	r3, #0
   11152:	469b      	mov	fp, r3
   11154:	3302      	adds	r3, #2
   11156:	2708      	movs	r7, #8
   11158:	9302      	str	r3, [sp, #8]
   1115a:	e7ce      	b.n	110fa <__aeabi_dmul+0x4a>
   1115c:	4642      	mov	r2, r8
   1115e:	9201      	str	r2, [sp, #4]
   11160:	2802      	cmp	r0, #2
   11162:	d067      	beq.n	11234 <__aeabi_dmul+0x184>
   11164:	2803      	cmp	r0, #3
   11166:	d100      	bne.n	1116a <__aeabi_dmul+0xba>
   11168:	e20e      	b.n	11588 <__aeabi_dmul+0x4d8>
   1116a:	2801      	cmp	r0, #1
   1116c:	d000      	beq.n	11170 <__aeabi_dmul+0xc0>
   1116e:	e162      	b.n	11436 <__aeabi_dmul+0x386>
   11170:	2300      	movs	r3, #0
   11172:	2400      	movs	r4, #0
   11174:	2200      	movs	r2, #0
   11176:	4699      	mov	r9, r3
   11178:	9901      	ldr	r1, [sp, #4]
   1117a:	4001      	ands	r1, r0
   1117c:	b2cd      	uxtb	r5, r1
   1117e:	2100      	movs	r1, #0
   11180:	0312      	lsls	r2, r2, #12
   11182:	0d0b      	lsrs	r3, r1, #20
   11184:	0b12      	lsrs	r2, r2, #12
   11186:	051b      	lsls	r3, r3, #20
   11188:	4313      	orrs	r3, r2
   1118a:	4a43      	ldr	r2, [pc, #268]	; (11298 <__aeabi_dmul+0x1e8>)
   1118c:	0524      	lsls	r4, r4, #20
   1118e:	4013      	ands	r3, r2
   11190:	431c      	orrs	r4, r3
   11192:	0064      	lsls	r4, r4, #1
   11194:	07ed      	lsls	r5, r5, #31
   11196:	0864      	lsrs	r4, r4, #1
   11198:	432c      	orrs	r4, r5
   1119a:	4648      	mov	r0, r9
   1119c:	0021      	movs	r1, r4
   1119e:	b007      	add	sp, #28
   111a0:	bc3c      	pop	{r2, r3, r4, r5}
   111a2:	4690      	mov	r8, r2
   111a4:	4699      	mov	r9, r3
   111a6:	46a2      	mov	sl, r4
   111a8:	46ab      	mov	fp, r5
   111aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111ac:	4303      	orrs	r3, r0
   111ae:	4699      	mov	r9, r3
   111b0:	d04f      	beq.n	11252 <__aeabi_dmul+0x1a2>
   111b2:	465b      	mov	r3, fp
   111b4:	2b00      	cmp	r3, #0
   111b6:	d100      	bne.n	111ba <__aeabi_dmul+0x10a>
   111b8:	e189      	b.n	114ce <__aeabi_dmul+0x41e>
   111ba:	4658      	mov	r0, fp
   111bc:	f000 fdbc 	bl	11d38 <__clzsi2>
   111c0:	0003      	movs	r3, r0
   111c2:	3b0b      	subs	r3, #11
   111c4:	2b1c      	cmp	r3, #28
   111c6:	dd00      	ble.n	111ca <__aeabi_dmul+0x11a>
   111c8:	e17a      	b.n	114c0 <__aeabi_dmul+0x410>
   111ca:	221d      	movs	r2, #29
   111cc:	1ad3      	subs	r3, r2, r3
   111ce:	003a      	movs	r2, r7
   111d0:	0001      	movs	r1, r0
   111d2:	465c      	mov	r4, fp
   111d4:	40da      	lsrs	r2, r3
   111d6:	3908      	subs	r1, #8
   111d8:	408c      	lsls	r4, r1
   111da:	0013      	movs	r3, r2
   111dc:	408f      	lsls	r7, r1
   111de:	4323      	orrs	r3, r4
   111e0:	469b      	mov	fp, r3
   111e2:	46b9      	mov	r9, r7
   111e4:	2300      	movs	r3, #0
   111e6:	4e2d      	ldr	r6, [pc, #180]	; (1129c <__aeabi_dmul+0x1ec>)
   111e8:	2700      	movs	r7, #0
   111ea:	1a36      	subs	r6, r6, r0
   111ec:	9302      	str	r3, [sp, #8]
   111ee:	e784      	b.n	110fa <__aeabi_dmul+0x4a>
   111f0:	4653      	mov	r3, sl
   111f2:	4323      	orrs	r3, r4
   111f4:	d12a      	bne.n	1124c <__aeabi_dmul+0x19c>
   111f6:	2400      	movs	r4, #0
   111f8:	2002      	movs	r0, #2
   111fa:	e796      	b.n	1112a <__aeabi_dmul+0x7a>
   111fc:	4653      	mov	r3, sl
   111fe:	4323      	orrs	r3, r4
   11200:	d020      	beq.n	11244 <__aeabi_dmul+0x194>
   11202:	2c00      	cmp	r4, #0
   11204:	d100      	bne.n	11208 <__aeabi_dmul+0x158>
   11206:	e157      	b.n	114b8 <__aeabi_dmul+0x408>
   11208:	0020      	movs	r0, r4
   1120a:	f000 fd95 	bl	11d38 <__clzsi2>
   1120e:	0003      	movs	r3, r0
   11210:	3b0b      	subs	r3, #11
   11212:	2b1c      	cmp	r3, #28
   11214:	dd00      	ble.n	11218 <__aeabi_dmul+0x168>
   11216:	e149      	b.n	114ac <__aeabi_dmul+0x3fc>
   11218:	211d      	movs	r1, #29
   1121a:	1acb      	subs	r3, r1, r3
   1121c:	4651      	mov	r1, sl
   1121e:	0002      	movs	r2, r0
   11220:	40d9      	lsrs	r1, r3
   11222:	4653      	mov	r3, sl
   11224:	3a08      	subs	r2, #8
   11226:	4094      	lsls	r4, r2
   11228:	4093      	lsls	r3, r2
   1122a:	430c      	orrs	r4, r1
   1122c:	4a1b      	ldr	r2, [pc, #108]	; (1129c <__aeabi_dmul+0x1ec>)
   1122e:	1a12      	subs	r2, r2, r0
   11230:	2000      	movs	r0, #0
   11232:	e77a      	b.n	1112a <__aeabi_dmul+0x7a>
   11234:	2501      	movs	r5, #1
   11236:	9b01      	ldr	r3, [sp, #4]
   11238:	4c14      	ldr	r4, [pc, #80]	; (1128c <__aeabi_dmul+0x1dc>)
   1123a:	401d      	ands	r5, r3
   1123c:	2300      	movs	r3, #0
   1123e:	2200      	movs	r2, #0
   11240:	4699      	mov	r9, r3
   11242:	e79c      	b.n	1117e <__aeabi_dmul+0xce>
   11244:	2400      	movs	r4, #0
   11246:	2200      	movs	r2, #0
   11248:	2001      	movs	r0, #1
   1124a:	e76e      	b.n	1112a <__aeabi_dmul+0x7a>
   1124c:	4653      	mov	r3, sl
   1124e:	2003      	movs	r0, #3
   11250:	e76b      	b.n	1112a <__aeabi_dmul+0x7a>
   11252:	2300      	movs	r3, #0
   11254:	469b      	mov	fp, r3
   11256:	3301      	adds	r3, #1
   11258:	2704      	movs	r7, #4
   1125a:	2600      	movs	r6, #0
   1125c:	9302      	str	r3, [sp, #8]
   1125e:	e74c      	b.n	110fa <__aeabi_dmul+0x4a>
   11260:	2303      	movs	r3, #3
   11262:	4681      	mov	r9, r0
   11264:	270c      	movs	r7, #12
   11266:	9302      	str	r3, [sp, #8]
   11268:	e747      	b.n	110fa <__aeabi_dmul+0x4a>
   1126a:	2280      	movs	r2, #128	; 0x80
   1126c:	2300      	movs	r3, #0
   1126e:	2500      	movs	r5, #0
   11270:	0312      	lsls	r2, r2, #12
   11272:	4699      	mov	r9, r3
   11274:	4c05      	ldr	r4, [pc, #20]	; (1128c <__aeabi_dmul+0x1dc>)
   11276:	e782      	b.n	1117e <__aeabi_dmul+0xce>
   11278:	465c      	mov	r4, fp
   1127a:	464b      	mov	r3, r9
   1127c:	9802      	ldr	r0, [sp, #8]
   1127e:	e76f      	b.n	11160 <__aeabi_dmul+0xb0>
   11280:	465c      	mov	r4, fp
   11282:	464b      	mov	r3, r9
   11284:	9501      	str	r5, [sp, #4]
   11286:	9802      	ldr	r0, [sp, #8]
   11288:	e76a      	b.n	11160 <__aeabi_dmul+0xb0>
   1128a:	46c0      	nop			; (mov r8, r8)
   1128c:	000007ff 	.word	0x000007ff
   11290:	fffffc01 	.word	0xfffffc01
   11294:	00013e6c 	.word	0x00013e6c
   11298:	800fffff 	.word	0x800fffff
   1129c:	fffffc0d 	.word	0xfffffc0d
   112a0:	464a      	mov	r2, r9
   112a2:	4649      	mov	r1, r9
   112a4:	0c17      	lsrs	r7, r2, #16
   112a6:	0c1a      	lsrs	r2, r3, #16
   112a8:	041b      	lsls	r3, r3, #16
   112aa:	0c1b      	lsrs	r3, r3, #16
   112ac:	0408      	lsls	r0, r1, #16
   112ae:	0019      	movs	r1, r3
   112b0:	0c00      	lsrs	r0, r0, #16
   112b2:	4341      	muls	r1, r0
   112b4:	0015      	movs	r5, r2
   112b6:	4688      	mov	r8, r1
   112b8:	0019      	movs	r1, r3
   112ba:	437d      	muls	r5, r7
   112bc:	4379      	muls	r1, r7
   112be:	9503      	str	r5, [sp, #12]
   112c0:	4689      	mov	r9, r1
   112c2:	0029      	movs	r1, r5
   112c4:	0015      	movs	r5, r2
   112c6:	4345      	muls	r5, r0
   112c8:	444d      	add	r5, r9
   112ca:	9502      	str	r5, [sp, #8]
   112cc:	4645      	mov	r5, r8
   112ce:	0c2d      	lsrs	r5, r5, #16
   112d0:	46aa      	mov	sl, r5
   112d2:	9d02      	ldr	r5, [sp, #8]
   112d4:	4455      	add	r5, sl
   112d6:	45a9      	cmp	r9, r5
   112d8:	d906      	bls.n	112e8 <__aeabi_dmul+0x238>
   112da:	468a      	mov	sl, r1
   112dc:	2180      	movs	r1, #128	; 0x80
   112de:	0249      	lsls	r1, r1, #9
   112e0:	4689      	mov	r9, r1
   112e2:	44ca      	add	sl, r9
   112e4:	4651      	mov	r1, sl
   112e6:	9103      	str	r1, [sp, #12]
   112e8:	0c29      	lsrs	r1, r5, #16
   112ea:	9104      	str	r1, [sp, #16]
   112ec:	4641      	mov	r1, r8
   112ee:	0409      	lsls	r1, r1, #16
   112f0:	042d      	lsls	r5, r5, #16
   112f2:	0c09      	lsrs	r1, r1, #16
   112f4:	4688      	mov	r8, r1
   112f6:	0029      	movs	r1, r5
   112f8:	0c25      	lsrs	r5, r4, #16
   112fa:	0424      	lsls	r4, r4, #16
   112fc:	4441      	add	r1, r8
   112fe:	0c24      	lsrs	r4, r4, #16
   11300:	9105      	str	r1, [sp, #20]
   11302:	0021      	movs	r1, r4
   11304:	4341      	muls	r1, r0
   11306:	4688      	mov	r8, r1
   11308:	0021      	movs	r1, r4
   1130a:	4379      	muls	r1, r7
   1130c:	468a      	mov	sl, r1
   1130e:	4368      	muls	r0, r5
   11310:	4641      	mov	r1, r8
   11312:	4450      	add	r0, sl
   11314:	4681      	mov	r9, r0
   11316:	0c08      	lsrs	r0, r1, #16
   11318:	4448      	add	r0, r9
   1131a:	436f      	muls	r7, r5
   1131c:	4582      	cmp	sl, r0
   1131e:	d903      	bls.n	11328 <__aeabi_dmul+0x278>
   11320:	2180      	movs	r1, #128	; 0x80
   11322:	0249      	lsls	r1, r1, #9
   11324:	4689      	mov	r9, r1
   11326:	444f      	add	r7, r9
   11328:	0c01      	lsrs	r1, r0, #16
   1132a:	4689      	mov	r9, r1
   1132c:	0039      	movs	r1, r7
   1132e:	4449      	add	r1, r9
   11330:	9102      	str	r1, [sp, #8]
   11332:	4641      	mov	r1, r8
   11334:	040f      	lsls	r7, r1, #16
   11336:	9904      	ldr	r1, [sp, #16]
   11338:	0c3f      	lsrs	r7, r7, #16
   1133a:	4688      	mov	r8, r1
   1133c:	0400      	lsls	r0, r0, #16
   1133e:	19c0      	adds	r0, r0, r7
   11340:	4480      	add	r8, r0
   11342:	4641      	mov	r1, r8
   11344:	9104      	str	r1, [sp, #16]
   11346:	4659      	mov	r1, fp
   11348:	0c0f      	lsrs	r7, r1, #16
   1134a:	0409      	lsls	r1, r1, #16
   1134c:	0c09      	lsrs	r1, r1, #16
   1134e:	4688      	mov	r8, r1
   11350:	4359      	muls	r1, r3
   11352:	468a      	mov	sl, r1
   11354:	0039      	movs	r1, r7
   11356:	4351      	muls	r1, r2
   11358:	4689      	mov	r9, r1
   1135a:	4641      	mov	r1, r8
   1135c:	434a      	muls	r2, r1
   1135e:	4651      	mov	r1, sl
   11360:	0c09      	lsrs	r1, r1, #16
   11362:	468b      	mov	fp, r1
   11364:	437b      	muls	r3, r7
   11366:	18d2      	adds	r2, r2, r3
   11368:	445a      	add	r2, fp
   1136a:	4293      	cmp	r3, r2
   1136c:	d903      	bls.n	11376 <__aeabi_dmul+0x2c6>
   1136e:	2380      	movs	r3, #128	; 0x80
   11370:	025b      	lsls	r3, r3, #9
   11372:	469b      	mov	fp, r3
   11374:	44d9      	add	r9, fp
   11376:	4651      	mov	r1, sl
   11378:	0409      	lsls	r1, r1, #16
   1137a:	0c09      	lsrs	r1, r1, #16
   1137c:	468a      	mov	sl, r1
   1137e:	4641      	mov	r1, r8
   11380:	4361      	muls	r1, r4
   11382:	437c      	muls	r4, r7
   11384:	0c13      	lsrs	r3, r2, #16
   11386:	0412      	lsls	r2, r2, #16
   11388:	444b      	add	r3, r9
   1138a:	4452      	add	r2, sl
   1138c:	46a1      	mov	r9, r4
   1138e:	468a      	mov	sl, r1
   11390:	003c      	movs	r4, r7
   11392:	4641      	mov	r1, r8
   11394:	436c      	muls	r4, r5
   11396:	434d      	muls	r5, r1
   11398:	4651      	mov	r1, sl
   1139a:	444d      	add	r5, r9
   1139c:	0c0f      	lsrs	r7, r1, #16
   1139e:	197d      	adds	r5, r7, r5
   113a0:	45a9      	cmp	r9, r5
   113a2:	d903      	bls.n	113ac <__aeabi_dmul+0x2fc>
   113a4:	2180      	movs	r1, #128	; 0x80
   113a6:	0249      	lsls	r1, r1, #9
   113a8:	4688      	mov	r8, r1
   113aa:	4444      	add	r4, r8
   113ac:	9f04      	ldr	r7, [sp, #16]
   113ae:	9903      	ldr	r1, [sp, #12]
   113b0:	46b8      	mov	r8, r7
   113b2:	4441      	add	r1, r8
   113b4:	468b      	mov	fp, r1
   113b6:	4583      	cmp	fp, r0
   113b8:	4180      	sbcs	r0, r0
   113ba:	4241      	negs	r1, r0
   113bc:	4688      	mov	r8, r1
   113be:	4651      	mov	r1, sl
   113c0:	0408      	lsls	r0, r1, #16
   113c2:	042f      	lsls	r7, r5, #16
   113c4:	0c00      	lsrs	r0, r0, #16
   113c6:	183f      	adds	r7, r7, r0
   113c8:	4658      	mov	r0, fp
   113ca:	9902      	ldr	r1, [sp, #8]
   113cc:	1810      	adds	r0, r2, r0
   113ce:	4689      	mov	r9, r1
   113d0:	4290      	cmp	r0, r2
   113d2:	4192      	sbcs	r2, r2
   113d4:	444f      	add	r7, r9
   113d6:	46ba      	mov	sl, r7
   113d8:	4252      	negs	r2, r2
   113da:	4699      	mov	r9, r3
   113dc:	4693      	mov	fp, r2
   113de:	44c2      	add	sl, r8
   113e0:	44d1      	add	r9, sl
   113e2:	44cb      	add	fp, r9
   113e4:	428f      	cmp	r7, r1
   113e6:	41bf      	sbcs	r7, r7
   113e8:	45c2      	cmp	sl, r8
   113ea:	4189      	sbcs	r1, r1
   113ec:	4599      	cmp	r9, r3
   113ee:	419b      	sbcs	r3, r3
   113f0:	4593      	cmp	fp, r2
   113f2:	4192      	sbcs	r2, r2
   113f4:	427f      	negs	r7, r7
   113f6:	4249      	negs	r1, r1
   113f8:	0c2d      	lsrs	r5, r5, #16
   113fa:	4252      	negs	r2, r2
   113fc:	430f      	orrs	r7, r1
   113fe:	425b      	negs	r3, r3
   11400:	4313      	orrs	r3, r2
   11402:	197f      	adds	r7, r7, r5
   11404:	18ff      	adds	r7, r7, r3
   11406:	465b      	mov	r3, fp
   11408:	193c      	adds	r4, r7, r4
   1140a:	0ddb      	lsrs	r3, r3, #23
   1140c:	9a05      	ldr	r2, [sp, #20]
   1140e:	0264      	lsls	r4, r4, #9
   11410:	431c      	orrs	r4, r3
   11412:	0243      	lsls	r3, r0, #9
   11414:	4313      	orrs	r3, r2
   11416:	1e5d      	subs	r5, r3, #1
   11418:	41ab      	sbcs	r3, r5
   1141a:	465a      	mov	r2, fp
   1141c:	0dc0      	lsrs	r0, r0, #23
   1141e:	4303      	orrs	r3, r0
   11420:	0252      	lsls	r2, r2, #9
   11422:	4313      	orrs	r3, r2
   11424:	01e2      	lsls	r2, r4, #7
   11426:	d556      	bpl.n	114d6 <__aeabi_dmul+0x426>
   11428:	2001      	movs	r0, #1
   1142a:	085a      	lsrs	r2, r3, #1
   1142c:	4003      	ands	r3, r0
   1142e:	4313      	orrs	r3, r2
   11430:	07e2      	lsls	r2, r4, #31
   11432:	4313      	orrs	r3, r2
   11434:	0864      	lsrs	r4, r4, #1
   11436:	485a      	ldr	r0, [pc, #360]	; (115a0 <__aeabi_dmul+0x4f0>)
   11438:	4460      	add	r0, ip
   1143a:	2800      	cmp	r0, #0
   1143c:	dd4d      	ble.n	114da <__aeabi_dmul+0x42a>
   1143e:	075a      	lsls	r2, r3, #29
   11440:	d009      	beq.n	11456 <__aeabi_dmul+0x3a6>
   11442:	220f      	movs	r2, #15
   11444:	401a      	ands	r2, r3
   11446:	2a04      	cmp	r2, #4
   11448:	d005      	beq.n	11456 <__aeabi_dmul+0x3a6>
   1144a:	1d1a      	adds	r2, r3, #4
   1144c:	429a      	cmp	r2, r3
   1144e:	419b      	sbcs	r3, r3
   11450:	425b      	negs	r3, r3
   11452:	18e4      	adds	r4, r4, r3
   11454:	0013      	movs	r3, r2
   11456:	01e2      	lsls	r2, r4, #7
   11458:	d504      	bpl.n	11464 <__aeabi_dmul+0x3b4>
   1145a:	2080      	movs	r0, #128	; 0x80
   1145c:	4a51      	ldr	r2, [pc, #324]	; (115a4 <__aeabi_dmul+0x4f4>)
   1145e:	00c0      	lsls	r0, r0, #3
   11460:	4014      	ands	r4, r2
   11462:	4460      	add	r0, ip
   11464:	4a50      	ldr	r2, [pc, #320]	; (115a8 <__aeabi_dmul+0x4f8>)
   11466:	4290      	cmp	r0, r2
   11468:	dd00      	ble.n	1146c <__aeabi_dmul+0x3bc>
   1146a:	e6e3      	b.n	11234 <__aeabi_dmul+0x184>
   1146c:	2501      	movs	r5, #1
   1146e:	08db      	lsrs	r3, r3, #3
   11470:	0762      	lsls	r2, r4, #29
   11472:	431a      	orrs	r2, r3
   11474:	0264      	lsls	r4, r4, #9
   11476:	9b01      	ldr	r3, [sp, #4]
   11478:	4691      	mov	r9, r2
   1147a:	0b22      	lsrs	r2, r4, #12
   1147c:	0544      	lsls	r4, r0, #21
   1147e:	0d64      	lsrs	r4, r4, #21
   11480:	401d      	ands	r5, r3
   11482:	e67c      	b.n	1117e <__aeabi_dmul+0xce>
   11484:	2280      	movs	r2, #128	; 0x80
   11486:	4659      	mov	r1, fp
   11488:	0312      	lsls	r2, r2, #12
   1148a:	4211      	tst	r1, r2
   1148c:	d008      	beq.n	114a0 <__aeabi_dmul+0x3f0>
   1148e:	4214      	tst	r4, r2
   11490:	d106      	bne.n	114a0 <__aeabi_dmul+0x3f0>
   11492:	4322      	orrs	r2, r4
   11494:	0312      	lsls	r2, r2, #12
   11496:	0b12      	lsrs	r2, r2, #12
   11498:	4645      	mov	r5, r8
   1149a:	4699      	mov	r9, r3
   1149c:	4c43      	ldr	r4, [pc, #268]	; (115ac <__aeabi_dmul+0x4fc>)
   1149e:	e66e      	b.n	1117e <__aeabi_dmul+0xce>
   114a0:	465b      	mov	r3, fp
   114a2:	431a      	orrs	r2, r3
   114a4:	0312      	lsls	r2, r2, #12
   114a6:	0b12      	lsrs	r2, r2, #12
   114a8:	4c40      	ldr	r4, [pc, #256]	; (115ac <__aeabi_dmul+0x4fc>)
   114aa:	e668      	b.n	1117e <__aeabi_dmul+0xce>
   114ac:	0003      	movs	r3, r0
   114ae:	4654      	mov	r4, sl
   114b0:	3b28      	subs	r3, #40	; 0x28
   114b2:	409c      	lsls	r4, r3
   114b4:	2300      	movs	r3, #0
   114b6:	e6b9      	b.n	1122c <__aeabi_dmul+0x17c>
   114b8:	f000 fc3e 	bl	11d38 <__clzsi2>
   114bc:	3020      	adds	r0, #32
   114be:	e6a6      	b.n	1120e <__aeabi_dmul+0x15e>
   114c0:	0003      	movs	r3, r0
   114c2:	3b28      	subs	r3, #40	; 0x28
   114c4:	409f      	lsls	r7, r3
   114c6:	2300      	movs	r3, #0
   114c8:	46bb      	mov	fp, r7
   114ca:	4699      	mov	r9, r3
   114cc:	e68a      	b.n	111e4 <__aeabi_dmul+0x134>
   114ce:	f000 fc33 	bl	11d38 <__clzsi2>
   114d2:	3020      	adds	r0, #32
   114d4:	e674      	b.n	111c0 <__aeabi_dmul+0x110>
   114d6:	46b4      	mov	ip, r6
   114d8:	e7ad      	b.n	11436 <__aeabi_dmul+0x386>
   114da:	2501      	movs	r5, #1
   114dc:	1a2a      	subs	r2, r5, r0
   114de:	2a38      	cmp	r2, #56	; 0x38
   114e0:	dd06      	ble.n	114f0 <__aeabi_dmul+0x440>
   114e2:	9b01      	ldr	r3, [sp, #4]
   114e4:	2400      	movs	r4, #0
   114e6:	401d      	ands	r5, r3
   114e8:	2300      	movs	r3, #0
   114ea:	2200      	movs	r2, #0
   114ec:	4699      	mov	r9, r3
   114ee:	e646      	b.n	1117e <__aeabi_dmul+0xce>
   114f0:	2a1f      	cmp	r2, #31
   114f2:	dc21      	bgt.n	11538 <__aeabi_dmul+0x488>
   114f4:	2520      	movs	r5, #32
   114f6:	0020      	movs	r0, r4
   114f8:	1aad      	subs	r5, r5, r2
   114fa:	001e      	movs	r6, r3
   114fc:	40ab      	lsls	r3, r5
   114fe:	40a8      	lsls	r0, r5
   11500:	40d6      	lsrs	r6, r2
   11502:	1e5d      	subs	r5, r3, #1
   11504:	41ab      	sbcs	r3, r5
   11506:	4330      	orrs	r0, r6
   11508:	4318      	orrs	r0, r3
   1150a:	40d4      	lsrs	r4, r2
   1150c:	0743      	lsls	r3, r0, #29
   1150e:	d009      	beq.n	11524 <__aeabi_dmul+0x474>
   11510:	230f      	movs	r3, #15
   11512:	4003      	ands	r3, r0
   11514:	2b04      	cmp	r3, #4
   11516:	d005      	beq.n	11524 <__aeabi_dmul+0x474>
   11518:	0003      	movs	r3, r0
   1151a:	1d18      	adds	r0, r3, #4
   1151c:	4298      	cmp	r0, r3
   1151e:	419b      	sbcs	r3, r3
   11520:	425b      	negs	r3, r3
   11522:	18e4      	adds	r4, r4, r3
   11524:	0223      	lsls	r3, r4, #8
   11526:	d521      	bpl.n	1156c <__aeabi_dmul+0x4bc>
   11528:	2501      	movs	r5, #1
   1152a:	9b01      	ldr	r3, [sp, #4]
   1152c:	2401      	movs	r4, #1
   1152e:	401d      	ands	r5, r3
   11530:	2300      	movs	r3, #0
   11532:	2200      	movs	r2, #0
   11534:	4699      	mov	r9, r3
   11536:	e622      	b.n	1117e <__aeabi_dmul+0xce>
   11538:	251f      	movs	r5, #31
   1153a:	0021      	movs	r1, r4
   1153c:	426d      	negs	r5, r5
   1153e:	1a28      	subs	r0, r5, r0
   11540:	40c1      	lsrs	r1, r0
   11542:	0008      	movs	r0, r1
   11544:	2a20      	cmp	r2, #32
   11546:	d01d      	beq.n	11584 <__aeabi_dmul+0x4d4>
   11548:	355f      	adds	r5, #95	; 0x5f
   1154a:	1aaa      	subs	r2, r5, r2
   1154c:	4094      	lsls	r4, r2
   1154e:	4323      	orrs	r3, r4
   11550:	1e5c      	subs	r4, r3, #1
   11552:	41a3      	sbcs	r3, r4
   11554:	2507      	movs	r5, #7
   11556:	4303      	orrs	r3, r0
   11558:	401d      	ands	r5, r3
   1155a:	2200      	movs	r2, #0
   1155c:	2d00      	cmp	r5, #0
   1155e:	d009      	beq.n	11574 <__aeabi_dmul+0x4c4>
   11560:	220f      	movs	r2, #15
   11562:	2400      	movs	r4, #0
   11564:	401a      	ands	r2, r3
   11566:	0018      	movs	r0, r3
   11568:	2a04      	cmp	r2, #4
   1156a:	d1d6      	bne.n	1151a <__aeabi_dmul+0x46a>
   1156c:	0003      	movs	r3, r0
   1156e:	0765      	lsls	r5, r4, #29
   11570:	0264      	lsls	r4, r4, #9
   11572:	0b22      	lsrs	r2, r4, #12
   11574:	08db      	lsrs	r3, r3, #3
   11576:	432b      	orrs	r3, r5
   11578:	2501      	movs	r5, #1
   1157a:	4699      	mov	r9, r3
   1157c:	9b01      	ldr	r3, [sp, #4]
   1157e:	2400      	movs	r4, #0
   11580:	401d      	ands	r5, r3
   11582:	e5fc      	b.n	1117e <__aeabi_dmul+0xce>
   11584:	2400      	movs	r4, #0
   11586:	e7e2      	b.n	1154e <__aeabi_dmul+0x49e>
   11588:	2280      	movs	r2, #128	; 0x80
   1158a:	2501      	movs	r5, #1
   1158c:	0312      	lsls	r2, r2, #12
   1158e:	4322      	orrs	r2, r4
   11590:	9901      	ldr	r1, [sp, #4]
   11592:	0312      	lsls	r2, r2, #12
   11594:	0b12      	lsrs	r2, r2, #12
   11596:	400d      	ands	r5, r1
   11598:	4699      	mov	r9, r3
   1159a:	4c04      	ldr	r4, [pc, #16]	; (115ac <__aeabi_dmul+0x4fc>)
   1159c:	e5ef      	b.n	1117e <__aeabi_dmul+0xce>
   1159e:	46c0      	nop			; (mov r8, r8)
   115a0:	000003ff 	.word	0x000003ff
   115a4:	feffffff 	.word	0xfeffffff
   115a8:	000007fe 	.word	0x000007fe
   115ac:	000007ff 	.word	0x000007ff

000115b0 <__aeabi_dsub>:
   115b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   115b2:	4646      	mov	r6, r8
   115b4:	46d6      	mov	lr, sl
   115b6:	464f      	mov	r7, r9
   115b8:	030c      	lsls	r4, r1, #12
   115ba:	b5c0      	push	{r6, r7, lr}
   115bc:	0fcd      	lsrs	r5, r1, #31
   115be:	004e      	lsls	r6, r1, #1
   115c0:	0a61      	lsrs	r1, r4, #9
   115c2:	0f44      	lsrs	r4, r0, #29
   115c4:	430c      	orrs	r4, r1
   115c6:	00c1      	lsls	r1, r0, #3
   115c8:	0058      	lsls	r0, r3, #1
   115ca:	0d40      	lsrs	r0, r0, #21
   115cc:	4684      	mov	ip, r0
   115ce:	468a      	mov	sl, r1
   115d0:	000f      	movs	r7, r1
   115d2:	0319      	lsls	r1, r3, #12
   115d4:	0f50      	lsrs	r0, r2, #29
   115d6:	0a49      	lsrs	r1, r1, #9
   115d8:	4301      	orrs	r1, r0
   115da:	48c6      	ldr	r0, [pc, #792]	; (118f4 <__aeabi_dsub+0x344>)
   115dc:	0d76      	lsrs	r6, r6, #21
   115de:	46a8      	mov	r8, r5
   115e0:	0fdb      	lsrs	r3, r3, #31
   115e2:	00d2      	lsls	r2, r2, #3
   115e4:	4584      	cmp	ip, r0
   115e6:	d100      	bne.n	115ea <__aeabi_dsub+0x3a>
   115e8:	e0d8      	b.n	1179c <__aeabi_dsub+0x1ec>
   115ea:	2001      	movs	r0, #1
   115ec:	4043      	eors	r3, r0
   115ee:	42ab      	cmp	r3, r5
   115f0:	d100      	bne.n	115f4 <__aeabi_dsub+0x44>
   115f2:	e0a6      	b.n	11742 <__aeabi_dsub+0x192>
   115f4:	4660      	mov	r0, ip
   115f6:	1a35      	subs	r5, r6, r0
   115f8:	2d00      	cmp	r5, #0
   115fa:	dc00      	bgt.n	115fe <__aeabi_dsub+0x4e>
   115fc:	e105      	b.n	1180a <__aeabi_dsub+0x25a>
   115fe:	2800      	cmp	r0, #0
   11600:	d110      	bne.n	11624 <__aeabi_dsub+0x74>
   11602:	000b      	movs	r3, r1
   11604:	4313      	orrs	r3, r2
   11606:	d100      	bne.n	1160a <__aeabi_dsub+0x5a>
   11608:	e0d7      	b.n	117ba <__aeabi_dsub+0x20a>
   1160a:	1e6b      	subs	r3, r5, #1
   1160c:	2b00      	cmp	r3, #0
   1160e:	d000      	beq.n	11612 <__aeabi_dsub+0x62>
   11610:	e14b      	b.n	118aa <__aeabi_dsub+0x2fa>
   11612:	4653      	mov	r3, sl
   11614:	1a9f      	subs	r7, r3, r2
   11616:	45ba      	cmp	sl, r7
   11618:	4180      	sbcs	r0, r0
   1161a:	1a64      	subs	r4, r4, r1
   1161c:	4240      	negs	r0, r0
   1161e:	1a24      	subs	r4, r4, r0
   11620:	2601      	movs	r6, #1
   11622:	e01e      	b.n	11662 <__aeabi_dsub+0xb2>
   11624:	4bb3      	ldr	r3, [pc, #716]	; (118f4 <__aeabi_dsub+0x344>)
   11626:	429e      	cmp	r6, r3
   11628:	d048      	beq.n	116bc <__aeabi_dsub+0x10c>
   1162a:	2380      	movs	r3, #128	; 0x80
   1162c:	041b      	lsls	r3, r3, #16
   1162e:	4319      	orrs	r1, r3
   11630:	2d38      	cmp	r5, #56	; 0x38
   11632:	dd00      	ble.n	11636 <__aeabi_dsub+0x86>
   11634:	e119      	b.n	1186a <__aeabi_dsub+0x2ba>
   11636:	2d1f      	cmp	r5, #31
   11638:	dd00      	ble.n	1163c <__aeabi_dsub+0x8c>
   1163a:	e14c      	b.n	118d6 <__aeabi_dsub+0x326>
   1163c:	2320      	movs	r3, #32
   1163e:	000f      	movs	r7, r1
   11640:	1b5b      	subs	r3, r3, r5
   11642:	0010      	movs	r0, r2
   11644:	409a      	lsls	r2, r3
   11646:	409f      	lsls	r7, r3
   11648:	40e8      	lsrs	r0, r5
   1164a:	1e53      	subs	r3, r2, #1
   1164c:	419a      	sbcs	r2, r3
   1164e:	40e9      	lsrs	r1, r5
   11650:	4307      	orrs	r7, r0
   11652:	4317      	orrs	r7, r2
   11654:	4653      	mov	r3, sl
   11656:	1bdf      	subs	r7, r3, r7
   11658:	1a61      	subs	r1, r4, r1
   1165a:	45ba      	cmp	sl, r7
   1165c:	41a4      	sbcs	r4, r4
   1165e:	4264      	negs	r4, r4
   11660:	1b0c      	subs	r4, r1, r4
   11662:	0223      	lsls	r3, r4, #8
   11664:	d400      	bmi.n	11668 <__aeabi_dsub+0xb8>
   11666:	e0c5      	b.n	117f4 <__aeabi_dsub+0x244>
   11668:	0264      	lsls	r4, r4, #9
   1166a:	0a65      	lsrs	r5, r4, #9
   1166c:	2d00      	cmp	r5, #0
   1166e:	d100      	bne.n	11672 <__aeabi_dsub+0xc2>
   11670:	e0f6      	b.n	11860 <__aeabi_dsub+0x2b0>
   11672:	0028      	movs	r0, r5
   11674:	f000 fb60 	bl	11d38 <__clzsi2>
   11678:	0003      	movs	r3, r0
   1167a:	3b08      	subs	r3, #8
   1167c:	2b1f      	cmp	r3, #31
   1167e:	dd00      	ble.n	11682 <__aeabi_dsub+0xd2>
   11680:	e0e9      	b.n	11856 <__aeabi_dsub+0x2a6>
   11682:	2220      	movs	r2, #32
   11684:	003c      	movs	r4, r7
   11686:	1ad2      	subs	r2, r2, r3
   11688:	409d      	lsls	r5, r3
   1168a:	40d4      	lsrs	r4, r2
   1168c:	409f      	lsls	r7, r3
   1168e:	4325      	orrs	r5, r4
   11690:	429e      	cmp	r6, r3
   11692:	dd00      	ble.n	11696 <__aeabi_dsub+0xe6>
   11694:	e0db      	b.n	1184e <__aeabi_dsub+0x29e>
   11696:	1b9e      	subs	r6, r3, r6
   11698:	1c73      	adds	r3, r6, #1
   1169a:	2b1f      	cmp	r3, #31
   1169c:	dd00      	ble.n	116a0 <__aeabi_dsub+0xf0>
   1169e:	e10a      	b.n	118b6 <__aeabi_dsub+0x306>
   116a0:	2220      	movs	r2, #32
   116a2:	0038      	movs	r0, r7
   116a4:	1ad2      	subs	r2, r2, r3
   116a6:	0029      	movs	r1, r5
   116a8:	4097      	lsls	r7, r2
   116aa:	002c      	movs	r4, r5
   116ac:	4091      	lsls	r1, r2
   116ae:	40d8      	lsrs	r0, r3
   116b0:	1e7a      	subs	r2, r7, #1
   116b2:	4197      	sbcs	r7, r2
   116b4:	40dc      	lsrs	r4, r3
   116b6:	2600      	movs	r6, #0
   116b8:	4301      	orrs	r1, r0
   116ba:	430f      	orrs	r7, r1
   116bc:	077b      	lsls	r3, r7, #29
   116be:	d009      	beq.n	116d4 <__aeabi_dsub+0x124>
   116c0:	230f      	movs	r3, #15
   116c2:	403b      	ands	r3, r7
   116c4:	2b04      	cmp	r3, #4
   116c6:	d005      	beq.n	116d4 <__aeabi_dsub+0x124>
   116c8:	1d3b      	adds	r3, r7, #4
   116ca:	42bb      	cmp	r3, r7
   116cc:	41bf      	sbcs	r7, r7
   116ce:	427f      	negs	r7, r7
   116d0:	19e4      	adds	r4, r4, r7
   116d2:	001f      	movs	r7, r3
   116d4:	0223      	lsls	r3, r4, #8
   116d6:	d525      	bpl.n	11724 <__aeabi_dsub+0x174>
   116d8:	4b86      	ldr	r3, [pc, #536]	; (118f4 <__aeabi_dsub+0x344>)
   116da:	3601      	adds	r6, #1
   116dc:	429e      	cmp	r6, r3
   116de:	d100      	bne.n	116e2 <__aeabi_dsub+0x132>
   116e0:	e0af      	b.n	11842 <__aeabi_dsub+0x292>
   116e2:	4b85      	ldr	r3, [pc, #532]	; (118f8 <__aeabi_dsub+0x348>)
   116e4:	2501      	movs	r5, #1
   116e6:	401c      	ands	r4, r3
   116e8:	4643      	mov	r3, r8
   116ea:	0762      	lsls	r2, r4, #29
   116ec:	08ff      	lsrs	r7, r7, #3
   116ee:	0264      	lsls	r4, r4, #9
   116f0:	0576      	lsls	r6, r6, #21
   116f2:	4317      	orrs	r7, r2
   116f4:	0b24      	lsrs	r4, r4, #12
   116f6:	0d76      	lsrs	r6, r6, #21
   116f8:	401d      	ands	r5, r3
   116fa:	2100      	movs	r1, #0
   116fc:	0324      	lsls	r4, r4, #12
   116fe:	0b23      	lsrs	r3, r4, #12
   11700:	0d0c      	lsrs	r4, r1, #20
   11702:	4a7e      	ldr	r2, [pc, #504]	; (118fc <__aeabi_dsub+0x34c>)
   11704:	0524      	lsls	r4, r4, #20
   11706:	431c      	orrs	r4, r3
   11708:	4014      	ands	r4, r2
   1170a:	0533      	lsls	r3, r6, #20
   1170c:	4323      	orrs	r3, r4
   1170e:	005b      	lsls	r3, r3, #1
   11710:	07ed      	lsls	r5, r5, #31
   11712:	085b      	lsrs	r3, r3, #1
   11714:	432b      	orrs	r3, r5
   11716:	0038      	movs	r0, r7
   11718:	0019      	movs	r1, r3
   1171a:	bc1c      	pop	{r2, r3, r4}
   1171c:	4690      	mov	r8, r2
   1171e:	4699      	mov	r9, r3
   11720:	46a2      	mov	sl, r4
   11722:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11724:	2501      	movs	r5, #1
   11726:	4643      	mov	r3, r8
   11728:	0762      	lsls	r2, r4, #29
   1172a:	08ff      	lsrs	r7, r7, #3
   1172c:	4317      	orrs	r7, r2
   1172e:	08e4      	lsrs	r4, r4, #3
   11730:	401d      	ands	r5, r3
   11732:	4b70      	ldr	r3, [pc, #448]	; (118f4 <__aeabi_dsub+0x344>)
   11734:	429e      	cmp	r6, r3
   11736:	d036      	beq.n	117a6 <__aeabi_dsub+0x1f6>
   11738:	0324      	lsls	r4, r4, #12
   1173a:	0576      	lsls	r6, r6, #21
   1173c:	0b24      	lsrs	r4, r4, #12
   1173e:	0d76      	lsrs	r6, r6, #21
   11740:	e7db      	b.n	116fa <__aeabi_dsub+0x14a>
   11742:	4663      	mov	r3, ip
   11744:	1af3      	subs	r3, r6, r3
   11746:	2b00      	cmp	r3, #0
   11748:	dc00      	bgt.n	1174c <__aeabi_dsub+0x19c>
   1174a:	e094      	b.n	11876 <__aeabi_dsub+0x2c6>
   1174c:	4660      	mov	r0, ip
   1174e:	2800      	cmp	r0, #0
   11750:	d035      	beq.n	117be <__aeabi_dsub+0x20e>
   11752:	4868      	ldr	r0, [pc, #416]	; (118f4 <__aeabi_dsub+0x344>)
   11754:	4286      	cmp	r6, r0
   11756:	d0b1      	beq.n	116bc <__aeabi_dsub+0x10c>
   11758:	2780      	movs	r7, #128	; 0x80
   1175a:	043f      	lsls	r7, r7, #16
   1175c:	4339      	orrs	r1, r7
   1175e:	2b38      	cmp	r3, #56	; 0x38
   11760:	dc00      	bgt.n	11764 <__aeabi_dsub+0x1b4>
   11762:	e0fd      	b.n	11960 <__aeabi_dsub+0x3b0>
   11764:	430a      	orrs	r2, r1
   11766:	0017      	movs	r7, r2
   11768:	2100      	movs	r1, #0
   1176a:	1e7a      	subs	r2, r7, #1
   1176c:	4197      	sbcs	r7, r2
   1176e:	4457      	add	r7, sl
   11770:	4557      	cmp	r7, sl
   11772:	4180      	sbcs	r0, r0
   11774:	1909      	adds	r1, r1, r4
   11776:	4244      	negs	r4, r0
   11778:	190c      	adds	r4, r1, r4
   1177a:	0223      	lsls	r3, r4, #8
   1177c:	d53a      	bpl.n	117f4 <__aeabi_dsub+0x244>
   1177e:	4b5d      	ldr	r3, [pc, #372]	; (118f4 <__aeabi_dsub+0x344>)
   11780:	3601      	adds	r6, #1
   11782:	429e      	cmp	r6, r3
   11784:	d100      	bne.n	11788 <__aeabi_dsub+0x1d8>
   11786:	e14b      	b.n	11a20 <__aeabi_dsub+0x470>
   11788:	2201      	movs	r2, #1
   1178a:	4b5b      	ldr	r3, [pc, #364]	; (118f8 <__aeabi_dsub+0x348>)
   1178c:	401c      	ands	r4, r3
   1178e:	087b      	lsrs	r3, r7, #1
   11790:	4017      	ands	r7, r2
   11792:	431f      	orrs	r7, r3
   11794:	07e2      	lsls	r2, r4, #31
   11796:	4317      	orrs	r7, r2
   11798:	0864      	lsrs	r4, r4, #1
   1179a:	e78f      	b.n	116bc <__aeabi_dsub+0x10c>
   1179c:	0008      	movs	r0, r1
   1179e:	4310      	orrs	r0, r2
   117a0:	d000      	beq.n	117a4 <__aeabi_dsub+0x1f4>
   117a2:	e724      	b.n	115ee <__aeabi_dsub+0x3e>
   117a4:	e721      	b.n	115ea <__aeabi_dsub+0x3a>
   117a6:	0023      	movs	r3, r4
   117a8:	433b      	orrs	r3, r7
   117aa:	d100      	bne.n	117ae <__aeabi_dsub+0x1fe>
   117ac:	e1b9      	b.n	11b22 <__aeabi_dsub+0x572>
   117ae:	2280      	movs	r2, #128	; 0x80
   117b0:	0312      	lsls	r2, r2, #12
   117b2:	4314      	orrs	r4, r2
   117b4:	0324      	lsls	r4, r4, #12
   117b6:	0b24      	lsrs	r4, r4, #12
   117b8:	e79f      	b.n	116fa <__aeabi_dsub+0x14a>
   117ba:	002e      	movs	r6, r5
   117bc:	e77e      	b.n	116bc <__aeabi_dsub+0x10c>
   117be:	0008      	movs	r0, r1
   117c0:	4310      	orrs	r0, r2
   117c2:	d100      	bne.n	117c6 <__aeabi_dsub+0x216>
   117c4:	e0ca      	b.n	1195c <__aeabi_dsub+0x3ac>
   117c6:	1e58      	subs	r0, r3, #1
   117c8:	4684      	mov	ip, r0
   117ca:	2800      	cmp	r0, #0
   117cc:	d000      	beq.n	117d0 <__aeabi_dsub+0x220>
   117ce:	e0e7      	b.n	119a0 <__aeabi_dsub+0x3f0>
   117d0:	4452      	add	r2, sl
   117d2:	4552      	cmp	r2, sl
   117d4:	4180      	sbcs	r0, r0
   117d6:	1864      	adds	r4, r4, r1
   117d8:	4240      	negs	r0, r0
   117da:	1824      	adds	r4, r4, r0
   117dc:	0017      	movs	r7, r2
   117de:	2601      	movs	r6, #1
   117e0:	0223      	lsls	r3, r4, #8
   117e2:	d507      	bpl.n	117f4 <__aeabi_dsub+0x244>
   117e4:	2602      	movs	r6, #2
   117e6:	e7cf      	b.n	11788 <__aeabi_dsub+0x1d8>
   117e8:	4664      	mov	r4, ip
   117ea:	432c      	orrs	r4, r5
   117ec:	d100      	bne.n	117f0 <__aeabi_dsub+0x240>
   117ee:	e1b3      	b.n	11b58 <__aeabi_dsub+0x5a8>
   117f0:	002c      	movs	r4, r5
   117f2:	4667      	mov	r7, ip
   117f4:	077b      	lsls	r3, r7, #29
   117f6:	d000      	beq.n	117fa <__aeabi_dsub+0x24a>
   117f8:	e762      	b.n	116c0 <__aeabi_dsub+0x110>
   117fa:	0763      	lsls	r3, r4, #29
   117fc:	08ff      	lsrs	r7, r7, #3
   117fe:	431f      	orrs	r7, r3
   11800:	2501      	movs	r5, #1
   11802:	4643      	mov	r3, r8
   11804:	08e4      	lsrs	r4, r4, #3
   11806:	401d      	ands	r5, r3
   11808:	e793      	b.n	11732 <__aeabi_dsub+0x182>
   1180a:	2d00      	cmp	r5, #0
   1180c:	d178      	bne.n	11900 <__aeabi_dsub+0x350>
   1180e:	1c75      	adds	r5, r6, #1
   11810:	056d      	lsls	r5, r5, #21
   11812:	0d6d      	lsrs	r5, r5, #21
   11814:	2d01      	cmp	r5, #1
   11816:	dc00      	bgt.n	1181a <__aeabi_dsub+0x26a>
   11818:	e0f2      	b.n	11a00 <__aeabi_dsub+0x450>
   1181a:	4650      	mov	r0, sl
   1181c:	1a80      	subs	r0, r0, r2
   1181e:	4582      	cmp	sl, r0
   11820:	41bf      	sbcs	r7, r7
   11822:	1a65      	subs	r5, r4, r1
   11824:	427f      	negs	r7, r7
   11826:	1bed      	subs	r5, r5, r7
   11828:	4684      	mov	ip, r0
   1182a:	0228      	lsls	r0, r5, #8
   1182c:	d400      	bmi.n	11830 <__aeabi_dsub+0x280>
   1182e:	e08c      	b.n	1194a <__aeabi_dsub+0x39a>
   11830:	4650      	mov	r0, sl
   11832:	1a17      	subs	r7, r2, r0
   11834:	42ba      	cmp	r2, r7
   11836:	4192      	sbcs	r2, r2
   11838:	1b0c      	subs	r4, r1, r4
   1183a:	4255      	negs	r5, r2
   1183c:	1b65      	subs	r5, r4, r5
   1183e:	4698      	mov	r8, r3
   11840:	e714      	b.n	1166c <__aeabi_dsub+0xbc>
   11842:	2501      	movs	r5, #1
   11844:	4643      	mov	r3, r8
   11846:	2400      	movs	r4, #0
   11848:	401d      	ands	r5, r3
   1184a:	2700      	movs	r7, #0
   1184c:	e755      	b.n	116fa <__aeabi_dsub+0x14a>
   1184e:	4c2a      	ldr	r4, [pc, #168]	; (118f8 <__aeabi_dsub+0x348>)
   11850:	1af6      	subs	r6, r6, r3
   11852:	402c      	ands	r4, r5
   11854:	e732      	b.n	116bc <__aeabi_dsub+0x10c>
   11856:	003d      	movs	r5, r7
   11858:	3828      	subs	r0, #40	; 0x28
   1185a:	4085      	lsls	r5, r0
   1185c:	2700      	movs	r7, #0
   1185e:	e717      	b.n	11690 <__aeabi_dsub+0xe0>
   11860:	0038      	movs	r0, r7
   11862:	f000 fa69 	bl	11d38 <__clzsi2>
   11866:	3020      	adds	r0, #32
   11868:	e706      	b.n	11678 <__aeabi_dsub+0xc8>
   1186a:	430a      	orrs	r2, r1
   1186c:	0017      	movs	r7, r2
   1186e:	2100      	movs	r1, #0
   11870:	1e7a      	subs	r2, r7, #1
   11872:	4197      	sbcs	r7, r2
   11874:	e6ee      	b.n	11654 <__aeabi_dsub+0xa4>
   11876:	2b00      	cmp	r3, #0
   11878:	d000      	beq.n	1187c <__aeabi_dsub+0x2cc>
   1187a:	e0e5      	b.n	11a48 <__aeabi_dsub+0x498>
   1187c:	1c73      	adds	r3, r6, #1
   1187e:	469c      	mov	ip, r3
   11880:	055b      	lsls	r3, r3, #21
   11882:	0d5b      	lsrs	r3, r3, #21
   11884:	2b01      	cmp	r3, #1
   11886:	dc00      	bgt.n	1188a <__aeabi_dsub+0x2da>
   11888:	e09f      	b.n	119ca <__aeabi_dsub+0x41a>
   1188a:	4b1a      	ldr	r3, [pc, #104]	; (118f4 <__aeabi_dsub+0x344>)
   1188c:	459c      	cmp	ip, r3
   1188e:	d100      	bne.n	11892 <__aeabi_dsub+0x2e2>
   11890:	e0c5      	b.n	11a1e <__aeabi_dsub+0x46e>
   11892:	4452      	add	r2, sl
   11894:	4552      	cmp	r2, sl
   11896:	4180      	sbcs	r0, r0
   11898:	1864      	adds	r4, r4, r1
   1189a:	4240      	negs	r0, r0
   1189c:	1824      	adds	r4, r4, r0
   1189e:	07e7      	lsls	r7, r4, #31
   118a0:	0852      	lsrs	r2, r2, #1
   118a2:	4317      	orrs	r7, r2
   118a4:	0864      	lsrs	r4, r4, #1
   118a6:	4666      	mov	r6, ip
   118a8:	e708      	b.n	116bc <__aeabi_dsub+0x10c>
   118aa:	4812      	ldr	r0, [pc, #72]	; (118f4 <__aeabi_dsub+0x344>)
   118ac:	4285      	cmp	r5, r0
   118ae:	d100      	bne.n	118b2 <__aeabi_dsub+0x302>
   118b0:	e085      	b.n	119be <__aeabi_dsub+0x40e>
   118b2:	001d      	movs	r5, r3
   118b4:	e6bc      	b.n	11630 <__aeabi_dsub+0x80>
   118b6:	0029      	movs	r1, r5
   118b8:	3e1f      	subs	r6, #31
   118ba:	40f1      	lsrs	r1, r6
   118bc:	2b20      	cmp	r3, #32
   118be:	d100      	bne.n	118c2 <__aeabi_dsub+0x312>
   118c0:	e07f      	b.n	119c2 <__aeabi_dsub+0x412>
   118c2:	2240      	movs	r2, #64	; 0x40
   118c4:	1ad3      	subs	r3, r2, r3
   118c6:	409d      	lsls	r5, r3
   118c8:	432f      	orrs	r7, r5
   118ca:	1e7d      	subs	r5, r7, #1
   118cc:	41af      	sbcs	r7, r5
   118ce:	2400      	movs	r4, #0
   118d0:	430f      	orrs	r7, r1
   118d2:	2600      	movs	r6, #0
   118d4:	e78e      	b.n	117f4 <__aeabi_dsub+0x244>
   118d6:	002b      	movs	r3, r5
   118d8:	000f      	movs	r7, r1
   118da:	3b20      	subs	r3, #32
   118dc:	40df      	lsrs	r7, r3
   118de:	2d20      	cmp	r5, #32
   118e0:	d071      	beq.n	119c6 <__aeabi_dsub+0x416>
   118e2:	2340      	movs	r3, #64	; 0x40
   118e4:	1b5d      	subs	r5, r3, r5
   118e6:	40a9      	lsls	r1, r5
   118e8:	430a      	orrs	r2, r1
   118ea:	1e51      	subs	r1, r2, #1
   118ec:	418a      	sbcs	r2, r1
   118ee:	2100      	movs	r1, #0
   118f0:	4317      	orrs	r7, r2
   118f2:	e6af      	b.n	11654 <__aeabi_dsub+0xa4>
   118f4:	000007ff 	.word	0x000007ff
   118f8:	ff7fffff 	.word	0xff7fffff
   118fc:	800fffff 	.word	0x800fffff
   11900:	2e00      	cmp	r6, #0
   11902:	d03e      	beq.n	11982 <__aeabi_dsub+0x3d2>
   11904:	4eb3      	ldr	r6, [pc, #716]	; (11bd4 <__aeabi_dsub+0x624>)
   11906:	45b4      	cmp	ip, r6
   11908:	d045      	beq.n	11996 <__aeabi_dsub+0x3e6>
   1190a:	2680      	movs	r6, #128	; 0x80
   1190c:	0436      	lsls	r6, r6, #16
   1190e:	426d      	negs	r5, r5
   11910:	4334      	orrs	r4, r6
   11912:	2d38      	cmp	r5, #56	; 0x38
   11914:	dd00      	ble.n	11918 <__aeabi_dsub+0x368>
   11916:	e0a8      	b.n	11a6a <__aeabi_dsub+0x4ba>
   11918:	2d1f      	cmp	r5, #31
   1191a:	dd00      	ble.n	1191e <__aeabi_dsub+0x36e>
   1191c:	e11f      	b.n	11b5e <__aeabi_dsub+0x5ae>
   1191e:	2620      	movs	r6, #32
   11920:	0027      	movs	r7, r4
   11922:	4650      	mov	r0, sl
   11924:	1b76      	subs	r6, r6, r5
   11926:	40b7      	lsls	r7, r6
   11928:	40e8      	lsrs	r0, r5
   1192a:	4307      	orrs	r7, r0
   1192c:	4650      	mov	r0, sl
   1192e:	40b0      	lsls	r0, r6
   11930:	1e46      	subs	r6, r0, #1
   11932:	41b0      	sbcs	r0, r6
   11934:	40ec      	lsrs	r4, r5
   11936:	4338      	orrs	r0, r7
   11938:	1a17      	subs	r7, r2, r0
   1193a:	42ba      	cmp	r2, r7
   1193c:	4192      	sbcs	r2, r2
   1193e:	1b0c      	subs	r4, r1, r4
   11940:	4252      	negs	r2, r2
   11942:	1aa4      	subs	r4, r4, r2
   11944:	4666      	mov	r6, ip
   11946:	4698      	mov	r8, r3
   11948:	e68b      	b.n	11662 <__aeabi_dsub+0xb2>
   1194a:	4664      	mov	r4, ip
   1194c:	4667      	mov	r7, ip
   1194e:	432c      	orrs	r4, r5
   11950:	d000      	beq.n	11954 <__aeabi_dsub+0x3a4>
   11952:	e68b      	b.n	1166c <__aeabi_dsub+0xbc>
   11954:	2500      	movs	r5, #0
   11956:	2600      	movs	r6, #0
   11958:	2700      	movs	r7, #0
   1195a:	e6ea      	b.n	11732 <__aeabi_dsub+0x182>
   1195c:	001e      	movs	r6, r3
   1195e:	e6ad      	b.n	116bc <__aeabi_dsub+0x10c>
   11960:	2b1f      	cmp	r3, #31
   11962:	dc60      	bgt.n	11a26 <__aeabi_dsub+0x476>
   11964:	2720      	movs	r7, #32
   11966:	1af8      	subs	r0, r7, r3
   11968:	000f      	movs	r7, r1
   1196a:	4684      	mov	ip, r0
   1196c:	4087      	lsls	r7, r0
   1196e:	0010      	movs	r0, r2
   11970:	40d8      	lsrs	r0, r3
   11972:	4307      	orrs	r7, r0
   11974:	4660      	mov	r0, ip
   11976:	4082      	lsls	r2, r0
   11978:	1e50      	subs	r0, r2, #1
   1197a:	4182      	sbcs	r2, r0
   1197c:	40d9      	lsrs	r1, r3
   1197e:	4317      	orrs	r7, r2
   11980:	e6f5      	b.n	1176e <__aeabi_dsub+0x1be>
   11982:	0026      	movs	r6, r4
   11984:	4650      	mov	r0, sl
   11986:	4306      	orrs	r6, r0
   11988:	d005      	beq.n	11996 <__aeabi_dsub+0x3e6>
   1198a:	43ed      	mvns	r5, r5
   1198c:	2d00      	cmp	r5, #0
   1198e:	d0d3      	beq.n	11938 <__aeabi_dsub+0x388>
   11990:	4e90      	ldr	r6, [pc, #576]	; (11bd4 <__aeabi_dsub+0x624>)
   11992:	45b4      	cmp	ip, r6
   11994:	d1bd      	bne.n	11912 <__aeabi_dsub+0x362>
   11996:	000c      	movs	r4, r1
   11998:	0017      	movs	r7, r2
   1199a:	4666      	mov	r6, ip
   1199c:	4698      	mov	r8, r3
   1199e:	e68d      	b.n	116bc <__aeabi_dsub+0x10c>
   119a0:	488c      	ldr	r0, [pc, #560]	; (11bd4 <__aeabi_dsub+0x624>)
   119a2:	4283      	cmp	r3, r0
   119a4:	d00b      	beq.n	119be <__aeabi_dsub+0x40e>
   119a6:	4663      	mov	r3, ip
   119a8:	e6d9      	b.n	1175e <__aeabi_dsub+0x1ae>
   119aa:	2d00      	cmp	r5, #0
   119ac:	d000      	beq.n	119b0 <__aeabi_dsub+0x400>
   119ae:	e096      	b.n	11ade <__aeabi_dsub+0x52e>
   119b0:	0008      	movs	r0, r1
   119b2:	4310      	orrs	r0, r2
   119b4:	d100      	bne.n	119b8 <__aeabi_dsub+0x408>
   119b6:	e0e2      	b.n	11b7e <__aeabi_dsub+0x5ce>
   119b8:	000c      	movs	r4, r1
   119ba:	0017      	movs	r7, r2
   119bc:	4698      	mov	r8, r3
   119be:	4e85      	ldr	r6, [pc, #532]	; (11bd4 <__aeabi_dsub+0x624>)
   119c0:	e67c      	b.n	116bc <__aeabi_dsub+0x10c>
   119c2:	2500      	movs	r5, #0
   119c4:	e780      	b.n	118c8 <__aeabi_dsub+0x318>
   119c6:	2100      	movs	r1, #0
   119c8:	e78e      	b.n	118e8 <__aeabi_dsub+0x338>
   119ca:	0023      	movs	r3, r4
   119cc:	4650      	mov	r0, sl
   119ce:	4303      	orrs	r3, r0
   119d0:	2e00      	cmp	r6, #0
   119d2:	d000      	beq.n	119d6 <__aeabi_dsub+0x426>
   119d4:	e0a8      	b.n	11b28 <__aeabi_dsub+0x578>
   119d6:	2b00      	cmp	r3, #0
   119d8:	d100      	bne.n	119dc <__aeabi_dsub+0x42c>
   119da:	e0de      	b.n	11b9a <__aeabi_dsub+0x5ea>
   119dc:	000b      	movs	r3, r1
   119de:	4313      	orrs	r3, r2
   119e0:	d100      	bne.n	119e4 <__aeabi_dsub+0x434>
   119e2:	e66b      	b.n	116bc <__aeabi_dsub+0x10c>
   119e4:	4452      	add	r2, sl
   119e6:	4552      	cmp	r2, sl
   119e8:	4180      	sbcs	r0, r0
   119ea:	1864      	adds	r4, r4, r1
   119ec:	4240      	negs	r0, r0
   119ee:	1824      	adds	r4, r4, r0
   119f0:	0017      	movs	r7, r2
   119f2:	0223      	lsls	r3, r4, #8
   119f4:	d400      	bmi.n	119f8 <__aeabi_dsub+0x448>
   119f6:	e6fd      	b.n	117f4 <__aeabi_dsub+0x244>
   119f8:	4b77      	ldr	r3, [pc, #476]	; (11bd8 <__aeabi_dsub+0x628>)
   119fa:	4666      	mov	r6, ip
   119fc:	401c      	ands	r4, r3
   119fe:	e65d      	b.n	116bc <__aeabi_dsub+0x10c>
   11a00:	0025      	movs	r5, r4
   11a02:	4650      	mov	r0, sl
   11a04:	4305      	orrs	r5, r0
   11a06:	2e00      	cmp	r6, #0
   11a08:	d1cf      	bne.n	119aa <__aeabi_dsub+0x3fa>
   11a0a:	2d00      	cmp	r5, #0
   11a0c:	d14f      	bne.n	11aae <__aeabi_dsub+0x4fe>
   11a0e:	000c      	movs	r4, r1
   11a10:	4314      	orrs	r4, r2
   11a12:	d100      	bne.n	11a16 <__aeabi_dsub+0x466>
   11a14:	e0a0      	b.n	11b58 <__aeabi_dsub+0x5a8>
   11a16:	000c      	movs	r4, r1
   11a18:	0017      	movs	r7, r2
   11a1a:	4698      	mov	r8, r3
   11a1c:	e64e      	b.n	116bc <__aeabi_dsub+0x10c>
   11a1e:	4666      	mov	r6, ip
   11a20:	2400      	movs	r4, #0
   11a22:	2700      	movs	r7, #0
   11a24:	e685      	b.n	11732 <__aeabi_dsub+0x182>
   11a26:	001f      	movs	r7, r3
   11a28:	0008      	movs	r0, r1
   11a2a:	3f20      	subs	r7, #32
   11a2c:	40f8      	lsrs	r0, r7
   11a2e:	0007      	movs	r7, r0
   11a30:	2b20      	cmp	r3, #32
   11a32:	d100      	bne.n	11a36 <__aeabi_dsub+0x486>
   11a34:	e08e      	b.n	11b54 <__aeabi_dsub+0x5a4>
   11a36:	2040      	movs	r0, #64	; 0x40
   11a38:	1ac3      	subs	r3, r0, r3
   11a3a:	4099      	lsls	r1, r3
   11a3c:	430a      	orrs	r2, r1
   11a3e:	1e51      	subs	r1, r2, #1
   11a40:	418a      	sbcs	r2, r1
   11a42:	2100      	movs	r1, #0
   11a44:	4317      	orrs	r7, r2
   11a46:	e692      	b.n	1176e <__aeabi_dsub+0x1be>
   11a48:	2e00      	cmp	r6, #0
   11a4a:	d114      	bne.n	11a76 <__aeabi_dsub+0x4c6>
   11a4c:	0026      	movs	r6, r4
   11a4e:	4650      	mov	r0, sl
   11a50:	4306      	orrs	r6, r0
   11a52:	d062      	beq.n	11b1a <__aeabi_dsub+0x56a>
   11a54:	43db      	mvns	r3, r3
   11a56:	2b00      	cmp	r3, #0
   11a58:	d15c      	bne.n	11b14 <__aeabi_dsub+0x564>
   11a5a:	1887      	adds	r7, r0, r2
   11a5c:	4297      	cmp	r7, r2
   11a5e:	4192      	sbcs	r2, r2
   11a60:	1864      	adds	r4, r4, r1
   11a62:	4252      	negs	r2, r2
   11a64:	18a4      	adds	r4, r4, r2
   11a66:	4666      	mov	r6, ip
   11a68:	e687      	b.n	1177a <__aeabi_dsub+0x1ca>
   11a6a:	4650      	mov	r0, sl
   11a6c:	4320      	orrs	r0, r4
   11a6e:	1e44      	subs	r4, r0, #1
   11a70:	41a0      	sbcs	r0, r4
   11a72:	2400      	movs	r4, #0
   11a74:	e760      	b.n	11938 <__aeabi_dsub+0x388>
   11a76:	4e57      	ldr	r6, [pc, #348]	; (11bd4 <__aeabi_dsub+0x624>)
   11a78:	45b4      	cmp	ip, r6
   11a7a:	d04e      	beq.n	11b1a <__aeabi_dsub+0x56a>
   11a7c:	2680      	movs	r6, #128	; 0x80
   11a7e:	0436      	lsls	r6, r6, #16
   11a80:	425b      	negs	r3, r3
   11a82:	4334      	orrs	r4, r6
   11a84:	2b38      	cmp	r3, #56	; 0x38
   11a86:	dd00      	ble.n	11a8a <__aeabi_dsub+0x4da>
   11a88:	e07f      	b.n	11b8a <__aeabi_dsub+0x5da>
   11a8a:	2b1f      	cmp	r3, #31
   11a8c:	dd00      	ble.n	11a90 <__aeabi_dsub+0x4e0>
   11a8e:	e08b      	b.n	11ba8 <__aeabi_dsub+0x5f8>
   11a90:	2620      	movs	r6, #32
   11a92:	0027      	movs	r7, r4
   11a94:	4650      	mov	r0, sl
   11a96:	1af6      	subs	r6, r6, r3
   11a98:	40b7      	lsls	r7, r6
   11a9a:	40d8      	lsrs	r0, r3
   11a9c:	4307      	orrs	r7, r0
   11a9e:	4650      	mov	r0, sl
   11aa0:	40b0      	lsls	r0, r6
   11aa2:	1e46      	subs	r6, r0, #1
   11aa4:	41b0      	sbcs	r0, r6
   11aa6:	4307      	orrs	r7, r0
   11aa8:	40dc      	lsrs	r4, r3
   11aaa:	18bf      	adds	r7, r7, r2
   11aac:	e7d6      	b.n	11a5c <__aeabi_dsub+0x4ac>
   11aae:	000d      	movs	r5, r1
   11ab0:	4315      	orrs	r5, r2
   11ab2:	d100      	bne.n	11ab6 <__aeabi_dsub+0x506>
   11ab4:	e602      	b.n	116bc <__aeabi_dsub+0x10c>
   11ab6:	4650      	mov	r0, sl
   11ab8:	1a80      	subs	r0, r0, r2
   11aba:	4582      	cmp	sl, r0
   11abc:	41bf      	sbcs	r7, r7
   11abe:	1a65      	subs	r5, r4, r1
   11ac0:	427f      	negs	r7, r7
   11ac2:	1bed      	subs	r5, r5, r7
   11ac4:	4684      	mov	ip, r0
   11ac6:	0228      	lsls	r0, r5, #8
   11ac8:	d400      	bmi.n	11acc <__aeabi_dsub+0x51c>
   11aca:	e68d      	b.n	117e8 <__aeabi_dsub+0x238>
   11acc:	4650      	mov	r0, sl
   11ace:	1a17      	subs	r7, r2, r0
   11ad0:	42ba      	cmp	r2, r7
   11ad2:	4192      	sbcs	r2, r2
   11ad4:	1b0c      	subs	r4, r1, r4
   11ad6:	4252      	negs	r2, r2
   11ad8:	1aa4      	subs	r4, r4, r2
   11ada:	4698      	mov	r8, r3
   11adc:	e5ee      	b.n	116bc <__aeabi_dsub+0x10c>
   11ade:	000d      	movs	r5, r1
   11ae0:	4315      	orrs	r5, r2
   11ae2:	d100      	bne.n	11ae6 <__aeabi_dsub+0x536>
   11ae4:	e76b      	b.n	119be <__aeabi_dsub+0x40e>
   11ae6:	4650      	mov	r0, sl
   11ae8:	0767      	lsls	r7, r4, #29
   11aea:	08c0      	lsrs	r0, r0, #3
   11aec:	4307      	orrs	r7, r0
   11aee:	2080      	movs	r0, #128	; 0x80
   11af0:	08e4      	lsrs	r4, r4, #3
   11af2:	0300      	lsls	r0, r0, #12
   11af4:	4204      	tst	r4, r0
   11af6:	d007      	beq.n	11b08 <__aeabi_dsub+0x558>
   11af8:	08cd      	lsrs	r5, r1, #3
   11afa:	4205      	tst	r5, r0
   11afc:	d104      	bne.n	11b08 <__aeabi_dsub+0x558>
   11afe:	002c      	movs	r4, r5
   11b00:	4698      	mov	r8, r3
   11b02:	08d7      	lsrs	r7, r2, #3
   11b04:	0749      	lsls	r1, r1, #29
   11b06:	430f      	orrs	r7, r1
   11b08:	0f7b      	lsrs	r3, r7, #29
   11b0a:	00e4      	lsls	r4, r4, #3
   11b0c:	431c      	orrs	r4, r3
   11b0e:	00ff      	lsls	r7, r7, #3
   11b10:	4e30      	ldr	r6, [pc, #192]	; (11bd4 <__aeabi_dsub+0x624>)
   11b12:	e5d3      	b.n	116bc <__aeabi_dsub+0x10c>
   11b14:	4e2f      	ldr	r6, [pc, #188]	; (11bd4 <__aeabi_dsub+0x624>)
   11b16:	45b4      	cmp	ip, r6
   11b18:	d1b4      	bne.n	11a84 <__aeabi_dsub+0x4d4>
   11b1a:	000c      	movs	r4, r1
   11b1c:	0017      	movs	r7, r2
   11b1e:	4666      	mov	r6, ip
   11b20:	e5cc      	b.n	116bc <__aeabi_dsub+0x10c>
   11b22:	2700      	movs	r7, #0
   11b24:	2400      	movs	r4, #0
   11b26:	e5e8      	b.n	116fa <__aeabi_dsub+0x14a>
   11b28:	2b00      	cmp	r3, #0
   11b2a:	d039      	beq.n	11ba0 <__aeabi_dsub+0x5f0>
   11b2c:	000b      	movs	r3, r1
   11b2e:	4313      	orrs	r3, r2
   11b30:	d100      	bne.n	11b34 <__aeabi_dsub+0x584>
   11b32:	e744      	b.n	119be <__aeabi_dsub+0x40e>
   11b34:	08c0      	lsrs	r0, r0, #3
   11b36:	0767      	lsls	r7, r4, #29
   11b38:	4307      	orrs	r7, r0
   11b3a:	2080      	movs	r0, #128	; 0x80
   11b3c:	08e4      	lsrs	r4, r4, #3
   11b3e:	0300      	lsls	r0, r0, #12
   11b40:	4204      	tst	r4, r0
   11b42:	d0e1      	beq.n	11b08 <__aeabi_dsub+0x558>
   11b44:	08cb      	lsrs	r3, r1, #3
   11b46:	4203      	tst	r3, r0
   11b48:	d1de      	bne.n	11b08 <__aeabi_dsub+0x558>
   11b4a:	08d7      	lsrs	r7, r2, #3
   11b4c:	0749      	lsls	r1, r1, #29
   11b4e:	430f      	orrs	r7, r1
   11b50:	001c      	movs	r4, r3
   11b52:	e7d9      	b.n	11b08 <__aeabi_dsub+0x558>
   11b54:	2100      	movs	r1, #0
   11b56:	e771      	b.n	11a3c <__aeabi_dsub+0x48c>
   11b58:	2500      	movs	r5, #0
   11b5a:	2700      	movs	r7, #0
   11b5c:	e5e9      	b.n	11732 <__aeabi_dsub+0x182>
   11b5e:	002e      	movs	r6, r5
   11b60:	0027      	movs	r7, r4
   11b62:	3e20      	subs	r6, #32
   11b64:	40f7      	lsrs	r7, r6
   11b66:	2d20      	cmp	r5, #32
   11b68:	d02f      	beq.n	11bca <__aeabi_dsub+0x61a>
   11b6a:	2640      	movs	r6, #64	; 0x40
   11b6c:	1b75      	subs	r5, r6, r5
   11b6e:	40ac      	lsls	r4, r5
   11b70:	4650      	mov	r0, sl
   11b72:	4320      	orrs	r0, r4
   11b74:	1e44      	subs	r4, r0, #1
   11b76:	41a0      	sbcs	r0, r4
   11b78:	2400      	movs	r4, #0
   11b7a:	4338      	orrs	r0, r7
   11b7c:	e6dc      	b.n	11938 <__aeabi_dsub+0x388>
   11b7e:	2480      	movs	r4, #128	; 0x80
   11b80:	2500      	movs	r5, #0
   11b82:	0324      	lsls	r4, r4, #12
   11b84:	4e13      	ldr	r6, [pc, #76]	; (11bd4 <__aeabi_dsub+0x624>)
   11b86:	2700      	movs	r7, #0
   11b88:	e5d3      	b.n	11732 <__aeabi_dsub+0x182>
   11b8a:	4650      	mov	r0, sl
   11b8c:	4320      	orrs	r0, r4
   11b8e:	0007      	movs	r7, r0
   11b90:	1e78      	subs	r0, r7, #1
   11b92:	4187      	sbcs	r7, r0
   11b94:	2400      	movs	r4, #0
   11b96:	18bf      	adds	r7, r7, r2
   11b98:	e760      	b.n	11a5c <__aeabi_dsub+0x4ac>
   11b9a:	000c      	movs	r4, r1
   11b9c:	0017      	movs	r7, r2
   11b9e:	e58d      	b.n	116bc <__aeabi_dsub+0x10c>
   11ba0:	000c      	movs	r4, r1
   11ba2:	0017      	movs	r7, r2
   11ba4:	4e0b      	ldr	r6, [pc, #44]	; (11bd4 <__aeabi_dsub+0x624>)
   11ba6:	e589      	b.n	116bc <__aeabi_dsub+0x10c>
   11ba8:	001e      	movs	r6, r3
   11baa:	0027      	movs	r7, r4
   11bac:	3e20      	subs	r6, #32
   11bae:	40f7      	lsrs	r7, r6
   11bb0:	2b20      	cmp	r3, #32
   11bb2:	d00c      	beq.n	11bce <__aeabi_dsub+0x61e>
   11bb4:	2640      	movs	r6, #64	; 0x40
   11bb6:	1af3      	subs	r3, r6, r3
   11bb8:	409c      	lsls	r4, r3
   11bba:	4650      	mov	r0, sl
   11bbc:	4320      	orrs	r0, r4
   11bbe:	1e44      	subs	r4, r0, #1
   11bc0:	41a0      	sbcs	r0, r4
   11bc2:	4307      	orrs	r7, r0
   11bc4:	2400      	movs	r4, #0
   11bc6:	18bf      	adds	r7, r7, r2
   11bc8:	e748      	b.n	11a5c <__aeabi_dsub+0x4ac>
   11bca:	2400      	movs	r4, #0
   11bcc:	e7d0      	b.n	11b70 <__aeabi_dsub+0x5c0>
   11bce:	2400      	movs	r4, #0
   11bd0:	e7f3      	b.n	11bba <__aeabi_dsub+0x60a>
   11bd2:	46c0      	nop			; (mov r8, r8)
   11bd4:	000007ff 	.word	0x000007ff
   11bd8:	ff7fffff 	.word	0xff7fffff

00011bdc <__aeabi_d2iz>:
   11bdc:	b530      	push	{r4, r5, lr}
   11bde:	4d13      	ldr	r5, [pc, #76]	; (11c2c <__aeabi_d2iz+0x50>)
   11be0:	030a      	lsls	r2, r1, #12
   11be2:	004b      	lsls	r3, r1, #1
   11be4:	0b12      	lsrs	r2, r2, #12
   11be6:	0d5b      	lsrs	r3, r3, #21
   11be8:	0fc9      	lsrs	r1, r1, #31
   11bea:	2400      	movs	r4, #0
   11bec:	42ab      	cmp	r3, r5
   11bee:	dd10      	ble.n	11c12 <__aeabi_d2iz+0x36>
   11bf0:	4c0f      	ldr	r4, [pc, #60]	; (11c30 <__aeabi_d2iz+0x54>)
   11bf2:	42a3      	cmp	r3, r4
   11bf4:	dc0f      	bgt.n	11c16 <__aeabi_d2iz+0x3a>
   11bf6:	2480      	movs	r4, #128	; 0x80
   11bf8:	4d0e      	ldr	r5, [pc, #56]	; (11c34 <__aeabi_d2iz+0x58>)
   11bfa:	0364      	lsls	r4, r4, #13
   11bfc:	4322      	orrs	r2, r4
   11bfe:	1aed      	subs	r5, r5, r3
   11c00:	2d1f      	cmp	r5, #31
   11c02:	dd0b      	ble.n	11c1c <__aeabi_d2iz+0x40>
   11c04:	480c      	ldr	r0, [pc, #48]	; (11c38 <__aeabi_d2iz+0x5c>)
   11c06:	1ac3      	subs	r3, r0, r3
   11c08:	40da      	lsrs	r2, r3
   11c0a:	4254      	negs	r4, r2
   11c0c:	2900      	cmp	r1, #0
   11c0e:	d100      	bne.n	11c12 <__aeabi_d2iz+0x36>
   11c10:	0014      	movs	r4, r2
   11c12:	0020      	movs	r0, r4
   11c14:	bd30      	pop	{r4, r5, pc}
   11c16:	4b09      	ldr	r3, [pc, #36]	; (11c3c <__aeabi_d2iz+0x60>)
   11c18:	18cc      	adds	r4, r1, r3
   11c1a:	e7fa      	b.n	11c12 <__aeabi_d2iz+0x36>
   11c1c:	4c08      	ldr	r4, [pc, #32]	; (11c40 <__aeabi_d2iz+0x64>)
   11c1e:	40e8      	lsrs	r0, r5
   11c20:	46a4      	mov	ip, r4
   11c22:	4463      	add	r3, ip
   11c24:	409a      	lsls	r2, r3
   11c26:	4302      	orrs	r2, r0
   11c28:	e7ef      	b.n	11c0a <__aeabi_d2iz+0x2e>
   11c2a:	46c0      	nop			; (mov r8, r8)
   11c2c:	000003fe 	.word	0x000003fe
   11c30:	0000041d 	.word	0x0000041d
   11c34:	00000433 	.word	0x00000433
   11c38:	00000413 	.word	0x00000413
   11c3c:	7fffffff 	.word	0x7fffffff
   11c40:	fffffbed 	.word	0xfffffbed

00011c44 <__aeabi_i2d>:
   11c44:	b570      	push	{r4, r5, r6, lr}
   11c46:	2800      	cmp	r0, #0
   11c48:	d030      	beq.n	11cac <__aeabi_i2d+0x68>
   11c4a:	17c3      	asrs	r3, r0, #31
   11c4c:	18c4      	adds	r4, r0, r3
   11c4e:	405c      	eors	r4, r3
   11c50:	0fc5      	lsrs	r5, r0, #31
   11c52:	0020      	movs	r0, r4
   11c54:	f000 f870 	bl	11d38 <__clzsi2>
   11c58:	4b17      	ldr	r3, [pc, #92]	; (11cb8 <__aeabi_i2d+0x74>)
   11c5a:	4a18      	ldr	r2, [pc, #96]	; (11cbc <__aeabi_i2d+0x78>)
   11c5c:	1a1b      	subs	r3, r3, r0
   11c5e:	1ad2      	subs	r2, r2, r3
   11c60:	2a1f      	cmp	r2, #31
   11c62:	dd18      	ble.n	11c96 <__aeabi_i2d+0x52>
   11c64:	4a16      	ldr	r2, [pc, #88]	; (11cc0 <__aeabi_i2d+0x7c>)
   11c66:	1ad2      	subs	r2, r2, r3
   11c68:	4094      	lsls	r4, r2
   11c6a:	2200      	movs	r2, #0
   11c6c:	0324      	lsls	r4, r4, #12
   11c6e:	055b      	lsls	r3, r3, #21
   11c70:	0b24      	lsrs	r4, r4, #12
   11c72:	0d5b      	lsrs	r3, r3, #21
   11c74:	2100      	movs	r1, #0
   11c76:	0010      	movs	r0, r2
   11c78:	0324      	lsls	r4, r4, #12
   11c7a:	0d0a      	lsrs	r2, r1, #20
   11c7c:	0b24      	lsrs	r4, r4, #12
   11c7e:	0512      	lsls	r2, r2, #20
   11c80:	4322      	orrs	r2, r4
   11c82:	4c10      	ldr	r4, [pc, #64]	; (11cc4 <__aeabi_i2d+0x80>)
   11c84:	051b      	lsls	r3, r3, #20
   11c86:	4022      	ands	r2, r4
   11c88:	4313      	orrs	r3, r2
   11c8a:	005b      	lsls	r3, r3, #1
   11c8c:	07ed      	lsls	r5, r5, #31
   11c8e:	085b      	lsrs	r3, r3, #1
   11c90:	432b      	orrs	r3, r5
   11c92:	0019      	movs	r1, r3
   11c94:	bd70      	pop	{r4, r5, r6, pc}
   11c96:	0021      	movs	r1, r4
   11c98:	4091      	lsls	r1, r2
   11c9a:	000a      	movs	r2, r1
   11c9c:	210b      	movs	r1, #11
   11c9e:	1a08      	subs	r0, r1, r0
   11ca0:	40c4      	lsrs	r4, r0
   11ca2:	055b      	lsls	r3, r3, #21
   11ca4:	0324      	lsls	r4, r4, #12
   11ca6:	0b24      	lsrs	r4, r4, #12
   11ca8:	0d5b      	lsrs	r3, r3, #21
   11caa:	e7e3      	b.n	11c74 <__aeabi_i2d+0x30>
   11cac:	2500      	movs	r5, #0
   11cae:	2300      	movs	r3, #0
   11cb0:	2400      	movs	r4, #0
   11cb2:	2200      	movs	r2, #0
   11cb4:	e7de      	b.n	11c74 <__aeabi_i2d+0x30>
   11cb6:	46c0      	nop			; (mov r8, r8)
   11cb8:	0000041e 	.word	0x0000041e
   11cbc:	00000433 	.word	0x00000433
   11cc0:	00000413 	.word	0x00000413
   11cc4:	800fffff 	.word	0x800fffff

00011cc8 <__aeabi_ui2d>:
   11cc8:	b510      	push	{r4, lr}
   11cca:	1e04      	subs	r4, r0, #0
   11ccc:	d028      	beq.n	11d20 <__aeabi_ui2d+0x58>
   11cce:	f000 f833 	bl	11d38 <__clzsi2>
   11cd2:	4b15      	ldr	r3, [pc, #84]	; (11d28 <__aeabi_ui2d+0x60>)
   11cd4:	4a15      	ldr	r2, [pc, #84]	; (11d2c <__aeabi_ui2d+0x64>)
   11cd6:	1a1b      	subs	r3, r3, r0
   11cd8:	1ad2      	subs	r2, r2, r3
   11cda:	2a1f      	cmp	r2, #31
   11cdc:	dd15      	ble.n	11d0a <__aeabi_ui2d+0x42>
   11cde:	4a14      	ldr	r2, [pc, #80]	; (11d30 <__aeabi_ui2d+0x68>)
   11ce0:	1ad2      	subs	r2, r2, r3
   11ce2:	4094      	lsls	r4, r2
   11ce4:	2200      	movs	r2, #0
   11ce6:	0324      	lsls	r4, r4, #12
   11ce8:	055b      	lsls	r3, r3, #21
   11cea:	0b24      	lsrs	r4, r4, #12
   11cec:	0d5b      	lsrs	r3, r3, #21
   11cee:	2100      	movs	r1, #0
   11cf0:	0010      	movs	r0, r2
   11cf2:	0324      	lsls	r4, r4, #12
   11cf4:	0d0a      	lsrs	r2, r1, #20
   11cf6:	0b24      	lsrs	r4, r4, #12
   11cf8:	0512      	lsls	r2, r2, #20
   11cfa:	4322      	orrs	r2, r4
   11cfc:	4c0d      	ldr	r4, [pc, #52]	; (11d34 <__aeabi_ui2d+0x6c>)
   11cfe:	051b      	lsls	r3, r3, #20
   11d00:	4022      	ands	r2, r4
   11d02:	4313      	orrs	r3, r2
   11d04:	005b      	lsls	r3, r3, #1
   11d06:	0859      	lsrs	r1, r3, #1
   11d08:	bd10      	pop	{r4, pc}
   11d0a:	0021      	movs	r1, r4
   11d0c:	4091      	lsls	r1, r2
   11d0e:	000a      	movs	r2, r1
   11d10:	210b      	movs	r1, #11
   11d12:	1a08      	subs	r0, r1, r0
   11d14:	40c4      	lsrs	r4, r0
   11d16:	055b      	lsls	r3, r3, #21
   11d18:	0324      	lsls	r4, r4, #12
   11d1a:	0b24      	lsrs	r4, r4, #12
   11d1c:	0d5b      	lsrs	r3, r3, #21
   11d1e:	e7e6      	b.n	11cee <__aeabi_ui2d+0x26>
   11d20:	2300      	movs	r3, #0
   11d22:	2400      	movs	r4, #0
   11d24:	2200      	movs	r2, #0
   11d26:	e7e2      	b.n	11cee <__aeabi_ui2d+0x26>
   11d28:	0000041e 	.word	0x0000041e
   11d2c:	00000433 	.word	0x00000433
   11d30:	00000413 	.word	0x00000413
   11d34:	800fffff 	.word	0x800fffff

00011d38 <__clzsi2>:
   11d38:	211c      	movs	r1, #28
   11d3a:	2301      	movs	r3, #1
   11d3c:	041b      	lsls	r3, r3, #16
   11d3e:	4298      	cmp	r0, r3
   11d40:	d301      	bcc.n	11d46 <__clzsi2+0xe>
   11d42:	0c00      	lsrs	r0, r0, #16
   11d44:	3910      	subs	r1, #16
   11d46:	0a1b      	lsrs	r3, r3, #8
   11d48:	4298      	cmp	r0, r3
   11d4a:	d301      	bcc.n	11d50 <__clzsi2+0x18>
   11d4c:	0a00      	lsrs	r0, r0, #8
   11d4e:	3908      	subs	r1, #8
   11d50:	091b      	lsrs	r3, r3, #4
   11d52:	4298      	cmp	r0, r3
   11d54:	d301      	bcc.n	11d5a <__clzsi2+0x22>
   11d56:	0900      	lsrs	r0, r0, #4
   11d58:	3904      	subs	r1, #4
   11d5a:	a202      	add	r2, pc, #8	; (adr r2, 11d64 <__clzsi2+0x2c>)
   11d5c:	5c10      	ldrb	r0, [r2, r0]
   11d5e:	1840      	adds	r0, r0, r1
   11d60:	4770      	bx	lr
   11d62:	46c0      	nop			; (mov r8, r8)
   11d64:	02020304 	.word	0x02020304
   11d68:	01010101 	.word	0x01010101
	...

00011d74 <__assert_func>:
   11d74:	b530      	push	{r4, r5, lr}
   11d76:	001c      	movs	r4, r3
   11d78:	4b09      	ldr	r3, [pc, #36]	; (11da0 <__assert_func+0x2c>)
   11d7a:	0005      	movs	r5, r0
   11d7c:	681b      	ldr	r3, [r3, #0]
   11d7e:	b085      	sub	sp, #20
   11d80:	68d8      	ldr	r0, [r3, #12]
   11d82:	4b08      	ldr	r3, [pc, #32]	; (11da4 <__assert_func+0x30>)
   11d84:	2a00      	cmp	r2, #0
   11d86:	d101      	bne.n	11d8c <__assert_func+0x18>
   11d88:	4b07      	ldr	r3, [pc, #28]	; (11da8 <__assert_func+0x34>)
   11d8a:	001a      	movs	r2, r3
   11d8c:	9202      	str	r2, [sp, #8]
   11d8e:	9301      	str	r3, [sp, #4]
   11d90:	9100      	str	r1, [sp, #0]
   11d92:	002b      	movs	r3, r5
   11d94:	0022      	movs	r2, r4
   11d96:	4905      	ldr	r1, [pc, #20]	; (11dac <__assert_func+0x38>)
   11d98:	f000 f80a 	bl	11db0 <fiprintf>
   11d9c:	f000 fda2 	bl	128e4 <abort>
   11da0:	20000034 	.word	0x20000034
   11da4:	00013eac 	.word	0x00013eac
   11da8:	00013ee7 	.word	0x00013ee7
   11dac:	00013eb9 	.word	0x00013eb9

00011db0 <fiprintf>:
   11db0:	b40e      	push	{r1, r2, r3}
   11db2:	b503      	push	{r0, r1, lr}
   11db4:	0001      	movs	r1, r0
   11db6:	ab03      	add	r3, sp, #12
   11db8:	4804      	ldr	r0, [pc, #16]	; (11dcc <fiprintf+0x1c>)
   11dba:	cb04      	ldmia	r3!, {r2}
   11dbc:	6800      	ldr	r0, [r0, #0]
   11dbe:	9301      	str	r3, [sp, #4]
   11dc0:	f000 f872 	bl	11ea8 <_vfiprintf_r>
   11dc4:	b002      	add	sp, #8
   11dc6:	bc08      	pop	{r3}
   11dc8:	b003      	add	sp, #12
   11dca:	4718      	bx	r3
   11dcc:	20000034 	.word	0x20000034

00011dd0 <__libc_init_array>:
   11dd0:	b570      	push	{r4, r5, r6, lr}
   11dd2:	2600      	movs	r6, #0
   11dd4:	4d0c      	ldr	r5, [pc, #48]	; (11e08 <__libc_init_array+0x38>)
   11dd6:	4c0d      	ldr	r4, [pc, #52]	; (11e0c <__libc_init_array+0x3c>)
   11dd8:	1b64      	subs	r4, r4, r5
   11dda:	10a4      	asrs	r4, r4, #2
   11ddc:	42a6      	cmp	r6, r4
   11dde:	d109      	bne.n	11df4 <__libc_init_array+0x24>
   11de0:	2600      	movs	r6, #0
   11de2:	f002 f8cd 	bl	13f80 <_init>
   11de6:	4d0a      	ldr	r5, [pc, #40]	; (11e10 <__libc_init_array+0x40>)
   11de8:	4c0a      	ldr	r4, [pc, #40]	; (11e14 <__libc_init_array+0x44>)
   11dea:	1b64      	subs	r4, r4, r5
   11dec:	10a4      	asrs	r4, r4, #2
   11dee:	42a6      	cmp	r6, r4
   11df0:	d105      	bne.n	11dfe <__libc_init_array+0x2e>
   11df2:	bd70      	pop	{r4, r5, r6, pc}
   11df4:	00b3      	lsls	r3, r6, #2
   11df6:	58eb      	ldr	r3, [r5, r3]
   11df8:	4798      	blx	r3
   11dfa:	3601      	adds	r6, #1
   11dfc:	e7ee      	b.n	11ddc <__libc_init_array+0xc>
   11dfe:	00b3      	lsls	r3, r6, #2
   11e00:	58eb      	ldr	r3, [r5, r3]
   11e02:	4798      	blx	r3
   11e04:	3601      	adds	r6, #1
   11e06:	e7f2      	b.n	11dee <__libc_init_array+0x1e>
   11e08:	00013f8c 	.word	0x00013f8c
   11e0c:	00013f8c 	.word	0x00013f8c
   11e10:	00013f8c 	.word	0x00013f8c
   11e14:	00013f90 	.word	0x00013f90

00011e18 <memcmp>:
   11e18:	b530      	push	{r4, r5, lr}
   11e1a:	2400      	movs	r4, #0
   11e1c:	42a2      	cmp	r2, r4
   11e1e:	d101      	bne.n	11e24 <memcmp+0xc>
   11e20:	2000      	movs	r0, #0
   11e22:	e005      	b.n	11e30 <memcmp+0x18>
   11e24:	5d03      	ldrb	r3, [r0, r4]
   11e26:	1c65      	adds	r5, r4, #1
   11e28:	5d0c      	ldrb	r4, [r1, r4]
   11e2a:	42a3      	cmp	r3, r4
   11e2c:	d001      	beq.n	11e32 <memcmp+0x1a>
   11e2e:	1b18      	subs	r0, r3, r4
   11e30:	bd30      	pop	{r4, r5, pc}
   11e32:	002c      	movs	r4, r5
   11e34:	e7f2      	b.n	11e1c <memcmp+0x4>

00011e36 <memcpy>:
   11e36:	2300      	movs	r3, #0
   11e38:	b510      	push	{r4, lr}
   11e3a:	429a      	cmp	r2, r3
   11e3c:	d100      	bne.n	11e40 <memcpy+0xa>
   11e3e:	bd10      	pop	{r4, pc}
   11e40:	5ccc      	ldrb	r4, [r1, r3]
   11e42:	54c4      	strb	r4, [r0, r3]
   11e44:	3301      	adds	r3, #1
   11e46:	e7f8      	b.n	11e3a <memcpy+0x4>

00011e48 <memset>:
   11e48:	0003      	movs	r3, r0
   11e4a:	1882      	adds	r2, r0, r2
   11e4c:	4293      	cmp	r3, r2
   11e4e:	d100      	bne.n	11e52 <memset+0xa>
   11e50:	4770      	bx	lr
   11e52:	7019      	strb	r1, [r3, #0]
   11e54:	3301      	adds	r3, #1
   11e56:	e7f9      	b.n	11e4c <memset+0x4>

00011e58 <__sfputc_r>:
   11e58:	6893      	ldr	r3, [r2, #8]
   11e5a:	b510      	push	{r4, lr}
   11e5c:	3b01      	subs	r3, #1
   11e5e:	6093      	str	r3, [r2, #8]
   11e60:	2b00      	cmp	r3, #0
   11e62:	da05      	bge.n	11e70 <__sfputc_r+0x18>
   11e64:	6994      	ldr	r4, [r2, #24]
   11e66:	42a3      	cmp	r3, r4
   11e68:	db08      	blt.n	11e7c <__sfputc_r+0x24>
   11e6a:	b2cb      	uxtb	r3, r1
   11e6c:	2b0a      	cmp	r3, #10
   11e6e:	d005      	beq.n	11e7c <__sfputc_r+0x24>
   11e70:	6813      	ldr	r3, [r2, #0]
   11e72:	1c58      	adds	r0, r3, #1
   11e74:	6010      	str	r0, [r2, #0]
   11e76:	7019      	strb	r1, [r3, #0]
   11e78:	b2c8      	uxtb	r0, r1
   11e7a:	bd10      	pop	{r4, pc}
   11e7c:	f000 fc66 	bl	1274c <__swbuf_r>
   11e80:	e7fb      	b.n	11e7a <__sfputc_r+0x22>

00011e82 <__sfputs_r>:
   11e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e84:	0006      	movs	r6, r0
   11e86:	000f      	movs	r7, r1
   11e88:	0014      	movs	r4, r2
   11e8a:	18d5      	adds	r5, r2, r3
   11e8c:	42ac      	cmp	r4, r5
   11e8e:	d101      	bne.n	11e94 <__sfputs_r+0x12>
   11e90:	2000      	movs	r0, #0
   11e92:	e007      	b.n	11ea4 <__sfputs_r+0x22>
   11e94:	7821      	ldrb	r1, [r4, #0]
   11e96:	003a      	movs	r2, r7
   11e98:	0030      	movs	r0, r6
   11e9a:	f7ff ffdd 	bl	11e58 <__sfputc_r>
   11e9e:	3401      	adds	r4, #1
   11ea0:	1c43      	adds	r3, r0, #1
   11ea2:	d1f3      	bne.n	11e8c <__sfputs_r+0xa>
   11ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ea6:	Address 0x00011ea6 is out of bounds.


00011ea8 <_vfiprintf_r>:
   11ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11eaa:	b09f      	sub	sp, #124	; 0x7c
   11eac:	0006      	movs	r6, r0
   11eae:	000f      	movs	r7, r1
   11eb0:	0014      	movs	r4, r2
   11eb2:	9305      	str	r3, [sp, #20]
   11eb4:	2800      	cmp	r0, #0
   11eb6:	d004      	beq.n	11ec2 <_vfiprintf_r+0x1a>
   11eb8:	6983      	ldr	r3, [r0, #24]
   11eba:	2b00      	cmp	r3, #0
   11ebc:	d101      	bne.n	11ec2 <_vfiprintf_r+0x1a>
   11ebe:	f000 fe11 	bl	12ae4 <__sinit>
   11ec2:	4b7f      	ldr	r3, [pc, #508]	; (120c0 <_vfiprintf_r+0x218>)
   11ec4:	429f      	cmp	r7, r3
   11ec6:	d15c      	bne.n	11f82 <_vfiprintf_r+0xda>
   11ec8:	6877      	ldr	r7, [r6, #4]
   11eca:	89bb      	ldrh	r3, [r7, #12]
   11ecc:	071b      	lsls	r3, r3, #28
   11ece:	d562      	bpl.n	11f96 <_vfiprintf_r+0xee>
   11ed0:	693b      	ldr	r3, [r7, #16]
   11ed2:	2b00      	cmp	r3, #0
   11ed4:	d05f      	beq.n	11f96 <_vfiprintf_r+0xee>
   11ed6:	2300      	movs	r3, #0
   11ed8:	ad06      	add	r5, sp, #24
   11eda:	616b      	str	r3, [r5, #20]
   11edc:	3320      	adds	r3, #32
   11ede:	766b      	strb	r3, [r5, #25]
   11ee0:	3310      	adds	r3, #16
   11ee2:	76ab      	strb	r3, [r5, #26]
   11ee4:	9402      	str	r4, [sp, #8]
   11ee6:	9c02      	ldr	r4, [sp, #8]
   11ee8:	7823      	ldrb	r3, [r4, #0]
   11eea:	2b00      	cmp	r3, #0
   11eec:	d15d      	bne.n	11faa <_vfiprintf_r+0x102>
   11eee:	9b02      	ldr	r3, [sp, #8]
   11ef0:	1ae3      	subs	r3, r4, r3
   11ef2:	9304      	str	r3, [sp, #16]
   11ef4:	d00d      	beq.n	11f12 <_vfiprintf_r+0x6a>
   11ef6:	9b04      	ldr	r3, [sp, #16]
   11ef8:	9a02      	ldr	r2, [sp, #8]
   11efa:	0039      	movs	r1, r7
   11efc:	0030      	movs	r0, r6
   11efe:	f7ff ffc0 	bl	11e82 <__sfputs_r>
   11f02:	1c43      	adds	r3, r0, #1
   11f04:	d100      	bne.n	11f08 <_vfiprintf_r+0x60>
   11f06:	e0cc      	b.n	120a2 <_vfiprintf_r+0x1fa>
   11f08:	696a      	ldr	r2, [r5, #20]
   11f0a:	9b04      	ldr	r3, [sp, #16]
   11f0c:	4694      	mov	ip, r2
   11f0e:	4463      	add	r3, ip
   11f10:	616b      	str	r3, [r5, #20]
   11f12:	7823      	ldrb	r3, [r4, #0]
   11f14:	2b00      	cmp	r3, #0
   11f16:	d100      	bne.n	11f1a <_vfiprintf_r+0x72>
   11f18:	e0c3      	b.n	120a2 <_vfiprintf_r+0x1fa>
   11f1a:	2201      	movs	r2, #1
   11f1c:	2300      	movs	r3, #0
   11f1e:	4252      	negs	r2, r2
   11f20:	606a      	str	r2, [r5, #4]
   11f22:	a902      	add	r1, sp, #8
   11f24:	3254      	adds	r2, #84	; 0x54
   11f26:	1852      	adds	r2, r2, r1
   11f28:	3401      	adds	r4, #1
   11f2a:	602b      	str	r3, [r5, #0]
   11f2c:	60eb      	str	r3, [r5, #12]
   11f2e:	60ab      	str	r3, [r5, #8]
   11f30:	7013      	strb	r3, [r2, #0]
   11f32:	65ab      	str	r3, [r5, #88]	; 0x58
   11f34:	7821      	ldrb	r1, [r4, #0]
   11f36:	2205      	movs	r2, #5
   11f38:	4862      	ldr	r0, [pc, #392]	; (120c4 <_vfiprintf_r+0x21c>)
   11f3a:	f000 fedf 	bl	12cfc <memchr>
   11f3e:	1c63      	adds	r3, r4, #1
   11f40:	469c      	mov	ip, r3
   11f42:	2800      	cmp	r0, #0
   11f44:	d135      	bne.n	11fb2 <_vfiprintf_r+0x10a>
   11f46:	6829      	ldr	r1, [r5, #0]
   11f48:	06cb      	lsls	r3, r1, #27
   11f4a:	d504      	bpl.n	11f56 <_vfiprintf_r+0xae>
   11f4c:	2353      	movs	r3, #83	; 0x53
   11f4e:	aa02      	add	r2, sp, #8
   11f50:	3020      	adds	r0, #32
   11f52:	189b      	adds	r3, r3, r2
   11f54:	7018      	strb	r0, [r3, #0]
   11f56:	070b      	lsls	r3, r1, #28
   11f58:	d504      	bpl.n	11f64 <_vfiprintf_r+0xbc>
   11f5a:	2353      	movs	r3, #83	; 0x53
   11f5c:	202b      	movs	r0, #43	; 0x2b
   11f5e:	aa02      	add	r2, sp, #8
   11f60:	189b      	adds	r3, r3, r2
   11f62:	7018      	strb	r0, [r3, #0]
   11f64:	7823      	ldrb	r3, [r4, #0]
   11f66:	2b2a      	cmp	r3, #42	; 0x2a
   11f68:	d02c      	beq.n	11fc4 <_vfiprintf_r+0x11c>
   11f6a:	2000      	movs	r0, #0
   11f6c:	210a      	movs	r1, #10
   11f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f70:	7822      	ldrb	r2, [r4, #0]
   11f72:	3a30      	subs	r2, #48	; 0x30
   11f74:	2a09      	cmp	r2, #9
   11f76:	d800      	bhi.n	11f7a <_vfiprintf_r+0xd2>
   11f78:	e06b      	b.n	12052 <_vfiprintf_r+0x1aa>
   11f7a:	2800      	cmp	r0, #0
   11f7c:	d02a      	beq.n	11fd4 <_vfiprintf_r+0x12c>
   11f7e:	9309      	str	r3, [sp, #36]	; 0x24
   11f80:	e028      	b.n	11fd4 <_vfiprintf_r+0x12c>
   11f82:	4b51      	ldr	r3, [pc, #324]	; (120c8 <_vfiprintf_r+0x220>)
   11f84:	429f      	cmp	r7, r3
   11f86:	d101      	bne.n	11f8c <_vfiprintf_r+0xe4>
   11f88:	68b7      	ldr	r7, [r6, #8]
   11f8a:	e79e      	b.n	11eca <_vfiprintf_r+0x22>
   11f8c:	4b4f      	ldr	r3, [pc, #316]	; (120cc <_vfiprintf_r+0x224>)
   11f8e:	429f      	cmp	r7, r3
   11f90:	d19b      	bne.n	11eca <_vfiprintf_r+0x22>
   11f92:	68f7      	ldr	r7, [r6, #12]
   11f94:	e799      	b.n	11eca <_vfiprintf_r+0x22>
   11f96:	0039      	movs	r1, r7
   11f98:	0030      	movs	r0, r6
   11f9a:	f000 fc2d 	bl	127f8 <__swsetup_r>
   11f9e:	2800      	cmp	r0, #0
   11fa0:	d099      	beq.n	11ed6 <_vfiprintf_r+0x2e>
   11fa2:	2001      	movs	r0, #1
   11fa4:	4240      	negs	r0, r0
   11fa6:	b01f      	add	sp, #124	; 0x7c
   11fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11faa:	2b25      	cmp	r3, #37	; 0x25
   11fac:	d09f      	beq.n	11eee <_vfiprintf_r+0x46>
   11fae:	3401      	adds	r4, #1
   11fb0:	e79a      	b.n	11ee8 <_vfiprintf_r+0x40>
   11fb2:	4b44      	ldr	r3, [pc, #272]	; (120c4 <_vfiprintf_r+0x21c>)
   11fb4:	6829      	ldr	r1, [r5, #0]
   11fb6:	1ac0      	subs	r0, r0, r3
   11fb8:	2301      	movs	r3, #1
   11fba:	4083      	lsls	r3, r0
   11fbc:	430b      	orrs	r3, r1
   11fbe:	602b      	str	r3, [r5, #0]
   11fc0:	4664      	mov	r4, ip
   11fc2:	e7b7      	b.n	11f34 <_vfiprintf_r+0x8c>
   11fc4:	9b05      	ldr	r3, [sp, #20]
   11fc6:	1d18      	adds	r0, r3, #4
   11fc8:	681b      	ldr	r3, [r3, #0]
   11fca:	9005      	str	r0, [sp, #20]
   11fcc:	2b00      	cmp	r3, #0
   11fce:	db3a      	blt.n	12046 <_vfiprintf_r+0x19e>
   11fd0:	9309      	str	r3, [sp, #36]	; 0x24
   11fd2:	4664      	mov	r4, ip
   11fd4:	7823      	ldrb	r3, [r4, #0]
   11fd6:	2b2e      	cmp	r3, #46	; 0x2e
   11fd8:	d10b      	bne.n	11ff2 <_vfiprintf_r+0x14a>
   11fda:	7863      	ldrb	r3, [r4, #1]
   11fdc:	1c62      	adds	r2, r4, #1
   11fde:	2b2a      	cmp	r3, #42	; 0x2a
   11fe0:	d13f      	bne.n	12062 <_vfiprintf_r+0x1ba>
   11fe2:	9b05      	ldr	r3, [sp, #20]
   11fe4:	3402      	adds	r4, #2
   11fe6:	1d1a      	adds	r2, r3, #4
   11fe8:	681b      	ldr	r3, [r3, #0]
   11fea:	9205      	str	r2, [sp, #20]
   11fec:	2b00      	cmp	r3, #0
   11fee:	db35      	blt.n	1205c <_vfiprintf_r+0x1b4>
   11ff0:	9307      	str	r3, [sp, #28]
   11ff2:	7821      	ldrb	r1, [r4, #0]
   11ff4:	2203      	movs	r2, #3
   11ff6:	4836      	ldr	r0, [pc, #216]	; (120d0 <_vfiprintf_r+0x228>)
   11ff8:	f000 fe80 	bl	12cfc <memchr>
   11ffc:	2800      	cmp	r0, #0
   11ffe:	d007      	beq.n	12010 <_vfiprintf_r+0x168>
   12000:	4b33      	ldr	r3, [pc, #204]	; (120d0 <_vfiprintf_r+0x228>)
   12002:	682a      	ldr	r2, [r5, #0]
   12004:	1ac0      	subs	r0, r0, r3
   12006:	2340      	movs	r3, #64	; 0x40
   12008:	4083      	lsls	r3, r0
   1200a:	4313      	orrs	r3, r2
   1200c:	602b      	str	r3, [r5, #0]
   1200e:	3401      	adds	r4, #1
   12010:	7821      	ldrb	r1, [r4, #0]
   12012:	1c63      	adds	r3, r4, #1
   12014:	2206      	movs	r2, #6
   12016:	482f      	ldr	r0, [pc, #188]	; (120d4 <_vfiprintf_r+0x22c>)
   12018:	9302      	str	r3, [sp, #8]
   1201a:	7629      	strb	r1, [r5, #24]
   1201c:	f000 fe6e 	bl	12cfc <memchr>
   12020:	2800      	cmp	r0, #0
   12022:	d044      	beq.n	120ae <_vfiprintf_r+0x206>
   12024:	4b2c      	ldr	r3, [pc, #176]	; (120d8 <_vfiprintf_r+0x230>)
   12026:	2b00      	cmp	r3, #0
   12028:	d12f      	bne.n	1208a <_vfiprintf_r+0x1e2>
   1202a:	6829      	ldr	r1, [r5, #0]
   1202c:	9b05      	ldr	r3, [sp, #20]
   1202e:	2207      	movs	r2, #7
   12030:	05c9      	lsls	r1, r1, #23
   12032:	d528      	bpl.n	12086 <_vfiprintf_r+0x1de>
   12034:	189b      	adds	r3, r3, r2
   12036:	4393      	bics	r3, r2
   12038:	3308      	adds	r3, #8
   1203a:	9305      	str	r3, [sp, #20]
   1203c:	696b      	ldr	r3, [r5, #20]
   1203e:	9a03      	ldr	r2, [sp, #12]
   12040:	189b      	adds	r3, r3, r2
   12042:	616b      	str	r3, [r5, #20]
   12044:	e74f      	b.n	11ee6 <_vfiprintf_r+0x3e>
   12046:	425b      	negs	r3, r3
   12048:	60eb      	str	r3, [r5, #12]
   1204a:	2302      	movs	r3, #2
   1204c:	430b      	orrs	r3, r1
   1204e:	602b      	str	r3, [r5, #0]
   12050:	e7bf      	b.n	11fd2 <_vfiprintf_r+0x12a>
   12052:	434b      	muls	r3, r1
   12054:	3401      	adds	r4, #1
   12056:	189b      	adds	r3, r3, r2
   12058:	2001      	movs	r0, #1
   1205a:	e789      	b.n	11f70 <_vfiprintf_r+0xc8>
   1205c:	2301      	movs	r3, #1
   1205e:	425b      	negs	r3, r3
   12060:	e7c6      	b.n	11ff0 <_vfiprintf_r+0x148>
   12062:	2300      	movs	r3, #0
   12064:	0014      	movs	r4, r2
   12066:	200a      	movs	r0, #10
   12068:	001a      	movs	r2, r3
   1206a:	606b      	str	r3, [r5, #4]
   1206c:	7821      	ldrb	r1, [r4, #0]
   1206e:	3930      	subs	r1, #48	; 0x30
   12070:	2909      	cmp	r1, #9
   12072:	d903      	bls.n	1207c <_vfiprintf_r+0x1d4>
   12074:	2b00      	cmp	r3, #0
   12076:	d0bc      	beq.n	11ff2 <_vfiprintf_r+0x14a>
   12078:	9207      	str	r2, [sp, #28]
   1207a:	e7ba      	b.n	11ff2 <_vfiprintf_r+0x14a>
   1207c:	4342      	muls	r2, r0
   1207e:	3401      	adds	r4, #1
   12080:	1852      	adds	r2, r2, r1
   12082:	2301      	movs	r3, #1
   12084:	e7f2      	b.n	1206c <_vfiprintf_r+0x1c4>
   12086:	3307      	adds	r3, #7
   12088:	e7d5      	b.n	12036 <_vfiprintf_r+0x18e>
   1208a:	ab05      	add	r3, sp, #20
   1208c:	9300      	str	r3, [sp, #0]
   1208e:	003a      	movs	r2, r7
   12090:	4b12      	ldr	r3, [pc, #72]	; (120dc <_vfiprintf_r+0x234>)
   12092:	0029      	movs	r1, r5
   12094:	0030      	movs	r0, r6
   12096:	e000      	b.n	1209a <_vfiprintf_r+0x1f2>
   12098:	bf00      	nop
   1209a:	9003      	str	r0, [sp, #12]
   1209c:	9b03      	ldr	r3, [sp, #12]
   1209e:	3301      	adds	r3, #1
   120a0:	d1cc      	bne.n	1203c <_vfiprintf_r+0x194>
   120a2:	89bb      	ldrh	r3, [r7, #12]
   120a4:	065b      	lsls	r3, r3, #25
   120a6:	d500      	bpl.n	120aa <_vfiprintf_r+0x202>
   120a8:	e77b      	b.n	11fa2 <_vfiprintf_r+0xfa>
   120aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   120ac:	e77b      	b.n	11fa6 <_vfiprintf_r+0xfe>
   120ae:	ab05      	add	r3, sp, #20
   120b0:	9300      	str	r3, [sp, #0]
   120b2:	003a      	movs	r2, r7
   120b4:	4b09      	ldr	r3, [pc, #36]	; (120dc <_vfiprintf_r+0x234>)
   120b6:	0029      	movs	r1, r5
   120b8:	0030      	movs	r0, r6
   120ba:	f000 f87f 	bl	121bc <_printf_i>
   120be:	e7ec      	b.n	1209a <_vfiprintf_r+0x1f2>
   120c0:	00013f40 	.word	0x00013f40
   120c4:	00013eec 	.word	0x00013eec
   120c8:	00013f60 	.word	0x00013f60
   120cc:	00013f20 	.word	0x00013f20
   120d0:	00013ef2 	.word	0x00013ef2
   120d4:	00013ef6 	.word	0x00013ef6
   120d8:	00000000 	.word	0x00000000
   120dc:	00011e83 	.word	0x00011e83

000120e0 <_printf_common>:
   120e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   120e2:	0015      	movs	r5, r2
   120e4:	9301      	str	r3, [sp, #4]
   120e6:	688a      	ldr	r2, [r1, #8]
   120e8:	690b      	ldr	r3, [r1, #16]
   120ea:	9000      	str	r0, [sp, #0]
   120ec:	000c      	movs	r4, r1
   120ee:	4293      	cmp	r3, r2
   120f0:	da00      	bge.n	120f4 <_printf_common+0x14>
   120f2:	0013      	movs	r3, r2
   120f4:	0022      	movs	r2, r4
   120f6:	602b      	str	r3, [r5, #0]
   120f8:	3243      	adds	r2, #67	; 0x43
   120fa:	7812      	ldrb	r2, [r2, #0]
   120fc:	2a00      	cmp	r2, #0
   120fe:	d001      	beq.n	12104 <_printf_common+0x24>
   12100:	3301      	adds	r3, #1
   12102:	602b      	str	r3, [r5, #0]
   12104:	6823      	ldr	r3, [r4, #0]
   12106:	069b      	lsls	r3, r3, #26
   12108:	d502      	bpl.n	12110 <_printf_common+0x30>
   1210a:	682b      	ldr	r3, [r5, #0]
   1210c:	3302      	adds	r3, #2
   1210e:	602b      	str	r3, [r5, #0]
   12110:	2706      	movs	r7, #6
   12112:	6823      	ldr	r3, [r4, #0]
   12114:	401f      	ands	r7, r3
   12116:	d027      	beq.n	12168 <_printf_common+0x88>
   12118:	0023      	movs	r3, r4
   1211a:	3343      	adds	r3, #67	; 0x43
   1211c:	781b      	ldrb	r3, [r3, #0]
   1211e:	1e5a      	subs	r2, r3, #1
   12120:	4193      	sbcs	r3, r2
   12122:	6822      	ldr	r2, [r4, #0]
   12124:	0692      	lsls	r2, r2, #26
   12126:	d430      	bmi.n	1218a <_printf_common+0xaa>
   12128:	0022      	movs	r2, r4
   1212a:	9901      	ldr	r1, [sp, #4]
   1212c:	3243      	adds	r2, #67	; 0x43
   1212e:	9800      	ldr	r0, [sp, #0]
   12130:	9e08      	ldr	r6, [sp, #32]
   12132:	47b0      	blx	r6
   12134:	1c43      	adds	r3, r0, #1
   12136:	d025      	beq.n	12184 <_printf_common+0xa4>
   12138:	2306      	movs	r3, #6
   1213a:	6820      	ldr	r0, [r4, #0]
   1213c:	682a      	ldr	r2, [r5, #0]
   1213e:	68e1      	ldr	r1, [r4, #12]
   12140:	4003      	ands	r3, r0
   12142:	2500      	movs	r5, #0
   12144:	2b04      	cmp	r3, #4
   12146:	d103      	bne.n	12150 <_printf_common+0x70>
   12148:	1a8d      	subs	r5, r1, r2
   1214a:	43eb      	mvns	r3, r5
   1214c:	17db      	asrs	r3, r3, #31
   1214e:	401d      	ands	r5, r3
   12150:	68a3      	ldr	r3, [r4, #8]
   12152:	6922      	ldr	r2, [r4, #16]
   12154:	4293      	cmp	r3, r2
   12156:	dd01      	ble.n	1215c <_printf_common+0x7c>
   12158:	1a9b      	subs	r3, r3, r2
   1215a:	18ed      	adds	r5, r5, r3
   1215c:	2700      	movs	r7, #0
   1215e:	42bd      	cmp	r5, r7
   12160:	d120      	bne.n	121a4 <_printf_common+0xc4>
   12162:	2000      	movs	r0, #0
   12164:	e010      	b.n	12188 <_printf_common+0xa8>
   12166:	3701      	adds	r7, #1
   12168:	68e3      	ldr	r3, [r4, #12]
   1216a:	682a      	ldr	r2, [r5, #0]
   1216c:	1a9b      	subs	r3, r3, r2
   1216e:	429f      	cmp	r7, r3
   12170:	dad2      	bge.n	12118 <_printf_common+0x38>
   12172:	0022      	movs	r2, r4
   12174:	2301      	movs	r3, #1
   12176:	3219      	adds	r2, #25
   12178:	9901      	ldr	r1, [sp, #4]
   1217a:	9800      	ldr	r0, [sp, #0]
   1217c:	9e08      	ldr	r6, [sp, #32]
   1217e:	47b0      	blx	r6
   12180:	1c43      	adds	r3, r0, #1
   12182:	d1f0      	bne.n	12166 <_printf_common+0x86>
   12184:	2001      	movs	r0, #1
   12186:	4240      	negs	r0, r0
   12188:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1218a:	2030      	movs	r0, #48	; 0x30
   1218c:	18e1      	adds	r1, r4, r3
   1218e:	3143      	adds	r1, #67	; 0x43
   12190:	7008      	strb	r0, [r1, #0]
   12192:	0021      	movs	r1, r4
   12194:	1c5a      	adds	r2, r3, #1
   12196:	3145      	adds	r1, #69	; 0x45
   12198:	7809      	ldrb	r1, [r1, #0]
   1219a:	18a2      	adds	r2, r4, r2
   1219c:	3243      	adds	r2, #67	; 0x43
   1219e:	3302      	adds	r3, #2
   121a0:	7011      	strb	r1, [r2, #0]
   121a2:	e7c1      	b.n	12128 <_printf_common+0x48>
   121a4:	0022      	movs	r2, r4
   121a6:	2301      	movs	r3, #1
   121a8:	321a      	adds	r2, #26
   121aa:	9901      	ldr	r1, [sp, #4]
   121ac:	9800      	ldr	r0, [sp, #0]
   121ae:	9e08      	ldr	r6, [sp, #32]
   121b0:	47b0      	blx	r6
   121b2:	1c43      	adds	r3, r0, #1
   121b4:	d0e6      	beq.n	12184 <_printf_common+0xa4>
   121b6:	3701      	adds	r7, #1
   121b8:	e7d1      	b.n	1215e <_printf_common+0x7e>
   121ba:	Address 0x000121ba is out of bounds.


000121bc <_printf_i>:
   121bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   121be:	b08b      	sub	sp, #44	; 0x2c
   121c0:	9206      	str	r2, [sp, #24]
   121c2:	000a      	movs	r2, r1
   121c4:	3243      	adds	r2, #67	; 0x43
   121c6:	9307      	str	r3, [sp, #28]
   121c8:	9005      	str	r0, [sp, #20]
   121ca:	9204      	str	r2, [sp, #16]
   121cc:	7e0a      	ldrb	r2, [r1, #24]
   121ce:	000c      	movs	r4, r1
   121d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   121d2:	2a6e      	cmp	r2, #110	; 0x6e
   121d4:	d100      	bne.n	121d8 <_printf_i+0x1c>
   121d6:	e08f      	b.n	122f8 <_printf_i+0x13c>
   121d8:	d817      	bhi.n	1220a <_printf_i+0x4e>
   121da:	2a63      	cmp	r2, #99	; 0x63
   121dc:	d02c      	beq.n	12238 <_printf_i+0x7c>
   121de:	d808      	bhi.n	121f2 <_printf_i+0x36>
   121e0:	2a00      	cmp	r2, #0
   121e2:	d100      	bne.n	121e6 <_printf_i+0x2a>
   121e4:	e099      	b.n	1231a <_printf_i+0x15e>
   121e6:	2a58      	cmp	r2, #88	; 0x58
   121e8:	d054      	beq.n	12294 <_printf_i+0xd8>
   121ea:	0026      	movs	r6, r4
   121ec:	3642      	adds	r6, #66	; 0x42
   121ee:	7032      	strb	r2, [r6, #0]
   121f0:	e029      	b.n	12246 <_printf_i+0x8a>
   121f2:	2a64      	cmp	r2, #100	; 0x64
   121f4:	d001      	beq.n	121fa <_printf_i+0x3e>
   121f6:	2a69      	cmp	r2, #105	; 0x69
   121f8:	d1f7      	bne.n	121ea <_printf_i+0x2e>
   121fa:	6821      	ldr	r1, [r4, #0]
   121fc:	681a      	ldr	r2, [r3, #0]
   121fe:	0608      	lsls	r0, r1, #24
   12200:	d523      	bpl.n	1224a <_printf_i+0x8e>
   12202:	1d11      	adds	r1, r2, #4
   12204:	6019      	str	r1, [r3, #0]
   12206:	6815      	ldr	r5, [r2, #0]
   12208:	e025      	b.n	12256 <_printf_i+0x9a>
   1220a:	2a73      	cmp	r2, #115	; 0x73
   1220c:	d100      	bne.n	12210 <_printf_i+0x54>
   1220e:	e088      	b.n	12322 <_printf_i+0x166>
   12210:	d808      	bhi.n	12224 <_printf_i+0x68>
   12212:	2a6f      	cmp	r2, #111	; 0x6f
   12214:	d029      	beq.n	1226a <_printf_i+0xae>
   12216:	2a70      	cmp	r2, #112	; 0x70
   12218:	d1e7      	bne.n	121ea <_printf_i+0x2e>
   1221a:	2220      	movs	r2, #32
   1221c:	6809      	ldr	r1, [r1, #0]
   1221e:	430a      	orrs	r2, r1
   12220:	6022      	str	r2, [r4, #0]
   12222:	e003      	b.n	1222c <_printf_i+0x70>
   12224:	2a75      	cmp	r2, #117	; 0x75
   12226:	d020      	beq.n	1226a <_printf_i+0xae>
   12228:	2a78      	cmp	r2, #120	; 0x78
   1222a:	d1de      	bne.n	121ea <_printf_i+0x2e>
   1222c:	0022      	movs	r2, r4
   1222e:	2178      	movs	r1, #120	; 0x78
   12230:	3245      	adds	r2, #69	; 0x45
   12232:	7011      	strb	r1, [r2, #0]
   12234:	4a6c      	ldr	r2, [pc, #432]	; (123e8 <_printf_i+0x22c>)
   12236:	e030      	b.n	1229a <_printf_i+0xde>
   12238:	000e      	movs	r6, r1
   1223a:	681a      	ldr	r2, [r3, #0]
   1223c:	3642      	adds	r6, #66	; 0x42
   1223e:	1d11      	adds	r1, r2, #4
   12240:	6019      	str	r1, [r3, #0]
   12242:	6813      	ldr	r3, [r2, #0]
   12244:	7033      	strb	r3, [r6, #0]
   12246:	2301      	movs	r3, #1
   12248:	e079      	b.n	1233e <_printf_i+0x182>
   1224a:	0649      	lsls	r1, r1, #25
   1224c:	d5d9      	bpl.n	12202 <_printf_i+0x46>
   1224e:	1d11      	adds	r1, r2, #4
   12250:	6019      	str	r1, [r3, #0]
   12252:	2300      	movs	r3, #0
   12254:	5ed5      	ldrsh	r5, [r2, r3]
   12256:	2d00      	cmp	r5, #0
   12258:	da03      	bge.n	12262 <_printf_i+0xa6>
   1225a:	232d      	movs	r3, #45	; 0x2d
   1225c:	9a04      	ldr	r2, [sp, #16]
   1225e:	426d      	negs	r5, r5
   12260:	7013      	strb	r3, [r2, #0]
   12262:	4b62      	ldr	r3, [pc, #392]	; (123ec <_printf_i+0x230>)
   12264:	270a      	movs	r7, #10
   12266:	9303      	str	r3, [sp, #12]
   12268:	e02f      	b.n	122ca <_printf_i+0x10e>
   1226a:	6820      	ldr	r0, [r4, #0]
   1226c:	6819      	ldr	r1, [r3, #0]
   1226e:	0605      	lsls	r5, r0, #24
   12270:	d503      	bpl.n	1227a <_printf_i+0xbe>
   12272:	1d08      	adds	r0, r1, #4
   12274:	6018      	str	r0, [r3, #0]
   12276:	680d      	ldr	r5, [r1, #0]
   12278:	e005      	b.n	12286 <_printf_i+0xca>
   1227a:	0640      	lsls	r0, r0, #25
   1227c:	d5f9      	bpl.n	12272 <_printf_i+0xb6>
   1227e:	680d      	ldr	r5, [r1, #0]
   12280:	1d08      	adds	r0, r1, #4
   12282:	6018      	str	r0, [r3, #0]
   12284:	b2ad      	uxth	r5, r5
   12286:	4b59      	ldr	r3, [pc, #356]	; (123ec <_printf_i+0x230>)
   12288:	2708      	movs	r7, #8
   1228a:	9303      	str	r3, [sp, #12]
   1228c:	2a6f      	cmp	r2, #111	; 0x6f
   1228e:	d018      	beq.n	122c2 <_printf_i+0x106>
   12290:	270a      	movs	r7, #10
   12292:	e016      	b.n	122c2 <_printf_i+0x106>
   12294:	3145      	adds	r1, #69	; 0x45
   12296:	700a      	strb	r2, [r1, #0]
   12298:	4a54      	ldr	r2, [pc, #336]	; (123ec <_printf_i+0x230>)
   1229a:	9203      	str	r2, [sp, #12]
   1229c:	681a      	ldr	r2, [r3, #0]
   1229e:	6821      	ldr	r1, [r4, #0]
   122a0:	1d10      	adds	r0, r2, #4
   122a2:	6018      	str	r0, [r3, #0]
   122a4:	6815      	ldr	r5, [r2, #0]
   122a6:	0608      	lsls	r0, r1, #24
   122a8:	d522      	bpl.n	122f0 <_printf_i+0x134>
   122aa:	07cb      	lsls	r3, r1, #31
   122ac:	d502      	bpl.n	122b4 <_printf_i+0xf8>
   122ae:	2320      	movs	r3, #32
   122b0:	4319      	orrs	r1, r3
   122b2:	6021      	str	r1, [r4, #0]
   122b4:	2710      	movs	r7, #16
   122b6:	2d00      	cmp	r5, #0
   122b8:	d103      	bne.n	122c2 <_printf_i+0x106>
   122ba:	2320      	movs	r3, #32
   122bc:	6822      	ldr	r2, [r4, #0]
   122be:	439a      	bics	r2, r3
   122c0:	6022      	str	r2, [r4, #0]
   122c2:	0023      	movs	r3, r4
   122c4:	2200      	movs	r2, #0
   122c6:	3343      	adds	r3, #67	; 0x43
   122c8:	701a      	strb	r2, [r3, #0]
   122ca:	6863      	ldr	r3, [r4, #4]
   122cc:	60a3      	str	r3, [r4, #8]
   122ce:	2b00      	cmp	r3, #0
   122d0:	db5c      	blt.n	1238c <_printf_i+0x1d0>
   122d2:	2204      	movs	r2, #4
   122d4:	6821      	ldr	r1, [r4, #0]
   122d6:	4391      	bics	r1, r2
   122d8:	6021      	str	r1, [r4, #0]
   122da:	2d00      	cmp	r5, #0
   122dc:	d158      	bne.n	12390 <_printf_i+0x1d4>
   122de:	9e04      	ldr	r6, [sp, #16]
   122e0:	2b00      	cmp	r3, #0
   122e2:	d064      	beq.n	123ae <_printf_i+0x1f2>
   122e4:	0026      	movs	r6, r4
   122e6:	9b03      	ldr	r3, [sp, #12]
   122e8:	3642      	adds	r6, #66	; 0x42
   122ea:	781b      	ldrb	r3, [r3, #0]
   122ec:	7033      	strb	r3, [r6, #0]
   122ee:	e05e      	b.n	123ae <_printf_i+0x1f2>
   122f0:	0648      	lsls	r0, r1, #25
   122f2:	d5da      	bpl.n	122aa <_printf_i+0xee>
   122f4:	b2ad      	uxth	r5, r5
   122f6:	e7d8      	b.n	122aa <_printf_i+0xee>
   122f8:	6809      	ldr	r1, [r1, #0]
   122fa:	681a      	ldr	r2, [r3, #0]
   122fc:	0608      	lsls	r0, r1, #24
   122fe:	d505      	bpl.n	1230c <_printf_i+0x150>
   12300:	1d11      	adds	r1, r2, #4
   12302:	6019      	str	r1, [r3, #0]
   12304:	6813      	ldr	r3, [r2, #0]
   12306:	6962      	ldr	r2, [r4, #20]
   12308:	601a      	str	r2, [r3, #0]
   1230a:	e006      	b.n	1231a <_printf_i+0x15e>
   1230c:	0649      	lsls	r1, r1, #25
   1230e:	d5f7      	bpl.n	12300 <_printf_i+0x144>
   12310:	1d11      	adds	r1, r2, #4
   12312:	6019      	str	r1, [r3, #0]
   12314:	6813      	ldr	r3, [r2, #0]
   12316:	8aa2      	ldrh	r2, [r4, #20]
   12318:	801a      	strh	r2, [r3, #0]
   1231a:	2300      	movs	r3, #0
   1231c:	9e04      	ldr	r6, [sp, #16]
   1231e:	6123      	str	r3, [r4, #16]
   12320:	e054      	b.n	123cc <_printf_i+0x210>
   12322:	681a      	ldr	r2, [r3, #0]
   12324:	1d11      	adds	r1, r2, #4
   12326:	6019      	str	r1, [r3, #0]
   12328:	6816      	ldr	r6, [r2, #0]
   1232a:	2100      	movs	r1, #0
   1232c:	6862      	ldr	r2, [r4, #4]
   1232e:	0030      	movs	r0, r6
   12330:	f000 fce4 	bl	12cfc <memchr>
   12334:	2800      	cmp	r0, #0
   12336:	d001      	beq.n	1233c <_printf_i+0x180>
   12338:	1b80      	subs	r0, r0, r6
   1233a:	6060      	str	r0, [r4, #4]
   1233c:	6863      	ldr	r3, [r4, #4]
   1233e:	6123      	str	r3, [r4, #16]
   12340:	2300      	movs	r3, #0
   12342:	9a04      	ldr	r2, [sp, #16]
   12344:	7013      	strb	r3, [r2, #0]
   12346:	e041      	b.n	123cc <_printf_i+0x210>
   12348:	6923      	ldr	r3, [r4, #16]
   1234a:	0032      	movs	r2, r6
   1234c:	9906      	ldr	r1, [sp, #24]
   1234e:	9805      	ldr	r0, [sp, #20]
   12350:	9d07      	ldr	r5, [sp, #28]
   12352:	47a8      	blx	r5
   12354:	1c43      	adds	r3, r0, #1
   12356:	d043      	beq.n	123e0 <_printf_i+0x224>
   12358:	6823      	ldr	r3, [r4, #0]
   1235a:	2500      	movs	r5, #0
   1235c:	079b      	lsls	r3, r3, #30
   1235e:	d40f      	bmi.n	12380 <_printf_i+0x1c4>
   12360:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12362:	68e0      	ldr	r0, [r4, #12]
   12364:	4298      	cmp	r0, r3
   12366:	da3d      	bge.n	123e4 <_printf_i+0x228>
   12368:	0018      	movs	r0, r3
   1236a:	e03b      	b.n	123e4 <_printf_i+0x228>
   1236c:	0022      	movs	r2, r4
   1236e:	2301      	movs	r3, #1
   12370:	3219      	adds	r2, #25
   12372:	9906      	ldr	r1, [sp, #24]
   12374:	9805      	ldr	r0, [sp, #20]
   12376:	9e07      	ldr	r6, [sp, #28]
   12378:	47b0      	blx	r6
   1237a:	1c43      	adds	r3, r0, #1
   1237c:	d030      	beq.n	123e0 <_printf_i+0x224>
   1237e:	3501      	adds	r5, #1
   12380:	68e3      	ldr	r3, [r4, #12]
   12382:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12384:	1a9b      	subs	r3, r3, r2
   12386:	429d      	cmp	r5, r3
   12388:	dbf0      	blt.n	1236c <_printf_i+0x1b0>
   1238a:	e7e9      	b.n	12360 <_printf_i+0x1a4>
   1238c:	2d00      	cmp	r5, #0
   1238e:	d0a9      	beq.n	122e4 <_printf_i+0x128>
   12390:	9e04      	ldr	r6, [sp, #16]
   12392:	0028      	movs	r0, r5
   12394:	0039      	movs	r1, r7
   12396:	f7fd f957 	bl	f648 <__aeabi_uidivmod>
   1239a:	9b03      	ldr	r3, [sp, #12]
   1239c:	3e01      	subs	r6, #1
   1239e:	5c5b      	ldrb	r3, [r3, r1]
   123a0:	0028      	movs	r0, r5
   123a2:	7033      	strb	r3, [r6, #0]
   123a4:	0039      	movs	r1, r7
   123a6:	f7fd f8c9 	bl	f53c <__udivsi3>
   123aa:	1e05      	subs	r5, r0, #0
   123ac:	d1f1      	bne.n	12392 <_printf_i+0x1d6>
   123ae:	2f08      	cmp	r7, #8
   123b0:	d109      	bne.n	123c6 <_printf_i+0x20a>
   123b2:	6823      	ldr	r3, [r4, #0]
   123b4:	07db      	lsls	r3, r3, #31
   123b6:	d506      	bpl.n	123c6 <_printf_i+0x20a>
   123b8:	6863      	ldr	r3, [r4, #4]
   123ba:	6922      	ldr	r2, [r4, #16]
   123bc:	4293      	cmp	r3, r2
   123be:	dc02      	bgt.n	123c6 <_printf_i+0x20a>
   123c0:	2330      	movs	r3, #48	; 0x30
   123c2:	3e01      	subs	r6, #1
   123c4:	7033      	strb	r3, [r6, #0]
   123c6:	9b04      	ldr	r3, [sp, #16]
   123c8:	1b9b      	subs	r3, r3, r6
   123ca:	6123      	str	r3, [r4, #16]
   123cc:	9b07      	ldr	r3, [sp, #28]
   123ce:	aa09      	add	r2, sp, #36	; 0x24
   123d0:	9300      	str	r3, [sp, #0]
   123d2:	0021      	movs	r1, r4
   123d4:	9b06      	ldr	r3, [sp, #24]
   123d6:	9805      	ldr	r0, [sp, #20]
   123d8:	f7ff fe82 	bl	120e0 <_printf_common>
   123dc:	1c43      	adds	r3, r0, #1
   123de:	d1b3      	bne.n	12348 <_printf_i+0x18c>
   123e0:	2001      	movs	r0, #1
   123e2:	4240      	negs	r0, r0
   123e4:	b00b      	add	sp, #44	; 0x2c
   123e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   123e8:	00013f0e 	.word	0x00013f0e
   123ec:	00013efd 	.word	0x00013efd

000123f0 <iprintf>:
   123f0:	b40f      	push	{r0, r1, r2, r3}
   123f2:	4b0b      	ldr	r3, [pc, #44]	; (12420 <iprintf+0x30>)
   123f4:	b513      	push	{r0, r1, r4, lr}
   123f6:	681c      	ldr	r4, [r3, #0]
   123f8:	2c00      	cmp	r4, #0
   123fa:	d005      	beq.n	12408 <iprintf+0x18>
   123fc:	69a3      	ldr	r3, [r4, #24]
   123fe:	2b00      	cmp	r3, #0
   12400:	d102      	bne.n	12408 <iprintf+0x18>
   12402:	0020      	movs	r0, r4
   12404:	f000 fb6e 	bl	12ae4 <__sinit>
   12408:	ab05      	add	r3, sp, #20
   1240a:	9a04      	ldr	r2, [sp, #16]
   1240c:	68a1      	ldr	r1, [r4, #8]
   1240e:	0020      	movs	r0, r4
   12410:	9301      	str	r3, [sp, #4]
   12412:	f7ff fd49 	bl	11ea8 <_vfiprintf_r>
   12416:	bc16      	pop	{r1, r2, r4}
   12418:	bc08      	pop	{r3}
   1241a:	b004      	add	sp, #16
   1241c:	4718      	bx	r3
   1241e:	46c0      	nop			; (mov r8, r8)
   12420:	20000034 	.word	0x20000034

00012424 <_puts_r>:
   12424:	b570      	push	{r4, r5, r6, lr}
   12426:	0005      	movs	r5, r0
   12428:	000e      	movs	r6, r1
   1242a:	2800      	cmp	r0, #0
   1242c:	d004      	beq.n	12438 <_puts_r+0x14>
   1242e:	6983      	ldr	r3, [r0, #24]
   12430:	2b00      	cmp	r3, #0
   12432:	d101      	bne.n	12438 <_puts_r+0x14>
   12434:	f000 fb56 	bl	12ae4 <__sinit>
   12438:	69ab      	ldr	r3, [r5, #24]
   1243a:	68ac      	ldr	r4, [r5, #8]
   1243c:	2b00      	cmp	r3, #0
   1243e:	d102      	bne.n	12446 <_puts_r+0x22>
   12440:	0028      	movs	r0, r5
   12442:	f000 fb4f 	bl	12ae4 <__sinit>
   12446:	4b24      	ldr	r3, [pc, #144]	; (124d8 <_puts_r+0xb4>)
   12448:	429c      	cmp	r4, r3
   1244a:	d10f      	bne.n	1246c <_puts_r+0x48>
   1244c:	686c      	ldr	r4, [r5, #4]
   1244e:	89a3      	ldrh	r3, [r4, #12]
   12450:	071b      	lsls	r3, r3, #28
   12452:	d502      	bpl.n	1245a <_puts_r+0x36>
   12454:	6923      	ldr	r3, [r4, #16]
   12456:	2b00      	cmp	r3, #0
   12458:	d120      	bne.n	1249c <_puts_r+0x78>
   1245a:	0021      	movs	r1, r4
   1245c:	0028      	movs	r0, r5
   1245e:	f000 f9cb 	bl	127f8 <__swsetup_r>
   12462:	2800      	cmp	r0, #0
   12464:	d01a      	beq.n	1249c <_puts_r+0x78>
   12466:	2001      	movs	r0, #1
   12468:	4240      	negs	r0, r0
   1246a:	bd70      	pop	{r4, r5, r6, pc}
   1246c:	4b1b      	ldr	r3, [pc, #108]	; (124dc <_puts_r+0xb8>)
   1246e:	429c      	cmp	r4, r3
   12470:	d101      	bne.n	12476 <_puts_r+0x52>
   12472:	68ac      	ldr	r4, [r5, #8]
   12474:	e7eb      	b.n	1244e <_puts_r+0x2a>
   12476:	4b1a      	ldr	r3, [pc, #104]	; (124e0 <_puts_r+0xbc>)
   12478:	429c      	cmp	r4, r3
   1247a:	d1e8      	bne.n	1244e <_puts_r+0x2a>
   1247c:	68ec      	ldr	r4, [r5, #12]
   1247e:	e7e6      	b.n	1244e <_puts_r+0x2a>
   12480:	3b01      	subs	r3, #1
   12482:	3601      	adds	r6, #1
   12484:	60a3      	str	r3, [r4, #8]
   12486:	2b00      	cmp	r3, #0
   12488:	da04      	bge.n	12494 <_puts_r+0x70>
   1248a:	69a2      	ldr	r2, [r4, #24]
   1248c:	4293      	cmp	r3, r2
   1248e:	db16      	blt.n	124be <_puts_r+0x9a>
   12490:	290a      	cmp	r1, #10
   12492:	d014      	beq.n	124be <_puts_r+0x9a>
   12494:	6823      	ldr	r3, [r4, #0]
   12496:	1c5a      	adds	r2, r3, #1
   12498:	6022      	str	r2, [r4, #0]
   1249a:	7019      	strb	r1, [r3, #0]
   1249c:	7831      	ldrb	r1, [r6, #0]
   1249e:	68a3      	ldr	r3, [r4, #8]
   124a0:	2900      	cmp	r1, #0
   124a2:	d1ed      	bne.n	12480 <_puts_r+0x5c>
   124a4:	3b01      	subs	r3, #1
   124a6:	60a3      	str	r3, [r4, #8]
   124a8:	2b00      	cmp	r3, #0
   124aa:	da0f      	bge.n	124cc <_puts_r+0xa8>
   124ac:	0022      	movs	r2, r4
   124ae:	310a      	adds	r1, #10
   124b0:	0028      	movs	r0, r5
   124b2:	f000 f94b 	bl	1274c <__swbuf_r>
   124b6:	1c43      	adds	r3, r0, #1
   124b8:	d0d5      	beq.n	12466 <_puts_r+0x42>
   124ba:	200a      	movs	r0, #10
   124bc:	e7d5      	b.n	1246a <_puts_r+0x46>
   124be:	0022      	movs	r2, r4
   124c0:	0028      	movs	r0, r5
   124c2:	f000 f943 	bl	1274c <__swbuf_r>
   124c6:	1c43      	adds	r3, r0, #1
   124c8:	d1e8      	bne.n	1249c <_puts_r+0x78>
   124ca:	e7cc      	b.n	12466 <_puts_r+0x42>
   124cc:	200a      	movs	r0, #10
   124ce:	6823      	ldr	r3, [r4, #0]
   124d0:	1c5a      	adds	r2, r3, #1
   124d2:	6022      	str	r2, [r4, #0]
   124d4:	7018      	strb	r0, [r3, #0]
   124d6:	e7c8      	b.n	1246a <_puts_r+0x46>
   124d8:	00013f40 	.word	0x00013f40
   124dc:	00013f60 	.word	0x00013f60
   124e0:	00013f20 	.word	0x00013f20

000124e4 <puts>:
   124e4:	b510      	push	{r4, lr}
   124e6:	4b03      	ldr	r3, [pc, #12]	; (124f4 <puts+0x10>)
   124e8:	0001      	movs	r1, r0
   124ea:	6818      	ldr	r0, [r3, #0]
   124ec:	f7ff ff9a 	bl	12424 <_puts_r>
   124f0:	bd10      	pop	{r4, pc}
   124f2:	46c0      	nop			; (mov r8, r8)
   124f4:	20000034 	.word	0x20000034

000124f8 <srand>:
   124f8:	4b10      	ldr	r3, [pc, #64]	; (1253c <srand+0x44>)
   124fa:	b570      	push	{r4, r5, r6, lr}
   124fc:	681c      	ldr	r4, [r3, #0]
   124fe:	0005      	movs	r5, r0
   12500:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12502:	2b00      	cmp	r3, #0
   12504:	d115      	bne.n	12532 <srand+0x3a>
   12506:	2018      	movs	r0, #24
   12508:	f000 fbee 	bl	12ce8 <malloc>
   1250c:	4b0c      	ldr	r3, [pc, #48]	; (12540 <srand+0x48>)
   1250e:	63a0      	str	r0, [r4, #56]	; 0x38
   12510:	8003      	strh	r3, [r0, #0]
   12512:	4b0c      	ldr	r3, [pc, #48]	; (12544 <srand+0x4c>)
   12514:	2201      	movs	r2, #1
   12516:	8043      	strh	r3, [r0, #2]
   12518:	4b0b      	ldr	r3, [pc, #44]	; (12548 <srand+0x50>)
   1251a:	8083      	strh	r3, [r0, #4]
   1251c:	4b0b      	ldr	r3, [pc, #44]	; (1254c <srand+0x54>)
   1251e:	80c3      	strh	r3, [r0, #6]
   12520:	4b0b      	ldr	r3, [pc, #44]	; (12550 <srand+0x58>)
   12522:	8103      	strh	r3, [r0, #8]
   12524:	2305      	movs	r3, #5
   12526:	8143      	strh	r3, [r0, #10]
   12528:	3306      	adds	r3, #6
   1252a:	8183      	strh	r3, [r0, #12]
   1252c:	2300      	movs	r3, #0
   1252e:	6102      	str	r2, [r0, #16]
   12530:	6143      	str	r3, [r0, #20]
   12532:	2200      	movs	r2, #0
   12534:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12536:	611d      	str	r5, [r3, #16]
   12538:	615a      	str	r2, [r3, #20]
   1253a:	bd70      	pop	{r4, r5, r6, pc}
   1253c:	20000034 	.word	0x20000034
   12540:	0000330e 	.word	0x0000330e
   12544:	ffffabcd 	.word	0xffffabcd
   12548:	00001234 	.word	0x00001234
   1254c:	ffffe66d 	.word	0xffffe66d
   12550:	ffffdeec 	.word	0xffffdeec

00012554 <rand>:
   12554:	4b15      	ldr	r3, [pc, #84]	; (125ac <rand+0x58>)
   12556:	b510      	push	{r4, lr}
   12558:	681c      	ldr	r4, [r3, #0]
   1255a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1255c:	2b00      	cmp	r3, #0
   1255e:	d115      	bne.n	1258c <rand+0x38>
   12560:	2018      	movs	r0, #24
   12562:	f000 fbc1 	bl	12ce8 <malloc>
   12566:	4b12      	ldr	r3, [pc, #72]	; (125b0 <rand+0x5c>)
   12568:	63a0      	str	r0, [r4, #56]	; 0x38
   1256a:	8003      	strh	r3, [r0, #0]
   1256c:	4b11      	ldr	r3, [pc, #68]	; (125b4 <rand+0x60>)
   1256e:	2201      	movs	r2, #1
   12570:	8043      	strh	r3, [r0, #2]
   12572:	4b11      	ldr	r3, [pc, #68]	; (125b8 <rand+0x64>)
   12574:	8083      	strh	r3, [r0, #4]
   12576:	4b11      	ldr	r3, [pc, #68]	; (125bc <rand+0x68>)
   12578:	80c3      	strh	r3, [r0, #6]
   1257a:	4b11      	ldr	r3, [pc, #68]	; (125c0 <rand+0x6c>)
   1257c:	8103      	strh	r3, [r0, #8]
   1257e:	2305      	movs	r3, #5
   12580:	8143      	strh	r3, [r0, #10]
   12582:	3306      	adds	r3, #6
   12584:	8183      	strh	r3, [r0, #12]
   12586:	2300      	movs	r3, #0
   12588:	6102      	str	r2, [r0, #16]
   1258a:	6143      	str	r3, [r0, #20]
   1258c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   1258e:	4a0d      	ldr	r2, [pc, #52]	; (125c4 <rand+0x70>)
   12590:	6920      	ldr	r0, [r4, #16]
   12592:	6961      	ldr	r1, [r4, #20]
   12594:	4b0c      	ldr	r3, [pc, #48]	; (125c8 <rand+0x74>)
   12596:	f7fd f981 	bl	f89c <__aeabi_lmul>
   1259a:	2201      	movs	r2, #1
   1259c:	2300      	movs	r3, #0
   1259e:	1880      	adds	r0, r0, r2
   125a0:	4159      	adcs	r1, r3
   125a2:	6120      	str	r0, [r4, #16]
   125a4:	6161      	str	r1, [r4, #20]
   125a6:	0048      	lsls	r0, r1, #1
   125a8:	0840      	lsrs	r0, r0, #1
   125aa:	bd10      	pop	{r4, pc}
   125ac:	20000034 	.word	0x20000034
   125b0:	0000330e 	.word	0x0000330e
   125b4:	ffffabcd 	.word	0xffffabcd
   125b8:	00001234 	.word	0x00001234
   125bc:	ffffe66d 	.word	0xffffe66d
   125c0:	ffffdeec 	.word	0xffffdeec
   125c4:	4c957f2d 	.word	0x4c957f2d
   125c8:	5851f42d 	.word	0x5851f42d

000125cc <setbuf>:
   125cc:	424a      	negs	r2, r1
   125ce:	414a      	adcs	r2, r1
   125d0:	2380      	movs	r3, #128	; 0x80
   125d2:	b510      	push	{r4, lr}
   125d4:	0052      	lsls	r2, r2, #1
   125d6:	00db      	lsls	r3, r3, #3
   125d8:	f000 f802 	bl	125e0 <setvbuf>
   125dc:	bd10      	pop	{r4, pc}
   125de:	Address 0x000125de is out of bounds.


000125e0 <setvbuf>:
   125e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   125e2:	001d      	movs	r5, r3
   125e4:	4b4f      	ldr	r3, [pc, #316]	; (12724 <setvbuf+0x144>)
   125e6:	b085      	sub	sp, #20
   125e8:	681e      	ldr	r6, [r3, #0]
   125ea:	0004      	movs	r4, r0
   125ec:	000f      	movs	r7, r1
   125ee:	9200      	str	r2, [sp, #0]
   125f0:	2e00      	cmp	r6, #0
   125f2:	d005      	beq.n	12600 <setvbuf+0x20>
   125f4:	69b3      	ldr	r3, [r6, #24]
   125f6:	2b00      	cmp	r3, #0
   125f8:	d102      	bne.n	12600 <setvbuf+0x20>
   125fa:	0030      	movs	r0, r6
   125fc:	f000 fa72 	bl	12ae4 <__sinit>
   12600:	4b49      	ldr	r3, [pc, #292]	; (12728 <setvbuf+0x148>)
   12602:	429c      	cmp	r4, r3
   12604:	d150      	bne.n	126a8 <setvbuf+0xc8>
   12606:	6874      	ldr	r4, [r6, #4]
   12608:	9b00      	ldr	r3, [sp, #0]
   1260a:	2b02      	cmp	r3, #2
   1260c:	d005      	beq.n	1261a <setvbuf+0x3a>
   1260e:	2b01      	cmp	r3, #1
   12610:	d900      	bls.n	12614 <setvbuf+0x34>
   12612:	e084      	b.n	1271e <setvbuf+0x13e>
   12614:	2d00      	cmp	r5, #0
   12616:	da00      	bge.n	1261a <setvbuf+0x3a>
   12618:	e081      	b.n	1271e <setvbuf+0x13e>
   1261a:	0021      	movs	r1, r4
   1261c:	0030      	movs	r0, r6
   1261e:	f000 f9f3 	bl	12a08 <_fflush_r>
   12622:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12624:	2900      	cmp	r1, #0
   12626:	d008      	beq.n	1263a <setvbuf+0x5a>
   12628:	0023      	movs	r3, r4
   1262a:	3344      	adds	r3, #68	; 0x44
   1262c:	4299      	cmp	r1, r3
   1262e:	d002      	beq.n	12636 <setvbuf+0x56>
   12630:	0030      	movs	r0, r6
   12632:	f000 fb6f 	bl	12d14 <_free_r>
   12636:	2300      	movs	r3, #0
   12638:	6363      	str	r3, [r4, #52]	; 0x34
   1263a:	2300      	movs	r3, #0
   1263c:	61a3      	str	r3, [r4, #24]
   1263e:	6063      	str	r3, [r4, #4]
   12640:	89a3      	ldrh	r3, [r4, #12]
   12642:	061b      	lsls	r3, r3, #24
   12644:	d503      	bpl.n	1264e <setvbuf+0x6e>
   12646:	6921      	ldr	r1, [r4, #16]
   12648:	0030      	movs	r0, r6
   1264a:	f000 fb63 	bl	12d14 <_free_r>
   1264e:	89a3      	ldrh	r3, [r4, #12]
   12650:	4a36      	ldr	r2, [pc, #216]	; (1272c <setvbuf+0x14c>)
   12652:	4013      	ands	r3, r2
   12654:	81a3      	strh	r3, [r4, #12]
   12656:	9b00      	ldr	r3, [sp, #0]
   12658:	2b02      	cmp	r3, #2
   1265a:	d05a      	beq.n	12712 <setvbuf+0x132>
   1265c:	ab03      	add	r3, sp, #12
   1265e:	aa02      	add	r2, sp, #8
   12660:	0021      	movs	r1, r4
   12662:	0030      	movs	r0, r6
   12664:	f000 fad4 	bl	12c10 <__swhatbuf_r>
   12668:	89a3      	ldrh	r3, [r4, #12]
   1266a:	4318      	orrs	r0, r3
   1266c:	81a0      	strh	r0, [r4, #12]
   1266e:	2d00      	cmp	r5, #0
   12670:	d124      	bne.n	126bc <setvbuf+0xdc>
   12672:	9d02      	ldr	r5, [sp, #8]
   12674:	0028      	movs	r0, r5
   12676:	f000 fb37 	bl	12ce8 <malloc>
   1267a:	9501      	str	r5, [sp, #4]
   1267c:	1e07      	subs	r7, r0, #0
   1267e:	d142      	bne.n	12706 <setvbuf+0x126>
   12680:	9b02      	ldr	r3, [sp, #8]
   12682:	9301      	str	r3, [sp, #4]
   12684:	42ab      	cmp	r3, r5
   12686:	d139      	bne.n	126fc <setvbuf+0x11c>
   12688:	2001      	movs	r0, #1
   1268a:	4240      	negs	r0, r0
   1268c:	2302      	movs	r3, #2
   1268e:	89a2      	ldrh	r2, [r4, #12]
   12690:	4313      	orrs	r3, r2
   12692:	81a3      	strh	r3, [r4, #12]
   12694:	2300      	movs	r3, #0
   12696:	60a3      	str	r3, [r4, #8]
   12698:	0023      	movs	r3, r4
   1269a:	3347      	adds	r3, #71	; 0x47
   1269c:	6023      	str	r3, [r4, #0]
   1269e:	6123      	str	r3, [r4, #16]
   126a0:	2301      	movs	r3, #1
   126a2:	6163      	str	r3, [r4, #20]
   126a4:	b005      	add	sp, #20
   126a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   126a8:	4b21      	ldr	r3, [pc, #132]	; (12730 <setvbuf+0x150>)
   126aa:	429c      	cmp	r4, r3
   126ac:	d101      	bne.n	126b2 <setvbuf+0xd2>
   126ae:	68b4      	ldr	r4, [r6, #8]
   126b0:	e7aa      	b.n	12608 <setvbuf+0x28>
   126b2:	4b20      	ldr	r3, [pc, #128]	; (12734 <setvbuf+0x154>)
   126b4:	429c      	cmp	r4, r3
   126b6:	d1a7      	bne.n	12608 <setvbuf+0x28>
   126b8:	68f4      	ldr	r4, [r6, #12]
   126ba:	e7a5      	b.n	12608 <setvbuf+0x28>
   126bc:	2f00      	cmp	r7, #0
   126be:	d0d9      	beq.n	12674 <setvbuf+0x94>
   126c0:	69b3      	ldr	r3, [r6, #24]
   126c2:	2b00      	cmp	r3, #0
   126c4:	d102      	bne.n	126cc <setvbuf+0xec>
   126c6:	0030      	movs	r0, r6
   126c8:	f000 fa0c 	bl	12ae4 <__sinit>
   126cc:	9b00      	ldr	r3, [sp, #0]
   126ce:	2b01      	cmp	r3, #1
   126d0:	d103      	bne.n	126da <setvbuf+0xfa>
   126d2:	89a3      	ldrh	r3, [r4, #12]
   126d4:	9a00      	ldr	r2, [sp, #0]
   126d6:	431a      	orrs	r2, r3
   126d8:	81a2      	strh	r2, [r4, #12]
   126da:	2008      	movs	r0, #8
   126dc:	89a3      	ldrh	r3, [r4, #12]
   126de:	6027      	str	r7, [r4, #0]
   126e0:	6127      	str	r7, [r4, #16]
   126e2:	6165      	str	r5, [r4, #20]
   126e4:	4018      	ands	r0, r3
   126e6:	d018      	beq.n	1271a <setvbuf+0x13a>
   126e8:	2001      	movs	r0, #1
   126ea:	4018      	ands	r0, r3
   126ec:	2300      	movs	r3, #0
   126ee:	4298      	cmp	r0, r3
   126f0:	d011      	beq.n	12716 <setvbuf+0x136>
   126f2:	426d      	negs	r5, r5
   126f4:	60a3      	str	r3, [r4, #8]
   126f6:	61a5      	str	r5, [r4, #24]
   126f8:	0018      	movs	r0, r3
   126fa:	e7d3      	b.n	126a4 <setvbuf+0xc4>
   126fc:	9801      	ldr	r0, [sp, #4]
   126fe:	f000 faf3 	bl	12ce8 <malloc>
   12702:	1e07      	subs	r7, r0, #0
   12704:	d0c0      	beq.n	12688 <setvbuf+0xa8>
   12706:	2380      	movs	r3, #128	; 0x80
   12708:	89a2      	ldrh	r2, [r4, #12]
   1270a:	9d01      	ldr	r5, [sp, #4]
   1270c:	4313      	orrs	r3, r2
   1270e:	81a3      	strh	r3, [r4, #12]
   12710:	e7d6      	b.n	126c0 <setvbuf+0xe0>
   12712:	2000      	movs	r0, #0
   12714:	e7ba      	b.n	1268c <setvbuf+0xac>
   12716:	60a5      	str	r5, [r4, #8]
   12718:	e7c4      	b.n	126a4 <setvbuf+0xc4>
   1271a:	60a0      	str	r0, [r4, #8]
   1271c:	e7c2      	b.n	126a4 <setvbuf+0xc4>
   1271e:	2001      	movs	r0, #1
   12720:	4240      	negs	r0, r0
   12722:	e7bf      	b.n	126a4 <setvbuf+0xc4>
   12724:	20000034 	.word	0x20000034
   12728:	00013f40 	.word	0x00013f40
   1272c:	fffff35c 	.word	0xfffff35c
   12730:	00013f60 	.word	0x00013f60
   12734:	00013f20 	.word	0x00013f20

00012738 <strcmp>:
   12738:	7802      	ldrb	r2, [r0, #0]
   1273a:	780b      	ldrb	r3, [r1, #0]
   1273c:	2a00      	cmp	r2, #0
   1273e:	d003      	beq.n	12748 <strcmp+0x10>
   12740:	3001      	adds	r0, #1
   12742:	3101      	adds	r1, #1
   12744:	429a      	cmp	r2, r3
   12746:	d0f7      	beq.n	12738 <strcmp>
   12748:	1ad0      	subs	r0, r2, r3
   1274a:	4770      	bx	lr

0001274c <__swbuf_r>:
   1274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1274e:	0005      	movs	r5, r0
   12750:	000e      	movs	r6, r1
   12752:	0014      	movs	r4, r2
   12754:	2800      	cmp	r0, #0
   12756:	d004      	beq.n	12762 <__swbuf_r+0x16>
   12758:	6983      	ldr	r3, [r0, #24]
   1275a:	2b00      	cmp	r3, #0
   1275c:	d101      	bne.n	12762 <__swbuf_r+0x16>
   1275e:	f000 f9c1 	bl	12ae4 <__sinit>
   12762:	4b22      	ldr	r3, [pc, #136]	; (127ec <__swbuf_r+0xa0>)
   12764:	429c      	cmp	r4, r3
   12766:	d12d      	bne.n	127c4 <__swbuf_r+0x78>
   12768:	686c      	ldr	r4, [r5, #4]
   1276a:	69a3      	ldr	r3, [r4, #24]
   1276c:	60a3      	str	r3, [r4, #8]
   1276e:	89a3      	ldrh	r3, [r4, #12]
   12770:	071b      	lsls	r3, r3, #28
   12772:	d531      	bpl.n	127d8 <__swbuf_r+0x8c>
   12774:	6923      	ldr	r3, [r4, #16]
   12776:	2b00      	cmp	r3, #0
   12778:	d02e      	beq.n	127d8 <__swbuf_r+0x8c>
   1277a:	6823      	ldr	r3, [r4, #0]
   1277c:	6922      	ldr	r2, [r4, #16]
   1277e:	b2f7      	uxtb	r7, r6
   12780:	1a98      	subs	r0, r3, r2
   12782:	6963      	ldr	r3, [r4, #20]
   12784:	b2f6      	uxtb	r6, r6
   12786:	4298      	cmp	r0, r3
   12788:	db05      	blt.n	12796 <__swbuf_r+0x4a>
   1278a:	0021      	movs	r1, r4
   1278c:	0028      	movs	r0, r5
   1278e:	f000 f93b 	bl	12a08 <_fflush_r>
   12792:	2800      	cmp	r0, #0
   12794:	d126      	bne.n	127e4 <__swbuf_r+0x98>
   12796:	68a3      	ldr	r3, [r4, #8]
   12798:	3001      	adds	r0, #1
   1279a:	3b01      	subs	r3, #1
   1279c:	60a3      	str	r3, [r4, #8]
   1279e:	6823      	ldr	r3, [r4, #0]
   127a0:	1c5a      	adds	r2, r3, #1
   127a2:	6022      	str	r2, [r4, #0]
   127a4:	701f      	strb	r7, [r3, #0]
   127a6:	6963      	ldr	r3, [r4, #20]
   127a8:	4298      	cmp	r0, r3
   127aa:	d004      	beq.n	127b6 <__swbuf_r+0x6a>
   127ac:	89a3      	ldrh	r3, [r4, #12]
   127ae:	07db      	lsls	r3, r3, #31
   127b0:	d51a      	bpl.n	127e8 <__swbuf_r+0x9c>
   127b2:	2e0a      	cmp	r6, #10
   127b4:	d118      	bne.n	127e8 <__swbuf_r+0x9c>
   127b6:	0021      	movs	r1, r4
   127b8:	0028      	movs	r0, r5
   127ba:	f000 f925 	bl	12a08 <_fflush_r>
   127be:	2800      	cmp	r0, #0
   127c0:	d012      	beq.n	127e8 <__swbuf_r+0x9c>
   127c2:	e00f      	b.n	127e4 <__swbuf_r+0x98>
   127c4:	4b0a      	ldr	r3, [pc, #40]	; (127f0 <__swbuf_r+0xa4>)
   127c6:	429c      	cmp	r4, r3
   127c8:	d101      	bne.n	127ce <__swbuf_r+0x82>
   127ca:	68ac      	ldr	r4, [r5, #8]
   127cc:	e7cd      	b.n	1276a <__swbuf_r+0x1e>
   127ce:	4b09      	ldr	r3, [pc, #36]	; (127f4 <__swbuf_r+0xa8>)
   127d0:	429c      	cmp	r4, r3
   127d2:	d1ca      	bne.n	1276a <__swbuf_r+0x1e>
   127d4:	68ec      	ldr	r4, [r5, #12]
   127d6:	e7c8      	b.n	1276a <__swbuf_r+0x1e>
   127d8:	0021      	movs	r1, r4
   127da:	0028      	movs	r0, r5
   127dc:	f000 f80c 	bl	127f8 <__swsetup_r>
   127e0:	2800      	cmp	r0, #0
   127e2:	d0ca      	beq.n	1277a <__swbuf_r+0x2e>
   127e4:	2601      	movs	r6, #1
   127e6:	4276      	negs	r6, r6
   127e8:	0030      	movs	r0, r6
   127ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   127ec:	00013f40 	.word	0x00013f40
   127f0:	00013f60 	.word	0x00013f60
   127f4:	00013f20 	.word	0x00013f20

000127f8 <__swsetup_r>:
   127f8:	4b36      	ldr	r3, [pc, #216]	; (128d4 <__swsetup_r+0xdc>)
   127fa:	b570      	push	{r4, r5, r6, lr}
   127fc:	681d      	ldr	r5, [r3, #0]
   127fe:	0006      	movs	r6, r0
   12800:	000c      	movs	r4, r1
   12802:	2d00      	cmp	r5, #0
   12804:	d005      	beq.n	12812 <__swsetup_r+0x1a>
   12806:	69ab      	ldr	r3, [r5, #24]
   12808:	2b00      	cmp	r3, #0
   1280a:	d102      	bne.n	12812 <__swsetup_r+0x1a>
   1280c:	0028      	movs	r0, r5
   1280e:	f000 f969 	bl	12ae4 <__sinit>
   12812:	4b31      	ldr	r3, [pc, #196]	; (128d8 <__swsetup_r+0xe0>)
   12814:	429c      	cmp	r4, r3
   12816:	d10f      	bne.n	12838 <__swsetup_r+0x40>
   12818:	686c      	ldr	r4, [r5, #4]
   1281a:	230c      	movs	r3, #12
   1281c:	5ee2      	ldrsh	r2, [r4, r3]
   1281e:	b293      	uxth	r3, r2
   12820:	0719      	lsls	r1, r3, #28
   12822:	d42d      	bmi.n	12880 <__swsetup_r+0x88>
   12824:	06d9      	lsls	r1, r3, #27
   12826:	d411      	bmi.n	1284c <__swsetup_r+0x54>
   12828:	2309      	movs	r3, #9
   1282a:	2001      	movs	r0, #1
   1282c:	6033      	str	r3, [r6, #0]
   1282e:	3337      	adds	r3, #55	; 0x37
   12830:	4313      	orrs	r3, r2
   12832:	81a3      	strh	r3, [r4, #12]
   12834:	4240      	negs	r0, r0
   12836:	bd70      	pop	{r4, r5, r6, pc}
   12838:	4b28      	ldr	r3, [pc, #160]	; (128dc <__swsetup_r+0xe4>)
   1283a:	429c      	cmp	r4, r3
   1283c:	d101      	bne.n	12842 <__swsetup_r+0x4a>
   1283e:	68ac      	ldr	r4, [r5, #8]
   12840:	e7eb      	b.n	1281a <__swsetup_r+0x22>
   12842:	4b27      	ldr	r3, [pc, #156]	; (128e0 <__swsetup_r+0xe8>)
   12844:	429c      	cmp	r4, r3
   12846:	d1e8      	bne.n	1281a <__swsetup_r+0x22>
   12848:	68ec      	ldr	r4, [r5, #12]
   1284a:	e7e6      	b.n	1281a <__swsetup_r+0x22>
   1284c:	075b      	lsls	r3, r3, #29
   1284e:	d513      	bpl.n	12878 <__swsetup_r+0x80>
   12850:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12852:	2900      	cmp	r1, #0
   12854:	d008      	beq.n	12868 <__swsetup_r+0x70>
   12856:	0023      	movs	r3, r4
   12858:	3344      	adds	r3, #68	; 0x44
   1285a:	4299      	cmp	r1, r3
   1285c:	d002      	beq.n	12864 <__swsetup_r+0x6c>
   1285e:	0030      	movs	r0, r6
   12860:	f000 fa58 	bl	12d14 <_free_r>
   12864:	2300      	movs	r3, #0
   12866:	6363      	str	r3, [r4, #52]	; 0x34
   12868:	2224      	movs	r2, #36	; 0x24
   1286a:	89a3      	ldrh	r3, [r4, #12]
   1286c:	4393      	bics	r3, r2
   1286e:	81a3      	strh	r3, [r4, #12]
   12870:	2300      	movs	r3, #0
   12872:	6063      	str	r3, [r4, #4]
   12874:	6923      	ldr	r3, [r4, #16]
   12876:	6023      	str	r3, [r4, #0]
   12878:	2308      	movs	r3, #8
   1287a:	89a2      	ldrh	r2, [r4, #12]
   1287c:	4313      	orrs	r3, r2
   1287e:	81a3      	strh	r3, [r4, #12]
   12880:	6923      	ldr	r3, [r4, #16]
   12882:	2b00      	cmp	r3, #0
   12884:	d10b      	bne.n	1289e <__swsetup_r+0xa6>
   12886:	21a0      	movs	r1, #160	; 0xa0
   12888:	2280      	movs	r2, #128	; 0x80
   1288a:	89a3      	ldrh	r3, [r4, #12]
   1288c:	0089      	lsls	r1, r1, #2
   1288e:	0092      	lsls	r2, r2, #2
   12890:	400b      	ands	r3, r1
   12892:	4293      	cmp	r3, r2
   12894:	d003      	beq.n	1289e <__swsetup_r+0xa6>
   12896:	0021      	movs	r1, r4
   12898:	0030      	movs	r0, r6
   1289a:	f000 f9e1 	bl	12c60 <__smakebuf_r>
   1289e:	2301      	movs	r3, #1
   128a0:	89a2      	ldrh	r2, [r4, #12]
   128a2:	4013      	ands	r3, r2
   128a4:	d011      	beq.n	128ca <__swsetup_r+0xd2>
   128a6:	2300      	movs	r3, #0
   128a8:	60a3      	str	r3, [r4, #8]
   128aa:	6963      	ldr	r3, [r4, #20]
   128ac:	425b      	negs	r3, r3
   128ae:	61a3      	str	r3, [r4, #24]
   128b0:	2000      	movs	r0, #0
   128b2:	6923      	ldr	r3, [r4, #16]
   128b4:	4283      	cmp	r3, r0
   128b6:	d1be      	bne.n	12836 <__swsetup_r+0x3e>
   128b8:	230c      	movs	r3, #12
   128ba:	5ee2      	ldrsh	r2, [r4, r3]
   128bc:	0613      	lsls	r3, r2, #24
   128be:	d5ba      	bpl.n	12836 <__swsetup_r+0x3e>
   128c0:	2340      	movs	r3, #64	; 0x40
   128c2:	4313      	orrs	r3, r2
   128c4:	81a3      	strh	r3, [r4, #12]
   128c6:	3801      	subs	r0, #1
   128c8:	e7b5      	b.n	12836 <__swsetup_r+0x3e>
   128ca:	0792      	lsls	r2, r2, #30
   128cc:	d400      	bmi.n	128d0 <__swsetup_r+0xd8>
   128ce:	6963      	ldr	r3, [r4, #20]
   128d0:	60a3      	str	r3, [r4, #8]
   128d2:	e7ed      	b.n	128b0 <__swsetup_r+0xb8>
   128d4:	20000034 	.word	0x20000034
   128d8:	00013f40 	.word	0x00013f40
   128dc:	00013f60 	.word	0x00013f60
   128e0:	00013f20 	.word	0x00013f20

000128e4 <abort>:
   128e4:	b510      	push	{r4, lr}
   128e6:	2006      	movs	r0, #6
   128e8:	f000 faf8 	bl	12edc <raise>
   128ec:	2001      	movs	r0, #1
   128ee:	f7f6 f9ef 	bl	8cd0 <_exit>
   128f2:	Address 0x000128f2 is out of bounds.


000128f4 <__sflush_r>:
   128f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   128f6:	898a      	ldrh	r2, [r1, #12]
   128f8:	0005      	movs	r5, r0
   128fa:	000c      	movs	r4, r1
   128fc:	0713      	lsls	r3, r2, #28
   128fe:	d460      	bmi.n	129c2 <__sflush_r+0xce>
   12900:	684b      	ldr	r3, [r1, #4]
   12902:	2b00      	cmp	r3, #0
   12904:	dc04      	bgt.n	12910 <__sflush_r+0x1c>
   12906:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   12908:	2b00      	cmp	r3, #0
   1290a:	dc01      	bgt.n	12910 <__sflush_r+0x1c>
   1290c:	2000      	movs	r0, #0
   1290e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12910:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   12912:	2f00      	cmp	r7, #0
   12914:	d0fa      	beq.n	1290c <__sflush_r+0x18>
   12916:	2300      	movs	r3, #0
   12918:	682e      	ldr	r6, [r5, #0]
   1291a:	602b      	str	r3, [r5, #0]
   1291c:	2380      	movs	r3, #128	; 0x80
   1291e:	015b      	lsls	r3, r3, #5
   12920:	401a      	ands	r2, r3
   12922:	d034      	beq.n	1298e <__sflush_r+0x9a>
   12924:	6d60      	ldr	r0, [r4, #84]	; 0x54
   12926:	89a3      	ldrh	r3, [r4, #12]
   12928:	075b      	lsls	r3, r3, #29
   1292a:	d506      	bpl.n	1293a <__sflush_r+0x46>
   1292c:	6863      	ldr	r3, [r4, #4]
   1292e:	1ac0      	subs	r0, r0, r3
   12930:	6b63      	ldr	r3, [r4, #52]	; 0x34
   12932:	2b00      	cmp	r3, #0
   12934:	d001      	beq.n	1293a <__sflush_r+0x46>
   12936:	6c23      	ldr	r3, [r4, #64]	; 0x40
   12938:	1ac0      	subs	r0, r0, r3
   1293a:	0002      	movs	r2, r0
   1293c:	6a21      	ldr	r1, [r4, #32]
   1293e:	2300      	movs	r3, #0
   12940:	0028      	movs	r0, r5
   12942:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   12944:	47b8      	blx	r7
   12946:	89a1      	ldrh	r1, [r4, #12]
   12948:	1c43      	adds	r3, r0, #1
   1294a:	d106      	bne.n	1295a <__sflush_r+0x66>
   1294c:	682b      	ldr	r3, [r5, #0]
   1294e:	2b1d      	cmp	r3, #29
   12950:	d831      	bhi.n	129b6 <__sflush_r+0xc2>
   12952:	4a2c      	ldr	r2, [pc, #176]	; (12a04 <__sflush_r+0x110>)
   12954:	40da      	lsrs	r2, r3
   12956:	07d3      	lsls	r3, r2, #31
   12958:	d52d      	bpl.n	129b6 <__sflush_r+0xc2>
   1295a:	2300      	movs	r3, #0
   1295c:	6063      	str	r3, [r4, #4]
   1295e:	6923      	ldr	r3, [r4, #16]
   12960:	6023      	str	r3, [r4, #0]
   12962:	04cb      	lsls	r3, r1, #19
   12964:	d505      	bpl.n	12972 <__sflush_r+0x7e>
   12966:	1c43      	adds	r3, r0, #1
   12968:	d102      	bne.n	12970 <__sflush_r+0x7c>
   1296a:	682b      	ldr	r3, [r5, #0]
   1296c:	2b00      	cmp	r3, #0
   1296e:	d100      	bne.n	12972 <__sflush_r+0x7e>
   12970:	6560      	str	r0, [r4, #84]	; 0x54
   12972:	6b61      	ldr	r1, [r4, #52]	; 0x34
   12974:	602e      	str	r6, [r5, #0]
   12976:	2900      	cmp	r1, #0
   12978:	d0c8      	beq.n	1290c <__sflush_r+0x18>
   1297a:	0023      	movs	r3, r4
   1297c:	3344      	adds	r3, #68	; 0x44
   1297e:	4299      	cmp	r1, r3
   12980:	d002      	beq.n	12988 <__sflush_r+0x94>
   12982:	0028      	movs	r0, r5
   12984:	f000 f9c6 	bl	12d14 <_free_r>
   12988:	2000      	movs	r0, #0
   1298a:	6360      	str	r0, [r4, #52]	; 0x34
   1298c:	e7bf      	b.n	1290e <__sflush_r+0x1a>
   1298e:	2301      	movs	r3, #1
   12990:	6a21      	ldr	r1, [r4, #32]
   12992:	0028      	movs	r0, r5
   12994:	47b8      	blx	r7
   12996:	1c43      	adds	r3, r0, #1
   12998:	d1c5      	bne.n	12926 <__sflush_r+0x32>
   1299a:	682b      	ldr	r3, [r5, #0]
   1299c:	2b00      	cmp	r3, #0
   1299e:	d0c2      	beq.n	12926 <__sflush_r+0x32>
   129a0:	2b1d      	cmp	r3, #29
   129a2:	d001      	beq.n	129a8 <__sflush_r+0xb4>
   129a4:	2b16      	cmp	r3, #22
   129a6:	d101      	bne.n	129ac <__sflush_r+0xb8>
   129a8:	602e      	str	r6, [r5, #0]
   129aa:	e7af      	b.n	1290c <__sflush_r+0x18>
   129ac:	2340      	movs	r3, #64	; 0x40
   129ae:	89a2      	ldrh	r2, [r4, #12]
   129b0:	4313      	orrs	r3, r2
   129b2:	81a3      	strh	r3, [r4, #12]
   129b4:	e7ab      	b.n	1290e <__sflush_r+0x1a>
   129b6:	2340      	movs	r3, #64	; 0x40
   129b8:	430b      	orrs	r3, r1
   129ba:	2001      	movs	r0, #1
   129bc:	81a3      	strh	r3, [r4, #12]
   129be:	4240      	negs	r0, r0
   129c0:	e7a5      	b.n	1290e <__sflush_r+0x1a>
   129c2:	690f      	ldr	r7, [r1, #16]
   129c4:	2f00      	cmp	r7, #0
   129c6:	d0a1      	beq.n	1290c <__sflush_r+0x18>
   129c8:	680b      	ldr	r3, [r1, #0]
   129ca:	600f      	str	r7, [r1, #0]
   129cc:	1bdb      	subs	r3, r3, r7
   129ce:	9301      	str	r3, [sp, #4]
   129d0:	2300      	movs	r3, #0
   129d2:	0792      	lsls	r2, r2, #30
   129d4:	d100      	bne.n	129d8 <__sflush_r+0xe4>
   129d6:	694b      	ldr	r3, [r1, #20]
   129d8:	60a3      	str	r3, [r4, #8]
   129da:	9b01      	ldr	r3, [sp, #4]
   129dc:	2b00      	cmp	r3, #0
   129de:	dc00      	bgt.n	129e2 <__sflush_r+0xee>
   129e0:	e794      	b.n	1290c <__sflush_r+0x18>
   129e2:	9b01      	ldr	r3, [sp, #4]
   129e4:	003a      	movs	r2, r7
   129e6:	6a21      	ldr	r1, [r4, #32]
   129e8:	0028      	movs	r0, r5
   129ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   129ec:	47b0      	blx	r6
   129ee:	2800      	cmp	r0, #0
   129f0:	dc03      	bgt.n	129fa <__sflush_r+0x106>
   129f2:	2340      	movs	r3, #64	; 0x40
   129f4:	89a2      	ldrh	r2, [r4, #12]
   129f6:	4313      	orrs	r3, r2
   129f8:	e7df      	b.n	129ba <__sflush_r+0xc6>
   129fa:	9b01      	ldr	r3, [sp, #4]
   129fc:	183f      	adds	r7, r7, r0
   129fe:	1a1b      	subs	r3, r3, r0
   12a00:	9301      	str	r3, [sp, #4]
   12a02:	e7ea      	b.n	129da <__sflush_r+0xe6>
   12a04:	20400001 	.word	0x20400001

00012a08 <_fflush_r>:
   12a08:	690b      	ldr	r3, [r1, #16]
   12a0a:	b570      	push	{r4, r5, r6, lr}
   12a0c:	0005      	movs	r5, r0
   12a0e:	000c      	movs	r4, r1
   12a10:	2b00      	cmp	r3, #0
   12a12:	d101      	bne.n	12a18 <_fflush_r+0x10>
   12a14:	2000      	movs	r0, #0
   12a16:	bd70      	pop	{r4, r5, r6, pc}
   12a18:	2800      	cmp	r0, #0
   12a1a:	d004      	beq.n	12a26 <_fflush_r+0x1e>
   12a1c:	6983      	ldr	r3, [r0, #24]
   12a1e:	2b00      	cmp	r3, #0
   12a20:	d101      	bne.n	12a26 <_fflush_r+0x1e>
   12a22:	f000 f85f 	bl	12ae4 <__sinit>
   12a26:	4b0b      	ldr	r3, [pc, #44]	; (12a54 <_fflush_r+0x4c>)
   12a28:	429c      	cmp	r4, r3
   12a2a:	d109      	bne.n	12a40 <_fflush_r+0x38>
   12a2c:	686c      	ldr	r4, [r5, #4]
   12a2e:	220c      	movs	r2, #12
   12a30:	5ea3      	ldrsh	r3, [r4, r2]
   12a32:	2b00      	cmp	r3, #0
   12a34:	d0ee      	beq.n	12a14 <_fflush_r+0xc>
   12a36:	0021      	movs	r1, r4
   12a38:	0028      	movs	r0, r5
   12a3a:	f7ff ff5b 	bl	128f4 <__sflush_r>
   12a3e:	e7ea      	b.n	12a16 <_fflush_r+0xe>
   12a40:	4b05      	ldr	r3, [pc, #20]	; (12a58 <_fflush_r+0x50>)
   12a42:	429c      	cmp	r4, r3
   12a44:	d101      	bne.n	12a4a <_fflush_r+0x42>
   12a46:	68ac      	ldr	r4, [r5, #8]
   12a48:	e7f1      	b.n	12a2e <_fflush_r+0x26>
   12a4a:	4b04      	ldr	r3, [pc, #16]	; (12a5c <_fflush_r+0x54>)
   12a4c:	429c      	cmp	r4, r3
   12a4e:	d1ee      	bne.n	12a2e <_fflush_r+0x26>
   12a50:	68ec      	ldr	r4, [r5, #12]
   12a52:	e7ec      	b.n	12a2e <_fflush_r+0x26>
   12a54:	00013f40 	.word	0x00013f40
   12a58:	00013f60 	.word	0x00013f60
   12a5c:	00013f20 	.word	0x00013f20

00012a60 <_cleanup_r>:
   12a60:	b510      	push	{r4, lr}
   12a62:	4902      	ldr	r1, [pc, #8]	; (12a6c <_cleanup_r+0xc>)
   12a64:	f000 f8b2 	bl	12bcc <_fwalk_reent>
   12a68:	bd10      	pop	{r4, pc}
   12a6a:	46c0      	nop			; (mov r8, r8)
   12a6c:	00012a09 	.word	0x00012a09

00012a70 <std.isra.0>:
   12a70:	2300      	movs	r3, #0
   12a72:	b510      	push	{r4, lr}
   12a74:	0004      	movs	r4, r0
   12a76:	6003      	str	r3, [r0, #0]
   12a78:	6043      	str	r3, [r0, #4]
   12a7a:	6083      	str	r3, [r0, #8]
   12a7c:	8181      	strh	r1, [r0, #12]
   12a7e:	6643      	str	r3, [r0, #100]	; 0x64
   12a80:	81c2      	strh	r2, [r0, #14]
   12a82:	6103      	str	r3, [r0, #16]
   12a84:	6143      	str	r3, [r0, #20]
   12a86:	6183      	str	r3, [r0, #24]
   12a88:	0019      	movs	r1, r3
   12a8a:	2208      	movs	r2, #8
   12a8c:	305c      	adds	r0, #92	; 0x5c
   12a8e:	f7ff f9db 	bl	11e48 <memset>
   12a92:	4b05      	ldr	r3, [pc, #20]	; (12aa8 <std.isra.0+0x38>)
   12a94:	6224      	str	r4, [r4, #32]
   12a96:	6263      	str	r3, [r4, #36]	; 0x24
   12a98:	4b04      	ldr	r3, [pc, #16]	; (12aac <std.isra.0+0x3c>)
   12a9a:	62a3      	str	r3, [r4, #40]	; 0x28
   12a9c:	4b04      	ldr	r3, [pc, #16]	; (12ab0 <std.isra.0+0x40>)
   12a9e:	62e3      	str	r3, [r4, #44]	; 0x2c
   12aa0:	4b04      	ldr	r3, [pc, #16]	; (12ab4 <std.isra.0+0x44>)
   12aa2:	6323      	str	r3, [r4, #48]	; 0x30
   12aa4:	bd10      	pop	{r4, pc}
   12aa6:	46c0      	nop			; (mov r8, r8)
   12aa8:	00012f1d 	.word	0x00012f1d
   12aac:	00012f45 	.word	0x00012f45
   12ab0:	00012f7d 	.word	0x00012f7d
   12ab4:	00012fa9 	.word	0x00012fa9

00012ab8 <__sfmoreglue>:
   12ab8:	b570      	push	{r4, r5, r6, lr}
   12aba:	2568      	movs	r5, #104	; 0x68
   12abc:	1e4a      	subs	r2, r1, #1
   12abe:	4355      	muls	r5, r2
   12ac0:	000e      	movs	r6, r1
   12ac2:	0029      	movs	r1, r5
   12ac4:	3174      	adds	r1, #116	; 0x74
   12ac6:	f000 f96f 	bl	12da8 <_malloc_r>
   12aca:	1e04      	subs	r4, r0, #0
   12acc:	d008      	beq.n	12ae0 <__sfmoreglue+0x28>
   12ace:	2100      	movs	r1, #0
   12ad0:	002a      	movs	r2, r5
   12ad2:	6001      	str	r1, [r0, #0]
   12ad4:	6046      	str	r6, [r0, #4]
   12ad6:	300c      	adds	r0, #12
   12ad8:	60a0      	str	r0, [r4, #8]
   12ada:	3268      	adds	r2, #104	; 0x68
   12adc:	f7ff f9b4 	bl	11e48 <memset>
   12ae0:	0020      	movs	r0, r4
   12ae2:	bd70      	pop	{r4, r5, r6, pc}

00012ae4 <__sinit>:
   12ae4:	6983      	ldr	r3, [r0, #24]
   12ae6:	b513      	push	{r0, r1, r4, lr}
   12ae8:	0004      	movs	r4, r0
   12aea:	2b00      	cmp	r3, #0
   12aec:	d128      	bne.n	12b40 <__sinit+0x5c>
   12aee:	6483      	str	r3, [r0, #72]	; 0x48
   12af0:	64c3      	str	r3, [r0, #76]	; 0x4c
   12af2:	6503      	str	r3, [r0, #80]	; 0x50
   12af4:	4b13      	ldr	r3, [pc, #76]	; (12b44 <__sinit+0x60>)
   12af6:	4a14      	ldr	r2, [pc, #80]	; (12b48 <__sinit+0x64>)
   12af8:	681b      	ldr	r3, [r3, #0]
   12afa:	6282      	str	r2, [r0, #40]	; 0x28
   12afc:	9301      	str	r3, [sp, #4]
   12afe:	4298      	cmp	r0, r3
   12b00:	d101      	bne.n	12b06 <__sinit+0x22>
   12b02:	2301      	movs	r3, #1
   12b04:	6183      	str	r3, [r0, #24]
   12b06:	0020      	movs	r0, r4
   12b08:	f000 f820 	bl	12b4c <__sfp>
   12b0c:	6060      	str	r0, [r4, #4]
   12b0e:	0020      	movs	r0, r4
   12b10:	f000 f81c 	bl	12b4c <__sfp>
   12b14:	60a0      	str	r0, [r4, #8]
   12b16:	0020      	movs	r0, r4
   12b18:	f000 f818 	bl	12b4c <__sfp>
   12b1c:	2200      	movs	r2, #0
   12b1e:	60e0      	str	r0, [r4, #12]
   12b20:	2104      	movs	r1, #4
   12b22:	6860      	ldr	r0, [r4, #4]
   12b24:	f7ff ffa4 	bl	12a70 <std.isra.0>
   12b28:	2201      	movs	r2, #1
   12b2a:	2109      	movs	r1, #9
   12b2c:	68a0      	ldr	r0, [r4, #8]
   12b2e:	f7ff ff9f 	bl	12a70 <std.isra.0>
   12b32:	2202      	movs	r2, #2
   12b34:	2112      	movs	r1, #18
   12b36:	68e0      	ldr	r0, [r4, #12]
   12b38:	f7ff ff9a 	bl	12a70 <std.isra.0>
   12b3c:	2301      	movs	r3, #1
   12b3e:	61a3      	str	r3, [r4, #24]
   12b40:	bd13      	pop	{r0, r1, r4, pc}
   12b42:	46c0      	nop			; (mov r8, r8)
   12b44:	00013ee8 	.word	0x00013ee8
   12b48:	00012a61 	.word	0x00012a61

00012b4c <__sfp>:
   12b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b4e:	4b1e      	ldr	r3, [pc, #120]	; (12bc8 <__sfp+0x7c>)
   12b50:	0007      	movs	r7, r0
   12b52:	681e      	ldr	r6, [r3, #0]
   12b54:	69b3      	ldr	r3, [r6, #24]
   12b56:	2b00      	cmp	r3, #0
   12b58:	d102      	bne.n	12b60 <__sfp+0x14>
   12b5a:	0030      	movs	r0, r6
   12b5c:	f7ff ffc2 	bl	12ae4 <__sinit>
   12b60:	3648      	adds	r6, #72	; 0x48
   12b62:	68b4      	ldr	r4, [r6, #8]
   12b64:	6873      	ldr	r3, [r6, #4]
   12b66:	3b01      	subs	r3, #1
   12b68:	d504      	bpl.n	12b74 <__sfp+0x28>
   12b6a:	6833      	ldr	r3, [r6, #0]
   12b6c:	2b00      	cmp	r3, #0
   12b6e:	d007      	beq.n	12b80 <__sfp+0x34>
   12b70:	6836      	ldr	r6, [r6, #0]
   12b72:	e7f6      	b.n	12b62 <__sfp+0x16>
   12b74:	220c      	movs	r2, #12
   12b76:	5ea5      	ldrsh	r5, [r4, r2]
   12b78:	2d00      	cmp	r5, #0
   12b7a:	d00d      	beq.n	12b98 <__sfp+0x4c>
   12b7c:	3468      	adds	r4, #104	; 0x68
   12b7e:	e7f2      	b.n	12b66 <__sfp+0x1a>
   12b80:	2104      	movs	r1, #4
   12b82:	0038      	movs	r0, r7
   12b84:	f7ff ff98 	bl	12ab8 <__sfmoreglue>
   12b88:	6030      	str	r0, [r6, #0]
   12b8a:	2800      	cmp	r0, #0
   12b8c:	d1f0      	bne.n	12b70 <__sfp+0x24>
   12b8e:	230c      	movs	r3, #12
   12b90:	0004      	movs	r4, r0
   12b92:	603b      	str	r3, [r7, #0]
   12b94:	0020      	movs	r0, r4
   12b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b98:	2301      	movs	r3, #1
   12b9a:	0020      	movs	r0, r4
   12b9c:	425b      	negs	r3, r3
   12b9e:	81e3      	strh	r3, [r4, #14]
   12ba0:	3302      	adds	r3, #2
   12ba2:	81a3      	strh	r3, [r4, #12]
   12ba4:	6665      	str	r5, [r4, #100]	; 0x64
   12ba6:	6025      	str	r5, [r4, #0]
   12ba8:	60a5      	str	r5, [r4, #8]
   12baa:	6065      	str	r5, [r4, #4]
   12bac:	6125      	str	r5, [r4, #16]
   12bae:	6165      	str	r5, [r4, #20]
   12bb0:	61a5      	str	r5, [r4, #24]
   12bb2:	2208      	movs	r2, #8
   12bb4:	0029      	movs	r1, r5
   12bb6:	305c      	adds	r0, #92	; 0x5c
   12bb8:	f7ff f946 	bl	11e48 <memset>
   12bbc:	6365      	str	r5, [r4, #52]	; 0x34
   12bbe:	63a5      	str	r5, [r4, #56]	; 0x38
   12bc0:	64a5      	str	r5, [r4, #72]	; 0x48
   12bc2:	64e5      	str	r5, [r4, #76]	; 0x4c
   12bc4:	e7e6      	b.n	12b94 <__sfp+0x48>
   12bc6:	46c0      	nop			; (mov r8, r8)
   12bc8:	00013ee8 	.word	0x00013ee8

00012bcc <_fwalk_reent>:
   12bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12bce:	0004      	movs	r4, r0
   12bd0:	0007      	movs	r7, r0
   12bd2:	2600      	movs	r6, #0
   12bd4:	9101      	str	r1, [sp, #4]
   12bd6:	3448      	adds	r4, #72	; 0x48
   12bd8:	2c00      	cmp	r4, #0
   12bda:	d101      	bne.n	12be0 <_fwalk_reent+0x14>
   12bdc:	0030      	movs	r0, r6
   12bde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   12be0:	6863      	ldr	r3, [r4, #4]
   12be2:	68a5      	ldr	r5, [r4, #8]
   12be4:	9300      	str	r3, [sp, #0]
   12be6:	9b00      	ldr	r3, [sp, #0]
   12be8:	3b01      	subs	r3, #1
   12bea:	9300      	str	r3, [sp, #0]
   12bec:	d501      	bpl.n	12bf2 <_fwalk_reent+0x26>
   12bee:	6824      	ldr	r4, [r4, #0]
   12bf0:	e7f2      	b.n	12bd8 <_fwalk_reent+0xc>
   12bf2:	89ab      	ldrh	r3, [r5, #12]
   12bf4:	2b01      	cmp	r3, #1
   12bf6:	d908      	bls.n	12c0a <_fwalk_reent+0x3e>
   12bf8:	220e      	movs	r2, #14
   12bfa:	5eab      	ldrsh	r3, [r5, r2]
   12bfc:	3301      	adds	r3, #1
   12bfe:	d004      	beq.n	12c0a <_fwalk_reent+0x3e>
   12c00:	0029      	movs	r1, r5
   12c02:	0038      	movs	r0, r7
   12c04:	9b01      	ldr	r3, [sp, #4]
   12c06:	4798      	blx	r3
   12c08:	4306      	orrs	r6, r0
   12c0a:	3568      	adds	r5, #104	; 0x68
   12c0c:	e7eb      	b.n	12be6 <_fwalk_reent+0x1a>
   12c0e:	Address 0x00012c0e is out of bounds.


00012c10 <__swhatbuf_r>:
   12c10:	b570      	push	{r4, r5, r6, lr}
   12c12:	000e      	movs	r6, r1
   12c14:	001d      	movs	r5, r3
   12c16:	230e      	movs	r3, #14
   12c18:	5ec9      	ldrsh	r1, [r1, r3]
   12c1a:	b090      	sub	sp, #64	; 0x40
   12c1c:	0014      	movs	r4, r2
   12c1e:	2900      	cmp	r1, #0
   12c20:	da07      	bge.n	12c32 <__swhatbuf_r+0x22>
   12c22:	2300      	movs	r3, #0
   12c24:	602b      	str	r3, [r5, #0]
   12c26:	89b3      	ldrh	r3, [r6, #12]
   12c28:	061b      	lsls	r3, r3, #24
   12c2a:	d411      	bmi.n	12c50 <__swhatbuf_r+0x40>
   12c2c:	2380      	movs	r3, #128	; 0x80
   12c2e:	00db      	lsls	r3, r3, #3
   12c30:	e00f      	b.n	12c52 <__swhatbuf_r+0x42>
   12c32:	aa01      	add	r2, sp, #4
   12c34:	f000 f9e4 	bl	13000 <_fstat_r>
   12c38:	2800      	cmp	r0, #0
   12c3a:	dbf2      	blt.n	12c22 <__swhatbuf_r+0x12>
   12c3c:	22f0      	movs	r2, #240	; 0xf0
   12c3e:	9b02      	ldr	r3, [sp, #8]
   12c40:	0212      	lsls	r2, r2, #8
   12c42:	4013      	ands	r3, r2
   12c44:	4a05      	ldr	r2, [pc, #20]	; (12c5c <__swhatbuf_r+0x4c>)
   12c46:	189b      	adds	r3, r3, r2
   12c48:	425a      	negs	r2, r3
   12c4a:	4153      	adcs	r3, r2
   12c4c:	602b      	str	r3, [r5, #0]
   12c4e:	e7ed      	b.n	12c2c <__swhatbuf_r+0x1c>
   12c50:	2340      	movs	r3, #64	; 0x40
   12c52:	2000      	movs	r0, #0
   12c54:	6023      	str	r3, [r4, #0]
   12c56:	b010      	add	sp, #64	; 0x40
   12c58:	bd70      	pop	{r4, r5, r6, pc}
   12c5a:	46c0      	nop			; (mov r8, r8)
   12c5c:	ffffe000 	.word	0xffffe000

00012c60 <__smakebuf_r>:
   12c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12c62:	2602      	movs	r6, #2
   12c64:	898b      	ldrh	r3, [r1, #12]
   12c66:	0005      	movs	r5, r0
   12c68:	000c      	movs	r4, r1
   12c6a:	4233      	tst	r3, r6
   12c6c:	d006      	beq.n	12c7c <__smakebuf_r+0x1c>
   12c6e:	0023      	movs	r3, r4
   12c70:	3347      	adds	r3, #71	; 0x47
   12c72:	6023      	str	r3, [r4, #0]
   12c74:	6123      	str	r3, [r4, #16]
   12c76:	2301      	movs	r3, #1
   12c78:	6163      	str	r3, [r4, #20]
   12c7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   12c7c:	ab01      	add	r3, sp, #4
   12c7e:	466a      	mov	r2, sp
   12c80:	f7ff ffc6 	bl	12c10 <__swhatbuf_r>
   12c84:	9900      	ldr	r1, [sp, #0]
   12c86:	0007      	movs	r7, r0
   12c88:	0028      	movs	r0, r5
   12c8a:	f000 f88d 	bl	12da8 <_malloc_r>
   12c8e:	2800      	cmp	r0, #0
   12c90:	d108      	bne.n	12ca4 <__smakebuf_r+0x44>
   12c92:	220c      	movs	r2, #12
   12c94:	5ea3      	ldrsh	r3, [r4, r2]
   12c96:	059a      	lsls	r2, r3, #22
   12c98:	d4ef      	bmi.n	12c7a <__smakebuf_r+0x1a>
   12c9a:	2203      	movs	r2, #3
   12c9c:	4393      	bics	r3, r2
   12c9e:	431e      	orrs	r6, r3
   12ca0:	81a6      	strh	r6, [r4, #12]
   12ca2:	e7e4      	b.n	12c6e <__smakebuf_r+0xe>
   12ca4:	4b0f      	ldr	r3, [pc, #60]	; (12ce4 <__smakebuf_r+0x84>)
   12ca6:	62ab      	str	r3, [r5, #40]	; 0x28
   12ca8:	2380      	movs	r3, #128	; 0x80
   12caa:	89a2      	ldrh	r2, [r4, #12]
   12cac:	6020      	str	r0, [r4, #0]
   12cae:	4313      	orrs	r3, r2
   12cb0:	81a3      	strh	r3, [r4, #12]
   12cb2:	9b00      	ldr	r3, [sp, #0]
   12cb4:	6120      	str	r0, [r4, #16]
   12cb6:	6163      	str	r3, [r4, #20]
   12cb8:	9b01      	ldr	r3, [sp, #4]
   12cba:	2b00      	cmp	r3, #0
   12cbc:	d00d      	beq.n	12cda <__smakebuf_r+0x7a>
   12cbe:	230e      	movs	r3, #14
   12cc0:	5ee1      	ldrsh	r1, [r4, r3]
   12cc2:	0028      	movs	r0, r5
   12cc4:	f000 f9ae 	bl	13024 <_isatty_r>
   12cc8:	2800      	cmp	r0, #0
   12cca:	d006      	beq.n	12cda <__smakebuf_r+0x7a>
   12ccc:	2203      	movs	r2, #3
   12cce:	89a3      	ldrh	r3, [r4, #12]
   12cd0:	4393      	bics	r3, r2
   12cd2:	001a      	movs	r2, r3
   12cd4:	2301      	movs	r3, #1
   12cd6:	4313      	orrs	r3, r2
   12cd8:	81a3      	strh	r3, [r4, #12]
   12cda:	89a0      	ldrh	r0, [r4, #12]
   12cdc:	4338      	orrs	r0, r7
   12cde:	81a0      	strh	r0, [r4, #12]
   12ce0:	e7cb      	b.n	12c7a <__smakebuf_r+0x1a>
   12ce2:	46c0      	nop			; (mov r8, r8)
   12ce4:	00012a61 	.word	0x00012a61

00012ce8 <malloc>:
   12ce8:	b510      	push	{r4, lr}
   12cea:	4b03      	ldr	r3, [pc, #12]	; (12cf8 <malloc+0x10>)
   12cec:	0001      	movs	r1, r0
   12cee:	6818      	ldr	r0, [r3, #0]
   12cf0:	f000 f85a 	bl	12da8 <_malloc_r>
   12cf4:	bd10      	pop	{r4, pc}
   12cf6:	46c0      	nop			; (mov r8, r8)
   12cf8:	20000034 	.word	0x20000034

00012cfc <memchr>:
   12cfc:	b2c9      	uxtb	r1, r1
   12cfe:	1882      	adds	r2, r0, r2
   12d00:	4290      	cmp	r0, r2
   12d02:	d101      	bne.n	12d08 <memchr+0xc>
   12d04:	2000      	movs	r0, #0
   12d06:	4770      	bx	lr
   12d08:	7803      	ldrb	r3, [r0, #0]
   12d0a:	428b      	cmp	r3, r1
   12d0c:	d0fb      	beq.n	12d06 <memchr+0xa>
   12d0e:	3001      	adds	r0, #1
   12d10:	e7f6      	b.n	12d00 <memchr+0x4>
   12d12:	Address 0x00012d12 is out of bounds.


00012d14 <_free_r>:
   12d14:	b570      	push	{r4, r5, r6, lr}
   12d16:	0005      	movs	r5, r0
   12d18:	2900      	cmp	r1, #0
   12d1a:	d010      	beq.n	12d3e <_free_r+0x2a>
   12d1c:	1f0c      	subs	r4, r1, #4
   12d1e:	6823      	ldr	r3, [r4, #0]
   12d20:	2b00      	cmp	r3, #0
   12d22:	da00      	bge.n	12d26 <_free_r+0x12>
   12d24:	18e4      	adds	r4, r4, r3
   12d26:	0028      	movs	r0, r5
   12d28:	f000 f9a2 	bl	13070 <__malloc_lock>
   12d2c:	4a1d      	ldr	r2, [pc, #116]	; (12da4 <_free_r+0x90>)
   12d2e:	6813      	ldr	r3, [r2, #0]
   12d30:	2b00      	cmp	r3, #0
   12d32:	d105      	bne.n	12d40 <_free_r+0x2c>
   12d34:	6063      	str	r3, [r4, #4]
   12d36:	6014      	str	r4, [r2, #0]
   12d38:	0028      	movs	r0, r5
   12d3a:	f000 f99a 	bl	13072 <__malloc_unlock>
   12d3e:	bd70      	pop	{r4, r5, r6, pc}
   12d40:	42a3      	cmp	r3, r4
   12d42:	d909      	bls.n	12d58 <_free_r+0x44>
   12d44:	6821      	ldr	r1, [r4, #0]
   12d46:	1860      	adds	r0, r4, r1
   12d48:	4283      	cmp	r3, r0
   12d4a:	d1f3      	bne.n	12d34 <_free_r+0x20>
   12d4c:	6818      	ldr	r0, [r3, #0]
   12d4e:	685b      	ldr	r3, [r3, #4]
   12d50:	1841      	adds	r1, r0, r1
   12d52:	6021      	str	r1, [r4, #0]
   12d54:	e7ee      	b.n	12d34 <_free_r+0x20>
   12d56:	0013      	movs	r3, r2
   12d58:	685a      	ldr	r2, [r3, #4]
   12d5a:	2a00      	cmp	r2, #0
   12d5c:	d001      	beq.n	12d62 <_free_r+0x4e>
   12d5e:	42a2      	cmp	r2, r4
   12d60:	d9f9      	bls.n	12d56 <_free_r+0x42>
   12d62:	6819      	ldr	r1, [r3, #0]
   12d64:	1858      	adds	r0, r3, r1
   12d66:	42a0      	cmp	r0, r4
   12d68:	d10b      	bne.n	12d82 <_free_r+0x6e>
   12d6a:	6820      	ldr	r0, [r4, #0]
   12d6c:	1809      	adds	r1, r1, r0
   12d6e:	1858      	adds	r0, r3, r1
   12d70:	6019      	str	r1, [r3, #0]
   12d72:	4282      	cmp	r2, r0
   12d74:	d1e0      	bne.n	12d38 <_free_r+0x24>
   12d76:	6810      	ldr	r0, [r2, #0]
   12d78:	6852      	ldr	r2, [r2, #4]
   12d7a:	1841      	adds	r1, r0, r1
   12d7c:	6019      	str	r1, [r3, #0]
   12d7e:	605a      	str	r2, [r3, #4]
   12d80:	e7da      	b.n	12d38 <_free_r+0x24>
   12d82:	42a0      	cmp	r0, r4
   12d84:	d902      	bls.n	12d8c <_free_r+0x78>
   12d86:	230c      	movs	r3, #12
   12d88:	602b      	str	r3, [r5, #0]
   12d8a:	e7d5      	b.n	12d38 <_free_r+0x24>
   12d8c:	6821      	ldr	r1, [r4, #0]
   12d8e:	1860      	adds	r0, r4, r1
   12d90:	4282      	cmp	r2, r0
   12d92:	d103      	bne.n	12d9c <_free_r+0x88>
   12d94:	6810      	ldr	r0, [r2, #0]
   12d96:	6852      	ldr	r2, [r2, #4]
   12d98:	1841      	adds	r1, r0, r1
   12d9a:	6021      	str	r1, [r4, #0]
   12d9c:	6062      	str	r2, [r4, #4]
   12d9e:	605c      	str	r4, [r3, #4]
   12da0:	e7ca      	b.n	12d38 <_free_r+0x24>
   12da2:	46c0      	nop			; (mov r8, r8)
   12da4:	20001ca4 	.word	0x20001ca4

00012da8 <_malloc_r>:
   12da8:	2303      	movs	r3, #3
   12daa:	b570      	push	{r4, r5, r6, lr}
   12dac:	1ccd      	adds	r5, r1, #3
   12dae:	439d      	bics	r5, r3
   12db0:	3508      	adds	r5, #8
   12db2:	0006      	movs	r6, r0
   12db4:	2d0c      	cmp	r5, #12
   12db6:	d21e      	bcs.n	12df6 <_malloc_r+0x4e>
   12db8:	250c      	movs	r5, #12
   12dba:	42a9      	cmp	r1, r5
   12dbc:	d81d      	bhi.n	12dfa <_malloc_r+0x52>
   12dbe:	0030      	movs	r0, r6
   12dc0:	f000 f956 	bl	13070 <__malloc_lock>
   12dc4:	4a25      	ldr	r2, [pc, #148]	; (12e5c <_malloc_r+0xb4>)
   12dc6:	6814      	ldr	r4, [r2, #0]
   12dc8:	0021      	movs	r1, r4
   12dca:	2900      	cmp	r1, #0
   12dcc:	d119      	bne.n	12e02 <_malloc_r+0x5a>
   12dce:	4c24      	ldr	r4, [pc, #144]	; (12e60 <_malloc_r+0xb8>)
   12dd0:	6823      	ldr	r3, [r4, #0]
   12dd2:	2b00      	cmp	r3, #0
   12dd4:	d103      	bne.n	12dde <_malloc_r+0x36>
   12dd6:	0030      	movs	r0, r6
   12dd8:	f000 f844 	bl	12e64 <_sbrk_r>
   12ddc:	6020      	str	r0, [r4, #0]
   12dde:	0029      	movs	r1, r5
   12de0:	0030      	movs	r0, r6
   12de2:	f000 f83f 	bl	12e64 <_sbrk_r>
   12de6:	1c43      	adds	r3, r0, #1
   12de8:	d12c      	bne.n	12e44 <_malloc_r+0x9c>
   12dea:	230c      	movs	r3, #12
   12dec:	0030      	movs	r0, r6
   12dee:	6033      	str	r3, [r6, #0]
   12df0:	f000 f93f 	bl	13072 <__malloc_unlock>
   12df4:	e003      	b.n	12dfe <_malloc_r+0x56>
   12df6:	2d00      	cmp	r5, #0
   12df8:	dadf      	bge.n	12dba <_malloc_r+0x12>
   12dfa:	230c      	movs	r3, #12
   12dfc:	6033      	str	r3, [r6, #0]
   12dfe:	2000      	movs	r0, #0
   12e00:	bd70      	pop	{r4, r5, r6, pc}
   12e02:	680b      	ldr	r3, [r1, #0]
   12e04:	1b5b      	subs	r3, r3, r5
   12e06:	d41a      	bmi.n	12e3e <_malloc_r+0x96>
   12e08:	2b0b      	cmp	r3, #11
   12e0a:	d903      	bls.n	12e14 <_malloc_r+0x6c>
   12e0c:	600b      	str	r3, [r1, #0]
   12e0e:	18cc      	adds	r4, r1, r3
   12e10:	6025      	str	r5, [r4, #0]
   12e12:	e003      	b.n	12e1c <_malloc_r+0x74>
   12e14:	428c      	cmp	r4, r1
   12e16:	d10e      	bne.n	12e36 <_malloc_r+0x8e>
   12e18:	6863      	ldr	r3, [r4, #4]
   12e1a:	6013      	str	r3, [r2, #0]
   12e1c:	0030      	movs	r0, r6
   12e1e:	f000 f928 	bl	13072 <__malloc_unlock>
   12e22:	0020      	movs	r0, r4
   12e24:	2207      	movs	r2, #7
   12e26:	300b      	adds	r0, #11
   12e28:	1d23      	adds	r3, r4, #4
   12e2a:	4390      	bics	r0, r2
   12e2c:	1ac3      	subs	r3, r0, r3
   12e2e:	d0e7      	beq.n	12e00 <_malloc_r+0x58>
   12e30:	425a      	negs	r2, r3
   12e32:	50e2      	str	r2, [r4, r3]
   12e34:	e7e4      	b.n	12e00 <_malloc_r+0x58>
   12e36:	684b      	ldr	r3, [r1, #4]
   12e38:	6063      	str	r3, [r4, #4]
   12e3a:	000c      	movs	r4, r1
   12e3c:	e7ee      	b.n	12e1c <_malloc_r+0x74>
   12e3e:	000c      	movs	r4, r1
   12e40:	6849      	ldr	r1, [r1, #4]
   12e42:	e7c2      	b.n	12dca <_malloc_r+0x22>
   12e44:	2303      	movs	r3, #3
   12e46:	1cc4      	adds	r4, r0, #3
   12e48:	439c      	bics	r4, r3
   12e4a:	42a0      	cmp	r0, r4
   12e4c:	d0e0      	beq.n	12e10 <_malloc_r+0x68>
   12e4e:	1a21      	subs	r1, r4, r0
   12e50:	0030      	movs	r0, r6
   12e52:	f000 f807 	bl	12e64 <_sbrk_r>
   12e56:	1c43      	adds	r3, r0, #1
   12e58:	d1da      	bne.n	12e10 <_malloc_r+0x68>
   12e5a:	e7c6      	b.n	12dea <_malloc_r+0x42>
   12e5c:	20001ca4 	.word	0x20001ca4
   12e60:	20001ca8 	.word	0x20001ca8

00012e64 <_sbrk_r>:
   12e64:	2300      	movs	r3, #0
   12e66:	b570      	push	{r4, r5, r6, lr}
   12e68:	4c06      	ldr	r4, [pc, #24]	; (12e84 <_sbrk_r+0x20>)
   12e6a:	0005      	movs	r5, r0
   12e6c:	0008      	movs	r0, r1
   12e6e:	6023      	str	r3, [r4, #0]
   12e70:	f7f5 ff10 	bl	8c94 <_sbrk>
   12e74:	1c43      	adds	r3, r0, #1
   12e76:	d103      	bne.n	12e80 <_sbrk_r+0x1c>
   12e78:	6823      	ldr	r3, [r4, #0]
   12e7a:	2b00      	cmp	r3, #0
   12e7c:	d000      	beq.n	12e80 <_sbrk_r+0x1c>
   12e7e:	602b      	str	r3, [r5, #0]
   12e80:	bd70      	pop	{r4, r5, r6, pc}
   12e82:	46c0      	nop			; (mov r8, r8)
   12e84:	200023ec 	.word	0x200023ec

00012e88 <_raise_r>:
   12e88:	b570      	push	{r4, r5, r6, lr}
   12e8a:	0004      	movs	r4, r0
   12e8c:	000d      	movs	r5, r1
   12e8e:	291f      	cmp	r1, #31
   12e90:	d904      	bls.n	12e9c <_raise_r+0x14>
   12e92:	2316      	movs	r3, #22
   12e94:	6003      	str	r3, [r0, #0]
   12e96:	2001      	movs	r0, #1
   12e98:	4240      	negs	r0, r0
   12e9a:	bd70      	pop	{r4, r5, r6, pc}
   12e9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   12e9e:	2b00      	cmp	r3, #0
   12ea0:	d004      	beq.n	12eac <_raise_r+0x24>
   12ea2:	008a      	lsls	r2, r1, #2
   12ea4:	189b      	adds	r3, r3, r2
   12ea6:	681a      	ldr	r2, [r3, #0]
   12ea8:	2a00      	cmp	r2, #0
   12eaa:	d108      	bne.n	12ebe <_raise_r+0x36>
   12eac:	0020      	movs	r0, r4
   12eae:	f000 f831 	bl	12f14 <_getpid_r>
   12eb2:	002a      	movs	r2, r5
   12eb4:	0001      	movs	r1, r0
   12eb6:	0020      	movs	r0, r4
   12eb8:	f000 f81a 	bl	12ef0 <_kill_r>
   12ebc:	e7ed      	b.n	12e9a <_raise_r+0x12>
   12ebe:	2000      	movs	r0, #0
   12ec0:	2a01      	cmp	r2, #1
   12ec2:	d0ea      	beq.n	12e9a <_raise_r+0x12>
   12ec4:	1c51      	adds	r1, r2, #1
   12ec6:	d103      	bne.n	12ed0 <_raise_r+0x48>
   12ec8:	2316      	movs	r3, #22
   12eca:	3001      	adds	r0, #1
   12ecc:	6023      	str	r3, [r4, #0]
   12ece:	e7e4      	b.n	12e9a <_raise_r+0x12>
   12ed0:	2400      	movs	r4, #0
   12ed2:	0028      	movs	r0, r5
   12ed4:	601c      	str	r4, [r3, #0]
   12ed6:	4790      	blx	r2
   12ed8:	0020      	movs	r0, r4
   12eda:	e7de      	b.n	12e9a <_raise_r+0x12>

00012edc <raise>:
   12edc:	b510      	push	{r4, lr}
   12ede:	4b03      	ldr	r3, [pc, #12]	; (12eec <raise+0x10>)
   12ee0:	0001      	movs	r1, r0
   12ee2:	6818      	ldr	r0, [r3, #0]
   12ee4:	f7ff ffd0 	bl	12e88 <_raise_r>
   12ee8:	bd10      	pop	{r4, pc}
   12eea:	46c0      	nop			; (mov r8, r8)
   12eec:	20000034 	.word	0x20000034

00012ef0 <_kill_r>:
   12ef0:	2300      	movs	r3, #0
   12ef2:	b570      	push	{r4, r5, r6, lr}
   12ef4:	4c06      	ldr	r4, [pc, #24]	; (12f10 <_kill_r+0x20>)
   12ef6:	0005      	movs	r5, r0
   12ef8:	0008      	movs	r0, r1
   12efa:	0011      	movs	r1, r2
   12efc:	6023      	str	r3, [r4, #0]
   12efe:	f7f5 fee9 	bl	8cd4 <_kill>
   12f02:	1c43      	adds	r3, r0, #1
   12f04:	d103      	bne.n	12f0e <_kill_r+0x1e>
   12f06:	6823      	ldr	r3, [r4, #0]
   12f08:	2b00      	cmp	r3, #0
   12f0a:	d000      	beq.n	12f0e <_kill_r+0x1e>
   12f0c:	602b      	str	r3, [r5, #0]
   12f0e:	bd70      	pop	{r4, r5, r6, pc}
   12f10:	200023ec 	.word	0x200023ec

00012f14 <_getpid_r>:
   12f14:	b510      	push	{r4, lr}
   12f16:	f7f5 fede 	bl	8cd6 <_getpid>
   12f1a:	bd10      	pop	{r4, pc}

00012f1c <__sread>:
   12f1c:	b570      	push	{r4, r5, r6, lr}
   12f1e:	000c      	movs	r4, r1
   12f20:	250e      	movs	r5, #14
   12f22:	5f49      	ldrsh	r1, [r1, r5]
   12f24:	f000 f8a6 	bl	13074 <_read_r>
   12f28:	2800      	cmp	r0, #0
   12f2a:	db03      	blt.n	12f34 <__sread+0x18>
   12f2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   12f2e:	181b      	adds	r3, r3, r0
   12f30:	6563      	str	r3, [r4, #84]	; 0x54
   12f32:	bd70      	pop	{r4, r5, r6, pc}
   12f34:	89a3      	ldrh	r3, [r4, #12]
   12f36:	4a02      	ldr	r2, [pc, #8]	; (12f40 <__sread+0x24>)
   12f38:	4013      	ands	r3, r2
   12f3a:	81a3      	strh	r3, [r4, #12]
   12f3c:	e7f9      	b.n	12f32 <__sread+0x16>
   12f3e:	46c0      	nop			; (mov r8, r8)
   12f40:	ffffefff 	.word	0xffffefff

00012f44 <__swrite>:
   12f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f46:	001f      	movs	r7, r3
   12f48:	898b      	ldrh	r3, [r1, #12]
   12f4a:	0005      	movs	r5, r0
   12f4c:	000c      	movs	r4, r1
   12f4e:	0016      	movs	r6, r2
   12f50:	05db      	lsls	r3, r3, #23
   12f52:	d505      	bpl.n	12f60 <__swrite+0x1c>
   12f54:	230e      	movs	r3, #14
   12f56:	5ec9      	ldrsh	r1, [r1, r3]
   12f58:	2200      	movs	r2, #0
   12f5a:	2302      	movs	r3, #2
   12f5c:	f000 f874 	bl	13048 <_lseek_r>
   12f60:	89a3      	ldrh	r3, [r4, #12]
   12f62:	4a05      	ldr	r2, [pc, #20]	; (12f78 <__swrite+0x34>)
   12f64:	0028      	movs	r0, r5
   12f66:	4013      	ands	r3, r2
   12f68:	81a3      	strh	r3, [r4, #12]
   12f6a:	0032      	movs	r2, r6
   12f6c:	230e      	movs	r3, #14
   12f6e:	5ee1      	ldrsh	r1, [r4, r3]
   12f70:	003b      	movs	r3, r7
   12f72:	f000 f81f 	bl	12fb4 <_write_r>
   12f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f78:	ffffefff 	.word	0xffffefff

00012f7c <__sseek>:
   12f7c:	b570      	push	{r4, r5, r6, lr}
   12f7e:	000c      	movs	r4, r1
   12f80:	250e      	movs	r5, #14
   12f82:	5f49      	ldrsh	r1, [r1, r5]
   12f84:	f000 f860 	bl	13048 <_lseek_r>
   12f88:	89a3      	ldrh	r3, [r4, #12]
   12f8a:	1c42      	adds	r2, r0, #1
   12f8c:	d103      	bne.n	12f96 <__sseek+0x1a>
   12f8e:	4a05      	ldr	r2, [pc, #20]	; (12fa4 <__sseek+0x28>)
   12f90:	4013      	ands	r3, r2
   12f92:	81a3      	strh	r3, [r4, #12]
   12f94:	bd70      	pop	{r4, r5, r6, pc}
   12f96:	2280      	movs	r2, #128	; 0x80
   12f98:	0152      	lsls	r2, r2, #5
   12f9a:	4313      	orrs	r3, r2
   12f9c:	81a3      	strh	r3, [r4, #12]
   12f9e:	6560      	str	r0, [r4, #84]	; 0x54
   12fa0:	e7f8      	b.n	12f94 <__sseek+0x18>
   12fa2:	46c0      	nop			; (mov r8, r8)
   12fa4:	ffffefff 	.word	0xffffefff

00012fa8 <__sclose>:
   12fa8:	b510      	push	{r4, lr}
   12faa:	230e      	movs	r3, #14
   12fac:	5ec9      	ldrsh	r1, [r1, r3]
   12fae:	f000 f815 	bl	12fdc <_close_r>
   12fb2:	bd10      	pop	{r4, pc}

00012fb4 <_write_r>:
   12fb4:	b570      	push	{r4, r5, r6, lr}
   12fb6:	0005      	movs	r5, r0
   12fb8:	0008      	movs	r0, r1
   12fba:	0011      	movs	r1, r2
   12fbc:	2200      	movs	r2, #0
   12fbe:	4c06      	ldr	r4, [pc, #24]	; (12fd8 <_write_r+0x24>)
   12fc0:	6022      	str	r2, [r4, #0]
   12fc2:	001a      	movs	r2, r3
   12fc4:	f7f5 fe3e 	bl	8c44 <_write>
   12fc8:	1c43      	adds	r3, r0, #1
   12fca:	d103      	bne.n	12fd4 <_write_r+0x20>
   12fcc:	6823      	ldr	r3, [r4, #0]
   12fce:	2b00      	cmp	r3, #0
   12fd0:	d000      	beq.n	12fd4 <_write_r+0x20>
   12fd2:	602b      	str	r3, [r5, #0]
   12fd4:	bd70      	pop	{r4, r5, r6, pc}
   12fd6:	46c0      	nop			; (mov r8, r8)
   12fd8:	200023ec 	.word	0x200023ec

00012fdc <_close_r>:
   12fdc:	2300      	movs	r3, #0
   12fde:	b570      	push	{r4, r5, r6, lr}
   12fe0:	4c06      	ldr	r4, [pc, #24]	; (12ffc <_close_r+0x20>)
   12fe2:	0005      	movs	r5, r0
   12fe4:	0008      	movs	r0, r1
   12fe6:	6023      	str	r3, [r4, #0]
   12fe8:	f7f5 fe66 	bl	8cb8 <_close>
   12fec:	1c43      	adds	r3, r0, #1
   12fee:	d103      	bne.n	12ff8 <_close_r+0x1c>
   12ff0:	6823      	ldr	r3, [r4, #0]
   12ff2:	2b00      	cmp	r3, #0
   12ff4:	d000      	beq.n	12ff8 <_close_r+0x1c>
   12ff6:	602b      	str	r3, [r5, #0]
   12ff8:	bd70      	pop	{r4, r5, r6, pc}
   12ffa:	46c0      	nop			; (mov r8, r8)
   12ffc:	200023ec 	.word	0x200023ec

00013000 <_fstat_r>:
   13000:	2300      	movs	r3, #0
   13002:	b570      	push	{r4, r5, r6, lr}
   13004:	4c06      	ldr	r4, [pc, #24]	; (13020 <_fstat_r+0x20>)
   13006:	0005      	movs	r5, r0
   13008:	0008      	movs	r0, r1
   1300a:	0011      	movs	r1, r2
   1300c:	6023      	str	r3, [r4, #0]
   1300e:	f7f5 fe56 	bl	8cbe <_fstat>
   13012:	1c43      	adds	r3, r0, #1
   13014:	d103      	bne.n	1301e <_fstat_r+0x1e>
   13016:	6823      	ldr	r3, [r4, #0]
   13018:	2b00      	cmp	r3, #0
   1301a:	d000      	beq.n	1301e <_fstat_r+0x1e>
   1301c:	602b      	str	r3, [r5, #0]
   1301e:	bd70      	pop	{r4, r5, r6, pc}
   13020:	200023ec 	.word	0x200023ec

00013024 <_isatty_r>:
   13024:	2300      	movs	r3, #0
   13026:	b570      	push	{r4, r5, r6, lr}
   13028:	4c06      	ldr	r4, [pc, #24]	; (13044 <_isatty_r+0x20>)
   1302a:	0005      	movs	r5, r0
   1302c:	0008      	movs	r0, r1
   1302e:	6023      	str	r3, [r4, #0]
   13030:	f7f5 fe4a 	bl	8cc8 <_isatty>
   13034:	1c43      	adds	r3, r0, #1
   13036:	d103      	bne.n	13040 <_isatty_r+0x1c>
   13038:	6823      	ldr	r3, [r4, #0]
   1303a:	2b00      	cmp	r3, #0
   1303c:	d000      	beq.n	13040 <_isatty_r+0x1c>
   1303e:	602b      	str	r3, [r5, #0]
   13040:	bd70      	pop	{r4, r5, r6, pc}
   13042:	46c0      	nop			; (mov r8, r8)
   13044:	200023ec 	.word	0x200023ec

00013048 <_lseek_r>:
   13048:	b570      	push	{r4, r5, r6, lr}
   1304a:	0005      	movs	r5, r0
   1304c:	0008      	movs	r0, r1
   1304e:	0011      	movs	r1, r2
   13050:	2200      	movs	r2, #0
   13052:	4c06      	ldr	r4, [pc, #24]	; (1306c <_lseek_r+0x24>)
   13054:	6022      	str	r2, [r4, #0]
   13056:	001a      	movs	r2, r3
   13058:	f7f5 fe38 	bl	8ccc <_lseek>
   1305c:	1c43      	adds	r3, r0, #1
   1305e:	d103      	bne.n	13068 <_lseek_r+0x20>
   13060:	6823      	ldr	r3, [r4, #0]
   13062:	2b00      	cmp	r3, #0
   13064:	d000      	beq.n	13068 <_lseek_r+0x20>
   13066:	602b      	str	r3, [r5, #0]
   13068:	bd70      	pop	{r4, r5, r6, pc}
   1306a:	46c0      	nop			; (mov r8, r8)
   1306c:	200023ec 	.word	0x200023ec

00013070 <__malloc_lock>:
   13070:	4770      	bx	lr

00013072 <__malloc_unlock>:
   13072:	4770      	bx	lr

00013074 <_read_r>:
   13074:	b570      	push	{r4, r5, r6, lr}
   13076:	0005      	movs	r5, r0
   13078:	0008      	movs	r0, r1
   1307a:	0011      	movs	r1, r2
   1307c:	2200      	movs	r2, #0
   1307e:	4c06      	ldr	r4, [pc, #24]	; (13098 <_read_r+0x24>)
   13080:	6022      	str	r2, [r4, #0]
   13082:	001a      	movs	r2, r3
   13084:	f7f5 fdbc 	bl	8c00 <_read>
   13088:	1c43      	adds	r3, r0, #1
   1308a:	d103      	bne.n	13094 <_read_r+0x20>
   1308c:	6823      	ldr	r3, [r4, #0]
   1308e:	2b00      	cmp	r3, #0
   13090:	d000      	beq.n	13094 <_read_r+0x20>
   13092:	602b      	str	r3, [r5, #0]
   13094:	bd70      	pop	{r4, r5, r6, pc}
   13096:	46c0      	nop			; (mov r8, r8)
   13098:	200023ec 	.word	0x200023ec
   1309c:	000068d8 	.word	0x000068d8
   130a0:	000068d8 	.word	0x000068d8
   130a4:	000068a6 	.word	0x000068a6
   130a8:	000068d8 	.word	0x000068d8
   130ac:	000068a6 	.word	0x000068a6
   130b0:	0000688c 	.word	0x0000688c
   130b4:	0000688c 	.word	0x0000688c
   130b8:	000068d8 	.word	0x000068d8
   130bc:	000068d8 	.word	0x000068d8
   130c0:	000068d8 	.word	0x000068d8
   130c4:	000068d8 	.word	0x000068d8
   130c8:	000068d8 	.word	0x000068d8
   130cc:	000068d8 	.word	0x000068d8
   130d0:	000068d8 	.word	0x000068d8
   130d4:	000068d8 	.word	0x000068d8
   130d8:	000068d8 	.word	0x000068d8
   130dc:	000068d8 	.word	0x000068d8
   130e0:	000068d8 	.word	0x000068d8
   130e4:	000068d8 	.word	0x000068d8
   130e8:	000068d8 	.word	0x000068d8
   130ec:	000068d8 	.word	0x000068d8
   130f0:	000068d8 	.word	0x000068d8
   130f4:	000068d8 	.word	0x000068d8
   130f8:	000068d8 	.word	0x000068d8
   130fc:	000068d8 	.word	0x000068d8
   13100:	000068d8 	.word	0x000068d8
   13104:	000068a6 	.word	0x000068a6
   13108:	000068d8 	.word	0x000068d8
   1310c:	000068a6 	.word	0x000068a6
   13110:	000068d8 	.word	0x000068d8
   13114:	000068d8 	.word	0x000068d8
   13118:	000068d8 	.word	0x000068d8
   1311c:	000068d8 	.word	0x000068d8
   13120:	000068d8 	.word	0x000068d8
   13124:	000068d8 	.word	0x000068d8
   13128:	000068d8 	.word	0x000068d8
   1312c:	000068d8 	.word	0x000068d8
   13130:	000068d8 	.word	0x000068d8
   13134:	000068d8 	.word	0x000068d8
   13138:	000068d8 	.word	0x000068d8
   1313c:	000068d8 	.word	0x000068d8
   13140:	000068d8 	.word	0x000068d8
   13144:	000068d8 	.word	0x000068d8
   13148:	000068d8 	.word	0x000068d8
   1314c:	000068d8 	.word	0x000068d8
   13150:	000068d8 	.word	0x000068d8
   13154:	000068d8 	.word	0x000068d8
   13158:	000068d8 	.word	0x000068d8
   1315c:	000068d8 	.word	0x000068d8
   13160:	000068d8 	.word	0x000068d8
   13164:	000068d8 	.word	0x000068d8
   13168:	000068d8 	.word	0x000068d8
   1316c:	000068d8 	.word	0x000068d8
   13170:	000068d8 	.word	0x000068d8
   13174:	000068d8 	.word	0x000068d8
   13178:	000068d8 	.word	0x000068d8
   1317c:	000068d8 	.word	0x000068d8
   13180:	000068d8 	.word	0x000068d8
   13184:	000068d8 	.word	0x000068d8
   13188:	000068d8 	.word	0x000068d8
   1318c:	000068d8 	.word	0x000068d8
   13190:	000068d8 	.word	0x000068d8
   13194:	000068d8 	.word	0x000068d8
   13198:	000068d8 	.word	0x000068d8
   1319c:	000068a6 	.word	0x000068a6
   131a0:	000068a6 	.word	0x000068a6
   131a4:	000068ae 	.word	0x000068ae
   131a8:	000068ae 	.word	0x000068ae
   131ac:	000068ae 	.word	0x000068ae
   131b0:	000068ae 	.word	0x000068ae
   131b4:	42000000 	.word	0x42000000
   131b8:	42000400 	.word	0x42000400
   131bc:	42000800 	.word	0x42000800
   131c0:	42000c00 	.word	0x42000c00
   131c4:	42001000 	.word	0x42001000
   131c8:	43000400 	.word	0x43000400
   131cc:	0000803e 	.word	0x0000803e
   131d0:	0000803a 	.word	0x0000803a
   131d4:	0000803a 	.word	0x0000803a
   131d8:	000080a4 	.word	0x000080a4
   131dc:	000080a4 	.word	0x000080a4
   131e0:	00008054 	.word	0x00008054
   131e4:	00008044 	.word	0x00008044
   131e8:	0000805a 	.word	0x0000805a
   131ec:	00008092 	.word	0x00008092
   131f0:	00008124 	.word	0x00008124
   131f4:	00008104 	.word	0x00008104
   131f8:	00008104 	.word	0x00008104
   131fc:	0000819e 	.word	0x0000819e
   13200:	00008116 	.word	0x00008116
   13204:	00008132 	.word	0x00008132
   13208:	00008108 	.word	0x00008108
   1320c:	00008140 	.word	0x00008140
   13210:	00008182 	.word	0x00008182
   13214:	000081dc 	.word	0x000081dc
   13218:	0000821e 	.word	0x0000821e
   1321c:	0000821e 	.word	0x0000821e
   13220:	0000821e 	.word	0x0000821e
   13224:	000081ce 	.word	0x000081ce
   13228:	000081ea 	.word	0x000081ea
   1322c:	000081c0 	.word	0x000081c0
   13230:	000081f8 	.word	0x000081f8
   13234:	0000820e 	.word	0x0000820e
   13238:	00008898 	.word	0x00008898
   1323c:	0000898c 	.word	0x0000898c
   13240:	00008996 	.word	0x00008996
   13244:	000089a0 	.word	0x000089a0
   13248:	000089aa 	.word	0x000089aa
   1324c:	000089dc 	.word	0x000089dc
   13250:	000089e6 	.word	0x000089e6
   13254:	000089f0 	.word	0x000089f0
   13258:	000089fa 	.word	0x000089fa
   1325c:	00008a04 	.word	0x00008a04
   13260:	42002000 	.word	0x42002000
   13264:	42002400 	.word	0x42002400
   13268:	43000800 	.word	0x43000800
   1326c:	00000002 	.word	0x00000002
   13270:	00000100 	.word	0x00000100
   13274:	00000002 	.word	0x00000002
   13278:	00000200 	.word	0x00000200
   1327c:	00000003 	.word	0x00000003
   13280:	00000004 	.word	0x00000004
   13284:	626d756e 	.word	0x626d756e
   13288:	664f7265 	.word	0x664f7265
   1328c:	65747942 	.word	0x65747942
   13290:	00000073 	.word	0x00000073
   13294:	732f2e2e 	.word	0x732f2e2e
   13298:	412f6372 	.word	0x412f6372
   1329c:	742f4653 	.word	0x742f4653
   132a0:	64726968 	.word	0x64726968
   132a4:	74726170 	.word	0x74726170
   132a8:	69772f79 	.word	0x69772f79
   132ac:	656c6572 	.word	0x656c6572
   132b0:	6d2f7373 	.word	0x6d2f7373
   132b4:	2f697769 	.word	0x2f697769
   132b8:	76726573 	.word	0x76726573
   132bc:	73656369 	.word	0x73656369
   132c0:	7364702f 	.word	0x7364702f
   132c4:	6372732f 	.word	0x6372732f
   132c8:	2f766e2f 	.word	0x2f766e2f
   132cc:	764e5f44 	.word	0x764e5f44
   132d0:	0000632e 	.word	0x0000632e
   132d4:	72646461 	.word	0x72646461
   132d8:	20737365 	.word	0x20737365
   132dc:	44203d3c 	.word	0x44203d3c
   132e0:	5f564e5f 	.word	0x5f564e5f
   132e4:	4f4d454d 	.word	0x4f4d454d
   132e8:	455f5952 	.word	0x455f5952
   132ec:	0000444e 	.word	0x0000444e
   132f0:	64646128 	.word	0x64646128
   132f4:	73736572 	.word	0x73736572
   132f8:	6e202b20 	.word	0x6e202b20
   132fc:	65626d75 	.word	0x65626d75
   13300:	42664f72 	.word	0x42664f72
   13304:	73657479 	.word	0x73657479
   13308:	3d3c2029 	.word	0x3d3c2029
   1330c:	5f442820 	.word	0x5f442820
   13310:	4d5f564e 	.word	0x4d5f564e
   13314:	524f4d45 	.word	0x524f4d45
   13318:	4e455f59 	.word	0x4e455f59
   1331c:	202b2044 	.word	0x202b2044
   13320:	00295531 	.word	0x00295531
   13324:	66666f28 	.word	0x66666f28
   13328:	20746573 	.word	0x20746573
   1332c:	756e202b 	.word	0x756e202b
   13330:	7265626d 	.word	0x7265626d
   13334:	7942664f 	.word	0x7942664f
   13338:	29736574 	.word	0x29736574
   1333c:	203d3c20 	.word	0x203d3c20
   13340:	564e5f44 	.word	0x564e5f44
   13344:	4345535f 	.word	0x4345535f
   13348:	5f524f54 	.word	0x5f524f54
   1334c:	455a4953 	.word	0x455a4953
   13350:	ffffff00 	.word	0xffffff00
   13354:	4e5f4428 	.word	0x4e5f4428
   13358:	454d5f56 	.word	0x454d5f56
   1335c:	59524f4d 	.word	0x59524f4d
   13360:	4154535f 	.word	0x4154535f
   13364:	25205452 	.word	0x25205452
   13368:	4d564e20 	.word	0x4d564e20
   1336c:	4c525443 	.word	0x4c525443
   13370:	574f525f 	.word	0x574f525f
   13374:	5a49535f 	.word	0x5a49535f
   13378:	3d202945 	.word	0x3d202945
   1337c:	5530203d 	.word	0x5530203d
   13380:	00000000 	.word	0x00000000
   13384:	4e5f4428 	.word	0x4e5f4428
   13388:	454d5f56 	.word	0x454d5f56
   1338c:	59524f4d 	.word	0x59524f4d
   13390:	444e455f 	.word	0x444e455f
   13394:	44202d20 	.word	0x44202d20
   13398:	5f564e5f 	.word	0x5f564e5f
   1339c:	4f4d454d 	.word	0x4f4d454d
   133a0:	535f5952 	.word	0x535f5952
   133a4:	54524154 	.word	0x54524154
   133a8:	31202b20 	.word	0x31202b20
   133ac:	3d202955 	.word	0x3d202955
   133b0:	5f44203d 	.word	0x5f44203d
   133b4:	4d5f564e 	.word	0x4d5f564e
   133b8:	524f4d45 	.word	0x524f4d45
   133bc:	49535f59 	.word	0x49535f59
   133c0:	ff00455a 	.word	0xff00455a

000133c4 <__func__.12931>:
   133c4:	764e5f44 696e495f ffff0074              D_Nv_Init...

000133d0 <__func__.12943>:
   133d0:	764e5f44 6165525f 6d495f64 ff006c70     D_Nv_Read_Impl..

000133e0 <__func__.12956>:
   133e0:	764e5f44 6972575f 495f6574 006c706d     D_Nv_Write_Impl.

000133f0 <__func__.12968>:
   133f0:	764e5f44 6172455f 65536573 726f7463     D_Nv_EraseSector
   13400:	706d495f ffff006c                       _Impl...

00013408 <__func__.12981>:
   13408:	706d6f43 44657261 00617461 68636163     CompareData.cach
   13418:	3d212065 4c554e20 ffff004c 736c6166     e != NULL...fals
   13428:	ffff0065 646e6946 6d657449 68636143     e...FindItemCach
   13438:	64692865 3d3d2029 4c554e20 0000004c     e(id) == NULL...
   13448:	74695f73 6f436d65 20746e75 414d203c     s_itemCount < MA
   13458:	54495f58 435f4d45 544e554f ffffff00     X_ITEM_COUNT....
   13468:	646e6946 6d657449 68636143 64692865     FindItemCache(id
   13478:	3d212029 4c554e20 ffff004c 68636163     ) != NULL...cach
   13488:	6c3e2d65 42747361 6b636f6c 203d2120     e->lastBlock != 
   13498:	30307830 00003030 732f2e2e 412f6372     0x0000..../src/A
   134a8:	742f4653 64726968 74726170 69772f79     SF/thirdparty/wi
   134b8:	656c6572 6d2f7373 2f697769 76726573     reless/miwi/serv
   134c8:	73656369 7364702f 6372732f 2f766e2f     ices/pds/src/nv/
   134d8:	764e5f53 6d61532d 2e313252 ffff0063     S_Nv-SamR21.c...
   134e8:	20646928 30203d21 26202975 69282026     (id != 0u) && (i
   134f8:	203c2064 30467830 29753030 20262620     d < 0xF000u) && 
   13508:	65746928 6e654c6d 20687467 4d203d3c     (itemLength <= M
   13518:	495f5841 5f4d4554 474e454c 00294854     AX_ITEM_LENGTH).
   13528:	21206469 7530203d ffffff00 20646928     id != 0u....(id 
   13538:	30203d21 26202975 70282026 61746144     != 0u) && (pData
   13548:	203d2120 4c4c554e ffff0029               != NULL)...

00013554 <__func__.12962>:
   13554:	706d6f63 53746361 6f746365 6d695472     compactSectorTim
   13564:	69467265 00646572                       erFired.

0001356c <__func__.12998>:
   1356c:	646e6946 6d657449 68636143 ffff0065     FindItemCache...

0001357c <__func__.13005>:
   1357c:	61657243 74496574 61436d65 00656863     CreateItemCache.

0001358c <__func__.13010>:
   1358c:	656c6544 74496574 61436d65 00656863     DeleteItemCache.

0001359c <__func__.13103>:
   1359c:	64616f4c 74636553 ff00726f              LoadSector..

000135a8 <__func__.13125>:
   135a8:	706d6f43 53746361 6f746365 ffff0072     CompactSector...

000135b8 <__func__.13145>:
   135b8:	706d6f43 53746361 6f746365 4e664972     CompactSectorIfN
   135c8:	65646565 ffff0064                       eeded...

000135d0 <__func__.13152>:
   135d0:	706d6f43 49746361 006d6574              CompactItem.

000135dc <__func__.13176>:
   135dc:	764e5f53 7261455f 6e49796c ff007469     S_Nv_EarlyInit..

000135ec <__func__.13186>:
   135ec:	764e5f53 6574495f 696e496d 6d495f74     S_Nv_ItemInit_Im
   135fc:	ff006c70                                pl..

00013600 <__func__.13199>:
   13600:	764e5f53 6972575f 495f6574 006c706d     S_Nv_Write_Impl.

00013610 <__func__.13210>:
   13610:	764e5f53 6165525f 6d495f64 ff006c70     S_Nv_Read_Impl..

00013620 <__func__.13215>:
   13620:	764e5f53 6574495f 6e654c6d 5f687467     S_Nv_ItemLength_
   13630:	6c706d49 ffffff00 20553028 69203d21     Impl....(0U != i
   13640:	446d6574 72637365 6574692e 7a69536d     temDescr.itemSiz
   13650:	26202965 4e282026 204c4c55 69203d21     e) && (NULL != i
   13660:	446d6574 72637365 6574692e 7461446d     temDescr.itemDat
   13670:	00002961 732f2e2e 412f6372 742f4653     a)..../src/ASF/t
   13680:	64726968 74726170 69772f79 656c6572     hirdparty/wirele
   13690:	6d2f7373 2f697769 76726573 73656369     ss/miwi/services
   136a0:	7364702f 6372732f 2f6c772f 64506c77     /pds/src/wl/wlPd
   136b0:	74614473 72655361 2e726576 00000063     sDataServer.c...
   136c0:	4e5f5328 65525f76 6e727574 756c6156     (S_Nv_ReturnValu
   136d0:	69445f65 746f4e64 73697845 3d3d2074     e_DidNotExist ==
   136e0:	74657220 7c7c2029 5f532820 525f764e      ret) || (S_Nv_R
   136f0:	72757465 6c61566e 4f5f6575 3d3d206b     eturnValue_Ok ==
   13700:	74657220 ffff0029                        ret)...

00013708 <__func__.12877>:
   13708:	53736470 65726f74 6d657449 6b736154     pdsStoreItemTask
   13718:	646e6148 0072656c                       Handler.

00013720 <__func__.12897>:
   13720:	53736470 65726f74 6d657449 ffffff00     pdsStoreItem....

00013730 <__func__.12904>:
   13730:	52736470 6f747365 74496572 ff006d65     pdsRestoreItem..
   13740:	20746572 53203d3d 5f764e5f 75746552     ret == S_Nv_Retu
   13750:	61566e72 5f65756c ff006b4f 6d657469     rnValue_Ok..item
   13760:	63736544 6574692e 7a69536d 00000065     Desc.itemSize...
   13770:	732f2e2e 412f6372 742f4653 64726968     ../src/ASF/third
   13780:	74726170 69772f79 656c6572 6d2f7373     party/wireless/m
   13790:	2f697769 76726573 73656369 7364702f     iwi/services/pds
   137a0:	6372732f 2f6c772f 64506c77 696e4973     /src/wl/wlPdsIni
   137b0:	00632e74                                t.c.

000137b4 <__func__.12635>:
   137b4:	5f534450 74696e49 6d657449 ffff0073     PDS_InitItems...

000137c4 <__func__.13097>:
   137c4:	69726576 74497966 69536d65 0073657a     verifyItemSizes.
   137d4:	4970616d 2e6d6574 67616c66 20262073     mapItem.flags & 
   137e4:	455a4953 444f4d5f 43494649 4f495441     SIZE_MODIFICATIO
   137f4:	4c415f4e 45574f4c 00000044 732f2e2e     N_ALLOWED...../s
   13804:	412f6372 742f4653 64726968 74726170     rc/ASF/thirdpart
   13814:	69772f79 656c6572 6d2f7373 2f697769     y/wireless/miwi/
   13824:	76726573 73656369 7364702f 6372732f     services/pds/src
   13834:	2f6c772f 64506c77 70795473 6f437365     /wl/wlPdsTypesCo
   13844:	7265766e 2e726574 ffff0063              nverter.c...

00013850 <mySecurityKey>:
   13850:	03020100 07060504 0b0a0908 0f0e0d0c     ................

00013860 <MiWiItemIdsTable>:
   13860:	00040002 00060005 00030007 00080001     ................
   13870:	ffff0009 0000ce5c 0000d1ea 0000d1ea     ....\...........
   13880:	0000d06c 0000d1ea 0000d1ea 0000d1ea     l...............
   13890:	0000d1ea 0000d1ea 0000d1ea 0000cb6e     ............n...
   138a0:	0000d0b2 0000d1ea 0000d1ea 0000d1ea     ................
   138b0:	0000d1ea 0000cd3c 0000d1ea 0000d1ea     ....<...........
   138c0:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   138d0:	0000d1ea 0000d1ea 0000d1ea 0000cca4     ................
   138e0:	0000d138 0000d1ea 0000d1ea 0000d1ea     8...............
   138f0:	0000d1ea 0000ce38 0000d1ea 0000d1ea     ....8...........
   13900:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   13910:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   13920:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   13930:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   13940:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   13950:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   13960:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   13970:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   13980:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   13990:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   139a0:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   139b0:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   139c0:	0000d1ea 0000d1ea 0000cf9a 0000d1ea     ................
   139d0:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   139e0:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   139f0:	0000d1ea 0000d1ea 0000d1ea 0000d1ea     ................
   13a00:	0000cf74                                t...

00013a04 <tc_interrupt_vectors.13115>:
   13a04:	ff151211 6f430a0d 63656e6e 676e6974     ......Connecting
   13a14:	65655020 6e6f2072 61684320 6c656e6e      Peer on Channel
   13a24:	00000020 00006425 6f430a0d 63656e6e      ...%d....Connec
   13a34:	20646574 72656550 206e6f20 6e616843     ted Peer on Chan
   13a44:	206c656e ffffff00 65530a0d 7463656c     nel ......Select
   13a54:	206e6f69 6320666f 6e6e6168 00206c65     ion of channel .
   13a64:	20736920 20746f6e 70707573 6574726f      is not supporte
   13a74:	6e692064 72756320 746e6572 6e6f6320     d in current con
   13a84:	75676966 69746172 0d2e6e6f ffffff00     figuration......
   13a94:	74530a0d 69747261 4e20676e 2065646f     ..Starting Node 
   13aa4:	666f2031 6d695320 20656c70 6f6d6544     1 of Simple Demo
   13ab4:	726f6620 57694d20 4d542869 54532029      for MiWi(TM) ST
   13ac4:	53205241 6b636174 2e2e2e20 00000000     AR Stack .......
   13ad4:	20200a0d 52202020 72542046 63736e61     ..     RF Transc
   13ae4:	65766965 41203a72 52363854 32313246     eiver: AT86RF212
   13af4:	00000042 20200a0d 6d654420 6e49206f     B.....   Demo In
   13b04:	75727473 6f697463 00003a6e 20200a0d     struction:....  
   13b14:	20202020 20202020 20202020 20202020                     
   13b24:	50202020 7265776f 206e6f20 20656874        Power on the 
   13b34:	72616f62 6e752064 206c6974 2044454c     board until LED 
   13b44:	696c2031 73746867 00707520 20200a0d     1 lights up...  
   13b54:	20202020 20202020 20202020 20202020                     
   13b64:	74202020 6e69206f 61636964 63206574        to indicate c
   13b74:	656e6e6f 6e697463 69772067 70206874     onnecting with p
   13b84:	2e726565 00000000 20200a0d 20202020     eer.......      
   13b94:	20202020 20202020 20202020 50202020                    P
   13ba4:	73736572 20575320 74747542 74206e6f     ress SW Button t
   13bb4:	7262206f 6364616f 20747361 7373656d     o broadcast mess
   13bc4:	2e656761 00000000 20200a0d 20202020     age.......      
   13bd4:	20202020 20202020 20202020 4c202020                    L
   13be4:	31204445 6c697720 6562206c 676f7420     ED 1 will be tog
   13bf4:	64656c67 6f707520 6572206e 76696563     gled upon receiv
   13c04:	20676e69 7373656d 73656761 0000202e     ing messages. ..
   13c14:	000d0a0d 75636553 20646572 00000000     ....Secured ....
   13c24:	616f7242 73616364 61502074 74656b63     Broadcast Packet
   13c34:	74697720 53522068 00204953 63696e55      with RSSI .Unic
   13c44:	20747361 6b636150 77207465 20687469     ast Packet with 
   13c54:	49535352 00000020 78323025 00000000     RSSI ...%02x....
   13c64:	6f726620 0000206d 00007825 ff00203a      from ..%x..: ..
   13c74:	3144454c 00000000 3164656c 00000000     LED1....led1....
   13c84:	4f495047 00000031 6f697067 00000031     GPIO1...gpio1...
   13c94:	4f495047 00000032 6f697067 ffff0032     GPIO2...gpio2...
   13ca4:	74530a0d 65747261 69572064 656c6572     ..Started Wirele
   13cb4:	43207373 756d6d6f 6163696e 6e6f6974     ss Communication
   13cc4:	206e6f20 6e616843 206c656e 00000000      on Channel ....
   13cd4:	ff007525 0a0d0a0d 4120794d 65726464     %u......My Addre
   13ce4:	203a7373 00007830 41502020 3a44494e     ss: 0x..  PANID:
   13cf4:	00783020 68432020 656e6e61 00203a6c      0x.  Channel: .
   13d04:	6f430a0d 63656e6e 6e6f6974 65500920     ..Connection .Pe
   13d14:	6f4c7265 6441676e 73657264 50092073     erLongAddress .P
   13d24:	49726565 0d6f666e 00000000 00090909     eerInfo.........
   13d34:	0000742f 0a0d0a0d 6e6e6f43 69746365     /t......Connecti
   13d44:	20206e6f 50202020 4c726565 41676e6f     on     PeerLongA
   13d54:	65726464 20207373 50202020 49726565     ddress     PeerI
   13d64:	0d6f666e 00000000 20202020 20202020     nfo.....        
   13d74:	20202020 00000020 20202020 ffffff00          ...    ....
   13d84:	6f636552 63656e6e 0a646574 ffff000d     Reconnected.....
   13d94:	41500a0d 3a44494e 00000000 61684320     ..PANID:.... Cha
   13da4:	6c656e6e 0000003a 0000fdd0 0000fda0     nnel:...........
   13db4:	0000fdb2 0000fcf4 0000fdb2 0000fd96     ................
   13dc4:	0000fdb2 0000fcf4 0000fda0 0000fda0     ................
   13dd4:	0000fd96 0000fcf4 0000fcfc 0000fcfc     ................
   13de4:	0000fcfc 0000fdb8 0000fda0 0000fda0     ................
   13df4:	0000fd74 0000fe58 0000fd74 0000fd96     t...X...t.......
   13e04:	0000fd74 0000fe58 0000fda0 0000fda0     t...X...........
   13e14:	0000fd96 0000fe58 0000fcfc 0000fcfc     ....X...........
   13e24:	0000fcfc 0000fe62 00010c40 00010c22     ....b...@..."...
   13e34:	00010bdc 00010afa 00010bdc 00010c14     ................
   13e44:	00010bdc 00010afa 00010c22 00010c22     ........"..."...
   13e54:	00010c14 00010afa 00010af2 00010af2     ................
   13e64:	00010af2 00010e58 000112a0 00011160     ....X.......`...
   13e74:	00011160 0001115c 00011278 00011278     `...\...x...x...
   13e84:	0001126a 0001115c 00011278 0001126a     j...\...x...j...
   13e94:	00011278 0001115c 00011280 00011280     x...\...........
   13ea4:	00011280 00011484 7566202c 6974636e     ........, functi
   13eb4:	203a6e6f 73736100 69747265 22206e6f     on: .assertion "
   13ec4:	20227325 6c696166 203a6465 656c6966     %s" failed: file
   13ed4:	73252220 6c202c22 20656e69 73256425      "%s", line %d%s
   13ee4:	000a7325                                %s..

00013ee8 <_global_impure_ptr>:
   13ee8:	20000038 2b302d23 6c680020 6665004c     8.. #-0+ .hlL.ef
   13ef8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   13f08:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   13f18:	64636261 ff006665                       abcdef..

00013f20 <__sf_fake_stderr>:
	...

00013f40 <__sf_fake_stdin>:
	...

00013f60 <__sf_fake_stdout>:
	...

00013f80 <_init>:
   13f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f82:	46c0      	nop			; (mov r8, r8)
   13f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13f86:	bc08      	pop	{r3}
   13f88:	469e      	mov	lr, r3
   13f8a:	4770      	bx	lr

00013f8c <__init_array_start>:
   13f8c:	000061c1 	.word	0x000061c1

00013f90 <_fini>:
   13f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f92:	46c0      	nop			; (mov r8, r8)
   13f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   13f96:	bc08      	pop	{r3}
   13f98:	469e      	mov	lr, r3
   13f9a:	4770      	bx	lr

00013f9c <__fini_array_start>:
   13f9c:	00006199 	.word	0x00006199
